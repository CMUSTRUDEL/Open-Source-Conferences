Title: Incompatibility and pain - a perspective from Xen upstream
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Ian Jackson

At: DebConf12
https://debconf12.debconf.org/
Room: Aula Magna
Scheduled start: 2012-07-12 16:00:00
Captions: 
	00:00:00,850 --> 00:00:07,419
happy we're passing on to you loss I'm

00:00:05,729 --> 00:00:11,200
going to go over some of the

00:00:07,419 --> 00:00:13,690
consequences and some of the approaches

00:00:11,200 --> 00:00:16,150
that we've used to mitigate the

00:00:13,690 --> 00:00:17,530
difficulties and I'm hoping also that

00:00:16,150 --> 00:00:21,100
some of you here might have some useful

00:00:17,530 --> 00:00:25,500
suggestions either for the Zen packaging

00:00:21,100 --> 00:00:28,840
in Debian or for us as upstream so now

00:00:25,500 --> 00:00:30,820
let me show you an overview of a typical

00:00:28,840 --> 00:00:33,760
Zen system with the key components

00:00:30,820 --> 00:00:40,449
broken out don't worry there's not going

00:00:33,760 --> 00:00:42,819
to be 46 slides like this one so firstly

00:00:40,449 --> 00:00:45,940
I have to make a note about terminology

00:00:42,819 --> 00:00:47,739
we use the term Dom noughts to refer to

00:00:45,940 --> 00:00:50,229
the first privileged guest operating

00:00:47,739 --> 00:00:52,059
system which in most systems does all

00:00:50,229 --> 00:00:57,569
the backend work of managing the system

00:00:52,059 --> 00:01:02,859
and it's real hardware many of you who

00:00:57,569 --> 00:01:04,869
won't sorry right yes many of you even

00:01:02,859 --> 00:01:07,479
if your Zen users probably won't be

00:01:04,869 --> 00:01:11,380
familiar with several of the boxes on

00:01:07,479 --> 00:01:15,490
this diagram particularly there's some

00:01:11,380 --> 00:01:18,399
internal pieces which are part of our

00:01:15,490 --> 00:01:20,109
Zen upstream code and you'll see I've

00:01:18,399 --> 00:01:21,340
drawn this blue box around the code for

00:01:20,109 --> 00:01:23,740
which we're upstream and it's a rather

00:01:21,340 --> 00:01:27,579
unfortunate shape and that's where many

00:01:23,740 --> 00:01:29,950
of our difficulties come from so the

00:01:27,579 --> 00:01:32,500
code for which way upstream comes in two

00:01:29,950 --> 00:01:34,240
big pieces the first is the Xen

00:01:32,500 --> 00:01:37,689
hypervisor itself right here at the

00:01:34,240 --> 00:01:39,820
bottom which you will have all heard of

00:01:37,689 --> 00:01:42,670
and the second is this collection of

00:01:39,820 --> 00:01:45,429
libraries scripts demons supporting

00:01:42,670 --> 00:01:47,289
tools etc which allow the host to do the

00:01:45,429 --> 00:01:51,280
work of managing and supporting the

00:01:47,289 --> 00:01:53,530
system and all the guests upstream we

00:01:51,280 --> 00:01:55,090
call this part the Zen tools

00:01:53,530 --> 00:01:58,630
unfortunately this is a bit confusing

00:01:55,090 --> 00:02:02,679
because the there's also the Debian Zen

00:01:58,630 --> 00:02:04,749
tools package I'm going to keep using

00:02:02,679 --> 00:02:07,149
the upstream terminology here so you'll

00:02:04,749 --> 00:02:10,210
just have to bear with me on that the

00:02:07,149 --> 00:02:12,100
Zen debian Zen Tools package is a little

00:02:10,210 --> 00:02:13,690
thing up here which is sort of

00:02:12,100 --> 00:02:16,300
provisioning utility

00:02:13,690 --> 00:02:23,290
which uses all the Zen tools that code

00:02:16,300 --> 00:02:26,200
so together with these higher layers

00:02:23,290 --> 00:02:32,880
like Zen tools package and OpenStack and

00:02:26,200 --> 00:02:36,190
whatever Zakir maybe we call everything

00:02:32,880 --> 00:02:41,530
above the hypervisor and the Domhnall

00:02:36,190 --> 00:02:44,290
kernel the tool stagg so as you can see

00:02:41,530 --> 00:02:46,720
from this diagram there are some

00:02:44,290 --> 00:02:48,370
components of the system for which we're

00:02:46,720 --> 00:02:52,750
not upstream and there are three really

00:02:48,370 --> 00:02:56,410
important parts of that the first of

00:02:52,750 --> 00:02:57,940
these is the guest operating system so

00:02:56,410 --> 00:03:00,370
obviously this is the whole point of the

00:02:57,940 --> 00:03:03,430
exercise and so in some ways it's the

00:03:00,370 --> 00:03:04,900
most important but it's also the easiest

00:03:03,430 --> 00:03:09,480
from a compatibility point of view at

00:03:04,900 --> 00:03:12,490
least for a downstream like like Debian

00:03:09,480 --> 00:03:13,900
so the guest might be another install of

00:03:12,490 --> 00:03:15,730
the same Debian version is running in

00:03:13,900 --> 00:03:18,130
Dom nodes or it might be some other free

00:03:15,730 --> 00:03:20,230
operating system which has been

00:03:18,130 --> 00:03:23,380
specially adapted paravirtualized as we

00:03:20,230 --> 00:03:26,230
call it for running in Zen so we call

00:03:23,380 --> 00:03:29,260
that a PV guest or it might be an

00:03:26,230 --> 00:03:32,410
unmodified operating system for which

00:03:29,260 --> 00:03:34,360
we're providing a full PC emulation so

00:03:32,410 --> 00:03:37,200
like an atrium guest and that might even

00:03:34,360 --> 00:03:39,400
be a proprietary system such as Windows

00:03:37,200 --> 00:03:41,740
now the point of Zen is to provide a

00:03:39,400 --> 00:03:43,270
reliable and stable platform and to

00:03:41,740 --> 00:03:45,070
decouple guest operating systems from

00:03:43,270 --> 00:03:47,410
hardware and small software lying all

00:03:45,070 --> 00:03:50,739
this stuff here in blue and the lower

00:03:47,410 --> 00:03:52,810
layers and often the guest will be run

00:03:50,739 --> 00:03:54,370
by a different person organization to

00:03:52,810 --> 00:03:56,770
the host either in some kind of cloud

00:03:54,370 --> 00:03:58,450
facility or because you're hosting

00:03:56,770 --> 00:04:00,550
internal sysadmin providers are

00:03:58,450 --> 00:04:02,820
different to the guest that means so

00:04:00,550 --> 00:04:05,200
we've traditionally had a very strong

00:04:02,820 --> 00:04:07,810
compatibility guarantee guess which are

00:04:05,200 --> 00:04:09,520
written against all versions of Zen and

00:04:07,810 --> 00:04:11,950
work correctly they are supposed to work

00:04:09,520 --> 00:04:15,280
on future versions of Zen currently

00:04:11,950 --> 00:04:17,470
upstream supports guests written to run

00:04:15,280 --> 00:04:19,060
on previous versions going back to Zen

00:04:17,470 --> 00:04:23,350
three point naught which was released in

00:04:19,060 --> 00:04:26,350
2005 so that means we retain the ability

00:04:23,350 --> 00:04:27,220
to service all the old guest facing

00:04:26,350 --> 00:04:29,170
hyper calls

00:04:27,220 --> 00:04:30,670
the i/o facilities and memory management

00:04:29,170 --> 00:04:33,340
interfaces even if they've been replaced

00:04:30,670 --> 00:04:37,510
by something newer better faster less

00:04:33,340 --> 00:04:40,150
paying support and this compatibility

00:04:37,510 --> 00:04:42,100
guarantee goes even further for guests

00:04:40,150 --> 00:04:43,840
and Xen versions which support live

00:04:42,100 --> 00:04:45,580
migration we ain't support live

00:04:43,840 --> 00:04:47,710
migration of your guests from an old

00:04:45,580 --> 00:04:49,990
version of Xen to a newer one so if

00:04:47,710 --> 00:04:51,850
everything is working properly you

00:04:49,990 --> 00:04:53,920
should be able to upgrade your Zen host

00:04:51,850 --> 00:04:57,520
without even needing to reboot your

00:04:53,920 --> 00:04:59,500
guests and this migration facility means

00:04:57,520 --> 00:05:02,110
if you have multiple hosts and enough

00:04:59,500 --> 00:05:04,240
spare capacity you can do whatsapp he

00:05:02,110 --> 00:05:06,370
calls our rolling upgrade where you can

00:05:04,240 --> 00:05:08,620
upgrade your entire hosting platform one

00:05:06,370 --> 00:05:11,110
host at a time by migrating the guests

00:05:08,620 --> 00:05:13,770
off each host is its to be upgraded and

00:05:11,110 --> 00:05:16,150
then migrating the back again afterwards

00:05:13,770 --> 00:05:18,190
so actually meeting this compatibility

00:05:16,150 --> 00:05:20,950
promise from upstream point of view in

00:05:18,190 --> 00:05:22,900
every detail is quite tough and the most

00:05:20,950 --> 00:05:24,669
difficult part of it or one of the most

00:05:22,900 --> 00:05:27,660
difficult parts so we don't always know

00:05:24,669 --> 00:05:29,530
exactly how they all guests behave and

00:05:27,660 --> 00:05:32,910
sadly not all of the interface

00:05:29,530 --> 00:05:35,140
documentation was always perfect but

00:05:32,910 --> 00:05:37,660
almost all these guest interfaces have

00:05:35,140 --> 00:05:39,760
pretty good extension mechanisms so

00:05:37,660 --> 00:05:41,919
there are spare fields in instructs

00:05:39,760 --> 00:05:44,680
there's key value namespaces where we

00:05:41,919 --> 00:05:48,060
can add new keys there's a fair amount

00:05:44,680 --> 00:05:50,229
of capability negotiation mechanisms

00:05:48,060 --> 00:05:52,180
that's not always sufficient because

00:05:50,229 --> 00:05:54,430
guests may be buggy and even quite

00:05:52,180 --> 00:05:57,010
subtle changes can expose new bugs in

00:05:54,430 --> 00:05:59,440
guests but even when that happens we try

00:05:57,010 --> 00:06:01,600
to cope so for example a particular

00:05:59,440 --> 00:06:03,880
common kind of guest bug is that it gets

00:06:01,600 --> 00:06:07,060
partial or broken support for a shiny

00:06:03,880 --> 00:06:09,060
new Xen feature so then works fine on

00:06:07,060 --> 00:06:12,550
the old versions of Zane without feature

00:06:09,060 --> 00:06:13,000
but when you upgrade your platform then

00:06:12,550 --> 00:06:14,740
guest

00:06:13,000 --> 00:06:17,680
tries to use the new feature and stabs

00:06:14,740 --> 00:06:19,510
itself in the eyes so we have knobs that

00:06:17,680 --> 00:06:21,970
Zen administrator can twiddle for each

00:06:19,510 --> 00:06:24,040
guest to say well just don't advertise

00:06:21,970 --> 00:06:25,750
that feature so to work around that

00:06:24,040 --> 00:06:29,200
let's use size step those kind of guest

00:06:25,750 --> 00:06:31,780
by bugs so what this promise means in

00:06:29,200 --> 00:06:34,780
practice is that when we're doing

00:06:31,780 --> 00:06:35,890
upstream work we give forward

00:06:34,780 --> 00:06:38,020
compatibility if you get a lot of

00:06:35,890 --> 00:06:38,910
attention both in design implementation

00:06:38,020 --> 00:06:40,380
and

00:06:38,910 --> 00:06:42,210
of course it means we treat

00:06:40,380 --> 00:06:45,150
compatibility bugs as regressions which

00:06:42,210 --> 00:06:51,210
deserve a fix and backports and all

00:06:45,150 --> 00:06:53,190
those kind of things now there's one

00:06:51,210 --> 00:06:54,360
other difficulty with providing this

00:06:53,190 --> 00:06:56,910
guarantee which I'll be getting onto

00:06:54,360 --> 00:06:59,850
which is particular to hvm guess which

00:06:56,910 --> 00:07:04,380
causes pain for downstreams such as

00:06:59,850 --> 00:07:07,230
Debian and I'll get onto that later so

00:07:04,380 --> 00:07:09,270
the other big part of the system for

00:07:07,230 --> 00:07:15,200
which we're not upstream is the dominant

00:07:09,270 --> 00:07:18,030
kernel most sane installations use Linux

00:07:15,200 --> 00:07:21,120
there are other platforms that support

00:07:18,030 --> 00:07:24,750
Domhnall kernels but certainly in Debian

00:07:21,120 --> 00:07:26,850
the kernel available is Linux so many

00:07:24,750 --> 00:07:29,580
years we maintained a fork of Linux this

00:07:26,850 --> 00:07:31,500
is the Z no Linux that Ian was talking

00:07:29,580 --> 00:07:33,180
about which had intrusive changes the

00:07:31,500 --> 00:07:34,950
memory management system in Tromp

00:07:33,180 --> 00:07:38,490
handling hardware access and so forth

00:07:34,950 --> 00:07:41,160
and this became quite unsustainable as

00:07:38,490 --> 00:07:43,830
you might have predicted so nowadays

00:07:41,160 --> 00:07:45,780
since around line X 3 point naught all

00:07:43,830 --> 00:07:50,760
or almost all of this necessary code is

00:07:45,780 --> 00:07:53,220
in the line X upstream tree so now that

00:07:50,760 --> 00:07:56,520
the interface between the Dom node

00:07:53,220 --> 00:07:57,960
kernel and the hypervisor here is much

00:07:56,520 --> 00:08:02,700
broader than that provides the guest

00:07:57,960 --> 00:08:05,100
kernels and also the interface between

00:08:02,700 --> 00:08:09,300
the tool stack and the dominant kernel

00:08:05,100 --> 00:08:10,500
is relatively broad and this means that

00:08:09,300 --> 00:08:12,420
Dom naught needs to be able to brought

00:08:10,500 --> 00:08:15,180
all the facilities for direct access to

00:08:12,420 --> 00:08:17,040
guests needed by the management tools

00:08:15,180 --> 00:08:22,650
and it also needs to cooperate with Xen

00:08:17,040 --> 00:08:24,780
to manage all the hardware but because

00:08:22,650 --> 00:08:27,600
the way lonex is developed and the fact

00:08:24,780 --> 00:08:30,600
that users would you constantly need new

00:08:27,600 --> 00:08:33,030
versions of the dominant kernel for all

00:08:30,600 --> 00:08:34,590
sorts of reasons not really related to

00:08:33,030 --> 00:08:37,410
Zen like running on new hardware or

00:08:34,590 --> 00:08:39,780
fixing security bugs trying to maintain

00:08:37,410 --> 00:08:43,710
our own stable branch of Linux is a

00:08:39,780 --> 00:08:46,110
non-starter so instead we have a kind of

00:08:43,710 --> 00:08:47,220
reason we loose coupling here between

00:08:46,110 --> 00:08:50,220
the dominant kernel and the other

00:08:47,220 --> 00:08:51,990
components of the den system so we

00:08:50,220 --> 00:08:55,500
expect Xen and its tools to work with

00:08:51,990 --> 00:08:58,620
range of Domhnall kernels on the other

00:08:55,500 --> 00:08:59,640
hand this does mean that life is on the

00:08:58,620 --> 00:09:01,380
other hand life is a bit a little bit

00:08:59,640 --> 00:09:05,100
easier because we don't try to be bug

00:09:01,380 --> 00:09:08,399
compatible with bugs in all Domhnall

00:09:05,100 --> 00:09:10,529
kernels that is if a user is running a

00:09:08,399 --> 00:09:12,570
Zen system we expect them to be willing

00:09:10,529 --> 00:09:15,600
to run a kernel which has ten related

00:09:12,570 --> 00:09:17,940
bug fixes even for bugs which were

00:09:15,600 --> 00:09:19,790
exposed by a new version of Zen well

00:09:17,940 --> 00:09:22,140
after the kernel was released upstream

00:09:19,790 --> 00:09:24,149
so obviously we don't expect users to

00:09:22,140 --> 00:09:25,680
run these kernels themselves

00:09:24,149 --> 00:09:28,080
we aim to push the necessary changes

00:09:25,680 --> 00:09:30,480
into upstream line-x table branches and

00:09:28,080 --> 00:09:33,180
out to distros that way but that does

00:09:30,480 --> 00:09:37,950
mean that you can rely on users getting

00:09:33,180 --> 00:09:40,830
back ported kernel bug fixes so this

00:09:37,950 --> 00:09:43,740
tolerably loose coupling and all the up

00:09:40,830 --> 00:09:45,300
streaming of the mainstream Linux the

00:09:43,740 --> 00:09:47,430
code into mainstream Linux means you can

00:09:45,300 --> 00:09:50,399
use the same kernel for your Zen Dom

00:09:47,430 --> 00:09:52,920
naught as will boot on bare metal and as

00:09:50,399 --> 00:09:55,170
in was saying in Debian nowadays there's

00:09:52,920 --> 00:09:58,290
no longer any special Zen kernels just

00:09:55,170 --> 00:10:00,690
the standard 686 big mem or amd64 kernel

00:09:58,290 --> 00:10:06,930
is good to users endo naught or as a

00:10:00,690 --> 00:10:09,060
guest as you like so another important

00:10:06,930 --> 00:10:11,630
component of the traditional Zen system

00:10:09,060 --> 00:10:15,990
for which we're not upstream is Q mu

00:10:11,630 --> 00:10:17,370
here when we run unmodified guest

00:10:15,990 --> 00:10:18,980
operating systems we need to provide

00:10:17,370 --> 00:10:21,779
them with something looks like a PC and

00:10:18,980 --> 00:10:23,670
in particular we need to provide

00:10:21,779 --> 00:10:26,220
something looks like a screen a keyboard

00:10:23,670 --> 00:10:28,140
ID and network controller emulation of

00:10:26,220 --> 00:10:33,750
the underlying boss hardware like PCI

00:10:28,140 --> 00:10:35,730
and so forth for a long time that q

00:10:33,750 --> 00:10:37,649
project has been trying to provide this

00:10:35,730 --> 00:10:40,910
same thing in a different context so it

00:10:37,649 --> 00:10:43,440
was an obvious choice for reuse

00:10:40,910 --> 00:10:44,550
but when Zen first wanted to do

00:10:43,440 --> 00:10:46,079
something like this job the curie

00:10:44,550 --> 00:10:47,880
project was quite difficult to

00:10:46,079 --> 00:10:50,130
contribute to and the codebase itself

00:10:47,880 --> 00:10:52,920
made a lot of assumptions about the

00:10:50,130 --> 00:10:54,660
architecture of what the whole system

00:10:52,920 --> 00:10:57,480
was going to be and what the purpose of

00:10:54,660 --> 00:10:58,950
the q mu code was so the Zen developers

00:10:57,480 --> 00:11:00,630
at the time took a copy of the Q mu

00:10:58,950 --> 00:11:01,829
source code into the Zen tree and just

00:11:00,630 --> 00:11:04,310
hatch it up until it did what they

00:11:01,829 --> 00:11:06,110
wanted so

00:11:04,310 --> 00:11:07,910
that as you can imagine has been a bit

00:11:06,110 --> 00:11:10,160
of a problem so over the subsequent

00:11:07,910 --> 00:11:13,430
years that version of qmu which we now

00:11:10,160 --> 00:11:15,320
know upstream as qu Zhen traditional got

00:11:13,430 --> 00:11:18,500
important performance improvements

00:11:15,320 --> 00:11:19,940
important bug fixes security fixes who

00:11:18,500 --> 00:11:21,290
were made directly to the Zen version

00:11:19,940 --> 00:11:22,640
since upstream didn't have a secure

00:11:21,290 --> 00:11:26,360
juice malts process and I think they

00:11:22,640 --> 00:11:27,920
still don't we merge from upstream a

00:11:26,360 --> 00:11:30,610
couple of times and we did try to

00:11:27,920 --> 00:11:34,610
upstream some or all of the Zen changes

00:11:30,610 --> 00:11:36,020
but their number of factors made that

00:11:34,610 --> 00:11:40,339
that meant that this wasn't entirely

00:11:36,020 --> 00:11:42,170
successful inertia and an unwillingness

00:11:40,339 --> 00:11:46,670
to expand the scope with the Q mu

00:11:42,170 --> 00:11:49,490
project on QM use part were factors Paul

00:11:46,670 --> 00:11:50,990
communications really didn't help and we

00:11:49,490 --> 00:11:52,790
had a lack of effort and thought there

00:11:50,990 --> 00:11:54,770
were more important things to do so

00:11:52,790 --> 00:11:56,900
ultimately that didn't really come to

00:11:54,770 --> 00:12:00,800
very much at least not until a few years

00:11:56,900 --> 00:12:02,570
ago but things have changed now human

00:12:00,800 --> 00:12:03,860
project has been utterly revolutionized

00:12:02,570 --> 00:12:05,360
over the past few years and is

00:12:03,860 --> 00:12:07,700
incredibly fast moving a dynamic

00:12:05,360 --> 00:12:10,280
nowadays and we've been aggressively up

00:12:07,700 --> 00:12:12,950
streaming the changes necessary present

00:12:10,280 --> 00:12:16,839
so kami Zen traditional is now in the

00:12:12,950 --> 00:12:20,450
deep freeze but why do we need it at all

00:12:16,839 --> 00:12:23,030
well one reason is the new QM use then

00:12:20,450 --> 00:12:25,460
based on upstream is not quite ready the

00:12:23,030 --> 00:12:28,070
Zen fortitude release will still use q

00:12:25,460 --> 00:12:30,050
mu Zen traditional by default but we do

00:12:28,070 --> 00:12:33,260
expect the new upstream based q mu zone

00:12:30,050 --> 00:12:36,170
to be the default in zone 4.3 but a

00:12:33,260 --> 00:12:38,300
bigger reason is that we promised old

00:12:36,170 --> 00:12:40,880
guests would continue to run the

00:12:38,300 --> 00:12:42,110
emulated PC provided by modern QM use n

00:12:40,880 --> 00:12:44,360
is quite a different beast to that

00:12:42,110 --> 00:12:45,830
provided by Q mu Zen traditional Scott

00:12:44,360 --> 00:12:47,720
different device IDs and many of the

00:12:45,830 --> 00:12:51,020
devices the emulated chipset has been

00:12:47,720 --> 00:12:52,700
upgraded the new Q mu tree upstream Q mu

00:12:51,020 --> 00:12:54,530
can't read the save files generated by

00:12:52,700 --> 00:12:56,030
qme Zen traditional so guests can't be

00:12:54,530 --> 00:12:59,450
saved restored or migrated to the new

00:12:56,030 --> 00:13:01,130
one even worse many guest operating

00:12:59,450 --> 00:13:03,260
systems react very poorly to a complete

00:13:01,130 --> 00:13:04,700
motherboard and chassis swap which is

00:13:03,260 --> 00:13:06,860
what it would look like if you just

00:13:04,700 --> 00:13:09,200
upgraded to the new Q mu and rebooted it

00:13:06,860 --> 00:13:11,750
during a reboot even if they don't mind

00:13:09,200 --> 00:13:13,790
that in theory in practice the new setup

00:13:11,750 --> 00:13:14,890
might expose rafts of guest bugs which

00:13:13,790 --> 00:13:16,610
are very difficult to work around

00:13:14,890 --> 00:13:17,960
especially given that we're now much

00:13:16,610 --> 00:13:21,800
more closely coupled to the

00:13:17,960 --> 00:13:23,390
Stream qmu codebase and while in

00:13:21,800 --> 00:13:25,280
principle it might be theoretically

00:13:23,390 --> 00:13:27,590
possible for upstream based qmu to

00:13:25,280 --> 00:13:30,110
emulate the old one with sufficient if

00:13:27,590 --> 00:13:32,450
devs and runtime flags the resulting

00:13:30,110 --> 00:13:34,690
code would be very ugly very intrusive

00:13:32,450 --> 00:13:37,550
and not at all suitable for upstreaming

00:13:34,690 --> 00:13:40,580
it would be totally unsuitable for long

00:13:37,550 --> 00:13:42,920
term maintenance so we as the upstream

00:13:40,580 --> 00:13:46,070
intend to main QM use and traditional

00:13:42,920 --> 00:13:48,530
indefinitely that means that there are

00:13:46,070 --> 00:13:52,670
two versions of QM you in the Zen system

00:13:48,530 --> 00:13:55,250
the old one and the new one it's even

00:13:52,670 --> 00:13:56,870
worse because the lack of the because of

00:13:55,250 --> 00:13:59,780
the speed development of the QM you

00:13:56,870 --> 00:14:01,400
project and the lack of Zen focused QM

00:13:59,780 --> 00:14:02,930
you committers getting important

00:14:01,400 --> 00:14:05,600
features and changes into upstream can

00:14:02,930 --> 00:14:08,630
be rather slow so if I just give an

00:14:05,600 --> 00:14:10,790
example PCI passed through an important

00:14:08,630 --> 00:14:12,830
same feature for many years in GSN

00:14:10,790 --> 00:14:15,680
traditional took six to eight months to

00:14:12,830 --> 00:14:17,390
get into qmu upstream so we as the Zen

00:14:15,680 --> 00:14:20,120
upstream provide a version of well

00:14:17,390 --> 00:14:21,800
upstream qmu which is actually an

00:14:20,120 --> 00:14:23,540
upstream qmu with a lot of Zen related

00:14:21,800 --> 00:14:24,950
changes we have a policy of not

00:14:23,540 --> 00:14:26,180
committing anything into qmu Zen which

00:14:24,950 --> 00:14:29,870
we think wouldn't be suitable for

00:14:26,180 --> 00:14:32,000
upstream so in theory qmu Zen as we call

00:14:29,870 --> 00:14:34,670
it will be entirely suitable for use as

00:14:32,000 --> 00:14:35,960
a replacement for qmu but in practice we

00:14:34,670 --> 00:14:38,990
don't expect people to want to use our

00:14:35,960 --> 00:14:41,120
slightly funny branch and for one reason

00:14:38,990 --> 00:14:43,490
we don't do any knobs and related

00:14:41,120 --> 00:14:45,140
testing on it and it might be based on a

00:14:43,490 --> 00:14:47,420
different version of qmu and the one

00:14:45,140 --> 00:14:48,800
you'd use for other purposes so the net

00:14:47,420 --> 00:14:51,050
result is that to get full Zen

00:14:48,800 --> 00:14:53,210
functionality dis road like Debian needs

00:14:51,050 --> 00:14:55,700
to include two additional copies of QM

00:14:53,210 --> 00:14:58,790
you besides the normal Q mu and perhaps

00:14:55,700 --> 00:15:00,620
a different version for KVM as well and

00:14:58,790 --> 00:15:03,680
one of the versions used by Zen is

00:15:00,620 --> 00:15:05,060
ancient this is of course not the kind

00:15:03,680 --> 00:15:07,760
of thing that makes the Debian security

00:15:05,060 --> 00:15:10,460
team happy and of course it's by far the

00:15:07,760 --> 00:15:11,540
only by far from the only occurrence of

00:15:10,460 --> 00:15:13,940
this kind of thing in the Debbie and

00:15:11,540 --> 00:15:15,200
archive and at least in this case Debian

00:15:13,940 --> 00:15:18,050
can work with an upstream who still

00:15:15,200 --> 00:15:21,080
support all the versions that Debian

00:15:18,050 --> 00:15:22,640
needs to ship we as upstream do security

00:15:21,080 --> 00:15:25,010
and stability patches and commits a

00:15:22,640 --> 00:15:29,540
compatibility fixes even for the solidly

00:15:25,010 --> 00:15:30,740
frozen qmu Zen traditional so all given

00:15:29,540 --> 00:15:31,670
all that is good to see there are some

00:15:30,740 --> 00:15:33,770
efforts being made

00:15:31,670 --> 00:15:35,420
help Debian managed code duplication and

00:15:33,770 --> 00:15:36,950
forking more effectively for example by

00:15:35,420 --> 00:15:39,500
searching the archive or similar code to

00:15:36,950 --> 00:15:43,280
ferret out copies that we didn't know

00:15:39,500 --> 00:15:45,530
about but ultimately in this case the

00:15:43,280 --> 00:15:47,480
real work of doing support particularly

00:15:45,530 --> 00:15:50,510
security support for multiple versions

00:15:47,480 --> 00:15:52,160
is necessary there's no other way to

00:15:50,510 --> 00:15:55,480
avoid breaking those old perhaps mob

00:15:52,160 --> 00:15:57,620
hard to modify guest operating systems

00:15:55,480 --> 00:15:58,730
so here we can see one of the key ways

00:15:57,620 --> 00:16:00,590
that we do with the problem of

00:15:58,730 --> 00:16:02,120
interfacing compatibility just provide

00:16:00,590 --> 00:16:04,000
both versions of the software and use

00:16:02,120 --> 00:16:06,110
whichever one is appropriate somehow and

00:16:04,000 --> 00:16:07,700
in principle this is the same approach

00:16:06,110 --> 00:16:09,290
that's done in a more formal systematic

00:16:07,700 --> 00:16:11,470
way with NEC library with a reasonably

00:16:09,290 --> 00:16:13,370
stable API we're all familiar with

00:16:11,470 --> 00:16:14,780
Debian's well-established mature

00:16:13,370 --> 00:16:16,310
approach to this shipping perhaps two or

00:16:14,780 --> 00:16:19,730
three versions of any library in one

00:16:16,310 --> 00:16:22,550
release I think Debian could really

00:16:19,730 --> 00:16:24,050
benefit from better tools not just for

00:16:22,550 --> 00:16:25,700
spotting embedded copies and packages

00:16:24,050 --> 00:16:27,860
which are Forks but also for cross

00:16:25,700 --> 00:16:29,360
porting changes tracking which embedded

00:16:27,860 --> 00:16:31,130
copies came from which versions of

00:16:29,360 --> 00:16:32,930
upstream which had which essential

00:16:31,130 --> 00:16:40,490
security fixes and all that kind of

00:16:32,930 --> 00:16:42,650
thing so enough about all that it's one

00:16:40,490 --> 00:16:47,570
other difficulty which shows up in this

00:16:42,650 --> 00:16:49,610
diagram the Xen project upstream doesn't

00:16:47,570 --> 00:16:51,740
promise the who run run words of one

00:16:49,610 --> 00:16:53,810
word one version of the hypervisor with

00:16:51,740 --> 00:16:55,580
different versions of the tools that is

00:16:53,810 --> 00:16:56,900
the use of space support management

00:16:55,580 --> 00:16:58,520
software will only work with the

00:16:56,900 --> 00:17:01,640
corresponding hypervisor and that's this

00:16:58,520 --> 00:17:07,250
thick version locked line all the way

00:17:01,640 --> 00:17:09,860
down there we don't break compatibility

00:17:07,250 --> 00:17:11,180
with in a stable release but in general

00:17:09,860 --> 00:17:13,280
there's no compatibility from one

00:17:11,180 --> 00:17:15,260
release to the next the reason for this

00:17:13,280 --> 00:17:17,300
is the management interface the

00:17:15,260 --> 00:17:19,040
hypervisor is complicated and closely

00:17:17,300 --> 00:17:22,580
dependent on the features available in

00:17:19,040 --> 00:17:23,600
particular Xen release this means that

00:17:22,580 --> 00:17:26,030
both we want to be able to add new

00:17:23,600 --> 00:17:27,830
interfaces such as new management hyper

00:17:26,030 --> 00:17:28,550
calls and we want to be able to discard

00:17:27,830 --> 00:17:31,340
old ones

00:17:28,550 --> 00:17:33,050
and this whole situation leads to a

00:17:31,340 --> 00:17:35,090
similar problem to the one with Linux

00:17:33,050 --> 00:17:37,220
and you dev when you're upgrading you

00:17:35,090 --> 00:17:40,340
want to upgrade the tools on disk in the

00:17:37,220 --> 00:17:42,830
file system and the hypervisor in /boot

00:17:40,340 --> 00:17:44,270
if you do this in the naive way there

00:17:42,830 --> 00:17:45,410
will be a time when the two versions on

00:17:44,270 --> 00:17:48,070
disk don't match

00:17:45,410 --> 00:17:49,940
won't be able to work if it's rebooted

00:17:48,070 --> 00:17:53,300
luckily this doesn't make the system

00:17:49,940 --> 00:17:55,610
completely unbeatable and impede you

00:17:53,300 --> 00:17:57,140
fixing it but it might well be unable to

00:17:55,610 --> 00:18:00,290
run guests at all or the guests might

00:17:57,140 --> 00:18:03,200
break and also makes it difficult just

00:18:00,290 --> 00:18:05,510
to try out the new version if the new

00:18:03,200 --> 00:18:07,280
version doesn't work you have to fish

00:18:05,510 --> 00:18:12,200
out some old packages from somewhere and

00:18:07,280 --> 00:18:14,270
install them so the Debian Zen

00:18:12,200 --> 00:18:16,430
maintained errs have arranged to allow

00:18:14,270 --> 00:18:18,500
Co installation of different versions of

00:18:16,430 --> 00:18:19,670
the Zen tools now our upstream built

00:18:18,500 --> 00:18:22,130
system doesn't support this particularly

00:18:19,670 --> 00:18:24,200
well and I applaud the efforts of the

00:18:22,130 --> 00:18:28,180
Sen maintained as in Debian to sort this

00:18:24,200 --> 00:18:30,590
out so the Debian packaging for Zen

00:18:28,180 --> 00:18:33,470
edits all the paths to contain the same

00:18:30,590 --> 00:18:35,750
version number and there's wrappers for

00:18:33,470 --> 00:18:37,040
all of the Zen entry points which spot

00:18:35,750 --> 00:18:40,210
which version of the hypervisor was

00:18:37,040 --> 00:18:42,650
booted and run the right set of binaries

00:18:40,210 --> 00:18:45,590
so this compatibility rule seems quite

00:18:42,650 --> 00:18:47,810
restrictive and you might say well we

00:18:45,590 --> 00:18:49,790
should be more relaxed about it but even

00:18:47,810 --> 00:18:51,370
if we upstream spent more effort on this

00:18:49,790 --> 00:18:53,600
area it's not clear how much would help

00:18:51,370 --> 00:18:56,390
the most obvious improved compatibility

00:18:53,600 --> 00:18:58,130
guarantee would be to be using the tools

00:18:56,390 --> 00:19:01,430
from Zen version in with a hypervisor

00:18:58,130 --> 00:19:04,310
from Zen version n plus one so relaxing

00:19:01,430 --> 00:19:05,870
this line here on the diagram but I

00:19:04,310 --> 00:19:08,030
wouldn't do very much good because

00:19:05,870 --> 00:19:09,680
firstly destroyed like Debian releases

00:19:08,030 --> 00:19:11,810
less often than Xen upstream will still

00:19:09,680 --> 00:19:13,490
have the problem because versions of Zen

00:19:11,810 --> 00:19:15,380
in two subsequent Debian releases would

00:19:13,490 --> 00:19:17,510
often differ by more than one sane

00:19:15,380 --> 00:19:20,600
release and even for a distro which

00:19:17,510 --> 00:19:22,520
releases less more often then or if we

00:19:20,600 --> 00:19:24,680
offer the longer compatibility period

00:19:22,520 --> 00:19:26,690
that still be a complicated upgrade path

00:19:24,680 --> 00:19:28,190
you'd have to make sure to install and

00:19:26,690 --> 00:19:31,520
boot the new hypervisor first before

00:19:28,190 --> 00:19:32,900
upgrading the tools so in practice Zen

00:19:31,520 --> 00:19:34,640
will probably anyway you have to use the

00:19:32,900 --> 00:19:38,770
capability to Co install different tools

00:19:34,640 --> 00:19:38,770
versions and use the appropriate one

00:19:39,130 --> 00:19:42,860
there's one other big transition which

00:19:41,390 --> 00:19:47,410
doesn't show up so clearly in this

00:19:42,860 --> 00:19:50,540
diagram so the old Xindi daemon here

00:19:47,410 --> 00:19:53,620
which formed the core of many of the old

00:19:50,540 --> 00:19:55,700
Zen tool stacks is being phased out

00:19:53,620 --> 00:19:57,710
mostly this is because it's a terrible

00:19:55,700 --> 00:19:59,240
mess internally to the point where not

00:19:57,710 --> 00:20:00,530
only does nobody understand it

00:19:59,240 --> 00:20:04,250
there's probably not even possible to

00:20:00,530 --> 00:20:06,080
understand while remaining sane also it

00:20:04,250 --> 00:20:07,940
implements in a reusable non-reusable

00:20:06,080 --> 00:20:10,640
way a good deal of the functionality

00:20:07,940 --> 00:20:13,550
wanted by other tool stacks so one

00:20:10,640 --> 00:20:16,220
particular such tool stack is zappy over

00:20:13,550 --> 00:20:18,230
there you can see which is a

00:20:16,220 --> 00:20:21,200
sophisticated API forming the core of

00:20:18,230 --> 00:20:23,390
what's known as xcp a Zen cloud platform

00:20:21,200 --> 00:20:27,380
which is the free software release of

00:20:23,390 --> 00:20:31,580
Citrix XenServer product and now in

00:20:27,380 --> 00:20:33,740
Debian as project Kronos SAP is used by

00:20:31,580 --> 00:20:36,620
orchestration layer such as OpenStack

00:20:33,740 --> 00:20:39,500
and cloud stack and it's going to be

00:20:36,620 --> 00:20:44,810
shipped in wheezy another intended user

00:20:39,500 --> 00:20:48,740
of this is in the wrong place so we're

00:20:44,810 --> 00:20:52,160
replacing Xindi with the c library known

00:20:48,740 --> 00:20:54,200
as lives in light or live excel this the

00:20:52,160 --> 00:20:56,210
command-line tool which is used by many

00:20:54,200 --> 00:20:58,040
Zen users to manage domains XM is being

00:20:56,210 --> 00:21:01,550
replaced by a mostly compatible rewrite

00:20:58,040 --> 00:21:04,130
called excel and the intent here you see

00:21:01,550 --> 00:21:08,450
is that users such as Debian's send

00:21:04,130 --> 00:21:12,290
tools package will find that Excel and

00:21:08,450 --> 00:21:13,970
XM are suitably compatible so this is

00:21:12,290 --> 00:21:15,980
coming nicely coming along nicely in the

00:21:13,970 --> 00:21:17,600
upstream tree we're at a preview of it

00:21:15,980 --> 00:21:20,750
in zone 4.1 which is going to be in

00:21:17,600 --> 00:21:22,130
wheezy and is then 4.2 live excel will

00:21:20,750 --> 00:21:24,530
have an api which we intend to support

00:21:22,130 --> 00:21:28,550
in the future in a backwards compatible

00:21:24,530 --> 00:21:33,500
way sadly a bi compatibility is still

00:21:28,550 --> 00:21:35,450
beyond us so users of the debian

00:21:33,500 --> 00:21:37,130
centel's package and its utilities like

00:21:35,450 --> 00:21:39,800
Zen create image should find that the

00:21:37,130 --> 00:21:41,810
generated guest config files are all

00:21:39,800 --> 00:21:43,940
compatible with the new excel utility

00:21:41,810 --> 00:21:46,850
and you can use excel pretty much like

00:21:43,940 --> 00:21:48,710
XM so your ad hoc high-level machinery

00:21:46,850 --> 00:21:51,050
shouldn't need too much adjustment if

00:21:48,710 --> 00:21:52,820
any at all and we spent considerable

00:21:51,050 --> 00:21:55,490
effort trying to figure out what's ND

00:21:52,820 --> 00:21:57,190
does and reproducing its behavior so far

00:21:55,490 --> 00:21:59,540
as it's comprehensible and reasonable

00:21:57,190 --> 00:22:01,640
the results aren't perfect from a

00:21:59,540 --> 00:22:03,020
compatibility point of view but we hope

00:22:01,640 --> 00:22:04,880
that in any particular system the

00:22:03,020 --> 00:22:06,710
changes need to use excel rather than XM

00:22:04,880 --> 00:22:12,680
will be minor or hopefully completely

00:22:06,710 --> 00:22:12,950
absent one exception to this is the Zen

00:22:12,680 --> 00:22:16,220
D

00:22:12,950 --> 00:22:19,210
manage domains facility which you invoke

00:22:16,220 --> 00:22:22,070
by saying XM new rather than XM create

00:22:19,210 --> 00:22:23,990
we don't think many Debian users are

00:22:22,070 --> 00:22:26,270
using this or indeed many users at all

00:22:23,990 --> 00:22:29,720
the functionality like this is better

00:22:26,270 --> 00:22:33,940
provided for in other ways the most

00:22:29,720 --> 00:22:36,530
obvious is the init script based

00:22:33,940 --> 00:22:40,280
automatic starting setup which is

00:22:36,530 --> 00:22:43,130
shipped in Debian for some time and if

00:22:40,280 --> 00:22:45,490
that's not sufficiently sophisticated we

00:22:43,130 --> 00:22:47,780
suggest using a more sophisticated

00:22:45,490 --> 00:22:53,960
management layer such as a pea or

00:22:47,780 --> 00:22:55,760
OpenStack so you if you're as MD and X n

00:22:53,960 --> 00:22:57,320
user we'd really like to encourage you

00:22:55,760 --> 00:23:01,790
to take a look at the new excel tool

00:22:57,320 --> 00:23:04,460
stack in wheezy if you use Zen D

00:23:01,790 --> 00:23:06,110
directly rather than via XM or use XM in

00:23:04,460 --> 00:23:06,680
some way which you think might be

00:23:06,110 --> 00:23:08,660
unusual

00:23:06,680 --> 00:23:10,250
you should check right now that live

00:23:08,660 --> 00:23:13,190
Excel and Excel meet your needs

00:23:10,250 --> 00:23:14,750
centi is pretty much dead now as far as

00:23:13,190 --> 00:23:17,090
development goes and we're probably

00:23:14,750 --> 00:23:20,000
going to remove it in Xen 4.3 or maybe

00:23:17,090 --> 00:23:22,100
4.4 probably therefore it won't be in

00:23:20,000 --> 00:23:23,600
wheezy plus one so if there's important

00:23:22,100 --> 00:23:25,040
features missing from lib Excel and

00:23:23,600 --> 00:23:33,710
Excel we need to know about it really

00:23:25,040 --> 00:23:36,530
soon so one of the other users of lib

00:23:33,710 --> 00:23:38,630
Excel intended is live verse which is a

00:23:36,530 --> 00:23:40,850
bit more complicated problem I know

00:23:38,630 --> 00:23:43,280
libvirt isn't very big in Debian more of

00:23:40,850 --> 00:23:45,890
a Red Hat thing Bob will talk about it

00:23:43,280 --> 00:23:50,300
here briefly I'm not much of an expert

00:23:45,890 --> 00:23:54,190
in it so if anyone is to speak up anyway

00:23:50,300 --> 00:23:56,870
our intent is that the libvirt driver

00:23:54,190 --> 00:23:59,990
fazenda driver will be linked against

00:23:56,870 --> 00:24:01,490
live excel so the live vert demon itself

00:23:59,990 --> 00:24:03,380
will be linked transitively against a

00:24:01,490 --> 00:24:06,790
particular Xen version and we may need

00:24:03,380 --> 00:24:08,990
to provide multiple versions of that too

00:24:06,790 --> 00:24:11,210
so to try to make all of this somewhat

00:24:08,990 --> 00:24:14,210
less painful we've been working quite

00:24:11,210 --> 00:24:16,730
hard to ensure that at least in the four

00:24:14,210 --> 00:24:21,320
or two's release we've got api

00:24:16,730 --> 00:24:23,050
compatibility in d of excel and indeed

00:24:21,320 --> 00:24:25,850
the command-line compatibility with XM

00:24:23,050 --> 00:24:26,440
so i hope i've given a flavor of some of

00:24:25,850 --> 00:24:30,669
the difficulty

00:24:26,440 --> 00:24:33,730
face where the upstream for quite a

00:24:30,669 --> 00:24:34,629
mature and sophisticated system and so

00:24:33,730 --> 00:24:36,610
we've had to take some different

00:24:34,629 --> 00:24:38,620
approaches for some of the interfaces

00:24:36,610 --> 00:24:41,049
and some of the layers so if anybody's

00:24:38,620 --> 00:24:42,610
got any suggestions for how to how

00:24:41,049 --> 00:24:45,549
either Debian or upstream can do things

00:24:42,610 --> 00:24:48,190
better and make our other people's lives

00:24:45,549 --> 00:25:00,190
easier please do speak up so any

00:24:48,190 --> 00:25:03,480
questions questions you're all brains

00:25:00,190 --> 00:25:03,480
imploded by my diagram

00:25:13,200 --> 00:25:15,830
nothing

00:25:15,840 --> 00:25:26,040
anyone on IRC okay well thank you very

00:25:24,510 --> 00:25:30,790
much

00:25:26,040 --> 00:25:30,790

YouTube URL: https://www.youtube.com/watch?v=f8TRxVz8I2Q


