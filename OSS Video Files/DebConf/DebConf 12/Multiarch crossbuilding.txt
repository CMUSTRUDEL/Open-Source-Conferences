Title: Multiarch crossbuilding
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Wookey

At: DebConf12
https://debconf12.debconf.org/
Room: Aula Magna
Scheduled start: 2012-07-10 10:00:00
Captions: 
	00:00:00,000 --> 00:00:10,920
arts crows building talk and please

00:00:02,879 --> 00:00:18,060
welcome to the presenters today it's

00:00:10,920 --> 00:00:21,210
really not gonna be that good okay so

00:00:18,060 --> 00:00:23,340
today we have a exciting all-day session

00:00:21,210 --> 00:00:26,369
of Cross building multi arch and arms

00:00:23,340 --> 00:00:30,900
stuff it's gonna be great

00:00:26,369 --> 00:00:34,140
so I get start so the idea is we'll have

00:00:30,900 --> 00:00:36,719
a talk now where I basically present

00:00:34,140 --> 00:00:38,460
what's the current state of affairs in

00:00:36,719 --> 00:00:41,040
what works and what doesn't and how to

00:00:38,460 --> 00:00:44,280
use the all this marvelous new tech

00:00:41,040 --> 00:00:46,649
which kind of works and then the next

00:00:44,280 --> 00:00:48,329
session I want to talk about some of the

00:00:46,649 --> 00:00:49,829
things that are still broken and what

00:00:48,329 --> 00:00:52,500
exactly we think we should be doing

00:00:49,829 --> 00:00:55,530
about it and lots of things we could do

00:00:52,500 --> 00:00:57,149
and there's a question of how much extra

00:00:55,530 --> 00:00:59,399
work to impose another maintainer is

00:00:57,149 --> 00:01:04,710
what we think we can get away with and

00:00:59,399 --> 00:01:07,860
so on so I'll just tell you a bit about

00:01:04,710 --> 00:01:10,320
how we got to where we are and the

00:01:07,860 --> 00:01:12,450
current infrastructure that's been built

00:01:10,320 --> 00:01:14,970
to give us some idea of what works and

00:01:12,450 --> 00:01:17,340
what doesn't how the new multi arch

00:01:14,970 --> 00:01:19,759
cross building works as opposed to the

00:01:17,340 --> 00:01:23,310
old cross building ways of doing things

00:01:19,759 --> 00:01:27,060
and some details about the mechanisms

00:01:23,310 --> 00:01:31,619
involved all the things which still

00:01:27,060 --> 00:01:34,049
don't work and why where we've got to

00:01:31,619 --> 00:01:36,360
and then there's a kind of sub talk

00:01:34,049 --> 00:01:38,369
which is basically johannes showers

00:01:36,360 --> 00:01:39,810
bootstrapping work so technically

00:01:38,369 --> 00:01:41,490
bootstrapping is separate from cross

00:01:39,810 --> 00:01:48,140
building except that in practice it

00:01:41,490 --> 00:01:50,640
isn't so they go together quite well so

00:01:48,140 --> 00:01:53,960
for those of you how many people here

00:01:50,640 --> 00:01:53,960
know all about this already

00:01:55,070 --> 00:02:00,750
about half okay so we always have to

00:01:59,640 --> 00:02:02,549
have this at the beginning because the

00:02:00,750 --> 00:02:04,590
terminology is incredibly confusing and

00:02:02,549 --> 00:02:07,110
anybody who hasn't done a lot of it will

00:02:04,590 --> 00:02:09,899
be confused so this is the new

00:02:07,110 --> 00:02:12,270
terminology for build machines and host

00:02:09,899 --> 00:02:13,280
machines and target machines so when we

00:02:12,270 --> 00:02:14,720
say hosts we don't

00:02:13,280 --> 00:02:16,850
the machine you're building on we mean

00:02:14,720 --> 00:02:18,260
the thing you're building for when we

00:02:16,850 --> 00:02:19,730
say build we mean the thing you're

00:02:18,260 --> 00:02:21,800
building on not the thing you're

00:02:19,730 --> 00:02:24,380
building for obvious isn't it

00:02:21,800 --> 00:02:28,250
and target you only use when talking

00:02:24,380 --> 00:02:30,709
about compilers which build code for a

00:02:28,250 --> 00:02:33,260
particular thing but can build it on

00:02:30,709 --> 00:02:35,540
another architecture so most of this is

00:02:33,260 --> 00:02:36,860
all about build and host host is what

00:02:35,540 --> 00:02:40,880
you're building for builders what you're

00:02:36,860 --> 00:02:42,590
building on so there has been crossed

00:02:40,880 --> 00:02:46,310
building support in Debian for many

00:02:42,590 --> 00:02:49,430
years roman ho dec started deep package

00:02:46,310 --> 00:02:53,360
across in 1997 which was a horrible

00:02:49,430 --> 00:02:55,010
hacky script kind of worked and that's

00:02:53,360 --> 00:02:57,800
been developed by various people who've

00:02:55,010 --> 00:03:01,340
taken an interest over the intervening

00:02:57,800 --> 00:03:03,410
15 years and we still need it although

00:03:01,340 --> 00:03:06,830
much of what it does is becoming

00:03:03,410 --> 00:03:08,900
irrelevant M Debian has been providing

00:03:06,830 --> 00:03:11,120
cross tool chains for many years that's

00:03:08,900 --> 00:03:17,510
still the place to get tool chains that

00:03:11,120 --> 00:03:18,980
work on Debian the major other part

00:03:17,510 --> 00:03:21,049
apart from actually having a cross

00:03:18,980 --> 00:03:25,070
compiler is being able to install the

00:03:21,049 --> 00:03:27,650
build dependencies in a cross aware

00:03:25,070 --> 00:03:30,829
fashion and apt cross was the first tool

00:03:27,650 --> 00:03:32,269
for doing that some time ago I wrote a

00:03:30,829 --> 00:03:36,410
shell script and Neal made it into some

00:03:32,269 --> 00:03:40,730
proper software that had various issues

00:03:36,410 --> 00:03:42,650
it's complicated and it mostly broke so

00:03:40,730 --> 00:03:45,709
we've had various other attempts since X

00:03:42,650 --> 00:03:47,630
apt is a much simpler approach to the

00:03:45,709 --> 00:03:50,269
same problem Peter build cross is a

00:03:47,630 --> 00:03:53,959
mechanism for wrapping that energy route

00:03:50,269 --> 00:03:58,090
and building things meanwhile over in a

00:03:53,959 --> 00:04:00,859
bun tool and Colin Watson wrote ChromeOS

00:03:58,090 --> 00:04:03,320
build because they needed a way of cross

00:04:00,859 --> 00:04:05,269
building chromium Oz and that got later

00:04:03,320 --> 00:04:07,549
renamed to X dev which is actually quite

00:04:05,269 --> 00:04:09,650
useful tool for installing dependencies

00:04:07,549 --> 00:04:13,010
and cross building things using the D

00:04:09,650 --> 00:04:14,720
package cross mechanism yeah I guess I

00:04:13,010 --> 00:04:17,169
should now is the time to mention that

00:04:14,720 --> 00:04:20,600
what deep package cross does is takes

00:04:17,169 --> 00:04:23,599
libraries from the host architecture the

00:04:20,600 --> 00:04:26,540
other architecture and then mangles all

00:04:23,599 --> 00:04:28,760
the files around to different paths

00:04:26,540 --> 00:04:30,830
so that the cross tools can find them

00:04:28,760 --> 00:04:33,230
and you can install them on your build

00:04:30,830 --> 00:04:35,270
architecture and that's how we've been

00:04:33,230 --> 00:04:37,300
doing cross compiling for the last 15

00:04:35,270 --> 00:04:37,300
years

00:04:37,970 --> 00:04:42,620
more recently Lonardo started doing work

00:04:40,550 --> 00:04:46,910
on this that's who's paying me to do

00:04:42,620 --> 00:04:50,240
this so thank them for progress so

00:04:46,910 --> 00:04:53,510
there's a set of cross tool chains in

00:04:50,240 --> 00:04:56,360
which are now in a bun too which worked

00:04:53,510 --> 00:05:00,550
pretty well but I built in a kind of

00:04:56,360 --> 00:05:03,140
ugly way the details are not nice and

00:05:00,550 --> 00:05:04,670
the last year I've set up a cross build

00:05:03,140 --> 00:05:06,560
daemon because I got very bored of

00:05:04,670 --> 00:05:07,940
building things and trying things and

00:05:06,560 --> 00:05:10,480
seeing if it worked and then building

00:05:07,940 --> 00:05:14,390
them again to see if they work today so

00:05:10,480 --> 00:05:17,690
I'll show you that in a moment more

00:05:14,390 --> 00:05:21,440
recently we've since multi arch became

00:05:17,690 --> 00:05:25,640
available we can now do much cleverer

00:05:21,440 --> 00:05:27,350
things the system is a lot more reliable

00:05:25,640 --> 00:05:29,480
in terms of installing cross

00:05:27,350 --> 00:05:31,430
dependencies so yes build now

00:05:29,480 --> 00:05:34,190
understands how to do that so it's now

00:05:31,430 --> 00:05:36,650
trivial to just say S build something in

00:05:34,190 --> 00:05:37,400
a cross way in principle that should

00:05:36,650 --> 00:05:42,410
just work

00:05:37,400 --> 00:05:46,100
and most recently Tabaka has been

00:05:42,410 --> 00:05:48,110
working on multi arch cross tool chains

00:05:46,100 --> 00:05:50,090
which are built using multi arch as well

00:05:48,110 --> 00:05:53,530
as which can build things using multi

00:05:50,090 --> 00:05:56,300
arch explain the difference in a bit so

00:05:53,530 --> 00:05:58,520
in order to see what works and what

00:05:56,300 --> 00:06:06,380
doesn't we have a cross build daemon

00:05:58,520 --> 00:06:08,920
it's online as the URL so you can go

00:06:06,380 --> 00:06:13,280
there that is currently building all of

00:06:08,920 --> 00:06:18,320
stable and quantal not all off sorry

00:06:13,280 --> 00:06:21,220
about 300 packages of and that gives us

00:06:18,320 --> 00:06:23,810
a pretty good idea of where we're at

00:06:21,220 --> 00:06:27,950
just to explain how this works this is

00:06:23,810 --> 00:06:31,160
actually useful outside the cross build

00:06:27,950 --> 00:06:32,240
concept at the moment as many of you

00:06:31,160 --> 00:06:34,610
have probably discovered it's hard to

00:06:32,240 --> 00:06:34,850
set up build DS and it really shouldn't

00:06:34,610 --> 00:06:37,130
be

00:06:34,850 --> 00:06:39,610
and we lots of people could use one for

00:06:37,130 --> 00:06:39,610
all sorts of reasons

00:06:39,710 --> 00:06:45,680
so because the official Debian build the

00:06:44,479 --> 00:06:47,360
infrastructure is incredibly complicated

00:06:45,680 --> 00:06:50,530
and hard to install I didn't use that

00:06:47,360 --> 00:06:52,639
it's rep repro does the repository part

00:06:50,530 --> 00:06:55,250
and there's a handy tool called rebuild

00:06:52,639 --> 00:06:57,530
D which is a fairly stupid build daemon

00:06:55,250 --> 00:07:00,830
but if all he wanted to do was build

00:06:57,530 --> 00:07:03,940
some stuff for a distro or maybe a

00:07:00,830 --> 00:07:05,930
couple of Suites in a distro it's great

00:07:03,940 --> 00:07:08,180
anyone can understand how to configure

00:07:05,930 --> 00:07:09,530
it you just install it and it works I've

00:07:08,180 --> 00:07:11,120
hacked it about a bit so that it

00:07:09,530 --> 00:07:14,690
understands cross building that's not

00:07:11,120 --> 00:07:16,039
upstream yet and that just uses s bill

00:07:14,690 --> 00:07:17,270
to do all the hard work which does

00:07:16,039 --> 00:07:19,550
understand cross building so this is

00:07:17,270 --> 00:07:21,979
fairly simple you pull stuff from the

00:07:19,550 --> 00:07:23,720
upstream archive I've got a filter set

00:07:21,979 --> 00:07:26,979
to just do the 300 packages we care

00:07:23,720 --> 00:07:29,389
about for now source packages that is

00:07:26,979 --> 00:07:31,160
then referee Pro has a handy thing

00:07:29,389 --> 00:07:32,840
called build needing which basically

00:07:31,160 --> 00:07:34,310
says how many binaries are out of date

00:07:32,840 --> 00:07:36,440
in comparison to the sources I've got

00:07:34,310 --> 00:07:38,180
and gives you a big list and you just

00:07:36,440 --> 00:07:41,240
feed that into rebuild a witch then

00:07:38,180 --> 00:07:46,070
churns through them all and the output

00:07:41,240 --> 00:07:47,599
of s build goes into Rev repro and it

00:07:46,070 --> 00:07:52,220
will run around in circles until they're

00:07:47,599 --> 00:07:53,659
all done this is kind of tied together

00:07:52,220 --> 00:07:55,669
all the little green bits are horrible

00:07:53,659 --> 00:07:59,030
cron jobs and scripty foo which isn't

00:07:55,669 --> 00:08:00,830
very nice I've started an X builder

00:07:59,030 --> 00:08:04,669
package which contains the kind of glue

00:08:00,830 --> 00:08:05,780
bits and that will ideally one day just

00:08:04,669 --> 00:08:08,630
be something you can just say kind of

00:08:05,780 --> 00:08:11,630
apt-get install build D and you'll get

00:08:08,630 --> 00:08:13,430
something fairly simple which works that

00:08:11,630 --> 00:08:16,690
will be be nice we're not quite there

00:08:13,430 --> 00:08:19,130
yet but it's it's reasonably usable and

00:08:16,690 --> 00:08:20,990
that buildi sync logs thing at the end

00:08:19,130 --> 00:08:23,840
this is all running on my machine at

00:08:20,990 --> 00:08:25,729
work at the moment so I just suck all

00:08:23,840 --> 00:08:26,449
logs over to the web so that you can

00:08:25,729 --> 00:08:30,320
read it all online

00:08:26,449 --> 00:08:31,430
I should have if anyone's got their

00:08:30,320 --> 00:08:32,839
browsers up you can go and have a look

00:08:31,430 --> 00:08:36,260
at the pretty statistics it's quite nice

00:08:32,839 --> 00:08:38,930
I should have shown a picture on here so

00:08:36,260 --> 00:08:40,789
some statistics as you can see they're

00:08:38,930 --> 00:08:42,200
not great so this this kind of 99

00:08:40,789 --> 00:08:45,649
packages we're looking at here is

00:08:42,200 --> 00:08:48,650
basically the de bootstrap set what you

00:08:45,649 --> 00:08:50,750
need for a minimal system and as you can

00:08:48,650 --> 00:08:53,550
see we got to nearly half of it working

00:08:50,750 --> 00:08:57,360
in precise before

00:08:53,550 --> 00:08:59,970
we stopped fiddling with that and then

00:08:57,360 --> 00:09:01,769
broke everything again so a bun too does

00:08:59,970 --> 00:09:05,490
better because more things have been

00:09:01,769 --> 00:09:07,740
multi arched basically there's a lot of

00:09:05,490 --> 00:09:11,190
basic tools in Debian which still don't

00:09:07,740 --> 00:09:14,700
say I'm multi Arch foreign which is code

00:09:11,190 --> 00:09:16,380
for the right thing will be installed so

00:09:14,700 --> 00:09:18,000
as you can see if we get 65 dependency

00:09:16,380 --> 00:09:19,170
failures out of those 99 which basically

00:09:18,000 --> 00:09:20,940
means I couldn't install the

00:09:19,170 --> 00:09:25,680
dependencies I didn't even try and build

00:09:20,940 --> 00:09:27,420
it they these bugs are astonishing easy

00:09:25,680 --> 00:09:29,160
to fix it's a one-line patch for every

00:09:27,420 --> 00:09:31,200
package that needs fixing just go and

00:09:29,160 --> 00:09:32,490
fix them all as you can see there's

00:09:31,200 --> 00:09:36,750
quite a lot of stuff that would build if

00:09:32,490 --> 00:09:38,459
it's dependencies we're installable so

00:09:36,750 --> 00:09:41,519
if anyone's enthused to help with this

00:09:38,459 --> 00:09:42,950
it's it's very easy quite rewarding you

00:09:41,519 --> 00:09:47,480
get fixed that was easy

00:09:42,950 --> 00:09:51,420
I'd love some help because it takes ages

00:09:47,480 --> 00:09:54,019
so if you want to build things you need

00:09:51,420 --> 00:09:56,339
to talk own that's the easy part

00:09:54,019 --> 00:09:59,070
you also need to be able to install the

00:09:56,339 --> 00:10:04,560
build dependencies so the point about

00:09:59,070 --> 00:10:06,480
this is you need the libraries for the

00:10:04,560 --> 00:10:08,370
host architecture but you need the tools

00:10:06,480 --> 00:10:09,990
for the build architecture so that

00:10:08,370 --> 00:10:13,110
they'll run on the build machine so you

00:10:09,990 --> 00:10:15,870
want a version of int'l tool or Lib tool

00:10:13,110 --> 00:10:19,140
or Auto Comp for whatever that runs on

00:10:15,870 --> 00:10:20,970
the build machine whereas you want Lib

00:10:19,140 --> 00:10:23,550
through this that and the other for the

00:10:20,970 --> 00:10:27,000
host architecture and this has always

00:10:23,550 --> 00:10:29,130
been historically problematic but multi

00:10:27,000 --> 00:10:30,779
arch essentially marks which is which

00:10:29,130 --> 00:10:35,000
for us and we can use that information

00:10:30,779 --> 00:10:37,380
to just tell apt to install the stuff

00:10:35,000 --> 00:10:40,649
there are some exceptions to what multi

00:10:37,380 --> 00:10:42,720
arch says which we mark in the bill

00:10:40,649 --> 00:10:46,949
dependency headers and I'll show you the

00:10:42,720 --> 00:10:48,839
exciting table for that a bit deep

00:10:46,949 --> 00:10:50,339
package cross yeah so the other thing

00:10:48,839 --> 00:10:52,649
you need is the stuff where you can't

00:10:50,339 --> 00:10:55,140
run tests during the build because it's

00:10:52,649 --> 00:10:59,220
the wrong architecture you need to cache

00:10:55,140 --> 00:11:01,529
the answers somehow and auto comp has a

00:10:59,220 --> 00:11:04,170
nice mechanism that's worked for at

00:11:01,529 --> 00:11:06,330
least a decade that does this and D

00:11:04,170 --> 00:11:10,510
package cross supports

00:11:06,330 --> 00:11:12,190
that the other thing is just avoiding

00:11:10,510 --> 00:11:13,930
running tests which you can't run

00:11:12,190 --> 00:11:14,920
because it's the wrong architecture

00:11:13,930 --> 00:11:18,510
either because you'll get the wrong

00:11:14,920 --> 00:11:18,510
answer or you simply can't run the test

00:11:18,990 --> 00:11:24,160
so multi arch tool chains now when we

00:11:22,390 --> 00:11:27,430
say that we mean two different things

00:11:24,160 --> 00:11:29,800
need to be clear about which is which so

00:11:27,430 --> 00:11:31,720
there's the tool chain understanding the

00:11:29,800 --> 00:11:35,170
new multi arch paths as opposed to the

00:11:31,720 --> 00:11:38,290
old sister out style little Lib der

00:11:35,170 --> 00:11:41,020
paths so basically where it looks for

00:11:38,290 --> 00:11:43,180
headers and libraries I'm not gonna read

00:11:41,020 --> 00:11:47,470
the list out but and we used to look in

00:11:43,180 --> 00:11:53,350
user triplet blah and now we don't do

00:11:47,470 --> 00:11:56,440
that anymore the other half is does the

00:11:53,350 --> 00:11:58,540
tool chain itself use the multi osh

00:11:56,440 --> 00:12:01,330
mechanisms to depend on libraries so

00:11:58,540 --> 00:12:05,350
your your arm cross tool chain depends

00:12:01,330 --> 00:12:07,000
on an arm Lipsy and historically we used

00:12:05,350 --> 00:12:08,500
to take that bunch it about with deep

00:12:07,000 --> 00:12:11,890
package across build against it and

00:12:08,500 --> 00:12:15,640
generate a package called our mail cross

00:12:11,890 --> 00:12:16,330
Lib C our mail cross there's no need to

00:12:15,640 --> 00:12:19,120
do that anymore

00:12:16,330 --> 00:12:23,020
we can just say install Lib C colon

00:12:19,120 --> 00:12:26,890
Armel and use that seems to me that's

00:12:23,020 --> 00:12:28,780
how it should work and that is the work

00:12:26,890 --> 00:12:30,520
that Thibault has basically just done as

00:12:28,780 --> 00:12:33,700
part of a G sock project over the last

00:12:30,520 --> 00:12:35,260
few weeks that's working AC we tested it

00:12:33,700 --> 00:12:37,420
yesterday as far as we can tell it works

00:12:35,260 --> 00:12:40,480
there's some ifs and buts and a very

00:12:37,420 --> 00:12:43,450
long argument about Lipstadt c++ dev we

00:12:40,480 --> 00:12:45,790
have for most of yesterday but once

00:12:43,450 --> 00:12:49,089
that's sorted so those are already

00:12:45,790 --> 00:12:50,260
available in a repository at I should

00:12:49,089 --> 00:12:55,870
have stuck euro in here

00:12:50,260 --> 00:12:57,820
M Debian dog twiddle tip G and you can

00:12:55,870 --> 00:12:59,830
try them out do please tell us if you

00:12:57,820 --> 00:13:02,500
find anything bust about that tool chain

00:12:59,830 --> 00:13:05,440
that will become I hope the default M

00:13:02,500 --> 00:13:06,970
Debian tool chain and the advantage of

00:13:05,440 --> 00:13:08,589
building it that way is that it can be

00:13:06,970 --> 00:13:10,720
built by an auto builder within the

00:13:08,589 --> 00:13:12,940
archive the old way of building tool

00:13:10,720 --> 00:13:16,350
chains is special and there's no way the

00:13:12,940 --> 00:13:18,520
auto builders would ever really do that

00:13:16,350 --> 00:13:19,910
because it depended on things from other

00:13:18,520 --> 00:13:22,120
architectures until more

00:13:19,910 --> 00:13:25,190
we had no mechanism for specifying that

00:13:22,120 --> 00:13:26,360
so these new tool change should be

00:13:25,190 --> 00:13:28,180
something which will eventually end up

00:13:26,360 --> 00:13:31,910
in standard archive that is the goal

00:13:28,180 --> 00:13:33,890
during wheezy plus one but we've managed

00:13:31,910 --> 00:13:36,470
to sneak a little bit into deep package

00:13:33,890 --> 00:13:39,170
such that these cross architecture

00:13:36,470 --> 00:13:40,130
dependencies will work in wheezy so you

00:13:39,170 --> 00:13:42,280
will be able to use these cross

00:13:40,130 --> 00:13:47,180
compilers before they're actually

00:13:42,280 --> 00:13:48,740
official and kosher the auto Kampf

00:13:47,180 --> 00:13:50,780
caching mechanism so this is just how it

00:13:48,740 --> 00:13:54,230
works the package cross provides load of

00:13:50,780 --> 00:13:56,720
files will cross config cache for the

00:13:54,230 --> 00:13:59,030
generic stuff and cross config dot arch

00:13:56,720 --> 00:14:00,530
for things which are arch specific which

00:13:59,030 --> 00:14:02,090
contain lots of incredibly boring

00:14:00,530 --> 00:14:06,170
information like how big is a float on

00:14:02,090 --> 00:14:09,500
this architecture and then lots of I

00:14:06,170 --> 00:14:11,150
don't know what GL is some library or

00:14:09,500 --> 00:14:13,820
other does it have this function or not

00:14:11,150 --> 00:14:15,770
we're also conferred normally run a

00:14:13,820 --> 00:14:17,930
little compile a little program run a

00:14:15,770 --> 00:14:20,600
test and see if it worked if it can't do

00:14:17,930 --> 00:14:21,740
that we just ask it now the problem of

00:14:20,600 --> 00:14:22,940
this information of course is that it

00:14:21,740 --> 00:14:25,100
can go out of date if nobody's

00:14:22,940 --> 00:14:28,130
maintaining it but by having a

00:14:25,100 --> 00:14:29,720
centralized list it should be easy to

00:14:28,130 --> 00:14:32,450
keep it right and in general this

00:14:29,720 --> 00:14:33,890
mechanism works just fine you'll find

00:14:32,450 --> 00:14:35,450
you can cross build a lot of stuff and

00:14:33,890 --> 00:14:38,720
it appears to have worked but in fact

00:14:35,450 --> 00:14:40,280
for example if you haven't got this

00:14:38,720 --> 00:14:43,160
right you'll get no job control in your

00:14:40,280 --> 00:14:47,330
bash so you know it works but job

00:14:43,160 --> 00:14:50,180
control is quite handy there are quite a

00:14:47,330 --> 00:14:52,010
lot of variables not set in here that

00:14:50,180 --> 00:14:55,100
probably should be you need to go

00:14:52,010 --> 00:14:57,140
through builds and find out what's

00:14:55,100 --> 00:14:58,520
actually broken so one thing in the last

00:14:57,140 --> 00:14:59,870
couple of years of cross building work I

00:14:58,520 --> 00:15:01,700
have cross built an awful lot of stuff I

00:14:59,870 --> 00:15:03,250
have tested that very little of it

00:15:01,700 --> 00:15:05,510
actually works

00:15:03,250 --> 00:15:07,970
once we're at stage where you can build

00:15:05,510 --> 00:15:09,830
a whole image we will need to do a lot

00:15:07,970 --> 00:15:12,110
more testing to prove that the stuff we

00:15:09,830 --> 00:15:14,420
across building is in fact churning out

00:15:12,110 --> 00:15:15,830
things that work properly and if

00:15:14,420 --> 00:15:17,360
anyone's interested in that we have a

00:15:15,830 --> 00:15:18,830
load of ideas and nobody's done any of

00:15:17,360 --> 00:15:20,720
the work needed you could compare the

00:15:18,830 --> 00:15:22,340
elf layouts and see whether you got the

00:15:20,720 --> 00:15:23,510
same parts and check for bits that are

00:15:22,340 --> 00:15:28,670
accidentally parts of foreign

00:15:23,510 --> 00:15:32,060
architectures and so on so we have all

00:15:28,670 --> 00:15:33,649
the core pieces but to make this work

00:15:32,060 --> 00:15:36,800
smoothly within Debian you

00:15:33,649 --> 00:15:39,559
need a whole load of extra bits so we

00:15:36,800 --> 00:15:42,259
have build essential for building things

00:15:39,559 --> 00:15:45,920
which you know ensures that you have a

00:15:42,259 --> 00:15:47,930
compiler and make and a whole load of

00:15:45,920 --> 00:15:50,809
basic tools that you won't get anywhere

00:15:47,930 --> 00:15:52,879
without we need the same concept for

00:15:50,809 --> 00:15:55,569
cross building to ensure that you have a

00:15:52,879 --> 00:16:02,379
cross compiler for this architecture and

00:15:55,569 --> 00:16:06,740
across Lib C and across Lib C++ and

00:16:02,379 --> 00:16:09,079
across package config and so on so for a

00:16:06,740 --> 00:16:10,639
long time the set of packages you needed

00:16:09,079 --> 00:16:12,290
to cross build in a punter and Debian's

00:16:10,639 --> 00:16:13,490
been slightly different because the tool

00:16:12,290 --> 00:16:15,679
chains are coming from different sources

00:16:13,490 --> 00:16:17,869
and slightly different names are used

00:16:15,679 --> 00:16:19,550
and that's very annoying for a package

00:16:17,869 --> 00:16:21,980
like s build that just wants to be able

00:16:19,550 --> 00:16:26,209
to say install me the cross stuff please

00:16:21,980 --> 00:16:29,059
so s build now installs build essential

00:16:26,209 --> 00:16:32,149
arch name and expect that to be present

00:16:29,059 --> 00:16:35,660
and to gloss over any differences

00:16:32,149 --> 00:16:36,980
between distros and obviously if you're

00:16:35,660 --> 00:16:38,870
using this for your own work you can

00:16:36,980 --> 00:16:41,240
just provide your own cross bill arch

00:16:38,870 --> 00:16:43,699
which will say you know if you're the C

00:16:41,240 --> 00:16:48,110
languid o then you can just say I need

00:16:43,699 --> 00:16:51,499
si Lang for my cross builds some

00:16:48,110 --> 00:16:53,300
packages exist in Patrick McDermott's

00:16:51,499 --> 00:16:56,389
repository they're not anywhere very

00:16:53,300 --> 00:16:58,339
useful yet they will be soon it's

00:16:56,389 --> 00:17:02,480
trivial to make I mean it's just a it

00:16:58,339 --> 00:17:04,459
just depends on six things the other

00:17:02,480 --> 00:17:07,069
problem is that because of the way that

00:17:04,459 --> 00:17:09,409
GCC defaults mechanism works if you

00:17:07,069 --> 00:17:14,779
install a tool chain you don't actually

00:17:09,409 --> 00:17:16,939
get a command the next new ABI GCC so

00:17:14,779 --> 00:17:20,689
you only get armor it's gonna be our GCC

00:17:16,939 --> 00:17:22,459
version so every single auto comp test

00:17:20,689 --> 00:17:24,679
will fail and say you have no compiler

00:17:22,459 --> 00:17:27,760
I can't compile anything technically

00:17:24,679 --> 00:17:30,770
it's correct so there has to be a across

00:17:27,760 --> 00:17:32,450
GCC defaults package well something that

00:17:30,770 --> 00:17:36,679
provides that link so you could just

00:17:32,450 --> 00:17:38,419
make it yourself and one of the

00:17:36,679 --> 00:17:41,110
questions for later is which package

00:17:38,419 --> 00:17:43,070
should provide that link exactly I have

00:17:41,110 --> 00:17:46,789
wondered about this and I'm not quite

00:17:43,070 --> 00:17:47,180
sure the tool chain people think it

00:17:46,789 --> 00:17:49,100
should

00:17:47,180 --> 00:17:53,120
GCC crossed defaults packaged and

00:17:49,100 --> 00:17:54,950
they're probably right but at the moment

00:17:53,120 --> 00:17:59,540
you just don't get one on the debian

00:17:54,950 --> 00:18:01,250
stuff and doesn't work cross packaged

00:17:59,540 --> 00:18:03,050
config so package config is perfectly

00:18:01,250 --> 00:18:04,460
capable of doing cross stuff but you

00:18:03,050 --> 00:18:07,040
have to call it in the right way by

00:18:04,460 --> 00:18:09,590
calling it as triplet package config so

00:18:07,040 --> 00:18:11,420
it knows which paths to use when looking

00:18:09,590 --> 00:18:13,220
things up otherwise it'll look up your

00:18:11,420 --> 00:18:14,750
host libraries instead it sorry your

00:18:13,220 --> 00:18:18,740
build libraries instead of your host

00:18:14,750 --> 00:18:21,440
libraries again there's a question of

00:18:18,740 --> 00:18:26,150
where should and so there's a wrapper in

00:18:21,440 --> 00:18:28,250
the package config package which you

00:18:26,150 --> 00:18:30,320
just need to call as triple a package

00:18:28,250 --> 00:18:31,790
config and again the question is where'd

00:18:30,320 --> 00:18:34,160
all those links come from which package

00:18:31,790 --> 00:18:36,410
provides them because you get one per

00:18:34,160 --> 00:18:38,270
architecture so it's a package per

00:18:36,410 --> 00:18:42,980
architecture containing a link and you

00:18:38,270 --> 00:18:45,410
go yeah but I haven't thought of a

00:18:42,980 --> 00:18:46,820
better way and this problem would apply

00:18:45,410 --> 00:18:49,010
to quite a lot of tools anything which

00:18:46,820 --> 00:18:53,270
does architecture dependent work needs

00:18:49,010 --> 00:18:54,320
to be called as triplet tool is the only

00:18:53,270 --> 00:18:56,570
way to make everything work properly

00:18:54,320 --> 00:18:58,280
everywhere and the kind of question is

00:18:56,570 --> 00:19:05,830
where we're going to produce all this

00:18:58,280 --> 00:19:08,270
useless tiny packages frog so multi arch

00:19:05,830 --> 00:19:10,660
cross dependencies and how it actually

00:19:08,270 --> 00:19:10,660
works

00:19:16,600 --> 00:19:20,980
as this annoying also Kampf convention

00:19:19,450 --> 00:19:25,240
that you don't do it for the native

00:19:20,980 --> 00:19:28,600
version you don't call on x86 underscore

00:19:25,240 --> 00:19:32,080
64 linux canoe GCC every time you run

00:19:28,600 --> 00:19:33,700
GCC that would be lovely that would

00:19:32,080 --> 00:19:35,169
improve my life dramatically I wouldn't

00:19:33,700 --> 00:19:38,169
have thousands and thousands of if

00:19:35,169 --> 00:19:42,549
natively building run GCC otherwise run

00:19:38,169 --> 00:19:44,710
chipler GCC the triplet GCC that's not

00:19:42,549 --> 00:19:46,529
necessarily a nautical default is

00:19:44,710 --> 00:19:51,820
probably just that the order comes

00:19:46,529 --> 00:19:52,169
because are very old a lot of the order

00:19:51,820 --> 00:19:55,289
conf

00:19:52,169 --> 00:19:58,120
rebuilds and they said that and and the

00:19:55,289 --> 00:20:00,009
auto recount a lot of that work will

00:19:58,120 --> 00:20:03,220
actually allow the triplet to work even

00:20:00,009 --> 00:20:04,929
with a native so yeah there's a lot of

00:20:03,220 --> 00:20:06,700
places just you know to recall if you

00:20:04,929 --> 00:20:09,070
could always call triplet something and

00:20:06,700 --> 00:20:10,269
it worked that would make things more

00:20:09,070 --> 00:20:11,830
symmetric and of course the whole point

00:20:10,269 --> 00:20:13,419
about multi arches that is nice and

00:20:11,830 --> 00:20:21,009
symmetric and that's one of the pieces

00:20:13,419 --> 00:20:22,389
that's missing so yes so people who

00:20:21,009 --> 00:20:24,809
haven't been following multi arch in

00:20:22,389 --> 00:20:30,580
detail it's another fine example of

00:20:24,809 --> 00:20:33,009
confusing terminology packages can be

00:20:30,580 --> 00:20:36,789
labeled as one of three things if

00:20:33,009 --> 00:20:41,340
they're multi arch same sorry for things

00:20:36,789 --> 00:20:41,340
are including nothing you mean okay yes

00:20:42,450 --> 00:20:46,690
you can say nothing and generally things

00:20:45,549 --> 00:20:50,649
will behave as they did before or

00:20:46,690 --> 00:20:52,690
correctly if you want things to be Co

00:20:50,649 --> 00:20:54,279
installable where things in practice is

00:20:52,690 --> 00:20:55,870
usually libraries so if you want to be

00:20:54,279 --> 00:20:57,399
able to install the build version and

00:20:55,870 --> 00:20:59,350
the host version side-by-side you need

00:20:57,399 --> 00:21:02,019
to mark the multi arch same and make

00:20:59,350 --> 00:21:05,320
sure that none of the files that are

00:21:02,019 --> 00:21:06,820
different have the same file name in

00:21:05,320 --> 00:21:13,529
general that's a matter of putting

00:21:06,820 --> 00:21:16,840
libraries in user Lib triplet whatever

00:21:13,529 --> 00:21:18,370
anything which you just want to run and

00:21:16,840 --> 00:21:22,080
it doesn't matter what architecture it

00:21:18,370 --> 00:21:27,279
is you just needed to work so make or

00:21:22,080 --> 00:21:29,590
int'l tool or ork all that stuff that's

00:21:27,279 --> 00:21:32,080
a multi watch foreign package

00:21:29,590 --> 00:21:33,670
and the main reason most stuff doesn't

00:21:32,080 --> 00:21:35,320
work moment is because an awful lot of

00:21:33,670 --> 00:21:37,450
things that are tools like that are not

00:21:35,320 --> 00:21:39,880
marked multi Arch foreign so it tries to

00:21:37,450 --> 00:21:42,940
install the host arch version and then

00:21:39,880 --> 00:21:46,060
fails to run it there are some things

00:21:42,940 --> 00:21:47,950
which can be either get text is actually

00:21:46,060 --> 00:21:49,870
the most common example things which

00:21:47,950 --> 00:21:53,770
contain both a library you link against

00:21:49,870 --> 00:21:55,870
and a tool you run and it depends on the

00:21:53,770 --> 00:21:58,690
package you're trying to build which of

00:21:55,870 --> 00:22:01,210
those two functions it wanted so multi

00:21:58,690 --> 00:22:02,500
arched can't tell us which we want it

00:22:01,210 --> 00:22:04,000
just says you can do either of these

00:22:02,500 --> 00:22:08,140
things and you need to specify in your

00:22:04,000 --> 00:22:16,270
dependencies which you want that's

00:22:08,140 --> 00:22:18,400
basically it so to use this all you have

00:22:16,270 --> 00:22:20,470
to do is add the foreign architecture

00:22:18,400 --> 00:22:23,890
you wish to build and now you can do

00:22:20,470 --> 00:22:28,830
apt-get build it - a architecture

00:22:23,890 --> 00:22:32,260
package and that should install the

00:22:28,830 --> 00:22:34,090
build dependencies quite a lot of the

00:22:32,260 --> 00:22:40,180
time it doesn't but when it works it's

00:22:34,090 --> 00:22:42,070
incredibly cool but is this scary table

00:22:40,180 --> 00:22:43,720
of exactly what happens depending on

00:22:42,070 --> 00:22:45,790
what you specified in your build

00:22:43,720 --> 00:22:49,210
dependency and what the multi arch field

00:22:45,790 --> 00:22:51,430
says and the any and native are the

00:22:49,210 --> 00:22:53,080
exception mechanisms for saying I wanted

00:22:51,430 --> 00:22:54,760
the opposite of the default basically

00:22:53,080 --> 00:22:56,850
and there's a set of things which are

00:22:54,760 --> 00:22:59,140
simply not allowed to have that wrong

00:22:56,850 --> 00:23:02,620
it's all bit confusing mostly any apt

00:22:59,140 --> 00:23:04,780
people need to worry about this there is

00:23:02,620 --> 00:23:08,070
interesting point so about the marking

00:23:04,780 --> 00:23:10,780
lots of things multi arch foreign

00:23:08,070 --> 00:23:15,100
there's about a thousand tools that will

00:23:10,780 --> 00:23:17,260
be useful for but in fact as Steve has

00:23:15,100 --> 00:23:21,040
worked out over there we could just fix

00:23:17,260 --> 00:23:22,150
out so that for Bill dependencies it

00:23:21,040 --> 00:23:23,380
goes well if there's an architectural

00:23:22,150 --> 00:23:25,570
package it's almost certainly

00:23:23,380 --> 00:23:28,150
effectively multi arch foreign so let's

00:23:25,570 --> 00:23:30,670
just assume that now we don't do that

00:23:28,150 --> 00:23:32,440
for normal dependencies because that

00:23:30,670 --> 00:23:37,000
will be the opposite of the existing

00:23:32,440 --> 00:23:38,920
behavior and everything will blow up we

00:23:37,000 --> 00:23:41,380
can change it in the future but we can't

00:23:38,920 --> 00:23:42,460
do it now so unless anyone objects

00:23:41,380 --> 00:23:43,240
violently we should probably just do

00:23:42,460 --> 00:23:45,610
that and those are stuff

00:23:43,240 --> 00:23:47,350
start working we have to argue with the

00:23:45,610 --> 00:23:50,260
D package people a bit which is a

00:23:47,350 --> 00:23:51,309
pending argument but unless someone can

00:23:50,260 --> 00:23:54,450
come up with a reason why we shouldn't

00:23:51,309 --> 00:23:56,800
we should probably try and push that

00:23:54,450 --> 00:24:00,370
it's a bit late for easy I guess

00:23:56,800 --> 00:24:02,350
sadly transitive bill dependencies this

00:24:00,370 --> 00:24:04,120
is something you'll notice if you're

00:24:02,350 --> 00:24:07,059
maintaining any packages that have a

00:24:04,120 --> 00:24:08,470
kind of aversion las' a library

00:24:07,059 --> 00:24:09,760
dependency which actually depends on a

00:24:08,470 --> 00:24:12,880
particular version of the library that

00:24:09,760 --> 00:24:14,800
we're currently making the default those

00:24:12,880 --> 00:24:16,660
used to generate a Lib D billion they've

00:24:14,800 --> 00:24:18,280
used to be an arch all packaged and the

00:24:16,660 --> 00:24:22,120
problem is that that breaks the multi

00:24:18,280 --> 00:24:25,990
arch architecture chain because it now

00:24:22,120 --> 00:24:28,210
doesn't know which architecture version

00:24:25,990 --> 00:24:31,870
of the library you wanted so we need to

00:24:28,210 --> 00:24:35,110
make Lib DB dev any so that it then

00:24:31,870 --> 00:24:38,080
depends on a corresponding architecture

00:24:35,110 --> 00:24:39,490
version of the actual library so there's

00:24:38,080 --> 00:24:40,540
quite a few of those that are bused but

00:24:39,490 --> 00:24:43,480
I don't know maybe we've fixed most of

00:24:40,540 --> 00:24:44,740
them by now but it's not entirely

00:24:43,480 --> 00:24:47,080
obvious if you haven't thought about

00:24:44,740 --> 00:24:50,400
this for quite a long time how that

00:24:47,080 --> 00:24:54,670
should work so I thought I'd put it in

00:24:50,400 --> 00:24:56,380
things that don't work running wrong

00:24:54,670 --> 00:24:58,120
architecture tools so quite a lot of

00:24:56,380 --> 00:25:00,400
builds will try and run something they

00:24:58,120 --> 00:25:03,850
just built and of course when you're

00:25:00,400 --> 00:25:06,340
cross building that doesn't work we

00:25:03,850 --> 00:25:07,450
should stop them doing that that's fine

00:25:06,340 --> 00:25:12,070
except when they do something really

00:25:07,450 --> 00:25:13,570
important and life gets harder so quite

00:25:12,070 --> 00:25:15,010
a lot of things use help to man for

00:25:13,570 --> 00:25:16,630
example which is extremely annoying you

00:25:15,010 --> 00:25:18,670
feel across builder all it does is run

00:25:16,630 --> 00:25:19,780
the package to get the help output and

00:25:18,670 --> 00:25:21,400
then put it in the main page seems

00:25:19,780 --> 00:25:24,460
perfectly reasonable except we can't do

00:25:21,400 --> 00:25:25,990
that now that one doesn't matter much

00:25:24,460 --> 00:25:31,179
you can just skip it and you don't get a

00:25:25,990 --> 00:25:34,270
man page buff but they need doing

00:25:31,179 --> 00:25:37,720
otherwise the bill just fails or you can

00:25:34,270 --> 00:25:38,980
use qemu so kiemce you can gloss over a

00:25:37,720 --> 00:25:40,540
lot of the failures I'm about to go

00:25:38,980 --> 00:25:44,020
through which is great if you've got one

00:25:40,540 --> 00:25:45,340
but for example for the new um 64

00:25:44,020 --> 00:25:46,990
bootstrap which I'm currently doing

00:25:45,340 --> 00:25:49,179
there is no qemu that will not be a key

00:25:46,990 --> 00:25:49,630
me for some time that doesn't help us at

00:25:49,179 --> 00:25:52,179
all

00:25:49,630 --> 00:25:56,200
so I'm I'd like to fix as much as we can

00:25:52,179 --> 00:25:57,010
without depending on QEMU but it's

00:25:56,200 --> 00:25:58,540
trivial for you

00:25:57,010 --> 00:26:01,540
to make your cross build essential

00:25:58,540 --> 00:26:02,860
chroot have qemu support as well at

00:26:01,540 --> 00:26:04,360
which point a whole load of failures

00:26:02,860 --> 00:26:10,240
will just kind of get glossed over and

00:26:04,360 --> 00:26:12,400
mostly work config scripts loads of

00:26:10,240 --> 00:26:15,750
packages container enough little config

00:26:12,400 --> 00:26:18,460
script which tells you how it was built

00:26:15,750 --> 00:26:19,690
that's great until you're trying to

00:26:18,460 --> 00:26:24,040
cross build things at which point you

00:26:19,690 --> 00:26:26,230
get the wrong answers the fix for most

00:26:24,040 --> 00:26:27,820
of these is to persuade the people to

00:26:26,230 --> 00:26:30,190
use packaged config instead because

00:26:27,820 --> 00:26:33,340
package confer gives declarative and it

00:26:30,190 --> 00:26:35,830
just works in a cross context all these

00:26:33,340 --> 00:26:39,370
things don't and there's interesting

00:26:35,830 --> 00:26:40,870
questions TCL config is a question of

00:26:39,370 --> 00:26:43,140
where that should live in multi arch

00:26:40,870 --> 00:26:48,070
world that's one of the other things to

00:26:43,140 --> 00:26:50,200
get clear later some packages don't

00:26:48,070 --> 00:26:52,210
cross install so libraries which run

00:26:50,200 --> 00:26:55,900
some kind of helper to register plugins

00:26:52,210 --> 00:26:57,610
or something when you install the wrong

00:26:55,900 --> 00:27:00,340
architecture version of it it runs its

00:26:57,610 --> 00:27:01,540
post int and explodes and that's very

00:27:00,340 --> 00:27:03,640
annoying because you only wanted it for

00:27:01,540 --> 00:27:04,780
the headers or to link against that you

00:27:03,640 --> 00:27:09,490
couldn't care less about the stupid

00:27:04,780 --> 00:27:12,790
plug-in thing so we fixed Lib G Lib by

00:27:09,490 --> 00:27:14,680
basically just saying don't care if it

00:27:12,790 --> 00:27:16,330
fails now I don't know if there are

00:27:14,680 --> 00:27:18,280
packages where these scripts are

00:27:16,330 --> 00:27:22,030
important and you'd really want the

00:27:18,280 --> 00:27:23,830
package install to fail when it's done

00:27:22,030 --> 00:27:26,050
natively in which case we need a bit of

00:27:23,830 --> 00:27:28,060
if I'm doing this natively then can

00:27:26,050 --> 00:27:29,500
 otherwise just it's alright

00:27:28,060 --> 00:27:31,510
doesn't matter

00:27:29,500 --> 00:27:33,670
there aren't loads I went through the

00:27:31,510 --> 00:27:38,470
list of 300 packages there's the only

00:27:33,670 --> 00:27:41,920
five I found they need fixing there are

00:27:38,470 --> 00:27:48,130
tools which how our architecture

00:27:41,920 --> 00:27:50,050
dependent so sharara path is a thing for

00:27:48,130 --> 00:27:55,570
editing the our path in binaries you've

00:27:50,050 --> 00:27:57,910
just built and it is used in a

00:27:55,570 --> 00:27:59,620
reasonable number of builds and the

00:27:57,910 --> 00:28:01,900
problem is it needs to know about the

00:27:59,620 --> 00:28:04,360
architecture that it's fiddling with the

00:28:01,900 --> 00:28:06,430
elf headers in you know to do the right

00:28:04,360 --> 00:28:07,900
thing and it assumes it's just being

00:28:06,430 --> 00:28:10,450
done natively at the moment so that

00:28:07,900 --> 00:28:15,250
always fails and practice

00:28:10,450 --> 00:28:17,860
can just not do it I don't know if it

00:28:15,250 --> 00:28:19,800
ever matters I'd like to hope not

00:28:17,860 --> 00:28:21,790
because we don't like our path anyway

00:28:19,800 --> 00:28:24,910
object introspection is a much bigger

00:28:21,790 --> 00:28:26,260
problem that there's scary stuff with

00:28:24,910 --> 00:28:29,530
binaries to look at the Goblet

00:28:26,260 --> 00:28:33,820
interfaces in general XML foofer I don't

00:28:29,530 --> 00:28:35,920
know what the hell these people do but

00:28:33,820 --> 00:28:38,220
it's used a lot at the moment we've been

00:28:35,920 --> 00:28:40,210
able to just not run it and nothing died

00:28:38,220 --> 00:28:43,510
but I really don't think that's going to

00:28:40,210 --> 00:28:45,130
work for long the output it produces is

00:28:43,510 --> 00:28:46,900
architecture-specific and the binaries

00:28:45,130 --> 00:28:50,560
it scans are done in architecture

00:28:46,900 --> 00:28:52,330
specific way glossed over with QEMU I

00:28:50,560 --> 00:28:56,620
don't know really I think you need a

00:28:52,330 --> 00:28:58,090
cross object introspect err but I need

00:28:56,620 --> 00:29:00,610
someone who will explain what it does

00:28:58,090 --> 00:29:03,250
and why and how hard it might be to make

00:29:00,610 --> 00:29:07,210
a cross one and somehow it will be great

00:29:03,250 --> 00:29:10,300
on that so if you're a package year what

00:29:07,210 --> 00:29:11,860
do you need to do there are some cross

00:29:10,300 --> 00:29:13,570
bill package guidelines or you started

00:29:11,860 --> 00:29:16,750
writing down you know things to do and

00:29:13,570 --> 00:29:18,250
things to not do in general if you now

00:29:16,750 --> 00:29:21,100
this and the handy little D package

00:29:18,250 --> 00:29:22,720
since some fairly recent version of D

00:29:21,100 --> 00:29:24,130
package there's a little header thing to

00:29:22,720 --> 00:29:26,500
save you put in the boilerplate that's

00:29:24,130 --> 00:29:28,960
in under packages in yourself which sets

00:29:26,500 --> 00:29:31,300
the multi arch variables and the host

00:29:28,960 --> 00:29:32,770
and the bill variables you just include

00:29:31,300 --> 00:29:36,400
that and you'll have the variables you

00:29:32,770 --> 00:29:39,430
need and if you use package config and

00:29:36,400 --> 00:29:42,190
auto tools or C make I built systems

00:29:39,430 --> 00:29:44,440
that actually work generally things will

00:29:42,190 --> 00:29:45,880
be sorted out for you and Deb helper

00:29:44,440 --> 00:29:47,830
actually all of these things generally

00:29:45,880 --> 00:29:51,760
will do the right stuff if you do

00:29:47,830 --> 00:29:54,400
anything clever it gets harder there's

00:29:51,760 --> 00:29:55,750
also there's another wiki page Peter

00:29:54,400 --> 00:29:58,000
Pierrot which contains a lot of useful

00:29:55,750 --> 00:30:03,130
info like a description of the object

00:29:58,000 --> 00:30:04,270
introspection problem so I haven't got

00:30:03,130 --> 00:30:06,070
time to go through all these slides

00:30:04,270 --> 00:30:07,150
because there's quite a lot of it it's

00:30:06,070 --> 00:30:08,980
very interesting but I just give you a

00:30:07,150 --> 00:30:12,280
flavor of what we're doing for the

00:30:08,980 --> 00:30:15,790
bootstrapping stuff so there's a thing

00:30:12,280 --> 00:30:19,150
called Lib doze which is what the Debian

00:30:15,790 --> 00:30:22,540
weather thing is done with by Pietro

00:30:19,150 --> 00:30:23,950
Roboto for how much of the it's it's

00:30:22,540 --> 00:30:26,530
basically a camel

00:30:23,950 --> 00:30:29,080
for examining dependency relationship

00:30:26,530 --> 00:30:35,230
foo and statistical it's all really

00:30:29,080 --> 00:30:36,670
scary stuff but we can use it to say in

00:30:35,230 --> 00:30:40,300
order to build this what do I need and

00:30:36,670 --> 00:30:41,890
what does the network look like and you

00:30:40,300 --> 00:30:48,370
can just download these tools and try

00:30:41,890 --> 00:30:53,980
them out so we have a tool to examine

00:30:48,370 --> 00:30:55,510
the build system that's right source

00:30:53,980 --> 00:30:56,920
packages that are required to be cross

00:30:55,510 --> 00:31:00,550
compiled for a minimum build system yes

00:30:56,920 --> 00:31:04,470
so how many things do I need to build in

00:31:00,550 --> 00:31:07,810
order to build this set of packages and

00:31:04,470 --> 00:31:09,490
also checking whether the packages

00:31:07,810 --> 00:31:11,110
sources of binary packages actually

00:31:09,490 --> 00:31:15,310
match up because it turns out they don't

00:31:11,110 --> 00:31:18,520
in on Eric or quantal but we seem to get

00:31:15,310 --> 00:31:21,010
it right in Debian and the problem is

00:31:18,520 --> 00:31:22,570
that it blows up the tools if you've got

00:31:21,010 --> 00:31:23,650
binary that there isn't a corresponding

00:31:22,570 --> 00:31:28,300
source for it so as well I can never

00:31:23,650 --> 00:31:30,970
build that I'm screwed and so the thing

00:31:28,300 --> 00:31:32,620
about bootstrapping is you've always got

00:31:30,970 --> 00:31:34,450
to cross build something because you've

00:31:32,620 --> 00:31:37,360
got a brand-new machine with no software

00:31:34,450 --> 00:31:39,460
for it you can't do anything until

00:31:37,360 --> 00:31:41,950
you've got essentially build essential

00:31:39,460 --> 00:31:46,260
so you need to get yourself a tool chain

00:31:41,950 --> 00:31:48,910
and a make and an orc and the said and

00:31:46,260 --> 00:31:50,200
various other bits and bobs so there's

00:31:48,910 --> 00:31:51,280
always some set of stuff you've got to

00:31:50,200 --> 00:31:52,540
cross build and there's an interesting

00:31:51,280 --> 00:31:54,550
question of how much of it you cross

00:31:52,540 --> 00:31:56,800
bill before you go now I've got enough

00:31:54,550 --> 00:31:58,260
to call this a real useful computer and

00:31:56,800 --> 00:32:00,220
now I can start natively building

00:31:58,260 --> 00:32:01,630
documentation packages are interesting

00:32:00,220 --> 00:32:06,910
because there's lots of those you know

00:32:01,630 --> 00:32:09,190
oh damn I need tech and they're in a

00:32:06,910 --> 00:32:11,200
cross bill Tech so these tools will let

00:32:09,190 --> 00:32:12,880
you do analysis to say how many packages

00:32:11,200 --> 00:32:18,190
do I need to cross build before I can

00:32:12,880 --> 00:32:21,160
kind of swap over his statistics how

00:32:18,190 --> 00:32:22,630
many things are required how many things

00:32:21,160 --> 00:32:24,520
are essentials twice as much required

00:32:22,630 --> 00:32:27,930
stuff in a bun see I didn't know that

00:32:24,520 --> 00:32:27,930
these tools are really quite interesting

00:32:28,860 --> 00:32:34,600
somewhere in here was the so yes reduced

00:32:32,170 --> 00:32:36,850
this so in practice if you're running in

00:32:34,600 --> 00:32:37,600
this on unstable there's 38,000 binary

00:32:36,850 --> 00:32:39,340
packages and eight

00:32:37,600 --> 00:32:41,140
10,000 source packages really really

00:32:39,340 --> 00:32:44,080
slow takes like three and a half hours

00:32:41,140 --> 00:32:45,700
to do an analysis so pretty much the

00:32:44,080 --> 00:32:48,039
first thing he did after using it for

00:32:45,700 --> 00:32:52,630
five minutes was wrote this which

00:32:48,039 --> 00:32:55,390
basically says make me a reduced set so

00:32:52,630 --> 00:32:57,730
the default reducer is essential and

00:32:55,390 --> 00:32:59,320
required and you can add a few packages

00:32:57,730 --> 00:33:01,510
and say and I also want this this and

00:32:59,320 --> 00:33:03,460
this and then it will give you a list of

00:33:01,510 --> 00:33:06,610
how many source packages and binary

00:33:03,460 --> 00:33:08,230
packages that is and make a packages set

00:33:06,610 --> 00:33:11,470
of it and then you can do analysis on

00:33:08,230 --> 00:33:15,580
that which speeds things up by orders of

00:33:11,470 --> 00:33:17,890
magnitude so that is the set of stuff

00:33:15,580 --> 00:33:22,570
which can be built from itself

00:33:17,890 --> 00:33:25,270
basically so yeah here's some numbers

00:33:22,570 --> 00:33:30,220
there's lots of packages in Debian we

00:33:25,270 --> 00:33:32,860
knew that a basic required and important

00:33:30,220 --> 00:33:34,620
set turns out to be 645 source packages

00:33:32,860 --> 00:33:36,850
which is slightly bigger than I expected

00:33:34,620 --> 00:33:38,200
and it's possible that these tools don't

00:33:36,850 --> 00:33:41,650
actually work right yet they are brand

00:33:38,200 --> 00:33:45,460
new we discover this last week but it's

00:33:41,650 --> 00:33:47,559
quite fun to play with what else have we

00:33:45,460 --> 00:33:48,789
got that's worthy of note yes so there's

00:33:47,559 --> 00:33:50,679
the point it takes three and a half

00:33:48,789 --> 00:33:52,480
hours nearly four hours to analyze the

00:33:50,679 --> 00:33:59,309
whole thing or twelve minutes to analyze

00:33:52,480 --> 00:34:02,140
the sensible sized set this is for

00:33:59,309 --> 00:34:03,909
analyzing how many things do I have to

00:34:02,140 --> 00:34:07,179
cross build in order to be able to build

00:34:03,909 --> 00:34:08,560
the rest of it so for example for that

00:34:07,179 --> 00:34:11,109
sort of two thousand four hundred odd

00:34:08,560 --> 00:34:12,580
packages in the required an essential

00:34:11,109 --> 00:34:14,919
set you need to cross build fifty five

00:34:12,580 --> 00:34:17,429
things and unstable and you know how

00:34:14,919 --> 00:34:17,429
doesn't sound too bad

00:34:19,649 --> 00:34:24,369
badly bar that was some slightly

00:34:22,690 --> 00:34:25,450
different analysis way it turned out you

00:34:24,369 --> 00:34:29,109
needed across one hundred and fifty

00:34:25,450 --> 00:34:32,050
eight things so that's the kind of size

00:34:29,109 --> 00:34:33,460
of stuff we need to do before to to

00:34:32,050 --> 00:34:35,109
effectively have achieved a bootstrap

00:34:33,460 --> 00:34:37,740
and be able to work on the native

00:34:35,109 --> 00:34:37,740
machine afterwards

00:34:39,220 --> 00:34:43,700
just to clarify you cross billed 158

00:34:42,140 --> 00:34:45,260
packages and that gives you a big enough

00:34:43,700 --> 00:34:46,910
set than the ED of Li compiled the rest

00:34:45,260 --> 00:34:50,200
that's right this is for bootstrapping a

00:34:46,910 --> 00:34:50,200
new architecture that's correct

00:34:51,770 --> 00:34:55,130
so there's now a kind of interactive

00:34:53,330 --> 00:34:57,620
thing you can push little buttons and

00:34:55,130 --> 00:35:00,980
say what happens if I turn to this

00:34:57,620 --> 00:35:03,440
package what does it depend on download

00:35:00,980 --> 00:35:06,380
it and have a play and get doctor

00:35:03,440 --> 00:35:09,800
pictures most of the rest of this you

00:35:06,380 --> 00:35:12,050
don't care about yeah so we can generate

00:35:09,800 --> 00:35:13,880
some pretty pictures showing classic

00:35:12,050 --> 00:35:16,130
dependency cycles so the part of this

00:35:13,880 --> 00:35:18,710
it's not finished is the analysis of the

00:35:16,130 --> 00:35:21,230
dependency cycles which need breaking so

00:35:18,710 --> 00:35:24,860
we can now find them or at least some of

00:35:21,230 --> 00:35:27,800
them and we need to add the information

00:35:24,860 --> 00:35:30,830
about staged bills to say I can build

00:35:27,800 --> 00:35:34,840
this package without the database part I

00:35:30,830 --> 00:35:37,160
don't care in order to make this linear

00:35:34,840 --> 00:35:40,480
so that is being worked on for the rest

00:35:37,160 --> 00:35:43,190
of gsok and we hope we will have

00:35:40,480 --> 00:35:45,500
something which can actually run through

00:35:43,190 --> 00:35:47,330
a bootstrap of say the first hundred odd

00:35:45,500 --> 00:35:52,970
packages assuming they all cross built

00:35:47,330 --> 00:35:54,710
haha so yes that's my time up and here's

00:35:52,970 --> 00:35:58,010
a little bit of thank you very much to

00:35:54,710 --> 00:35:59,480
people for helping out because I haven't

00:35:58,010 --> 00:36:02,540
done most of this work other people have

00:35:59,480 --> 00:36:06,830
done most of this work and I just hassle

00:36:02,540 --> 00:36:08,180
people so yes it's always dangerous

00:36:06,830 --> 00:36:10,430
listing names but all those people have

00:36:08,180 --> 00:36:13,580
definitely been helpful and others have

00:36:10,430 --> 00:36:17,060
too I'm sure I think that's all for now

00:36:13,580 --> 00:36:19,690
so for people who are have interest in

00:36:17,060 --> 00:36:23,660
this subject or thought any of that was

00:36:19,690 --> 00:36:27,110
relevant we'll be spending another hour

00:36:23,660 --> 00:36:29,720
or so I have a list of I mentioned some

00:36:27,110 --> 00:36:32,600
of the things there's a few others what

00:36:29,720 --> 00:36:35,450
do we think we should be doing about x

00:36:32,600 --> 00:36:39,710
y&z which packages should be providing

00:36:35,450 --> 00:36:46,350
what to what degree do we assume qemu

00:36:39,710 --> 00:36:51,820
and so on yeah thank you very much

00:36:46,350 --> 00:36:51,820

YouTube URL: https://www.youtube.com/watch?v=GL3pZoAcwks


