Title: Autodeploy from salsa
Publication date: 2018-07-31
Playlist: DebConf 18
Description: 
	by Enrico Zini

At: DebConf18
https://debconf18.debconf.org/talks/71-autodeploy-from-salsa/

I have been setting up contributors.debian.org and nm.debian.org to deploy new versions to production once Continuous Integration tests succeed on salsa.

I would like to discuss what I did and see how to make it easy to have a similar workflow for other projects, and if possible, share the code for doing so.

Room: Zhongyangjianshan (中央尖山)
Scheduled start: 2018-07-30 16:30:00
Captions: 
	00:00:04,530 --> 00:00:19,200
I am welcome how to deploy from salsa

00:00:14,280 --> 00:00:26,100
I am riku's vini I maintain mostly web

00:00:19,200 --> 00:00:26,970
services in Debian I like okay wasn't me

00:00:26,100 --> 00:00:34,950
I swear

00:00:26,970 --> 00:00:37,800
I have witnesses I maintain I like to

00:00:34,950 --> 00:00:46,289
ride web services more than I like to

00:00:37,800 --> 00:00:49,170
package so I write web services and and

00:00:46,289 --> 00:00:51,569
then dock Debian dot org is one the

00:00:49,170 --> 00:00:57,539
website for the new mental process that

00:00:51,569 --> 00:01:01,140
people use when they want to get started

00:00:57,539 --> 00:01:04,260
in Debian like become the maintainer or

00:01:01,140 --> 00:01:06,780
they've been developed another one is

00:01:04,260 --> 00:01:12,000
contributors of Debian dot org which tax

00:01:06,780 --> 00:01:13,100
contributions from people and so at some

00:01:12,000 --> 00:01:16,290
point

00:01:13,100 --> 00:01:22,320
Aleut was discontinued salsa happened

00:01:16,290 --> 00:01:25,439
and and that was really nice and salsa

00:01:22,320 --> 00:01:27,299
also has continuous integration so you

00:01:25,439 --> 00:01:30,329
can set it up so that when you commit

00:01:27,299 --> 00:01:38,969
something to salsa you have test cases

00:01:30,329 --> 00:01:45,689
running so somewhere here which is hard

00:01:38,969 --> 00:01:50,840
to see you can see that somebody guide

00:01:45,689 --> 00:01:50,840
me through finding the CI airports

00:01:53,230 --> 00:02:13,210
oh right I can see I can see from here

00:02:08,580 --> 00:02:30,250
okay said things right

00:02:13,210 --> 00:02:34,420
no we'll get there later okay so yeah

00:02:30,250 --> 00:02:42,040
commits trigger a built and running

00:02:34,420 --> 00:02:45,370
tests so that's the last commit that

00:02:42,040 --> 00:02:49,150
built and passed all the tests and that

00:02:45,370 --> 00:02:52,270
was great and then I was like okay but

00:02:49,150 --> 00:02:54,430
then when the tests are built it will be

00:02:52,270 --> 00:02:59,470
nice if the new site would be deployed

00:02:54,430 --> 00:03:04,120
and so I played with doing that Aleut

00:02:59,470 --> 00:03:09,489
allows to do web hooks this time I do

00:03:04,120 --> 00:03:13,230
need the configuration there it is will

00:03:09,489 --> 00:03:13,230
it expose the secret tokens

00:03:17,739 --> 00:03:22,150
sparked good

00:03:24,010 --> 00:03:26,819
it's cold

00:03:38,260 --> 00:03:44,030
after devotion variables haha

00:03:40,950 --> 00:03:44,030
[Music]

00:03:47,610 --> 00:03:50,630
what am I missing

00:03:51,349 --> 00:03:59,360
there were books right

00:04:02,120 --> 00:04:05,019
this is hard

00:04:06,500 --> 00:04:10,300
this is for triggering one

00:04:11,480 --> 00:04:14,480
integrations

00:04:21,600 --> 00:04:32,340
okay so you can tell salsa that when

00:04:29,270 --> 00:04:35,100
things happened or what you can tell it

00:04:32,340 --> 00:04:42,810
laughs but the code-behind salsa that

00:04:35,100 --> 00:04:51,240
when things are pushed or something then

00:04:42,810 --> 00:04:52,800
it will call a URL can you read this so

00:04:51,240 --> 00:04:59,460
I told it okay

00:04:52,800 --> 00:05:07,040
when something happens in continuous

00:04:59,460 --> 00:05:07,040
integration called the code on the side

00:05:07,880 --> 00:05:18,150
and here pipeline events so when things

00:05:16,140 --> 00:05:22,760
happen in the continuous integration

00:05:18,150 --> 00:05:27,960
pipelines code this cold on the side and

00:05:22,760 --> 00:05:33,480
then since well it's a it's a web

00:05:27,960 --> 00:05:38,160
service so I could add code that's

00:05:33,480 --> 00:05:42,330
triggered by the I mean I already can

00:05:38,160 --> 00:05:47,120
implement like views and URL endpoints

00:05:42,330 --> 00:05:47,120
in the web service I created one and

00:05:47,830 --> 00:05:51,370
[Music]

00:05:54,300 --> 00:06:02,040
so I get posted by github I verify you

00:05:59,130 --> 00:06:04,350
can set up a secret token in github so

00:06:02,040 --> 00:06:09,510
that you know it's good luck calling you

00:06:04,350 --> 00:06:12,300
and not someone else decode things check

00:06:09,510 --> 00:06:22,260
that the right kind of event so it's a

00:06:12,300 --> 00:06:24,870
pipeline event check that the build

00:06:22,260 --> 00:06:27,710
start to see success because github also

00:06:24,870 --> 00:06:30,990
calls to say I started building I

00:06:27,710 --> 00:06:34,890
finished building the building fails and

00:06:30,990 --> 00:06:39,600
so on when I realize it's the right kind

00:06:34,890 --> 00:06:45,780
of event I touch a file and this is done

00:06:39,600 --> 00:06:48,300
I touch a file so that the actual deploy

00:06:45,780 --> 00:06:52,700
is not done with the same user as the

00:06:48,300 --> 00:06:57,810
wealth the web so the web service cannot

00:06:52,700 --> 00:07:00,810
write on its own code otherwise if

00:06:57,810 --> 00:07:02,880
somebody can find a vulnerability on the

00:07:00,810 --> 00:07:08,340
web service they have arbitrary code

00:07:02,880 --> 00:07:20,750
execution on on the side and then step

00:07:08,340 --> 00:07:20,750
to system B there is a path unit

00:07:31,720 --> 00:07:50,160
which basically says if files are

00:07:35,620 --> 00:07:50,160
created with this name then do this

00:07:50,689 --> 00:07:56,629
and that's a user configuration of

00:07:52,819 --> 00:08:00,169
systemd no required but this is the user

00:07:56,629 --> 00:08:04,879
that can do the deploy so basically I

00:08:00,169 --> 00:08:06,589
got notified by gitlab I verify that get

00:08:04,879 --> 00:08:09,679
lab it is telling the right things and

00:08:06,589 --> 00:08:11,479
then I call a deploy script I mean I

00:08:09,679 --> 00:08:14,149
touch a file which triggers calling a

00:08:11,479 --> 00:08:18,579
deploy script the past activation in

00:08:14,149 --> 00:08:29,919
system D is quite nice in my opinion

00:08:18,579 --> 00:08:29,919
then next bit I didn't clean the flags

00:08:30,909 --> 00:08:38,990
next bit I that that's the code that

00:08:34,819 --> 00:08:43,550
does the deploying which does some

00:08:38,990 --> 00:08:47,810
custom logging which logs in an email so

00:08:43,550 --> 00:08:52,300
that everything it does is notified to a

00:08:47,810 --> 00:08:52,300
mailing list and then

00:08:55,950 --> 00:09:02,860
and then I verified that the committee

00:09:00,220 --> 00:09:08,320
is in the branch that is configured to

00:09:02,860 --> 00:09:11,080
be deployed I the files that are created

00:09:08,320 --> 00:09:20,050
have the Chaisson given by gitlab to be

00:09:11,080 --> 00:09:27,540
deployed and summarizing things it does

00:09:20,050 --> 00:09:31,840
a fetch to get the code check that the

00:09:27,540 --> 00:09:34,240
Casa of the branch that it fetched is

00:09:31,840 --> 00:09:46,960
the Chaisson that built correctly on the

00:09:34,240 --> 00:09:50,050
CI and it builds GPG key link with the

00:09:46,960 --> 00:09:51,760
keys that are in the repository so

00:09:50,050 --> 00:09:54,130
there's a subdirectory in the repository

00:09:51,760 --> 00:09:59,080
with the keys of people who can commit

00:09:54,130 --> 00:10:02,520
and okay to temperature educating with

00:09:59,080 --> 00:10:02,520
that and use it to

00:10:06,260 --> 00:10:13,980
verify the signature on the comment so I

00:10:11,550 --> 00:10:17,190
don't need to trust salsa basically I'm

00:10:13,980 --> 00:10:19,890
pushing a signed commit my my key is

00:10:17,190 --> 00:10:23,459
known by the repository by the git

00:10:19,890 --> 00:10:25,260
repository salsa builds notifies I fetch

00:10:23,459 --> 00:10:28,589
I verify the signature

00:10:25,260 --> 00:10:34,500
so if salsa is malicious and notifies me

00:10:28,589 --> 00:10:36,660
of deploying pointers commits I mean a

00:10:34,500 --> 00:10:40,830
malicious takeover no salsa cannot

00:10:36,660 --> 00:10:43,440
generate sign commits and also I check

00:10:40,830 --> 00:10:47,630
that the branch to be deployed is a fast

00:10:43,440 --> 00:10:51,360
forward from the current one so a

00:10:47,630 --> 00:10:55,470
malicious takeover of salsa will not

00:10:51,360 --> 00:10:57,770
deploy a passed signed commit that maybe

00:10:55,470 --> 00:11:02,550
had a vulnerability that I fixed later

00:10:57,770 --> 00:11:08,250
so people cannot roll back to a previous

00:11:02,550 --> 00:11:14,580
commit after which unhappy

00:11:08,250 --> 00:11:17,630
I run the deploy and all the auto all

00:11:14,580 --> 00:11:22,230
the output of this gets emailed and

00:11:17,630 --> 00:11:23,670
that's my implementation of one how to

00:11:22,230 --> 00:11:27,660
deploying from salsa

00:11:23,670 --> 00:11:32,100
I built this as a mostly reusable django

00:11:27,660 --> 00:11:37,080
application so if other people are using

00:11:32,100 --> 00:11:40,589
jungle from debian services or a using

00:11:37,080 --> 00:11:44,040
jungle outside debian but a combination

00:11:40,589 --> 00:11:50,870
of Django and github this is a working

00:11:44,040 --> 00:11:55,170
set up that that can mostly be reused

00:11:50,870 --> 00:11:57,329
and it's yeah well first off to a part

00:11:55,170 --> 00:12:00,959
of an EM Debian orc and contributors

00:11:57,329 --> 00:12:01,740
Debian work so these are one way to do

00:12:00,959 --> 00:12:08,270
it

00:12:01,740 --> 00:12:12,529
FTP master did it differently I

00:12:08,270 --> 00:12:12,529
described if you

00:12:12,660 --> 00:12:17,610
from what

00:12:14,550 --> 00:12:21,060
Ansgar showed me earlier FTP master runs

00:12:17,610 --> 00:12:25,800
a cron job that fetches from git and

00:12:21,060 --> 00:12:28,920
checks signature a bit like this and

00:12:25,800 --> 00:12:31,980
then if signature is fine and it's a

00:12:28,920 --> 00:12:35,940
fast forward it does the deploy FTP

00:12:31,980 --> 00:12:40,950
master uses 100 lines of shell I use a

00:12:35,940 --> 00:12:44,570
thousand lines of Python but this oddly

00:12:40,950 --> 00:12:47,790
this has integration with github

00:12:44,570 --> 00:12:51,600
continuous integration so this gets a

00:12:47,790 --> 00:12:57,240
push from get lab and on FTP master its

00:12:51,600 --> 00:13:03,560
accounts out running still to me that

00:12:57,240 --> 00:13:06,650
was quite a new thing for Debian I mean

00:13:03,560 --> 00:13:10,640
because we have salsa we can do this

00:13:06,650 --> 00:13:10,640
which i think is amazing

00:13:10,820 --> 00:13:18,930
that so there's a CI meaning that the

00:13:14,670 --> 00:13:21,930
tests in the code work not only on my

00:13:18,930 --> 00:13:23,550
computer but also on salsa so they're

00:13:21,930 --> 00:13:25,830
very likely to also work on the

00:13:23,550 --> 00:13:29,250
computers of other people trying to work

00:13:25,830 --> 00:13:31,589
on the site which is great and they

00:13:29,250 --> 00:13:34,290
checked automatically on salsa so when

00:13:31,589 --> 00:13:35,940
I'm lazy of stupid and I commit mistakes

00:13:34,290 --> 00:13:42,080
and I'm in a hurry and I push them

00:13:35,940 --> 00:13:47,130
anyway they don't get deployed and also

00:13:42,080 --> 00:13:54,110
the whole pipeline of deploying is not

00:13:47,130 --> 00:13:56,730
just on my laptop so I panic everything

00:13:54,110 --> 00:13:59,400
it's not just on my laptop so if

00:13:56,730 --> 00:14:02,100
somebody else wants to contribute they

00:13:59,400 --> 00:14:07,050
just push there has been a lot more

00:14:02,100 --> 00:14:10,470
people deploying changes in in the code

00:14:07,050 --> 00:14:12,990
than before because now it's just a push

00:14:10,470 --> 00:14:15,029
away so I would like to see more of this

00:14:12,990 --> 00:14:17,730
in Debian and and the point of this buff

00:14:15,029 --> 00:14:21,600
is to show that this is possible and

00:14:17,730 --> 00:14:23,080
encourage for more to happen as do you

00:14:21,600 --> 00:14:27,180
know of any other server

00:14:23,080 --> 00:14:31,570
in Debian that can deploy from it

00:14:27,180 --> 00:14:37,120
automatically because I may not know

00:14:31,570 --> 00:14:40,890
them all or do any of you do automatic

00:14:37,120 --> 00:14:42,070
deploy from gitlab outside of Debian

00:14:40,890 --> 00:14:48,670
okay

00:14:42,070 --> 00:14:52,770
so that's the idea and how to store the

00:14:48,670 --> 00:14:52,770
keys is an issue

00:14:52,940 --> 00:14:56,399
[Music]

00:14:59,500 --> 00:15:09,370
currently I have this so I commit ducky

00:15:05,130 --> 00:15:12,970
in the repository which means on the

00:15:09,370 --> 00:15:16,390
deploy side there's no need to fetch

00:15:12,970 --> 00:15:18,400
keys from key servers and a way that's

00:15:16,390 --> 00:15:20,500
convenient I mean and them in machines

00:15:18,400 --> 00:15:23,020
you have access to the Debian keyring so

00:15:20,500 --> 00:15:27,820
one can get the keys from there but this

00:15:23,020 --> 00:15:31,840
works also in a setup where there's no

00:15:27,820 --> 00:15:35,260
keyring of all possible keys the

00:15:31,840 --> 00:15:39,880
downside of this is that when a sub key

00:15:35,260 --> 00:15:42,730
expires you need to manually add one so

00:15:39,880 --> 00:15:45,570
not only send the new key to the killing

00:15:42,730 --> 00:15:48,580
but also update the deploy hearing on

00:15:45,570 --> 00:15:52,060
FTP master side they only keep

00:15:48,580 --> 00:15:53,830
fingerprints right yeah and then they

00:15:52,060 --> 00:15:56,770
look up the fingerprint in the Debian

00:15:53,830 --> 00:15:58,380
keyring and so they don't have that

00:15:56,770 --> 00:15:59,520
problem

00:15:58,380 --> 00:16:04,120
[Music]

00:15:59,520 --> 00:16:05,980
yeah design issues there's a like

00:16:04,120 --> 00:16:12,130
already two ways in which this is done

00:16:05,980 --> 00:16:22,210
and yeah I would like to encourage more

00:16:12,130 --> 00:16:25,180
of it questions suggestions and you body

00:16:22,210 --> 00:16:32,640
would like to have this in other

00:16:25,180 --> 00:16:32,640
services or in other projects

00:16:35,670 --> 00:16:38,510
did I

00:16:41,170 --> 00:16:44,170
microphone

00:16:48,440 --> 00:16:55,819
so use a similar setup not with the web

00:16:53,029 --> 00:17:00,370
services annex but the configurations

00:16:55,819 --> 00:17:03,740
for order inline packages so we have

00:17:00,370 --> 00:17:06,289
it's our overall for Amara Linux it's a

00:17:03,740 --> 00:17:08,929
derivative of Debian mm-hmm and what we

00:17:06,289 --> 00:17:12,620
do is we build the packages in this

00:17:08,929 --> 00:17:15,740
inner container using the CFL and we

00:17:12,620 --> 00:17:18,829
deploy using as such right so that's

00:17:15,740 --> 00:17:22,579
kind of what would apply for us but is

00:17:18,829 --> 00:17:25,579
it's not having a lot of quality checks

00:17:22,579 --> 00:17:28,940
that your how you are implementing so

00:17:25,579 --> 00:17:31,850
this seems nice but which distribution

00:17:28,940 --> 00:17:37,130
you said hemara Linux as a ma diary

00:17:31,850 --> 00:17:40,700
yes Omar Linux yeah it's based on Debian

00:17:37,130 --> 00:17:43,700
cool yeah so I use this particular thing

00:17:40,700 --> 00:17:45,020
that just a configuration file is if we

00:17:43,700 --> 00:17:46,340
could just write a configuration file to

00:17:45,020 --> 00:17:48,890
build that they've been packaged in a

00:17:46,340 --> 00:17:53,600
container and just pushes the files to

00:17:48,890 --> 00:17:57,950
the repositories cool yeah so but that's

00:17:53,600 --> 00:18:01,760
that's uses SSH this is GPG is nice yeah

00:17:57,950 --> 00:18:04,400
thank you Thanks and I want yeah I

00:18:01,760 --> 00:18:06,169
wanted to use GPG because at work we

00:18:04,400 --> 00:18:10,460
thought about how to deploying web

00:18:06,169 --> 00:18:13,220
services and we did not want to trust

00:18:10,460 --> 00:18:15,470
the gitlab instance and so we thought

00:18:13,220 --> 00:18:18,409
that the github instance could think a

00:18:15,470 --> 00:18:23,030
deploying machine that had the SSH keys

00:18:18,409 --> 00:18:26,150
to deploy remotely with ansible under

00:18:23,030 --> 00:18:28,370
the production servers but that requires

00:18:26,150 --> 00:18:31,970
an extra machine that needs to be secure

00:18:28,370 --> 00:18:36,200
a lot and so the workaround was well

00:18:31,970 --> 00:18:39,130
yeah we can sign commits so so that it's

00:18:36,200 --> 00:18:39,130
possible to skip

00:18:40,039 --> 00:18:53,649
I can patch an M Debian org and push

00:18:49,450 --> 00:18:53,649
something and see what happens

00:18:58,570 --> 00:19:10,239
what do I know there was a pause it

00:19:16,860 --> 00:19:19,549
okay

00:19:51,550 --> 00:19:54,210
okay

00:20:01,630 --> 00:20:03,660
Oh

00:20:24,320 --> 00:20:27,610
and I could say

00:20:31,240 --> 00:20:39,510
oh okay thank you

00:20:34,750 --> 00:20:39,510
Oh 2012 enough

00:20:45,300 --> 00:20:48,740
and so just me

00:20:55,820 --> 00:20:58,720
how about that

00:20:59,380 --> 00:21:06,120
and other Debian contributors how do you

00:21:03,670 --> 00:21:06,120
do that

00:21:15,480 --> 00:21:18,260
Albert

00:21:27,350 --> 00:21:30,070
okay

00:21:31,050 --> 00:21:35,030
of course there's stuff

00:21:57,200 --> 00:22:00,610
okay sounds good

00:22:07,050 --> 00:22:09,830
mid push

00:22:18,330 --> 00:22:21,840
of course

00:22:36,880 --> 00:22:44,430
never pool before checking what happened

00:22:49,800 --> 00:22:52,800
okay

00:23:00,980 --> 00:23:09,520
right okay that's good of course

00:23:20,720 --> 00:23:26,740
the sound changed okay

00:23:40,490 --> 00:23:44,419
okay pushed so

00:23:48,040 --> 00:23:55,090
that's the new my entire C channel

00:23:52,290 --> 00:24:01,390
something should happen at some point

00:23:55,090 --> 00:24:04,350
especially if I scroll to the bottom who

00:24:01,390 --> 00:24:04,350
needs me okay

00:24:04,650 --> 00:24:13,330
okay I'll get back to you later than

00:24:07,570 --> 00:24:20,620
that okay so there's another web hook

00:24:13,330 --> 00:24:22,030
that notifies things on IFC so you can

00:24:20,620 --> 00:24:30,100
tell there's been a push it's been

00:24:22,030 --> 00:24:34,320
building running the original time okay

00:24:30,100 --> 00:24:37,500
tests are running so I can go to salsa

00:24:34,320 --> 00:24:37,500
[Music]

00:24:41,320 --> 00:24:44,920
and

00:24:41,770 --> 00:24:44,920
[Music]

00:24:54,610 --> 00:24:57,240
this

00:24:59,220 --> 00:25:01,760
No

00:25:08,830 --> 00:25:18,700
the clients it's probably already

00:25:13,099 --> 00:25:18,700
finished no running good

00:25:28,050 --> 00:25:35,720
it's yeah running the test suite it was

00:25:34,559 --> 00:25:38,910
a scroll to the bottom

00:25:35,720 --> 00:25:38,910
[Music]

00:25:45,090 --> 00:25:48,650
what doesn't scroll to bottom

00:25:53,779 --> 00:25:58,549
so the good thing is that I don't need

00:25:55,519 --> 00:26:01,059
to do anything at this point except be

00:25:58,549 --> 00:26:01,059
anxious

00:26:05,730 --> 00:26:09,380
hopefully all tests pass

00:26:25,960 --> 00:26:29,119
[Applause]

00:26:35,750 --> 00:26:40,150
you should have a lot of tests in your

00:26:37,760 --> 00:26:40,150
test suite

00:27:01,210 --> 00:27:06,419
this is a bit I thought they would be

00:27:03,850 --> 00:27:06,419
faster

00:27:07,990 --> 00:27:20,380
yes yeah give it lap well salsa has

00:27:16,240 --> 00:27:23,760
access to lots of container like docking

00:27:20,380 --> 00:27:28,330
files I think it uses docker confirm

00:27:23,760 --> 00:27:34,020
okay and you can choose a lot of docker

00:27:28,330 --> 00:27:34,020
setups so in this case it's the unstable

00:27:40,230 --> 00:27:46,110
the container has no access to the

00:27:42,900 --> 00:27:50,100
Internet so you cannot have a test that

00:27:46,110 --> 00:27:50,880
depends on stuff on the Internet as far

00:27:50,100 --> 00:27:53,810
as I can tell

00:27:50,880 --> 00:27:53,810
sighs I remember

00:28:04,690 --> 00:28:13,380
it is testing all the possible user

00:28:08,320 --> 00:28:16,720
combinations like if you are an

00:28:13,380 --> 00:28:22,420
application manager can you read the

00:28:16,720 --> 00:28:28,360
mailbox of an applicant even if it's not

00:28:22,420 --> 00:28:30,490
your applicant and all sort of like

00:28:28,360 --> 00:28:35,980
permission checking on an end of an org

00:28:30,490 --> 00:28:43,330
is quite insane so can an advocate check

00:28:35,980 --> 00:28:52,170
on the progress of their applicants and

00:28:43,330 --> 00:28:52,170
so on but I was hoping for faster tests

00:28:55,690 --> 00:29:15,370
okay passed back to IRC which one was I

00:29:05,500 --> 00:29:17,880
see no okay testitude success duration

00:29:15,370 --> 00:29:17,880
no time

00:29:18,510 --> 00:29:21,510
fine

00:29:22,180 --> 00:29:27,750
so this should have to get things on

00:29:24,340 --> 00:29:27,750
Southside and

00:29:28,030 --> 00:29:31,160
[Music]

00:29:52,080 --> 00:30:05,220
and opening email and here it is I need

00:30:01,050 --> 00:30:09,690
to have ever hide a bit of the screen

00:30:05,220 --> 00:30:12,320
because is it hidden

00:30:09,690 --> 00:30:12,320
yes

00:30:14,730 --> 00:30:26,090
and then I get me with all the log of

00:30:18,270 --> 00:30:30,840
the deploy process added to a meal so

00:30:26,090 --> 00:30:40,200
yeah deploy happened the commands are

00:30:30,840 --> 00:30:45,030
being run signature is valid can it be

00:30:40,200 --> 00:30:48,800
read probably small right that's what I

00:30:45,030 --> 00:30:48,800
wanted to hide

00:30:54,690 --> 00:31:08,080
it check the signature did base I'm used

00:31:05,080 --> 00:31:09,700
to a base when I pull in changes because

00:31:08,080 --> 00:31:11,830
if I marked sometimes there's a merge

00:31:09,700 --> 00:31:14,170
commit but in this case it checks that

00:31:11,830 --> 00:31:16,270
there is a linear history from the

00:31:14,170 --> 00:31:21,820
current commit to the one to be deployed

00:31:16,270 --> 00:31:24,010
so it's the same thing and that's the

00:31:21,820 --> 00:31:32,410
normal deploy thing for a Django

00:31:24,010 --> 00:31:34,680
application touch of the source code so

00:31:32,410 --> 00:31:39,250
a pass will reload the service and

00:31:34,680 --> 00:31:41,200
removes the deploy file with the

00:31:39,250 --> 00:31:43,030
Chaisson to deploy there were two of

00:31:41,200 --> 00:31:47,230
them I guess one of them failed to

00:31:43,030 --> 00:31:49,120
deploy and was discarded so yeah that's

00:31:47,230 --> 00:31:51,280
one implement one possible

00:31:49,120 --> 00:31:55,060
implementation of also deploy from salsa

00:31:51,280 --> 00:31:57,360
I would suggest that anyone running

00:31:55,060 --> 00:31:59,770
[Music]

00:31:57,360 --> 00:32:01,060
running services for Debian set

00:31:59,770 --> 00:32:04,410
something like this up

00:32:01,060 --> 00:32:08,200
it takes a bit there's example code on

00:32:04,410 --> 00:32:11,200
FTP master and on an EM Debian org and

00:32:08,200 --> 00:32:13,930
contributors the Debian dot org feel

00:32:11,200 --> 00:32:17,230
free to come and poke me for the nmw

00:32:13,930 --> 00:32:19,300
oxide it's not hard to implement one

00:32:17,230 --> 00:32:21,970
like I've been paranoid and then I try

00:32:19,300 --> 00:32:28,210
to make it reusable but the general idea

00:32:21,970 --> 00:32:32,800
is either vikon or via push from salsa

00:32:28,210 --> 00:32:40,420
fetch check signature check that you

00:32:32,800 --> 00:32:45,570
have linear history deploy and yeah this

00:32:40,420 --> 00:32:52,030
greatly helps people joining your your

00:32:45,570 --> 00:32:54,040
your your project or your team being

00:32:52,030 --> 00:32:56,080
able to run the test suite being able to

00:32:54,040 --> 00:32:59,680
deploy you just need to add once you

00:32:56,080 --> 00:33:01,960
trust them you are their key to to the

00:32:59,680 --> 00:33:04,610
the killing if you don't trust them

00:33:01,960 --> 00:33:07,580
you pull the change

00:33:04,610 --> 00:33:11,900
you make an empty signed commit there's

00:33:07,580 --> 00:33:16,660
a git commit dash capital S - - allow

00:33:11,900 --> 00:33:25,250
empty I think so it it's like you stamp

00:33:16,660 --> 00:33:37,820
dare commit and push and yay done so

00:33:25,250 --> 00:33:41,260
yeah that's that's what I have that's

00:33:37,820 --> 00:33:47,210
ten more minutes for questions

00:33:41,260 --> 00:33:55,690
want to see the code again I want to see

00:33:47,210 --> 00:34:00,590
the unit song consistently side again or

00:33:55,690 --> 00:34:02,600
other units system d4 somewhere on such

00:34:00,590 --> 00:34:05,929
a so that we can get back to it if you

00:34:02,600 --> 00:34:10,070
want so I did not know the fight trigger

00:34:05,929 --> 00:34:13,520
and stuff like that but right good point

00:34:10,070 --> 00:34:19,310
cuz currently the units are just on the

00:34:13,520 --> 00:34:21,919
server maybe you could make it

00:34:19,310 --> 00:34:26,260
repository somewhere to share them yeah

00:34:21,919 --> 00:34:26,260
I have I can give you this

00:34:30,379 --> 00:34:40,740
like I blocked a little quick guide on

00:34:33,510 --> 00:34:49,349
system D and time mountains for service

00:34:40,740 --> 00:34:52,760
path okay which I guess if you google

00:34:49,349 --> 00:35:01,650
for a reconvening system D path units

00:34:52,760 --> 00:35:05,130
you get a quick introduction but yeah

00:35:01,650 --> 00:35:06,599
white women when like at the end of the

00:35:05,130 --> 00:35:11,460
talk

00:35:06,599 --> 00:35:16,140
remind me because I I'm usually confused

00:35:11,460 --> 00:35:22,470
after talk and I'll publish them

00:35:16,140 --> 00:35:26,369
somewhere yes that's acutely even just

00:35:22,470 --> 00:35:29,960
yeah in read me in deploy rate me or

00:35:26,369 --> 00:35:29,960
something else yeah

00:35:39,200 --> 00:35:46,130
yeah I've at the beginning of this year

00:35:43,819 --> 00:35:48,619
I think I was asked to give to teach

00:35:46,130 --> 00:35:50,630
people about system D which was a

00:35:48,619 --> 00:35:55,880
fantastic opportunity for me to learn

00:35:50,630 --> 00:35:58,910
something about system D and and these

00:35:55,880 --> 00:36:02,740
are all the teaching notes that I was

00:35:58,910 --> 00:36:02,740
allowed to dump on my blog

00:36:12,390 --> 00:36:23,049
it can also trigger on when a device

00:36:17,579 --> 00:36:28,930
happens or like that was actually cute

00:36:23,049 --> 00:36:31,989
in the systemd course that I made so you

00:36:28,930 --> 00:36:35,650
can say when that USB key is plug the

00:36:31,989 --> 00:36:37,779
play beeps that specific USB key so

00:36:35,650 --> 00:36:41,950
people started playing pranks on each

00:36:37,779 --> 00:36:43,599
other saying that when the USB key of a

00:36:41,950 --> 00:36:46,150
specific person is plugged into

00:36:43,599 --> 00:36:49,259
somebody's computer there will be a loud

00:36:46,150 --> 00:36:49,259
alert sound

00:37:04,110 --> 00:37:07,280
[Applause]

00:37:04,190 --> 00:37:07,280

YouTube URL: https://www.youtube.com/watch?v=HNO2klkCXNA


