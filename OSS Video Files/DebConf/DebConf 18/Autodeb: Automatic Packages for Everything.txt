Title: Autodeb: Automatic Packages for Everything
Publication date: 2018-08-01
Playlist: DebConf 18
Description: 
	by Alexandre Viau

At: DebConf18
https://debconf18.debconf.org/talks/49-autodeb-automatic-packages-for-everything/

Many packaging tasks can be automated, and are likely to succeed without any human intervention:

 - creating a backport for Debian stable from a packaging in Debian testing
 - upgrading a package to a newer upstream version
 - packaging a simple Perl, Python or Ruby using one of the tools listed on AutomaticPackagingTools

However, doing those tasks still require Debian packaging knowledge.

As a step towards Debian's world domination, it would be great if we could automate those tasks and provide ready-to-use Debian packages, so that users are left with a deb-based alternative when there are no packages for their needs in Debian itself, instead of using upstream packages or building from source.

Autodeb is a project that tries to automatically create and distribute package updates and backports.

This talk will present the current status of the projects, statistics, and takeaways.

Room: Yushan (玉山)
Scheduled start: 2018-07-31 16:30:00
Captions: 
	00:00:06,040 --> 00:00:11,840
so hello everyone my name is Alexson and

00:00:09,740 --> 00:00:15,500
today i will discuss about auto dev

00:00:11,840 --> 00:00:17,750
which is a new debian service or project

00:00:15,500 --> 00:00:23,090
that tries to produce automatic packages

00:00:17,750 --> 00:00:25,520
for just about everything so first i'll

00:00:23,090 --> 00:00:27,290
quickly present the project in the goals

00:00:25,520 --> 00:00:30,560
then I'll go over the current state of

00:00:27,290 --> 00:00:33,440
the project move on with things that

00:00:30,560 --> 00:00:35,720
have improved that we've like been

00:00:33,440 --> 00:00:39,640
contributing other than directly out of

00:00:35,720 --> 00:00:42,980
that and then we'll go over the roadmap

00:00:39,640 --> 00:00:46,539
so the process of updating a package can

00:00:42,980 --> 00:00:49,489
be can be quite simple and repetitive

00:00:46,539 --> 00:00:51,739
it's it's a matter of downloading the

00:00:49,489 --> 00:00:53,570
new version with you can refreshing

00:00:51,739 --> 00:00:57,460
patches or even removing patches

00:00:53,570 --> 00:01:00,710
building the package and uploading it

00:00:57,460 --> 00:01:02,870
most of most of these steps can be can

00:01:00,710 --> 00:01:07,120
be automated and sometimes like there's

00:01:02,870 --> 00:01:10,490
almost no no other modifications to do

00:01:07,120 --> 00:01:12,710
so yeah so in many cases all there is to

00:01:10,490 --> 00:01:16,790
do is to update to a new upstream

00:01:12,710 --> 00:01:18,890
version and things will work fine so I

00:01:16,790 --> 00:01:22,250
don't why don't we update packages

00:01:18,890 --> 00:01:25,190
faster well at least in my case it takes

00:01:22,250 --> 00:01:27,890
time and one of the big issues is that

00:01:25,190 --> 00:01:31,430
thing can go things can go wrong even

00:01:27,890 --> 00:01:33,680
after the upload so build failures on

00:01:31,430 --> 00:01:36,550
some architectures that I could not

00:01:33,680 --> 00:01:39,610
really have caught before uploading or

00:01:36,550 --> 00:01:41,900
breaking reverse dependencies

00:01:39,610 --> 00:01:44,090
technically you should be able to detect

00:01:41,900 --> 00:01:45,950
most of these failures before you before

00:01:44,090 --> 00:01:47,870
you make the upload like you should be

00:01:45,950 --> 00:01:50,480
able to build on all architectures and

00:01:47,870 --> 00:01:52,640
you should be able to at least test

00:01:50,480 --> 00:01:54,860
minimal your reverse dependencies so

00:01:52,640 --> 00:01:57,140
something some teams have tools to do

00:01:54,860 --> 00:01:59,330
that there is like rebuild all the

00:01:57,140 --> 00:02:01,040
things which is a tool that allows you

00:01:59,330 --> 00:02:04,790
to rebuild all reversible dependencies

00:02:01,040 --> 00:02:07,100
with the Deb and you can also run a auto

00:02:04,790 --> 00:02:11,540
pkg test on all of your reverse

00:02:07,100 --> 00:02:13,930
dependencies before making an upload the

00:02:11,540 --> 00:02:16,220
issues like this did they get caught in

00:02:13,930 --> 00:02:18,230
unstable so it's fine like it it won't

00:02:16,220 --> 00:02:20,360
your package won't migrate but

00:02:18,230 --> 00:02:23,030
but you still like you'll still have to

00:02:20,360 --> 00:02:25,340
fix it and you can slow down other

00:02:23,030 --> 00:02:28,010
people's work because your package and

00:02:25,340 --> 00:02:30,230
unstable will block migration so it's

00:02:28,010 --> 00:02:33,290
better it's better if we can detect as

00:02:30,230 --> 00:02:35,299
much issues as possible as early as

00:02:33,290 --> 00:02:39,110
possible so before you before you upload

00:02:35,299 --> 00:02:41,540
too unstable so so the process of back

00:02:39,110 --> 00:02:44,720
porting a package suffers some of the

00:02:41,540 --> 00:02:46,489
sims downside sim downsides so it's

00:02:44,720 --> 00:02:48,470
quite simple interpretive sometime when

00:02:46,489 --> 00:02:50,030
you backward to when you backward first

00:02:48,470 --> 00:02:52,610
table all you have to do is just build

00:02:50,030 --> 00:02:53,959
it back and it's done like there's for a

00:02:52,610 --> 00:02:58,069
good number of package there's

00:02:53,959 --> 00:03:01,069
absolutely nothing to do so why don't we

00:02:58,069 --> 00:03:04,670
back for more packages well in my case

00:03:01,069 --> 00:03:06,230
also it takes time and then we I don't

00:03:04,670 --> 00:03:08,120
know if there is demand for a back board

00:03:06,230 --> 00:03:09,590
for some of my packages I assume that

00:03:08,120 --> 00:03:11,390
sometimes I assume there's not so I just

00:03:09,590 --> 00:03:15,200
don't do it I just don't spend the time

00:03:11,390 --> 00:03:17,329
in doing it and if we if we back ported

00:03:15,200 --> 00:03:19,160
everything we would end up with a copy

00:03:17,329 --> 00:03:21,530
of testing which we don't want to do

00:03:19,160 --> 00:03:24,049
right the backwards repository is a is a

00:03:21,530 --> 00:03:25,220
collection of packages that we know are

00:03:24,049 --> 00:03:27,829
working well together

00:03:25,220 --> 00:03:30,829
and that will not break your ears table

00:03:27,829 --> 00:03:32,720
install and one of the carest one of the

00:03:30,829 --> 00:03:35,480
other characteristics of the backwards

00:03:32,720 --> 00:03:37,190
repository is that they are so if your

00:03:35,480 --> 00:03:39,139
upload package a in backwards and then

00:03:37,190 --> 00:03:40,819
you upload package B pick a package B is

00:03:39,139 --> 00:03:43,220
able to depend on a so they like they

00:03:40,819 --> 00:03:45,799
all depend on each other and if you back

00:03:43,220 --> 00:03:47,540
ported so many more things and you would

00:03:45,799 --> 00:03:49,730
pull you would pull a lot of things when

00:03:47,540 --> 00:03:51,470
people install stuff from backwards so

00:03:49,730 --> 00:03:54,680
we want to treat try to keep that as

00:03:51,470 --> 00:03:57,669
like minimal and as useful as possible

00:03:54,680 --> 00:03:57,669
for our users

00:03:57,709 --> 00:04:03,579
so is there room for improvement here

00:04:00,680 --> 00:04:06,980
well package maintainer could definitely

00:04:03,579 --> 00:04:08,950
benefit for from more automations some

00:04:06,980 --> 00:04:14,090
of the steps I have described before

00:04:08,950 --> 00:04:16,310
don't have to be performed by human they

00:04:14,090 --> 00:04:19,639
could benefit from more confidence when

00:04:16,310 --> 00:04:22,789
uploading a new package so you would

00:04:19,639 --> 00:04:24,770
maybe some of us would refrain less from

00:04:22,789 --> 00:04:29,550
updating a package if we knew it wasn't

00:04:24,770 --> 00:04:33,220
going to break reverse dependencies

00:04:29,550 --> 00:04:35,260
our users they could benefit from from

00:04:33,220 --> 00:04:37,780
just having more more back ports in this

00:04:35,260 --> 00:04:40,720
table riposte really I know I do like as

00:04:37,780 --> 00:04:44,170
a stable users as a stable user I really

00:04:40,720 --> 00:04:46,570
want more stuff in there I end up

00:04:44,170 --> 00:04:49,450
sometimes with the Franken Debian

00:04:46,570 --> 00:04:52,060
install where I have stuff from unstable

00:04:49,450 --> 00:04:56,260
or from from stable on on my stable

00:04:52,060 --> 00:05:00,550
machine and then our users could benefit

00:04:56,260 --> 00:05:05,710
for a newer package versions - whether

00:05:00,550 --> 00:05:09,610
that is in in stable or unstable so what

00:05:05,710 --> 00:05:11,830
does other the tries try to do we we

00:05:09,610 --> 00:05:13,930
generate and distribute back ports and

00:05:11,830 --> 00:05:16,720
packages for a new upstream versions

00:05:13,930 --> 00:05:19,390
automatically so we have we have

00:05:16,720 --> 00:05:22,510
repositories where we have a ton of back

00:05:19,390 --> 00:05:26,200
boards and a ton of a ton of updated

00:05:22,510 --> 00:05:28,720
packages for unstable that were not

00:05:26,200 --> 00:05:32,380
built by humans so they are not in the

00:05:28,720 --> 00:05:34,480
main archive and yeah we also want

00:05:32,380 --> 00:05:36,640
there's a typo here we will also want to

00:05:34,480 --> 00:05:38,110
enable DeLeon package maintainer to test

00:05:36,640 --> 00:05:40,630
their packages and their reverse

00:05:38,110 --> 00:05:43,030
dependencies before every upload just to

00:05:40,630 --> 00:05:45,460
give you like more insight before before

00:05:43,030 --> 00:05:49,240
you upload and detect more more

00:05:45,460 --> 00:05:51,040
regressions so I'm doing this in the

00:05:49,240 --> 00:05:54,280
context of a google Summer of Code

00:05:51,040 --> 00:05:57,310
project with Luca as a as a mentor

00:05:54,280 --> 00:06:00,510
because actually been doing archive

00:05:57,310 --> 00:06:05,290
rebuilds for a while so it fits into

00:06:00,510 --> 00:06:09,420
into his expertise here one of one of

00:06:05,290 --> 00:06:11,890
our goals also is to to give like

00:06:09,420 --> 00:06:14,200
for now Luca has been doing this and

00:06:11,890 --> 00:06:17,950
opening Buzz pretty much alone even

00:06:14,200 --> 00:06:20,950
though some of his scripts are on our

00:06:17,950 --> 00:06:22,360
available I think but we would like to

00:06:20,950 --> 00:06:25,540
make it available for every Debian

00:06:22,360 --> 00:06:27,340
developer so if you have a GCC upload

00:06:25,540 --> 00:06:32,080
you want to test it should not like

00:06:27,340 --> 00:06:33,430
require you asking someone so we'll go

00:06:32,080 --> 00:06:35,560
over the current state of the project

00:06:33,430 --> 00:06:38,650
what was done and what what's what's

00:06:35,560 --> 00:06:40,690
coming the project one was - the project

00:06:38,650 --> 00:06:42,550
goal one was to generate and distribute

00:06:40,690 --> 00:06:44,380
back ports and

00:06:42,550 --> 00:06:47,110
Edge's for a new upstream versions

00:06:44,380 --> 00:06:50,350
automatically so how do we do that

00:06:47,110 --> 00:06:52,210
well we try we try to for backports we

00:06:50,350 --> 00:06:56,380
try to back port any package in testing

00:06:52,210 --> 00:07:00,430
that has a newer version that is newer

00:06:56,380 --> 00:07:03,040
than the one in stable we find the

00:07:00,430 --> 00:07:05,080
candidates with the API at API that FTP

00:07:03,040 --> 00:07:05,770
masters that Debian that orgs it's a

00:07:05,080 --> 00:07:10,540
dead

00:07:05,770 --> 00:07:12,520
it's Debian archive kits API we

00:07:10,540 --> 00:07:13,990
currently only run job for a fixed

00:07:12,520 --> 00:07:16,300
number of packages what I mean by that

00:07:13,990 --> 00:07:18,130
is that we we do not detect new

00:07:16,300 --> 00:07:21,790
candidates like there's a button I push

00:07:18,130 --> 00:07:23,650
and III rights like I asked for a

00:07:21,790 --> 00:07:26,620
thousand packages and it will try to

00:07:23,650 --> 00:07:28,990
back port a thousand because I'm still

00:07:26,620 --> 00:07:31,390
in the testing phase but eventually what

00:07:28,990 --> 00:07:33,610
will happen is we'll just detect new

00:07:31,390 --> 00:07:37,450
candidates and build them as as they

00:07:33,610 --> 00:07:40,270
appear for your information there is

00:07:37,450 --> 00:07:43,210
about 17,000 candidates right now that

00:07:40,270 --> 00:07:46,630
can be back ported but this this

00:07:43,210 --> 00:07:49,960
particular stat can be a bit is a bit

00:07:46,630 --> 00:07:52,930
fallacy because it includes packages

00:07:49,960 --> 00:07:57,100
that have unsatisfiable build

00:07:52,930 --> 00:08:02,020
dependencies in stable so it's pretty

00:07:57,100 --> 00:08:03,880
much less than that results are added to

00:08:02,020 --> 00:08:07,210
a repository that you can already access

00:08:03,880 --> 00:08:11,650
at auto at Debian that net slash repos

00:08:07,210 --> 00:08:14,400
slash backwards we run out of package a

00:08:11,650 --> 00:08:17,530
test on all all packages that we build

00:08:14,400 --> 00:08:22,060
we consider them as a build failure it

00:08:17,530 --> 00:08:24,100
if if it fails we only build on amd64

00:08:22,060 --> 00:08:28,450
for now for now but that's definitely

00:08:24,100 --> 00:08:33,790
not the end goal here we we hope to

00:08:28,450 --> 00:08:37,180
build on all release architectures for

00:08:33,790 --> 00:08:40,750
for package upgrades we attempt to

00:08:37,180 --> 00:08:43,810
update packages in unstable to a new

00:08:40,750 --> 00:08:45,670
upstream version when whenever it's

00:08:43,810 --> 00:08:49,470
available and we we can know that

00:08:45,670 --> 00:08:52,060
because of watch the watch file

00:08:49,470 --> 00:08:54,640
candidates are found in the

00:08:52,060 --> 00:08:56,560
in the universal Debian database so

00:08:54,640 --> 00:08:57,970
that's already available publicly and

00:08:56,560 --> 00:09:00,190
there's an API you can call and you'll

00:08:57,970 --> 00:09:02,370
see every every package that needs

00:09:00,190 --> 00:09:05,470
updating

00:09:02,370 --> 00:09:07,660
again we don't detect new candidates

00:09:05,470 --> 00:09:11,170
automatically we use a button I have to

00:09:07,660 --> 00:09:13,450
push - to build new packages for

00:09:11,170 --> 00:09:15,339
information there is about there is

00:09:13,450 --> 00:09:19,270
almost 6000 candidates that's very

00:09:15,339 --> 00:09:22,900
little I guess probably due to the fact

00:09:19,270 --> 00:09:24,760
that maybe there are some missing watch

00:09:22,900 --> 00:09:27,540
files for a good number of our packages

00:09:24,760 --> 00:09:32,260
I don't know or maybe you didi is

00:09:27,540 --> 00:09:34,690
missing some things I know so right now

00:09:32,260 --> 00:09:37,060
as of today you can already install Auto

00:09:34,690 --> 00:09:39,520
the back ports or package upgrades by

00:09:37,060 --> 00:09:42,970
using our repositories with the mix of

00:09:39,520 --> 00:09:47,110
like a preferences you can you can

00:09:42,970 --> 00:09:51,250
install only one package from from our

00:09:47,110 --> 00:09:53,500
repos it's also it also can be used for

00:09:51,250 --> 00:09:56,380
for Debian package maintainer so if if

00:09:53,500 --> 00:09:58,330
if you have if you have a package that

00:09:56,380 --> 00:10:00,370
we've already update upgraded you can

00:09:58,330 --> 00:10:05,620
just pull our package test it and then

00:10:00,370 --> 00:10:09,130
maybe just upload it yourself so success

00:10:05,620 --> 00:10:11,650
rate based on the thousand backwards and

00:10:09,130 --> 00:10:16,089
a thousand package upgrades we have 45

00:10:11,650 --> 00:10:18,370
percent of backports successful and 31

00:10:16,089 --> 00:10:22,960
percent of package upgrades are also

00:10:18,370 --> 00:10:24,970
successful there are reasons for

00:10:22,960 --> 00:10:27,460
failures that I'd like to go over with

00:10:24,970 --> 00:10:29,230
with you so there are our large large

00:10:27,460 --> 00:10:31,180
amount of failures due to the fact that

00:10:29,230 --> 00:10:33,010
we don't refresh patches yet so like

00:10:31,180 --> 00:10:36,100
this is a very large amount of failure

00:10:33,010 --> 00:10:38,770
and I haven't counted but just by

00:10:36,100 --> 00:10:41,290
opening logs I think this is the number

00:10:38,770 --> 00:10:43,690
one error that I see all the time it's a

00:10:41,290 --> 00:10:45,690
quick patch and I'm sure we can we can

00:10:43,690 --> 00:10:48,370
improve this with some heuristics like

00:10:45,690 --> 00:10:53,040
trying to drop the packs or just trying

00:10:48,370 --> 00:10:56,200
to refresh the patch like I said before

00:10:53,040 --> 00:10:58,480
packages with unsatisfiable dependencies

00:10:56,200 --> 00:11:01,780
are included in the backboards failures

00:10:58,480 --> 00:11:03,400
so like these take these like one second

00:11:01,780 --> 00:11:04,959
to build like they don't cost any and

00:11:03,400 --> 00:11:06,329
it's in any any time when our

00:11:04,959 --> 00:11:08,920
infrastructure

00:11:06,329 --> 00:11:13,120
they take one second to fail I mean not

00:11:08,920 --> 00:11:15,130
to build and then some failures are due

00:11:13,120 --> 00:11:17,890
to bugs in the order that infrastructure

00:11:15,130 --> 00:11:20,079
and code mostly for a package upgrades

00:11:17,890 --> 00:11:23,890
we have a lot of failure in my in my

00:11:20,079 --> 00:11:25,839
broken code so yeah we can expect

00:11:23,890 --> 00:11:30,790
significant improvement with little

00:11:25,839 --> 00:11:33,430
efforts on these stats so I I can i I

00:11:30,790 --> 00:11:35,740
expect to reach where more than 50

00:11:33,430 --> 00:11:37,329
percent of a successful black ports and

00:11:35,740 --> 00:11:43,240
for package upgrades it's a bit hard to

00:11:37,329 --> 00:11:45,160
tell now for testing before before every

00:11:43,240 --> 00:11:47,380
upload so we we were building this

00:11:45,160 --> 00:11:49,300
infrastructure that builds and tests a

00:11:47,380 --> 00:11:49,779
large number of packages so we thought

00:11:49,300 --> 00:11:52,060
why not

00:11:49,779 --> 00:11:54,820
like make it available to Debian

00:11:52,060 --> 00:11:56,769
developers for other purposes so that's

00:11:54,820 --> 00:11:59,050
the second goal of the project is to

00:11:56,769 --> 00:12:01,390
enable Debian package maintainer

00:11:59,050 --> 00:12:04,240
to test their package and reverse

00:12:01,390 --> 00:12:07,870
dependencies before every upload so how

00:12:04,240 --> 00:12:11,709
does that work well Otto Deb has an

00:12:07,870 --> 00:12:14,199
upload queue and we would suggest that

00:12:11,709 --> 00:12:18,490
you upload there instead of uploading to

00:12:14,199 --> 00:12:22,149
FTP master the way it works is it will

00:12:18,490 --> 00:12:24,279
build we only accept source uploads we

00:12:22,149 --> 00:12:26,440
will build your package run out of pkg a

00:12:24,279 --> 00:12:29,890
test and forward the upload to the FTP

00:12:26,440 --> 00:12:31,930
master queue if it succeeds do that

00:12:29,890 --> 00:12:34,690
that's what works already but in the

00:12:31,930 --> 00:12:37,630
future we'll will rebuild all reverse

00:12:34,690 --> 00:12:40,390
dependencies and run Auto pkg test on

00:12:37,630 --> 00:12:44,230
all reverse dependencies so depending on

00:12:40,390 --> 00:12:47,589
them on how you uploaded the package you

00:12:44,230 --> 00:12:50,079
might be able to tell to tell rqm well

00:12:47,589 --> 00:12:53,050
don't forward the upload if this fails

00:12:50,079 --> 00:12:54,850
or if this other thing fails is you can

00:12:53,050 --> 00:12:57,790
configure it when you upload like you

00:12:54,850 --> 00:12:59,380
can ask don't run up duplicate a test

00:12:57,790 --> 00:13:02,949
just try to rebuild all the rivers in

00:12:59,380 --> 00:13:07,990
dependencies or you can ask run Auto TKG

00:13:02,949 --> 00:13:11,610
test so it's all configurable so yeah

00:13:07,990 --> 00:13:11,610
that's what works right now

00:13:12,050 --> 00:13:17,070
so what that does is it provides you

00:13:15,120 --> 00:13:19,560
with easy access to thorough testing

00:13:17,070 --> 00:13:21,420
before every upload it runs tests that

00:13:19,560 --> 00:13:24,630
are not often run due to lack of time

00:13:21,420 --> 00:13:28,380
any resources the way it works right now

00:13:24,630 --> 00:13:30,900
is we have a HD HTTP queue and actually

00:13:28,380 --> 00:13:33,420
we make when you upload a package - oh -

00:13:30,900 --> 00:13:36,930
Deb you have immediate feedback unlike

00:13:33,420 --> 00:13:38,460
unlike unlike the FTP message - for

00:13:36,930 --> 00:13:40,410
example where you have to wait ten

00:13:38,460 --> 00:13:42,600
minutes for an email we we will

00:13:40,410 --> 00:13:44,670
immediately respond with a with an

00:13:42,600 --> 00:13:48,150
upload idea that you can use via our

00:13:44,670 --> 00:13:50,910
REST API so you can your you're able to

00:13:48,150 --> 00:13:53,160
build build tools on top on top of that

00:13:50,910 --> 00:13:55,080
queue so if your team if your team has

00:13:53,160 --> 00:13:57,240
some kind of workflow that would benefit

00:13:55,080 --> 00:14:02,420
from the from this it's easy to build

00:13:57,240 --> 00:14:02,420
automated systems that use our our API

00:14:02,540 --> 00:14:08,460
so yeah and when you make an upload to

00:14:05,010 --> 00:14:10,590
auto Deb we will we will make some some

00:14:08,460 --> 00:14:13,200
immediate checks and you'll get feedback

00:14:10,590 --> 00:14:16,470
from that we we've had some deep patches

00:14:13,200 --> 00:14:18,810
I'll go over later so for for

00:14:16,470 --> 00:14:20,730
infrastructure where does that run this

00:14:18,810 --> 00:14:24,330
runs on Debian's amazon web services

00:14:20,730 --> 00:14:29,580
account is already available at

00:14:24,330 --> 00:14:31,680
authority on that net however well the

00:14:29,580 --> 00:14:33,089
thing is I'm still developing this a lot

00:14:31,680 --> 00:14:37,890
and I don't have like two environments

00:14:33,089 --> 00:14:40,230
so I wipe it like every week or don't

00:14:37,890 --> 00:14:44,280
expect things they are to remain where

00:14:40,230 --> 00:14:46,530
they are and repositories are also

00:14:44,280 --> 00:14:51,630
already available at auto debian dotnet

00:14:46,530 --> 00:14:53,820
slash repos um so yeah we've been

00:14:51,630 --> 00:14:57,270
improving some other things in the the

00:14:53,820 --> 00:14:59,790
in the demon related projects so for for

00:14:57,270 --> 00:15:02,280
both deep attendee put h ng they will

00:14:59,790 --> 00:15:06,420
now display HTTP our message after a

00:15:02,280 --> 00:15:08,070
failed upload so I think the next slide

00:15:06,420 --> 00:15:10,980
I have an example so if you upload a

00:15:08,070 --> 00:15:14,339
package to Auto Deb you can immediately

00:15:10,980 --> 00:15:16,320
get feedback so only source text uploads

00:15:14,339 --> 00:15:20,490
are accepted or other other kinds of

00:15:16,320 --> 00:15:24,990
checks this this kind of thing could be

00:15:20,490 --> 00:15:25,440
implemented in the in the standard FTP

00:15:24,990 --> 00:15:27,300
master

00:15:25,440 --> 00:15:28,740
like for example they take like ten

00:15:27,300 --> 00:15:31,260
minutes to send you an email saying that

00:15:28,740 --> 00:15:34,340
the the checksums don't match you could

00:15:31,260 --> 00:15:34,340
know that right away

00:15:35,040 --> 00:15:39,420
I think the deep patch was not merged

00:15:37,710 --> 00:15:44,820
yet but the deeper energy patch is

00:15:39,420 --> 00:15:47,730
already in the archives so the Debian

00:15:44,820 --> 00:15:51,090
archive kit has an HTTP API that was

00:15:47,730 --> 00:15:53,880
also improved while working on this we

00:15:51,090 --> 00:15:56,010
have we have new features to search for

00:15:53,880 --> 00:16:00,330
files in the archive page under under

00:15:56,010 --> 00:16:05,790
checksums and to browse source packages

00:16:00,330 --> 00:16:08,490
by control field values then I've also

00:16:05,790 --> 00:16:10,590
been improving those crypto library the

00:16:08,490 --> 00:16:13,680
way author that works right now is you

00:16:10,590 --> 00:16:15,420
you log in with your salsa account in

00:16:13,680 --> 00:16:17,640
the future it will it we will we will

00:16:15,420 --> 00:16:19,770
use the I think there's a student

00:16:17,640 --> 00:16:24,210
working on G sock for a replacement for

00:16:19,770 --> 00:16:26,070
the Debian s single sang on it use the

00:16:24,210 --> 00:16:27,720
setup that we have right now does not

00:16:26,070 --> 00:16:30,300
work with oauth2 but it will in the

00:16:27,720 --> 00:16:32,370
future so you log in with your salsa

00:16:30,300 --> 00:16:33,990
account you add your PGP key and then we

00:16:32,370 --> 00:16:36,210
we know that uploads are made by you

00:16:33,990 --> 00:16:38,970
will that we will assign them to you so

00:16:36,210 --> 00:16:41,280
we hit some bugs and go-go script to

00:16:38,970 --> 00:16:46,920
libraries that that were that were fixed

00:16:41,280 --> 00:16:49,560
and now what so what's coming

00:16:46,920 --> 00:16:52,230
well web interface so right now the web

00:16:49,560 --> 00:16:55,710
interface on the autoloader then dotnet

00:16:52,230 --> 00:16:59,670
is pretty poor what will improve is we

00:16:55,710 --> 00:17:01,770
will have pages for every package so the

00:16:59,670 --> 00:17:04,020
Debian maintainer scan can refer to them

00:17:01,770 --> 00:17:06,780
and they will they will tell the

00:17:04,020 --> 00:17:08,939
information like here is the last bill

00:17:06,780 --> 00:17:10,620
that we have a pure package on this

00:17:08,939 --> 00:17:14,069
version and we will link to the package

00:17:10,620 --> 00:17:15,600
we will provide the logs the logs are

00:17:14,069 --> 00:17:19,550
already available but they are hard to

00:17:15,600 --> 00:17:22,310
find for specific packages and

00:17:19,550 --> 00:17:25,800
eventually I hope that some of these

00:17:22,310 --> 00:17:28,319
informations can be added to to the

00:17:25,800 --> 00:17:30,060
tracker so instead of instead of just of

00:17:28,319 --> 00:17:32,100
just saying that we there is a new

00:17:30,060 --> 00:17:33,870
upstream version available for your

00:17:32,100 --> 00:17:35,730
package we could say there is a new

00:17:33,870 --> 00:17:38,200
version version available for your

00:17:35,730 --> 00:17:40,210
package and we've built it

00:17:38,200 --> 00:17:43,029
it fails and here's the log so you can

00:17:40,210 --> 00:17:46,000
already know like there's there's our

00:17:43,029 --> 00:17:47,710
new new dependencies and you'll it

00:17:46,000 --> 00:17:49,990
produces a lot of information that is

00:17:47,710 --> 00:17:52,419
that you can use before even trying to

00:17:49,990 --> 00:17:55,740
update your package so you can better

00:17:52,419 --> 00:17:55,740
prioritize your work like that

00:17:55,779 --> 00:17:59,620
we will detect new candidates

00:17:57,760 --> 00:18:03,190
automatically instead of just me pushing

00:17:59,620 --> 00:18:04,750
the button and to run large jobs we

00:18:03,190 --> 00:18:09,340
intend to build on our release

00:18:04,750 --> 00:18:12,399
architectures it should be pretty easy

00:18:09,340 --> 00:18:16,779
considering the resources that we have

00:18:12,399 --> 00:18:19,269
available we will read rebuild reverse

00:18:16,779 --> 00:18:21,190
dependencies like I said earlier and run

00:18:19,269 --> 00:18:24,100
Auto pkt tests so we have a we have a

00:18:21,190 --> 00:18:26,399
REST API like I mentioned before so that

00:18:24,100 --> 00:18:29,110
you can build tools on top of it is

00:18:26,399 --> 00:18:31,330
pretty undocumented right now so but

00:18:29,110 --> 00:18:37,450
that will quickly improve in the

00:18:31,330 --> 00:18:40,269
following weeks yeah so code code and

00:18:37,450 --> 00:18:42,039
bugs should go to salsa if you want to

00:18:40,269 --> 00:18:44,019
contribute the project is in go line we

00:18:42,039 --> 00:18:45,549
also have a public infrastructure code

00:18:44,019 --> 00:18:49,419
written in ansible

00:18:45,549 --> 00:18:53,799
on a salsa and I I hang out in Auto

00:18:49,419 --> 00:18:58,149
Dedmon oft see I was hoping to get some

00:18:53,799 --> 00:19:00,850
some ideas or or questions from you guys

00:18:58,149 --> 00:19:07,750
so any comments on the project and what

00:19:00,850 --> 00:19:10,059
you think we could do I have a question

00:19:07,750 --> 00:19:13,120
what is if you update to a new upstream

00:19:10,059 --> 00:19:15,909
version and you have some change lock

00:19:13,120 --> 00:19:18,789
entry will it go to the version control

00:19:15,909 --> 00:19:22,659
system of the package and no it won't

00:19:18,789 --> 00:19:25,120
but um yes we don't commit on your on

00:19:22,659 --> 00:19:26,740
your coaster is right so we just we

00:19:25,120 --> 00:19:29,380
build the package we will host the

00:19:26,740 --> 00:19:31,870
source package so you can then download

00:19:29,380 --> 00:19:34,960
the source package and see what what we

00:19:31,870 --> 00:19:38,409
did so that that's all saved on RS

00:19:34,960 --> 00:19:42,240
system so there is a there are already

00:19:38,409 --> 00:19:44,710
teams working on on features like I

00:19:42,240 --> 00:19:46,330
think for the go team we have something

00:19:44,710 --> 00:19:48,279
coming up for this that where where we

00:19:46,330 --> 00:19:50,649
open pull requests automatically on sass

00:19:48,279 --> 00:19:51,430
so for example if there is a if there is

00:19:50,649 --> 00:19:53,920
a new version

00:19:51,430 --> 00:19:56,410
a new package version available for a go

00:19:53,920 --> 00:19:58,270
library we have we will eventually have

00:19:56,410 --> 00:20:01,600
some tool that opens a poll request on

00:19:58,270 --> 00:20:04,450
salsa asking you to merge so and you

00:20:01,600 --> 00:20:06,580
will have dialogues eventually I don't

00:20:04,450 --> 00:20:08,380
see why we cannot do it with Otto Deb so

00:20:06,580 --> 00:20:09,910
it would be like very very generic and

00:20:08,380 --> 00:20:11,350
it would work for all teens we can

00:20:09,910 --> 00:20:12,730
easily detect that this package is

00:20:11,350 --> 00:20:15,760
hosted on salsa and open the poll

00:20:12,730 --> 00:20:18,480
requests the angel I see is that

00:20:15,760 --> 00:20:22,330
maintained or just didn't notice that

00:20:18,480 --> 00:20:26,140
it's automatic updates and just pulses

00:20:22,330 --> 00:20:28,180
is git repository and uploads from this

00:20:26,140 --> 00:20:30,330
something else yeah of course we would

00:20:28,180 --> 00:20:33,310
never commit in the master of here

00:20:30,330 --> 00:20:36,520
record in the master and then but if you

00:20:33,310 --> 00:20:38,980
don't interact with Swiss kit at all so

00:20:36,520 --> 00:20:40,960
no completely question nothing there the

00:20:38,980 --> 00:20:42,370
maintainer we're not notice yeah yeah

00:20:40,960 --> 00:20:44,140
and so it would be good if says

00:20:42,370 --> 00:20:47,140
something like hey there was an upload

00:20:44,140 --> 00:20:48,760
and your suit respects I have another

00:20:47,140 --> 00:20:51,310
question because but we will never

00:20:48,760 --> 00:20:55,020
upload to the main archive right okay

00:20:51,310 --> 00:21:01,540
that's for sure I think yeah why not

00:20:55,020 --> 00:21:03,150
well I don't know well is they are not

00:21:01,540 --> 00:21:04,450
they are not verified they are not like

00:21:03,150 --> 00:21:06,670
if

00:21:04,450 --> 00:21:08,800
upstreams ads like mullah wearing their

00:21:06,670 --> 00:21:13,420
coat we won't even notice it's well it's

00:21:08,800 --> 00:21:16,930
my next question case would be in my new

00:21:13,420 --> 00:21:19,780
app of I showed the system where I can

00:21:16,930 --> 00:21:22,600
how to update our packages yeah very

00:21:19,780 --> 00:21:25,200
trivial and very nice and in principle I

00:21:22,600 --> 00:21:27,760
could imagine that it goes without

00:21:25,200 --> 00:21:29,890
attention because the packages are

00:21:27,760 --> 00:21:31,720
tested on the surround mirror yeah

00:21:29,890 --> 00:21:35,110
working they have all typically it says

00:21:31,720 --> 00:21:37,450
nothing then signing and uploading which

00:21:35,110 --> 00:21:39,310
yeah I could be alternative in principle

00:21:37,450 --> 00:21:43,630
wonder what the Denon policy says about

00:21:39,310 --> 00:21:46,540
this but maybe this is something that

00:21:43,630 --> 00:21:48,640
can evolve in the future like the first

00:21:46,540 --> 00:21:50,800
step would be like having users test

00:21:48,640 --> 00:21:54,400
those packages then maybe the next step

00:21:50,800 --> 00:21:57,250
in a release or two would be to move on

00:21:54,400 --> 00:21:59,320
with something like that the thing the

00:21:57,250 --> 00:22:01,450
thing that is unique with our backwards

00:21:59,320 --> 00:22:02,590
repository is that they don't the

00:22:01,450 --> 00:22:04,269
package they're they don't depend on

00:22:02,590 --> 00:22:05,589
anything like they are like like one of

00:22:04,269 --> 00:22:08,440
packages they don't depend on each other

00:22:05,589 --> 00:22:11,379
so it's it's they are very useful for

00:22:08,440 --> 00:22:13,209
users for this reason I think it would

00:22:11,379 --> 00:22:14,799
not be sensible to do it with any

00:22:13,209 --> 00:22:17,169
package but if you say we have a wide

00:22:14,799 --> 00:22:19,779
list of packages well this is possible

00:22:17,169 --> 00:22:20,309
yeah I could imagine this yeah I could

00:22:19,779 --> 00:22:23,320
too

00:22:20,309 --> 00:22:26,080
thank you for your book yeah food for

00:22:23,320 --> 00:22:27,639
thought so I have a question which is

00:22:26,080 --> 00:22:28,779
probably maybe somebody here in the

00:22:27,639 --> 00:22:30,099
audience is going to anticipate it

00:22:28,779 --> 00:22:31,839
you're doing all this with source

00:22:30,099 --> 00:22:35,769
packages source package is a pretty

00:22:31,839 --> 00:22:38,109
nasty yeah why are you not using it what

00:22:35,769 --> 00:22:41,440
do you mean using yet in we're not

00:22:38,109 --> 00:22:43,809
fetching the source code from Debian

00:22:41,440 --> 00:22:45,639
with digit and then manipulating gate

00:22:43,809 --> 00:22:47,889
and then building it out of the gate

00:22:45,639 --> 00:22:52,329
tree yeah so I have a very similar

00:22:47,889 --> 00:22:53,709
question I use a workflow where it's

00:22:52,329 --> 00:22:55,359
going to be the same question so you can

00:22:53,709 --> 00:23:00,219
also at the same time of course draw a

00:22:55,359 --> 00:23:02,919
line so I fetch the upstream tags merge

00:23:00,219 --> 00:23:06,129
it into the Debian branch and generate

00:23:02,919 --> 00:23:09,429
the double out of get archive command

00:23:06,129 --> 00:23:11,229
which I have wired in my debian rules so

00:23:09,429 --> 00:23:13,929
I would very much as well that you could

00:23:11,229 --> 00:23:16,149
do that and send me a pull request that

00:23:13,929 --> 00:23:19,149
would do the merge from the stream tag

00:23:16,149 --> 00:23:20,619
do the changelog ration change and

00:23:19,149 --> 00:23:22,389
that's it that would be awesome if you

00:23:20,619 --> 00:23:24,159
could do that I think that the number

00:23:22,389 --> 00:23:26,529
one challenge for this is that everyone

00:23:24,159 --> 00:23:28,629
has different workflows so if we use

00:23:26,529 --> 00:23:31,179
digit then that would be the more

00:23:28,629 --> 00:23:34,359
standardized way to do it but like for

00:23:31,179 --> 00:23:35,739
example your workflow who says like

00:23:34,359 --> 00:23:38,679
maybe people will have different

00:23:35,739 --> 00:23:41,049
workflows the reason we that I work with

00:23:38,679 --> 00:23:42,879
upstream with first packages right now

00:23:41,049 --> 00:23:43,599
is that because they are the only

00:23:42,879 --> 00:23:45,909
standard right

00:23:43,599 --> 00:23:48,399
they work for every single package in

00:23:45,909 --> 00:23:51,129
the archive if I contribute that to you

00:23:48,399 --> 00:23:54,820
all right yeah yeah for sure well I'm

00:23:51,129 --> 00:23:57,039
going to lower a lot of work I have yeah

00:23:54,820 --> 00:23:59,079
of course you will eventually save work

00:23:57,039 --> 00:24:02,440
by contributing to automating your tasks

00:23:59,079 --> 00:24:05,139
so yeah maybe we can support a couple of

00:24:02,440 --> 00:24:07,899
repository layouts and have like some

00:24:05,139 --> 00:24:12,729
file like some ways to detect what

00:24:07,899 --> 00:24:14,440
layout you're using and but surely dead

00:24:12,729 --> 00:24:15,969
and could could benefit from more

00:24:14,440 --> 00:24:17,240
standardized

00:24:15,969 --> 00:24:19,950
get laid

00:24:17,240 --> 00:24:21,630
right I mean that was my question really

00:24:19,950 --> 00:24:23,340
is why are you not fetching with you yet

00:24:21,630 --> 00:24:25,650
because that is standardized yeah yeah

00:24:23,340 --> 00:24:29,130
and then you don't have to deal with

00:24:25,650 --> 00:24:32,460
like will and patch and stuff and I

00:24:29,130 --> 00:24:35,270
agree we also have to keep in mind that

00:24:32,460 --> 00:24:40,230
our patches don't bring a lot of value

00:24:35,270 --> 00:24:41,850
the I think that the the the more the

00:24:40,230 --> 00:24:43,230
most of the value that who produces the

00:24:41,850 --> 00:24:45,210
information right the fact that your

00:24:43,230 --> 00:24:47,040
package builds and the fact that you can

00:24:45,210 --> 00:24:49,860
already try it like there's a Deb you

00:24:47,040 --> 00:24:51,990
can install but the our pull request is

00:24:49,860 --> 00:24:54,780
simply going to be an upgrade an update

00:24:51,990 --> 00:24:57,000
of your upstream sources to the new

00:24:54,780 --> 00:24:59,550
upstream sources and they are like it's

00:24:57,000 --> 00:25:02,190
at least with my workflows that's just

00:24:59,550 --> 00:25:06,120
one command to generate like import or

00:25:02,190 --> 00:25:09,930
egg you scan that's it so I'm not sure

00:25:06,120 --> 00:25:12,200
how much energy we should put on making

00:25:09,930 --> 00:25:17,250
better pull requests like that because

00:25:12,200 --> 00:25:20,490
they don't really have value but we we

00:25:17,250 --> 00:25:22,740
could imagine that like for example some

00:25:20,490 --> 00:25:25,290
some teams could contribute better

00:25:22,740 --> 00:25:27,480
heuristics to update their packages so

00:25:25,290 --> 00:25:29,910
for example if I'm the go team I can I

00:25:27,480 --> 00:25:31,770
can write I can write some exceptional

00:25:29,910 --> 00:25:34,470
like go script that runs when I we try

00:25:31,770 --> 00:25:36,450
to upgrade that tries to add new

00:25:34,470 --> 00:25:38,700
dependencies to the package and smarter

00:25:36,450 --> 00:25:40,800
things like as soon as we start doing

00:25:38,700 --> 00:25:43,950
smarter things like that then our pull

00:25:40,800 --> 00:25:47,280
requests would will have value okay

00:25:43,950 --> 00:25:48,990
thank you pleasure thanks a lot for this

00:25:47,280 --> 00:25:51,000
work it seems very interesting and

00:25:48,990 --> 00:25:53,250
especially the part that would give full

00:25:51,000 --> 00:25:54,930
requesting salsa yeah I was also

00:25:53,250 --> 00:25:56,970
thinking the other way around could it

00:25:54,930 --> 00:25:58,710
be possible that when someone sends a

00:25:56,970 --> 00:26:00,660
pull request for my package in salsa

00:25:58,710 --> 00:26:04,620
that it could automatically then make a

00:26:00,660 --> 00:26:06,480
web poop call today out of packaging and

00:26:04,620 --> 00:26:08,850
then run the test and say if it comes

00:26:06,480 --> 00:26:14,460
back okay or not yeah and we could even

00:26:08,850 --> 00:26:16,800
so you can already do this well what I

00:26:14,460 --> 00:26:19,350
mean by that is that we have this REST

00:26:16,800 --> 00:26:21,600
API that you can use and you can you

00:26:19,350 --> 00:26:23,760
could write a script on github CI that

00:26:21,600 --> 00:26:27,600
does that that calls our service or

00:26:23,760 --> 00:26:29,770
whatever so for sure I I should probably

00:26:27,600 --> 00:26:33,010
write an example of this and

00:26:29,770 --> 00:26:35,020
and have it working for you guys so

00:26:33,010 --> 00:26:36,840
early you won't have to put that deeper

00:26:35,020 --> 00:26:39,010
to yourself but it would happen

00:26:36,840 --> 00:26:42,190
automatically without wrapping the thing

00:26:39,010 --> 00:26:42,730
into a debian package first sorry can

00:26:42,190 --> 00:26:45,940
you Pete

00:26:42,730 --> 00:26:48,160
repeat so basically so that you wouldn't

00:26:45,940 --> 00:26:50,320
need to be put that package manually but

00:26:48,160 --> 00:26:52,120
it yeah come automatically yeah yeah for

00:26:50,320 --> 00:26:55,570
sure yeah we should we should definitely

00:26:52,120 --> 00:26:57,070
do that and we would also host the so it

00:26:55,570 --> 00:26:59,380
for every package that we build we

00:26:57,070 --> 00:27:01,630
create like a one package repository so

00:26:59,380 --> 00:27:03,670
you can even have users install them

00:27:01,630 --> 00:27:07,840
like quite simply if they are a

00:27:03,670 --> 00:27:09,970
non-technical so it makes maybe this can

00:27:07,840 --> 00:27:11,260
also be used for like nautical technical

00:27:09,970 --> 00:27:13,150
users that try to contribute to the

00:27:11,260 --> 00:27:15,040
again like just pick up a pull request

00:27:13,150 --> 00:27:17,380
on says download the packet from there

00:27:15,040 --> 00:27:20,490
try it and give feedback to the

00:27:17,380 --> 00:27:25,590
maintainer yeah I can see that working

00:27:20,490 --> 00:27:25,590
sounds awesome Thanks

00:27:26,950 --> 00:27:31,799
more question comments I think we're

00:27:31,119 --> 00:27:34,929
done

00:27:31,799 --> 00:27:37,919
feel free to ask questions around if you

00:27:34,929 --> 00:27:37,919
see me in DEFCON

00:27:38,270 --> 00:27:45,890

YouTube URL: https://www.youtube.com/watch?v=Kf_Ea8RtzWg


