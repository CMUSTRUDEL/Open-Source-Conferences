Title: Reproducible Builds - A tale of three developers
Publication date: 2018-05-29
Playlist: MiniDebConf Curitiba 2018
Description: 
	by Holger Levsen

At: MiniDebConf Curitiba
https://minidebconf.curitiba.br/2018/

A status report on Reproducible builds, which enable everyone to verify that a
given binary is made from the source it is claimed to be made from, by
enabling anyone to create bit by bit identical binaries.

This talk will report on the state of reproducible builds in various
distributions, though the focus will be on Debian. Holger will explain how he
started working on this in the Debian context and how his focus shifted
slightly over the time. So he will start with explaining the status of
Reproducible Debian, but this is quickly followed by an overview of common
problems and solutions, followed by a quick explaination of the shared test
infrastructure for reproducible tests of any project. You will learn how the
community was broadened, what future plans we have to address what might be
needed beyond being able to reproducible build something, so this becomes
truly meaningful for users in practice.

We hope to have achieved this last bit for the Buster release. Stay tuned!

Room: Palestras - MiniauditÃ³rio
Scheduled start: 2018-04-13 19:00:00
Captions: 
	00:00:30,599 --> 00:00:39,090
I think I should start hello my name is

00:00:35,040 --> 00:00:43,829
Hoya I will talk about a story about

00:00:39,090 --> 00:00:47,460
reproducible builds and yeah I'd start

00:00:43,829 --> 00:00:50,909
with slowly so as I said my name is

00:00:47,460 --> 00:00:54,470
Helga and I don't speak Portuguese I'm

00:00:50,909 --> 00:00:57,780
sorry so you need to listen in English

00:00:54,470 --> 00:01:01,199
go by the Nick hi guys well it's just

00:00:57,780 --> 00:01:05,790
written differently so that's me I'm IRC

00:01:01,199 --> 00:01:09,750
and I'm involved or I'm interested in

00:01:05,790 --> 00:01:13,380
computer since a long time 25 years or

00:01:09,750 --> 00:01:17,250
something I'm a Debian user since 23

00:01:13,380 --> 00:01:20,460
years and contributing also a long time

00:01:17,250 --> 00:01:23,400
and I'm a freelancer which I've started

00:01:20,460 --> 00:01:26,100
by the way after I've been to fizzle in

00:01:23,400 --> 00:01:27,720
2004 so for metallic philosopher deeper

00:01:26,100 --> 00:01:32,280
which was one of the reasons I became a

00:01:27,720 --> 00:01:36,720
freelancer and some bits more about

00:01:32,280 --> 00:01:38,760
Debian and me so I started 2001

00:01:36,720 --> 00:01:42,510
contributing and become at that Debian

00:01:38,760 --> 00:01:44,400
developer in 2007 I was involved in

00:01:42,510 --> 00:01:46,290
organizing debconf so if you have

00:01:44,400 --> 00:01:49,979
questions about DEFCON time happy to

00:01:46,290 --> 00:01:52,470
talk about this as well I started the

00:01:49,979 --> 00:01:57,330
video team Stefano is now the better

00:01:52,470 --> 00:01:59,700
person to talk about video I do work on

00:01:57,330 --> 00:02:05,909
Debian educe filled every need OS Debian

00:01:59,700 --> 00:02:08,129
for schools and universities I one of

00:02:05,909 --> 00:02:09,659
the two people running PU parts Debian

00:02:08,129 --> 00:02:12,120
or which test package installation

00:02:09,659 --> 00:02:13,950
upgrade and removal and other checks

00:02:12,120 --> 00:02:17,760
that the system is still the same after

00:02:13,950 --> 00:02:20,430
he removed a package that's basically

00:02:17,760 --> 00:02:24,480
the Quality Assurance and this led me to

00:02:20,430 --> 00:02:26,970
set up Jenkins Debian net Jenkins is the

00:02:24,480 --> 00:02:31,019
basis of many thing of I would discuss

00:02:26,970 --> 00:02:33,870
on this talk but Jenkins has 1,300 drops

00:02:31,019 --> 00:02:36,000
I think and only 200 of them are related

00:02:33,870 --> 00:02:37,440
to reproduce who builds the others tests

00:02:36,000 --> 00:02:42,990
some other stuff in Devi

00:02:37,440 --> 00:02:45,180
and an hour cubes or as user which so I

00:02:42,990 --> 00:02:47,490
don't run Debian as my primary operating

00:02:45,180 --> 00:02:50,130
system anymore so if you want to talk

00:02:47,490 --> 00:02:52,950
about learn more what cubes I'm happy to

00:02:50,130 --> 00:02:55,620
talk about this as well and I use

00:02:52,950 --> 00:02:57,960
coreboot so I don't that's for the BIOS

00:02:55,620 --> 00:03:00,480
so the BIOS is normally a non free blob

00:02:57,960 --> 00:03:03,060
and I run the free software there and

00:03:00,480 --> 00:03:06,150
also happy to talk about this if you

00:03:03,060 --> 00:03:08,460
want to know this so ask me anything

00:03:06,150 --> 00:03:13,320
either now during the talk or the next

00:03:08,460 --> 00:03:15,300
days I'm happy and also in this talk

00:03:13,320 --> 00:03:20,730
feel free to interrupt if you have

00:03:15,300 --> 00:03:23,900
questions that's fine or later but this

00:03:20,730 --> 00:03:26,760
talk is about reproducible words and

00:03:23,900 --> 00:03:32,220
that was started in Debian five years

00:03:26,760 --> 00:03:36,830
ago by Luna and has bit more history and

00:03:32,220 --> 00:03:40,890
I've been involved in it since 2014 and

00:03:36,830 --> 00:03:42,930
these slides are taken from chrislam who

00:03:40,890 --> 00:03:44,130
was also involved since 2014 and

00:03:42,930 --> 00:03:47,489
rebooted superbirds we work a lot

00:03:44,130 --> 00:03:49,290
together and his lights just I was bored

00:03:47,489 --> 00:03:52,230
of giving the talk was my slide so I

00:03:49,290 --> 00:03:53,910
chose to switch to his wife's this is

00:03:52,230 --> 00:04:00,060
not the second time I give the talk with

00:03:53,910 --> 00:04:02,940
these slides Chris also wrote a Sudoku

00:04:00,060 --> 00:04:05,670
solver in PostScript so if you think

00:04:02,940 --> 00:04:09,239
PostScript or some files are not code

00:04:05,670 --> 00:04:11,489
that is just wrong PDFs can also execute

00:04:09,239 --> 00:04:17,370
whatever they have database connectors

00:04:11,489 --> 00:04:19,320
and so it's not always just text the

00:04:17,370 --> 00:04:23,970
same is true for office documents or

00:04:19,320 --> 00:04:29,669
other stuff so but to tell the story

00:04:23,970 --> 00:04:32,430
about the three developers so first we

00:04:29,669 --> 00:04:34,740
have Ellis Ellis is a software developer

00:04:32,430 --> 00:04:36,240
she writes code whatever may be a

00:04:34,740 --> 00:04:41,760
Bitcoin valid or some other

00:04:36,240 --> 00:04:45,300
cryptocurrencies thing and she releases

00:04:41,760 --> 00:04:49,169
the source code and some excess on

00:04:45,300 --> 00:04:50,210
Debian package or some RPM and it's cool

00:04:49,169 --> 00:04:51,979
it works

00:04:50,210 --> 00:04:55,190
test the sauce coat you can review the

00:04:51,979 --> 00:04:58,960
source and then suddenly sometimes

00:04:55,190 --> 00:05:01,580
somebody knocks on her door and says hey

00:04:58,960 --> 00:05:03,680
you don't have his dirty secret but

00:05:01,580 --> 00:05:06,310
maybe her sister has or she has the

00:05:03,680 --> 00:05:10,009
house or whatever she's blackmailed into

00:05:06,310 --> 00:05:12,169
modifying the binaries so they asked

00:05:10,009 --> 00:05:15,919
you've still released the source code as

00:05:12,169 --> 00:05:19,039
it is but so the sauce post stayed the

00:05:15,919 --> 00:05:21,259
same the source has put as always just

00:05:19,039 --> 00:05:24,349
the binary is not the same as from the

00:05:21,259 --> 00:05:25,849
source code anymore and people check the

00:05:24,349 --> 00:05:28,940
source code I'm staying the source code

00:05:25,849 --> 00:05:30,680
is fine and the downloaded binaries they

00:05:28,940 --> 00:05:33,470
are different then they don't come from

00:05:30,680 --> 00:05:41,979
the source code people review and that's

00:05:33,470 --> 00:05:44,150
bad the other scenario is bop-bop is a

00:05:41,979 --> 00:05:46,099
hacker or something has a strange

00:05:44,150 --> 00:05:48,949
keyboard and he maintains a lot of

00:05:46,099 --> 00:05:51,680
machines so he maintains these servers

00:05:48,949 --> 00:05:54,770
and stuff is being built there are lots

00:05:51,680 --> 00:05:56,840
of software's built and it's cool bot

00:05:54,770 --> 00:05:59,720
knows about not about security and

00:05:56,840 --> 00:06:02,120
thinks the system are cool but the

00:05:59,720 --> 00:06:05,539
systems are on the internet 24/7 and

00:06:02,120 --> 00:06:08,389
sometimes they get compromised and they

00:06:05,539 --> 00:06:10,099
build these binaries for people who

00:06:08,389 --> 00:06:16,159
download them and then they get they get

00:06:10,099 --> 00:06:19,639
compromised and that's bad and this is

00:06:16,159 --> 00:06:23,020
Carol Carol is a nice person and Carol

00:06:19,639 --> 00:06:28,340
is not the problem the problem is Eve

00:06:23,020 --> 00:06:33,050
and Eve what's while that is the IVA may

00:06:28,340 --> 00:06:35,509
detect the Carol Carol leaves a laptop

00:06:33,050 --> 00:06:39,409
alone either at home or in a hotel or

00:06:35,509 --> 00:06:43,639
whatever and then Eve comes flax and

00:06:39,409 --> 00:06:49,039
some USB thing and vectors her computer

00:06:43,639 --> 00:06:51,199
and then when Carol gives software to

00:06:49,039 --> 00:06:56,719
somebody else the software's compromised

00:06:51,199 --> 00:06:59,210
and the four freedoms from the from the

00:06:56,719 --> 00:07:01,190
Free Software Foundation define that one

00:06:59,210 --> 00:07:03,270
purpose is that you can redistribute

00:07:01,190 --> 00:07:04,740
copies to have your neighbor

00:07:03,270 --> 00:07:07,140
but if you give your neighbor throwy and

00:07:04,740 --> 00:07:10,010
software you don't help your neighbor so

00:07:07,140 --> 00:07:10,010
that is a problem

00:07:11,600 --> 00:07:17,040
so the general problem what I've

00:07:14,190 --> 00:07:19,880
described here is that we can review the

00:07:17,040 --> 00:07:24,330
source for malicious flaws or problems

00:07:19,880 --> 00:07:27,990
but you just install pre pre compile

00:07:24,330 --> 00:07:30,690
packages so whatever you review is not

00:07:27,990 --> 00:07:33,960
really what they get you if you get

00:07:30,690 --> 00:07:35,400
something else then you review and the

00:07:33,960 --> 00:07:41,550
question is can we trust this

00:07:35,400 --> 00:07:46,400
compilation progress process and well

00:07:41,550 --> 00:07:56,490
this has happened this has happened this

00:07:46,400 --> 00:07:59,490
has happened this this this this is this

00:07:56,490 --> 00:08:03,480
everybody gets hacked so this Pope

00:07:59,490 --> 00:08:07,380
thinks he's good but he isn't and it

00:08:03,480 --> 00:08:09,300
goes on and on and on there's also this

00:08:07,380 --> 00:08:13,290
even made thing also happened there's a

00:08:09,300 --> 00:08:17,670
tech to this to get the encryption the

00:08:13,290 --> 00:08:19,530
disk encryption compromised yeah there

00:08:17,670 --> 00:08:22,440
are many examples you've probably seen

00:08:19,530 --> 00:08:29,730
any of them yourself so what is the

00:08:22,440 --> 00:08:31,560
solution for that so we start with the

00:08:29,730 --> 00:08:35,940
same source and the same built

00:08:31,560 --> 00:08:39,030
environment and then we ensure that bits

00:08:35,940 --> 00:08:41,070
always have identical results and when I

00:08:39,030 --> 00:08:44,210
say identical I mean bit by bit

00:08:41,070 --> 00:08:49,350
identical and every bit is the same and

00:08:44,210 --> 00:08:52,200
then we compare the results and so if we

00:08:49,350 --> 00:08:54,210
do this in the there's David has some

00:08:52,200 --> 00:08:57,750
hash and Aaron has some hash that's the

00:08:54,210 --> 00:09:00,780
hash of the binary and there's frayed

00:08:57,750 --> 00:09:03,180
and free it has a different hash so what

00:09:00,780 --> 00:09:06,960
does that means either means that it has

00:09:03,180 --> 00:09:09,180
been compromised or David or Harold but

00:09:06,960 --> 00:09:11,250
one of them is wrong all the software is

00:09:09,180 --> 00:09:13,800
not reproducible but if the software

00:09:11,250 --> 00:09:15,390
normally based the same bit then if you

00:09:13,800 --> 00:09:16,180
get these resides then something is

00:09:15,390 --> 00:09:21,590
wrong

00:09:16,180 --> 00:09:23,390
and so if Ellis will be blackmail this

00:09:21,590 --> 00:09:24,980
will be discovered because you rebuild

00:09:23,390 --> 00:09:26,930
it get the different results everybody

00:09:24,980 --> 00:09:29,200
gets the same result except Ellis then

00:09:26,930 --> 00:09:31,130
you know that this has been compromised

00:09:29,200 --> 00:09:33,560
the same was Bob

00:09:31,130 --> 00:09:35,240
everybody hates gets the different

00:09:33,560 --> 00:09:38,720
checks and we know pop is compromised

00:09:35,240 --> 00:09:43,490
and also if the laptop will be 10 that

00:09:38,720 --> 00:09:45,530
we will notice that so and it also

00:09:43,490 --> 00:09:47,840
reduces the intense it's sensitive to

00:09:45,530 --> 00:09:50,000
take in the first place because if you

00:09:47,840 --> 00:09:51,650
know your attack can be detected you

00:09:50,000 --> 00:09:53,050
probably don't do that you would do

00:09:51,650 --> 00:09:56,090
something else

00:09:53,050 --> 00:09:58,010
maybe compromise the source code then

00:09:56,090 --> 00:10:03,500
but you would not attack the compilation

00:09:58,010 --> 00:10:05,750
process and so reproducible builds

00:10:03,500 --> 00:10:06,950
really allow verification that no flaws

00:10:05,750 --> 00:10:09,980
have been introduced during the

00:10:06,950 --> 00:10:12,380
compilation process not in the source

00:10:09,980 --> 00:10:13,640
just the reproducibility only make may

00:10:12,380 --> 00:10:18,950
only make sure that the compilation

00:10:13,640 --> 00:10:21,800
process is secure so it's not about

00:10:18,950 --> 00:10:25,850
reliable words that is that you can

00:10:21,800 --> 00:10:29,120
repeat it it's also not built with the

00:10:25,850 --> 00:10:30,710
same dependencies so that is you can

00:10:29,120 --> 00:10:34,100
reproduce the bed and just do it again

00:10:30,710 --> 00:10:37,160
and again it's about identical built

00:10:34,100 --> 00:10:39,410
results and it's not only the bed with

00:10:37,160 --> 00:10:41,270
the binaries but the software has but

00:10:39,410 --> 00:10:44,090
the whole package because we just want

00:10:41,270 --> 00:10:46,040
to in the case of the Debian package the

00:10:44,090 --> 00:10:49,370
Debian package contains of binaries and

00:10:46,040 --> 00:10:51,980
documentation and scripts and images and

00:10:49,370 --> 00:10:53,960
we don't want to say we exclude some of

00:10:51,980 --> 00:10:56,900
the Debian package we just want to look

00:10:53,960 --> 00:10:59,240
at everything because if you want me to

00:10:56,900 --> 00:11:00,890
inspect it doesn't scale anymore you

00:10:59,240 --> 00:11:03,350
need to look into it and ignore this and

00:11:00,890 --> 00:11:04,850
write complicated code to ignore some

00:11:03,350 --> 00:11:07,130
part and then the court might be buggy

00:11:04,850 --> 00:11:13,760
so the thing is the whole Debian package

00:11:07,130 --> 00:11:16,520
should be identical and I would as a

00:11:13,760 --> 00:11:19,040
first heard about it I was I thought

00:11:16,520 --> 00:11:21,350
that would be the case that software

00:11:19,040 --> 00:11:23,540
would be identical but there are many

00:11:21,350 --> 00:11:24,670
reasons why software is not identical

00:11:23,540 --> 00:11:27,860
when you rebuild it

00:11:24,670 --> 00:11:28,800
so there's hash ordering database

00:11:27,860 --> 00:11:31,140
ordering

00:11:28,800 --> 00:11:33,120
dictionary ordering which can be

00:11:31,140 --> 00:11:36,510
different in each build and then the

00:11:33,120 --> 00:11:38,850
beard recite is different or parallel

00:11:36,510 --> 00:11:43,110
bits of some software is parallel and

00:11:38,850 --> 00:11:44,580
the the some parts are executed in

00:11:43,110 --> 00:11:48,000
different order than the result can be

00:11:44,580 --> 00:11:50,040
different time stems the few left has

00:11:48,000 --> 00:11:51,779
time stem and the build and you rebuild

00:11:50,040 --> 00:11:53,459
at a different time at the time stem is

00:11:51,779 --> 00:11:56,910
in there then you have different results

00:11:53,459 --> 00:12:00,839
again the bit past can also link it to

00:11:56,910 --> 00:12:04,500
the binary and also the file system is

00:12:00,839 --> 00:12:06,959
not always deterministic if you do LS LS

00:12:04,500 --> 00:12:09,690
will sort for the output for you but if

00:12:06,959 --> 00:12:12,329
you do a find on the file system then x4

00:12:09,690 --> 00:12:14,760
will not have the same results some file

00:12:12,329 --> 00:12:18,209
system have all deterministic ordering

00:12:14,760 --> 00:12:20,040
but not all of them so that can be a

00:12:18,209 --> 00:12:23,760
problem and there's there's more reasons

00:12:20,040 --> 00:12:25,589
but these are the main course and of

00:12:23,760 --> 00:12:27,630
course user group the environment

00:12:25,589 --> 00:12:31,440
variable all this stuff can be in the

00:12:27,630 --> 00:12:37,350
mid so you username or my username or

00:12:31,440 --> 00:12:40,620
whatever can be in there and while we

00:12:37,350 --> 00:12:42,660
did this and looked at lots of software

00:12:40,620 --> 00:12:45,680
and beta at several times we found that

00:12:42,660 --> 00:12:49,260
reproducibility have other advantages

00:12:45,680 --> 00:12:50,670
because if you have not changes normally

00:12:49,260 --> 00:12:52,680
between two bills and then you do a

00:12:50,670 --> 00:12:54,690
change for example there's an security

00:12:52,680 --> 00:12:57,390
update then you have a very minimal

00:12:54,690 --> 00:13:00,450
edith and you can really look it's the

00:12:57,390 --> 00:13:03,630
diff what it's supposed to be that is

00:13:00,450 --> 00:13:05,610
pretty useful the other is also if you

00:13:03,630 --> 00:13:08,220
can have the same reside you have better

00:13:05,610 --> 00:13:10,589
caches then you save time and money and

00:13:08,220 --> 00:13:13,740
also co2 so you save the environment

00:13:10,589 --> 00:13:15,690
versus reproduce all of this and this is

00:13:13,740 --> 00:13:18,089
no joke Google does reproduce web is

00:13:15,690 --> 00:13:19,860
because they save computation time so

00:13:18,089 --> 00:13:22,550
they save developer time so they save

00:13:19,860 --> 00:13:22,550
money with it

00:13:22,870 --> 00:13:28,990
and you can also detect corrupt built

00:13:25,900 --> 00:13:31,000
environments so somebody doesn't upload

00:13:28,990 --> 00:13:32,890
for stable and pasted and unstable you

00:13:31,000 --> 00:13:36,910
will see it or whatever your broken

00:13:32,890 --> 00:13:39,160
dependencies installed and you can also

00:13:36,910 --> 00:13:41,260
use it to remove page dependencies just

00:13:39,160 --> 00:13:43,720
to see it's the spirit dependency used

00:13:41,260 --> 00:13:45,580
at all so if you get the same result

00:13:43,720 --> 00:13:52,030
without a needed dependency you can just

00:13:45,580 --> 00:13:55,510
remove it and we found lots of bugs

00:13:52,030 --> 00:14:00,160
which I will have few examples of that

00:13:55,510 --> 00:14:06,490
so one buck we found was a predictable

00:14:00,160 --> 00:14:10,570
predictable of my D secret so this was

00:14:06,490 --> 00:14:14,380
in the code which then resides it in

00:14:10,570 --> 00:14:17,290
this secret and every installation has

00:14:14,380 --> 00:14:22,750
the same secret and so it's not really a

00:14:17,290 --> 00:14:25,030
secret and we found this by looking that

00:14:22,750 --> 00:14:28,960
this happen every every bid has a

00:14:25,030 --> 00:14:31,170
different secret ID but that's not a

00:14:28,960 --> 00:14:31,170
secret

00:14:31,380 --> 00:14:38,020
also sometimes men pages if you build

00:14:35,920 --> 00:14:40,480
them with different locales or different

00:14:38,020 --> 00:14:42,580
it's mostly locates for main pages then

00:14:40,480 --> 00:14:44,560
you get different main pages and that is

00:14:42,580 --> 00:14:46,300
a back it's just not a reproducibility

00:14:44,560 --> 00:14:48,190
issue but the main page should look the

00:14:46,300 --> 00:14:55,330
same there should not be random

00:14:48,190 --> 00:14:59,080
characters there this was also a lovely

00:14:55,330 --> 00:15:03,340
bug so you have two functions was a test

00:14:59,080 --> 00:15:05,110
case and it generates two strings which

00:15:03,340 --> 00:15:07,060
have 16 characters long and they're

00:15:05,110 --> 00:15:10,180
strings should each string should

00:15:07,060 --> 00:15:13,060
contain a B and C and then there's an

00:15:10,180 --> 00:15:15,760
assert which should make sure that the

00:15:13,060 --> 00:15:18,400
resulting string includes a b and c but

00:15:15,760 --> 00:15:22,470
of course these strings can also just

00:15:18,400 --> 00:15:25,390
include a and B or C and B and not a and

00:15:22,470 --> 00:15:27,310
so then you get an assertion error

00:15:25,390 --> 00:15:28,950
because the string does not contain one

00:15:27,310 --> 00:15:31,600
of the letters should contain and

00:15:28,950 --> 00:15:33,630
somebody did the math and so if a it's

00:15:31,600 --> 00:15:36,070
zero point four six percent of the cases

00:15:33,630 --> 00:15:37,630
it's really rare but these things

00:15:36,070 --> 00:15:41,170
happen and then you stand there and why

00:15:37,630 --> 00:15:45,270
does it fail and of course this is just

00:15:41,170 --> 00:15:45,270
a byproduct of our work but it's useful

00:15:45,450 --> 00:15:56,020
so what did we do to find this we

00:15:49,870 --> 00:15:58,500
started in Debian and in 2014 I set up

00:15:56,020 --> 00:16:02,500
this what it has become a torture test

00:15:58,500 --> 00:16:05,020
where we vary a lot of things so we we

00:16:02,500 --> 00:16:06,880
do two builds and then we compare the

00:16:05,020 --> 00:16:09,640
result whether it's the same and these

00:16:06,880 --> 00:16:13,030
two builds vary by the time and the date

00:16:09,640 --> 00:16:14,680
so we have one machine or one test is

00:16:13,030 --> 00:16:18,010
running in the future it's running one

00:16:14,680 --> 00:16:20,020
year and the months ahead and the time

00:16:18,010 --> 00:16:22,000
is also different we change the host

00:16:20,020 --> 00:16:25,000
name and the domain name of the machine

00:16:22,000 --> 00:16:28,120
we use different fire systems or we also

00:16:25,000 --> 00:16:30,100
wrote this order FS with all FS is a

00:16:28,120 --> 00:16:34,600
fuse file system which will give either

00:16:30,100 --> 00:16:37,510
a random order or you can also say that

00:16:34,600 --> 00:16:39,400
it should one forward or reverse sorting

00:16:37,510 --> 00:16:42,640
that's we would see if the court does

00:16:39,400 --> 00:16:44,920
not do the ordering himself we have the

00:16:42,640 --> 00:16:48,430
base are in the different time zones and

00:16:44,920 --> 00:16:50,650
different locales so we built we only

00:16:48,430 --> 00:16:52,450
built with letting locates at the moment

00:16:50,650 --> 00:16:54,610
we don't do Arabic or this stuff that

00:16:52,450 --> 00:16:57,280
would probably find more bugs but we

00:16:54,610 --> 00:16:58,960
find enough Bucks was this already we

00:16:57,280 --> 00:17:01,420
built was different user ID and

00:16:58,960 --> 00:17:05,439
different group ID we varied the kernel

00:17:01,420 --> 00:17:10,630
and the CPU type and then then we look

00:17:05,439 --> 00:17:14,350
at the results and when we did this in

00:17:10,630 --> 00:17:16,720
2013 for the first time 24% of packages

00:17:14,350 --> 00:17:20,829
and Debbie and very producible while now

00:17:16,720 --> 00:17:25,750
we had 93 percent which is quite good

00:17:20,829 --> 00:17:28,209
but 93 percent of 25,000 packages still

00:17:25,750 --> 00:17:30,280
means there's 1,800 and reproducible

00:17:28,209 --> 00:17:32,740
packages so it's still a lot of things

00:17:30,280 --> 00:17:35,050
to do and as we looked at these packages

00:17:32,740 --> 00:17:38,980
for four years these are also the harder

00:17:35,050 --> 00:17:41,130
cases so we'll take still take some more

00:17:38,980 --> 00:17:42,710
time and

00:17:41,130 --> 00:17:45,080
[Music]

00:17:42,710 --> 00:17:47,930
this is on this is the graph for

00:17:45,080 --> 00:17:49,790
unstable and so the green packages are

00:17:47,930 --> 00:17:52,550
the reproducible once the orange ones

00:17:49,790 --> 00:17:55,880
are the unreproducible ones the red fail

00:17:52,550 --> 00:17:59,180
to build and the black ones are some

00:17:55,880 --> 00:18:01,090
others and you can see or you cannot see

00:17:59,180 --> 00:18:05,140
probably but the graph started in

00:18:01,090 --> 00:18:10,760
October in 2014 and it's going to March

00:18:05,140 --> 00:18:14,600
2018 and this graph actually doesn't

00:18:10,760 --> 00:18:18,130
have eight 93% but only 88 percent I

00:18:14,600 --> 00:18:20,960
think because this is unstable and

00:18:18,130 --> 00:18:24,080
there's one problem we haven't fixed yet

00:18:20,960 --> 00:18:26,900
which is the bait pass the bill pass is

00:18:24,080 --> 00:18:31,220
leaked into the binary of objects of

00:18:26,900 --> 00:18:34,820
many of compilation objects but also

00:18:31,220 --> 00:18:38,360
main pages so when we test Debian

00:18:34,820 --> 00:18:41,030
testing so Buster where we have 93% we

00:18:38,360 --> 00:18:42,740
don't vary the big pass because there's

00:18:41,030 --> 00:18:45,590
too many problems with the bill pass we

00:18:42,740 --> 00:18:47,540
have not yet fixed what an unstable when

00:18:45,590 --> 00:18:48,020
we test unstable we do vary the build

00:18:47,540 --> 00:18:50,450
past

00:18:48,020 --> 00:18:52,790
so there's 5 percent less reproducible

00:18:50,450 --> 00:18:55,280
packages so there's a problem I don't

00:18:52,790 --> 00:18:57,890
know the number 2800 or something and

00:18:55,280 --> 00:19:00,920
the fix is really easy just built in a

00:18:57,890 --> 00:19:04,250
deterministic past for example /page

00:19:00,920 --> 00:19:08,630
/parent less source code is version and

00:19:04,250 --> 00:19:14,600
then you get this 93% and it's important

00:19:08,630 --> 00:19:16,130
because this is similar with the debian

00:19:14,600 --> 00:19:18,500
for Debian tends to be very the

00:19:16,130 --> 00:19:21,920
timestamp that the the locale and the

00:19:18,500 --> 00:19:24,170
time zone because we want developers to

00:19:21,920 --> 00:19:25,970
be able to build in their environment if

00:19:24,170 --> 00:19:28,520
you have your system set to Portuguese

00:19:25,970 --> 00:19:30,890
we want the results to be the same as if

00:19:28,520 --> 00:19:33,320
somebody builds in English but it would

00:19:30,890 --> 00:19:36,290
be easy to just always say always use

00:19:33,320 --> 00:19:38,690
UTC as a time zone always use locale C

00:19:36,290 --> 00:19:41,480
and always use this build pass but we

00:19:38,690 --> 00:19:45,140
really want to fix it properly because

00:19:41,480 --> 00:19:47,090
it's in the end it's it is computers

00:19:45,140 --> 00:19:49,220
called computer science and if you have

00:19:47,090 --> 00:19:51,620
some deterministic input and the

00:19:49,220 --> 00:19:53,030
deterministic compilation process the

00:19:51,620 --> 00:19:54,659
results would be digit immature

00:19:53,030 --> 00:19:57,269
deterministic as well

00:19:54,659 --> 00:20:04,109
and not just random so that's not

00:19:57,269 --> 00:20:07,619
science this is the URL you can easily

00:20:04,109 --> 00:20:10,919
go it will just say yes or no I will

00:20:07,619 --> 00:20:14,629
also give the percentage but we'll have

00:20:10,919 --> 00:20:14,629
this domain for some more years I guess

00:20:16,159 --> 00:20:23,489
so and beyond Devon we started testing

00:20:19,830 --> 00:20:26,549
this for Debian and then we thought okay

00:20:23,489 --> 00:20:29,609
we can also build other stuff so we now

00:20:26,549 --> 00:20:32,340
build coreboot or this doesn't there are

00:20:29,609 --> 00:20:34,950
more projects involved but on this

00:20:32,340 --> 00:20:39,899
Jenkins debÃ­a net there we built Co

00:20:34,950 --> 00:20:43,259
aboot open wrt net BSD FreeBSD Arch

00:20:39,899 --> 00:20:46,080
Linux and f-droid are all built on

00:20:43,259 --> 00:20:47,489
Debian resources and that's really nice

00:20:46,080 --> 00:20:50,399
because we have now the repeaters of

00:20:47,489 --> 00:20:52,049
reproducible builds team is now a cross

00:20:50,399 --> 00:20:54,899
digital project where people for many

00:20:52,049 --> 00:20:56,489
distros collaborate together and share

00:20:54,899 --> 00:20:59,159
the fixes because we all use the same

00:20:56,489 --> 00:21:02,669
sources we have some modifications but

00:20:59,159 --> 00:21:07,769
the base sauce is the same and then as

00:21:02,669 --> 00:21:10,679
other projects which joined and chaos is

00:21:07,769 --> 00:21:12,899
an example where goes beyond

00:21:10,679 --> 00:21:15,149
reproducible builds but to reproducible

00:21:12,899 --> 00:21:18,269
installation which is a different

00:21:15,149 --> 00:21:21,330
problem problem in the case because then

00:21:18,269 --> 00:21:23,729
you install packages and then the post

00:21:21,330 --> 00:21:25,919
ends is executed and post ends again

00:21:23,729 --> 00:21:28,229
does unreproducible stuff it creates a

00:21:25,919 --> 00:21:30,690
directory which has a timestamp it

00:21:28,229 --> 00:21:33,059
creates user which where the user ID

00:21:30,690 --> 00:21:35,789
might be different in which due to the

00:21:33,059 --> 00:21:38,489
order up installs the packages so if you

00:21:35,789 --> 00:21:40,289
do up to install fool and then 20

00:21:38,489 --> 00:21:42,299
packages are installed the order in

00:21:40,289 --> 00:21:45,059
which these 20 packages are installed is

00:21:42,299 --> 00:21:48,239
not deterministic and tails has fixed

00:21:45,059 --> 00:21:51,919
that for tails and we could work on

00:21:48,239 --> 00:21:51,919
getting these fixes back into Debian

00:21:54,790 --> 00:22:02,480
and there's so let's these are two

00:22:00,020 --> 00:22:04,130
problems we have in this reproducible

00:22:02,480 --> 00:22:06,160
base area which one is ripples were

00:22:04,130 --> 00:22:09,620
builds and the other is reproducible

00:22:06,160 --> 00:22:12,410
installation and then this reproducible

00:22:09,620 --> 00:22:15,890
base problem is also again split into

00:22:12,410 --> 00:22:19,100
two problems because what we've done so

00:22:15,890 --> 00:22:22,419
far is just showing in theory that

00:22:19,100 --> 00:22:25,850
Debian can be 93 percent reproducible

00:22:22,419 --> 00:22:28,640
but to actually prove that and do this

00:22:25,850 --> 00:22:32,570
we also need infrastructure that people

00:22:28,640 --> 00:22:34,490
can test and prove this and all this

00:22:32,570 --> 00:22:39,280
infrastructure and the other tools are

00:22:34,490 --> 00:22:44,540
mostly still needing work so for Debian

00:22:39,280 --> 00:22:53,929
of in general what we came or we came up

00:22:44,540 --> 00:22:55,730
with so to reproduce you need to have

00:22:53,929 --> 00:22:57,650
the same environment which was

00:22:55,730 --> 00:23:00,320
originally used to build the package and

00:22:57,650 --> 00:23:02,660
so we came up with doc paid info files

00:23:00,320 --> 00:23:04,940
which record the environment and the

00:23:02,660 --> 00:23:07,190
debian cases the list of packages which

00:23:04,940 --> 00:23:09,290
were installed so if you want to

00:23:07,190 --> 00:23:11,780
reproduce some surface something is

00:23:09,290 --> 00:23:13,669
uploaded to unstable today and say you

00:23:11,780 --> 00:23:16,850
want to reproduce it in a month then

00:23:13,669 --> 00:23:18,100
unstable will be different so or pasta

00:23:16,850 --> 00:23:21,020
will be different so you need to

00:23:18,100 --> 00:23:23,360
recreate the exact same environment and

00:23:21,020 --> 00:23:26,840
for that we have paid info files and

00:23:23,360 --> 00:23:28,820
then it should be possible but this is

00:23:26,840 --> 00:23:30,650
for me this practical problem of

00:23:28,820 --> 00:23:33,080
reproducible bits which we have not

00:23:30,650 --> 00:23:36,580
really taken much so far so far we are

00:23:33,080 --> 00:23:36,580
only still working on the theory

00:23:40,929 --> 00:23:49,549
and explained this already we also to

00:23:46,850 --> 00:23:51,890
work together we had reproducible builds

00:23:49,549 --> 00:23:55,549
summits which are like mini cadet

00:23:51,890 --> 00:23:57,770
conflicts conferences where we for three

00:23:55,549 --> 00:24:00,230
days sit together and we don't heck

00:23:57,770 --> 00:24:03,679
instead we sit in a circle or in several

00:24:00,230 --> 00:24:07,960
circles and just discuss brainstorm or

00:24:03,679 --> 00:24:10,820
do these things and we take notes and

00:24:07,960 --> 00:24:13,400
have published them on our website and

00:24:10,820 --> 00:24:16,730
there were around 40 people at each

00:24:13,400 --> 00:24:19,070
summit with from 20 projects so all

00:24:16,730 --> 00:24:24,740
these projects have been at the summit

00:24:19,070 --> 00:24:27,830
and more you can go to reproducible bits

00:24:24,740 --> 00:24:35,059
slash log slash ooh 2 3 which projects

00:24:27,830 --> 00:24:36,890
are involved so when you look if you

00:24:35,059 --> 00:24:38,720
want to look at differences between two

00:24:36,890 --> 00:24:42,020
packages the one the tool everybody

00:24:38,720 --> 00:24:43,640
knows is diff and if will show you the

00:24:42,020 --> 00:24:46,820
differences between two text files

00:24:43,640 --> 00:24:48,890
nicely and you know that but if you do

00:24:46,820 --> 00:24:54,470
this on to Debian packages you get this

00:24:48,890 --> 00:24:57,260
which is not helpful and so we should

00:24:54,470 --> 00:25:00,410
pay the better def to diff tool and Luna

00:24:57,260 --> 00:25:02,210
started this and this has become the

00:25:00,410 --> 00:25:04,460
first scope in the beginning it was

00:25:02,210 --> 00:25:07,429
called depth bindus the Debian binary

00:25:04,460 --> 00:25:10,970
diff but we renamed it to differ scope

00:25:07,429 --> 00:25:13,190
because differ scope can now deal with

00:25:10,970 --> 00:25:17,660
many more packages I'll show them some

00:25:13,190 --> 00:25:21,500
so the way the first group works it goes

00:25:17,660 --> 00:25:23,960
weak you give it to objects and then it

00:25:21,500 --> 00:25:25,790
was recursively through these objects so

00:25:23,960 --> 00:25:28,580
give it to Debian packages and Debian

00:25:25,790 --> 00:25:31,010
packages are our archives then in the

00:25:28,580 --> 00:25:32,870
archive there's two tower archives and

00:25:31,010 --> 00:25:36,950
in the tower archive if there is

00:25:32,870 --> 00:25:38,900
whatever PDF and the PDF includes a PNG

00:25:36,950 --> 00:25:40,910
and in the PNG the timestamp is

00:25:38,900 --> 00:25:46,820
different and different spoke will show

00:25:40,910 --> 00:25:50,630
that nicely and it will show it either

00:25:46,820 --> 00:25:53,020
in plain text or an HTML version or also

00:25:50,630 --> 00:25:53,020
Jason

00:25:53,090 --> 00:25:59,000
and this is the list of formats

00:25:56,750 --> 00:26:02,600
different spoke understand snow so

00:25:59,000 --> 00:26:05,690
that's every at the CP of cpio archives

00:26:02,600 --> 00:26:07,250
rpms you can give it to directories you

00:26:05,690 --> 00:26:10,940
can give it to ice source you can give

00:26:07,250 --> 00:26:13,160
it to fire systems to anything to open

00:26:10,940 --> 00:26:14,660
office documents and if there's a file

00:26:13,160 --> 00:26:18,380
format which differ scope doesn't

00:26:14,660 --> 00:26:20,510
support please file a back and give us

00:26:18,380 --> 00:26:24,050
the test cases and we would support it

00:26:20,510 --> 00:26:29,710
it also does Android archives and TCP

00:26:24,050 --> 00:26:29,710
dumps and many many things and there's

00:26:30,250 --> 00:26:35,420
this difference cobalt is the webpage

00:26:32,690 --> 00:26:38,000
and there's also try it of different

00:26:35,420 --> 00:26:39,500
scope or which is the online service

00:26:38,000 --> 00:26:41,390
where you can upload two files you don't

00:26:39,500 --> 00:26:43,190
need to install it because if you

00:26:41,390 --> 00:26:45,440
installed different scope on a clean

00:26:43,190 --> 00:26:49,310
system it will install about 1.5

00:26:45,440 --> 00:26:53,240
gigabytes of packages to be able to deal

00:26:49,310 --> 00:26:55,910
with all these formats and this is how

00:26:53,240 --> 00:26:58,730
different scope text mode looks so you

00:26:55,910 --> 00:27:00,860
see there this control and data tar

00:26:58,730 --> 00:27:03,230
archives are different and then it shows

00:27:00,860 --> 00:27:05,960
how they are different and you see here

00:27:03,230 --> 00:27:12,050
these are time stand difference and have

00:27:05,960 --> 00:27:15,170
some more examples later yeah and try to

00:27:12,050 --> 00:27:16,970
force corpus relief go there give it a

00:27:15,170 --> 00:27:19,970
look upload two things it's really nice

00:27:16,970 --> 00:27:22,940
and different scope is also it doesn't

00:27:19,970 --> 00:27:24,770
only work on on Linux it's been ported

00:27:22,940 --> 00:27:28,010
so it's been pop available in Arch Linux

00:27:24,770 --> 00:27:30,560
and fedora it's been ported to BSD it's

00:27:28,010 --> 00:27:33,490
available for net and FreeBSD it runs on

00:27:30,560 --> 00:27:35,870
Mac OS it does not yet run on Windows

00:27:33,490 --> 00:27:38,470
but it's pison source should be possible

00:27:35,870 --> 00:27:38,470
also

00:27:40,029 --> 00:27:47,960
and it can also show differences in

00:27:45,080 --> 00:27:50,419
security of dwarfs because if the if the

00:27:47,960 --> 00:27:52,610
packages are reproducible before then

00:27:50,419 --> 00:27:54,890
the the security upload will only have

00:27:52,610 --> 00:27:59,149
the changes you want and you can see it

00:27:54,890 --> 00:28:01,429
was the first go and differ scope is not

00:27:59,149 --> 00:28:04,190
the definition or the tool to find out

00:28:01,429 --> 00:28:06,049
if something is reproducible the tool to

00:28:04,190 --> 00:28:09,169
find out if something is reproducible is

00:28:06,049 --> 00:28:11,299
just differ CMP or chart whatever some

00:28:09,169 --> 00:28:13,700
so it should have the same hash

00:28:11,299 --> 00:28:15,919
different scope is the tool to

00:28:13,700 --> 00:28:21,760
investigate why something is not

00:28:15,919 --> 00:28:24,980
reproducible and you can also use it to

00:28:21,760 --> 00:28:26,870
inspect files you don't know for example

00:28:24,980 --> 00:28:28,520
router images or whatever binary

00:28:26,870 --> 00:28:36,309
software you get you can look into it

00:28:28,520 --> 00:28:40,039
with differ school so what's left to do

00:28:36,309 --> 00:28:41,990
the source code tester programming

00:28:40,039 --> 00:28:44,149
errors in the source code that can be

00:28:41,990 --> 00:28:47,659
back to us or obfuscated code in the

00:28:44,149 --> 00:28:50,500
source code weak algorithm md5 is still

00:28:47,659 --> 00:28:54,230
insecure even if it's reproducible and

00:28:50,500 --> 00:28:57,110
coat was testing this test so the source

00:28:54,230 --> 00:28:59,750
code we don't care with we don't look at

00:28:57,110 --> 00:29:01,279
the source code so the sauce would still

00:28:59,750 --> 00:29:03,380
somebody needs to look at the source

00:29:01,279 --> 00:29:05,110
code we produce so this is just really

00:29:03,380 --> 00:29:07,340
to see whether the compilation process

00:29:05,110 --> 00:29:12,140
made something with the source code you

00:29:07,340 --> 00:29:15,980
don't want to do and then the other

00:29:12,140 --> 00:29:19,159
thing what do we want to do with this so

00:29:15,980 --> 00:29:21,110
this is a up then it says there the

00:29:19,159 --> 00:29:25,610
following packages are not reproducible

00:29:21,110 --> 00:29:27,399
to install them anyway and we don't

00:29:25,610 --> 00:29:30,169
think this is a good user interface

00:29:27,399 --> 00:29:33,770
because what should you do you want this

00:29:30,169 --> 00:29:35,299
software so you will not say no so what

00:29:33,770 --> 00:29:37,850
we think to have really good user

00:29:35,299 --> 00:29:39,620
interface is just to have all packages

00:29:37,850 --> 00:29:41,779
reproducible and just prevent

00:29:39,620 --> 00:29:46,330
installation of non-reducible software

00:29:41,779 --> 00:29:46,330
but this is still some time to roll

00:29:48,050 --> 00:29:53,610
what else needs to be done we still need

00:29:51,060 --> 00:29:55,890
to fix tool chain issues GCC is the one

00:29:53,610 --> 00:29:58,440
example because it has it's the biggest

00:29:55,890 --> 00:30:01,080
problem was the bill passed but the bill

00:29:58,440 --> 00:30:04,080
passes also leaked leaked by lots of

00:30:01,080 --> 00:30:06,750
documentation systems which put them

00:30:04,080 --> 00:30:10,710
somewhere in the generated PDF or

00:30:06,750 --> 00:30:14,130
whatever thing Spinks was just disgusted

00:30:10,710 --> 00:30:17,160
as many to achieve issues and twitchin

00:30:14,130 --> 00:30:19,170
is just not where Debian has 40

00:30:17,160 --> 00:30:22,290
compilers or something there's cool boil

00:30:19,170 --> 00:30:25,350
air Lang or camel whatever just

00:30:22,290 --> 00:30:26,850
JavaScript and these is this one part of

00:30:25,350 --> 00:30:29,010
the tool chain and the other to chain

00:30:26,850 --> 00:30:31,290
our documentation system and there's

00:30:29,010 --> 00:30:34,500
many documentation system in Debian and

00:30:31,290 --> 00:30:38,520
they most of them leak something into

00:30:34,500 --> 00:30:40,530
the objects we want to improve our

00:30:38,520 --> 00:30:42,060
towards further which is different scope

00:30:40,530 --> 00:30:46,500
on the one hand but also dissolve

00:30:42,060 --> 00:30:49,620
disorder FS and we want mandating that

00:30:46,500 --> 00:30:52,890
Debian Pegasus must be reproducible last

00:30:49,620 --> 00:30:54,960
year in August during that con 17 Debian

00:30:52,890 --> 00:30:57,750
policy was changed so it now says

00:30:54,960 --> 00:30:59,580
Pegasus should be reproducible but it's

00:30:57,750 --> 00:31:02,040
just soup so if it's not reproducible

00:30:59,580 --> 00:31:04,290
it's a normal buck and we want it to be

00:31:02,040 --> 00:31:06,240
a serious bug packages must be

00:31:04,290 --> 00:31:09,780
reproducible so that unreproducible

00:31:06,240 --> 00:31:12,840
packages don't go on to testing and then

00:31:09,780 --> 00:31:14,490
we get closer to hundred percent but we

00:31:12,840 --> 00:31:18,300
will still not be there with this must

00:31:14,490 --> 00:31:21,030
because if we are faced with the

00:31:18,300 --> 00:31:22,830
decision whether we kick out we cannot

00:31:21,030 --> 00:31:25,620
release without the linux kernel we

00:31:22,830 --> 00:31:27,510
cannot release without many many towards

00:31:25,620 --> 00:31:29,220
they are unreproducible the release team

00:31:27,510 --> 00:31:32,310
will just ignore this buck and release

00:31:29,220 --> 00:31:35,400
anyway so policy must does not change it

00:31:32,310 --> 00:31:37,050
at all or changes a bit but together we

00:31:35,400 --> 00:31:42,090
really need to fix the software and not

00:31:37,050 --> 00:31:44,400
just have policy and canvas reproduce

00:31:42,090 --> 00:31:47,040
our bills we can also defeat this

00:31:44,400 --> 00:31:49,080
trusting trust problem if you don't know

00:31:47,040 --> 00:31:52,980
that trusting trust as a problem

00:31:49,080 --> 00:31:55,970
identified I think in the 70s by the CD

00:31:52,980 --> 00:31:58,070
LC creators

00:31:55,970 --> 00:31:59,870
so you have a C compiler and this is

00:31:58,070 --> 00:32:03,500
usually already a binary block and this

00:31:59,870 --> 00:32:07,900
place the next binary block and that's

00:32:03,500 --> 00:32:10,940
bootstrapping is the problem and our

00:32:07,900 --> 00:32:14,420
idea is that you have two tiny C

00:32:10,940 --> 00:32:16,820
compilers which are able to build each

00:32:14,420 --> 00:32:19,880
other and then you build each other with

00:32:16,820 --> 00:32:21,470
the other one again and then the if both

00:32:19,880 --> 00:32:25,010
three sites then are the same then you

00:32:21,470 --> 00:32:27,920
know that this compiler is fine but this

00:32:25,010 --> 00:32:29,420
is also just theory at the moment we are

00:32:27,920 --> 00:32:38,270
working towards it but have not reached

00:32:29,420 --> 00:32:41,240
it yet so please get involved visit our

00:32:38,270 --> 00:32:44,870
web page that's also documentation with

00:32:41,240 --> 00:32:47,900
common problems like whatever gzip by

00:32:44,870 --> 00:32:50,480
default does not sort the stuff so you

00:32:47,900 --> 00:32:52,340
need to use G sub - N and there's some

00:32:50,480 --> 00:32:54,260
test documentation what problems there

00:32:52,340 --> 00:32:56,720
are we have also a package which is

00:32:54,260 --> 00:32:58,340
called the unreproducible package where

00:32:56,720 --> 00:33:02,710
there are several problems I explained

00:32:58,340 --> 00:33:06,350
and they're fixes we we are on Twitter

00:33:02,710 --> 00:33:08,360
and we also do a weekly block since

00:33:06,350 --> 00:33:11,090
three years every week we block so we

00:33:08,360 --> 00:33:12,950
are now at issue 155 five things the

00:33:11,090 --> 00:33:18,710
next year next week it's our three year

00:33:12,950 --> 00:33:21,500
anniversary and we are on IRC this is

00:33:18,710 --> 00:33:23,510
reproducible base is our general channel

00:33:21,500 --> 00:33:25,850
there's also Debian reproducible which

00:33:23,510 --> 00:33:28,700
is just for Debian there's Arch Linux

00:33:25,850 --> 00:33:29,870
reproduce reproducible Arch Linux or

00:33:28,700 --> 00:33:33,260
actually long who actually lives

00:33:29,870 --> 00:33:34,970
reproducible and we generally don't care

00:33:33,260 --> 00:33:36,860
we are happy to talk about non Debian

00:33:34,970 --> 00:33:38,690
stuff on the Debian channel we are

00:33:36,860 --> 00:33:45,260
generally helpful and want to fix the

00:33:38,690 --> 00:33:47,510
problems yeah invest also one eight or

00:33:45,260 --> 00:33:50,330
eight hundred patches we have submitted

00:33:47,510 --> 00:33:52,280
which were not merged we've submitted

00:33:50,330 --> 00:33:55,400
two thousand patches which were merged

00:33:52,280 --> 00:33:58,160
so one third not which is two thirds

00:33:55,400 --> 00:34:00,830
where emergence is good good ratio but

00:33:58,160 --> 00:34:02,990
still you can do lots of nm use if

00:34:00,830 --> 00:34:05,060
you're a Debian developer please help us

00:34:02,990 --> 00:34:08,720
and I'm user stuff cause the bugs are

00:34:05,060 --> 00:34:20,730
laying there since half a year or longer

00:34:08,720 --> 00:34:23,129
that was this from me so hi

00:34:20,730 --> 00:34:25,500
I don't know if I understood everything

00:34:23,129 --> 00:34:28,619
really well but my question is is that

00:34:25,500 --> 00:34:32,369
the Linux kernel reproducible if not why

00:34:28,619 --> 00:34:35,069
not the Linux kernel that the Debian

00:34:32,369 --> 00:34:37,859
Linux kernel package is not reproducible

00:34:35,069 --> 00:34:40,109
I think because there are some problems

00:34:37,859 --> 00:34:43,190
in the documentation the kernel itself

00:34:40,109 --> 00:34:43,190
is reproducible

00:34:43,639 --> 00:34:47,510
and there's one

00:35:01,619 --> 00:35:08,740
if I want if I start to packaging if I'm

00:35:05,410 --> 00:35:11,140
to test if my package is reproducible so

00:35:08,740 --> 00:35:16,089
I'd like to test all those cases about

00:35:11,140 --> 00:35:19,270
different dates different locales is

00:35:16,089 --> 00:35:22,930
there a tool I can use there's this

00:35:19,270 --> 00:35:25,030
there's two ways to test this for one we

00:35:22,930 --> 00:35:26,890
have one tool which is called repro test

00:35:25,030 --> 00:35:29,290
it's in Debbie interrupt and store repo

00:35:26,890 --> 00:35:31,900
test and we put has weird with the

00:35:29,290 --> 00:35:34,990
variations for you and we free potestas

00:35:31,900 --> 00:35:37,420
also mode word varies the variation so

00:35:34,990 --> 00:35:39,700
it builds with all variations and then

00:35:37,420 --> 00:35:42,369
it sees its unreproducible and then it

00:35:39,700 --> 00:35:44,140
removes the loci variation and if it's

00:35:42,369 --> 00:35:46,089
then reproducible then you know aha

00:35:44,140 --> 00:35:47,710
something was the located and if it's

00:35:46,089 --> 00:35:50,440
not reproducible then then it removes

00:35:47,710 --> 00:35:53,220
the next variation until you know from

00:35:50,440 --> 00:35:56,050
which variation this is cause the other

00:35:53,220 --> 00:35:58,030
way to find out is just to upload your

00:35:56,050 --> 00:35:59,980
packets to Debian because then we will

00:35:58,030 --> 00:36:02,230
run it's on your package automatically

00:35:59,980 --> 00:36:04,240
because we test all the packages anyway

00:36:02,230 --> 00:36:05,710
so everything which get uploaded is

00:36:04,240 --> 00:36:10,329
automatically tested with all the

00:36:05,710 --> 00:36:12,609
variations and this is then also shown

00:36:10,329 --> 00:36:15,010
on track Debian orc so this is tracker

00:36:12,609 --> 00:36:17,349
for the Debian policy and you can see

00:36:15,010 --> 00:36:20,500
there does not page reproducible so if

00:36:17,349 --> 00:36:22,990
your package has this then this is the

00:36:20,500 --> 00:36:34,000
problem or then you know what you don't

00:36:22,990 --> 00:36:36,339
know why yet but is there also another

00:36:34,000 --> 00:36:39,250
tool to check if my assistant got

00:36:36,339 --> 00:36:42,220
compromised it I've my package installed

00:36:39,250 --> 00:36:45,880
is exactly the same if it is

00:36:42,220 --> 00:36:47,619
reproducible cannot release you cannot

00:36:45,880 --> 00:36:49,690
use this to detect whether your system

00:36:47,619 --> 00:36:51,220
is compromised but you can watch what

00:36:49,690 --> 00:36:53,140
the only thing you can do is create it

00:36:51,220 --> 00:36:55,510
on your system and if you know it's

00:36:53,140 --> 00:36:58,030
reproducible and then build it elsewhere

00:36:55,510 --> 00:37:00,700
then you might see okay one of the two

00:36:58,030 --> 00:37:02,290
systems is compromised because the sec

00:37:00,700 --> 00:37:07,020
has some doesn't match and it should

00:37:02,290 --> 00:37:10,140
match but it's only the reverse proof

00:37:07,020 --> 00:37:10,140
thank you

00:37:13,680 --> 00:37:19,360
if you've either you can either go to

00:37:16,750 --> 00:37:21,540
trekker debian org and through your

00:37:19,360 --> 00:37:24,550
packets there or you can also go to

00:37:21,540 --> 00:37:27,100
reproducible dot debian dotnet slash

00:37:24,550 --> 00:37:29,410
your source package

00:37:27,100 --> 00:37:31,930
give you this this is again for Debian

00:37:29,410 --> 00:37:34,690
policy and if we have investigated that

00:37:31,930 --> 00:37:38,440
we also leave notes there so we have

00:37:34,690 --> 00:37:40,750
some different issues so user groups and

00:37:38,440 --> 00:37:43,240
table or table all times them in table

00:37:40,750 --> 00:37:45,190
oil times them in G submitters different

00:37:43,240 --> 00:37:47,650
you to who masks different times them

00:37:45,190 --> 00:37:51,010
this time seven documentation generated

00:37:47,650 --> 00:37:52,540
by emacs org-mode times them in PS

00:37:51,010 --> 00:37:54,550
generated by DV IPPs

00:37:52,540 --> 00:37:56,860
so these are all issues the Debian

00:37:54,550 --> 00:38:00,430
policy used to have because these are

00:37:56,860 --> 00:38:04,240
the notes from version 397 and policy is

00:38:00,430 --> 00:38:06,100
at four one four at the moment so this

00:38:04,240 --> 00:38:14,110
these notes are outdated we need to work

00:38:06,100 --> 00:38:16,180
on those this is the stretch differences

00:38:14,110 --> 00:38:17,560
so it's policies three nine eight over

00:38:16,180 --> 00:38:20,830
there which is the version and stretch

00:38:17,560 --> 00:38:24,250
and I want justice as an example of

00:38:20,830 --> 00:38:28,180
different spoke output and so it says

00:38:24,250 --> 00:38:30,340
here that the this step is different and

00:38:28,180 --> 00:38:31,840
then you see inside the depth there's

00:38:30,340 --> 00:38:33,430
these differences in the control and

00:38:31,840 --> 00:38:36,790
then the data

00:38:33,430 --> 00:38:40,810
um file and then you scroll further down

00:38:36,790 --> 00:38:42,340
and you see here some file sizes are

00:38:40,810 --> 00:38:49,480
different so that's not helpful not

00:38:42,340 --> 00:38:53,260
helpful but here you see 2018 and here

00:38:49,480 --> 00:38:55,920
you see 2019 so you see this is this

00:38:53,260 --> 00:39:00,340
leak the big date into the binary and

00:38:55,920 --> 00:39:04,750
this was the old policy version the new

00:39:00,340 --> 00:39:06,100
policy version this is all gone but

00:39:04,750 --> 00:39:07,900
what's still there

00:39:06,100 --> 00:39:11,380
besides this for smoke we don't

00:39:07,900 --> 00:39:13,900
understand understand here you see the

00:39:11,380 --> 00:39:16,690
year and the months is the same but the

00:39:13,900 --> 00:39:19,510
bait date is different and this is

00:39:16,690 --> 00:39:21,680
because the timezone is there because we

00:39:19,510 --> 00:39:24,260
built with GMT - where

00:39:21,680 --> 00:39:27,470
and GMT plus 14 so it's more than a day

00:39:24,260 --> 00:39:29,599
different so if you have big dates which

00:39:27,470 --> 00:39:32,930
are just different by one day it's due

00:39:29,599 --> 00:39:35,089
to the time some variation so you need

00:39:32,930 --> 00:39:46,400
to manually look at wipes and

00:39:35,089 --> 00:39:51,710
reproducible more questions so thank you

00:39:46,400 --> 00:39:54,440
Homer I'm also you involved in a few

00:39:51,710 --> 00:39:56,990
initiatives that I spend the whole

00:39:54,440 --> 00:39:59,540
they've been archived and there's always

00:39:56,990 --> 00:40:02,450
this issue of people not picking up the

00:39:59,540 --> 00:40:08,869
patches and it's hard to push things

00:40:02,450 --> 00:40:10,280
forward because people don't care do do

00:40:08,869 --> 00:40:12,559
you think you have insights from

00:40:10,280 --> 00:40:14,599
reproduce reviews in this type of

00:40:12,559 --> 00:40:16,940
initiative and what we can do better in

00:40:14,599 --> 00:40:19,790
Devon to make sure that the people

00:40:16,940 --> 00:40:25,369
pushing these initiatives don't get

00:40:19,790 --> 00:40:33,920
blocked forever your question is what we

00:40:25,369 --> 00:40:37,549
can do to our what we can do as debian

00:40:33,920 --> 00:40:39,380
to make sure that initiatives that spend

00:40:37,549 --> 00:40:43,790
the whole work I've liked reproducible

00:40:39,380 --> 00:40:45,500
views or Auto packaged tests or stuff

00:40:43,790 --> 00:40:49,569
like that doesn't get blocked forever

00:40:45,500 --> 00:40:54,920
with responsive maintained errs and

00:40:49,569 --> 00:40:57,920
patches sitting in the BTS for I'm not

00:40:54,920 --> 00:41:01,400
sure what can be done I think when I

00:40:57,920 --> 00:41:03,950
when these patches were submitted half

00:41:01,400 --> 00:41:04,970
of them are acted very quickly like in a

00:41:03,950 --> 00:41:08,839
day or two

00:41:04,970 --> 00:41:10,880
those are superb and then this the other

00:41:08,839 --> 00:41:12,890
half or maybe it's just one third where

00:41:10,880 --> 00:41:18,300
there's not read there's either no

00:41:12,890 --> 00:41:19,540
reaction or reaction or something and

00:41:18,300 --> 00:41:24,740
[Music]

00:41:19,540 --> 00:41:26,510
which I I think the problem there in

00:41:24,740 --> 00:41:28,280
Debian is which is one of the strengths

00:41:26,510 --> 00:41:31,430
of Debian is the strong maintainer ship

00:41:28,280 --> 00:41:34,730
model but also what Debian has since

00:41:31,430 --> 00:41:36,740
many years now has changed the

00:41:34,730 --> 00:41:39,680
with you an amusement manor applause

00:41:36,740 --> 00:41:41,480
they maintain applause they used to be

00:41:39,680 --> 00:41:43,640
very frowned upon and now they are not

00:41:41,480 --> 00:41:46,609
that much anymore there what more widely

00:41:43,640 --> 00:41:49,119
accepted and I think we need to be more

00:41:46,609 --> 00:41:53,000
actively doing more an amuse

00:41:49,119 --> 00:41:56,960
so we tried this Chris Mattia and me try

00:41:53,000 --> 00:41:58,369
to do an amusing NMU campaign for

00:41:56,960 --> 00:42:00,050
reproducible builds we announced it

00:41:58,369 --> 00:42:02,690
announced that on debian devil

00:42:00,050 --> 00:42:04,940
people were happy with it and I think we

00:42:02,690 --> 00:42:06,530
did maybe hundred or two hundred or

00:42:04,940 --> 00:42:09,080
maybe it's three or four hundred now

00:42:06,530 --> 00:42:10,910
what we are still there still I could do

00:42:09,080 --> 00:42:14,930
five hundred and amuse but I don't do

00:42:10,910 --> 00:42:18,320
them so you could play me and so it's

00:42:14,930 --> 00:42:20,180
not blaming me but it's blaming it's not

00:42:18,320 --> 00:42:21,680
only the maintainer who don't accept the

00:42:20,180 --> 00:42:24,680
petrous but it's also it needs people

00:42:21,680 --> 00:42:26,780
who actively do that and Lumbee does it

00:42:24,680 --> 00:42:29,690
love it love me does one NMU per day or

00:42:26,780 --> 00:42:32,300
something but even that will take two or

00:42:29,690 --> 00:42:34,369
three years till he doesn't get any more

00:42:32,300 --> 00:42:37,100
thing to do and he does fire a new

00:42:34,369 --> 00:42:39,260
Petrus or will take a long time so I

00:42:37,100 --> 00:42:43,400
think the way out is to do be more

00:42:39,260 --> 00:42:46,220
friendly with animals and one way what I

00:42:43,400 --> 00:42:48,920
what I like about fedora and fedora you

00:42:46,220 --> 00:42:52,340
can clone every feet over sauce packets

00:42:48,920 --> 00:42:55,369
with lifts on get Fedora project orc /

00:42:52,340 --> 00:42:58,430
get / sauce package name while in Debian

00:42:55,369 --> 00:43:01,430
it can be in it it can be in SVN it can

00:42:58,430 --> 00:43:04,220
be on Liza it can be on github it can be

00:43:01,430 --> 00:43:07,250
somewhere so that's that's a complete

00:43:04,220 --> 00:43:08,810
mess and this mess is good on the one

00:43:07,250 --> 00:43:11,090
hand because it allows us to experiment

00:43:08,810 --> 00:43:13,720
with new stuff and the mess is really

00:43:11,090 --> 00:43:16,810
harmful because it's a mess

00:43:13,720 --> 00:43:20,930
so that's the same this is the same with

00:43:16,810 --> 00:43:24,200
the packaging towards nowadays in most

00:43:20,930 --> 00:43:26,450
most packages you step helper 9 or 10

00:43:24,200 --> 00:43:28,490
maybe even now but there are still see

00:43:26,450 --> 00:43:31,130
DBS that used to be yada there are some

00:43:28,490 --> 00:43:33,650
packages which don't use any helper tool

00:43:31,130 --> 00:43:36,650
and this is both the strange and the

00:43:33,650 --> 00:43:38,540
downside because you strangers we can

00:43:36,650 --> 00:43:41,710
develop new tools downside is you don't

00:43:38,540 --> 00:43:41,710
know what tool has been used

00:43:43,010 --> 00:43:50,750
I would like to ask about the tracker

00:43:46,690 --> 00:43:52,790
tracker davon dark that usually says

00:43:50,750 --> 00:43:55,040
that it's not reproducible then you go

00:43:52,790 --> 00:43:57,200
there and see that hates saying about

00:43:55,040 --> 00:43:59,720
Jesus he captures beautiful bath that I

00:43:57,200 --> 00:44:03,980
should it ignore that it's about the -

00:43:59,720 --> 00:44:07,160
chain that but then if there's ever a

00:44:03,980 --> 00:44:10,790
regression and if I start ignoring that

00:44:07,160 --> 00:44:13,700
hints that it's not reproducible I won't

00:44:10,790 --> 00:44:18,070
maybe notice that do you think there's a

00:44:13,700 --> 00:44:21,730
way to improve like hey you have deez

00:44:18,070 --> 00:44:24,950
bugs and now help these more bizarre

00:44:21,730 --> 00:44:28,400
kind of regressed I don't think it makes

00:44:24,950 --> 00:44:31,150
sense to to differentiate between it has

00:44:28,400 --> 00:44:34,160
three with unreproducible issues and two

00:44:31,150 --> 00:44:36,050
it makes sense to see the package was

00:44:34,160 --> 00:44:38,329
reproducible and it's not reproducible

00:44:36,050 --> 00:44:41,240
anymore but whether you introduce

00:44:38,329 --> 00:44:46,970
another variation or not I think is

00:44:41,240 --> 00:44:48,680
meaningless so and we are not really

00:44:46,970 --> 00:44:51,560
there that we can say this regression

00:44:48,680 --> 00:44:53,780
can track this regression very well but

00:44:51,560 --> 00:44:55,790
I think once we're there we will do that

00:44:53,780 --> 00:44:57,829
because we've done this was pure paths

00:44:55,790 --> 00:45:01,280
resides with the testing migration and

00:44:57,829 --> 00:45:03,369
that is sensible regarding trekkers also

00:45:01,280 --> 00:45:05,810
on trekker we saw the results for

00:45:03,369 --> 00:45:11,089
testing for Debian testing and not for

00:45:05,810 --> 00:45:13,099
unstable so if you go if the packages

00:45:11,089 --> 00:45:14,839
unreproducible only an unstable but not

00:45:13,099 --> 00:45:17,030
in testing track i will show that it's

00:45:14,839 --> 00:45:18,890
reproducible because there is just the

00:45:17,030 --> 00:45:20,960
big past variation and the block around

00:45:18,890 --> 00:45:23,290
is so simple just build in the same day

00:45:20,960 --> 00:45:23,290
pass

00:45:24,610 --> 00:45:40,030
I suppose most of these batches are

00:45:35,280 --> 00:45:44,920
herbs three batches and a few of them

00:45:40,030 --> 00:45:48,700
are actually packaging batches but we

00:45:44,920 --> 00:45:50,830
only apply them because when the fix to

00:45:48,700 --> 00:45:58,360
arrive before upswing gets a new release

00:45:50,830 --> 00:46:00,460
is that right I don't know I'm not sure

00:45:58,360 --> 00:46:03,760
what that most of the petrous at that

00:46:00,460 --> 00:46:06,490
box are really upstream packs as many

00:46:03,760 --> 00:46:09,190
are there's many fixes which we can be

00:46:06,490 --> 00:46:11,440
done in the Debian packaging which are

00:46:09,190 --> 00:46:15,490
then nice for Debian but don't help this

00:46:11,440 --> 00:46:19,840
free software world in general so we try

00:46:15,490 --> 00:46:21,580
to fix it upstream but that is also

00:46:19,840 --> 00:46:23,500
something we have not done that much

00:46:21,580 --> 00:46:26,320
sweet abbien people there's purnatva

00:46:23,500 --> 00:46:28,210
demon from openSUSE who has been way

00:46:26,320 --> 00:46:31,510
more active than us and pushing stuff

00:46:28,210 --> 00:46:36,370
upstream which is partly a manpower

00:46:31,510 --> 00:46:39,040
issue also I mostly heard about

00:46:36,370 --> 00:46:40,780
reproducible builds from Debian are

00:46:39,040 --> 00:46:43,080
there many people from the other

00:46:40,780 --> 00:46:48,190
distributions helping this initiative

00:46:43,080 --> 00:46:51,809
yes this is what I had here this

00:46:48,190 --> 00:46:51,809
[Music]

00:46:54,270 --> 00:46:59,190
and so the the openSUSE people are

00:46:56,730 --> 00:47:01,500
really actively doing lots of upstream

00:46:59,190 --> 00:47:03,600
work and they have they also test open

00:47:01,500 --> 00:47:08,760
loser or it's only banner mostly doing

00:47:03,600 --> 00:47:10,560
that the basil is also interesting basil

00:47:08,760 --> 00:47:12,600
is a big tool by Google which is

00:47:10,560 --> 00:47:15,450
designed to do reproducible builds and

00:47:12,600 --> 00:47:18,300
that it's it's also use it's used by

00:47:15,450 --> 00:47:19,830
Google but it's also usable by other

00:47:18,300 --> 00:47:20,790
project you could put page at every a

00:47:19,830 --> 00:47:23,640
negative with it

00:47:20,790 --> 00:47:26,790
was it the Hart's Linux people are now

00:47:23,640 --> 00:47:28,920
quite active f-droid is interested or is

00:47:26,790 --> 00:47:32,730
working on EFT or this application store

00:47:28,920 --> 00:47:35,160
for Android the Nix OS and Geeks people

00:47:32,730 --> 00:47:37,140
are also actively doing that there was

00:47:35,160 --> 00:47:41,160
just a scientific paper by the geeks

00:47:37,140 --> 00:47:45,600
people for bioinformatics software I

00:47:41,160 --> 00:47:48,150
think and they may had 98% of their

00:47:45,600 --> 00:47:53,090
software reproducible and so there's

00:47:48,150 --> 00:47:56,490
many people working on this now this is

00:47:53,090 --> 00:47:59,760
what I what I didn't tell that Debian

00:47:56,490 --> 00:48:01,650
started in 2013 on it the there were two

00:47:59,760 --> 00:48:03,920
projects who worked on this earlier

00:48:01,650 --> 00:48:07,530
which were two who made the tor browser

00:48:03,920 --> 00:48:09,930
reproducible in 2011 and the Bitcoin

00:48:07,530 --> 00:48:12,090
people because they were afraid if there

00:48:09,930 --> 00:48:14,670
was Bitcoin was worse for billion dollar

00:48:12,090 --> 00:48:18,450
in total and they were afraid somebody

00:48:14,670 --> 00:48:20,700
would release the TRO and Bitcoin client

00:48:18,450 --> 00:48:22,859
and then steal all the Bitcoin and they

00:48:20,700 --> 00:48:25,050
would be blamed so they did it they were

00:48:22,859 --> 00:48:29,340
the first to really prove possible and

00:48:25,050 --> 00:48:32,300
then we started and it's become many

00:48:29,340 --> 00:48:32,300
projects now so

00:48:47,850 --> 00:48:53,510
so this base rock is a Debian based

00:48:51,390 --> 00:48:56,970
distro

00:48:53,510 --> 00:48:57,360
electro BSD also was the first BSD to

00:48:56,970 --> 00:49:00,900
shored

00:48:57,360 --> 00:49:02,490
electro BSD is a BSD free FreeBSD fork

00:49:00,900 --> 00:49:06,350
and they had the base system

00:49:02,490 --> 00:49:08,640
reproducible before FreeBSD MFPs deed

00:49:06,350 --> 00:49:12,320
fedora is working a bit on it

00:49:08,640 --> 00:49:21,630
leaders opened up so there's more and

00:49:12,320 --> 00:49:25,650
they all work in various things the

00:49:21,630 --> 00:49:27,480
tails taste the taste that the tails 3.5

00:49:25,650 --> 00:49:28,680
released was reproducible that was the

00:49:27,480 --> 00:49:32,220
first taste release which was

00:49:28,680 --> 00:49:35,280
reproducible then tails v60 was not

00:49:32,220 --> 00:49:37,560
reproducible and then tails 3 6 1 is

00:49:35,280 --> 00:49:40,050
reproducible again and they also had

00:49:37,560 --> 00:49:45,150
that in their PR material so it's

00:49:40,050 --> 00:49:47,880
getting there and this is the other

00:49:45,150 --> 00:49:49,860
thing this is a producer will only work

00:49:47,880 --> 00:49:52,260
with free software but we have now

00:49:49,860 --> 00:49:54,300
self-driving cars we have pacemakers

00:49:52,260 --> 00:49:56,760
some people have pacemakers or other

00:49:54,300 --> 00:49:59,310
medical devices in their body there's

00:49:56,760 --> 00:50:01,820
nuclear power plants there's whatever

00:49:59,310 --> 00:50:04,410
weapons they all run with software and

00:50:01,820 --> 00:50:06,390
nobody can really know what's inside if

00:50:04,410 --> 00:50:07,950
you don't have reproduce of this you

00:50:06,390 --> 00:50:10,500
cannot really be sure that the source

00:50:07,950 --> 00:50:12,930
code you review is really the source

00:50:10,500 --> 00:50:14,820
code which is running so this this is

00:50:12,930 --> 00:50:19,200
really an advantage of free software

00:50:14,820 --> 00:50:23,400
which people start to understand now the

00:50:19,200 --> 00:50:26,280
other thing is what I just said that Tor

00:50:23,400 --> 00:50:28,500
and Bitcoin were the first in 2011 this

00:50:26,280 --> 00:50:30,090
is not true as I just learned last year

00:50:28,500 --> 00:50:32,130
and I've been working on this for four

00:50:30,090 --> 00:50:36,300
years because last year we learned that

00:50:32,130 --> 00:50:39,330
the new outer towards from psych psych

00:50:36,300 --> 00:50:42,870
knows where the commercial blue support

00:50:39,330 --> 00:50:44,880
in the 90s they in 1992 released the new

00:50:42,870 --> 00:50:48,990
order towards bit-by-bit reproducible

00:50:44,880 --> 00:50:51,300
for nine architectures but ever the code

00:50:48,990 --> 00:50:55,830
bit rotted and the word forgot even the

00:50:51,300 --> 00:50:58,560
new developers forgot so that was and we

00:50:55,830 --> 00:51:00,720
hope we now made enough fast that people

00:50:58,560 --> 00:51:06,990
will not forget that this is both

00:51:00,720 --> 00:51:13,530
possible and desirable do you have a BTS

00:51:06,990 --> 00:51:16,130
user tag there's a unreproducible user

00:51:13,530 --> 00:51:19,610
tech but that does not mean what we mean

00:51:16,130 --> 00:51:23,520
that means I cannot reproduce this back

00:51:19,610 --> 00:51:28,110
we have we have we have you we have used

00:51:23,520 --> 00:51:34,590
that tech but we have desert eggs do you

00:51:28,110 --> 00:51:41,450
have one we have 11 but we have for each

00:51:34,590 --> 00:51:41,450
issue like this environment or yes

00:51:50,870 --> 00:51:53,440
yeah

00:52:05,170 --> 00:52:09,480
what were the BTS Rizzo checkers

00:52:12,930 --> 00:52:17,250
it's a really a complex topic so it's

00:52:15,450 --> 00:52:19,500
also I skipped a lot of things in this

00:52:17,250 --> 00:52:20,640
talk because there's too much and for me

00:52:19,500 --> 00:52:24,390
I think I was there's too much

00:52:20,640 --> 00:52:33,840
information already and there's so that

00:52:24,390 --> 00:52:36,500
BGSU's attack is that is the Jenkins

00:52:33,840 --> 00:52:36,500
things

00:52:52,880 --> 00:52:57,769
now it's in the wiki started we started

00:52:55,910 --> 00:53:01,039
in the Debian wiki and then moved

00:52:57,769 --> 00:53:02,479
everything to reproducible because we

00:53:01,039 --> 00:53:04,009
didn't want to be in the Debian Mickey

00:53:02,479 --> 00:53:06,160
because we wanted to be crossed astral

00:53:04,009 --> 00:53:06,160
project

00:53:21,760 --> 00:53:33,560
if you go to if you go to wiki Debian

00:53:28,310 --> 00:53:36,350
org slash reproducible builds and then

00:53:33,560 --> 00:53:38,840
back reports there you find the user

00:53:36,350 --> 00:53:39,590
tech so if you attack is reproducible me

00:53:38,840 --> 00:53:44,300
- Bates

00:53:39,590 --> 00:53:47,380
adios I will take it as a reminder to

00:53:44,300 --> 00:53:50,500
make these bucks easier to find again

00:53:47,380 --> 00:53:50,500
thank you

00:53:58,640 --> 00:54:06,600
so I'm not understand why some binaries

00:54:04,470 --> 00:54:11,580
are reproducible for ice in a specific

00:54:06,600 --> 00:54:14,310
petrol but not for another why what was

00:54:11,580 --> 00:54:17,940
the question I mean like you can say I

00:54:14,310 --> 00:54:20,460
have seen many of reproduce ball status

00:54:17,940 --> 00:54:24,030
status there like this is reproducible

00:54:20,460 --> 00:54:26,730
for x86 but this is not reproducible for

00:54:24,030 --> 00:54:31,240
iron for example what is the reason for

00:54:26,730 --> 00:54:34,290
that that depends

00:54:31,240 --> 00:54:34,290
[Music]

00:54:34,460 --> 00:54:45,120
it can me that we have the variations we

00:54:43,200 --> 00:54:49,410
do are a bit different on the different

00:54:45,120 --> 00:54:55,020
architectures we test amd64 I 386 MH f

00:54:49,410 --> 00:54:57,600
and armed 64 and some problems only

00:54:55,020 --> 00:55:01,620
occur on some architectures for whatever

00:54:57,600 --> 00:55:04,380
reasons so it's some problems are only

00:55:01,620 --> 00:55:08,820
on there's there's some bugs which are

00:55:04,380 --> 00:55:11,160
only on 32-bit architectures so I'm a

00:55:08,820 --> 00:55:14,040
64-bit architecture it's reproducible on

00:55:11,160 --> 00:55:16,920
32-bit not or vice versa

00:55:14,040 --> 00:55:18,630
that can be the problem in the source

00:55:16,920 --> 00:55:20,460
code and the other can be that the

00:55:18,630 --> 00:55:22,440
variations we do are different and so

00:55:20,460 --> 00:55:24,360
it's a sort visible in our test

00:55:22,440 --> 00:55:25,440
framework but it's there are some things

00:55:24,360 --> 00:55:28,700
which are not visible on all

00:55:25,440 --> 00:55:34,560
architectures but for the other thing

00:55:28,700 --> 00:55:36,540
for example we on I 386 we vary we once

00:55:34,560 --> 00:55:38,670
built with the 32-bit kernel and once

00:55:36,540 --> 00:55:40,050
was a 64-bit kernel because you can do

00:55:38,670 --> 00:55:42,750
this on my understudy two-bit

00:55:40,050 --> 00:55:44,340
architectures well on 64-bit

00:55:42,750 --> 00:55:47,990
architectures you always need to use a

00:55:44,340 --> 00:55:50,850
64-bit kernel so if the kernel

00:55:47,990 --> 00:55:52,980
what is that the kernels the

00:55:50,850 --> 00:55:54,870
architectures leaked into the binary

00:55:52,980 --> 00:56:01,890
then you will get different resides for

00:55:54,870 --> 00:56:04,020
that packets only on our mage F&I 386 as

00:56:01,890 --> 00:56:04,910
lots and lots of lots and lots of

00:56:04,020 --> 00:56:12,170
details

00:56:04,910 --> 00:56:15,229
horribly it's great details I could

00:56:12,170 --> 00:56:15,229
[Music]

00:56:23,950 --> 00:56:32,740
you have mentioned that the reproduce

00:56:28,440 --> 00:56:40,150
reproducibility helps with with caching

00:56:32,740 --> 00:56:44,920
and build a compile-time household if

00:56:40,150 --> 00:56:48,130
you if you have a big source source code

00:56:44,920 --> 00:56:50,470
and you only change a small part of it

00:56:48,130 --> 00:56:53,380
and then if you want to rebuild this a

00:56:50,470 --> 00:56:55,630
big source code but you know that the

00:56:53,380 --> 00:56:58,869
results will be the same for the stuff

00:56:55,630 --> 00:57:00,310
you can use the cached result you don't

00:56:58,869 --> 00:57:01,690
need to compile because you know the

00:57:00,310 --> 00:57:03,130
result will be the same because it

00:57:01,690 --> 00:57:07,890
didn't change that area of the source

00:57:03,130 --> 00:57:13,839
code so you can get the the build

00:57:07,890 --> 00:57:17,050
environments F after the build end and

00:57:13,839 --> 00:57:18,369
paste it in another machine and I quite

00:57:17,050 --> 00:57:20,050
don't get it why you need to do it on

00:57:18,369 --> 00:57:23,140
the same machine you need to be able to

00:57:20,050 --> 00:57:25,510
reuse them and I'm not sure how basis

00:57:23,140 --> 00:57:27,250
this achieves internally but it is

00:57:25,510 --> 00:57:29,430
possible to do that and there's tools to

00:57:27,250 --> 00:57:29,430
do that

00:57:34,849 --> 00:57:38,269
more question

00:57:40,110 --> 00:57:45,230
so thank you hugger thank you too and

00:57:46,760 --> 00:57:52,730
I'm happy to talk about this the next

00:57:49,110 --> 00:57:52,730

YouTube URL: https://www.youtube.com/watch?v=veMJPoyxv5I


