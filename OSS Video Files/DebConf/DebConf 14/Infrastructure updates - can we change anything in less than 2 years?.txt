Title: Infrastructure updates - can we change anything in less than 2 years?
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Wookey

At: DebConf14
https://debconf14.debconf.org/
Room: Room 327
Scheduled start: 2014-08-24 19:00:00
Captions: 
	00:00:00,030 --> 00:00:04,740
let's welcome mookie who's talking about

00:00:02,520 --> 00:00:06,540
infrastructure updates and whether we

00:00:04,740 --> 00:00:10,099
can change anything in less than two

00:00:06,540 --> 00:00:15,540
years I hope so

00:00:10,099 --> 00:00:16,770
okay everyone hear me well so thank you

00:00:15,540 --> 00:00:18,810
for all coming back after dinner and not

00:00:16,770 --> 00:00:24,000
just going to the pub I'm impressed by

00:00:18,810 --> 00:00:25,920
your enthusiasm so yes we have this

00:00:24,000 --> 00:00:27,630
interesting problem that it's quite hard

00:00:25,920 --> 00:00:30,539
to change things quickly in Debian now

00:00:27,630 --> 00:00:33,809
we all knew that but I just wanted to

00:00:30,539 --> 00:00:34,920
talk a little bit about some experience

00:00:33,809 --> 00:00:37,739
I've had over the last few years trying

00:00:34,920 --> 00:00:40,620
to change a particular thing which has

00:00:37,739 --> 00:00:41,550
not gone particularly well I I would

00:00:40,620 --> 00:00:43,500
have liked to think we could have been a

00:00:41,550 --> 00:00:46,289
bit better so I really do want to talk

00:00:43,500 --> 00:00:48,629
about the general problem here of the

00:00:46,289 --> 00:00:51,989
way our infrastructure works and how if

00:00:48,629 --> 00:00:55,410
you miss a stable release that can be a

00:00:51,989 --> 00:00:58,829
real problem but I shall use this

00:00:55,410 --> 00:01:02,070
example of build profiles just because

00:00:58,829 --> 00:01:03,719
that's happened recently and I think it

00:01:02,070 --> 00:01:06,600
illustrates the point or at least some

00:01:03,719 --> 00:01:08,520
points I'd very much like to discuss

00:01:06,600 --> 00:01:09,960
things rather than blither on for too

00:01:08,520 --> 00:01:15,030
long so I'll try not to bleed on for too

00:01:09,960 --> 00:01:17,549
long so just to clarify case anybody's

00:01:15,030 --> 00:01:20,580
not clear all of our infrastructure

00:01:17,549 --> 00:01:25,009
basically runs on stable there are a few

00:01:20,580 --> 00:01:27,630
exceptions to that for practical reasons

00:01:25,009 --> 00:01:31,890
so if it's not in stable you can't use

00:01:27,630 --> 00:01:33,090
it in infrastructure so now I've been

00:01:31,890 --> 00:01:36,450
standing up and talking about build

00:01:33,090 --> 00:01:39,119
profiles for some years now just in case

00:01:36,450 --> 00:01:41,729
anyone's not familiar it's basically an

00:01:39,119 --> 00:01:44,640
addition to the build dependence syntax

00:01:41,729 --> 00:01:48,689
to be able to put angle brackets profile

00:01:44,640 --> 00:01:52,140
something so that sometimes profiles do

00:01:48,689 --> 00:01:55,729
or don't apply because you set magic

00:01:52,140 --> 00:01:59,399
variables and this lets us do

00:01:55,729 --> 00:02:01,200
arbitrarily complicated things primarily

00:01:59,399 --> 00:02:03,570
in this case makes bootstrapping easier

00:02:01,200 --> 00:02:05,430
is the original reason we started this

00:02:03,570 --> 00:02:07,140
but we've generalized it rather and hope

00:02:05,430 --> 00:02:10,830
it will be useful for other things in

00:02:07,140 --> 00:02:14,130
future so because we change the build

00:02:10,830 --> 00:02:17,370
depends syntax tools that read

00:02:14,130 --> 00:02:20,820
syntax have to understand it a very

00:02:17,370 --> 00:02:22,860
least ignore it so that mostly means D

00:02:20,820 --> 00:02:24,930
package but it also means apt and it

00:02:22,860 --> 00:02:26,280
means s build and we actually found 11

00:02:24,930 --> 00:02:28,620
other things that read build

00:02:26,280 --> 00:02:31,170
dependencies themselves rather than use

00:02:28,620 --> 00:02:34,650
another tool that's possibly slide too

00:02:31,170 --> 00:02:36,420
many but there you go some of them are

00:02:34,650 --> 00:02:40,590
quite obscure like Haskell we don't care

00:02:36,420 --> 00:02:44,550
about that there's a list on a webpage

00:02:40,590 --> 00:02:45,810
which I did have but I've just lost so

00:02:44,550 --> 00:02:50,340
just give you some idea of the timeline

00:02:45,810 --> 00:02:53,190
here so 2010 there was a UDS we had an

00:02:50,340 --> 00:02:57,540
argument about this problem and like

00:02:53,190 --> 00:02:59,550
mini a wrote a spec for build depends

00:02:57,540 --> 00:03:00,960
stage 1 and build depends stage 2 which

00:02:59,550 --> 00:03:04,080
was a very primitive version of this

00:03:00,960 --> 00:03:07,560
concept and I first talked about this at

00:03:04,080 --> 00:03:10,500
DEFCON 4 Levin which is now three years

00:03:07,560 --> 00:03:13,800
ago and wrote some patches eventually

00:03:10,500 --> 00:03:16,440
beginning of the six months later those

00:03:13,800 --> 00:03:19,140
went in which implemented again this

00:03:16,440 --> 00:03:20,910
fairly simple minded version and then

00:03:19,140 --> 00:03:23,400
there was a long argument about exactly

00:03:20,910 --> 00:03:26,270
how this would best be done and how what

00:03:23,400 --> 00:03:27,990
I'd done was a bit crappy which was true

00:03:26,270 --> 00:03:30,090
deep package maintained as

00:03:27,990 --> 00:03:32,250
understandably that because he had an

00:03:30,090 --> 00:03:34,590
extra field for every stage 1 stage 2

00:03:32,250 --> 00:03:37,530
stage 3 it made for a very bloated

00:03:34,590 --> 00:03:39,330
implementation in D package so there was

00:03:37,530 --> 00:03:40,530
quite a long back-and-forth about I

00:03:39,330 --> 00:03:42,780
should be using go brackets and should

00:03:40,530 --> 00:03:43,980
be used square brackets and you know we

00:03:42,780 --> 00:03:46,170
use angle brackets that was the last

00:03:43,980 --> 00:03:47,550
character left so if we ever thought of

00:03:46,170 --> 00:03:51,180
something else crazy we'd have run out

00:03:47,550 --> 00:03:53,250
of meta characters to use and it's went

00:03:51,180 --> 00:03:56,460
round and round and to be fair I think

00:03:53,250 --> 00:03:58,440
that debate calls the final solution to

00:03:56,460 --> 00:04:00,330
be much better it's much more general

00:03:58,440 --> 00:04:01,440
it's generally a good thing however it

00:04:00,330 --> 00:04:03,900
did mean that whilst having that

00:04:01,440 --> 00:04:06,960
argument we missed the weazy release so

00:04:03,900 --> 00:04:08,310
it wasn't stable now because we were

00:04:06,960 --> 00:04:10,290
still argued about the syntax at the

00:04:08,310 --> 00:04:14,790
point where it could have been in the

00:04:10,290 --> 00:04:16,020
stable we now have so you know it didn't

00:04:14,790 --> 00:04:18,330
seem to be too much of a big deal at the

00:04:16,020 --> 00:04:19,980
time eventually we get to better

00:04:18,330 --> 00:04:22,140
implementation in D packages everybody's

00:04:19,980 --> 00:04:23,910
happy with we rewrite all our patches

00:04:22,140 --> 00:04:27,300
again so by this time basically you

00:04:23,910 --> 00:04:28,050
Hannah shower my G sock student of a

00:04:27,300 --> 00:04:29,699
couple of years ago

00:04:28,050 --> 00:04:31,229
have more or less taken this project

00:04:29,699 --> 00:04:33,240
over and he did all the patching and

00:04:31,229 --> 00:04:34,530
generally fettling things which is good

00:04:33,240 --> 00:04:36,270
because it meant it happened in a timely

00:04:34,530 --> 00:04:43,229
fashion but you wouldn't if I was in

00:04:36,270 --> 00:04:46,050
charge and so yes so by the end of

00:04:43,229 --> 00:04:48,930
December end of 2013 we had new patches

00:04:46,050 --> 00:04:51,360
for all that most of those 15 packages

00:04:48,930 --> 00:04:53,970
certainly all the important ones and we

00:04:51,360 --> 00:04:55,470
sent them in and then Helmut Gruen had

00:04:53,970 --> 00:04:58,080
got involved and said I want to actually

00:04:55,470 --> 00:04:59,520
upload something the tests this for the

00:04:58,080 --> 00:05:01,800
very good reason there if we don't try

00:04:59,520 --> 00:05:03,120
it in the real archive you won't know

00:05:01,800 --> 00:05:05,729
whether you have in fact found all the

00:05:03,120 --> 00:05:07,319
things you need to fix and if any of

00:05:05,729 --> 00:05:08,699
those need to be fixed in stable so that

00:05:07,319 --> 00:05:10,620
it actually works you need to find out

00:05:08,699 --> 00:05:14,220
before the next stable release otherwise

00:05:10,620 --> 00:05:15,330
you're screwed for another two years so

00:05:14,220 --> 00:05:16,650
he uploaded doxygen

00:05:15,330 --> 00:05:19,830
because that was one of his packages and

00:05:16,650 --> 00:05:21,780
it needed a build dependency a fill

00:05:19,830 --> 00:05:25,380
profile adding to make it bootstrap of

00:05:21,780 --> 00:05:27,300
all and it got rejected because python

00:05:25,380 --> 00:05:30,330
apt somewhere in the archive software

00:05:27,300 --> 00:05:34,199
said I don't have done this it's not

00:05:30,330 --> 00:05:35,849
right throw it away so we found

00:05:34,199 --> 00:05:38,039
something that breaks fair enough of

00:05:35,849 --> 00:05:40,740
supplied patches for that where we

00:05:38,039 --> 00:05:44,039
already had patches for that but the

00:05:40,740 --> 00:05:47,130
problem was how do you get that into the

00:05:44,039 --> 00:05:49,500
archive now by this stage as I say I

00:05:47,130 --> 00:05:51,030
wasn't really pushing this now the point

00:05:49,500 --> 00:05:53,580
fortunately helmet and Johanna saw

00:05:51,030 --> 00:05:56,159
neither of them are here but we did have

00:05:53,580 --> 00:05:58,409
a sprint last week so I talked to them

00:05:56,159 --> 00:06:00,810
about this and so they were basically

00:05:58,409 --> 00:06:03,900
trying to make this happen they're both

00:06:00,810 --> 00:06:05,639
smart people think helmets RDD Hannes

00:06:03,900 --> 00:06:12,060
isn't yet but only because the am

00:06:05,639 --> 00:06:15,539
process is very slow now they decided to

00:06:12,060 --> 00:06:18,830
mostly do this on IRC or Helmut did

00:06:15,539 --> 00:06:21,210
primarily I suspect that was a mistake

00:06:18,830 --> 00:06:22,560
there's a there's something in a process

00:06:21,210 --> 00:06:24,509
somewhere about if you want to have a

00:06:22,560 --> 00:06:25,759
stable release update you should file a

00:06:24,509 --> 00:06:28,620
bug about it

00:06:25,759 --> 00:06:30,000
so we didn't start by doing that

00:06:28,620 --> 00:06:31,590
well they didn't start by doing that

00:06:30,000 --> 00:06:33,210
they started by asking people going is

00:06:31,590 --> 00:06:38,099
it okay if we do this and is it okay if

00:06:33,210 --> 00:06:39,389
we do this which is kind of informal and

00:06:38,099 --> 00:06:40,620
polite and it you know it's polite to

00:06:39,389 --> 00:06:42,800
ask people whether you do something

00:06:40,620 --> 00:06:44,699
before actually doing it

00:06:42,800 --> 00:06:47,009
but I don't think it actually helped

00:06:44,699 --> 00:06:49,469
their case particularly anyway so yep

00:06:47,009 --> 00:06:50,219
they did try reasonably hard to get this

00:06:49,469 --> 00:06:52,139
done

00:06:50,219 --> 00:06:53,729
so we had all the patches written so the

00:06:52,139 --> 00:06:55,680
point about this was that they weren't

00:06:53,729 --> 00:06:59,370
trying to get all the functionality of

00:06:55,680 --> 00:07:01,559
build profiles into the old stable

00:06:59,370 --> 00:07:03,599
release just enough to be able to ignore

00:07:01,559 --> 00:07:06,360
things with angle brackets correctly so

00:07:03,599 --> 00:07:08,610
it wouldn't blow up and the point is

00:07:06,360 --> 00:07:10,289
that anything that gets used in the

00:07:08,610 --> 00:07:12,779
infrastructure needs to not explode when

00:07:10,289 --> 00:07:15,749
it sees some angle brackets and just

00:07:12,779 --> 00:07:20,849
ignore them and then we can upload stuff

00:07:15,749 --> 00:07:23,219
and test things so they tried putting

00:07:20,849 --> 00:07:24,930
something in Weezy proposed updates but

00:07:23,219 --> 00:07:28,529
the stable release manager didn't fancy

00:07:24,930 --> 00:07:30,809
that much and there we go okay well

00:07:28,529 --> 00:07:32,279
maybe we could put it in back ports back

00:07:30,809 --> 00:07:33,749
put the new version of D package which

00:07:32,279 --> 00:07:35,580
has all this functionality in and they

00:07:33,749 --> 00:07:39,059
went now that's that's how loads of new

00:07:35,580 --> 00:07:43,620
things as well which we don't want how

00:07:39,059 --> 00:07:44,879
about just a patch to do just ignore

00:07:43,620 --> 00:07:46,229
angle brackets and not do any of the

00:07:44,879 --> 00:07:48,830
extra functionality so we had some

00:07:46,229 --> 00:07:48,830
patches for that

00:07:55,590 --> 00:07:59,070
the deer the original package we were

00:07:57,449 --> 00:08:01,260
trying to get in were just to ignore

00:07:59,070 --> 00:08:02,850
angle brackets not to implement the

00:08:01,260 --> 00:08:06,210
whole thing because clearly that would

00:08:02,850 --> 00:08:08,160
be wrong in a stable thing it was though

00:08:06,210 --> 00:08:11,750
it was the least possible patch that

00:08:08,160 --> 00:08:16,770
would let this pass through was the idea

00:08:11,750 --> 00:08:19,139
and so there's some rules about stable

00:08:16,770 --> 00:08:21,690
back ports and that didn't comply with

00:08:19,139 --> 00:08:24,150
those who thought all right how about

00:08:21,690 --> 00:08:25,500
just just stick these in quietly

00:08:24,150 --> 00:08:26,910
somewhere so they get used in the

00:08:25,500 --> 00:08:28,169
infrastructure in much the same way as

00:08:26,910 --> 00:08:29,370
the version of s build we use isn't

00:08:28,169 --> 00:08:34,589
actually the version of s building

00:08:29,370 --> 00:08:38,789
stable but I think people didn't like

00:08:34,589 --> 00:08:40,140
that much either and yes so and then

00:08:38,789 --> 00:08:42,120
there was a bug file which basically

00:08:40,140 --> 00:08:44,510
said so eventually he said dear tech

00:08:42,120 --> 00:08:46,860
committee can you help what should we do

00:08:44,510 --> 00:08:49,339
which again perhaps wasn't the smartest

00:08:46,860 --> 00:08:52,380
move but there you go

00:08:49,339 --> 00:08:54,870
so everyone involved was very helpful

00:08:52,380 --> 00:08:56,400
and polite and reasonably said well I'll

00:08:54,870 --> 00:08:58,380
rule yeah what we normally do is this

00:08:56,400 --> 00:09:00,120
and this doesn't really comply so now we

00:08:58,380 --> 00:09:02,520
don't really want to do that

00:09:00,120 --> 00:09:04,260
but the problem was that we couldn't

00:09:02,520 --> 00:09:05,940
even upload something to experimental to

00:09:04,260 --> 00:09:09,140
try this and it seems to me that we

00:09:05,940 --> 00:09:09,140
probably all have been able to do that

00:09:09,740 --> 00:09:15,180
so does that mean that collectively so

00:09:13,380 --> 00:09:16,589
each individual group kind of the other

00:09:15,180 --> 00:09:18,330
stable release update people said well

00:09:16,589 --> 00:09:20,820
you know this isn't really a stable

00:09:18,330 --> 00:09:22,140
release update sort of thing and the

00:09:20,820 --> 00:09:24,570
backports people said well this isn't

00:09:22,140 --> 00:09:26,779
really a backward sort of thing and so

00:09:24,570 --> 00:09:29,459
on and they all had a point you know

00:09:26,779 --> 00:09:36,930
it's easier for us to say no don't do

00:09:29,459 --> 00:09:39,060
that because well it is arguably correct

00:09:36,930 --> 00:09:40,920
exactly but the kind of collective

00:09:39,060 --> 00:09:43,020
result of all these individual groups

00:09:40,920 --> 00:09:45,420
going it's not really something we want

00:09:43,020 --> 00:09:48,570
to take on the maintenance burden of is

00:09:45,420 --> 00:09:50,760
that we couldn't do this once we still

00:09:48,570 --> 00:09:52,230
haven't done this now as it happens at

00:09:50,760 --> 00:09:53,850
the bootstraps sprint we found a bit of

00:09:52,230 --> 00:09:55,230
a problem so actually maybe we want to

00:09:53,850 --> 00:09:58,410
change it so maybe this delays a good

00:09:55,230 --> 00:09:59,490
thing but in general it would have been

00:09:58,410 --> 00:10:01,230
nice to have to try this a few months

00:09:59,490 --> 00:10:05,430
ago and go yes this all works and we

00:10:01,230 --> 00:10:06,630
have all the pieces now so one question

00:10:05,430 --> 00:10:08,850
it is in fact

00:10:06,630 --> 00:10:09,780
wuzzle that IRC chat the wrong way to go

00:10:08,850 --> 00:10:11,160
about this and somebody should have

00:10:09,780 --> 00:10:13,200
filed a bug at the beginning and had a

00:10:11,160 --> 00:10:16,830
much more public discussion I think they

00:10:13,200 --> 00:10:18,090
probably should there's a bit if you

00:10:16,830 --> 00:10:19,650
read all the book reports about this

00:10:18,090 --> 00:10:21,030
there's a bit saying that the stable

00:10:19,650 --> 00:10:22,560
release update people said no and they

00:10:21,030 --> 00:10:24,210
said we didn't actually say no we just

00:10:22,560 --> 00:10:38,160
said not sure about that which isn't

00:10:24,210 --> 00:10:39,990
quite the same as know yeah so you know

00:10:38,160 --> 00:10:41,910
to some degree that's perhaps just

00:10:39,990 --> 00:10:43,140
communication failure Roden but you know

00:10:41,910 --> 00:10:45,870
on the other hand these two guys are

00:10:43,140 --> 00:10:47,730
smart people who you know know how the

00:10:45,870 --> 00:10:49,560
project works and did fairly sensible

00:10:47,730 --> 00:10:51,060
things so if they didn't do the right

00:10:49,560 --> 00:10:54,690
things then maybe it's hard to do the

00:10:51,060 --> 00:10:56,280
right thing arguably you could say that

00:10:54,690 --> 00:10:57,480
in fact we don't want to introduce build

00:10:56,280 --> 00:10:58,830
profiles and the thing and you do have

00:10:57,480 --> 00:11:05,010
to wait another two years and that's

00:10:58,830 --> 00:11:10,260
just tough I don't know I always

00:11:05,010 --> 00:11:12,000
finished so so yeah can we improve on in

00:11:10,260 --> 00:11:13,440
this process so one of the things I

00:11:12,000 --> 00:11:15,060
hadn't appreciated four years ago was

00:11:13,440 --> 00:11:16,680
just how much it matters if you miss a

00:11:15,060 --> 00:11:18,420
stable release there's something you

00:11:16,680 --> 00:11:21,090
need in you really do have to wait a

00:11:18,420 --> 00:11:22,950
long time before you get another go and

00:11:21,090 --> 00:11:24,240
I'm not sure and maybe I'm just slowing

00:11:22,950 --> 00:11:25,890
the uptake and everyone else realize

00:11:24,240 --> 00:11:29,640
this years ago

00:11:25,890 --> 00:11:31,440
I'm sure Steve has but yeah you know if

00:11:29,640 --> 00:11:32,520
I'd been more aware of that I would have

00:11:31,440 --> 00:11:34,110
worried a lot more about the fact that

00:11:32,520 --> 00:11:36,480
we missed the weazy opportunity to get

00:11:34,110 --> 00:11:39,450
this in I really wasn't sufficiently on

00:11:36,480 --> 00:11:40,740
the ball so all of these people right to

00:11:39,450 --> 00:11:42,300
go well there's a small risk this will

00:11:40,740 --> 00:11:47,100
break something so we don't want to do

00:11:42,300 --> 00:11:48,510
it because you know the version of deep

00:11:47,100 --> 00:11:50,040
package that people are using in say a

00:11:48,510 --> 00:11:51,510
stable release update really does matter

00:11:50,040 --> 00:11:54,900
so you know people are right to be quite

00:11:51,510 --> 00:11:56,640
conservative about that now you know

00:11:54,900 --> 00:11:59,850
Helmut when asked the tech committee

00:11:56,640 --> 00:12:01,440
kind of helped but in order to do some

00:11:59,850 --> 00:12:03,390
people think that that's really not a

00:12:01,440 --> 00:12:05,760
nice thing to do so again for example

00:12:03,390 --> 00:12:08,750
hates the Technical Committee and well

00:12:05,760 --> 00:12:08,750
no that's

00:12:10,829 --> 00:12:18,009
yeah yeah not to interrupt right before

00:12:16,209 --> 00:12:20,499
you finish but it is worth noting that

00:12:18,009 --> 00:12:23,079
what he actually did was to informally

00:12:20,499 --> 00:12:24,220
engage tech committee members in an IRC

00:12:23,079 --> 00:12:26,230
conversation today

00:12:24,220 --> 00:12:27,970
yes which is really not the same thing

00:12:26,230 --> 00:12:30,459
as invoking the Technical Committee

00:12:27,970 --> 00:12:35,829
precisely right but it still annoys gear

00:12:30,459 --> 00:12:37,300
yeah so bike sheds obviously PPA is is

00:12:35,829 --> 00:12:40,449
something that maybe we should be using

00:12:37,300 --> 00:12:43,540
more to enable this sort of have some

00:12:40,449 --> 00:12:46,029
software in use for the machinery Jazzy

00:12:43,540 --> 00:12:48,040
isn't in stable if we already do that in

00:12:46,029 --> 00:12:52,139
fact for several packages and maybe we

00:12:48,040 --> 00:12:52,139
could do it for more when it's expedient

00:12:55,649 --> 00:13:00,249
that's approximately what we do for the

00:12:57,999 --> 00:13:01,839
same kinds of things in integrand too

00:13:00,249 --> 00:13:04,809
and it works fine mm-hmm

00:13:01,839 --> 00:13:08,309
all you need is so I totally understand

00:13:04,809 --> 00:13:12,939
the need for admins to have the thing

00:13:08,309 --> 00:13:15,879
mentioned somewhere and you know it's

00:13:12,939 --> 00:13:17,649
that's that's not always necessarily

00:13:15,879 --> 00:13:19,869
something that you want to push Debian

00:13:17,649 --> 00:13:21,759
users there are kis where we want to be

00:13:19,869 --> 00:13:25,089
running something different but you want

00:13:21,759 --> 00:13:27,279
to make sure that the that the thing

00:13:25,089 --> 00:13:29,230
you're running on important production

00:13:27,279 --> 00:13:33,189
systems is actually cared for by

00:13:29,230 --> 00:13:35,920
somebody and having it be have you know

00:13:33,189 --> 00:13:40,569
the Debian deprecations team teams near

00:13:35,920 --> 00:13:42,699
moments and have them be able to push

00:13:40,569 --> 00:13:45,129
security updates not kind of thing and

00:13:42,699 --> 00:13:46,959
have them be on the hook is I think

00:13:45,129 --> 00:13:49,149
sufficient for this kind of thing yeah

00:13:46,959 --> 00:13:52,670
so that's the end of my slides so if

00:13:49,149 --> 00:13:55,820
there's I think other people

00:13:52,670 --> 00:13:55,820
[Music]

00:13:58,560 --> 00:14:03,910
hi so from my perspective the first

00:14:02,680 --> 00:14:05,110
thing that went wrong in this particular

00:14:03,910 --> 00:14:07,450
process

00:14:05,110 --> 00:14:08,640
I was always of the opinion that that

00:14:07,450 --> 00:14:12,130
loic's

00:14:08,640 --> 00:14:15,370
original proposal regardless of any lack

00:14:12,130 --> 00:14:18,580
of aesthetic desirability from deep

00:14:15,370 --> 00:14:20,589
package upstreams point of view it was

00:14:18,580 --> 00:14:22,839
the right thing to do because it would

00:14:20,589 --> 00:14:24,790
have gotten us where we needed to be and

00:14:22,839 --> 00:14:30,779
so I think it was I think the original

00:14:24,790 --> 00:14:33,339
sin here was in letting GM derail it by

00:14:30,779 --> 00:14:34,750
going for the perfect solution which

00:14:33,339 --> 00:14:37,990
necessarily meant it was going to take

00:14:34,750 --> 00:14:39,790
longer to implement and and I did voice

00:14:37,990 --> 00:14:42,279
this opinion at the time he did that of

00:14:39,790 --> 00:14:44,020
that discussion so I think we could have

00:14:42,279 --> 00:14:45,210
gotten there a lot faster by being more

00:14:44,020 --> 00:14:49,060
pragmatic about it

00:14:45,210 --> 00:14:50,320
true but that was a decision that the

00:14:49,060 --> 00:14:51,670
people who were working on it needed to

00:14:50,320 --> 00:14:53,380
make and I was not the person working on

00:14:51,670 --> 00:14:57,240
it and so that's that's fine make

00:14:53,380 --> 00:15:00,630
whatever decision you wanted to in the

00:14:57,240 --> 00:15:03,460
you know the knock-on effects of that

00:15:00,630 --> 00:15:05,230
yeah as as Colin says if we picked one

00:15:03,460 --> 00:15:07,930
thing to overrule here it would be the

00:15:05,230 --> 00:15:10,030
SRMs as most likely I tend to agree with

00:15:07,930 --> 00:15:13,150
that but we were in the situation which

00:15:10,030 --> 00:15:16,000
I viewed it as something which in in the

00:15:13,150 --> 00:15:18,790
absence of any particular group being

00:15:16,000 --> 00:15:21,430
willing to stick their necks out and and

00:15:18,790 --> 00:15:23,440
take on this work there needed to be

00:15:21,430 --> 00:15:25,930
somebody in the project who did have the

00:15:23,440 --> 00:15:27,640
the big-picture view about what Debian

00:15:25,930 --> 00:15:29,050
as a project needed as opposed to what

00:15:27,640 --> 00:15:30,280
the individual teams needed and that is

00:15:29,050 --> 00:15:34,120
supposed to be the technical committees

00:15:30,280 --> 00:15:35,860
responsibility so I actually I asked I

00:15:34,120 --> 00:15:37,210
think it was I don't remember was helmet

00:15:35,860 --> 00:15:38,830
or johannes at the moment but I did ask

00:15:37,210 --> 00:15:41,230
somebody to assign that bug to the

00:15:38,830 --> 00:15:42,670
Technical Committee now in the meantime

00:15:41,230 --> 00:15:44,230
we discovered that oh maybe the

00:15:42,670 --> 00:15:46,510
conversation they had with the SRM x'

00:15:44,230 --> 00:15:47,980
was not what they thought it was and

00:15:46,510 --> 00:15:49,209
maybe the SRM wanted to review it which

00:15:47,980 --> 00:15:52,660
is why the Technical Committee didn't

00:15:49,209 --> 00:15:54,700
act on that the other aspect of it was

00:15:52,660 --> 00:15:56,680
that in the course of discussing it it

00:15:54,700 --> 00:15:58,540
was pointed out that as a consequence of

00:15:56,680 --> 00:16:00,580
everybody now being a delegate on these

00:15:58,540 --> 00:16:02,320
teams the Technical Committee doesn't

00:16:00,580 --> 00:16:04,240
have the authority to overrule them and

00:16:02,320 --> 00:16:06,130
so we have a bug here that I don't think

00:16:04,240 --> 00:16:07,540
it I think it's an emergent bug that we

00:16:06,130 --> 00:16:09,150
don't actually have the authority and

00:16:07,540 --> 00:16:10,830
the technical committee to overrule

00:16:09,150 --> 00:16:12,660
delegates on technical matters like this

00:16:10,830 --> 00:16:14,370
and I think that's something we should

00:16:12,660 --> 00:16:17,610
probably constitutionally fix because it

00:16:14,370 --> 00:16:19,050
is that we've used delegations a lot

00:16:17,610 --> 00:16:20,670
more than we used to and so this is I

00:16:19,050 --> 00:16:22,320
think this is an unintended consequence

00:16:20,670 --> 00:16:23,430
and we should have a project wide

00:16:22,320 --> 00:16:25,710
discussion about whether that should be

00:16:23,430 --> 00:16:27,720
fixed obviously all things being equal

00:16:25,710 --> 00:16:29,700
we should have an amicable discussion

00:16:27,720 --> 00:16:31,920
and consult people anyway but sometimes

00:16:29,700 --> 00:16:33,180
an overrule might be needed and there

00:16:31,920 --> 00:16:37,890
should be somebody with the power to

00:16:33,180 --> 00:16:39,930
make those calls right so you have a

00:16:37,890 --> 00:16:41,250
real individual maintain is but no but

00:16:39,930 --> 00:16:43,170
at the moment now yeah but the moment

00:16:41,250 --> 00:16:44,790
the team gets a delegation so that

00:16:43,170 --> 00:16:46,650
they're blessed by the DPL then suddenly

00:16:44,790 --> 00:16:47,850
you can't overrule them anymore

00:16:46,650 --> 00:16:48,960
I didn't think I said II hadn't realized

00:16:47,850 --> 00:16:53,300
that I guess a lot of other people have

00:16:48,960 --> 00:16:55,170
neither one thing that occurs to me is

00:16:53,300 --> 00:16:58,400
perhaps you were trying to solve the

00:16:55,170 --> 00:17:01,980
wrong problem quite possibly and because

00:16:58,400 --> 00:17:03,600
if you think about the way this would be

00:17:01,980 --> 00:17:06,150
managed in a sort of corporate

00:17:03,600 --> 00:17:09,050
environment if you're you you're

00:17:06,150 --> 00:17:10,920
basically trying to test the existing

00:17:09,050 --> 00:17:12,660
infrastructure to make sure that you'd

00:17:10,920 --> 00:17:14,880
caught everything yeah so the solution

00:17:12,660 --> 00:17:16,980
to that would typically be sound the

00:17:14,880 --> 00:17:18,839
infrastructure to be fair that's what we

00:17:16,980 --> 00:17:20,370
were told to do ultimately was going to

00:17:18,839 --> 00:17:23,250
set up your own copy of everything and

00:17:20,370 --> 00:17:25,050
test it there which as you say is a

00:17:23,250 --> 00:17:26,370
perfectly correct way of looking at the

00:17:25,050 --> 00:17:27,839
problems it's really hard to set up our

00:17:26,370 --> 00:17:30,630
infrastructure because it off of it's

00:17:27,839 --> 00:17:43,140
not packaged yeah perhaps perhaps does

00:17:30,630 --> 00:17:47,750
offer rather is that not okay okay yeah

00:17:43,140 --> 00:17:47,750
yeah it's all right one next year but

00:17:49,070 --> 00:17:57,389
so anyhow this this this actually for

00:17:54,269 --> 00:17:59,009
their specific case here saying you can

00:17:57,389 --> 00:18:00,840
set up parallel infrastructure is

00:17:59,009 --> 00:18:02,940
ignoring half of the reason they want to

00:18:00,840 --> 00:18:06,090
do this it's not about testing that it

00:18:02,940 --> 00:18:07,379
works in the archive in fact it wouldn't

00:18:06,090 --> 00:18:09,960
because the D factors they want to

00:18:07,379 --> 00:18:13,080
upload will ignore those fields and the

00:18:09,960 --> 00:18:15,299
infrastructure will not in any way be

00:18:13,080 --> 00:18:16,799
improved to support these features what

00:18:15,299 --> 00:18:19,769
they want is to be able to upload

00:18:16,799 --> 00:18:21,600
packages to unstable that support build

00:18:19,769 --> 00:18:23,999
profiles so that when unstable becomes

00:18:21,600 --> 00:18:26,940
stable you can bootstrap it yeah that's

00:18:23,999 --> 00:18:28,710
what they want and sure doesn't solve

00:18:26,940 --> 00:18:30,899
that that was that was they'll never be

00:18:28,710 --> 00:18:32,730
able to upload that stuff to unstable

00:18:30,899 --> 00:18:35,220
until a stable release has happened so

00:18:32,730 --> 00:18:37,399
then we're back to this well I know them

00:18:35,220 --> 00:18:39,570
about is one thing and also as you say

00:18:37,399 --> 00:18:41,129
having maintained is be able to upload

00:18:39,570 --> 00:18:42,869
stuff which currently doesn't a thing

00:18:41,129 --> 00:18:45,269
but you know is ignored but will be

00:18:42,869 --> 00:18:47,970
useful in the future so the problem with

00:18:45,269 --> 00:18:49,679
doing that is that because you you

00:18:47,970 --> 00:18:51,710
haven't set up the parallel

00:18:49,679 --> 00:18:55,769
infrastructure is that that code has

00:18:51,710 --> 00:18:57,240
effectively never been tested and using

00:18:55,769 --> 00:18:59,369
our production infrastructure for

00:18:57,240 --> 00:19:01,409
testing new code it's probably not the

00:18:59,369 --> 00:19:03,659
best idea isn't that what experimentals

00:19:01,409 --> 00:19:05,909
for in this case no because you're not

00:19:03,659 --> 00:19:17,700
testing X no you're testing them for

00:19:05,909 --> 00:19:20,039
infrastructure right okay yeah okay well

00:19:17,700 --> 00:19:23,730
we we need both we need we need to have

00:19:20,039 --> 00:19:26,249
a for this kind of thing if you want to

00:19:23,730 --> 00:19:27,899
have a wait to exercise the

00:19:26,249 --> 00:19:30,360
infrastructure without risking the

00:19:27,899 --> 00:19:32,190
integrity of FTP master then what you

00:19:30,360 --> 00:19:34,019
need is a separate staging instance of

00:19:32,190 --> 00:19:35,909
FTP master that people can upload stuff

00:19:34,019 --> 00:19:38,149
to and that it will that will be

00:19:35,909 --> 00:19:38,149
published

00:19:45,790 --> 00:19:51,080
so we're kind of going down into the

00:19:49,120 --> 00:19:52,640
specifics around particularly build

00:19:51,080 --> 00:19:55,250
profiles and yeah I thought it was

00:19:52,640 --> 00:19:57,440
actually a general rule feel free that's

00:19:55,250 --> 00:19:59,150
so one one comment I kind of wanted to

00:19:57,440 --> 00:20:02,660
make on the general overall thing is

00:19:59,150 --> 00:20:06,430
that I my experience you know my

00:20:02,660 --> 00:20:08,750
experience having done large DeLeon base

00:20:06,430 --> 00:20:10,850
distribution for structure at Stanford

00:20:08,750 --> 00:20:12,920
was that there are gonna be things that

00:20:10,850 --> 00:20:16,700
you're gonna want to customize or tweak

00:20:12,920 --> 00:20:18,890
or fiddle with that are not in Debian

00:20:16,700 --> 00:20:20,630
that are not in Debian proper whenever

00:20:18,890 --> 00:20:22,430
you have a large infrastructure and I

00:20:20,630 --> 00:20:24,110
don't think that Debian's infrastructure

00:20:22,430 --> 00:20:26,240
itself is any different than in the

00:20:24,110 --> 00:20:27,740
other enterprise environment running

00:20:26,240 --> 00:20:29,450
Debian in that there will be things that

00:20:27,740 --> 00:20:31,670
Debian to infrastructure itself will

00:20:29,450 --> 00:20:35,330
want to tweak so apart from the problem

00:20:31,670 --> 00:20:37,430
of the code not being tested I there's a

00:20:35,330 --> 00:20:40,640
trick we use at Stanford where we would

00:20:37,430 --> 00:20:44,120
have a private apt archive not only just

00:20:40,640 --> 00:20:46,730
private to us but where each role of

00:20:44,120 --> 00:20:49,040
service had its own specialized

00:20:46,730 --> 00:20:51,110
distribution inside that apt archive and

00:20:49,040 --> 00:20:54,020
you can upload packages targeted at

00:20:51,110 --> 00:20:56,120
stable - LDAP and only the LDAP servers

00:20:54,020 --> 00:20:58,040
would see those packages which get you

00:20:56,120 --> 00:21:00,950
it gives you a little bit of flexibility

00:20:58,040 --> 00:21:02,450
to expose packages with custom tweaks to

00:21:00,950 --> 00:21:04,520
only a particular part of your

00:21:02,450 --> 00:21:05,900
infrastructure without risking pulling

00:21:04,520 --> 00:21:07,550
them into other places that were they

00:21:05,900 --> 00:21:09,950
may not be appropriate and I don't know

00:21:07,550 --> 00:21:11,240
talk and probably comment on what you

00:21:09,950 --> 00:21:12,920
kind of mechanisms you have for doing

00:21:11,240 --> 00:21:15,320
those kinds of overrides already but we

00:21:12,920 --> 00:21:17,600
found that mechanism extremely useful at

00:21:15,320 --> 00:21:19,070
Stanford in unblocking little problems

00:21:17,600 --> 00:21:21,080
like this where you need to put a custom

00:21:19,070 --> 00:21:22,730
hack on a particular set of machines you

00:21:21,080 --> 00:21:24,530
still wanted the whole packaging

00:21:22,730 --> 00:21:25,700
infrastructure around that with upgrades

00:21:24,530 --> 00:21:28,870
and everything else but you didn't want

00:21:25,700 --> 00:21:28,870
to expose it to all the other systems

00:21:30,460 --> 00:21:36,040
he said canonical does exactly the same

00:21:32,780 --> 00:21:39,089
thing okay

00:21:36,040 --> 00:21:39,089
[Music]

00:21:39,340 --> 00:21:46,210
yeah and another another case for the

00:21:42,129 --> 00:21:47,710
general problem is cloud images I'm at

00:21:46,210 --> 00:21:49,629
Google right now but it also applies to

00:21:47,710 --> 00:21:51,970
Amazon and every other cloud out there

00:21:49,629 --> 00:21:54,210
as well as private clouds like OpenStack

00:21:51,970 --> 00:21:56,409
it's not just a public clouds where

00:21:54,210 --> 00:22:00,159
everything is changing at a faster pace

00:21:56,409 --> 00:22:02,409
than the two-year cycle and maybe you

00:22:00,159 --> 00:22:06,450
want to integrate with the the host

00:22:02,409 --> 00:22:11,009
environment get some bit of metadata or

00:22:06,450 --> 00:22:11,009
xsm API and

00:22:11,789 --> 00:22:17,499
if we put a version of a tool into

00:22:15,850 --> 00:22:18,669
Debian like assume they're licensing

00:22:17,499 --> 00:22:20,590
issues if we put a version of the tool

00:22:18,669 --> 00:22:21,789
that did that beam before freeze then

00:22:20,590 --> 00:22:23,440
it's already halfway through its

00:22:21,789 --> 00:22:25,600
lifetime meta you know as of the release

00:22:23,440 --> 00:22:27,220
and then you know at some point we have

00:22:25,600 --> 00:22:29,889
to convince people to pull things in

00:22:27,220 --> 00:22:33,220
from back ports to you know keep things

00:22:29,889 --> 00:22:37,119
up to date so and similarly some of the

00:22:33,220 --> 00:22:39,580
settings that are great defaults in a

00:22:37,119 --> 00:22:41,440
local workstation environment you know

00:22:39,580 --> 00:22:44,019
may not be suitable as it defaults for

00:22:41,440 --> 00:22:45,850
the cloud so there's a lot of settings

00:22:44,019 --> 00:22:52,659
and features that need to be added

00:22:45,850 --> 00:22:54,309
sometimes so it seems like a again we're

00:22:52,659 --> 00:22:56,409
focused very much on Debian's

00:22:54,309 --> 00:22:58,509
infrastructure here as one possibility

00:22:56,409 --> 00:23:00,519
for things that block us from making

00:22:58,509 --> 00:23:03,580
changes in less than two years but

00:23:00,519 --> 00:23:05,710
there's a related problem also about apt

00:23:03,580 --> 00:23:08,230
and D package and similar where there's

00:23:05,710 --> 00:23:11,139
a certain class of in archive changes

00:23:08,230 --> 00:23:13,690
that we can't make for a couple of years

00:23:11,139 --> 00:23:15,549
because first that D package and apt in

00:23:13,690 --> 00:23:18,220
stable have to understand them so that

00:23:15,549 --> 00:23:19,990
you can upgrade I'm wondering if solving

00:23:18,220 --> 00:23:22,690
both problems we might want to say well

00:23:19,990 --> 00:23:24,429
our packaging infrastructure as awesome

00:23:22,690 --> 00:23:27,220
as it is that it can upgrade itself

00:23:24,429 --> 00:23:29,139
maybe we should pull the packaging

00:23:27,220 --> 00:23:30,999
infrastructure out make it a little bit

00:23:29,139 --> 00:23:34,210
special and say hey it can upgrade

00:23:30,999 --> 00:23:35,860
itself in a way that it does so first

00:23:34,210 --> 00:23:38,289
and then parses the rest of the

00:23:35,860 --> 00:23:40,450
packaging method metadata for unstable

00:23:38,289 --> 00:23:43,360
or next stable then we could upgrade

00:23:40,450 --> 00:23:46,269
whenever we feel like it certainly as

00:23:43,360 --> 00:23:48,240
you say I think if sometimes you want to

00:23:46,269 --> 00:23:51,369
be able to upgrade deep package an apt

00:23:48,240 --> 00:23:52,450
first and we've basically done that by

00:23:51,369 --> 00:23:53,230
telling people to do in the readme

00:23:52,450 --> 00:23:54,640
before I think

00:23:53,230 --> 00:23:57,520
they know if they have mechanism

00:23:54,640 --> 00:23:59,650
obviously canonical does so I mean there

00:23:57,520 --> 00:24:01,150
used to be a I forget was called that

00:23:59,650 --> 00:24:03,820
year it was years ago I was like potato

00:24:01,150 --> 00:24:04,929
era that we had a special archive you

00:24:03,820 --> 00:24:06,340
were supposed to upgrade the tool chain

00:24:04,929 --> 00:24:12,460
from before upgrading the rest of the

00:24:06,340 --> 00:24:14,169
system lost the thought so just in

00:24:12,460 --> 00:24:15,400
general with with this kind of

00:24:14,169 --> 00:24:17,980
infrastructure problem we're talking

00:24:15,400 --> 00:24:19,630
about here you know this was actually in

00:24:17,980 --> 00:24:21,100
fact very narrowly prescribed where the

00:24:19,630 --> 00:24:23,169
only compatibility issues there would be

00:24:21,100 --> 00:24:24,549
between stable and unstable would only

00:24:23,169 --> 00:24:26,200
be in parsing of build dependencies

00:24:24,549 --> 00:24:29,440
which the average system doesn't need to

00:24:26,200 --> 00:24:31,150
do at run time and you could simply say

00:24:29,440 --> 00:24:33,280
a likely to be fairly homeless for that

00:24:31,150 --> 00:24:34,840
reason right and and sure that would be

00:24:33,280 --> 00:24:35,950
compatibility issues and people might be

00:24:34,840 --> 00:24:37,780
trying to build stuff but then you could

00:24:35,950 --> 00:24:39,390
just tell them ah here's the the stable

00:24:37,780 --> 00:24:41,799
release update the stable updates

00:24:39,390 --> 00:24:43,299
package that you just pull in and you

00:24:41,799 --> 00:24:44,980
could do that but even that we've found

00:24:43,299 --> 00:24:48,250
it has been difficult to do for a

00:24:44,980 --> 00:24:56,950
variety of reasons I'll cede the floor

00:24:48,250 --> 00:25:02,890
to Colin oh just going back to to Josh's

00:24:56,950 --> 00:25:05,230
point the for for a succession of Debian

00:25:02,890 --> 00:25:08,429
updates of various kinds we've had

00:25:05,230 --> 00:25:11,500
release notes that had a procedural

00:25:08,429 --> 00:25:14,140
system for performing the upgrades in

00:25:11,500 --> 00:25:17,169
various cases and that's obviously been

00:25:14,140 --> 00:25:19,780
as varied as the types of changes

00:25:17,169 --> 00:25:22,929
involved scaling up to anything like the

00:25:19,780 --> 00:25:28,000
Lib C transition of your or a dollar

00:25:22,929 --> 00:25:29,799
itself and when we were when we were

00:25:28,000 --> 00:25:33,010
thinking about this for venture upgrades

00:25:29,799 --> 00:25:34,900
we sort of had the the idea of

00:25:33,010 --> 00:25:36,730
executable release notes I don't know if

00:25:34,900 --> 00:25:38,679
if Michaels in the audience but this

00:25:36,730 --> 00:25:41,650
turned into the the release upgrader

00:25:38,679 --> 00:25:43,780
that we they were use inability and the

00:25:41,650 --> 00:25:46,140
the idea of that is that you have a blob

00:25:43,780 --> 00:25:49,750
that the upgrader

00:25:46,140 --> 00:25:53,290
fetches from the archive that knows how

00:25:49,750 --> 00:25:56,799
to upgrade to our particular targets and

00:25:53,290 --> 00:25:59,860
that's procedure may involve going and

00:25:56,799 --> 00:26:02,169
fetching a different set of packaging

00:25:59,860 --> 00:26:05,820
tools from somewhere else but rather

00:26:02,169 --> 00:26:07,410
than having to ignore bits of metadata

00:26:05,820 --> 00:26:12,180
you have all of this happened before you

00:26:07,410 --> 00:26:15,270
even look at the the next set of index

00:26:12,180 --> 00:26:18,890
files at all and you can you have the

00:26:15,270 --> 00:26:21,810
opportunity to to install whatever

00:26:18,890 --> 00:26:23,490
preparatory tools you like and I would

00:26:21,810 --> 00:26:25,320
love to see something like that in in

00:26:23,490 --> 00:26:29,310
Debian as well there's a lot of work to

00:26:25,320 --> 00:26:31,260
mminton so in particular if we have

00:26:29,310 --> 00:26:32,820
something like executable release notes

00:26:31,260 --> 00:26:36,120
there's no good reason that they need to

00:26:32,820 --> 00:26:39,140
be limited to a stable release only we

00:26:36,120 --> 00:26:42,000
should have incremental steps much like

00:26:39,140 --> 00:26:44,550
database incremental upgrades or similar

00:26:42,000 --> 00:26:46,830
where you say to do this upgrade you

00:26:44,550 --> 00:26:48,450
need to apply this thing outside of the

00:26:46,830 --> 00:26:51,990
packaging system and outside of any

00:26:48,450 --> 00:26:53,460
particular package and just run it and

00:26:51,990 --> 00:26:55,590
then you can proceed to read the

00:26:53,460 --> 00:26:58,950
packages file but apt would need to

00:26:55,590 --> 00:27:01,920
proceed to do that before it can go read

00:26:58,950 --> 00:27:04,440
packages GZ or similar so that if it

00:27:01,920 --> 00:27:06,480
needs to upgrade its parser to handle a

00:27:04,440 --> 00:27:08,460
new version it can and we could

00:27:06,480 --> 00:27:11,040
incrementally apply you know upgrading

00:27:08,460 --> 00:27:13,410
from stable to stable might involve 27

00:27:11,040 --> 00:27:15,420
individual executable scripts and

00:27:13,410 --> 00:27:17,280
upgrades but that would mean for example

00:27:15,420 --> 00:27:19,230
we would never have a problem again like

00:27:17,280 --> 00:27:26,670
how do you upgrade from user dot to user

00:27:19,230 --> 00:27:29,210
sharedoc without a five-year plan let's

00:27:26,670 --> 00:27:29,210
definitely work

00:27:32,070 --> 00:27:37,380
I guess I'd like to bring the discussion

00:27:34,620 --> 00:27:40,560
back to the earlier point about staging

00:27:37,380 --> 00:27:42,000
of infrastructure because you know

00:27:40,560 --> 00:27:43,800
regardless of what we might do with

00:27:42,000 --> 00:27:45,870
upgrader scripts we still in some way

00:27:43,800 --> 00:27:50,340
have to solve that problem of how we get

00:27:45,870 --> 00:27:51,360
these changes in and you know obviously

00:27:50,340 --> 00:27:52,910
the right answer is that we should have

00:27:51,360 --> 00:27:55,230
a staging server but I would like to ask

00:27:52,910 --> 00:27:56,820
you know in general I guess I would view

00:27:55,230 --> 00:27:59,850
that as whoever is running the

00:27:56,820 --> 00:28:01,650
production service should kind of have a

00:27:59,850 --> 00:28:04,920
staging service where they can stage

00:28:01,650 --> 00:28:06,570
this stuff and it does does does DSA

00:28:04,920 --> 00:28:07,710
does FTP master today I have a way to do

00:28:06,570 --> 00:28:10,290
that it should it really be the the

00:28:07,710 --> 00:28:13,500
responsibility of every individual who

00:28:10,290 --> 00:28:14,670
wants to hatch it to provide the staging

00:28:13,500 --> 00:28:16,110
infrastructure now obviously you should

00:28:14,670 --> 00:28:17,430
test your patches before submitting them

00:28:16,110 --> 00:28:18,870
but shouldn't there be a way to test

00:28:17,430 --> 00:28:20,760
those in an integration environment

00:28:18,870 --> 00:28:22,260
before being pushed into production

00:28:20,760 --> 00:28:23,910
anyway and don't shouldn't that be

00:28:22,260 --> 00:28:26,460
something that's that's handled

00:28:23,910 --> 00:28:28,350
centrally I guess there's two things as

00:28:26,460 --> 00:28:29,730
you say we could probably just better

00:28:28,350 --> 00:28:31,950
document the process of setting

00:28:29,730 --> 00:28:33,270
something up yourself so you know Tala

00:28:31,950 --> 00:28:35,370
says it's not actually that hard he's

00:28:33,270 --> 00:28:37,650
probably right but you know it seems

00:28:35,370 --> 00:28:39,120
like a scary idea and in fact if it

00:28:37,650 --> 00:28:41,550
turns out it's not that difficult just

00:28:39,120 --> 00:28:42,600
telling people how to do that maybe it

00:28:41,550 --> 00:28:45,540
already is you know there's a page

00:28:42,600 --> 00:28:47,100
somewhere that would be well we have

00:28:45,540 --> 00:28:48,750
been directed that would help a lot if

00:28:47,100 --> 00:28:51,270
you if that was in fact straightforward

00:28:48,750 --> 00:28:53,820
we've been secretary maybe we should run

00:28:51,270 --> 00:28:56,850
something ourselves anyway and then it's

00:28:53,820 --> 00:28:58,290
easy to try you do get the car of

00:28:56,850 --> 00:28:59,940
experimental problem that you've got 16

00:28:58,290 --> 00:29:02,190
different experimental things in it so

00:28:59,940 --> 00:29:03,570
it might be a bit broken which is

00:29:02,190 --> 00:29:04,920
exactly why you wanted an integration

00:29:03,570 --> 00:29:10,140
branch before you push it out to

00:29:04,920 --> 00:29:14,970
production okay is that what you mean by

00:29:10,140 --> 00:29:19,220
a staging branch right well we're using

00:29:14,970 --> 00:29:21,450
a staging implementation the because

00:29:19,220 --> 00:29:24,210
we're putting a software from

00:29:21,450 --> 00:29:25,650
development onto staging so staging is

00:29:24,210 --> 00:29:26,910
running the tip of all the different

00:29:25,650 --> 00:29:30,030
projects that it's actually managed in

00:29:26,910 --> 00:29:31,350
to run and then we wash that for a week

00:29:30,030 --> 00:29:34,110
before would actually go through to a

00:29:31,350 --> 00:29:38,040
production release but the problem we're

00:29:34,110 --> 00:29:40,500
getting with that is yes it's fine for

00:29:38,040 --> 00:29:43,460
the developers who are interested in

00:29:40,500 --> 00:29:46,700
these kinds of problems through submit

00:29:43,460 --> 00:29:49,670
data to the staging instance but that

00:29:46,700 --> 00:29:51,740
isn't real data it isn't actually what's

00:29:49,670 --> 00:29:54,080
going through the production instance

00:29:51,740 --> 00:29:57,710
and you end up with corner cases you end

00:29:54,080 --> 00:29:59,900
up with failures in your aunt of a false

00:29:57,710 --> 00:30:03,200
assurance and therefore bugs in

00:29:59,900 --> 00:30:05,630
production that simply because the data

00:30:03,200 --> 00:30:07,550
you put into the staging instance isn't

00:30:05,630 --> 00:30:09,320
a mirror of the data that's going

00:30:07,550 --> 00:30:11,090
through the production instance so you

00:30:09,320 --> 00:30:13,970
would need to actually then make sure

00:30:11,090 --> 00:30:15,590
that in Devon's case it probably might

00:30:13,970 --> 00:30:16,580
actually be easy to do that because then

00:30:15,590 --> 00:30:19,280
you could just mirror

00:30:16,580 --> 00:30:21,080
incoming I make encouragement but it's

00:30:19,280 --> 00:30:22,550
just making sure that you think about

00:30:21,080 --> 00:30:25,010
that as well as if you gotta have a

00:30:22,550 --> 00:30:26,480
staging instance it's got the data going

00:30:25,010 --> 00:30:27,500
through it has to be the same as the

00:30:26,480 --> 00:30:29,330
data this goes through the production

00:30:27,500 --> 00:30:33,440
instance otherwise you can't invalid

00:30:29,330 --> 00:30:35,480
test okay although in this particular

00:30:33,440 --> 00:30:36,980
case you basically want to test some

00:30:35,480 --> 00:30:42,470
other things but I guess you could test

00:30:36,980 --> 00:30:44,840
those as well so yeah yeah as you said

00:30:42,470 --> 00:30:48,670
it's pretty easy to test at in Debian's

00:30:44,840 --> 00:30:51,350
case you would mirror incoming or have

00:30:48,670 --> 00:30:54,800
FTP upload or actually upload to two

00:30:51,350 --> 00:30:58,010
places John says Steve's question about

00:30:54,800 --> 00:30:59,810
staging infrastructure we generally

00:30:58,010 --> 00:31:03,470
don't provide that unless people ask for

00:30:59,810 --> 00:31:08,390
it we do have quite a bit of free

00:31:03,470 --> 00:31:11,720
capacity so a full extra copy or FTP

00:31:08,390 --> 00:31:15,070
master is probably it's doable it would

00:31:11,720 --> 00:31:18,020
kind of like it would stretch a bit but

00:31:15,070 --> 00:31:20,600
doing kind of a reduced scope FTP master

00:31:18,020 --> 00:31:22,040
is absolutely not a problem I guess

00:31:20,600 --> 00:31:24,140
that's the question is how much resource

00:31:22,040 --> 00:31:28,370
does we'll need to set up something

00:31:24,140 --> 00:31:30,530
fairly realistic so the big problem with

00:31:28,370 --> 00:31:33,830
FTP master is really that the size of

00:31:30,530 --> 00:31:35,930
the archive and in terms of I'm not

00:31:33,830 --> 00:31:37,820
entirely sure how that big is nowadays

00:31:35,930 --> 00:31:41,420
but I'm guessing it's growing on a

00:31:37,820 --> 00:31:43,790
terabyte and so that's expensive in

00:31:41,420 --> 00:31:46,040
terms of actual disk space but nothing

00:31:43,790 --> 00:31:47,630
else so you know necessarily needs to do

00:31:46,040 --> 00:31:51,730
all the architectures a couple might

00:31:47,630 --> 00:31:51,730
suffice for take purposes yeah exactly

00:31:54,100 --> 00:31:58,580
so you've given me an opportunity to be

00:31:56,720 --> 00:31:59,990
on the drum that I was I actually

00:31:58,580 --> 00:32:02,600
started beating on in New York which is

00:31:59,990 --> 00:32:05,270
that all the questions about how we do

00:32:02,600 --> 00:32:08,240
this and Debbie on the side those people

00:32:05,270 --> 00:32:11,390
out there who are running Debian and

00:32:08,240 --> 00:32:13,460
want to include some local packages all

00:32:11,390 --> 00:32:15,170
run away from DAC screaming because no

00:32:13,460 --> 00:32:17,180
one has any idea how to set it up or how

00:32:15,170 --> 00:32:19,640
to run it and if someone could document

00:32:17,180 --> 00:32:21,650
how that stuff works you would solve

00:32:19,640 --> 00:32:23,810
problems for so many people outside of

00:32:21,650 --> 00:32:26,390
Debian I mean really you would be a hero

00:32:23,810 --> 00:32:28,010
to just explain how do you start from

00:32:26,390 --> 00:32:29,690
scratch and set up DAC in a building

00:32:28,010 --> 00:32:31,760
network and there would be numerous

00:32:29,690 --> 00:32:43,580
enterprises so that would love to have

00:32:31,760 --> 00:32:45,110
that how many people know that so we

00:32:43,580 --> 00:32:46,610
need to stop them being quite so busy

00:32:45,110 --> 00:32:53,150
I mean volunteer to do their jobs for

00:32:46,610 --> 00:32:55,220
like I don't know a couple of weeks yes

00:32:53,150 --> 00:32:56,540
indeed I mean actually I so I discovered

00:32:55,220 --> 00:32:58,370
setting of build these that again that's

00:32:56,540 --> 00:33:01,070
quite fiddly and not very well

00:32:58,370 --> 00:33:02,480
documented so I wrote a page which is

00:33:01,070 --> 00:33:03,860
slightly half-assed of course now we've

00:33:02,480 --> 00:33:05,120
got the old page in the new page which

00:33:03,860 --> 00:33:06,650
don't quite agree with each other and I

00:33:05,120 --> 00:33:07,610
was talking about doing for Debian ports

00:33:06,650 --> 00:33:09,650
and they were talking about doing for

00:33:07,610 --> 00:33:11,090
Debian so vetting and now of course she

00:33:09,650 --> 00:33:14,750
really want to merge those into the

00:33:11,090 --> 00:33:16,460
definitive version but yes so I did a

00:33:14,750 --> 00:33:17,900
bit of that I guess if I could be

00:33:16,460 --> 00:33:19,820
persuaded to actually try and set up a

00:33:17,900 --> 00:33:21,320
thing I'd write down what I did which

00:33:19,820 --> 00:33:24,260
will be useful but I still wouldn't

00:33:21,320 --> 00:33:26,420
necessarily understand it so a

00:33:24,260 --> 00:33:28,870
smattering of random points here to your

00:33:26,420 --> 00:33:31,340
point about staging and the size of it

00:33:28,870 --> 00:33:33,140
in theory you could throw away all of

00:33:31,340 --> 00:33:34,550
the packages in the archive as you were

00:33:33,140 --> 00:33:35,330
setting it up because the only things

00:33:34,550 --> 00:33:36,500
you're actually testing are the

00:33:35,330 --> 00:33:38,240
infrastructure and you care about the

00:33:36,500 --> 00:33:40,700
packages files being valid and so forth

00:33:38,240 --> 00:33:42,680
and the actual contents of the archive

00:33:40,700 --> 00:33:44,120
you could process ones and get rid of

00:33:42,680 --> 00:33:45,410
and that would be perfectly fine for a

00:33:44,120 --> 00:33:48,440
quick staging thing if space was a

00:33:45,410 --> 00:33:50,200
concern second we do have one member of

00:33:48,440 --> 00:33:53,240
the ftp master team here at DEP conf

00:33:50,200 --> 00:33:54,920
this week Paul Toby Monta so we should

00:33:53,240 --> 00:33:56,540
find him and talk to him about whether

00:33:54,920 --> 00:34:02,240
he wants us well well they're hiding

00:33:56,540 --> 00:34:04,340
they want a staging set up and again to

00:34:02,240 --> 00:34:06,130
the point about ease or difficulty of

00:34:04,340 --> 00:34:08,240
setting up DAC

00:34:06,130 --> 00:34:11,060
there seem to be a variety of opinions

00:34:08,240 --> 00:34:13,100
here I think people who have done DAC

00:34:11,060 --> 00:34:14,960
set up need to understand that a readme

00:34:13,100 --> 00:34:17,330
set up that tells you how to set up DAC

00:34:14,960 --> 00:34:19,520
is not the whole picture and it's not

00:34:17,330 --> 00:34:20,659
the quality of documentation that we're

00:34:19,520 --> 00:34:23,290
usually talking about when we're

00:34:20,659 --> 00:34:25,460
expecting random people to be able to

00:34:23,290 --> 00:34:26,750
bootstrap themselves into a thing you

00:34:25,460 --> 00:34:28,820
know there's unless there's a linear

00:34:26,750 --> 00:34:32,360
series of these are all the things you

00:34:28,820 --> 00:34:33,800
have to set up it and as far as I'm

00:34:32,360 --> 00:34:35,540
aware we're not using Dec out of

00:34:33,800 --> 00:34:37,010
packages for the archive and so even

00:34:35,540 --> 00:34:38,750
something as basic as where do you find

00:34:37,010 --> 00:34:41,060
the right software you're supposed to be

00:34:38,750 --> 00:34:42,620
running is an issue and these are all

00:34:41,060 --> 00:34:44,540
things that if you expect people to be

00:34:42,620 --> 00:34:46,310
able to get to get their minds and get a

00:34:44,540 --> 00:34:48,320
handle on this stuff there needs to be a

00:34:46,310 --> 00:34:50,899
clear set of steps that anybody can

00:34:48,320 --> 00:34:52,399
follow from you start it I will be that

00:34:50,899 --> 00:34:54,500
most of the off putting this is just

00:34:52,399 --> 00:34:56,170
that it's not you know it's mysterious

00:34:54,500 --> 00:35:00,320
rather than that is actually difficult

00:34:56,170 --> 00:35:03,680
well the I've so I've operated DAC I

00:35:00,320 --> 00:35:05,860
have also independently several years

00:35:03,680 --> 00:35:09,950
letter tried to set it up from scratch

00:35:05,860 --> 00:35:11,900
so I mean I in theory knew what to do I

00:35:09,950 --> 00:35:14,450
know the conceptual steps involves I

00:35:11,900 --> 00:35:16,790
still couldn't dos it's not that it's

00:35:14,450 --> 00:35:19,910
it's not merely a problem of lack of

00:35:16,790 --> 00:35:22,100
documentation at least as of mid last

00:35:19,910 --> 00:35:23,810
year as far as I can tell it was not

00:35:22,100 --> 00:35:26,960
possible to set up the database from

00:35:23,810 --> 00:35:28,790
scratch given the even we get branch and

00:35:26,960 --> 00:35:30,590
the database schema did not exist

00:35:28,790 --> 00:35:35,510
outside production and so I think that

00:35:30,590 --> 00:35:37,160
always made them packaging well what me

00:35:35,510 --> 00:35:39,050
but what I was what I was going to carry

00:35:37,160 --> 00:35:41,870
onto is that this is exactly the kind of

00:35:39,050 --> 00:35:45,590
problem that you solve by having a

00:35:41,870 --> 00:35:49,820
staging server which is not operated by

00:35:45,590 --> 00:35:53,620
the developers you you must have your

00:35:49,820 --> 00:35:55,910
staging server be operated automatically

00:35:53,620 --> 00:35:57,530
in such a way that in order to get

00:35:55,910 --> 00:36:01,700
changes on to production you have to

00:35:57,530 --> 00:36:05,000
have the your schema changes in gets

00:36:01,700 --> 00:36:07,280
properly otherwise they can't happen and

00:36:05,000 --> 00:36:08,780
otherwise it's way too easy for this

00:36:07,280 --> 00:36:12,170
kind of thing to creep onto production

00:36:08,780 --> 00:36:13,880
just because of perfectly normal people

00:36:12,170 --> 00:36:15,680
doing what I need like the developer you

00:36:13,880 --> 00:36:19,270
mean the deck developers yes so somebody

00:36:15,680 --> 00:36:19,270
else needs to thingy and

00:36:23,070 --> 00:36:30,520
so I guess I'm a little bit naive here

00:36:25,510 --> 00:36:32,230
but I was expecting that most of our

00:36:30,520 --> 00:36:34,359
infrastructure can be set up simply by

00:36:32,230 --> 00:36:36,310
running puppet on a new blank server

00:36:34,359 --> 00:36:38,260
somehow and it's a magic happens and

00:36:36,310 --> 00:36:41,560
things frog again so that if our hard

00:36:38,260 --> 00:36:44,080
drives break or asteroid crashes the

00:36:41,560 --> 00:36:46,750
building that runs it server we can get

00:36:44,080 --> 00:36:48,220
up running again and on day or so so

00:36:46,750 --> 00:36:51,220
maybe that's not true but if it were

00:36:48,220 --> 00:36:52,599
true that might solve the problem for

00:36:51,220 --> 00:36:56,050
people who want to contribute they can

00:36:52,599 --> 00:36:58,380
just run the same deployment scripts and

00:36:56,050 --> 00:37:01,270
maybe modify them to change host names

00:36:58,380 --> 00:37:04,480
and get this thing running the same way

00:37:01,270 --> 00:37:05,590
it's running out on our systems and I've

00:37:04,480 --> 00:37:07,180
had a quite a few instances very

00:37:05,590 --> 00:37:10,330
abundant to change the little thing in

00:37:07,180 --> 00:37:13,390
some infrastructure in this case Deb box

00:37:10,330 --> 00:37:16,000
but I couldn't test it and the amount of

00:37:13,390 --> 00:37:18,040
effort it takes me to find out how to

00:37:16,000 --> 00:37:21,160
set up an instance and all the tested

00:37:18,040 --> 00:37:25,810
it's just what's the benefit from this

00:37:21,160 --> 00:37:29,650
little but still useful change and if if

00:37:25,810 --> 00:37:32,050
all our infrastructure were reproduced

00:37:29,650 --> 00:37:34,119
employable reproducible you know change

00:37:32,050 --> 00:37:36,339
fruit or in a docker instance these days

00:37:34,119 --> 00:37:39,339
I guess within one script or when one

00:37:36,339 --> 00:37:40,869
command I'm sure we get a lot of nice

00:37:39,339 --> 00:37:44,190
little patches for various knowing

00:37:40,869 --> 00:37:44,190
things I think you're quite right

00:37:49,260 --> 00:37:54,119
I won't we'll keep to a little bit

00:37:51,869 --> 00:37:56,520
before about bill disease are not easy

00:37:54,119 --> 00:37:59,100
to set up I think one of the problem is

00:37:56,520 --> 00:38:00,930
also related to property in Debian it

00:37:59,100 --> 00:38:03,210
regrets that everything is integrated

00:38:00,930 --> 00:38:04,530
into a pet you can set up a bill the

00:38:03,210 --> 00:38:07,050
money less than one hour now

00:38:04,530 --> 00:38:09,180
but at the same time a user wanted to

00:38:07,050 --> 00:38:12,170
set up a Billy doesn't have per pet

00:38:09,180 --> 00:38:12,170

YouTube URL: https://www.youtube.com/watch?v=c6IHBTxHsWM


