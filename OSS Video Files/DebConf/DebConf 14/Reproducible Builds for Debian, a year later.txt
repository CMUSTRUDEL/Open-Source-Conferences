Title: Reproducible Builds for Debian, a year later
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by JÃ©rÃ©my Bobbio

At: DebConf14
https://debconf14.debconf.org/
Room: Room 327
Scheduled start: 2014-08-26 14:30:00
Captions: 
	00:00:00,030 --> 00:00:07,620
in material after initial bill and use

00:00:03,720 --> 00:00:10,230
them to debug the software one other

00:00:07,620 --> 00:00:13,080
thing that that we want for Jillian is

00:00:10,230 --> 00:00:16,789
that actually we want to be sure that we

00:00:13,080 --> 00:00:21,650
can build packages from source that's

00:00:16,789 --> 00:00:26,400
mandatory and so if we if we say that

00:00:21,650 --> 00:00:28,140
packaging it need to be reproducible to

00:00:26,400 --> 00:00:30,380
have reproducible builds then we can

00:00:28,140 --> 00:00:34,880
make sure that actually that that is

00:00:30,380 --> 00:00:41,850
happening multi heart same has to be

00:00:34,880 --> 00:00:44,700
exactly the same packages across node a

00:00:41,850 --> 00:00:47,190
sorry they attack same packages if they

00:00:44,700 --> 00:00:50,340
contain files with the same name there

00:00:47,190 --> 00:00:54,600
has to be bitwise in vertical so also

00:00:50,340 --> 00:00:57,260
we're making a package build the system

00:00:54,600 --> 00:01:01,109
deterministic we help the multi arc

00:00:57,260 --> 00:01:04,140
crowd or vice versa

00:01:01,109 --> 00:01:06,960
there's also the idea that is he from

00:01:04,140 --> 00:01:08,880
one version to another of a software if

00:01:06,960 --> 00:01:11,670
the build system is deterministic maybe

00:01:08,880 --> 00:01:13,799
the dot dab will not have changed that

00:01:11,670 --> 00:01:18,210
much and so between one version to

00:01:13,799 --> 00:01:20,310
another then the it might be pretty

00:01:18,210 --> 00:01:22,229
similar and we might get smaller deltas

00:01:20,310 --> 00:01:26,000
and faster upgrades and you know less

00:01:22,229 --> 00:01:30,000
than with less T space another users of

00:01:26,000 --> 00:01:32,720
deterministic build will be the build

00:01:30,000 --> 00:01:36,630
profiles mechanism that it's getting in

00:01:32,720 --> 00:01:38,840
and so the built row file is an edges

00:01:36,630 --> 00:01:41,400
like it's it's helpful for bootstrapping

00:01:38,840 --> 00:01:44,340
new architectures that's that's one of

00:01:41,400 --> 00:01:47,180
the underlying reason and the idea we've

00:01:44,340 --> 00:01:52,049
built for file is that it's a profile a

00:01:47,180 --> 00:01:55,020
do couple of spec attract some packages

00:01:52,049 --> 00:01:57,000
and if a build profile be build a subset

00:01:55,020 --> 00:02:01,259
of these packages the subsets need to be

00:01:57,000 --> 00:02:05,399
also identical in feature to the other

00:02:01,259 --> 00:02:07,320
build profile and we reproduce we'll

00:02:05,399 --> 00:02:10,080
build then we can make sure that they

00:02:07,320 --> 00:02:13,040
actually feature wide identical because

00:02:10,080 --> 00:02:16,020
there would be bitwise and

00:02:13,040 --> 00:02:18,410
and maybe we can find other reasons I

00:02:16,020 --> 00:02:20,880
don't know there's many interesting

00:02:18,410 --> 00:02:25,880
aspects so how do you start for me so

00:02:20,880 --> 00:02:30,210
I'm active in the Tor project and during

00:02:25,880 --> 00:02:33,630
past year spring my Perry and other

00:02:30,210 --> 00:02:35,400
people walking on the table rather work

00:02:33,630 --> 00:02:40,230
on meeting on making the tor browser

00:02:35,400 --> 00:02:42,980
build process deterministic for the one

00:02:40,230 --> 00:02:47,730
of the very reason I explained before

00:02:42,980 --> 00:02:50,970
that process was partly inspired also by

00:02:47,730 --> 00:02:53,100
the Bitcoin crowd because they are

00:02:50,970 --> 00:02:55,080
shipping binary that handle valuable

00:02:53,100 --> 00:02:56,910
assets of people and so they wanted to

00:02:55,080 --> 00:03:00,780
be sure like when they had a handout of

00:02:56,910 --> 00:03:02,430
binary to someone that that someone says

00:03:00,780 --> 00:03:05,600
yeah you're not stealing my money or

00:03:02,430 --> 00:03:10,770
whatever this cryptocurrency thing is

00:03:05,600 --> 00:03:12,450
and so but it's not so we have that for

00:03:10,770 --> 00:03:16,140
the tor browser and it's been very

00:03:12,450 --> 00:03:18,600
interesting in how it changes some of

00:03:16,140 --> 00:03:20,730
the development process processes so for

00:03:18,600 --> 00:03:24,030
example wants someone in the tune tag a

00:03:20,730 --> 00:03:27,090
build then other people in the team will

00:03:24,030 --> 00:03:30,720
also start running the bill but the only

00:03:27,090 --> 00:03:33,270
one person will actually upload the

00:03:30,720 --> 00:03:35,940
gigabyte of multiple version of package

00:03:33,270 --> 00:03:39,180
to the server everybody else will only

00:03:35,940 --> 00:03:42,060
upload a single sign signature of the

00:03:39,180 --> 00:03:44,160
Shay some file of the checksums and the

00:03:42,060 --> 00:03:47,310
brightest and and so you can actually

00:03:44,160 --> 00:03:49,590
have one system with a very you know

00:03:47,310 --> 00:03:51,500
that you do not trust that much but with

00:03:49,590 --> 00:03:54,269
a very fast internet connection

00:03:51,500 --> 00:03:58,170
applauding that as you server somewhere

00:03:54,269 --> 00:04:00,209
and and then on your own laptop you use

00:03:58,170 --> 00:04:02,010
a build and you have a stack you're on a

00:04:00,209 --> 00:04:03,690
train whatever wants to build this

00:04:02,010 --> 00:04:06,060
finish you only have to compare the

00:04:03,690 --> 00:04:07,620
checksums and if the checks on match you

00:04:06,060 --> 00:04:10,320
know that it's okay

00:04:07,620 --> 00:04:13,620
and if multiple people do the same

00:04:10,320 --> 00:04:15,690
process and you have far more trust than

00:04:13,620 --> 00:04:18,780
that have been no compromise in the

00:04:15,690 --> 00:04:21,600
process because well we all got the same

00:04:18,780 --> 00:04:23,200
result and it's highly unlikely that

00:04:21,600 --> 00:04:28,860
every but everybody got

00:04:23,200 --> 00:04:32,050
five at once but this is not a new idea

00:04:28,860 --> 00:04:35,380
so someone wants after starting the

00:04:32,050 --> 00:04:38,860
process last year someone Mattson yukl

00:04:35,380 --> 00:04:41,620
wrote to me and pointing me at that

00:04:38,860 --> 00:04:44,560
email from 2007 so that's seven years

00:04:41,620 --> 00:04:45,790
ago and even develop saying yeah I think

00:04:44,560 --> 00:04:47,650
it would be really cool if you can

00:04:45,790 --> 00:04:50,380
policy required that packages probably

00:04:47,650 --> 00:04:52,000
rebuild didn't it all from source at the

00:04:50,380 --> 00:04:54,990
moment is it possible to independently

00:04:52,000 --> 00:04:58,870
verify the integrity of binary packages

00:04:54,990 --> 00:05:02,010
well that was seven years ago the

00:04:58,870 --> 00:05:04,660
reaction we're not super enthusiastic

00:05:02,010 --> 00:05:07,060
also probably because Martin was not

00:05:04,660 --> 00:05:10,270
part of the you know established again

00:05:07,060 --> 00:05:12,310
crowd but for example like Neal Williams

00:05:10,270 --> 00:05:17,470
who's in the room

00:05:12,310 --> 00:05:21,360
no said why I should have benefit well I

00:05:17,470 --> 00:05:24,910
hope you will see benefits and Manoj

00:05:21,360 --> 00:05:27,490
who's also not in the room what ya said

00:05:24,910 --> 00:05:29,440
well I think this this is technically

00:05:27,490 --> 00:05:33,070
infeasible but hey I'll be happy to be

00:05:29,440 --> 00:05:42,550
prolong so I would be let's prove him

00:05:33,070 --> 00:05:46,920
wrong so what happens is after the the

00:05:42,550 --> 00:05:50,500
example of the top rather I scheduled

00:05:46,920 --> 00:05:52,990
really last-minute buff during that

00:05:50,500 --> 00:05:54,460
construction in Switzerland and I was

00:05:52,990 --> 00:05:58,030
very surprised because there were like

00:05:54,460 --> 00:06:00,220
30 people showed up and we had an

00:05:58,030 --> 00:06:02,830
interesting hour-long discussion about

00:06:00,220 --> 00:06:05,890
45 minutes discussion which was short

00:06:02,830 --> 00:06:12,460
but yeah and that kicked off the wiki

00:06:05,890 --> 00:06:15,760
page reproducible builds and so well

00:06:12,460 --> 00:06:17,620
that the wiki page tries to gather many

00:06:15,760 --> 00:06:20,520
informations a long page if you want to

00:06:17,620 --> 00:06:23,470
help make it better please do but mainly

00:06:20,520 --> 00:06:25,270
how did you do with producible bill what

00:06:23,470 --> 00:06:27,580
are the states that are we need to do

00:06:25,270 --> 00:06:29,910
that so it's pretty simple actually

00:06:27,580 --> 00:06:33,010
one is you recall the build environment

00:06:29,910 --> 00:06:35,770
so you know what tools you used to build

00:06:33,010 --> 00:06:39,910
a specific package

00:06:35,770 --> 00:06:42,250
you and then when you want to you need a

00:06:39,910 --> 00:06:44,080
way to reproduce that build environment

00:06:42,250 --> 00:06:46,030
so when you want to put the build you

00:06:44,080 --> 00:06:47,949
start by setting up the same environment

00:06:46,030 --> 00:06:50,530
in the environment that was the initial

00:06:47,949 --> 00:06:54,009
environment and then you need to

00:06:50,530 --> 00:07:00,400
eliminate all the needed violations that

00:06:54,009 --> 00:07:02,680
are part of the build process and so

00:07:00,400 --> 00:07:06,819
recording is actually fairly simple for

00:07:02,680 --> 00:07:09,880
Debian it's you know we have packages we

00:07:06,819 --> 00:07:11,830
have they have versions so if we install

00:07:09,880 --> 00:07:13,659
the variant versions of the packages

00:07:11,830 --> 00:07:16,409
that were installed where we are likely

00:07:13,659 --> 00:07:18,370
to be in the same building

00:07:16,409 --> 00:07:20,440
reproducing the build environment is

00:07:18,370 --> 00:07:24,639
also fairly easy for Debian because we

00:07:20,440 --> 00:07:26,800
have snap shot and and snapshot saves

00:07:24,639 --> 00:07:28,690
every burn every version of every

00:07:26,800 --> 00:07:31,300
package that I've entered the archive

00:07:28,690 --> 00:07:33,120
and so you can actually take packages

00:07:31,300 --> 00:07:35,319
from there and you get a very

00:07:33,120 --> 00:07:38,500
environment that is very close to the

00:07:35,319 --> 00:07:43,270
initial moment then there is all these

00:07:38,500 --> 00:07:46,419
variations and that are captured by the

00:07:43,270 --> 00:07:47,919
build systems where maybe they're not in

00:07:46,419 --> 00:07:53,250
a dominant need to be captured for

00:07:47,919 --> 00:07:54,580
getting a final software so time stamps

00:07:53,250 --> 00:08:01,659
everywhere

00:07:54,580 --> 00:08:05,440
time stamps so like you know you create

00:08:01,659 --> 00:08:07,990
a file and then it's the time where of

00:08:05,440 --> 00:08:12,550
its creation is recorded that's what the

00:08:07,990 --> 00:08:20,680
BTG does for example so let me tell you

00:08:12,550 --> 00:08:26,319
I'm willing to lead collective time

00:08:20,680 --> 00:08:28,690
stamp fan and the numerous sessions or

00:08:26,319 --> 00:08:32,950
whatever like a support group if you

00:08:28,690 --> 00:08:35,700
want time stamps in a build process are

00:08:32,950 --> 00:08:38,800
not a useful information to capture I

00:08:35,700 --> 00:08:43,089
please trust me what is interesting is

00:08:38,800 --> 00:08:45,420
for example the you know what source you

00:08:43,089 --> 00:08:48,580
have used the environment that is used

00:08:45,420 --> 00:08:51,330
like that the

00:08:48,580 --> 00:08:55,450
times that maybe of the last give commit

00:08:51,330 --> 00:08:57,070
at the timestamp of the bill know if I

00:08:55,450 --> 00:09:00,820
take an old version and I build it now

00:08:57,070 --> 00:09:02,220
don't not doesn't know you know does no

00:09:00,820 --> 00:09:06,550
interest into capturing that information

00:09:02,220 --> 00:09:10,780
really maybe as a metadata but it's not

00:09:06,550 --> 00:09:13,480
not as far as a software support group I

00:09:10,780 --> 00:09:16,690
can I can do seconded the other piece of

00:09:13,480 --> 00:09:21,910
information that the dis captured is the

00:09:16,690 --> 00:09:23,830
old pass and that's really annoying it's

00:09:21,910 --> 00:09:25,510
it's you know where where you actually

00:09:23,830 --> 00:09:30,910
type the make come in gets into the

00:09:25,510 --> 00:09:34,780
final Bernie man file order might get

00:09:30,910 --> 00:09:37,210
captured if you can tighten it you know

00:09:34,780 --> 00:09:39,880
you do concur cats yes I'll start

00:09:37,210 --> 00:09:41,500
something and then depending on when

00:09:39,880 --> 00:09:44,820
they were Royden and file system you get

00:09:41,500 --> 00:09:53,650
different results in the final bill I

00:09:44,820 --> 00:09:55,240
don't know dude we can yeah coin it's

00:09:53,650 --> 00:09:59,040
worth noting on build paths that those

00:09:55,240 --> 00:09:59,040
are security hole location as well

00:09:59,940 --> 00:10:08,880
occasionally we find that people's paths

00:10:05,110 --> 00:10:08,880
and developers home directories

00:10:10,290 --> 00:10:13,570
occasionally we find that paths in

00:10:12,130 --> 00:10:15,970
developers home directories are

00:10:13,570 --> 00:10:18,730
hard-coded into packages and that the

00:10:15,970 --> 00:10:22,060
package package will care whether that's

00:10:18,730 --> 00:10:23,500
thing under slash home exists so that's

00:10:22,060 --> 00:10:28,090
worth nuking for other reasons

00:10:23,500 --> 00:10:31,710
yeah so for example you have a truss you

00:10:28,090 --> 00:10:31,710
want to add something okay

00:10:34,010 --> 00:10:38,250
one one comment on the timestamps the

00:10:36,839 --> 00:10:40,829
one place where I do know that that is

00:10:38,250 --> 00:10:42,899
used is it's used by gdb when you're

00:10:40,829 --> 00:10:44,220
actually debugging a binary so that it

00:10:42,899 --> 00:10:46,500
can tell you that the source file is

00:10:44,220 --> 00:10:48,720
newer than whatever went into the binary

00:10:46,500 --> 00:10:50,490
I suspect there's some easier way of

00:10:48,720 --> 00:10:52,769
storoe some better way of storing that

00:10:50,490 --> 00:10:55,110
timestamp then the build timestamp but

00:10:52,769 --> 00:10:56,639
it is used there I think I'm coming to

00:10:55,110 --> 00:11:00,180
the build second way I'm coming to the

00:10:56,639 --> 00:11:02,519
DeBolt symbol okay major headache and so

00:11:00,180 --> 00:11:05,910
local for example get Kenya again also

00:11:02,519 --> 00:11:08,459
captures for example the you know new

00:11:05,910 --> 00:11:10,550
sort command line infinity well-thought

00:11:08,459 --> 00:11:16,649
file differently depending on your local

00:11:10,550 --> 00:11:17,639
yeah for example Jesus to give you

00:11:16,649 --> 00:11:22,050
couple of every easy

00:11:17,639 --> 00:11:27,149
by default of start time Stan yay super

00:11:22,050 --> 00:11:31,199
useful information and yet zip jaw they

00:11:27,149 --> 00:11:33,690
all starts timestamp so and and 4gb I

00:11:31,199 --> 00:11:35,070
mean most of them will saw times 10 that

00:11:33,690 --> 00:11:37,980
is pretty useless because this is the

00:11:35,070 --> 00:11:39,750
time of the bill it is you just like you

00:11:37,980 --> 00:11:41,610
you've given you feel you've just

00:11:39,750 --> 00:11:44,819
created a new file with GCC and put him

00:11:41,610 --> 00:11:47,940
in an archive and that timestamp is not

00:11:44,819 --> 00:11:55,860
really interesting Java dot rights

00:11:47,940 --> 00:11:59,699
timestamp in the help file why so that's

00:11:55,860 --> 00:12:01,769
that's the major headache so worse so

00:11:59,699 --> 00:12:04,470
you have elf you know and you have the

00:12:01,769 --> 00:12:09,350
the dwarf which are develop debug

00:12:04,470 --> 00:12:13,519
symbols and so in in dwarf there are the

00:12:09,350 --> 00:12:18,240
the build path of the source code gets

00:12:13,519 --> 00:12:20,130
captured which actually is annoying

00:12:18,240 --> 00:12:22,670
because then it means that if you

00:12:20,130 --> 00:12:26,430
installed the dashdb g package endymion

00:12:22,670 --> 00:12:28,199
then this whole space is not right you

00:12:26,430 --> 00:12:29,399
can't you know you have to fit all of it

00:12:28,199 --> 00:12:34,139
I'm coming back to that later

00:12:29,399 --> 00:12:36,750
go for it so we currently do builds

00:12:34,139 --> 00:12:39,089
inside of fake routes perhaps we should

00:12:36,750 --> 00:12:40,620
start doing builds inside fake time or

00:12:39,089 --> 00:12:42,029
similar and like all these are turning

00:12:40,620 --> 00:12:44,329
yep I'm coming to that

00:12:42,029 --> 00:12:44,329
okay

00:12:45,369 --> 00:12:53,199
the folder we have ridger huge returns

00:12:48,589 --> 00:12:56,720
falling out of the file system so I mean

00:12:53,199 --> 00:13:00,919
yeah follow ball so that's that's why I

00:12:56,720 --> 00:13:03,769
totally like soft varies between French

00:13:00,919 --> 00:13:05,809
and the see like if you have an accented

00:13:03,769 --> 00:13:09,799
letter but there's always there are also

00:13:05,809 --> 00:13:11,359
other examples other information that

00:13:09,799 --> 00:13:14,209
might get captured the last name of the

00:13:11,359 --> 00:13:19,009
system super useful in the book builds

00:13:14,209 --> 00:13:21,319
binary told you you name output Wow for

00:13:19,009 --> 00:13:27,169
some cases by really I'm not sure the

00:13:21,319 --> 00:13:28,970
user name of the builder know so we

00:13:27,169 --> 00:13:32,480
could keep that's the way the top was a

00:13:28,970 --> 00:13:34,819
data that use a vm like that that's the

00:13:32,480 --> 00:13:37,730
kitchen thing the the bitcoin people's I

00:13:34,819 --> 00:13:40,329
use that they use a VM so and everybody

00:13:37,730 --> 00:13:43,040
who's building the thing gets the same

00:13:40,329 --> 00:13:44,449
virtual machine image and so they have

00:13:43,040 --> 00:13:46,040
the same tunnel they have the same user

00:13:44,449 --> 00:13:48,189
they have the same gold path because

00:13:46,040 --> 00:13:51,739
it's basically the same file they sure

00:13:48,189 --> 00:13:56,589
and for example they also use tools like

00:13:51,739 --> 00:14:00,139
liebe fake time which affects the time

00:13:56,589 --> 00:14:03,109
but so that's one way to do it

00:14:00,139 --> 00:14:07,129
the other way to do it is and I think is

00:14:03,109 --> 00:14:09,619
more correct for Jim Ian because it's

00:14:07,129 --> 00:14:11,989
not you know we do not craft our little

00:14:09,619 --> 00:14:15,679
solutions in in our corner

00:14:11,989 --> 00:14:17,269
but we also would be great if every free

00:14:15,679 --> 00:14:21,949
software distribution would be would

00:14:17,269 --> 00:14:24,470
have reproducible builds so we fix the

00:14:21,949 --> 00:14:26,359
bugs which I consider that in the build

00:14:24,470 --> 00:14:28,279
process capture some that either is not

00:14:26,359 --> 00:14:30,559
useful for the resulting software and

00:14:28,279 --> 00:14:33,199
it's it's it's about in the blob system

00:14:30,559 --> 00:14:35,600
so for example we can configure that the

00:14:33,199 --> 00:14:38,539
toolchain bin itself has an option that

00:14:35,600 --> 00:14:40,639
is called when you when you do the -

00:14:38,539 --> 00:14:44,779
configure an able deterministic archives

00:14:40,639 --> 00:14:50,329
which will actually have the AR command

00:14:44,779 --> 00:14:53,379
not record user ID and timestamps so

00:14:50,329 --> 00:14:53,379
that would make it the default

00:14:53,790 --> 00:15:00,810
we need to patch software like Javadoc

00:14:56,220 --> 00:15:02,220
so they get a - - no timestamps and we

00:15:00,810 --> 00:15:04,529
could eventually like we need we can

00:15:02,220 --> 00:15:07,500
individually individually patch build

00:15:04,529 --> 00:15:10,529
systems like our changing the girl

00:15:07,500 --> 00:15:12,360
system so gzip has the - an option which

00:15:10,529 --> 00:15:20,190
will not capture the name of the file

00:15:12,360 --> 00:15:22,560
new time theme Paul just looking at this

00:15:20,190 --> 00:15:25,199
stuff it makes me think of up streams

00:15:22,560 --> 00:15:27,360
and that makes me think of the upstream

00:15:25,199 --> 00:15:30,540
guide and the buff that's coming up

00:15:27,360 --> 00:15:32,420
later in the week and yeah so we could

00:15:30,540 --> 00:15:35,910
add some advice for up streams and and

00:15:32,420 --> 00:15:37,769
maybe do you think the proper place to

00:15:35,910 --> 00:15:40,290
do this is fixed the build systems

00:15:37,769 --> 00:15:44,180
themselves like Auto cough they make or

00:15:40,290 --> 00:15:47,579
is it problems in the separate

00:15:44,180 --> 00:15:49,380
configuration for those business of this

00:15:47,579 --> 00:15:52,860
poor chain so it's it's our

00:15:49,380 --> 00:15:55,500
responsibility gzip is often called when

00:15:52,860 --> 00:15:58,410
in the diggin walls when we do the main

00:15:55,500 --> 00:16:00,240
feature so what about Javadoc I was

00:15:58,410 --> 00:16:01,800
thinking less alone well we could try to

00:16:00,240 --> 00:16:04,589
make that attack by default not

00:16:01,800 --> 00:16:08,430
sometimes them at all right with with

00:16:04,589 --> 00:16:10,079
the Javadoc upstream run that satisfy we

00:16:08,430 --> 00:16:11,279
should but also that's something that

00:16:10,079 --> 00:16:13,319
one more upstream I'm getting

00:16:11,279 --> 00:16:15,149
interesting into being deterministic

00:16:13,319 --> 00:16:17,519
they have the old system like I know

00:16:15,149 --> 00:16:20,970
that it's not it's not much but the

00:16:17,519 --> 00:16:25,769
HTTPS Everywhere extension for Firefox

00:16:20,970 --> 00:16:27,329
is the build is is reproducible but it's

00:16:25,769 --> 00:16:28,649
pretty useless for Vivian because the

00:16:27,329 --> 00:16:36,660
different package itself cannot be

00:16:28,649 --> 00:16:39,630
reproducible yeah so in other - like

00:16:36,660 --> 00:16:44,250
Troy with his ideas and you know I think

00:16:39,630 --> 00:16:47,569
thinking about also what manage and we

00:16:44,250 --> 00:16:50,220
what we did is is an experiment

00:16:47,569 --> 00:16:53,339
building by building and rebuilding many

00:16:50,220 --> 00:16:58,829
sources back in many sauce packages we

00:16:53,339 --> 00:17:01,189
used so the eg to VM VM things I'm not

00:16:58,829 --> 00:17:05,110
clear on the details but David Suarez

00:17:01,189 --> 00:17:10,929
made all the magic happen

00:17:05,110 --> 00:17:12,339
and thanks to him a lot and so the idea

00:17:10,929 --> 00:17:15,730
the experiment is we build the package

00:17:12,339 --> 00:17:18,399
twice and to do so we set up back into

00:17:15,730 --> 00:17:21,459
it we unpack the source code we install

00:17:18,399 --> 00:17:24,250
the build depends WebGL and then we do

00:17:21,459 --> 00:17:25,929
the exact same thing one slight

00:17:24,250 --> 00:17:29,799
difference is that we passed the

00:17:25,929 --> 00:17:32,200
timestamp of the cross build to dpkg

00:17:29,799 --> 00:17:37,960
through an environment and the

00:17:32,200 --> 00:17:40,269
environment variable there's so in that

00:17:37,960 --> 00:17:44,169
context of the experiment we make two

00:17:40,269 --> 00:17:46,570
versions the time of the bill is

00:17:44,169 --> 00:17:49,630
different because I've known leap fact

00:17:46,570 --> 00:17:51,279
time library or such and the build path

00:17:49,630 --> 00:17:53,559
will be different because the build is

00:17:51,279 --> 00:17:55,570
done with as build which will pick a

00:17:53,559 --> 00:17:58,000
random path every time you have a bill

00:17:55,570 --> 00:18:01,659
but there's no change is not rationed in

00:17:58,000 --> 00:18:04,330
host name or username or you name or I

00:18:01,659 --> 00:18:07,960
believe the file other because we impact

00:18:04,330 --> 00:18:10,240
the package the same way both times all

00:18:07,960 --> 00:18:13,750
the local which is I think see in both

00:18:10,240 --> 00:18:17,740
cases what shell it is it is a pretty

00:18:13,750 --> 00:18:20,200
good framework to start evaluating and

00:18:17,740 --> 00:18:23,679
so for the second experiment women in

00:18:20,200 --> 00:18:25,659
January so the changes from a normal

00:18:23,679 --> 00:18:28,570
deviant build environment system that we

00:18:25,659 --> 00:18:30,519
did was so that's a patch for the PKG

00:18:28,570 --> 00:18:33,340
that use a single time stamp for the

00:18:30,519 --> 00:18:35,919
wall archive so the dot Deb you know

00:18:33,340 --> 00:18:38,610
that they were made of tar salt and so

00:18:35,919 --> 00:18:42,700
the tar files have a single time stamp

00:18:38,610 --> 00:18:45,610
and we can pass to dpkg an environment

00:18:42,700 --> 00:18:48,100
variable that will make it right the

00:18:45,610 --> 00:18:49,360
exact time stamp in the time stamp in

00:18:48,100 --> 00:18:53,350
the archive

00:18:49,360 --> 00:18:55,360
they're also sorting of the files that

00:18:53,350 --> 00:18:59,080
duplicate the food in the archive so

00:18:55,360 --> 00:19:04,059
we'll always get the same file order and

00:18:59,080 --> 00:19:08,230
so to use to to get to fix the dual path

00:19:04,059 --> 00:19:11,529
problem in the dwarf files we use the

00:19:08,230 --> 00:19:14,980
tool that was designed by Red Hat called

00:19:11,529 --> 00:19:18,220
a debug edit and we can change the path

00:19:14,980 --> 00:19:23,049
in the written

00:19:18,220 --> 00:19:25,299
files after the bill and so we use to we

00:19:23,049 --> 00:19:28,899
hook that into a developer strip th

00:19:25,299 --> 00:19:31,120
strip which also produces most of the

00:19:28,899 --> 00:19:33,610
bash dbg package so that sounds like a

00:19:31,120 --> 00:19:38,110
good place to pass it but the other

00:19:33,610 --> 00:19:40,419
trick that we need to pass the - f no

00:19:38,110 --> 00:19:42,429
merge debug strings to GCC because

00:19:40,419 --> 00:19:45,610
otherwise debug edit can't walk well

00:19:42,429 --> 00:19:50,259
because hash table order will get dams

00:19:45,610 --> 00:19:52,029
lab details painful that and also

00:19:50,259 --> 00:19:54,549
peanuts all have been rebuilt you have

00:19:52,029 --> 00:19:57,250
the enable deterministic archives so

00:19:54,549 --> 00:20:02,799
that's that's the experiment we did we

00:19:57,250 --> 00:20:09,100
brought 5151 source packages and that

00:20:02,799 --> 00:20:12,100
would used three four four four 3196 of

00:20:09,100 --> 00:20:23,320
them we had produced identical binary

00:20:12,100 --> 00:20:25,990
packages that's 62 percent it's very

00:20:23,320 --> 00:20:27,759
rational for the set of pointers to the

00:20:25,990 --> 00:20:29,320
set of source packages you chose because

00:20:27,759 --> 00:20:30,610
you know I went to look at it to see

00:20:29,320 --> 00:20:32,110
what the state of mind was and almost

00:20:30,610 --> 00:20:36,159
none of them were there no they picked

00:20:32,110 --> 00:20:38,830
that random so it is not actually like

00:20:36,159 --> 00:20:42,159
super intuitive but it is to say that

00:20:38,830 --> 00:20:45,549
it's not a crazy idea we can do this and

00:20:42,159 --> 00:20:48,480
and maybe getting to you a hundred

00:20:45,549 --> 00:20:51,940
percent is a crazy idea or will take

00:20:48,480 --> 00:20:54,309
several decades I don't know but at

00:20:51,940 --> 00:20:58,440
least getting to I don't know 80 90

00:20:54,309 --> 00:21:03,879
percent doesn't sound like like like

00:20:58,440 --> 00:21:07,019
unreachable goal to give you a couple

00:21:03,879 --> 00:21:10,710
example with that set up fine detail was

00:21:07,019 --> 00:21:13,450
reproducible double you get color TV box

00:21:10,710 --> 00:21:16,899
python support that that's a couple of

00:21:13,450 --> 00:21:19,659
package that they were walking well for

00:21:16,899 --> 00:21:22,120
the failures that we identified in the

00:21:19,659 --> 00:21:24,309
resulting the remaining packages they

00:21:22,120 --> 00:21:27,129
were top top flower is

00:21:24,309 --> 00:21:32,019
the dwarf I'll still having a mishmash

00:21:27,129 --> 00:21:34,750
and mismatching build ID so the between

00:21:32,019 --> 00:21:35,830
the two wheels which probably is because

00:21:34,750 --> 00:21:38,049
the build path

00:21:35,830 --> 00:21:40,629
so either the package is not pulling the

00:21:38,049 --> 00:21:42,700
age strip or the build path isn't gated

00:21:40,629 --> 00:21:44,799
in a way that the trick we used it in

00:21:42,700 --> 00:21:46,720
the work yeah

00:21:44,799 --> 00:21:48,190
so Jeff Falls they were there was a

00:21:46,720 --> 00:21:50,139
problem in high school files there was a

00:21:48,190 --> 00:21:57,159
problem in PHP or just really capturing

00:21:50,139 --> 00:21:59,289
goldpass GZ timestamps mono that's

00:21:57,159 --> 00:22:03,669
there's something with mono going on I

00:21:59,289 --> 00:22:07,629
haven't I don't know there was booked to

00:22:03,669 --> 00:22:11,350
man like a timestamp in there so that

00:22:07,629 --> 00:22:13,210
couple of also of other leg like hanging

00:22:11,350 --> 00:22:15,340
fruit like glowing low-hanging fruits

00:22:13,210 --> 00:22:18,759
that you know could benefit a large

00:22:15,340 --> 00:22:21,009
package of modes but right now we still

00:22:18,759 --> 00:22:26,289
have no good solution for the build ID

00:22:21,009 --> 00:22:28,450
thing that the dwarf one idea that

00:22:26,289 --> 00:22:32,100
actually stiff I'm gone you came up on

00:22:28,450 --> 00:22:36,669
the reproducible Menace is okay let's

00:22:32,100 --> 00:22:39,129
let's stop crazy eh trip weird things

00:22:36,669 --> 00:22:45,429
let's how about we agree on a canonical

00:22:39,129 --> 00:22:47,320
build path that will solve the problem

00:22:45,429 --> 00:22:50,500
Colleen mentioned about random paths

00:22:47,320 --> 00:22:53,500
getting in the files and also we have

00:22:50,500 --> 00:22:55,649
gdb we'd have a canonical location so it

00:22:53,500 --> 00:22:58,720
would be easier for Debian users to just

00:22:55,649 --> 00:23:01,570
abdicate source in the right location

00:22:58,720 --> 00:23:02,950
and when they will like run gdb that

00:23:01,570 --> 00:23:06,279
they will have the right path already

00:23:02,950 --> 00:23:08,860
set up for them and there's a tool that

00:23:06,279 --> 00:23:12,549
is called P routes that can actually

00:23:08,860 --> 00:23:16,419
state the current directory of the

00:23:12,549 --> 00:23:18,610
software so you could eventually like

00:23:16,419 --> 00:23:20,889
build the software in whatever ejector

00:23:18,610 --> 00:23:23,740
you won't run difficulty built package

00:23:20,889 --> 00:23:26,230
and it will actually in the background

00:23:23,740 --> 00:23:28,419
like sacred cows sakes the current

00:23:26,230 --> 00:23:30,610
directory so you get the canonical one

00:23:28,419 --> 00:23:33,110
right we will change like I don't of the

00:23:30,610 --> 00:23:36,070
SPL and people do so they will use

00:23:33,110 --> 00:23:36,070
this chemical revolution

00:23:37,000 --> 00:23:44,090
period has downsides and that it uses

00:23:42,260 --> 00:23:46,610
Petrus so it's not available on our

00:23:44,090 --> 00:23:50,900
architectures so that might be our

00:23:46,610 --> 00:23:53,179
problem I don't know but uh and it's

00:23:50,900 --> 00:23:57,530
unclear how we push changes like that

00:23:53,179 --> 00:23:59,360
you know it artists to me if they're

00:23:57,530 --> 00:24:01,640
like super old timers i'm viviane who

00:23:59,360 --> 00:24:04,190
tell me like how we get to decide and

00:24:01,640 --> 00:24:09,470
they can only call build path please

00:24:04,190 --> 00:24:10,820
don't answer me do a gr but that that

00:24:09,470 --> 00:24:14,020
would be an idea to solve that that

00:24:10,820 --> 00:24:17,120
possible class of problem all I wants

00:24:14,020 --> 00:24:19,929
whenever idea might be contentious word

00:24:17,120 --> 00:24:22,929
each have difficulty people package

00:24:19,929 --> 00:24:27,169
exports the environment viable gzip

00:24:22,929 --> 00:24:30,679
which are options for Jesus and pastor -

00:24:27,169 --> 00:24:32,690
end option by default mention is were

00:24:30,679 --> 00:24:34,700
not really happy win when the because

00:24:32,690 --> 00:24:36,710
you don't package decided to push see

00:24:34,700 --> 00:24:38,630
flags and also maybe this is contagious

00:24:36,710 --> 00:24:40,070
but you would solve the lot also a lot

00:24:38,630 --> 00:24:44,559
of packages at once

00:24:40,070 --> 00:24:44,559
I don't know yeah

00:24:52,290 --> 00:24:57,100
it seems like that would run fall afoul

00:24:55,150 --> 00:24:59,290
of a number of upstream build systems

00:24:57,100 --> 00:25:01,660
that go out of their way to not be

00:24:59,290 --> 00:25:03,990
affected by environment variables like

00:25:01,660 --> 00:25:06,250
gzip that you may have set as a user

00:25:03,990 --> 00:25:08,830
well then then you can fix them

00:25:06,250 --> 00:25:11,410
individually but we can't we can swipe a

00:25:08,830 --> 00:25:15,100
lot of apples and I won't see if we did

00:25:11,410 --> 00:25:24,910
that that's I don't know Ross had a

00:25:15,100 --> 00:25:26,470
question come in is it possible to strip

00:25:24,910 --> 00:25:27,760
the time stamps out of gzip compressed

00:25:26,470 --> 00:25:30,070
files even if they were originally

00:25:27,760 --> 00:25:31,570
compressed without dashing as a post

00:25:30,070 --> 00:25:33,010
processing step because if so you could

00:25:31,570 --> 00:25:34,510
just throw something into debhelper they

00:25:33,010 --> 00:25:36,010
go through all the compressed files in

00:25:34,510 --> 00:25:42,550
the package and just remove the time

00:25:36,010 --> 00:25:54,340
stamps yeah i but that that might be

00:25:42,550 --> 00:25:56,350
easy to write actually okay I had an

00:25:54,340 --> 00:26:01,990
answer for the default built that there

00:25:56,350 --> 00:26:04,090
was not a gr so user SRC should be read

00:26:01,990 --> 00:26:07,750
only according to different policies

00:26:04,090 --> 00:26:10,480
that could read and P builder throw

00:26:07,750 --> 00:26:13,240
stuff in var cache so maybe that could

00:26:10,480 --> 00:26:15,670
be used instead and I had a question

00:26:13,240 --> 00:26:18,010
regarding that the timestamp when you

00:26:15,670 --> 00:26:24,040
fake a timestamp which which time that

00:26:18,010 --> 00:26:25,690
you choose so so what it is so you you

00:26:24,040 --> 00:26:27,880
can do it first deal and you capture the

00:26:25,690 --> 00:26:30,670
build environment you capture the time

00:26:27,880 --> 00:26:34,180
of that build environment and that's

00:26:30,670 --> 00:26:41,280
what we used to like as a reproduce

00:26:34,180 --> 00:26:46,960
reproduce point on when we did write the

00:26:41,280 --> 00:26:49,510
dab of the second build right now all

00:26:46,960 --> 00:26:50,980
the time raiveer it's it's using the

00:26:49,510 --> 00:26:53,980
same it's using this time outside of the

00:26:50,980 --> 00:26:55,510
bill right now but the point is I mean

00:26:53,980 --> 00:26:57,790
the impact time has become really

00:26:55,510 --> 00:27:00,520
powerful you can actually recall all

00:26:57,790 --> 00:27:03,610
calls to get timestamp of the day and

00:27:00,520 --> 00:27:05,380
have it we play them but I

00:27:03,610 --> 00:27:07,950
think that the way we should do it in G

00:27:05,380 --> 00:27:10,750
bein I mean we could also agree that we

00:27:07,950 --> 00:27:15,040
while it's done that way is actually to

00:27:10,750 --> 00:27:17,049
please Gillan Java from dpkg because the

00:27:15,040 --> 00:27:21,340
initial discussion where I want to keep

00:27:17,049 --> 00:27:23,530
timestamps that's what he said so maybe

00:27:21,340 --> 00:27:26,170
I don't know maybe we have to go to the

00:27:23,530 --> 00:27:28,210
technical community to say ok but it's

00:27:26,170 --> 00:27:30,450
not useful to have a timestamp in the

00:27:28,210 --> 00:27:37,059
dot debacle at all

00:27:30,450 --> 00:27:39,040
yeah so I liked you yeah yeah question

00:27:37,059 --> 00:27:41,530
of that so that's good enough for the

00:27:39,040 --> 00:27:43,299
use case of us testing that packages are

00:27:41,530 --> 00:27:46,809
reproducible but I think the other use

00:27:43,299 --> 00:27:48,100
case is enabling user to reproduce the

00:27:46,809 --> 00:27:49,780
exact package which are in the same

00:27:48,100 --> 00:27:51,580
archive to ensure that we are not making

00:27:49,780 --> 00:27:53,950
anything fishy so how do you imagine

00:27:51,580 --> 00:27:55,630
that we produce the packages and there

00:27:53,950 --> 00:27:58,900
is a way to extract the packages for the

00:27:55,630 --> 00:28:01,270
user to apply so my my pleasure

00:27:58,900 --> 00:28:05,010
so I have a couple of crazy ideas but uh

00:28:01,270 --> 00:28:08,950
can I can I like eggs goodbye okay cool

00:28:05,010 --> 00:28:12,100
so just to finish I wanted to make a new

00:28:08,950 --> 00:28:16,120
experiment using g PKG build package

00:28:12,100 --> 00:28:18,340
that would call p roots but that

00:28:16,120 --> 00:28:19,840
inspires what you busy sir couldn't I'm

00:28:18,340 --> 00:28:23,320
really sorry I would have expected

00:28:19,840 --> 00:28:25,799
something like 80 percent but uh but I

00:28:23,320 --> 00:28:28,179
don't know maybe 90 percent I don't know

00:28:25,799 --> 00:28:34,960
that's other distribution interesting is

00:28:28,179 --> 00:28:37,630
that fedora who had like one of the

00:28:34,960 --> 00:28:39,970
security people what writing a blog post

00:28:37,630 --> 00:28:42,000
about about this after we started the GV

00:28:39,970 --> 00:28:44,770
initiative to the best of my knowledge

00:28:42,000 --> 00:28:48,070
there has been no further progress in

00:28:44,770 --> 00:28:49,630
that open SUSE as something interesting

00:28:48,070 --> 00:28:53,710
called joke compare but I haven't like

00:28:49,630 --> 00:28:56,410
time to look a lot about it and the

00:28:53,710 --> 00:28:57,790
distro called next OS is super

00:28:56,410 --> 00:29:00,910
interested into reproducible builds

00:28:57,790 --> 00:29:04,990
because they they have an interesting

00:29:00,910 --> 00:29:06,910
system or the capture the they already

00:29:04,990 --> 00:29:11,200
captured the environments that were that

00:29:06,910 --> 00:29:15,030
was used to build a specific package as

00:29:11,200 --> 00:29:15,030
any dependencies

00:29:15,580 --> 00:29:21,800
and so if they got reproducible builds

00:29:19,910 --> 00:29:23,660
and I mean it means then when you

00:29:21,800 --> 00:29:26,120
upgrade a specific package you have to

00:29:23,660 --> 00:29:28,400
rebuild the far less because if

00:29:26,120 --> 00:29:31,190
dependent if you build dependency hasn't

00:29:28,400 --> 00:29:35,180
changed changed but hasn't changed its

00:29:31,190 --> 00:29:37,220
behavior then the checksum again keeps a

00:29:35,180 --> 00:29:39,590
the same so that they were like

00:29:37,220 --> 00:29:44,530
interesting cross collaboration but it's

00:29:39,590 --> 00:29:47,420
so far I'm under the impression that the

00:29:44,530 --> 00:29:59,180
main efforts on this have been like in

00:29:47,420 --> 00:30:03,130
in the GBM crowd or friends so okay

00:29:59,180 --> 00:30:08,380
before I get to want to help crazy ideas

00:30:03,130 --> 00:30:13,580
for one thing first there's this this

00:30:08,380 --> 00:30:16,070
this idea that we should not directly

00:30:13,580 --> 00:30:17,990
pick packet dead binary packages that

00:30:16,070 --> 00:30:21,590
have well built on developer system and

00:30:17,990 --> 00:30:24,140
put them in the archive we're getting

00:30:21,590 --> 00:30:26,410
there slowly like Ansgar walked on on

00:30:24,140 --> 00:30:26,410
deck

00:30:26,710 --> 00:30:36,110
for an on this what I'm advocating is

00:30:31,420 --> 00:30:40,910
actually we make so developers are

00:30:36,110 --> 00:30:43,280
forced to build binary but then we added

00:30:40,910 --> 00:30:48,350
that Deb and so the dot changes far

00:30:43,280 --> 00:30:52,160
content a checksum for the dev right and

00:30:48,350 --> 00:30:57,140
you upload everything to the upload

00:30:52,160 --> 00:30:59,360
queue except the dot there and then you

00:30:57,140 --> 00:31:02,000
have a building that which pick that

00:30:59,360 --> 00:31:04,040
changes and although after and file to

00:31:02,000 --> 00:31:07,190
rebuild the packages from source in the

00:31:04,040 --> 00:31:09,170
same environment and if the dev actually

00:31:07,190 --> 00:31:12,730
that has been produced match the

00:31:09,170 --> 00:31:16,180
original checksum then it gets enjoy

00:31:12,730 --> 00:31:16,180
that idea

00:31:17,490 --> 00:31:24,210
that means sparing our internet

00:31:21,040 --> 00:31:26,500
connections which would be good but also

00:31:24,210 --> 00:31:32,170
it means that then you have reasonable

00:31:26,500 --> 00:31:34,690
trust that your system is not

00:31:32,170 --> 00:31:36,670
compromised all the build is not compact

00:31:34,690 --> 00:31:40,480
at the same time as the bilges

00:31:36,670 --> 00:31:41,740
compromise that's better yeah of course

00:31:40,480 --> 00:31:43,660
you do have a problem with multi arch

00:31:41,740 --> 00:31:45,190
and different architectures with that

00:31:43,660 --> 00:31:47,140
because most of your developers only

00:31:45,190 --> 00:31:50,140
have one architecture to play with or to

00:31:47,140 --> 00:31:52,060
so you only got faith that the

00:31:50,140 --> 00:31:55,120
architecture that your developer has

00:31:52,060 --> 00:31:57,880
uploaded for hasn't been compromised and

00:31:55,120 --> 00:31:59,680
not a sub architecture yeah sure we can

00:31:57,880 --> 00:32:03,820
I mean we have a general trust that the

00:31:59,680 --> 00:32:05,470
build er not easy easy systems to

00:32:03,820 --> 00:32:13,210
compromise or we try our best though

00:32:05,470 --> 00:32:15,130
it's not the case we can also have

00:32:13,210 --> 00:32:21,420
multiple builders in multiple

00:32:15,130 --> 00:32:21,420
geographical locations and cross those

00:32:27,850 --> 00:32:32,899
in addition to just having multiple

00:32:30,740 --> 00:32:35,450
build these you could also have the

00:32:32,899 --> 00:32:37,759
standard build these system work as is

00:32:35,450 --> 00:32:40,519
now and then other people who want to

00:32:37,759 --> 00:32:42,590
run reproduce build these can still pull

00:32:40,519 --> 00:32:44,980
the same things from snapshot and

00:32:42,590 --> 00:32:49,970
attempt to reproduce these and then

00:32:44,980 --> 00:32:51,320
verify that for themselves so my main my

00:32:49,970 --> 00:32:53,509
main focus or like to answer

00:32:51,320 --> 00:32:55,759
Zach's question my mech mimic my main

00:32:53,509 --> 00:32:59,240
focuses that changes file I want that

00:32:55,759 --> 00:33:02,570
changes to be the basis of reproducing a

00:32:59,240 --> 00:33:05,419
given build then we could even go more

00:33:02,570 --> 00:33:08,690
crazy that currently changes file are

00:33:05,419 --> 00:33:10,909
signed by only one the rubber we could

00:33:08,690 --> 00:33:15,110
have dodged changes father signed by

00:33:10,909 --> 00:33:17,659
multiple keys so we can trust even more

00:33:15,110 --> 00:33:23,889
I'd like you to spread the trust yeah

00:33:17,659 --> 00:33:27,889
our more trust that's that's not yet so

00:33:23,889 --> 00:33:29,149
if you want to health that's that one of

00:33:27,889 --> 00:33:31,100
the things that I really would like to

00:33:29,149 --> 00:33:35,029
make this experiment that I haven't had

00:33:31,100 --> 00:33:37,399
the time as every last care build

00:33:35,029 --> 00:33:39,889
experiments what next time is also to

00:33:37,399 --> 00:33:42,350
sort the results so if you want to help

00:33:39,889 --> 00:33:44,480
we have nice tool that is called GP it

00:33:42,350 --> 00:33:47,509
that textual changes file and we are

00:33:44,480 --> 00:33:50,809
like run a lot of credit for and saw you

00:33:47,509 --> 00:33:55,850
difference is by dipping many file

00:33:50,809 --> 00:33:57,860
formats inside the data that that's that

00:33:55,850 --> 00:33:58,850
is people like dredging bug that's

00:33:57,860 --> 00:34:03,049
that's one thing

00:33:58,850 --> 00:34:06,649
yeah poor just quickly on the the

00:34:03,049 --> 00:34:08,869
changes and the multiple signers that

00:34:06,649 --> 00:34:15,349
makes me think you need to touch Ignace

00:34:08,869 --> 00:34:17,839
from the changes for you don't actually

00:34:15,349 --> 00:34:20,599
you can have multiple signatures in the

00:34:17,839 --> 00:34:23,859
same block so you then modify the

00:34:20,599 --> 00:34:27,589
changes for when someone else swords it

00:34:23,859 --> 00:34:33,020
bag hidden let's go on we can find

00:34:27,589 --> 00:34:35,720
fortune that's currency we have note so

00:34:33,020 --> 00:34:37,280
my point is we need to put every single

00:34:35,720 --> 00:34:37,870
piece of information that useful to

00:34:37,280 --> 00:34:40,510
reproduce

00:34:37,870 --> 00:34:42,130
in the Dutch changes file maybe that's

00:34:40,510 --> 00:34:45,370
not to pay way to do it so there's

00:34:42,130 --> 00:34:47,140
research to be done there that's that's

00:34:45,370 --> 00:34:50,730
one thing and then someone that would

00:34:47,140 --> 00:34:53,290
specify something so we could record

00:34:50,730 --> 00:34:55,360
information and then replay it later but

00:34:53,290 --> 00:34:57,280
that effectively means that if you build

00:34:55,360 --> 00:34:59,440
in the absence of that build log

00:34:57,280 --> 00:35:01,150
information you get a different build I

00:34:59,440 --> 00:35:03,370
think it would be more valuable if we

00:35:01,150 --> 00:35:05,710
construct a standard environment so that

00:35:03,370 --> 00:35:07,630
if two completely independent builds

00:35:05,710 --> 00:35:09,520
occur they will get the same result

00:35:07,630 --> 00:35:11,980
without any logged information that

00:35:09,520 --> 00:35:13,750
needs replaying and that doesn't seem

00:35:11,980 --> 00:35:15,880
infeasible for most of the problems that

00:35:13,750 --> 00:35:17,680
you've mentioned yeah that depth of ten

00:35:15,880 --> 00:35:24,400
minutes that best trade-offs here that

00:35:17,680 --> 00:35:25,900
why not just you're pretty easy any any

00:35:24,400 --> 00:35:28,060
such standard environment would be

00:35:25,900 --> 00:35:29,950
constantly evolving because you're Bill

00:35:28,060 --> 00:35:31,960
dependencies are constantly moving under

00:35:29,950 --> 00:35:33,580
you but there are there are various

00:35:31,960 --> 00:35:38,230
tools that exist today

00:35:33,580 --> 00:35:40,300
eh build in for that that the do log

00:35:38,230 --> 00:35:45,360
this kind of thing and maybe we should

00:35:40,300 --> 00:35:48,430
just standardize in one of those yeah

00:35:45,360 --> 00:35:52,060
well so not served not sure if there's

00:35:48,430 --> 00:35:53,680
get derail your dock so I'm sorry have

00:35:52,060 --> 00:35:55,480
you guys seen anything where it builds

00:35:53,680 --> 00:35:57,310
multiple versions of the same binary and

00:35:55,480 --> 00:35:59,140
then tests to see one which one performs

00:35:57,310 --> 00:36:00,640
best and then ends up using that one I

00:35:59,140 --> 00:36:03,580
seem to remember there was some thing

00:36:00,640 --> 00:36:08,080
with Firefox maybe that did that what is

00:36:03,580 --> 00:36:09,430
in PG oh oh yeah right exactly have you

00:36:08,080 --> 00:36:14,050
seen that and are there techniques to

00:36:09,430 --> 00:36:15,580
avoid that no yeah well I know that

00:36:14,050 --> 00:36:17,410
Firefox can be made with producible

00:36:15,580 --> 00:36:18,040
behold the tor browser is based on

00:36:17,410 --> 00:36:21,940
firefox

00:36:18,040 --> 00:36:25,000
and so it's it's there has been the need

00:36:21,940 --> 00:36:27,430
to stomp random bytes free bytes that I

00:36:25,000 --> 00:36:30,190
like zeroed because nobody could get a

00:36:27,430 --> 00:36:31,780
clue where they where you know why they

00:36:30,190 --> 00:36:35,320
were written to the binary at some point

00:36:31,780 --> 00:36:38,170
but it's doable so if you want to help

00:36:35,320 --> 00:36:40,810
specify that's doesn't that's walked

00:36:38,170 --> 00:36:43,540
here and we need that as well if you

00:36:40,810 --> 00:36:45,910
want to code then there's a lot of no

00:36:43,540 --> 00:36:47,710
timestamps option that needs to be added

00:36:45,910 --> 00:36:49,610
to program to software or if you want to

00:36:47,710 --> 00:36:51,650
do politics you can also once that code

00:36:49,610 --> 00:36:55,100
and try to convince that it should be

00:36:51,650 --> 00:36:57,830
the default option and also we're still

00:36:55,100 --> 00:36:59,840
missing a script that would like you

00:36:57,830 --> 00:37:02,090
give it a changes how and maybe a

00:36:59,840 --> 00:37:03,920
rekelen environment from in the changes

00:37:02,090 --> 00:37:07,910
are in our file I don't know maybe in

00:37:03,920 --> 00:37:10,790
the AG bill info file and it would like

00:37:07,910 --> 00:37:14,330
fetch the correct dependencies version

00:37:10,790 --> 00:37:16,240
from snapshot set up that in people

00:37:14,330 --> 00:37:18,560
realized bill truth and run the bill

00:37:16,240 --> 00:37:20,390
that would be an awesome thing to do

00:37:18,560 --> 00:37:22,610
it's we know it's doable no one just got

00:37:20,390 --> 00:37:26,330
to it yet it's probably like we can

00:37:22,610 --> 00:37:28,310
project and that that says project

00:37:26,330 --> 00:37:31,370
management to be done here there's a lot

00:37:28,310 --> 00:37:33,950
of baby steps that you move forward you

00:37:31,370 --> 00:37:38,060
the goal of reproducible build I would

00:37:33,950 --> 00:37:39,890
love someone that is not completely full

00:37:38,060 --> 00:37:41,420
with so many things to just you know ask

00:37:39,890 --> 00:37:43,160
me once in a while I've asked anyone

00:37:41,420 --> 00:37:45,830
interesting hey what are you going to do

00:37:43,160 --> 00:37:47,600
about your possible build this week and

00:37:45,830 --> 00:37:50,930
I came down yeah I will look at this

00:37:47,600 --> 00:37:52,400
package and maybe I will not but at

00:37:50,930 --> 00:37:53,690
least I would like some I don't know

00:37:52,400 --> 00:37:55,430
some some kind of fear for here just

00:37:53,690 --> 00:38:00,230
like okay what is you know what is we

00:37:55,430 --> 00:38:03,410
need to do next I mean during the last

00:38:00,230 --> 00:38:05,030
taxation act act time a huge just put me

00:38:03,410 --> 00:38:07,220
like you know do something of a

00:38:05,030 --> 00:38:09,560
reversible bill then I've sent a batch -

00:38:07,220 --> 00:38:11,870
ugh Python that took me half an hour to

00:38:09,560 --> 00:38:15,410
write this is love you know small small

00:38:11,870 --> 00:38:16,820
things that can be done if you want to

00:38:15,410 --> 00:38:18,710
stay in touch with the project so they

00:38:16,820 --> 00:38:22,340
are the reproducible builds wiki page

00:38:18,710 --> 00:38:25,760
subscribe to it and also - and that name

00:38:22,340 --> 00:38:30,610
is used by the as a user tag in the

00:38:25,760 --> 00:38:33,590
Debian BGSU record every bugs with with

00:38:30,610 --> 00:38:37,580
with reported so far as part of the

00:38:33,590 --> 00:38:39,290
project and we had very good reactions

00:38:37,580 --> 00:38:42,020
from a lot of mentions

00:38:39,290 --> 00:38:46,910
who promptly you know took the patch and

00:38:42,020 --> 00:38:49,310
that added like a - n - gzip or added

00:38:46,910 --> 00:38:53,390
salt solving five things to get a cyber

00:38:49,310 --> 00:38:55,100
stable order so yeah that will be above

00:38:53,390 --> 00:38:56,630
so that's why I was getting some of the

00:38:55,100 --> 00:38:59,060
questions there will be a buff right

00:38:56,630 --> 00:39:01,310
after dinner to discuss technical

00:38:59,060 --> 00:39:02,420
solution so we have 45 minutes more to

00:39:01,310 --> 00:39:05,059
try to

00:39:02,420 --> 00:39:08,450
you know sell out the fog and make plans

00:39:05,059 --> 00:39:12,440
so we can get too tall domination No

00:39:08,450 --> 00:39:14,390
so we get to a reproducible builds so

00:39:12,440 --> 00:39:23,240
yeah that's that's my end of what I had

00:39:14,390 --> 00:39:25,670
to your present so far I want to give

00:39:23,240 --> 00:39:27,380
credits to ya sir Sir stefan molyneux

00:39:25,670 --> 00:39:30,559
has for walk at some point he's not here

00:39:27,380 --> 00:39:32,660
and that one is and a couple of other

00:39:30,559 --> 00:39:35,660
people who are who actually I really got

00:39:32,660 --> 00:39:38,960
interested in the G thing and not just

00:39:35,660 --> 00:39:40,640
like tell me yeah this is great so and

00:39:38,960 --> 00:39:45,650
please I mean this is not something that

00:39:40,640 --> 00:39:47,690
I or even like two people will fix alone

00:39:45,650 --> 00:39:50,710
and you know this this is an issue for

00:39:47,690 --> 00:39:53,240
the wall dbn and free software community

00:39:50,710 --> 00:39:59,420
even as a larger group all right let's

00:39:53,240 --> 00:40:03,170
you know let's do that just on that

00:39:59,420 --> 00:40:04,549
maybe we can expose these just maybe we

00:40:03,170 --> 00:40:07,220
can expose these problems to the

00:40:04,549 --> 00:40:12,500
developer community as a whole via the

00:40:07,220 --> 00:40:15,349
package tracking system the new tracker

00:40:12,500 --> 00:40:17,599
is relatively easy to contribute if you

00:40:15,349 --> 00:40:20,319
know Paston and Django so that would be

00:40:17,599 --> 00:40:22,369
really helpful if someone could add

00:40:20,319 --> 00:40:24,109
weight and look at that stuff

00:40:22,369 --> 00:40:25,940
so what what one thing we're missing

00:40:24,109 --> 00:40:28,700
right now is a set of you know

00:40:25,940 --> 00:40:31,970
standardized at least the beginning of

00:40:28,700 --> 00:40:34,280
standards on what is the way to

00:40:31,970 --> 00:40:36,290
reproduce a build like what is the

00:40:34,280 --> 00:40:38,510
environment or what is where do we store

00:40:36,290 --> 00:40:43,190
the information because right now it's

00:40:38,510 --> 00:40:46,400
been an ad hoc experiment and and so I

00:40:43,190 --> 00:40:48,260
can't say well hey bonus point your

00:40:46,400 --> 00:40:50,750
package is reproducible because I don't

00:40:48,260 --> 00:40:53,329
know what that means yet we need to

00:40:50,750 --> 00:40:55,190
design on something here I'll just get

00:40:53,329 --> 00:40:57,890
to some code that will decide but at

00:40:55,190 --> 00:41:00,319
least does nothing drunky I would love

00:40:57,890 --> 00:41:02,660
to have something like an infrastructure

00:41:00,319 --> 00:41:04,280
light like ciz beyond not met that will

00:41:02,660 --> 00:41:06,290
actually be just you know we produce

00:41:04,280 --> 00:41:09,940
trying to produce packages or we're not

00:41:06,290 --> 00:41:09,940
that yeah we're missing a few steps

00:41:12,960 --> 00:41:20,970
and the other question is this it is

00:41:16,690 --> 00:41:20,970
crazy is this a waste of time

00:41:22,200 --> 00:41:29,049
okay troll for me okay so this is kind

00:41:26,230 --> 00:41:31,750
of an insane idea for the future but

00:41:29,049 --> 00:41:34,720
like you were talking just now about

00:41:31,750 --> 00:41:36,640
having something like CI 2w net it would

00:41:34,720 --> 00:41:39,009
be cool if we could put that in like an

00:41:36,640 --> 00:41:42,069
ami or something so we could have this

00:41:39,009 --> 00:41:43,960
like distributed trust so that anyone

00:41:42,069 --> 00:41:47,079
who wanted to could that's like an

00:41:43,960 --> 00:41:50,440
Amazon machine image huh so anyone who

00:41:47,079 --> 00:41:52,000
wanted to could like run some sort of

00:41:50,440 --> 00:41:53,859
continuous integration thing and you'd

00:41:52,000 --> 00:41:56,680
get like if the if the Debian

00:41:53,859 --> 00:42:05,769
infrastructure got pwned then someone

00:41:56,680 --> 00:42:09,400
else would catch it reproducible a.m.

00:42:05,769 --> 00:42:11,109
eyes well that's another project

00:42:09,400 --> 00:42:12,789
Paul solid which is called this

00:42:11,109 --> 00:42:14,500
like reproducible install look at the

00:42:12,789 --> 00:42:21,700
weekly bit there was grass and build

00:42:14,500 --> 00:42:24,009
last question so on the comment of being

00:42:21,700 --> 00:42:25,240
able to reproduce this I think the give

00:42:24,009 --> 00:42:26,740
if we're going to talk about having

00:42:25,240 --> 00:42:28,059
developers upload reproducible builds

00:42:26,740 --> 00:42:29,650
that we can verify that in the

00:42:28,059 --> 00:42:30,789
reproducible build environment that

00:42:29,650 --> 00:42:32,589
really means that we need to be able to

00:42:30,789 --> 00:42:34,029
document exactly how you set the whole

00:42:32,589 --> 00:42:35,829
thing up to generate a build of this

00:42:34,029 --> 00:42:39,549
type which means you get essentially

00:42:35,829 --> 00:42:40,750
that for free and I think that it's

00:42:39,549 --> 00:42:42,279
probably better to have the detailed

00:42:40,750 --> 00:42:43,750
documentation and the specific set of

00:42:42,279 --> 00:42:45,849
tools than it is to have it at all as a

00:42:43,750 --> 00:42:47,589
machine image anyway because that way

00:42:45,849 --> 00:42:48,849
you can verify each step of that and

00:42:47,589 --> 00:42:50,950
given it one of the goals here is

00:42:48,849 --> 00:42:52,660
security verification that gets more

00:42:50,950 --> 00:42:54,910
trust in the entire process and it also

00:42:52,660 --> 00:42:56,470
allows for the various variants in

00:42:54,910 --> 00:42:59,819
workflow because different people like

00:42:56,470 --> 00:43:02,470
to use you know cal builder versus l vm

00:42:59,819 --> 00:43:04,869
partitions or s build instead of p

00:43:02,470 --> 00:43:07,390
builder or that kind of thing i mean my

00:43:04,869 --> 00:43:09,730
goal would be like it's in DP and you do

00:43:07,390 --> 00:43:12,279
typically both package - - rebuild give

00:43:09,730 --> 00:43:14,710
it a change file boom and you can do

00:43:12,279 --> 00:43:17,230
that on any given system I would need

00:43:14,710 --> 00:43:18,609
the best user experience on reproducing

00:43:17,230 --> 00:43:23,260
the O's that I would love to get and

00:43:18,609 --> 00:43:25,930
we'll see how I think we're at that time

00:43:23,260 --> 00:43:28,810
so I will thanks everybody who came and

00:43:25,930 --> 00:43:31,270
and who's supportive of that thing come

00:43:28,810 --> 00:43:33,390
to the ball if you want to do thank

00:43:31,270 --> 00:43:33,390

YouTube URL: https://www.youtube.com/watch?v=pIrap2j8Wo0


