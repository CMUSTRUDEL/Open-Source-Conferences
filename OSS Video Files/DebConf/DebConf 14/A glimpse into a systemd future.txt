Title: A glimpse into a systemd future
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Josh Triplett

At: DebConf14
https://debconf14.debconf.org/
Room: Room 327
Scheduled start: 2014-08-28 16:00:00
Captions: 
	00:00:00,000 --> 00:00:03,990
everyone this is um Josh Triplett

00:00:02,520 --> 00:00:10,469
speaking about so I glimpse into the

00:00:03,990 --> 00:00:12,360
system D future fun thank you so we've

00:00:10,469 --> 00:00:24,420
had a few discussions about system D

00:00:12,360 --> 00:00:28,529
this year and thank you I'm glad we can

00:00:24,420 --> 00:00:31,109
get this started on a fun note so we did

00:00:28,529 --> 00:00:33,000
actually managed to shockingly make some

00:00:31,109 --> 00:00:36,210
decisions this year it's very

00:00:33,000 --> 00:00:38,129
uncharacteristic of us but in particular

00:00:36,210 --> 00:00:39,840
the biggest decisions we managed to make

00:00:38,129 --> 00:00:42,300
this year the biggest discussion topics

00:00:39,840 --> 00:00:44,430
were what did the default in it needs to

00:00:42,300 --> 00:00:46,350
be so what does s been in it point to or

00:00:44,430 --> 00:00:48,989
what does at C an it dot D get

00:00:46,350 --> 00:00:50,340
interpreted by are replaced with we

00:00:48,989 --> 00:00:52,110
talked a lot about whether you're

00:00:50,340 --> 00:00:54,449
allowed to use system D specific

00:00:52,110 --> 00:00:57,930
functionality or whether you have to be

00:00:54,449 --> 00:00:59,820
generic to all in its and we also talked

00:00:57,930 --> 00:01:02,280
about whether packages should support

00:00:59,820 --> 00:01:05,189
other initiatives apart from whatever

00:01:02,280 --> 00:01:06,930
was chosen as the default and we did end

00:01:05,189 --> 00:01:08,280
up with the decisions for all three of

00:01:06,930 --> 00:01:12,030
these the answers turned out to be

00:01:08,280 --> 00:01:14,820
system D yes and and that seems like a

00:01:12,030 --> 00:01:17,070
pretty reasonable set of answers the for

00:01:14,820 --> 00:01:20,610
the findings of foregone conclusion but

00:01:17,070 --> 00:01:23,640
it was nice to see and the remaining two

00:01:20,610 --> 00:01:25,470
are pretty much the result we get most

00:01:23,640 --> 00:01:28,110
times when we make a decision in Debian

00:01:25,470 --> 00:01:29,520
sure you can use all of them but we want

00:01:28,110 --> 00:01:30,869
to support something that the package

00:01:29,520 --> 00:01:33,960
maintainer isn't going out of their way

00:01:30,869 --> 00:01:36,450
to support so we have talked a lot about

00:01:33,960 --> 00:01:38,729
those items in particular we've talked a

00:01:36,450 --> 00:01:41,880
lot about system D the replacement for

00:01:38,729 --> 00:01:45,630
EDC Annette D and system D the harbinger

00:01:41,880 --> 00:01:47,880
of the Apocalypse but and we've also

00:01:45,630 --> 00:01:49,530
talked a lot about system D login D and

00:01:47,880 --> 00:01:51,810
system DM and how we can usefully

00:01:49,530 --> 00:01:54,869
support desktops on platforms that don't

00:01:51,810 --> 00:01:58,590
have system D but in all this vigorous

00:01:54,869 --> 00:02:00,390
discussion about system D we've not

00:01:58,590 --> 00:02:03,060
necessarily talked a lot about the

00:02:00,390 --> 00:02:05,759
technology of system D itself very much

00:02:03,060 --> 00:02:09,599
we've talked about the pieces that touch

00:02:05,759 --> 00:02:11,700
on defaults and interpretation of etsion

00:02:09,599 --> 00:02:13,230
it D and login D and the various

00:02:11,700 --> 00:02:13,830
services but that's really the tip of

00:02:13,230 --> 00:02:17,220
the iceberg

00:02:13,830 --> 00:02:20,040
of what systemd has so key things we

00:02:17,220 --> 00:02:22,020
haven't talked about our Debian policy

00:02:20,040 --> 00:02:24,000
for system D which is actually currently

00:02:22,020 --> 00:02:26,010
in progress being developed and

00:02:24,000 --> 00:02:28,920
hopefully we'll get written in published

00:02:26,010 --> 00:02:30,630
in the near future other system D

00:02:28,920 --> 00:02:32,430
components apart from the one or two

00:02:30,630 --> 00:02:34,740
that have really made all of the major

00:02:32,430 --> 00:02:36,360
discussions and flame wars and how we

00:02:34,740 --> 00:02:39,090
can try to get system D as well

00:02:36,360 --> 00:02:41,610
integrated into Debian as possible and

00:02:39,090 --> 00:02:44,730
vice-versa how do we not just work of it

00:02:41,610 --> 00:02:59,840
fit together very well so part of the

00:02:44,730 --> 00:03:03,420
goal of the system Dean

00:02:59,840 --> 00:03:05,070
one of the big goals that system DS been

00:03:03,420 --> 00:03:06,720
pushing for is a lot of common

00:03:05,070 --> 00:03:08,580
infrastructure across many different

00:03:06,720 --> 00:03:11,100
environments so this isn't just about

00:03:08,580 --> 00:03:12,930
common across distributions this is also

00:03:11,100 --> 00:03:15,810
about common infrastructure across

00:03:12,930 --> 00:03:18,300
desktop environments as much discussion

00:03:15,810 --> 00:03:20,459
as we've had about genome and system D

00:03:18,300 --> 00:03:23,100
and the interactions thereof one of the

00:03:20,459 --> 00:03:25,019
big goals is actually to pulse a lot of

00:03:23,100 --> 00:03:28,140
logic out of genome and out of other

00:03:25,019 --> 00:03:30,959
desktops and try to put it in put system

00:03:28,140 --> 00:03:33,810
logic in a system demon where it belongs

00:03:30,959 --> 00:03:35,489
so that means that we have one common

00:03:33,810 --> 00:03:39,480
implementation instead of here's how it

00:03:35,489 --> 00:03:41,760
works in genome or KDE or xfce or ice WM

00:03:39,480 --> 00:03:43,910
or here's how it doesn't in many cases

00:03:41,760 --> 00:03:46,830
in the case of minimal environments and

00:03:43,910 --> 00:03:48,810
try to make this accessible in all cases

00:03:46,830 --> 00:03:51,390
of oh I'd like to opt into the various

00:03:48,810 --> 00:03:53,040
useful functionality that's available so

00:03:51,390 --> 00:03:54,810
this includes session management which

00:03:53,040 --> 00:03:56,970
has been widely discussed in the form of

00:03:54,810 --> 00:03:59,190
login D but also includes things like

00:03:56,970 --> 00:04:01,769
power management so suspend resume

00:03:59,190 --> 00:04:04,560
functionality that was previously very

00:04:01,769 --> 00:04:06,750
specific to particular desktop and let

00:04:04,560 --> 00:04:09,120
me go invoke suspend which will either

00:04:06,750 --> 00:04:12,420
do desktop specific things to clean up

00:04:09,120 --> 00:04:14,360
before suspending and resume do various

00:04:12,420 --> 00:04:17,340
miscellaneous things before you suspend

00:04:14,360 --> 00:04:20,489
there are things like backlight levels

00:04:17,340 --> 00:04:23,190
or mixer levels or various fund system

00:04:20,489 --> 00:04:25,260
configuration where that again it should

00:04:23,190 --> 00:04:27,660
not necessarily be desktop specific and

00:04:25,260 --> 00:04:29,480
then there are things like RF kill

00:04:27,660 --> 00:04:31,800
there's been a long-standing bug with

00:04:29,480 --> 00:04:33,450
genome and other environments not

00:04:31,800 --> 00:04:35,820
remembering oh I've turned off Bluetooth

00:04:33,450 --> 00:04:37,860
or I've turned off Wi-Fi and that should

00:04:35,820 --> 00:04:39,600
be remembered from boot to boot that

00:04:37,860 --> 00:04:41,880
really isn't a desktop thing at all

00:04:39,600 --> 00:04:43,560
that's a system thing so it ought to be

00:04:41,880 --> 00:04:45,210
remembered on a system-wide level and

00:04:43,560 --> 00:04:48,270
then just controlled within a desktop

00:04:45,210 --> 00:04:50,010
environment so that's one cup in case of

00:04:48,270 --> 00:04:51,660
factoring out a lot of infrastructure

00:04:50,010 --> 00:04:53,300
and trying to put it in a common

00:04:51,660 --> 00:04:56,220
location where a lot more than just

00:04:53,300 --> 00:04:58,110
desktop environments can usefully use it

00:04:56,220 --> 00:05:01,950
all of this functionality works just

00:04:58,110 --> 00:05:03,750
fine on a txt console for example one

00:05:01,950 --> 00:05:06,210
that's been reasonably well talked about

00:05:03,750 --> 00:05:09,900
is journal D so it's intended as a

00:05:06,210 --> 00:05:12,180
replacement for syslog but notably it

00:05:09,900 --> 00:05:15,630
includes structured metadata similar to

00:05:12,180 --> 00:05:17,610
the latest standard for salat

00:05:15,630 --> 00:05:20,100
quite different from the classic text

00:05:17,610 --> 00:05:22,140
only syslog approach where structured

00:05:20,100 --> 00:05:25,530
data meant it's designed to be read with

00:05:22,140 --> 00:05:27,840
said and awk so one of the nice features

00:05:25,530 --> 00:05:30,330
of this is it's designed to record a lot

00:05:27,840 --> 00:05:32,910
of trusted metadata about processes you

00:05:30,330 --> 00:05:34,560
can ask the kernel what user ran this

00:05:32,910 --> 00:05:36,720
process where did it come from what

00:05:34,560 --> 00:05:38,610
binary did it run and record that

00:05:36,720 --> 00:05:40,410
information in the journal in a way that

00:05:38,610 --> 00:05:43,080
doesn't just come from the process that

00:05:40,410 --> 00:05:45,000
you're supposedly trusting and it

00:05:43,080 --> 00:05:47,460
candles rotation automatically you don't

00:05:45,000 --> 00:05:50,100
have to run cron jobs to do rotation

00:05:47,460 --> 00:05:52,050
it handles not just time-based but also

00:05:50,100 --> 00:05:55,410
I'm filling up my disk and I'd rather

00:05:52,050 --> 00:05:57,480
have new data than old data and one of

00:05:55,410 --> 00:05:59,190
the really interesting features is it

00:05:57,480 --> 00:06:01,530
handles logging automatically from

00:05:59,190 --> 00:06:02,850
demons so you emit data to standard

00:06:01,530 --> 00:06:04,700
output or standard error and it

00:06:02,850 --> 00:06:06,600
automatically goes into a log without

00:06:04,700 --> 00:06:09,300
necessarily going out of your way to

00:06:06,600 --> 00:06:11,400
call syslog or write to dev log so if

00:06:09,300 --> 00:06:13,800
your program crashes at a system-wide

00:06:11,400 --> 00:06:15,210
level emits random junk on standard

00:06:13,800 --> 00:06:17,820
error you'll actually capture that and

00:06:15,210 --> 00:06:19,130
have some kind of useful error analysis

00:06:17,820 --> 00:06:23,340
and recovery later

00:06:19,130 --> 00:06:25,860
so to necessarily mandate that you must

00:06:23,340 --> 00:06:27,750
use journal T but it's reasonable to say

00:06:25,860 --> 00:06:31,110
you know I've got a persistent journal D

00:06:27,750 --> 00:06:33,180
maybe I don't want syslog so we may in

00:06:31,110 --> 00:06:34,890
the future want to have a package that

00:06:33,180 --> 00:06:37,050
turns on persistent

00:06:34,890 --> 00:06:39,600
journal logging and at the same time

00:06:37,050 --> 00:06:41,520
provide system log daemons so that you

00:06:39,600 --> 00:06:43,889
end up with a

00:06:41,520 --> 00:06:45,780
satisfactory syslog that other things

00:06:43,889 --> 00:06:48,210
depending on system log daemon will be

00:06:45,780 --> 00:06:50,400
satisfied with it has an implementation

00:06:48,210 --> 00:06:52,259
of devlog that's compatible so that way

00:06:50,400 --> 00:06:53,780
you don't necessarily need our syslog if

00:06:52,259 --> 00:06:56,340
you've already got one source of logging

00:06:53,780 --> 00:06:59,789
so that's a fairly simple one that's in

00:06:56,340 --> 00:07:02,550
user choice that's pretty easy log in DS

00:06:59,789 --> 00:07:07,229
been pretty widely discussed but one of

00:07:02,550 --> 00:07:09,569
the key details we actually show up as

00:07:07,229 --> 00:07:11,970
busy or idle or disconnected instead of

00:07:09,569 --> 00:07:14,970
apparently there until you try to send a

00:07:11,970 --> 00:07:17,370
message then this will nicely clean that

00:07:14,970 --> 00:07:19,770
up and it doesn't have to put in genome

00:07:17,370 --> 00:07:22,319
specific here's how you inhibit suspend

00:07:19,770 --> 00:07:25,259
or here's how you sis inhibit idle it

00:07:22,319 --> 00:07:28,020
can ask system D to handle inhibition

00:07:25,259 --> 00:07:29,490
across any number of desktops the same

00:07:28,020 --> 00:07:31,949
thing goes for the desktop itself

00:07:29,490 --> 00:07:33,690
effectively don't try to suspend until

00:07:31,949 --> 00:07:35,490
the desktop has gone idle and locked to

00:07:33,690 --> 00:07:37,110
the screen so you don't have a race

00:07:35,490 --> 00:07:40,919
condition of you can wake up and see

00:07:37,110 --> 00:07:42,960
screen contents so this is another case

00:07:40,919 --> 00:07:44,849
where we're likely to have a number of

00:07:42,960 --> 00:07:46,710
individual transitions in the future

00:07:44,849 --> 00:07:49,110
where some of the latest desktop

00:07:46,710 --> 00:07:51,360
environments use login D already a lot

00:07:49,110 --> 00:07:53,610
of others have not yet moved to login D

00:07:51,360 --> 00:07:55,889
so we have issues like double suspend

00:07:53,610 --> 00:07:58,469
problems where the desktop suspends and

00:07:55,889 --> 00:08:00,750
system visa spins so you wake up and go

00:07:58,469 --> 00:08:02,279
right back to sleep the first time so

00:08:00,750 --> 00:08:05,190
it's something we're going to want to

00:08:02,279 --> 00:08:07,469
fix in desktop environments - if not

00:08:05,190 --> 00:08:09,870
rely on login D at least be aware of

00:08:07,469 --> 00:08:12,000
login D and say ok if it's around then

00:08:09,870 --> 00:08:14,699
I'll delegate suspend resume to that and

00:08:12,000 --> 00:08:17,130
just handle taking an inhibitor lock or

00:08:14,699 --> 00:08:19,979
delay to get some work done before

00:08:17,130 --> 00:08:22,529
suspending one that I don't think that

00:08:19,979 --> 00:08:24,240
has seen any discussion at all is what

00:08:22,529 --> 00:08:26,279
the anemonefish should look like in

00:08:24,240 --> 00:08:27,810
light of system D we've talked a little

00:08:26,279 --> 00:08:29,610
bit about oh and it ramifies should

00:08:27,810 --> 00:08:32,339
mount user and a couple details like

00:08:29,610 --> 00:08:35,789
that but one thing we could do is

00:08:32,339 --> 00:08:37,829
replace some of the existing somewhat

00:08:35,789 --> 00:08:40,919
intricate shell scripts that we have now

00:08:37,829 --> 00:08:43,860
in the Annette REM of fess with a system

00:08:40,919 --> 00:08:46,430
D based event-driven in it so right now

00:08:43,860 --> 00:08:46,430
we can handle

00:08:55,260 --> 00:09:02,250
a faux copy of systemd in order to

00:08:59,940 --> 00:09:04,740
cleanly shut unmount the root filesystem

00:09:02,250 --> 00:09:06,620
before you shut down we've gotten rid of

00:09:04,740 --> 00:09:09,120
all the processes on the root filesystem

00:09:06,620 --> 00:09:11,250
except for the shutdown in similar

00:09:09,120 --> 00:09:13,230
processes themselves then rather than

00:09:11,250 --> 00:09:15,420
just remounting root read-only are

00:09:13,230 --> 00:09:17,850
similar we can unmount it completely so

00:09:15,420 --> 00:09:19,380
that it has a very clean shutdown so

00:09:17,850 --> 00:09:20,590
that's a really appealing proposition

00:09:19,380 --> 00:09:21,650
especially if you've ever seen

00:09:20,590 --> 00:09:24,060
[Music]

00:09:21,650 --> 00:09:25,980
incorrect shutdowns on your system and

00:09:24,060 --> 00:09:30,630
suddenly had to do an fsck on the next

00:09:25,980 --> 00:09:32,910
Buddhist makes that a lot safer so this

00:09:30,630 --> 00:09:36,060
is one where we have again the option of

00:09:32,910 --> 00:09:37,650
a fairly gradual and slow transition we

00:09:36,060 --> 00:09:39,630
could do one of two things we could

00:09:37,650 --> 00:09:42,780
either start porting and NIT Rama Fest

00:09:39,630 --> 00:09:44,760
tools itself to use system D move some

00:09:42,780 --> 00:09:46,550
of the individual scripts to be service

00:09:44,760 --> 00:09:53,670
files or place them incrementally

00:09:46,550 --> 00:09:54,660
question Ravis tools is looking like a

00:09:53,670 --> 00:09:59,220
bit of a dead end

00:09:54,660 --> 00:10:01,140
frankly so most likely think dragon has

00:09:59,220 --> 00:10:04,170
support for system using system T

00:10:01,140 --> 00:10:08,510
already so what would happen would be

00:10:04,170 --> 00:10:10,740
screen just to drag it as the default I

00:10:08,510 --> 00:10:12,630
have a lot of packages to integrate with

00:10:10,740 --> 00:10:15,180
no reference tools that don't get

00:10:12,630 --> 00:10:17,100
integrate with dragon fair enough so

00:10:15,180 --> 00:10:19,890
yeah that is the large part of the

00:10:17,100 --> 00:10:21,570
transition I think that even though we

00:10:19,890 --> 00:10:24,750
could just switch over to a system that

00:10:21,570 --> 00:10:26,190
already does system D even if in it Rama

00:10:24,750 --> 00:10:28,110
fest tools is not necessarily what we

00:10:26,190 --> 00:10:30,480
want to be using in the future there are

00:10:28,110 --> 00:10:32,910
a dozen or two packages in Debian that

00:10:30,480 --> 00:10:34,860
install an it Ram FS looks and would

00:10:32,910 --> 00:10:36,960
expect to successfully run and they

00:10:34,860 --> 00:10:40,410
don't necessarily all have hooks for

00:10:36,960 --> 00:10:42,000
drackett so we would want to make sure

00:10:40,410 --> 00:10:44,490
that we don't break the existing

00:10:42,000 --> 00:10:45,930
integrated support in the process of

00:10:44,490 --> 00:10:47,160
doing that transition was there a

00:10:45,930 --> 00:10:53,610
question in the middle here somewhere or

00:10:47,160 --> 00:10:57,150
did it get answered yeah actually with

00:10:53,610 --> 00:10:59,730
my you know drama Fester's had we

00:10:57,150 --> 00:11:03,900
already are discussing about Draycott or

00:10:59,730 --> 00:11:06,600
in an amethyst rules for deviant I mean

00:11:03,900 --> 00:11:08,230
the main problem is currently from my

00:11:06,600 --> 00:11:10,450
point of view that pupae

00:11:08,230 --> 00:11:13,990
are actually interested in working on

00:11:10,450 --> 00:11:18,000
immigrants as related stuff so if anyone

00:11:13,990 --> 00:11:20,830
is feeling like we could do better or

00:11:18,000 --> 00:11:22,450
get it up and running I would be very

00:11:20,830 --> 00:11:24,490
much interested in getting systemd

00:11:22,450 --> 00:11:26,860
support in in a drama phase so here

00:11:24,490 --> 00:11:28,600
please talk to us fair enough

00:11:26,860 --> 00:11:30,940
so yet there's there's our first call of

00:11:28,600 --> 00:11:32,980
how call for help for the the talk I

00:11:30,940 --> 00:11:35,590
think that's likely to be a common thing

00:11:32,980 --> 00:11:37,360
of a lot of these are faster if somebody

00:11:35,590 --> 00:11:39,430
else is helping speaking from experience

00:11:37,360 --> 00:11:41,650
and knit REM FS is a really interesting

00:11:39,430 --> 00:11:43,930
environment to work on especially

00:11:41,650 --> 00:11:46,090
learning a lot about the boot properties

00:11:43,930 --> 00:11:49,300
of the system so you might enjoy it give

00:11:46,090 --> 00:11:53,250
it a shot it's fun in it remember fest

00:11:49,300 --> 00:11:55,420
tools maintainer is shaking his head but

00:11:53,250 --> 00:11:57,780
anywhere my Fest is fun I can't speak

00:11:55,420 --> 00:12:00,610
for Antrim FS tools but Antrim FS is fun

00:11:57,780 --> 00:12:01,960
so going in a bit of a different

00:12:00,610 --> 00:12:04,360
direction this is one that's actually

00:12:01,960 --> 00:12:05,950
been around longer than system D but has

00:12:04,360 --> 00:12:08,920
more recently been integrated into

00:12:05,950 --> 00:12:10,810
system D and used to enable various

00:12:08,920 --> 00:12:12,850
interesting functionality is in SS my

00:12:10,810 --> 00:12:15,280
host name so one of the interesting

00:12:12,850 --> 00:12:16,660
problems in Debian is how many edits do

00:12:15,280 --> 00:12:19,300
you need to make if you want to change

00:12:16,660 --> 00:12:21,490
the system hostname you need Etsy hosts

00:12:19,300 --> 00:12:22,990
Etsy host name any number of other

00:12:21,490 --> 00:12:25,210
places where the host names been

00:12:22,990 --> 00:12:27,280
hard-coded it would be really lovely if

00:12:25,210 --> 00:12:31,420
there were only one of those in Etsy

00:12:27,280 --> 00:12:33,940
host name and the NSS my host name just

00:12:31,420 --> 00:12:37,120
provides name resolution for local host

00:12:33,940 --> 00:12:39,160
local host dot local domain and the host

00:12:37,120 --> 00:12:41,710
name itself to make sure that they

00:12:39,160 --> 00:12:44,560
resolve two sensible IP addresses that

00:12:41,710 --> 00:12:46,420
you can access the local host with so

00:12:44,560 --> 00:12:48,820
it's a fairly simple thing it would be

00:12:46,420 --> 00:12:51,250
easy to install by default this is one

00:12:48,820 --> 00:12:53,470
where the only transition needed is why

00:12:51,250 --> 00:12:55,030
are we not already doing this this seems

00:12:53,470 --> 00:12:57,460
like it would be really handy and

00:12:55,030 --> 00:12:59,890
eliminate the need to have duplicate

00:12:57,460 --> 00:13:01,120
configuration and Etsy hosts and anytime

00:12:59,890 --> 00:13:02,620
we can cut down on duplicate

00:13:01,120 --> 00:13:07,320
configuration that seems like a feature

00:13:02,620 --> 00:13:07,320
it's also ridiculously tiny question

00:13:10,079 --> 00:13:15,999
does does this help with the problem of

00:13:12,730 --> 00:13:20,069
something like postfix permitting mail

00:13:15,999 --> 00:13:23,649
to my host name do you see what I mean

00:13:20,069 --> 00:13:26,829
postfix had mail handling for your host

00:13:23,649 --> 00:13:29,199
name I don't know the details of that

00:13:26,829 --> 00:13:30,399
problem so I'm not entirely sure if the

00:13:29,199 --> 00:13:32,410
issue is that it can't successfully

00:13:30,399 --> 00:13:35,259
figure out that the host name is in fact

00:13:32,410 --> 00:13:36,999
local then it may help especially if it

00:13:35,259 --> 00:13:39,189
has problems when the network interface

00:13:36,999 --> 00:13:41,439
is down as opposed to up that's the

00:13:39,189 --> 00:13:43,660
other nice feature of this is that it

00:13:41,439 --> 00:13:46,439
will successfully resolve your host name

00:13:43,660 --> 00:13:48,929
even if all external interfaces and

00:13:46,439 --> 00:13:51,339
everything other than localhost are down

00:13:48,929 --> 00:13:53,220
so you don't have to rely on your host

00:13:51,339 --> 00:13:54,790
name being in dns or otherwise

00:13:53,220 --> 00:13:58,119
associated with some particular

00:13:54,790 --> 00:13:59,619
interface beyond that I don't know the

00:13:58,119 --> 00:14:02,860
details of that particular problem sorry

00:13:59,619 --> 00:14:05,350
so this seems like a fairly I hope

00:14:02,860 --> 00:14:07,420
uncontroversial case where perhaps we

00:14:05,350 --> 00:14:09,639
could just get this into standard or

00:14:07,420 --> 00:14:12,519
better and start using it by default and

00:14:09,639 --> 00:14:17,199
eventually drop it's the default Etsy

00:14:12,519 --> 00:14:19,720
hosts in favor of this so to go from

00:14:17,199 --> 00:14:22,029
hopefully relatively uncontroversial to

00:14:19,720 --> 00:14:24,000
the other end of the spectrum system the

00:14:22,029 --> 00:14:27,339
network be

00:14:24,000 --> 00:14:31,050
long long ago in a flame war far far

00:14:27,339 --> 00:14:34,600
away we talked about Network manager so

00:14:31,050 --> 00:14:37,930
yes one interesting thing is that

00:14:34,600 --> 00:14:40,630
network manager got a lot of fairly

00:14:37,930 --> 00:14:43,660
legitimate flack for being a kind of

00:14:40,630 --> 00:14:45,399
desktop only to love oh I can bring up

00:14:43,660 --> 00:14:47,529
network interfaces beautifully if you

00:14:45,399 --> 00:14:50,800
have an Ethernet interface or a cell

00:14:47,529 --> 00:14:53,500
phone interface or a Wi-Fi interface but

00:14:50,800 --> 00:14:56,050
if you have a a bridge or a bonding

00:14:53,500 --> 00:14:58,120
interface or a VLAN or really anything

00:14:56,050 --> 00:15:00,010
non-trivial II complicated network

00:14:58,120 --> 00:15:02,470
manager was not the tool for the job and

00:15:00,010 --> 00:15:03,760
there was always discussion of Oh we'll

00:15:02,470 --> 00:15:05,890
get around to that at some point in the

00:15:03,760 --> 00:15:07,450
future but in fairness it did the job it

00:15:05,890 --> 00:15:09,880
was intended to do which is I want to

00:15:07,450 --> 00:15:11,529
plug in my wireless or wired interface

00:15:09,880 --> 00:15:13,500
and have things more or less just work

00:15:11,529 --> 00:15:16,000
on a laptop and it kind of did that

00:15:13,500 --> 00:15:18,310
network D went the completely different

00:15:16,000 --> 00:15:20,770
direction that is not its initial target

00:15:18,310 --> 00:15:23,140
it's trying to handle servers virtual

00:15:20,770 --> 00:15:25,360
machines and similar configurations so

00:15:23,140 --> 00:15:27,610
it does handle bridging bonding

00:15:25,360 --> 00:15:30,100
containers tunnels VLANs all of those

00:15:27,610 --> 00:15:32,260
types of things very well actually it's

00:15:30,100 --> 00:15:35,080
working on support for wireless

00:15:32,260 --> 00:15:37,240
configuration there's a plan for an IWD

00:15:35,080 --> 00:15:39,700
to handle wireless networking and

00:15:37,240 --> 00:15:42,430
integrate that with network D but one of

00:15:39,700 --> 00:15:44,800
the big goals here was network manager

00:15:42,430 --> 00:15:46,810
always spawned off other tools so it

00:15:44,800 --> 00:15:49,510
would run D H client in order to get

00:15:46,810 --> 00:15:51,670
DHCP it would run DNS mask in order to

00:15:49,510 --> 00:15:55,240
run a DHCP server and get a network

00:15:51,670 --> 00:15:58,060
question and the horrifying thing about

00:15:55,240 --> 00:16:00,459
th client is it but because it uses raw

00:15:58,060 --> 00:16:04,720
sockets it puts your network interface

00:16:00,459 --> 00:16:06,610
in promiscuous mode all the time I I

00:16:04,720 --> 00:16:08,829
agree with you completely other than

00:16:06,610 --> 00:16:15,250
that you said the horrifying thing about

00:16:08,829 --> 00:16:20,290
BH quiet oh well yeah but yes exactly so

00:16:15,250 --> 00:16:23,230
th client is it gets the job done more

00:16:20,290 --> 00:16:24,940
or less but it's difficult to fork an

00:16:23,230 --> 00:16:27,279
exec a tool and monitor its progress

00:16:24,940 --> 00:16:29,770
when you're trying to interactively work

00:16:27,279 --> 00:16:31,690
with it and find out status of the

00:16:29,770 --> 00:16:33,520
interface see when it goes down deal

00:16:31,690 --> 00:16:35,980
with all those types of information you

00:16:33,520 --> 00:16:37,690
get very little feedback and network

00:16:35,980 --> 00:16:39,670
manager does have a tendency to

00:16:37,690 --> 00:16:41,850
failure modes were just oh look the

00:16:39,670 --> 00:16:44,020
interface went down it's especially

00:16:41,850 --> 00:16:47,050
infuriating infuriating when the log

00:16:44,020 --> 00:16:50,160
says network interface draw brought down

00:16:47,050 --> 00:16:53,730
by user choice no it did not

00:16:50,160 --> 00:16:57,220
I'm the user and I did not choose that

00:16:53,730 --> 00:16:59,830
so I one of the nice things about

00:16:57,220 --> 00:17:02,320
network ADIZ it has a built-in DHCP

00:16:59,830 --> 00:17:05,680
client and server as a library rather

00:17:02,320 --> 00:17:07,360
than as a separate tool and one very

00:17:05,680 --> 00:17:09,610
lovely side effect of this is that they

00:17:07,360 --> 00:17:12,250
put in all of the support that other

00:17:09,610 --> 00:17:13,930
platforms have had for a while that you

00:17:12,250 --> 00:17:15,610
shouldn't take seconds to bring up an

00:17:13,930 --> 00:17:18,069
interface you should take milliseconds

00:17:15,610 --> 00:17:19,990
to bring up an interface and in fact on

00:17:18,069 --> 00:17:22,930
virtual machines it brings it up in

00:17:19,990 --> 00:17:24,459
fractions of a millisecond on physical

00:17:22,930 --> 00:17:26,980
Hardware it brings it up and I believe

00:17:24,459 --> 00:17:28,660
tens of milliseconds so that's certainly

00:17:26,980 --> 00:17:30,490
appealing to bring up an interface that

00:17:28,660 --> 00:17:32,650
quickly it means if you have a transient

00:17:30,490 --> 00:17:34,630
interface that is not overly reliable

00:17:32,650 --> 00:17:36,430
you'll actually get useful connectivity

00:17:34,630 --> 00:17:38,440
in the moments when it's up rather than

00:17:36,430 --> 00:17:42,460
oh I see some interface let me try to

00:17:38,440 --> 00:17:45,910
run BH client oh it's gone now so quite

00:17:42,460 --> 00:17:49,300
handy and I would expect in the next

00:17:45,910 --> 00:17:51,370
year to two or three years to see most

00:17:49,300 --> 00:17:53,950
higher-level networking tools like

00:17:51,370 --> 00:17:56,770
network manager conman and other similar

00:17:53,950 --> 00:17:58,960
utilities becoming fairly thin front

00:17:56,770 --> 00:18:02,800
ends on top of something like network D

00:17:58,960 --> 00:18:06,160
and iw D and similar tools so iw D for

00:18:02,800 --> 00:18:08,530
example is likely to work on WPA

00:18:06,160 --> 00:18:10,120
supplicant and rather than going and

00:18:08,530 --> 00:18:12,550
spawning off a demon again it will have

00:18:10,120 --> 00:18:14,560
built-in support so those types of

00:18:12,550 --> 00:18:18,160
things let's build this in let's make it

00:18:14,560 --> 00:18:20,590
reliable so another interesting and

00:18:18,160 --> 00:18:23,020
fairly obscure one actually is managing

00:18:20,590 --> 00:18:26,260
virtual machines there is a machine B

00:18:23,020 --> 00:18:28,360
and it related in SS to resolve the host

00:18:26,260 --> 00:18:30,490
names of those this way if you want to

00:18:28,360 --> 00:18:32,590
spawn off a container then you have

00:18:30,490 --> 00:18:34,240
something tracking I have these three

00:18:32,590 --> 00:18:35,980
containers they have these host names

00:18:34,240 --> 00:18:38,320
they have these IP addresses here's how

00:18:35,980 --> 00:18:40,510
I write route packets to them so if you

00:18:38,320 --> 00:18:42,580
want to containerize a set of services

00:18:40,510 --> 00:18:45,070
on your system and say here's this

00:18:42,580 --> 00:18:47,320
container here's this container machine

00:18:45,070 --> 00:18:49,600
can machine D and then a related to a

00:18:47,320 --> 00:18:51,040
machine control will manage those for

00:18:49,600 --> 00:18:52,630
you and the

00:18:51,040 --> 00:18:54,250
thing is they will be brought down when

00:18:52,630 --> 00:18:55,750
you bring down the system you can set it

00:18:54,250 --> 00:18:57,940
up so that they're brought up with the

00:18:55,750 --> 00:18:59,860
system and their host names will always

00:18:57,940 --> 00:19:01,810
be nicely resolved again without needing

00:18:59,860 --> 00:19:04,660
a local DNS server so this is quite

00:19:01,810 --> 00:19:06,130
handy one that just went in in the

00:19:04,660 --> 00:19:09,130
version of system D that was released

00:19:06,130 --> 00:19:10,870
yesterday or today I believe was system

00:19:09,130 --> 00:19:12,730
D resolve D which is actually a local

00:19:10,870 --> 00:19:15,160
caching dns resolver that fits with

00:19:12,730 --> 00:19:17,290
network dean so again you're bringing up

00:19:15,160 --> 00:19:19,150
network interfaces you want dns to more

00:19:17,290 --> 00:19:22,270
or less magically work whether you have

00:19:19,150 --> 00:19:24,130
a VPN or a VLAN or similar resolve D is

00:19:22,270 --> 00:19:26,920
designed to handle that case again

00:19:24,130 --> 00:19:30,570
replacing tools like DNS masks or

00:19:26,920 --> 00:19:34,330
similar and there is an Associated NSS

00:19:30,570 --> 00:19:35,860
module for this as well so the idea here

00:19:34,330 --> 00:19:37,840
would be this rather than being

00:19:35,860 --> 00:19:40,150
associated with one particular interface

00:19:37,840 --> 00:19:42,400
this would be running all the time

00:19:40,150 --> 00:19:44,710
across several interfaces notice as they

00:19:42,400 --> 00:19:46,600
come and go and deal with oh wait I

00:19:44,710 --> 00:19:48,820
can't really resolve that name the same

00:19:46,600 --> 00:19:51,040
way anymore because it was cached on

00:19:48,820 --> 00:19:53,800
this interface so if you've ever run a

00:19:51,040 --> 00:19:55,480
DNS cache and had the problem that well

00:19:53,800 --> 00:19:57,460
wait I've got an entry in my cache for

00:19:55,480 --> 00:19:58,660
when I was on this network but now I'm

00:19:57,460 --> 00:20:02,440
on that network

00:19:58,660 --> 00:20:06,520
hello captive portals then this solves

00:20:02,440 --> 00:20:08,350
that problem quite nicely and as an

00:20:06,520 --> 00:20:10,270
added bonus it has handles link local

00:20:08,350 --> 00:20:12,550
connectivity as well hook up a network

00:20:10,270 --> 00:20:16,000
cable between two systems you don't need

00:20:12,550 --> 00:20:18,430
a vow he you don't need any form of DHCP

00:20:16,000 --> 00:20:21,760
server you just get connectivity so

00:20:18,430 --> 00:20:24,160
that's handy so one thing that I think

00:20:21,760 --> 00:20:27,640
everybody's heard to death from system D

00:20:24,160 --> 00:20:29,050
is Osaka activation is you know the wave

00:20:27,640 --> 00:20:30,790
of the future and everything should be

00:20:29,050 --> 00:20:32,590
using this so this is definitely one

00:20:30,790 --> 00:20:34,720
that had no shortage of discussion and

00:20:32,590 --> 00:20:36,370
hype but I think one thing that gets

00:20:34,720 --> 00:20:38,830
missed in a lot of that discussion is

00:20:36,370 --> 00:20:40,600
what exactly it's there for and there

00:20:38,830 --> 00:20:42,760
was a there's been a lot of mention of

00:20:40,600 --> 00:20:45,190
oh you can bring up a service as needed

00:20:42,760 --> 00:20:47,140
and if it's infrequently used you don't

00:20:45,190 --> 00:20:49,450
have to bring it up but I think one

00:20:47,140 --> 00:20:51,250
piece that's missed here is that this is

00:20:49,450 --> 00:20:53,830
really about eliminating explicit

00:20:51,250 --> 00:20:55,600
dependencies so rather than saying let

00:20:53,830 --> 00:20:57,670
me build a service that depends on

00:20:55,600 --> 00:20:59,620
such-and-such other service and when

00:20:57,670 --> 00:21:01,930
that service is done being brought up I

00:20:59,620 --> 00:21:03,910
can start you can simply bring up

00:21:01,930 --> 00:21:04,870
multiple services that depend on each

00:21:03,910 --> 00:21:06,460
other in peril

00:21:04,870 --> 00:21:08,350
because all of their sockets are

00:21:06,460 --> 00:21:10,360
available before the service even starts

00:21:08,350 --> 00:21:12,549
and then you simply block if you try to

00:21:10,360 --> 00:21:14,320
talk to the service so rather than

00:21:12,549 --> 00:21:16,450
having you know we've have these lovely

00:21:14,320 --> 00:21:18,190
graphs of parallel boot-up where we say

00:21:16,450 --> 00:21:20,169
first we launch this then we launch

00:21:18,190 --> 00:21:22,450
these five things and these twelve

00:21:20,169 --> 00:21:24,009
things we do them in nice little batches

00:21:22,450 --> 00:21:26,230
but we still end up with a bunch of

00:21:24,009 --> 00:21:28,090
bottlenecks the same graphs in the face

00:21:26,230 --> 00:21:29,950
of socket activation tend to look like

00:21:28,090 --> 00:21:31,450
we start this thing and then we

00:21:29,950 --> 00:21:33,700
immediately start this thing that

00:21:31,450 --> 00:21:35,499
depends on it and they can start up in

00:21:33,700 --> 00:21:36,940
parallel and only when they start

00:21:35,499 --> 00:21:38,950
talking to each other do they start

00:21:36,940 --> 00:21:40,899
waiting on each other so that's a new

00:21:38,950 --> 00:21:43,960
degree of parallelism we have not been

00:21:40,899 --> 00:21:46,090
able to do with the existing mechanisms

00:21:43,960 --> 00:21:51,549
in Sisyphean it or for that matter

00:21:46,090 --> 00:21:53,769
upstart so another one that is not yet

00:21:51,549 --> 00:21:56,110
in Debian or in the version of system D

00:21:53,769 --> 00:22:01,119
that's available in Debian and is in

00:21:56,110 --> 00:22:03,429
development upstream is KD bus so system

00:22:01,119 --> 00:22:05,649
D has a fairly close relationship with D

00:22:03,429 --> 00:22:08,230
bus and that it launches it as early as

00:22:05,649 --> 00:22:10,690
it can and it supports activation of

00:22:08,230 --> 00:22:13,090
services via D bus as in I have a

00:22:10,690 --> 00:22:14,860
service that I'm providing this service

00:22:13,090 --> 00:22:18,129
if you try to connect to it on the bus

00:22:14,860 --> 00:22:20,409
launch this demo and that's been a

00:22:18,129 --> 00:22:22,720
fairly large problem for system D in

00:22:20,409 --> 00:22:26,710
trying to have circular dependencies

00:22:22,720 --> 00:22:28,720
from PID 1 to D bus on top of that D bus

00:22:26,710 --> 00:22:32,259
itself has a lot of overhead if you want

00:22:28,720 --> 00:22:34,210
to send a message from demon a to daemon

00:22:32,259 --> 00:22:36,970
be using D bus you're going to have

00:22:34,210 --> 00:22:38,440
approximately for context which is bare

00:22:36,970 --> 00:22:41,679
minimum just to get a message back and

00:22:38,440 --> 00:22:44,289
forth KD bus eliminates that by going

00:22:41,679 --> 00:22:47,950
treating it as a new kernel multicast

00:22:44,289 --> 00:22:49,570
messaging bus instead and does all sorts

00:22:47,950 --> 00:22:52,119
of clever tricks like using bloom

00:22:49,570 --> 00:22:54,190
filters to say okay I'm gonna broadcast

00:22:52,119 --> 00:22:56,379
to just the things that care rather than

00:22:54,190 --> 00:23:00,070
to everything on the system but without

00:22:56,379 --> 00:23:03,190
needing a daemon to moderate the limited

00:23:00,070 --> 00:23:06,490
broadcast or multicast so this is

00:23:03,190 --> 00:23:09,429
actually available now in an out of tree

00:23:06,490 --> 00:23:12,519
kernel module and it's being developed

00:23:09,429 --> 00:23:15,539
in the system D code base for the pieces

00:23:12,519 --> 00:23:18,759
needed in user space to manage this it's

00:23:15,539 --> 00:23:21,489
definitely too late for Jesse to

00:23:18,759 --> 00:23:23,499
migrated over to using KD bus instead of

00:23:21,489 --> 00:23:25,329
D bus demon that would be far too late

00:23:23,499 --> 00:23:28,389
at this stage we would hit run up

00:23:25,329 --> 00:23:30,639
against the freeze however it seems very

00:23:28,389 --> 00:23:32,889
likely that in the course of Jessie +1

00:23:30,639 --> 00:23:35,589
we're going to migrate entirely from D

00:23:32,889 --> 00:23:37,959
bus demon over to KD bus at least on

00:23:35,589 --> 00:23:44,759
architectures that have it available so

00:23:37,959 --> 00:23:44,759
on all Linux architectures question yep

00:23:51,980 --> 00:23:58,720
so in in this case so a lot of packages

00:23:55,460 --> 00:24:01,760
may use test suites which use private

00:23:58,720 --> 00:24:04,730
deepest instances private system buses

00:24:01,760 --> 00:24:06,110
or private session buses for test Suites

00:24:04,730 --> 00:24:07,250
so it doesn't interfere with the system

00:24:06,110 --> 00:24:09,860
when you're actually trying to send

00:24:07,250 --> 00:24:11,990
messages between processes in a test

00:24:09,860 --> 00:24:16,280
suite and how would that work in this

00:24:11,990 --> 00:24:18,080
case so if you Kady bus is not a this is

00:24:16,280 --> 00:24:19,970
not like for example the control groups

00:24:18,080 --> 00:24:23,060
case in system D where there is one and

00:24:19,970 --> 00:24:26,660
only system instance of this system D

00:24:23,060 --> 00:24:29,540
runs the system D bus but and a system D

00:24:26,660 --> 00:24:32,750
user session would run moderate the user

00:24:29,540 --> 00:24:35,540
D bus but you can with a KT bus

00:24:32,750 --> 00:24:38,030
available in the kernel create a new bus

00:24:35,540 --> 00:24:40,730
master for a new bus and then other

00:24:38,030 --> 00:24:43,130
people can talk on that bus you do not

00:24:40,730 --> 00:24:44,900
even fact even I believe you can do that

00:24:43,130 --> 00:24:46,880
without root privileges or at least you

00:24:44,900 --> 00:24:49,100
can set the permissions on KD bus so

00:24:46,880 --> 00:24:51,410
that that's possible you simply create a

00:24:49,100 --> 00:24:53,660
new bus of which you are automatically

00:24:51,410 --> 00:24:55,790
the bus master and get other people to

00:24:53,660 --> 00:24:57,950
connect to it and the various D bus

00:24:55,790 --> 00:25:00,560
libraries have all been ported so that

00:24:57,950 --> 00:25:03,800
they can talk to KD bus as a socket type

00:25:00,560 --> 00:25:05,360
as opposed to talking to D bus demon so

00:25:03,800 --> 00:25:07,580
there should not be any missing

00:25:05,360 --> 00:25:09,410
functionality there if there is that is

00:25:07,580 --> 00:25:12,410
a key use case that you can run a

00:25:09,410 --> 00:25:14,750
private bus so I would recommend trying

00:25:12,410 --> 00:25:16,580
that out with KD bus poke at the

00:25:14,750 --> 00:25:18,020
available third-party module make sure

00:25:16,580 --> 00:25:20,210
that a package you care about that you

00:25:18,020 --> 00:25:22,580
creates a private bus is capable of

00:25:20,210 --> 00:25:25,100
doing so but that should work and if it

00:25:22,580 --> 00:25:27,860
doesn't we'll fix it so that it does the

00:25:25,100 --> 00:25:29,720
libraries really aren't ported yet sorry

00:25:27,860 --> 00:25:32,360
where was that ah

00:25:29,720 --> 00:25:34,490
the library reporting is somewhat in

00:25:32,360 --> 00:25:37,130
progress I know the client libraries

00:25:34,490 --> 00:25:40,790
work I would not be overly surprised if

00:25:37,130 --> 00:25:43,100
the pieces needed to run a diva's server

00:25:40,790 --> 00:25:45,710
are much more go poke at the files in

00:25:43,100 --> 00:25:50,180
Devon sis and similar yourself which

00:25:45,710 --> 00:25:53,360
client libraries there are out of tree

00:25:50,180 --> 00:25:56,030
patches for D bus and then there are in

00:25:53,360 --> 00:25:57,770
tree patches for the Lib system DD bus

00:25:56,030 --> 00:26:01,100
that is supposed to be more or less

00:25:57,770 --> 00:26:04,450
compatible yeah those patches are not in

00:26:01,100 --> 00:26:06,430
a very good State for Lib device or

00:26:04,450 --> 00:26:08,380
cube which is what everything is using

00:26:06,430 --> 00:26:09,730
more that's one of those two so to say

00:26:08,380 --> 00:26:12,580
that you could just go into this today's

00:26:09,730 --> 00:26:14,230
a bit premature I do know this is

00:26:12,580 --> 00:26:15,910
currently out of tree and this is one of

00:26:14,230 --> 00:26:17,020
the main blockers for getting it in tree

00:26:15,910 --> 00:26:19,300
is making sure all the various

00:26:17,020 --> 00:26:20,950
implementations are stable I had the

00:26:19,300 --> 00:26:22,870
impression the G Lib bits are further

00:26:20,950 --> 00:26:24,610
along though I was aware the Lib D bust

00:26:22,870 --> 00:26:25,900
bits were not okay we should talk more

00:26:24,610 --> 00:26:27,340
about that I'd be interested to know

00:26:25,900 --> 00:26:29,260
what it would take to get that in shape

00:26:27,340 --> 00:26:30,730
but again one of many reasons why I

00:26:29,260 --> 00:26:32,170
would not suggest we try to do any of

00:26:30,730 --> 00:26:34,300
this for Jessie or rather than Jessie

00:26:32,170 --> 00:26:35,800
plus one I think by the time Jessie plus

00:26:34,300 --> 00:26:37,960
one rolls around we will have this all

00:26:35,800 --> 00:26:39,220
sorted out but you may have just

00:26:37,960 --> 00:26:40,870
answered my question what are the

00:26:39,220 --> 00:26:44,500
prospects for Katy busting man when

00:26:40,870 --> 00:26:48,100
Linux so two blockers for Katy bus one

00:26:44,500 --> 00:26:50,640
was mem FD which just went into 317 that

00:26:48,100 --> 00:26:53,170
lets you create a temporary in-memory

00:26:50,640 --> 00:26:56,050
chunk of data that is moderated by a

00:26:53,170 --> 00:26:58,090
file descriptor that can then be locked

00:26:56,050 --> 00:27:00,460
so it can't be extended any further and

00:26:58,090 --> 00:27:02,650
then shipped off over a UNIX socket so

00:27:00,460 --> 00:27:05,440
that makes it fairly easy to ship data

00:27:02,650 --> 00:27:08,050
efficiently across the KD bus in large

00:27:05,440 --> 00:27:10,450
quantities that has gone into the kernel

00:27:08,050 --> 00:27:12,670
the other bit is just nailing down the

00:27:10,450 --> 00:27:15,130
API and saying okay this is the thing

00:27:12,670 --> 00:27:16,720
that we want to apply the kernels we

00:27:15,130 --> 00:27:19,210
will never break user space with

00:27:16,720 --> 00:27:21,340
stability guarantee - and I don't

00:27:19,210 --> 00:27:23,590
believe Katy bus is quite there yet we

00:27:21,340 --> 00:27:25,720
need again to nail down a couple of the

00:27:23,590 --> 00:27:29,050
user space libraries make sure they work

00:27:25,720 --> 00:27:31,360
rock-solid and so on so I don't know

00:27:29,050 --> 00:27:33,490
whether that's targeting 318 or whether

00:27:31,360 --> 00:27:36,520
it's more likely it'll hit 319 I'd be

00:27:33,490 --> 00:27:40,270
shocked if it waits till 2021 so I think

00:27:36,520 --> 00:27:45,130
we're likely talking this year or early

00:27:40,270 --> 00:27:47,770
next not last that the statement was I

00:27:45,130 --> 00:27:50,080
thought Lina's had strong objections not

00:27:47,770 --> 00:27:51,850
any more as far as I can tell this was

00:27:50,080 --> 00:27:54,160
more make sure you have it right before

00:27:51,850 --> 00:27:55,740
getting it in but that wasn't a no that

00:27:54,160 --> 00:27:58,140
was I make sure you've got it right

00:27:55,740 --> 00:28:00,850
there were no last I've seen

00:27:58,140 --> 00:28:06,160
philosophical or religious objections to

00:28:00,850 --> 00:28:09,580
KD bus just technical ones all right so

00:28:06,160 --> 00:28:11,950
a couple other items system D makes it

00:28:09,580 --> 00:28:14,440
fairly easy to containerize services and

00:28:11,950 --> 00:28:16,600
in particular oh there's a question yes

00:28:14,440 --> 00:28:18,549
yeah just to point out you can ask

00:28:16,600 --> 00:28:21,279
leanness yourself about it

00:28:18,549 --> 00:28:23,440
yes there is a session with leanness and

00:28:21,279 --> 00:28:25,330
that would be a fine question I suspect

00:28:23,440 --> 00:28:27,399
the answer you'll get is nobody sent me

00:28:25,330 --> 00:28:29,739
patches and says put it in the tree yet

00:28:27,399 --> 00:28:31,659
so because nobody has and they're not

00:28:29,739 --> 00:28:33,309
going to till it's ready but I don't

00:28:31,659 --> 00:28:34,570
know if I would be interested to find

00:28:33,309 --> 00:28:40,809
out if there are strong opinions other

00:28:34,570 --> 00:28:42,609
than that so one interesting bit is its

00:28:40,809 --> 00:28:44,590
frequent people frequently talk about Oh

00:28:42,609 --> 00:28:46,419
systemd is Linux specific and it's only

00:28:44,590 --> 00:28:48,429
ever going to run on Linux well one of

00:28:46,419 --> 00:28:50,080
the big reasons of for that is we have a

00:28:48,429 --> 00:28:52,299
lot of really interesting features in

00:28:50,080 --> 00:28:54,399
Linux for locking down services for

00:28:52,299 --> 00:28:56,519
compartmentalizing services for reducing

00:28:54,399 --> 00:28:58,929
privilege as much as possible and

00:28:56,519 --> 00:29:01,330
systemd goes out of its way to expose

00:28:58,929 --> 00:29:03,820
all of those features that make sense so

00:29:01,330 --> 00:29:05,499
if you want to apply a sec comp filter

00:29:03,820 --> 00:29:08,229
that says you can only make these sis

00:29:05,499 --> 00:29:10,359
calls if you want to apply to reduce the

00:29:08,229 --> 00:29:12,389
set of capabilities you have or say that

00:29:10,359 --> 00:29:14,589
you don't have these file systems

00:29:12,389 --> 00:29:16,330
accessible or these file systems or

00:29:14,589 --> 00:29:18,399
mounted read-only or you have a private

00:29:16,330 --> 00:29:20,259
temp directory or that your entire

00:29:18,399 --> 00:29:21,729
process runs in a separate network

00:29:20,259 --> 00:29:23,649
namespace that is limited to only

00:29:21,729 --> 00:29:25,989
localhost because hey you have no need

00:29:23,649 --> 00:29:28,239
for network access a lot of those types

00:29:25,989 --> 00:29:30,129
of things can be put into a system v

00:29:28,239 --> 00:29:33,099
service file or other types of unit

00:29:30,129 --> 00:29:35,320
files there's a common system d dot exec

00:29:33,099 --> 00:29:37,450
set of directives for how do I run a

00:29:35,320 --> 00:29:39,190
service and it applies to just about

00:29:37,450 --> 00:29:42,129
anything system D is capable of spawning

00:29:39,190 --> 00:29:44,049
off so this makes it really easy if you

00:29:42,129 --> 00:29:45,909
want to wrap a service in a container

00:29:44,049 --> 00:29:48,159
and one of the things I'm hoping that we

00:29:45,909 --> 00:29:51,129
see very incremental e over time in

00:29:48,159 --> 00:29:53,320
Debian is to lock down more services by

00:29:51,129 --> 00:29:55,539
default we want security to be our

00:29:53,320 --> 00:29:57,129
default and if we have a service that

00:29:55,539 --> 00:29:59,679
doesn't need certain privileges it

00:29:57,129 --> 00:30:01,629
shouldn't have them by default so the

00:29:59,679 --> 00:30:03,429
more we could put things in empty change

00:30:01,629 --> 00:30:04,719
routes with no permissions and the only

00:30:03,429 --> 00:30:05,919
thing they can do is listen on the

00:30:04,719 --> 00:30:07,989
network or vice versa

00:30:05,919 --> 00:30:10,509
they can't listen to the network then

00:30:07,989 --> 00:30:14,440
those would be really good defaults for

00:30:10,509 --> 00:30:17,049
us to have and I think as we migrate to

00:30:14,440 --> 00:30:18,489
service files from an it D files we want

00:30:17,049 --> 00:30:20,559
to take a look at some of those

00:30:18,489 --> 00:30:22,869
directives and say ok let's not just do

00:30:20,559 --> 00:30:25,119
the minimal port of an it dot d let's

00:30:22,869 --> 00:30:27,580
start adding more of those lockdown

00:30:25,119 --> 00:30:29,859
features this is likely to be a notable

00:30:27,580 --> 00:30:32,230
feature of the new system D policy in

00:30:29,859 --> 00:30:34,090
Debian policy are a list of

00:30:32,230 --> 00:30:36,549
particular directives that you should

00:30:34,090 --> 00:30:38,410
look out for of should you lock down the

00:30:36,549 --> 00:30:40,510
network should you lock down temp that

00:30:38,410 --> 00:30:45,820
kind of thing the answer is usually yes

00:30:40,510 --> 00:30:48,309
if you can one that I don't think has

00:30:45,820 --> 00:30:51,070
gotten any press at all really is system

00:30:48,309 --> 00:30:53,020
D timer units so system D has

00:30:51,070 --> 00:30:56,110
effectively the functionality of cron

00:30:53,020 --> 00:30:57,970
and more recently Anna cron to make sure

00:30:56,110 --> 00:31:00,820
that you can run sista TSA's on a

00:30:57,970 --> 00:31:03,130
regular basis and an interesting feature

00:31:00,820 --> 00:31:05,350
of this as opposed to cron itself is

00:31:03,130 --> 00:31:07,390
that it's well integrated with system

00:31:05,350 --> 00:31:09,429
these logging service launching

00:31:07,390 --> 00:31:11,470
capabilities and various other pieces

00:31:09,429 --> 00:31:14,620
like that so if you want to say this

00:31:11,470 --> 00:31:17,590
service is run at system startup time or

00:31:14,620 --> 00:31:19,929
on this timer then that's really easy to

00:31:17,590 --> 00:31:21,669
do a system D whereas with cron you

00:31:19,929 --> 00:31:24,960
would need to install a common script

00:31:21,669 --> 00:31:27,429
run from etsion it D and from a crontab

00:31:24,960 --> 00:31:28,960
the other really nice feature of this is

00:31:27,429 --> 00:31:30,549
if you've ever looked at how Anna cron

00:31:28,960 --> 00:31:32,770
works and Anna cron something we

00:31:30,549 --> 00:31:36,220
actually installed by default on laptops

00:31:32,770 --> 00:31:38,230
I believe and if you have an Acron

00:31:36,220 --> 00:31:41,309
installed then you have a cron job

00:31:38,230 --> 00:31:44,049
running daily and weekly and monthly

00:31:41,309 --> 00:31:46,330
that will go check and see if you have

00:31:44,049 --> 00:31:49,570
any cron jobs that need running on an

00:31:46,330 --> 00:31:52,030
Anna cron style basis and go run them

00:31:49,570 --> 00:31:55,090
and even if there is no work to do

00:31:52,030 --> 00:31:56,980
you'll get processes spawning off on a

00:31:55,090 --> 00:31:59,110
regular basis just to see if there's

00:31:56,980 --> 00:32:01,630
work to do so this is a case where

00:31:59,110 --> 00:32:03,970
system D can more easily say okay one of

00:32:01,630 --> 00:32:07,030
the 47 things I'm throwing into a big

00:32:03,970 --> 00:32:09,790
pol loop is the timer so go read a timer

00:32:07,030 --> 00:32:12,610
FD and see if I need to spawn off some

00:32:09,790 --> 00:32:15,520
timer unit so this is nice from the

00:32:12,610 --> 00:32:17,799
perspective of let's wake up as little

00:32:15,520 --> 00:32:21,520
as possible let's improve performance

00:32:17,799 --> 00:32:22,900
and power management a couple of other

00:32:21,520 --> 00:32:25,750
items that have been added recently

00:32:22,900 --> 00:32:27,940
transient service units where you don't

00:32:25,750 --> 00:32:29,110
just want to create a service on the

00:32:27,940 --> 00:32:30,669
full you want you want to create a

00:32:29,110 --> 00:32:32,080
service on the fly not just something

00:32:30,669 --> 00:32:34,750
you've installed but something you're

00:32:32,080 --> 00:32:36,940
launching so if you're a demon that

00:32:34,750 --> 00:32:38,980
launches other services you don't need

00:32:36,940 --> 00:32:40,720
to implement logic for demon management

00:32:38,980 --> 00:32:43,270
and child management yourself you ask

00:32:40,720 --> 00:32:44,710
the system in it even to go launch this

00:32:43,270 --> 00:32:46,739
for me and let me know what goes on with

00:32:44,710 --> 00:32:50,440
it relaunch it if needed

00:32:46,739 --> 00:32:53,320
there is a system users facility to

00:32:50,440 --> 00:32:55,119
declare I need this user as part of my

00:32:53,320 --> 00:32:57,969
system service please create it if it

00:32:55,119 --> 00:32:59,559
doesn't exist yet so one more case where

00:32:57,969 --> 00:33:03,039
we could replace maintainer script

00:32:59,559 --> 00:33:04,450
snippets with a declarative I need this

00:33:03,039 --> 00:33:07,359
user and it should have these properties

00:33:04,450 --> 00:33:09,249
like home directory so this is one where

00:33:07,359 --> 00:33:10,929
we may have an interesting transition in

00:33:09,249 --> 00:33:13,059
the future for how do we handle these

00:33:10,929 --> 00:33:14,919
files in Debian but this one seems

00:33:13,059 --> 00:33:16,479
rather welcomed from a perspective of

00:33:14,919 --> 00:33:21,039
one less thing to put it in a knit

00:33:16,479 --> 00:33:24,099
script and finally there has been a lot

00:33:21,039 --> 00:33:26,769
of work recently to support first boot

00:33:24,099 --> 00:33:29,080
or fresh system configuration as part of

00:33:26,769 --> 00:33:30,039
system D saying well I'm booting up and

00:33:29,080 --> 00:33:31,899
there are some of the things that I

00:33:30,039 --> 00:33:33,729
expect aren't there let me go off and

00:33:31,899 --> 00:33:35,499
create them and one of the really

00:33:33,729 --> 00:33:37,659
interesting things about this is it

00:33:35,499 --> 00:33:40,269
means that with some of the most recent

00:33:37,659 --> 00:33:42,969
changes you can boot up a new container

00:33:40,269 --> 00:33:45,369
with an empty Etsy and it will

00:33:42,969 --> 00:33:47,469
successfully create the small handful of

00:33:45,369 --> 00:33:49,599
files that are actually needed and then

00:33:47,469 --> 00:33:52,440
go launch a service likewise you could

00:33:49,599 --> 00:33:55,299
launch with an empty there and with

00:33:52,440 --> 00:33:57,580
system Dee's unified user approach you

00:33:55,299 --> 00:33:59,259
could just mount user inside of a change

00:33:57,580 --> 00:34:02,379
route and then launch it as a container

00:33:59,259 --> 00:34:03,820
and everything else will just work so

00:34:02,379 --> 00:34:06,369
that's a bit of a whirlwind tour of

00:34:03,820 --> 00:34:09,399
system D features so we've been looking

00:34:06,369 --> 00:34:12,429
a bunch of individual pieces individual

00:34:09,399 --> 00:34:14,859
components case-by-case now I'd like to

00:34:12,429 --> 00:34:17,220
go back up a level and talk about how a

00:34:14,859 --> 00:34:20,889
lot of those components fit together and

00:34:17,220 --> 00:34:23,379
what integration between them can

00:34:20,889 --> 00:34:25,270
provide so I'm going to give a couple of

00:34:23,379 --> 00:34:27,609
examples one of them again I've

00:34:25,270 --> 00:34:29,829
mentioned containers a few times a lot

00:34:27,609 --> 00:34:31,899
of these services were designed a lot of

00:34:29,829 --> 00:34:34,029
the new services in system D were

00:34:31,899 --> 00:34:36,399
designed for the purposes of effectively

00:34:34,029 --> 00:34:38,529
launching containers without having to

00:34:36,399 --> 00:34:40,779
recreate a lot of system configuration

00:34:38,529 --> 00:34:43,270
inside of them or install a full

00:34:40,779 --> 00:34:45,250
separately managed distro inside them

00:34:43,270 --> 00:34:46,629
because right now that is kind of the

00:34:45,250 --> 00:34:49,149
best known method for dealing with

00:34:46,629 --> 00:34:51,039
containers is let me install another

00:34:49,149 --> 00:34:52,500
distro inside the container and manage

00:34:51,039 --> 00:34:56,829
it that way and that's kind of painful

00:34:52,500 --> 00:34:58,900
so the met the machine D if for example

00:34:56,829 --> 00:34:59,980
was created to manage containers the

00:34:58,900 --> 00:35:02,050
dynamic and train

00:34:59,980 --> 00:35:04,600
units were designed so you could spawn

00:35:02,050 --> 00:35:07,119
off a container on the fly as needed the

00:35:04,600 --> 00:35:08,340
network D was designed in large part to

00:35:07,119 --> 00:35:11,170
make sure there was an easy way to

00:35:08,340 --> 00:35:14,710
provide network services to a container

00:35:11,170 --> 00:35:17,530
the host name resolution and dynamic DNS

00:35:14,710 --> 00:35:19,210
handling the DNS caching resolver was

00:35:17,530 --> 00:35:21,910
designed largely to say well why do I

00:35:19,210 --> 00:35:24,300
have several independent containers all

00:35:21,910 --> 00:35:27,490
talking to my upstream DNS server

00:35:24,300 --> 00:35:29,670
handling service lockdown handling

00:35:27,490 --> 00:35:32,740
journal d with logging per container

00:35:29,670 --> 00:35:35,530
handling minimal file system again the

00:35:32,740 --> 00:35:37,420
first boot work the sis user's work and

00:35:35,530 --> 00:35:39,880
for that matter spawning up an entire

00:35:37,420 --> 00:35:41,890
container on demand including its own in

00:35:39,880 --> 00:35:44,230
it just because hey I got a connection

00:35:41,890 --> 00:35:47,040
on a socket so let me spin up a new

00:35:44,230 --> 00:35:50,950
container to run this web service

00:35:47,040 --> 00:35:52,960
another case is again we'd really like

00:35:50,950 --> 00:35:54,730
to kill off maintainer scripts this is a

00:35:52,960 --> 00:35:57,040
pattern we've had in Debian for a really

00:35:54,730 --> 00:36:00,369
long time anything any time we can take

00:35:57,040 --> 00:36:02,859
dynamic scripting out of pre instanced

00:36:00,369 --> 00:36:05,080
pre REM post REM and put them in some

00:36:02,859 --> 00:36:07,990
declarative configuration file that says

00:36:05,080 --> 00:36:11,230
I need this make it happen and put that

00:36:07,990 --> 00:36:13,780
in the package or put that in some Etsy

00:36:11,230 --> 00:36:16,090
foodie directory where you run a trigger

00:36:13,780 --> 00:36:17,890
all of those types of things

00:36:16,090 --> 00:36:19,510
you know triggers are one-step but they

00:36:17,890 --> 00:36:21,820
still run a script it's even nicer when

00:36:19,510 --> 00:36:25,090
we have configuration files of some kind

00:36:21,820 --> 00:36:27,040
so this is really handy and again a

00:36:25,090 --> 00:36:29,950
number of tools out of system D are

00:36:27,040 --> 00:36:32,350
designed in that direction a couple

00:36:29,950 --> 00:36:34,540
others we've been talking about power

00:36:32,350 --> 00:36:36,880
management a couple times at Deb conf

00:36:34,540 --> 00:36:38,680
and one of the goals here is well why

00:36:36,880 --> 00:36:42,250
would you need more than one event loop

00:36:38,680 --> 00:36:44,290
on a system to run these various system

00:36:42,250 --> 00:36:46,900
demons that all need to spawn or wake up

00:36:44,290 --> 00:36:50,890
for various purposes so everything from

00:36:46,900 --> 00:36:52,960
timers to sockets to dependencies to

00:36:50,890 --> 00:36:55,510
signals to any other any number of other

00:36:52,960 --> 00:36:58,060
things that daemons need all get thrown

00:36:55,510 --> 00:36:59,980
into one big wake up when I have work to

00:36:58,060 --> 00:37:02,260
do and a lot of features that have begun

00:36:59,980 --> 00:37:04,660
into the kernel have been for the

00:37:02,260 --> 00:37:06,460
specific purpose of let me stop polling

00:37:04,660 --> 00:37:09,400
for this let me create a file descriptor

00:37:06,460 --> 00:37:11,200
I can throw into a select loop instead

00:37:09,400 --> 00:37:13,810
so a number of those features have

00:37:11,200 --> 00:37:16,480
actually been driven by system D

00:37:13,810 --> 00:37:17,890
and the last big unified use case I'd

00:37:16,480 --> 00:37:20,290
like to talk about is system to user

00:37:17,890 --> 00:37:22,210
sessions this is likely to be a rather

00:37:20,290 --> 00:37:25,350
notable transition that we'll be going

00:37:22,210 --> 00:37:28,060
through in the future so we want to

00:37:25,350 --> 00:37:29,830
handle all of these various graphical

00:37:28,060 --> 00:37:33,220
session startups there are tools like

00:37:29,830 --> 00:37:35,650
start KDE organ oum session or various

00:37:33,220 --> 00:37:36,880
other tools for other graphical

00:37:35,650 --> 00:37:38,500
environments and they're designed to

00:37:36,880 --> 00:37:40,570
spawn off a bunch of processes and

00:37:38,500 --> 00:37:42,670
handle them in order and handle

00:37:40,570 --> 00:37:44,290
dependencies and that kind of thing that

00:37:42,670 --> 00:37:46,960
sounds a lot like what systemd is

00:37:44,290 --> 00:37:49,150
supposed to do and that's exactly what

00:37:46,960 --> 00:37:51,760
system do user sessions are for let's

00:37:49,150 --> 00:37:53,950
replace those with launching services

00:37:51,760 --> 00:37:56,050
out of a clean environment without

00:37:53,950 --> 00:37:58,360
necessarily handwriting it for each

00:37:56,050 --> 00:38:00,670
different environment and handling

00:37:58,360 --> 00:38:02,430
respawning them if they fail handling

00:38:00,670 --> 00:38:04,810
spawning new ones that get installed

00:38:02,430 --> 00:38:06,460
handling the parallelism and the socket

00:38:04,810 --> 00:38:09,010
activation and in general trying to

00:38:06,460 --> 00:38:12,490
bring up your desktop quicker and more

00:38:09,010 --> 00:38:15,580
reliably so this also has the advantage

00:38:12,490 --> 00:38:17,350
that most of the session the graphical

00:38:15,580 --> 00:38:20,590
session scripts don't tend to get right

00:38:17,350 --> 00:38:23,920
which is per user rather than per login

00:38:20,590 --> 00:38:26,770
services so I don't need one foo agent

00:38:23,920 --> 00:38:29,290
per type I've time I've logged into the

00:38:26,770 --> 00:38:32,530
system I need one per user one for me

00:38:29,290 --> 00:38:34,930
across the whole system so one thing

00:38:32,530 --> 00:38:37,720
that has not been looked at actually by

00:38:34,930 --> 00:38:40,180
as far as I can tell anybody in the

00:38:37,720 --> 00:38:42,220
system Dior distro community is the idea

00:38:40,180 --> 00:38:44,680
of unifying user sessions a little bit

00:38:42,220 --> 00:38:46,510
genome is talking about replacing genome

00:38:44,680 --> 00:38:48,970
session with system D KDE will be

00:38:46,510 --> 00:38:53,170
replacing start KDE with with system D

00:38:48,970 --> 00:38:56,410
we have X 11 X session D to launch an X

00:38:53,170 --> 00:38:58,810
session so it would be really helpful if

00:38:56,410 --> 00:39:01,630
all of these are not just separate

00:38:58,810 --> 00:39:05,140
mechanisms built on top of system D but

00:39:01,630 --> 00:39:07,150
are instead one big user session that is

00:39:05,140 --> 00:39:09,520
configurable for what am I trying to

00:39:07,150 --> 00:39:11,770
launch which then means you can as a

00:39:09,520 --> 00:39:13,180
user have your own services that

00:39:11,770 --> 00:39:15,910
integrate with the environment and

00:39:13,180 --> 00:39:17,200
Debian can install system-wide services

00:39:15,910 --> 00:39:19,660
that integrate with the environment as

00:39:17,200 --> 00:39:21,400
well things like auto starts so this is

00:39:19,660 --> 00:39:24,330
one case where we may want to look at

00:39:21,400 --> 00:39:27,100
putting it a little bit more unification

00:39:24,330 --> 00:39:27,670
so we've covered some of the high-level

00:39:27,100 --> 00:39:29,260
use

00:39:27,670 --> 00:39:31,540
cases that make it nice to do

00:39:29,260 --> 00:39:33,670
integration now I want to go full circle

00:39:31,540 --> 00:39:36,069
and say well a lot of the discussion

00:39:33,670 --> 00:39:38,140
about system D was all about user choice

00:39:36,069 --> 00:39:39,849
and you know I even came with the

00:39:38,140 --> 00:39:44,500
prepared with the shirt system D is

00:39:39,849 --> 00:39:47,740
about choice and the it turns out that

00:39:44,500 --> 00:39:49,540
while choosing between system D and

00:39:47,740 --> 00:39:51,280
Sisyphean it is not necessarily the

00:39:49,540 --> 00:39:53,619
thing that system D is designed to cater

00:39:51,280 --> 00:39:56,410
for that helping you pick among

00:39:53,619 --> 00:39:58,930
components of other tools actually works

00:39:56,410 --> 00:40:01,180
really well with system D so it's really

00:39:58,930 --> 00:40:03,579
easy for a user or an administrator for

00:40:01,180 --> 00:40:06,160
the user or system sessions to override

00:40:03,579 --> 00:40:09,819
individual service units or socket units

00:40:06,160 --> 00:40:11,770
with their own either individually or in

00:40:09,819 --> 00:40:13,839
large groups or little pieces of

00:40:11,770 --> 00:40:16,390
configuration it's really easy to

00:40:13,839 --> 00:40:18,359
override and edit without having to go

00:40:16,390 --> 00:40:21,579
in and edit a very long shell script

00:40:18,359 --> 00:40:23,410
it's also possible in system D to

00:40:21,579 --> 00:40:27,040
provide and depend on various virtual

00:40:23,410 --> 00:40:29,140
units so we've had discussions about GPG

00:40:27,040 --> 00:40:30,849
agent and ssh agent versus genome

00:40:29,140 --> 00:40:32,319
keyring which one do you want in your

00:40:30,849 --> 00:40:33,910
session what might depend on what

00:40:32,319 --> 00:40:36,579
environment you're in or what your user

00:40:33,910 --> 00:40:39,700
preference is so it's really easy to say

00:40:36,579 --> 00:40:41,859
well I have this GPG agent dot socket

00:40:39,700 --> 00:40:44,079
unit that I want something to provide

00:40:41,859 --> 00:40:46,210
and I don't really care whether it's GPG

00:40:44,079 --> 00:40:47,619
agent organ ohm keyring if I'm depending

00:40:46,210 --> 00:40:50,230
on it I just need something to connect

00:40:47,619 --> 00:40:52,329
to whereas other the services that

00:40:50,230 --> 00:40:58,480
provide that could choose what they want

00:40:52,329 --> 00:41:01,690
to provide was there a question no okay

00:40:58,480 --> 00:41:03,849
there's also the possibility of similar

00:41:01,690 --> 00:41:05,799
to dot d directories if you have a

00:41:03,849 --> 00:41:07,540
particular target for a system bring up

00:41:05,799 --> 00:41:10,059
you can create a target dot once

00:41:07,540 --> 00:41:13,359
directory and install service links in

00:41:10,059 --> 00:41:16,480
there so it's easy to start up various

00:41:13,359 --> 00:41:18,609
units like that it's easy to extend

00:41:16,480 --> 00:41:20,200
services with local configurations so if

00:41:18,609 --> 00:41:22,059
the suicide man wants to lock it down

00:41:20,200 --> 00:41:24,160
further than we ship in Debian or

00:41:22,059 --> 00:41:26,440
containerize it further that's fairly

00:41:24,160 --> 00:41:28,780
easy to do without overriding Debian's

00:41:26,440 --> 00:41:31,630
existing configuration it's pretty easy

00:41:28,780 --> 00:41:33,220
to mask services and finally because

00:41:31,630 --> 00:41:36,010
we're going to have system D user

00:41:33,220 --> 00:41:38,380
sessions then we'll be easily able to

00:41:36,010 --> 00:41:40,000
move such services between well do I

00:41:38,380 --> 00:41:41,530
really need to launch that system-wide

00:41:40,000 --> 00:41:43,450
or should I launch it

00:41:41,530 --> 00:41:46,450
per user basis and shut it down when the

00:41:43,450 --> 00:41:48,160
user is gone so a number of cases where

00:41:46,450 --> 00:41:51,640
system D could potentially help us there

00:41:48,160 --> 00:41:57,520
and with that any further overall

00:41:51,640 --> 00:41:59,740
questions yes you were talking about

00:41:57,520 --> 00:42:01,330
Network D I wonder if you have any

00:41:59,740 --> 00:42:05,380
opinion on what's going to happen to I F

00:42:01,330 --> 00:42:07,540
up/down uh much the same thing that's

00:42:05,380 --> 00:42:09,250
likely to happen to sis V in it it

00:42:07,540 --> 00:42:11,680
depends greatly on how much people

00:42:09,250 --> 00:42:13,540
deeply care about keeping it alive the

00:42:11,680 --> 00:42:15,520
biggest issue with iff down is that it

00:42:13,540 --> 00:42:17,590
is not an all event-driven does not

00:42:15,520 --> 00:42:20,380
handle dynamic configuration of any kind

00:42:17,590 --> 00:42:22,090
static is just more or less just fine

00:42:20,380 --> 00:42:24,940
with it but it does not handle dynamic

00:42:22,090 --> 00:42:26,590
interfaces at all so I'd really expect

00:42:24,940 --> 00:42:29,260
that unless somebody rewrites it from

00:42:26,590 --> 00:42:31,060
scratch and even if someone does I think

00:42:29,260 --> 00:42:34,000
network D is more likely to win that

00:42:31,060 --> 00:42:36,220
particular one one of the really nice

00:42:34,000 --> 00:42:38,620
things about if up/down is extremely

00:42:36,220 --> 00:42:42,010
extensible for example packages like

00:42:38,620 --> 00:42:45,790
Open VPN or VTE can install scripts into

00:42:42,010 --> 00:42:48,220
Etsy network if DD and all of a sudden

00:42:45,790 --> 00:42:49,950
they've got first-class support in Etsy

00:42:48,220 --> 00:42:53,620
network interfaces for bringing up

00:42:49,950 --> 00:42:55,030
interfaces for VPNs or vde and such is

00:42:53,620 --> 00:42:58,900
network do you ever going to match that

00:42:55,030 --> 00:43:01,990
functionality yes and no half of it so

00:42:58,900 --> 00:43:03,940
right now it's possible to easily detect

00:43:01,990 --> 00:43:06,640
my interface went up my interface went

00:43:03,940 --> 00:43:08,680
down from iff down and to the extent it

00:43:06,640 --> 00:43:11,260
notices that you can very easily hook

00:43:08,680 --> 00:43:13,660
interface up interface down with system

00:43:11,260 --> 00:43:16,390
D as well as for extensibility of

00:43:13,660 --> 00:43:18,340
network interfaces themselves it's

00:43:16,390 --> 00:43:20,440
unlikely that network D will add

00:43:18,340 --> 00:43:22,360
arbitrary script call-outs for the same

00:43:20,440 --> 00:43:25,480
reason that it doesn't spawn off D H

00:43:22,360 --> 00:43:27,850
client it's much more likely to link in

00:43:25,480 --> 00:43:30,430
libraries or possibly plugins with a

00:43:27,850 --> 00:43:32,830
well-defined interface to say I want to

00:43:30,430 --> 00:43:35,050
bring up this kind of network but I

00:43:32,830 --> 00:43:36,940
would suggest looking closely at what iw

00:43:35,050 --> 00:43:38,710
D does with wireless and how it

00:43:36,940 --> 00:43:39,850
integrates with network D my

00:43:38,710 --> 00:43:42,220
understanding of the proposed

00:43:39,850 --> 00:43:44,830
architecture is go bring up a wireless

00:43:42,220 --> 00:43:46,510
network however and then hand a more or

00:43:44,830 --> 00:43:48,940
less configured network interface to

00:43:46,510 --> 00:43:51,340
network D then saying well go run DHCP

00:43:48,940 --> 00:43:53,200
or go setup interfaces or similar so if

00:43:51,340 --> 00:43:55,089
you have a VPN that would probably be

00:43:53,200 --> 00:43:56,769
the way to implement it of first

00:43:55,089 --> 00:43:58,749
bring up interface then hand it to

00:43:56,769 --> 00:44:01,210
network D to manage in its configured

00:43:58,749 --> 00:44:03,219
state that seems likely to be the main

00:44:01,210 --> 00:44:07,089
extensible approach there apart from

00:44:03,219 --> 00:44:08,410
getting it into network Dean and I think

00:44:07,089 --> 00:44:10,180
that's all the questions that we have

00:44:08,410 --> 00:44:11,920
time for but I am more than happy to

00:44:10,180 --> 00:44:14,680
have further discussions with people

00:44:11,920 --> 00:44:16,650
offline or via mailing lists or however

00:44:14,680 --> 00:44:25,860
else thank you

00:44:16,650 --> 00:44:25,860
[Applause]

00:44:33,069 --> 00:44:35,910
yes

00:44:37,760 --> 00:44:41,840
and then when the second image came up

00:44:39,980 --> 00:44:44,140
yes you knew exactly where that was from

00:44:41,840 --> 00:44:44,140
didn't you

00:48:47,960 --> 00:49:16,750
I don't think we're going to have it

00:49:17,650 --> 00:49:21,349
yeah absolutely

00:49:19,280 --> 00:49:29,650
four seats already an experiment and

00:49:21,349 --> 00:49:29,650
while we might done this earlier I think

00:49:57,400 --> 00:50:03,580
yeah no no I went with my no I agree

00:50:01,730 --> 00:50:06,620
completely it would be crazy to

00:50:03,580 --> 00:50:09,500
transition almost any of those things we

00:50:06,620 --> 00:50:13,240
want to provide people with

00:50:09,500 --> 00:50:13,240
transitioning away or at far yeah

00:50:59,750 --> 00:51:03,119
[Music]

00:51:15,300 --> 00:51:18,300

YouTube URL: https://www.youtube.com/watch?v=JeNLA4zUpPI


