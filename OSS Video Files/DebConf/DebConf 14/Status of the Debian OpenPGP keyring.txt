Title: Status of the Debian OpenPGP keyring
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Gunnar Wolf

At: DebConf14
https://debconf14.debconf.org/
Room: Room 327
Scheduled start: 2014-08-25 11:00:00
Captions: 
	00:00:00,060 --> 00:00:14,599
start and I will interesting bits okay

00:00:06,629 --> 00:00:17,160
so we are the commitment team and what

00:00:14,599 --> 00:00:21,210
what what do we do we manage the

00:00:17,160 --> 00:00:24,000
keyrings yeah oh okay

00:00:21,210 --> 00:00:27,119
so we are hello we are the keyring

00:00:24,000 --> 00:00:29,910
maintenance team what we do is we

00:00:27,119 --> 00:00:32,759
maintain the key rings that define who

00:00:29,910 --> 00:00:35,579
is part of what part of Debian or who is

00:00:32,759 --> 00:00:39,120
in which the don't like saying category

00:00:35,579 --> 00:00:41,790
but well it's the right word and well

00:00:39,120 --> 00:00:44,070
the keyring is formed from these six

00:00:41,790 --> 00:00:46,110
files or directories depending how you

00:00:44,070 --> 00:00:49,680
look at them the naming is suboptimal

00:00:46,110 --> 00:00:51,750
because it's a mostly historic so when I

00:00:49,680 --> 00:00:55,470
joined

00:00:51,750 --> 00:01:00,150
Jonathan who has been a longer time with

00:00:55,470 --> 00:01:03,120
maintainer a keyring maintainer a we

00:01:00,150 --> 00:01:06,300
only have the Debian keyring and the not

00:01:03,120 --> 00:01:08,790
used ones nowadays Debian keyring means

00:01:06,300 --> 00:01:12,060
Debian developer Debian maintained errs

00:01:08,790 --> 00:01:14,300
means he who is a maintainer there none

00:01:12,060 --> 00:01:17,550
upload are non uploading developers and

00:01:14,300 --> 00:01:19,320
the other three are kept well Debian

00:01:17,550 --> 00:01:23,160
role keys is something that I guess is

00:01:19,320 --> 00:01:25,320
not used for basically anything most of

00:01:23,160 --> 00:01:27,030
the role keys have moved to more

00:01:25,320 --> 00:01:29,070
specific packages so previously that

00:01:27,030 --> 00:01:31,550
would have had things like the archive

00:01:29,070 --> 00:01:33,390
key which is moved to its own package

00:01:31,550 --> 00:01:34,650
there are a few other ones like that

00:01:33,390 --> 00:01:36,570
which are actually maintained by their

00:01:34,650 --> 00:01:37,770
own teams so we don't actually look

00:01:36,570 --> 00:01:40,950
after those anymore but there just to

00:01:37,770 --> 00:01:43,950
run for historic reasons and we have

00:01:40,950 --> 00:01:47,160
well those keys that are explicitly kept

00:01:43,950 --> 00:01:49,560
for history those the emeritus and

00:01:47,160 --> 00:01:53,729
removed kiss but a but are not in no

00:01:49,560 --> 00:01:56,760
longer used we don't see here well we do

00:01:53,729 --> 00:02:00,659
have and I made a little mistake we have

00:01:56,760 --> 00:02:03,420
emerges curing PGP and and GPG well

00:02:00,659 --> 00:02:08,489
because of some of the immigration

00:02:03,420 --> 00:02:13,410
history we will explain now so well this

00:02:08,489 --> 00:02:15,540
is like an overview of how the number of

00:02:13,410 --> 00:02:19,290
Debian Keys where I were a currently

00:02:15,540 --> 00:02:22,560
handling we have again passed the 990 or

00:02:19,290 --> 00:02:26,519
just about 1000 a developers with

00:02:22,560 --> 00:02:29,970
developer keys we are at well show the

00:02:26,519 --> 00:02:33,570
numbers just next somewhere around here

00:02:29,970 --> 00:02:38,130
but we are close to 270 maintained errs

00:02:33,570 --> 00:02:41,310
and about 10 none uploaders i mean this

00:02:38,130 --> 00:02:44,880
is just over time a our history just

00:02:41,310 --> 00:02:48,690
goes back to 2008 because before that it

00:02:44,880 --> 00:02:50,940
was not maintained in a version control

00:02:48,690 --> 00:03:00,120
system so we have the history but it's

00:02:50,940 --> 00:03:01,319
up to you to mind the data ok so one of

00:03:00,120 --> 00:03:02,610
the concerns recently that I'm sure

00:03:01,319 --> 00:03:03,910
people have heard about and not so

00:03:02,610 --> 00:03:05,470
recently

00:03:03,910 --> 00:03:07,530
that we're trying to make sure that the

00:03:05,470 --> 00:03:12,190
Debian keyring does not contain

00:03:07,530 --> 00:03:15,160
cryptographically week or week 4

00:03:12,190 --> 00:03:18,730
protocols keys that could actually

00:03:15,160 --> 00:03:20,860
affect the contents of the archive so in

00:03:18,730 --> 00:03:23,500
particular there have been a couple of

00:03:20,860 --> 00:03:26,520
successful moves and some that have not

00:03:23,500 --> 00:03:30,190
yet been successful but will be soon so

00:03:26,520 --> 00:03:33,430
one of them was that so PGP keys are a

00:03:30,190 --> 00:03:35,230
certificate that wraps up a public

00:03:33,430 --> 00:03:37,030
public key material but there are

00:03:35,230 --> 00:03:40,270
different formats of PGP certificates

00:03:37,030 --> 00:03:42,370
there's PGP v3 and PGP v4 and everyone

00:03:40,270 --> 00:03:45,790
should be using PGP v4 and in fact

00:03:42,370 --> 00:03:47,200
everyone in Debian is now using PGP

00:03:45,790 --> 00:03:51,880
before because we wanted to get rid of

00:03:47,200 --> 00:03:54,820
PGP v3 I can talk a bit about why PGP v3

00:03:51,880 --> 00:03:57,160
is a terrible format but the simplest

00:03:54,820 --> 00:04:00,270
answer is it's trivial to forge a

00:03:57,160 --> 00:04:06,400
fingerprint for a PGP v3 certificate

00:04:00,270 --> 00:04:09,130
trivial so so those are going away those

00:04:06,400 --> 00:04:14,290
went away and the the final I think

00:04:09,130 --> 00:04:17,739
little bump down there is yeah is a nice

00:04:14,290 --> 00:04:19,450
triage that just finally said ok it's

00:04:17,739 --> 00:04:22,150
too late which it where it says GPG

00:04:19,450 --> 00:04:27,010
there that should say PGP v4 so that's

00:04:22,150 --> 00:04:28,480
ok so people got the message they

00:04:27,010 --> 00:04:29,710
started moving away some of them never

00:04:28,480 --> 00:04:32,230
made it and then there was this nice

00:04:29,710 --> 00:04:34,840
bump of actually just kicking out 17

00:04:32,230 --> 00:04:38,640
keys that people had just couldn't be

00:04:34,840 --> 00:04:42,640
bothered to swap out for before one more

00:04:38,640 --> 00:04:45,280
so so the other thing that we're

00:04:42,640 --> 00:04:47,140
interested in is the strength of the key

00:04:45,280 --> 00:04:49,690
so cryptographic keys have a key length

00:04:47,140 --> 00:04:51,400
different algorithms the key lengths

00:04:49,690 --> 00:04:52,840
mean different things and I just wanted

00:04:51,400 --> 00:04:55,960
to give a brief background for why we

00:04:52,840 --> 00:04:58,950
are trying to get rid of shorter keys

00:04:55,960 --> 00:05:01,540
and so this is a this is a table from

00:04:58,950 --> 00:05:04,030
from a crypt which is a European crypt

00:05:01,540 --> 00:05:07,480
cryptography report from 2012 so two

00:05:04,030 --> 00:05:08,590
years old now and it's a description I

00:05:07,480 --> 00:05:10,000
don't know if you can read this on the

00:05:08,590 --> 00:05:12,760
slides here but basically it describes

00:05:10,000 --> 00:05:15,220
different types of key of key these are

00:05:12,760 --> 00:05:16,539
different key types here RSA D log is

00:05:15,220 --> 00:05:19,240
like DSA

00:05:16,539 --> 00:05:23,319
and ec is elliptic curve and four keys

00:05:19,240 --> 00:05:25,150
of these lengths so this is the DSA size

00:05:23,319 --> 00:05:27,279
the RSA size you'll see that those are

00:05:25,150 --> 00:05:29,919
paired up you measure you measure the

00:05:27,279 --> 00:05:32,289
strength of a key in sort of equivalent

00:05:29,919 --> 00:05:34,240
bits of symmetric security and there's a

00:05:32,289 --> 00:05:35,559
little number there and so what this

00:05:34,240 --> 00:05:39,669
means is that an attacker would need to

00:05:35,559 --> 00:05:48,580
do say two to the 80th operations to

00:05:39,669 --> 00:05:50,020
crack a 1248 bit DSA key so that's this

00:05:48,580 --> 00:05:51,460
is rough right all of these estimations

00:05:50,020 --> 00:05:52,870
are very rough there's a bunch of

00:05:51,460 --> 00:05:54,370
different details about how an attack

00:05:52,870 --> 00:05:57,249
like that would go and here they've got

00:05:54,370 --> 00:06:01,689
common key sizes that show that a 1024

00:05:57,249 --> 00:06:04,449
bit DSA key or RSA key is about 73 bits

00:06:01,689 --> 00:06:08,830
of security so what is 73 bits of

00:06:04,449 --> 00:06:10,599
security can you go back one so this is

00:06:08,830 --> 00:06:11,770
it the same report your book you can go

00:06:10,599 --> 00:06:14,289
and find this I can point you to the

00:06:11,770 --> 00:06:16,659
equipped slides says this is a table

00:06:14,289 --> 00:06:17,830
that just shows some bits of symmetric

00:06:16,659 --> 00:06:22,330
security and then there's a description

00:06:17,830 --> 00:06:24,039
and there's a comment and so 73 well 72

00:06:22,330 --> 00:06:26,249
is the closest here it says short term

00:06:24,039 --> 00:06:29,189
protection against medium organizations

00:06:26,249 --> 00:06:32,279
medium term protection against small

00:06:29,189 --> 00:06:36,219
organizations and there's no comment

00:06:32,279 --> 00:06:39,339
ninety-six legacy standard level roughly

00:06:36,219 --> 00:06:42,279
ten years protection so 1024 bit keys

00:06:39,339 --> 00:06:44,409
are way too short for something as

00:06:42,279 --> 00:06:46,449
important as the ability to upload into

00:06:44,409 --> 00:06:48,099
the Debian archive we've been trying to

00:06:46,449 --> 00:06:52,149
get people off of 1024 bit keys for a

00:06:48,099 --> 00:06:55,419
long time and we haven't done it yet but

00:06:52,149 --> 00:06:57,069
we plan to so do forward please if you

00:06:55,419 --> 00:06:59,229
weren't convinced that you should move

00:06:57,069 --> 00:07:03,249
away from that the certificate authority

00:06:59,229 --> 00:07:05,399
Cartel via the C a browser forum made

00:07:03,249 --> 00:07:08,499
that they have a baseline requirements

00:07:05,399 --> 00:07:10,149
which they publish an update this is the

00:07:08,499 --> 00:07:11,139
update from earlier this year v1 one

00:07:10,149 --> 00:07:13,719
eight

00:07:11,139 --> 00:07:16,029
you cannot issue if you're a member of

00:07:13,719 --> 00:07:17,349
the of the certificate authority cartel

00:07:16,029 --> 00:07:21,849
you cannot issue an end entity

00:07:17,349 --> 00:07:25,389
certificate with 1024 bit with anything

00:07:21,849 --> 00:07:28,540
less than 24 bit RSA as of the end of

00:07:25,389 --> 00:07:30,670
last year so we are

00:07:28,540 --> 00:07:33,760
behind what the certificate authority

00:07:30,670 --> 00:07:39,420
cartel is requiring for and entity

00:07:33,760 --> 00:07:39,420
certificates for my crappy website calm

00:07:42,330 --> 00:07:48,280
so okay so this is a breakdown of the

00:07:46,090 --> 00:07:49,660
different keys different key sizes these

00:07:48,280 --> 00:07:51,970
are non uploaders you can see that the

00:07:49,660 --> 00:07:55,120
non uploaders are quite good at having

00:07:51,970 --> 00:08:00,930
strong keys no 1024 bit RSA keys or D or

00:07:55,120 --> 00:08:00,930
D si keys next yeah

00:08:01,480 --> 00:08:07,330
and the Debian maintained errs are also

00:08:03,970 --> 00:08:10,200
quite good the we still have a few 1024

00:08:07,330 --> 00:08:14,920
bits in there that's 50 or so but

00:08:10,200 --> 00:08:16,800
unbalanced they're much stronger I want

00:08:14,920 --> 00:08:19,750
to point out something here that well

00:08:16,800 --> 00:08:21,400
they both the maintainer Zanden

00:08:19,750 --> 00:08:24,540
uploaders have a reactive quicker

00:08:21,400 --> 00:08:28,810
because welder newer figures so we were

00:08:24,540 --> 00:08:30,790
we were able to to require this earlier

00:08:28,810 --> 00:08:33,729
on but you see there's this this

00:08:30,790 --> 00:08:37,090
flattening thread a trend sorry if

00:08:33,729 --> 00:08:42,430
letting the trend so a I think these

00:08:37,090 --> 00:08:45,340
they it can be harder to to to get to

00:08:42,430 --> 00:08:57,490
those last 50 if we don't act quickly on

00:08:45,340 --> 00:08:58,660
it the other thing that's worth just to

00:08:57,490 --> 00:09:00,370
actually back up a bit

00:08:58,660 --> 00:09:03,100
our current recommendation is that

00:09:00,370 --> 00:09:06,370
people use for K keys we have a large

00:09:03,100 --> 00:09:08,080
2048 keys and the keyring

00:09:06,370 --> 00:09:09,660
so in general people are going with

00:09:08,080 --> 00:09:11,860
recommendation there have been some

00:09:09,660 --> 00:09:14,410
reasonable reasons to use a shorter key

00:09:11,860 --> 00:09:16,360
length in particular the open PGP smart

00:09:14,410 --> 00:09:18,940
cards were originally limited into the

00:09:16,360 --> 00:09:20,380
key lengths they could support anyone

00:09:18,940 --> 00:09:22,240
who doesn't have a restriction like that

00:09:20,380 --> 00:09:23,230
we really are saying for K keys which is

00:09:22,240 --> 00:09:25,210
why you'll see them being the

00:09:23,230 --> 00:09:27,820
predominant key lengths the other thing

00:09:25,210 --> 00:09:30,760
to point out by the maintainer is some

00:09:27,820 --> 00:09:32,710
of the downtrend and the 1k keys here is

00:09:30,760 --> 00:09:34,780
because maintainer become developers and

00:09:32,710 --> 00:09:35,830
that's a straightforward transition of K

00:09:34,780 --> 00:09:39,560
and we haven't necessarily been

00:09:35,830 --> 00:09:48,980
enforcing a key gene at that point fill

00:09:39,560 --> 00:09:54,920
I can repeat the question sorry it

00:09:48,980 --> 00:09:57,710
should not be a Phil's point is that

00:09:54,920 --> 00:10:00,740
we're only looking at the key length of

00:09:57,710 --> 00:10:02,270
the the primary key on the key it could

00:10:00,740 --> 00:10:04,910
be that the sub keys are either a longer

00:10:02,270 --> 00:10:06,950
or shorter length longer doesn't really

00:10:04,910 --> 00:10:08,750
help because you're still limited by the

00:10:06,950 --> 00:10:10,100
primary key but if the sub keys are

00:10:08,750 --> 00:10:11,930
shorter length and I could mean that

00:10:10,100 --> 00:10:16,070
they are weaker than they seem I think

00:10:11,930 --> 00:10:17,750
in general the in general what I've seen

00:10:16,070 --> 00:10:24,290
is that sub keys are usually longer if

00:10:17,750 --> 00:10:26,330
anything but usually the same size well

00:10:24,290 --> 00:10:29,300
and this is the the graph that worries

00:10:26,330 --> 00:10:32,300
us most a although we have a converging

00:10:29,300 --> 00:10:34,279
to trend here this is for the developers

00:10:32,300 --> 00:10:35,390
and here includes we're heading in the

00:10:34,279 --> 00:10:38,330
right direction

00:10:35,390 --> 00:10:41,860
you can very well see the places were

00:10:38,330 --> 00:10:46,130
with sent mails and posts and the things

00:10:41,860 --> 00:11:06,140
people to really update and you probably

00:10:46,130 --> 00:11:06,950
can't see the scale the back years has

00:11:06,140 --> 00:11:08,570
been here that we could cross-reference

00:11:06,950 --> 00:11:11,930
the line with the number of people here

00:11:08,570 --> 00:11:15,860
at debconf and I have I have a list of

00:11:11,930 --> 00:11:17,930
all 517 short keys and I need to talk to

00:11:15,860 --> 00:11:20,060
the organizer to try and get a dump of

00:11:17,930 --> 00:11:24,130
the people here there's no easy way to

00:11:20,060 --> 00:11:24,130
do that the moment Steve viewer next

00:11:31,230 --> 00:11:35,620
until I saw that number my question was

00:11:33,700 --> 00:11:37,120
going to be why haven't we just dropped

00:11:35,620 --> 00:11:38,579
these people already they've been told a

00:11:37,120 --> 00:11:46,149
dozen times already

00:11:38,579 --> 00:11:49,120
so we have already saw we've already

00:11:46,149 --> 00:11:51,010
started looking at that of the 517 keys

00:11:49,120 --> 00:11:52,600
that are short two hundred and fifty

00:11:51,010 --> 00:11:53,550
three of these people are already known

00:11:52,600 --> 00:11:55,839
to m.i.a

00:11:53,550 --> 00:11:57,880
so yeah there is an issue there about

00:11:55,839 --> 00:11:59,860
what's going on and we have already

00:11:57,880 --> 00:12:01,389
started having discussions with both TSA

00:11:59,860 --> 00:12:04,870
and m.i.a about what we do with these

00:12:01,389 --> 00:12:06,910
people and we will eventually get to the

00:12:04,870 --> 00:12:08,920
point that we drop that okay please name

00:12:06,910 --> 00:12:13,660
and shame if you know someone on that

00:12:08,920 --> 00:12:15,940
list this list go and slap them part of

00:12:13,660 --> 00:12:19,420
the thing is we didn't want to push this

00:12:15,940 --> 00:12:21,850
too much earlier because well a you can

00:12:19,420 --> 00:12:26,620
see we started like really caring about

00:12:21,850 --> 00:12:30,279
this around 2010 and the the that would

00:12:26,620 --> 00:12:32,199
have meant either a trample both a

00:12:30,279 --> 00:12:34,839
tremendous amount of work to it for us

00:12:32,199 --> 00:12:37,839
that's coming we know it's coming but

00:12:34,839 --> 00:12:40,600
also that we would end up locking for a

00:12:37,839 --> 00:12:43,480
3/4 of debian out of the project

00:12:40,600 --> 00:12:48,640
nowadays were we're only going to lock

00:12:43,480 --> 00:12:51,579
one half of the project away yeah yeah

00:12:48,640 --> 00:12:53,860
yeah yeah our estimation is that most of

00:12:51,579 --> 00:12:55,660
them are not active currently I should

00:12:53,860 --> 00:12:57,970
clarify the AMIA figures it doesn't mean

00:12:55,660 --> 00:13:00,160
they're actually m.i.a it just means

00:12:57,970 --> 00:13:01,660
that they are known to the AMIA database

00:13:00,160 --> 00:13:02,709
they are in discussions with them so it

00:13:01,660 --> 00:13:05,470
could be people who are just not

00:13:02,709 --> 00:13:07,089
completely active or haven't been seen

00:13:05,470 --> 00:13:09,399
rather than people who are truly missing

00:13:07,089 --> 00:13:10,660
so it doesn't necessarily mean that they

00:13:09,399 --> 00:13:11,800
really are people we should drop from

00:13:10,660 --> 00:13:13,630
the project and one of the things we've

00:13:11,800 --> 00:13:15,760
been very careful about as hearing me

00:13:13,630 --> 00:13:17,170
and says we don't want to kick people

00:13:15,760 --> 00:13:20,230
out to actually still have an interest

00:13:17,170 --> 00:13:21,610
in being involved in Debian we don't

00:13:20,230 --> 00:13:23,709
want to force people out of the project

00:13:21,610 --> 00:13:25,300
and that's the line we've taken so far

00:13:23,709 --> 00:13:27,220
and it's come to the point that we are

00:13:25,300 --> 00:13:28,569
actually going to draw people but we

00:13:27,220 --> 00:13:29,800
were given this length of time because

00:13:28,569 --> 00:13:31,779
we really did want people have an

00:13:29,800 --> 00:13:33,399
opportunity to get it sorted enough time

00:13:31,779 --> 00:13:35,470
to come to Deb comm for another local

00:13:33,399 --> 00:13:36,760
event and get a key cross sign and we

00:13:35,470 --> 00:13:39,010
felt that we've bent over backwards and

00:13:36,760 --> 00:13:40,959
me quite a few meals about get this done

00:13:39,010 --> 00:13:43,010
and now it comes a time that we really

00:13:40,959 --> 00:13:48,050
do need to sort of say take a hard

00:13:43,010 --> 00:13:50,090
line on it well we will now show a until

00:13:48,050 --> 00:13:51,050
now we have stake stated facts a I will

00:13:50,090 --> 00:13:55,220
also continue

00:13:51,050 --> 00:13:58,660
oh please Enrico once the obvious ones

00:13:55,220 --> 00:14:01,940
like mi a and so on have been taken away

00:13:58,660 --> 00:14:04,250
then I think we enter the domain of

00:14:01,940 --> 00:14:05,780
people who are not necessarily paying a

00:14:04,250 --> 00:14:08,420
lot of attention to type endeavor

00:14:05,780 --> 00:14:10,580
denounced he and I'll be glad to send

00:14:08,420 --> 00:14:17,990
around the winners to those people with

00:14:10,580 --> 00:14:20,200
damn hat saying hi okay so what what

00:14:17,990 --> 00:14:23,300
we're going to present now is a well

00:14:20,200 --> 00:14:26,570
where we want to go forward with this

00:14:23,300 --> 00:14:31,040
and also with some bits of the problems

00:14:26,570 --> 00:14:34,520
we've had right so yeah well I didn't

00:14:31,040 --> 00:14:37,550
update this sorry well anyway it's more

00:14:34,520 --> 00:14:41,420
or less the same oh yeah right I did

00:14:37,550 --> 00:14:44,390
update it so we finally we're talking

00:14:41,420 --> 00:14:46,730
about setting up a code update yeah

00:14:44,390 --> 00:14:48,830
after the end of the year after the last

00:14:46,730 --> 00:14:52,820
day of the end of this year we will just

00:14:48,830 --> 00:14:55,100
disable oral one K keys because well I

00:14:52,820 --> 00:15:07,010
think there's an agreement that way we

00:14:55,100 --> 00:15:08,120
we can and we should do this so that's a

00:15:07,010 --> 00:15:09,470
good response because what we're

00:15:08,120 --> 00:15:12,800
considering doing in terms of this is

00:15:09,470 --> 00:15:14,510
will send a meal to DDA which everyone

00:15:12,800 --> 00:15:16,840
will ignore because I think anyone is

00:15:14,510 --> 00:15:19,340
anyone is paying attention has hopefully

00:15:16,840 --> 00:15:20,360
already made the switch but I know for a

00:15:19,340 --> 00:15:21,980
fact that there are at least three

00:15:20,360 --> 00:15:23,930
people here at this conference who have

00:15:21,980 --> 00:15:25,580
not made the switch so even people who

00:15:23,930 --> 00:15:29,350
are paying attention to D and turning up

00:15:25,580 --> 00:15:29,350
to events have not done this we

00:15:30,819 --> 00:15:36,230
I I will name them once I have got a

00:15:33,769 --> 00:15:45,589
definitive list and have emailed them

00:15:36,230 --> 00:15:47,209
once no you can take the Debian keyring

00:15:45,589 --> 00:15:48,589
and do exactly what I did which is dump

00:15:47,209 --> 00:15:52,129
it look for the one or two four keys

00:15:48,589 --> 00:15:54,139
it's not hard to do we will meal all of

00:15:52,129 --> 00:15:55,610
them individually as well and send them

00:15:54,139 --> 00:15:58,790
a meal going by the way this is going to

00:15:55,610 --> 00:16:00,139
happen so we're going to send those

00:15:58,790 --> 00:16:01,429
meals I but we did want to run a by

00:16:00,139 --> 00:16:04,850
people first is going this is what we're

00:16:01,429 --> 00:16:06,889
going to do so let me also say that so

00:16:04,850 --> 00:16:09,139
this the bottom point here is kind of

00:16:06,889 --> 00:16:11,029
critical right so there are there are

00:16:09,139 --> 00:16:12,649
three different kinds of developers that

00:16:11,029 --> 00:16:17,059
we can imagine in this situation right

00:16:12,649 --> 00:16:18,350
which are people who are who are I'm

00:16:17,059 --> 00:16:19,970
sorry this is that there's a difference

00:16:18,350 --> 00:16:29,509
there's three types there's people who

00:16:19,970 --> 00:16:31,129
are ignoring people out of Debian who

00:16:29,509 --> 00:16:32,389
are interested in maintaining the

00:16:31,129 --> 00:16:36,920
infrastructure that they need to keep

00:16:32,389 --> 00:16:38,720
Debian secure just yeah one thing about

00:16:36,920 --> 00:16:40,819
this is well there are many special

00:16:38,720 --> 00:16:44,029
cases we are reaching the point where

00:16:40,819 --> 00:16:47,110
we'll find a way to somehow kick those

00:16:44,029 --> 00:16:52,129
those cases something that was quite a

00:16:47,110 --> 00:16:55,189
strange to understand how is that a way

00:16:52,129 --> 00:16:59,540
when an evil sent the call for keys for

00:16:55,189 --> 00:17:01,730
the key signing humph we got like 12 1k

00:16:59,540 --> 00:17:05,089
keys that well they were kicked out of

00:17:01,730 --> 00:17:09,939
the key signing party they will not take

00:17:05,089 --> 00:17:14,589
part of this well one of the maybe it's

00:17:09,939 --> 00:17:18,230
yeah one of the things that may be

00:17:14,589 --> 00:17:19,339
difficult sometimes is that there are

00:17:18,230 --> 00:17:21,589
many people who are not socially

00:17:19,339 --> 00:17:24,020
involved in Debian so those are the

00:17:21,589 --> 00:17:27,799
faces we don't know those people

00:17:24,020 --> 00:17:29,809
will they have a hard time maybe they

00:17:27,799 --> 00:17:32,029
don't they care about their their

00:17:29,809 --> 00:17:35,270
particular each but they do not care

00:17:32,029 --> 00:17:37,279
about being a member of socially a

00:17:35,270 --> 00:17:39,830
member of the project meeting people and

00:17:37,279 --> 00:17:42,980
all that so a getting their teeth signed

00:17:39,830 --> 00:17:45,410
is also difficult well for

00:17:42,980 --> 00:17:47,840
many reasons not only because they are

00:17:45,410 --> 00:17:50,990
far away but maybe because they don't

00:17:47,840 --> 00:17:53,950
feel like at home socially with the rest

00:17:50,990 --> 00:17:57,140
of us I don't know thing is up to now a

00:17:53,950 --> 00:18:00,169
very good thing is that I love I feel

00:17:57,140 --> 00:18:02,990
the we have as a project honored this a

00:18:00,169 --> 00:18:13,820
to meet a person before signing the

00:18:02,990 --> 00:18:16,429
dirties a lot of people around the world

00:18:13,820 --> 00:18:18,950
and being nice to people that have been

00:18:16,429 --> 00:18:20,919
part those far out the Debian project so

00:18:18,950 --> 00:18:23,000
on one hand I write I like to

00:18:20,919 --> 00:18:25,280
de-emphasize the fact that we are not

00:18:23,000 --> 00:18:27,890
kicking out people of the project so

00:18:25,280 --> 00:18:29,630
technically where you were you were

00:18:27,890 --> 00:18:31,610
acting on the keyring will make them

00:18:29,630 --> 00:18:33,650
unable to do specific kind of

00:18:31,610 --> 00:18:35,960
participation in Debian but I pretty

00:18:33,650 --> 00:18:37,549
sure that them when those people get a

00:18:35,960 --> 00:18:39,980
new key in the keyring will not have

00:18:37,549 --> 00:18:41,450
them go through nm again so it's not

00:18:39,980 --> 00:18:42,950
like we are kicking people out of the

00:18:41,450 --> 00:18:46,040
project we are putting in place

00:18:42,950 --> 00:18:48,980
technical means that sacrifice their

00:18:46,040 --> 00:18:50,360
current ability to participate favoring

00:18:48,980 --> 00:18:52,160
the security of a lot of people around

00:18:50,360 --> 00:18:53,809
the world so this is one first comment

00:18:52,160 --> 00:18:56,570
wanted to make and the second one is

00:18:53,809 --> 00:18:59,390
that we are very much likely in a 80/20

00:18:56,570 --> 00:19:00,740
situation in which I think 80% of the

00:18:59,390 --> 00:19:02,179
cases you are going to deal with there

00:19:00,740 --> 00:19:05,179
are people that are not paying attention

00:19:02,179 --> 00:19:07,160
and maybe 20% or maybe 5% of the people

00:19:05,179 --> 00:19:10,070
with specific condition you have

00:19:07,160 --> 00:19:11,929
mentioned so I think you should put in

00:19:10,070 --> 00:19:13,940
place a process that takes care of the

00:19:11,929 --> 00:19:16,790
80% of the people like mailing them now

00:19:13,940 --> 00:19:18,710
they've had four years to migrate and

00:19:16,790 --> 00:19:20,870
saying ok if you have a special case

00:19:18,710 --> 00:19:23,059
that need our attention let us know in

00:19:20,870 --> 00:19:25,160
one month otherwise in two months we

00:19:23,059 --> 00:19:27,350
will just disable your key and for the

00:19:25,160 --> 00:19:28,790
special cases well I think that's very

00:19:27,350 --> 00:19:31,820
important so we might even consider

00:19:28,790 --> 00:19:33,470
asking funds to fly people to them and

00:19:31,820 --> 00:19:35,990
sign their key in person instead of

00:19:33,470 --> 00:19:40,160
creating precedents for you know signing

00:19:35,990 --> 00:19:42,470
keys without being I did at one point

00:19:40,160 --> 00:19:43,790
make a joking suggestion to a TPL I

00:19:42,470 --> 00:19:45,559
can't remember exactly who it was that

00:19:43,790 --> 00:19:47,929
ganar and I should get to fly around the

00:19:45,559 --> 00:19:49,820
world and personally verify every single

00:19:47,929 --> 00:19:52,179
Dedes key but for some reason it didn't

00:19:49,820 --> 00:19:52,179
get accepted

00:19:53,340 --> 00:19:59,650
the other thing we have considered is

00:19:56,260 --> 00:20:01,480
that there are various other webs of

00:19:59,650 --> 00:20:03,210
trust that we can tie into I know that

00:20:01,480 --> 00:20:05,770
kernel.org have got fairly strict about

00:20:03,210 --> 00:20:07,330
getting their keys cross signs so we can

00:20:05,770 --> 00:20:10,240
potentially piggyback on some of those

00:20:07,330 --> 00:20:12,400
for developers who are geographically

00:20:10,240 --> 00:20:14,230
removed from other Dedes but are

00:20:12,400 --> 00:20:16,090
actually close to other free software

00:20:14,230 --> 00:20:18,010
developers and we can get trespass to

00:20:16,090 --> 00:20:20,260
them so so some of that we will consider

00:20:18,010 --> 00:20:22,360
and I think that ultimately it comes

00:20:20,260 --> 00:20:24,730
down to kiss bike ESPs is for that 20%

00:20:22,360 --> 00:20:26,260
and we will happily talk to anyone and I

00:20:24,730 --> 00:20:28,570
hope this doesn't apply to anyone in the

00:20:26,260 --> 00:20:29,710
room it's for people who are watching on

00:20:28,570 --> 00:20:31,230
the streams or people reporting this

00:20:29,710 --> 00:20:33,970
afterwards

00:20:31,230 --> 00:20:38,100
anyone a dev comp has no excuse for not

00:20:33,970 --> 00:20:40,780
having a larger key signed by two TDs

00:20:38,100 --> 00:20:42,520
at least and the other thing else to

00:20:40,780 --> 00:20:44,290
remember is sign keys with your new key

00:20:42,520 --> 00:20:46,150
it's a web of trust that needs to link

00:20:44,290 --> 00:20:47,860
both ways so don't just get signatures

00:20:46,150 --> 00:20:49,000
on your new key but make sure you have

00:20:47,860 --> 00:20:51,040
signed people because I think we are

00:20:49,000 --> 00:20:53,740
actually strengthening the Debian web of

00:20:51,040 --> 00:20:55,870
trust through this process can we bring

00:20:53,740 --> 00:20:58,480
those people to dev club instead of

00:20:55,870 --> 00:21:00,970
flowing the DVL or you guys to wherever

00:20:58,480 --> 00:21:05,040
they're well we have this dev cough

00:21:00,970 --> 00:21:08,700
newbies initiative that part of the

00:21:05,040 --> 00:21:11,470
airfare return every fun day we do are

00:21:08,700 --> 00:21:13,720
usually meant for people who have not

00:21:11,470 --> 00:21:16,450
yet come to that conf that's one way to

00:21:13,720 --> 00:21:17,950
reach out to them but yes I have talked

00:21:16,450 --> 00:21:20,350
to it with some people who say well no

00:21:17,950 --> 00:21:22,929
that's not it's not my interest to go to

00:21:20,350 --> 00:21:24,730
that come there is no sigh this is then

00:21:22,929 --> 00:21:29,470
I can get more signatures on their case

00:21:24,730 --> 00:21:32,200
but a larger variety of people the other

00:21:29,470 --> 00:21:33,940
potential has been for local groups to

00:21:32,200 --> 00:21:35,650
cross sign each other and then get one

00:21:33,940 --> 00:21:37,120
or a couple of those members to then

00:21:35,650 --> 00:21:38,440
come and visit somewhere else and get it

00:21:37,120 --> 00:21:40,270
signed so you can actually do that much

00:21:38,440 --> 00:21:41,890
more efficiently as long as you have a

00:21:40,270 --> 00:21:45,850
concentration of developer somewhere

00:21:41,890 --> 00:21:47,770
that makes sense to jump on what Zac

00:21:45,850 --> 00:21:50,169
said do you know if FTP master is

00:21:47,770 --> 00:21:52,270
intending to actually block uploads from

00:21:50,169 --> 00:21:53,950
these keys because the security is the

00:21:52,270 --> 00:21:57,100
concern and they would be concerned of

00:21:53,950 --> 00:21:59,200
getting uploads from untrusted keys so

00:21:57,100 --> 00:22:01,780
maybe one way to enforce that would be

00:21:59,200 --> 00:22:03,820
to disallow uploads but on not dropping

00:22:01,780 --> 00:22:05,859
the keys from the key ring

00:22:03,820 --> 00:22:08,440
yeah yes so the problem would be that

00:22:05,859 --> 00:22:10,090
the way that if the reason we run

00:22:08,440 --> 00:22:12,549
several different key rings and maintain

00:22:10,090 --> 00:22:13,950
them separately ourselves is because the

00:22:12,549 --> 00:22:15,789
various users of those key rings

00:22:13,950 --> 00:22:18,159
determine what to do with the key by

00:22:15,789 --> 00:22:19,269
which key ring they're in one potential

00:22:18,159 --> 00:22:23,649
option if we want to keep people

00:22:19,269 --> 00:22:24,879
uploading without having the view upload

00:22:23,649 --> 00:22:27,309
anything which is the major issue is

00:22:24,879 --> 00:22:29,019
that we dine with their key to a Debian

00:22:27,309 --> 00:22:31,119
maintainer key which would mean that

00:22:29,019 --> 00:22:32,320
they're tied very much - only uploading

00:22:31,119 --> 00:22:34,690
their own package that they're not

00:22:32,320 --> 00:22:36,309
disenfranchised in that way but we lose

00:22:34,690 --> 00:22:38,649
the security thing but really at this

00:22:36,309 --> 00:22:41,409
point no I don't think that's worthwhile

00:22:38,649 --> 00:22:43,359
a very special case we will potentially

00:22:41,409 --> 00:22:45,009
consider that but it would have to be

00:22:43,359 --> 00:22:46,119
incredibly special to say that that's

00:22:45,009 --> 00:22:47,559
the thing because then you've still got

00:22:46,119 --> 00:22:51,159
a weakness there it's just you've

00:22:47,559 --> 00:22:53,109
limited it to one package if we get down

00:22:51,159 --> 00:22:54,489
to a point where we have a smallish

00:22:53,109 --> 00:22:57,129
number of people left - for whatever

00:22:54,489 --> 00:22:59,769
reasons can't travel haven't travelled

00:22:57,129 --> 00:23:01,749
whatever um definitely please if you

00:22:59,769 --> 00:23:03,929
don't necessarily name and shame I know

00:23:01,749 --> 00:23:07,299
suggested that earlier tongue-in-cheek

00:23:03,929 --> 00:23:09,549
if we can find out geographical areas

00:23:07,299 --> 00:23:11,049
and map and post a list somewhere there

00:23:09,549 --> 00:23:13,570
were a lot of us who travel anyway as

00:23:11,049 --> 00:23:16,330
part of our work in the last year alone

00:23:13,570 --> 00:23:18,129
I've met up with probably a dozen people

00:23:16,330 --> 00:23:20,409
outside of the UK and I've signed

00:23:18,129 --> 00:23:22,299
including people in the Bay Area who

00:23:20,409 --> 00:23:24,359
managed to not meet all the Debian

00:23:22,299 --> 00:23:28,899
people that scared me

00:23:24,359 --> 00:23:29,979
you know we it's not easy necessarily

00:23:28,899 --> 00:23:31,690
there were going to be some people who

00:23:29,979 --> 00:23:33,940
might live a thousand miles down the

00:23:31,690 --> 00:23:37,509
beaten track and and and we will never

00:23:33,940 --> 00:23:41,859
get to see them but we must be able to

00:23:37,509 --> 00:23:45,369
solve this well one of the I don't know

00:23:41,859 --> 00:23:47,229
eternal a huge places save that comes to

00:23:45,369 --> 00:23:51,519
mind that many people there have had

00:23:47,229 --> 00:23:53,529
problems it's kind of the there's a very

00:23:51,519 --> 00:23:57,659
large amount of Canadians who are far

00:23:53,529 --> 00:23:57,659
away from anything and they hope

00:24:00,570 --> 00:24:04,410
so when you're talking about possible

00:24:02,490 --> 00:24:05,850
trust paths with other organizations

00:24:04,410 --> 00:24:08,100
there's wanted to mention that for the

00:24:05,850 --> 00:24:10,170
give your project we're also evaluating

00:24:08,100 --> 00:24:13,080
our current signing policies and keyring

00:24:10,170 --> 00:24:15,000
policies for FTP upload where a lot of

00:24:13,080 --> 00:24:16,590
the canoe upstream packages live so

00:24:15,000 --> 00:24:18,270
we've been looking at the Debian

00:24:16,590 --> 00:24:20,370
policies and trying to see if maybe if

00:24:18,270 --> 00:24:21,630
maybe let's get help with some of the if

00:24:20,370 --> 00:24:23,640
we could link those communities together

00:24:21,630 --> 00:24:25,470
possibly more signatures could happen

00:24:23,640 --> 00:24:42,810
that way to you do surely help Lee

00:24:25,470 --> 00:24:45,210
anything so yeah when it's about people

00:24:42,810 --> 00:24:47,340
who have issues meeting other people to

00:24:45,210 --> 00:24:49,110
get signatures it goes back to the known

00:24:47,340 --> 00:24:51,180
problem of verifying them in the first

00:24:49,110 --> 00:24:54,480
place which is something we at firm desk

00:24:51,180 --> 00:24:56,880
ready struggle with and have several

00:24:54,480 --> 00:25:00,240
ways including sometimes mailing private

00:24:56,880 --> 00:25:06,090
so I don't think that is an issue that's

00:25:00,240 --> 00:25:09,780
just something we already do it and I'd

00:25:06,090 --> 00:25:14,100
be happy if people get in touch happy to

00:25:09,780 --> 00:25:16,190
help the issue is probably what we do

00:25:14,100 --> 00:25:21,120
with people that don't get in touch and

00:25:16,190 --> 00:25:22,920
which I would think Mia it's kind of the

00:25:21,120 --> 00:25:25,020
point I think the problem here is being

00:25:22,920 --> 00:25:28,140
that there are still lots and lots of

00:25:25,020 --> 00:25:30,720
keys that need dealt with whenever we

00:25:28,140 --> 00:25:32,880
did the v3 migration or getting rid of

00:25:30,720 --> 00:25:34,170
them quite a few of them had two keys in

00:25:32,880 --> 00:25:36,150
the keyring they had one v3 and one

00:25:34,170 --> 00:25:37,170
before was easy enough to remove quite a

00:25:36,150 --> 00:25:38,400
lot of them were people who've been the

00:25:37,170 --> 00:25:39,900
project for a very long time we're

00:25:38,400 --> 00:25:41,430
actually quite well connected and can

00:25:39,900 --> 00:25:44,460
get a new key are already had a new key

00:25:41,430 --> 00:25:46,830
so it wasn't the the the short tail at

00:25:44,460 --> 00:25:48,750
the end of people who need a chest was

00:25:46,830 --> 00:25:50,430
quite small and at this point we're

00:25:48,750 --> 00:25:53,700
aware that if we just sort of dumped 500

00:25:50,430 --> 00:25:55,110
people on or m.i.a or or whatever it is

00:25:53,700 --> 00:25:56,340
that that that's quite a lot so we are

00:25:55,110 --> 00:25:58,830
going to do an initial round of meals

00:25:56,340 --> 00:26:00,480
and try and get the easy ones done and

00:25:58,830 --> 00:26:01,920
kick people and I actually reacting and

00:26:00,480 --> 00:26:03,540
then certainly we will engage with any

00:26:01,920 --> 00:26:07,170
team who wants to come and see us as

00:26:03,540 --> 00:26:09,360
people and I'm all for the actually

00:26:07,170 --> 00:26:10,800
producing a list of people who need to

00:26:09,360 --> 00:26:11,200
move their keys it's not a naming and

00:26:10,800 --> 00:26:12,940
shaming

00:26:11,200 --> 00:26:14,080
but it's about people who know that

00:26:12,940 --> 00:26:16,260
maybe being able to kick them into

00:26:14,080 --> 00:26:18,070
action if they somehow missed a meal or

00:26:16,260 --> 00:26:19,330
realizing that they know someone who

00:26:18,070 --> 00:26:21,700
needs a key signed and they can go and

00:26:19,330 --> 00:26:28,060
offer and say I'll sign your key get off

00:26:21,700 --> 00:26:31,300
your arse and dirt so this this hasn't

00:26:28,060 --> 00:26:32,800
been said clearly and so I felt an

00:26:31,300 --> 00:26:36,190
interesting it

00:26:32,800 --> 00:26:40,900
these keyring things is because one

00:26:36,190 --> 00:26:44,440
compromised key will have a huge impact

00:26:40,900 --> 00:26:47,680
on the war world I'd like to you know

00:26:44,440 --> 00:26:49,510
sleep better at night yeah just please

00:26:47,680 --> 00:26:53,800
move that for we're living in the past

00:26:49,510 --> 00:26:56,710
northern world I mean if if people part

00:26:53,800 --> 00:26:58,120
of the project can understand that they

00:26:56,710 --> 00:27:01,240
are they have at hence the

00:26:58,120 --> 00:27:04,720
responsibility of thousands of hundreds

00:27:01,240 --> 00:27:07,290
of thousands of people then I mean sorry

00:27:04,720 --> 00:27:13,330
read again the social contract

00:27:07,290 --> 00:27:15,820
priorities users and a and so that's

00:27:13,330 --> 00:27:17,800
that's one thing the other thing is that

00:27:15,820 --> 00:27:21,670
it's there is e so there is a security

00:27:17,800 --> 00:27:23,920
of the individual keys and you know how

00:27:21,670 --> 00:27:26,710
developers manage the key and he's a

00:27:23,920 --> 00:27:32,590
complicated topic and I one thing I

00:27:26,710 --> 00:27:35,920
would very much love to see I yep a I I

00:27:32,590 --> 00:27:38,080
mean I was yes sorry please do I would

00:27:35,920 --> 00:27:41,290
love to see that the keyring maintainer

00:27:38,080 --> 00:27:43,090
put up best practices document and maybe

00:27:41,290 --> 00:27:45,700
I would love to see the project Ferns

00:27:43,090 --> 00:27:50,020
smart cards for any developer who want

00:27:45,700 --> 00:27:52,210
one right yeah well thank you for this I

00:27:50,020 --> 00:27:54,460
completely agree with what you say and I

00:27:52,210 --> 00:27:56,410
was well I was telling them well maybe

00:27:54,460 --> 00:27:59,380
we should write now interrupt for a

00:27:56,410 --> 00:28:01,690
little the discussion we have just one

00:27:59,380 --> 00:28:05,740
more point here in the queue of things

00:28:01,690 --> 00:28:08,500
to say one point that will probably bog

00:28:05,740 --> 00:28:11,110
more of you because we don't do it I I

00:28:08,500 --> 00:28:13,240
must say well my own keys I I don't

00:28:11,110 --> 00:28:15,460
think they're properly handled and I

00:28:13,240 --> 00:28:18,250
should be among the first to change this

00:28:15,460 --> 00:28:19,870
so we've been talking for example how

00:28:18,250 --> 00:28:23,030
can we improve the key handling

00:28:19,870 --> 00:28:26,800
practices well for example a separate

00:28:23,030 --> 00:28:30,320
the the main key from the signing Keys

00:28:26,800 --> 00:28:34,370
requiring keys to expire and technically

00:28:30,320 --> 00:28:38,360
we can easily as the checks to see if

00:28:34,370 --> 00:28:42,140
all the kids would have a RA I mean we

00:28:38,360 --> 00:28:45,020
got a an expire expire Abel a or it's

00:28:42,140 --> 00:28:46,280
not just a second so some people are

00:28:45,020 --> 00:28:47,690
probably horrified by seeing a

00:28:46,280 --> 00:28:51,710
recommendation or even a possible

00:28:47,690 --> 00:28:54,440
requirement of key expiration and so I

00:28:51,710 --> 00:28:56,900
wanted to just explain why this is

00:28:54,440 --> 00:28:59,060
potentially a reasonable thing I know

00:28:56,900 --> 00:29:00,170
that many people don't have an

00:28:59,060 --> 00:29:02,120
expiration date set on their keys and

00:29:00,170 --> 00:29:04,250
they have a revocation certificate that

00:29:02,120 --> 00:29:05,870
they have offline someplace so that if

00:29:04,250 --> 00:29:07,190
they lose their key or their key gets

00:29:05,870 --> 00:29:08,600
compromised they can just publish the

00:29:07,190 --> 00:29:11,690
revocation certificate and be done with

00:29:08,600 --> 00:29:13,550
it in that case those people probably

00:29:11,690 --> 00:29:15,950
there is no good reason to argue that

00:29:13,550 --> 00:29:18,410
they need an expiration date

00:29:15,950 --> 00:29:20,240
but we can't know from the outside

00:29:18,410 --> 00:29:22,940
whether you actually are maintaining

00:29:20,240 --> 00:29:24,530
your revocation certificate properly and

00:29:22,940 --> 00:29:25,970
we would like the key we would like to

00:29:24,530 --> 00:29:29,480
know that you are trying to maintain

00:29:25,970 --> 00:29:31,400
your key and if you have an expiration

00:29:29,480 --> 00:29:34,250
date set on your key it turns out that

00:29:31,400 --> 00:29:36,740
you can update the expiration date so if

00:29:34,250 --> 00:29:38,780
you update it every couple of years and

00:29:36,740 --> 00:29:40,130
move the expiration date out you will

00:29:38,780 --> 00:29:42,080
have an expiration date on your key and

00:29:40,130 --> 00:29:43,880
by updating the expiration date your

00:29:42,080 --> 00:29:47,810
your proving that you still have your

00:29:43,880 --> 00:29:53,000
key at the very least you can also even

00:29:47,810 --> 00:29:55,730
update it after it expires so yeah so so

00:29:53,000 --> 00:29:58,670
just it's worth it's worth being aware

00:29:55,730 --> 00:30:00,080
that that you can do this and that you

00:29:58,670 --> 00:30:01,550
should maintain your keys and that you

00:30:00,080 --> 00:30:04,700
can actually add new self sig's on your

00:30:01,550 --> 00:30:07,010
keys as you as you as your key handling

00:30:04,700 --> 00:30:09,920
practices change you can add new sub P

00:30:07,010 --> 00:30:13,370
and so forth and so setting a key

00:30:09,920 --> 00:30:16,490
expiration publicly is a way of ensuring

00:30:13,370 --> 00:30:18,260
that people get a copy of your new

00:30:16,490 --> 00:30:19,550
updates from the key servers because

00:30:18,260 --> 00:30:22,190
otherwise they'll say oh this key is

00:30:19,550 --> 00:30:23,270
expired let me refresh it and then

00:30:22,190 --> 00:30:25,670
they'll get whatever updates you've

00:30:23,270 --> 00:30:28,910
updated so expirations have other

00:30:25,670 --> 00:30:33,410
advantages beyond like your keys only

00:30:28,910 --> 00:30:35,930
disappearing if it's the use case you

00:30:33,410 --> 00:30:36,380
have in mind is just see that the person

00:30:35,930 --> 00:30:39,169
still going

00:30:36,380 --> 00:30:42,020
the key that could just as well be done

00:30:39,169 --> 00:30:47,059
by seeing that they've used the key like

00:30:42,020 --> 00:30:49,070
signed something recently or would that

00:30:47,059 --> 00:30:51,799
be okay also to just have expiration

00:30:49,070 --> 00:30:53,059
dates on sub keys so because I'd it's

00:30:51,799 --> 00:30:54,110
ill but you're missing the you're

00:30:53,059 --> 00:30:56,900
missing the last use case that I

00:30:54,110 --> 00:30:58,520
mentioned which is that people probably

00:30:56,900 --> 00:31:00,320
will update their keys if they're

00:30:58,520 --> 00:31:01,970
maintaining them and they may update by

00:31:00,320 --> 00:31:03,980
signaling that they prefer different

00:31:01,970 --> 00:31:07,179
cipher suites they may update in other

00:31:03,980 --> 00:31:10,010
ways the only way to get people to

00:31:07,179 --> 00:31:11,870
notice that is to make sure that they

00:31:10,010 --> 00:31:14,450
refresh their keys find the key servers

00:31:11,870 --> 00:31:16,820
so explanation that it's on sub keys

00:31:14,450 --> 00:31:18,679
would still fit that requirement so

00:31:16,820 --> 00:31:21,260
after two years my sub keys have expired

00:31:18,679 --> 00:31:23,870
somebody needs to redownload my key to

00:31:21,260 --> 00:31:27,039
see that there's subcommittee yes that's

00:31:23,870 --> 00:31:27,039
usable that's true

00:31:33,220 --> 00:31:40,490
might having expiration dates on the

00:31:36,679 --> 00:31:45,500
master keys help mitigate the 1024

00:31:40,490 --> 00:31:57,500
problem probably not because your master

00:31:45,500 --> 00:31:59,360
key would still have been won 124 so the

00:31:57,500 --> 00:32:01,370
keys wouldn't have fitted out what you

00:31:59,360 --> 00:32:03,169
could potentially use it for is a way of

00:32:01,370 --> 00:32:05,690
saying this key is obviously not an

00:32:03,169 --> 00:32:08,419
active use and then potentially flagging

00:32:05,690 --> 00:32:09,799
that to the mi a team as a this key has

00:32:08,419 --> 00:32:14,390
been expired for a period of time and

00:32:09,799 --> 00:32:16,549
therefore might need to be like that but

00:32:14,390 --> 00:32:20,539
the point is that actually if it's been

00:32:16,549 --> 00:32:23,270
expired if it's been expired then the

00:32:20,539 --> 00:32:25,250
ftp won't accept signatures from it and

00:32:23,270 --> 00:32:27,289
that's actually probably a good thing if

00:32:25,250 --> 00:32:29,390
the key is actually I idol and it's a

00:32:27,289 --> 00:32:30,919
weak key and so there may be other

00:32:29,390 --> 00:32:33,140
changes that we want in the future right

00:32:30,919 --> 00:32:35,870
we've talked about v3 to v4 we've talked

00:32:33,140 --> 00:32:37,640
about 1024 bit to larger than 2048 bit

00:32:35,870 --> 00:32:40,010
there may be other changes that we want

00:32:37,640 --> 00:32:42,559
to push in the future and requiring an

00:32:40,010 --> 00:32:45,650
expiry gives us a at least a window that

00:32:42,559 --> 00:32:46,900
we can say okay you know when when the

00:32:45,650 --> 00:32:50,399
next change comes down the line

00:32:46,900 --> 00:32:53,139
potentially elliptic curve cryptography

00:32:50,399 --> 00:32:54,130
I'm not requiring this now I'm just like

00:32:53,139 --> 00:32:55,659
putting it out there that there are

00:32:54,130 --> 00:32:58,000
other possible changes that we were

00:32:55,659 --> 00:32:59,110
pushing for having expiration dates on

00:32:58,000 --> 00:33:00,820
all the keys in the keyring we'll make

00:32:59,110 --> 00:33:02,620
sure that we have a window in which we

00:33:00,820 --> 00:33:04,539
can actually do that kind of transition

00:33:02,620 --> 00:33:08,080
that everyone knows about and has seen

00:33:04,539 --> 00:33:10,750
from the beginning I just wanted to

00:33:08,080 --> 00:33:13,360
point out there's a utility that you can

00:33:10,750 --> 00:33:15,429
install it's in Debian written by

00:33:13,360 --> 00:33:19,389
someone who's here at Def Con that will

00:33:15,429 --> 00:33:21,669
keep your keyring updated over time by

00:33:19,389 --> 00:33:25,260
slowly refreshing all the keys over

00:33:21,669 --> 00:33:28,809
tours so you are not exposing your

00:33:25,260 --> 00:33:30,820
social graph called parsimony and it

00:33:28,809 --> 00:33:32,350
will run in the background just keep

00:33:30,820 --> 00:33:38,019
everything updated for you I recommend

00:33:32,350 --> 00:33:39,850
checking that out although I believe

00:33:38,019 --> 00:33:42,399
there's there's like someone rewrote

00:33:39,850 --> 00:33:44,830
parsimony and it's better somehow I

00:33:42,399 --> 00:33:48,120
forget exactly how but like it's it's on

00:33:44,830 --> 00:33:50,710
github so there may be two versions yeah

00:33:48,120 --> 00:33:52,889
yeah there's a there's a it's written in

00:33:50,710 --> 00:33:52,889
bash

00:34:03,210 --> 00:34:09,630
I just like to point out that education

00:34:07,380 --> 00:34:11,280
and documentation could help here when I

00:34:09,630 --> 00:34:13,350
was doing signatures recently it wasn't

00:34:11,280 --> 00:34:15,450
clear to me what a signature meant what

00:34:13,350 --> 00:34:18,300
it meant for a sub key what it meant to

00:34:15,450 --> 00:34:20,370
change a parameter on a key in terms of

00:34:18,300 --> 00:34:22,650
signatures and all that kind of gets in

00:34:20,370 --> 00:34:24,960
the way of going forward on this if it

00:34:22,650 --> 00:34:26,880
was clear or what exactly it means when

00:34:24,960 --> 00:34:28,830
you do a signature and what you can and

00:34:26,880 --> 00:34:30,690
can't do after you've signed a key

00:34:28,830 --> 00:34:33,150
without inviting and validating either

00:34:30,690 --> 00:34:35,130
all or part of that signature and what

00:34:33,150 --> 00:34:36,270
does it mean to have a sub key and what

00:34:35,130 --> 00:34:38,490
does it mean to have a signature on

00:34:36,270 --> 00:34:40,590
master versus a sub key all that stuff

00:34:38,490 --> 00:34:42,570
is really not covering the documentation

00:34:40,590 --> 00:34:44,070
as well as it could be and if it was it

00:34:42,570 --> 00:34:45,840
would be easier for a person to sit down

00:34:44,070 --> 00:34:46,700
read the documents and understand what

00:34:45,840 --> 00:34:49,950
to do next

00:34:46,700 --> 00:34:52,890
well I agree documentation is very

00:34:49,950 --> 00:34:55,080
important but on the other hand I mean

00:34:52,890 --> 00:34:58,530
there's so much documentation about

00:34:55,080 --> 00:35:00,600
crypto handling I don't think we we have

00:34:58,530 --> 00:35:03,060
to rewrite or even mirror of the

00:35:00,600 --> 00:35:05,850
available documentation I mean you are

00:35:03,060 --> 00:35:09,240
right maybe we should try at least to

00:35:05,850 --> 00:35:13,040
link two explanations we have tried for

00:35:09,240 --> 00:35:16,230
example to do just to show the process

00:35:13,040 --> 00:35:20,040
one that comes to mind is say when Anna

00:35:16,230 --> 00:35:22,260
wrote the instructions on how to

00:35:20,040 --> 00:35:24,300
generate the proper key well we just

00:35:22,260 --> 00:35:28,020
copied over because it it was very well

00:35:24,300 --> 00:35:30,150
done and it was meant for our use but

00:35:28,020 --> 00:35:32,850
there's so many things that we can do

00:35:30,150 --> 00:35:35,130
about what it means to split a key

00:35:32,850 --> 00:35:37,980
between the sub keys and how to do that

00:35:35,130 --> 00:35:41,100
it gets to too much in the details and

00:35:37,980 --> 00:35:43,350
walder I challenge you to look at to see

00:35:41,100 --> 00:35:45,120
what it means to sign a key and what you

00:35:43,350 --> 00:35:46,410
can do to change it without invalidating

00:35:45,120 --> 00:35:48,810
the key it seems very straightforward

00:35:46,410 --> 00:35:50,280
and I couldn't find a way to do it

00:35:48,810 --> 00:35:52,770
without getting into the source code so

00:35:50,280 --> 00:35:54,090
I would be happy to try to work with

00:35:52,770 --> 00:35:57,470
people who want to do that kind of

00:35:54,090 --> 00:36:01,020
documentation I worry that I've

00:35:57,470 --> 00:36:03,000
internalized too much of RFC 4880 to be

00:36:01,020 --> 00:36:04,770
able to write in English anymore but

00:36:03,000 --> 00:36:06,570
it's not about what the scope is for the

00:36:04,770 --> 00:36:07,950
signature just when you sign something

00:36:06,570 --> 00:36:09,930
this is what it means

00:36:07,950 --> 00:36:11,370
sure and what I'm saying is anyone who

00:36:09,930 --> 00:36:12,930
wants to work on something like that who

00:36:11,370 --> 00:36:16,000
wants to run it by someone who knows the

00:36:12,930 --> 00:36:19,210
the gruesome technical details to make

00:36:16,000 --> 00:36:21,280
the documentation is both accessible to

00:36:19,210 --> 00:36:23,350
someone who is trying to get something

00:36:21,280 --> 00:36:25,090
concrete done and is not technically

00:36:23,350 --> 00:36:27,880
incorrect I'd be happy to collaborate

00:36:25,090 --> 00:36:29,580
with that I'm not sure that I will be

00:36:27,880 --> 00:36:31,780
able to the one to be able to write the

00:36:29,580 --> 00:36:34,270
specific accessible stuff but anyone who

00:36:31,780 --> 00:36:39,730
wants to come find me I'm dkg I would be

00:36:34,270 --> 00:36:41,410
happy to work with you on it yeah I

00:36:39,730 --> 00:36:43,090
think if anyone does want to work in

00:36:41,410 --> 00:36:44,950
such documentation then they can quite

00:36:43,090 --> 00:36:47,830
happily run it by keyring me into Debian

00:36:44,950 --> 00:36:50,200
org and I think if we got something that

00:36:47,830 --> 00:36:52,030
was a high two we would happily put it

00:36:50,200 --> 00:36:54,730
up on keyring Debian dot org for people

00:36:52,030 --> 00:36:55,990
to be able to go and view you but we're

00:36:54,730 --> 00:36:57,640
not the right people to write the

00:36:55,990 --> 00:36:59,110
accessible documentation because we've

00:36:57,640 --> 00:37:00,790
been doing this for years and some of it

00:36:59,110 --> 00:37:03,370
is second nature and we won't think of

00:37:00,790 --> 00:37:04,750
the right questions but but to help

00:37:03,370 --> 00:37:08,440
someone who sort of wants to bridge that

00:37:04,750 --> 00:37:10,300
gap absolutely let me also say that one

00:37:08,440 --> 00:37:12,520
of the problems is that Debian

00:37:10,300 --> 00:37:13,870
developers in their crypto handling

00:37:12,520 --> 00:37:16,660
process and in their packaging process

00:37:13,870 --> 00:37:20,380
and everything are a remarkably diverse

00:37:16,660 --> 00:37:22,270
group I suspect and so if we say here is

00:37:20,380 --> 00:37:24,520
here is the way to do it we're going to

00:37:22,270 --> 00:37:25,720
get pushback and from people who say

00:37:24,520 --> 00:37:27,130
well that's not how I do it I do it

00:37:25,720 --> 00:37:29,890
better because it's better like this and

00:37:27,130 --> 00:37:31,150
it may well be better for them so that

00:37:29,890 --> 00:37:33,310
this kind of documentation would be

00:37:31,150 --> 00:37:36,160
great to have to say here are you know

00:37:33,310 --> 00:37:37,330
three styles there's the you know and we

00:37:36,160 --> 00:37:39,190
can pick them out and work on on

00:37:37,330 --> 00:37:41,290
something like that and and have

00:37:39,190 --> 00:37:42,700
something nice and concise that explains

00:37:41,290 --> 00:37:43,870
the advantages and the comparisons

00:37:42,700 --> 00:37:45,430
between the different styles I think

00:37:43,870 --> 00:37:54,460
that would be useful but it's still not

00:37:45,430 --> 00:37:56,170
one thing I would just say that on that

00:37:54,460 --> 00:37:58,510
point one of the things that we've done

00:37:56,170 --> 00:38:00,760
in the Python team is we've said you

00:37:58,510 --> 00:38:02,140
know we have a strong opinion about how

00:38:00,760 --> 00:38:05,950
things are even though there's lots of

00:38:02,140 --> 00:38:08,590
options and we have sort of the the main

00:38:05,950 --> 00:38:10,960
path down the documentation is here's

00:38:08,590 --> 00:38:12,580
how to do it and then we can have links

00:38:10,960 --> 00:38:14,290
you know that say well there's you know

00:38:12,580 --> 00:38:15,970
there are alternatives go look over here

00:38:14,290 --> 00:38:17,560
if you're really interested in that but

00:38:15,970 --> 00:38:21,040
but having I think having a strong

00:38:17,560 --> 00:38:24,040
opinionated way which is sort of largely

00:38:21,040 --> 00:38:26,980
maybe York consensus best practices is

00:38:24,040 --> 00:38:28,990
really helpful to people because a lot

00:38:26,980 --> 00:38:29,530
of people don't want choice they want to

00:38:28,990 --> 00:38:31,270
know

00:38:29,530 --> 00:38:33,130
what is the right way to do it and yes

00:38:31,270 --> 00:38:35,320
there's a lot of options but so I want

00:38:33,130 --> 00:38:40,480
to highlight that there's a tool that's

00:38:35,320 --> 00:38:43,990
called I think it's it's in Hope and PGP

00:38:40,480 --> 00:38:46,570
- tools package that's called that it's

00:38:43,990 --> 00:38:50,290
it's a Haskell implementation Thank You

00:38:46,570 --> 00:38:52,000
Clint Adams but that's it's hokey lint

00:38:50,290 --> 00:38:53,110
and you can run it on your key and it

00:38:52,000 --> 00:38:55,870
will give you a list of suggestions

00:38:53,110 --> 00:38:58,660
about what you can do to improve the

00:38:55,870 --> 00:39:01,620
situation of your key itself so I

00:38:58,660 --> 00:39:01,620
recommend checking that out

00:39:05,220 --> 00:39:12,340
no valve games for users of one or two

00:39:08,170 --> 00:39:14,500
4-bit keys problem solved that's not an

00:39:12,340 --> 00:39:15,880
incentive for some of us are we done

00:39:14,500 --> 00:39:22,150
with the slides did you get to

00:39:15,880 --> 00:39:24,280
everything could you say briefly

00:39:22,150 --> 00:39:34,930
something about the future of open PGP

00:39:24,280 --> 00:39:36,130
itself so there's two questions there's

00:39:34,930 --> 00:39:39,070
two questions here one is the future of

00:39:36,130 --> 00:39:41,580
open PGP and one is the future of GPG in

00:39:39,070 --> 00:39:46,230
Debian and so I'll talk about open PGP

00:39:41,580 --> 00:39:48,750
open PGP is moving at a glacial pace

00:39:46,230 --> 00:39:51,940
towards elliptic curve cryptography

00:39:48,750 --> 00:39:53,920
which is not widely implemented but I

00:39:51,940 --> 00:39:57,460
don't know if folks have seen Google has

00:39:53,920 --> 00:40:00,870
produced a not yet distributed alpha

00:39:57,460 --> 00:40:03,340
version webmail plug-in for chrome

00:40:00,870 --> 00:40:05,560
called end-to-end encryption that

00:40:03,340 --> 00:40:11,980
generates new keys that are elliptic

00:40:05,560 --> 00:40:17,770
curve keys new P G's 2.1 beta has

00:40:11,980 --> 00:40:18,810
elliptic curve cryptography that are

00:40:17,770 --> 00:40:22,180
that

00:40:18,810 --> 00:40:23,830
per strength so for something comparably

00:40:22,180 --> 00:40:26,440
strong the keys the keys and the

00:40:23,830 --> 00:40:28,200
signatures are much shorter it's a

00:40:26,440 --> 00:40:30,970
different kind of crypto and it will be

00:40:28,200 --> 00:40:33,670
hopefully available in experimental

00:40:30,970 --> 00:40:37,810
possibly by the end of dead conf so this

00:40:33,670 --> 00:40:38,950
ties into the evolution of GPG so if

00:40:37,810 --> 00:40:41,260
folks are interested in experimenting

00:40:38,950 --> 00:40:43,710
with newer versions and newer newer

00:40:41,260 --> 00:40:43,710
crypto

00:40:43,930 --> 00:40:48,890
either come to the canoe PG mayn't

00:40:46,130 --> 00:40:53,360
session or come find some of us

00:40:48,890 --> 00:40:54,920
afterwards and watch experimental it's

00:40:53,360 --> 00:40:56,960
worth pointing out that this ties

00:40:54,920 --> 00:40:59,450
somewhat into rookies talk from the

00:40:56,960 --> 00:41:08,180
other day and that even if we get

00:40:59,450 --> 00:41:10,040
elliptic curve cryptography in

00:41:08,180 --> 00:41:11,750
infrastructure we will have no way to

00:41:10,040 --> 00:41:13,310
accept those keys as part of Debian

00:41:11,750 --> 00:41:17,420
because nothing will be able to verify

00:41:13,310 --> 00:41:19,250
them so will be some time before we can

00:41:17,420 --> 00:41:21,650
accept elliptic curves as part of the

00:41:19,250 --> 00:41:31,550
Debian keyring which is kind of

00:41:21,650 --> 00:41:33,410
unfortunate I have a moderately related

00:41:31,550 --> 00:41:36,260
question about strength which is that

00:41:33,410 --> 00:41:40,130
it's apparently the case that

00:41:36,260 --> 00:41:41,420
fingerprints are always sha-1 and i was

00:41:40,130 --> 00:41:43,310
wondering if there are standard

00:41:41,420 --> 00:41:45,980
practices to get away from using sha-1

00:41:43,310 --> 00:41:49,040
here so there is some towards an open

00:41:45,980 --> 00:41:52,040
PGP v5 format which will standardize on

00:41:49,040 --> 00:41:55,790
a separate hush and I think it's sha-256

00:41:52,040 --> 00:41:56,660
reshef I feel there's no decision yet

00:41:55,790 --> 00:41:59,150
I mean one of the things where the

00:41:56,660 --> 00:42:02,030
changes from v3 to v4 was v3 was using

00:41:59,150 --> 00:42:03,470
md5 sums over a different set of the key

00:42:02,030 --> 00:42:05,600
material which is part of the problem a

00:42:03,470 --> 00:42:08,270
none v4 move to sha-1 but that's going

00:42:05,600 --> 00:42:13,460
to require a an incompatible change and

00:42:08,270 --> 00:42:16,280
the actual PGP format so yeah you don't

00:42:13,460 --> 00:42:18,830
have to use a sha-1 you could use md5 by

00:42:16,280 --> 00:42:20,270
using the view through keys yeah you

00:42:18,830 --> 00:42:21,860
don't do that that is not a serious

00:42:20,270 --> 00:42:24,530
suggestion this is actually the way that

00:42:21,860 --> 00:42:26,300
you forge a fingerprint in open PGP v3

00:42:24,530 --> 00:42:30,020
thing finger the the fingerprint is

00:42:26,300 --> 00:42:31,940
actually done by an md5 of the modulus

00:42:30,020 --> 00:42:34,580
so RSA is a modulus in an exponent and

00:42:31,940 --> 00:42:36,440
it's a its md5 over the concatenation of

00:42:34,580 --> 00:42:37,700
the modulus in the exponent so the way

00:42:36,440 --> 00:42:39,740
that you forge the fingerprint is you

00:42:37,700 --> 00:42:41,450
just cut up the bit string in a

00:42:39,740 --> 00:42:44,750
different place and you find a new a new

00:42:41,450 --> 00:42:46,610
modulus M and a new exponent E and you

00:42:44,750 --> 00:42:48,920
just look for that until you find a

00:42:46,610 --> 00:42:50,270
factorable M Prime and now you've got to

00:42:48,920 --> 00:42:53,030
think a key that has the exact same

00:42:50,270 --> 00:42:55,220
fingerprint so that's been fixed in the

00:42:53,030 --> 00:42:56,599
four keys as of 20 years

00:42:55,220 --> 00:43:01,040
twelve years ago I don't know a long

00:42:56,599 --> 00:43:03,260
time ago but but I wanted to talk about

00:43:01,040 --> 00:43:05,300
why so we can move away from that and

00:43:03,260 --> 00:43:08,810
that's that's then that's that's a

00:43:05,300 --> 00:43:12,079
cryptographic problem but the sha-1 for

00:43:08,810 --> 00:43:13,760
fingerprints is not well I don't believe

00:43:12,079 --> 00:43:16,790
that that is directly attackable right

00:43:13,760 --> 00:43:18,829
now so sha-1 is attackable for

00:43:16,790 --> 00:43:21,380
collisions no-one is published in sha-1

00:43:18,829 --> 00:43:23,420
collision but actually open PGP V for

00:43:21,380 --> 00:43:24,650
fingerprints are not a situation where

00:43:23,420 --> 00:43:26,180
we're worried about the collision

00:43:24,650 --> 00:43:29,210
resistance of the hash we're worried

00:43:26,180 --> 00:43:31,010
about preimage resistance and preimage

00:43:29,210 --> 00:43:33,890
resistance is significantly stronger

00:43:31,010 --> 00:43:35,720
than collision resistance so yes we are

00:43:33,890 --> 00:43:37,099
moving away from sha-1 but for the

00:43:35,720 --> 00:43:42,859
fingerprints themselves that's actually

00:43:37,099 --> 00:43:47,000
not that important so another kind of

00:43:42,859 --> 00:43:48,950
related question is I guess inline PGP

00:43:47,000 --> 00:43:52,609
is like not cool anymore

00:43:48,950 --> 00:43:54,349
and we use it all over a lot of our

00:43:52,609 --> 00:43:56,630
infrastructure in fact even keyring

00:43:54,349 --> 00:43:59,869
Debian org when I looked at the process

00:43:56,630 --> 00:44:03,260
for updating keys it says don't use PGP

00:43:59,869 --> 00:44:05,930
mine because it breaks it please fix

00:44:03,260 --> 00:44:08,869
request tracker yes pick retractor not

00:44:05,930 --> 00:44:10,910
to mine go PGP mine and not to decide to

00:44:08,869 --> 00:44:13,280
re-encode meals and not to do amount of

00:44:10,910 --> 00:44:14,990
things absolutely PG be my meals is the

00:44:13,280 --> 00:44:17,390
right way to do things as far as we're

00:44:14,990 --> 00:44:19,640
concerned but we're limited by the

00:44:17,390 --> 00:44:21,770
infrastructure we have party will

00:44:19,640 --> 00:44:23,839
actually do signature verification for

00:44:21,770 --> 00:44:25,250
you but for hopefully fairly offensive

00:44:23,839 --> 00:44:27,170
reasons we won't do the verification

00:44:25,250 --> 00:44:31,060
ourselves rather than trust some random

00:44:27,170 --> 00:44:35,390
piece of infrastructure a even sometimes

00:44:31,060 --> 00:44:37,760
it's quite bothering and they we have

00:44:35,390 --> 00:44:41,000
encoding issues when when we have some

00:44:37,760 --> 00:44:43,520
keys correctly sent to RT in line signed

00:44:41,000 --> 00:44:45,920
but somebody used I don't know the wrong

00:44:43,520 --> 00:44:48,859
charset or whatever and we can spend

00:44:45,920 --> 00:44:50,510
hours looking for what what's wrong I I

00:44:48,859 --> 00:44:52,040
actually know what goes on here what

00:44:50,510 --> 00:44:54,140
actually goes on is that the likes of

00:44:52,040 --> 00:44:55,880
mouths will choose the best characters

00:44:54,140 --> 00:44:57,950
that I can find to try and represent

00:44:55,880 --> 00:44:59,900
your meal as seven area bets

00:44:57,950 --> 00:45:03,079
so rather than encoding is Unicode Oh

00:44:59,900 --> 00:45:04,760
for example use LAN one an RT and its

00:45:03,079 --> 00:45:07,400
wisdom decided it's going to re-encode

00:45:04,760 --> 00:45:08,390
everything into utf-8 which is fine but

00:45:07,400 --> 00:45:10,809
then it sends out

00:45:08,390 --> 00:45:14,210
in utf-8 so your meal has been

00:45:10,809 --> 00:45:17,690
reencounter for doesn't validate when we

00:45:14,210 --> 00:45:19,279
receive it anymore line wrapping also

00:45:17,690 --> 00:45:20,869
happens there's a whole bunch of things

00:45:19,279 --> 00:45:23,480
that mangle meal that then mean the

00:45:20,869 --> 00:45:26,269
account validly at the car the signature

00:45:23,480 --> 00:45:27,470
and I've got quite adapt trying to

00:45:26,269 --> 00:45:28,970
figure out what they are and fixing it

00:45:27,470 --> 00:45:33,670
up so they valid yet without having to

00:45:28,970 --> 00:45:33,670
go and bother developers again but yeah

00:45:41,079 --> 00:45:46,339
the art the archive is generating signed

00:45:44,960 --> 00:45:48,829
meals which are pretty much the changes

00:45:46,339 --> 00:45:50,779
file rather than it I mean you'd have to

00:45:48,829 --> 00:45:51,710
basically take the changes file that's

00:45:50,779 --> 00:45:53,690
being uploaded what you've done is

00:45:51,710 --> 00:45:55,519
you've uploaded a clear signed file

00:45:53,690 --> 00:45:57,049
you'd have to take that apart turn it

00:45:55,519 --> 00:45:59,390
into PGP mime thing I think that's a bit

00:45:57,049 --> 00:46:01,009
more understandable I think that we

00:45:59,390 --> 00:46:03,410
should all be able to say in PGP mime

00:46:01,009 --> 00:46:05,749
meals and have them just work and I will

00:46:03,410 --> 00:46:07,819
accept that the keyring lien team or the

00:46:05,749 --> 00:46:10,640
worst example of people who can't just

00:46:07,819 --> 00:46:12,259
accept PGP mine meals but we don't have

00:46:10,640 --> 00:46:14,119
the time to go in effects RT and we're

00:46:12,259 --> 00:46:15,739
very grateful for DSA for running the RT

00:46:14,119 --> 00:46:18,589
instance for us and we don't expect them

00:46:15,739 --> 00:46:23,960
to go and fix it so yeah please stamp

00:46:18,589 --> 00:46:26,630
patches I just wanted to add something

00:46:23,960 --> 00:46:31,519
to respond to the question about the

00:46:26,630 --> 00:46:34,369
future of new PG I know that the project

00:46:31,519 --> 00:46:37,430
itself is moving pretty slow at times

00:46:34,369 --> 00:46:39,410
and part of the reason for that is the

00:46:37,430 --> 00:46:42,259
developers are having a difficult time

00:46:39,410 --> 00:46:45,230
sustaining the development and so

00:46:42,259 --> 00:46:49,970
they're they're looking for help not

00:46:45,230 --> 00:46:52,009
just actual help but funding to keep it

00:46:49,970 --> 00:46:53,599
going so if you happen to be a large

00:46:52,009 --> 00:46:55,749
company with lots of money to throw

00:46:53,599 --> 00:46:58,249
around I know they're looking for some

00:46:55,749 --> 00:47:01,279
it might help move things a little

00:46:58,249 --> 00:47:05,690
faster I don't know but I think you're

00:47:01,279 --> 00:47:08,410
pg needs a lot of labour help to move

00:47:05,690 --> 00:47:08,410
things quicker

00:47:12,600 --> 00:47:17,830
also on that subjective there is a GP g

00:47:15,130 --> 00:47:20,260
1 and a GP g 2 and i don't actually know

00:47:17,830 --> 00:47:21,580
anything about what the difference is or

00:47:20,260 --> 00:47:24,220
which one i should use and then there's

00:47:21,580 --> 00:47:26,290
also like a GP GP and a GP g me and it

00:47:24,220 --> 00:47:28,450
something else for someone who doesn't

00:47:26,290 --> 00:47:29,670
actually care and just wants to sign

00:47:28,450 --> 00:47:31,690
things i just wants to verify things

00:47:29,670 --> 00:47:33,790
what should i be using is there a

00:47:31,690 --> 00:47:37,210
canonical just use this answer

00:47:33,790 --> 00:47:39,670
well GP g is going to be on your Debian

00:47:37,210 --> 00:47:42,220
system no matter what so you can just

00:47:39,670 --> 00:47:45,070
use that but this is the wrong talk for

00:47:42,220 --> 00:47:47,230
that this is keyring mayn't not me PG

00:47:45,070 --> 00:47:48,790
mayn't and group eg mate will actually

00:47:47,230 --> 00:47:50,830
have a talk I believe it's tomorrow and

00:47:48,790 --> 00:47:53,109
please come we'll talk about the details

00:47:50,830 --> 00:47:54,250
there hope there's been a lot of

00:47:53,109 --> 00:47:56,200
discussion about what we can do to

00:47:54,250 --> 00:47:58,900
improve that situation but that would be

00:47:56,200 --> 00:48:02,220
the place to talk about it you've

00:47:58,900 --> 00:48:02,220
already got it it's there it works

00:48:05,700 --> 00:48:21,040
any other questions yes there's a key

00:48:10,060 --> 00:48:22,210
signing event what's 3 2:30 to 3:15 and

00:48:21,040 --> 00:48:24,820
I believe it will be in this room

00:48:22,210 --> 00:48:31,180
correct yes it'll be in this room so

00:48:24,820 --> 00:48:34,260
come to that get your keys signed all

00:48:31,180 --> 00:48:34,260

YouTube URL: https://www.youtube.com/watch?v=7DkkDxnEWxM


