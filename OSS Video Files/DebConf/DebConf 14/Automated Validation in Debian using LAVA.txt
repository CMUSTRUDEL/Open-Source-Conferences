Title: Automated Validation in Debian using LAVA
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Neil Williams

At: DebConf14
https://debconf14.debconf.org/
Room: Room 328
Scheduled start: 2014-08-28 19:00:00
Captions: 
	00:00:00,060 --> 00:00:04,230
we can do for other architectures maybe

00:00:02,040 --> 00:00:05,490
other kernels don't know yet we'll have

00:00:04,230 --> 00:00:10,019
to see whether the people interested in

00:00:05,490 --> 00:00:13,219
doing that and scaling up from the bread

00:00:10,019 --> 00:00:16,130
and butter of care or testing and

00:00:13,219 --> 00:00:18,810
basically the first testing on

00:00:16,130 --> 00:00:20,250
development boards scaling up see what

00:00:18,810 --> 00:00:23,939
else we can do and what else can be done

00:00:20,250 --> 00:00:26,939
with this software so the slides are in

00:00:23,939 --> 00:00:29,490
the gate annex for Deb Kampf

00:00:26,939 --> 00:00:31,349
share the URL was on there and there's a

00:00:29,490 --> 00:00:33,809
copy document as well which contains the

00:00:31,349 --> 00:00:37,890
main text of the slides so feel free to

00:00:33,809 --> 00:00:44,690
add information and comments and topics

00:00:37,890 --> 00:00:48,390
on that as well so lava started off

00:00:44,690 --> 00:00:50,820
being deployed through us of pi PI

00:00:48,390 --> 00:00:52,920
arrangement it's recently been packaged

00:00:50,820 --> 00:00:54,989
for Debian that's been the main role

00:00:52,920 --> 00:00:56,899
have been doing for the last especially

00:00:54,989 --> 00:01:02,690
taking the year to get up and ready and

00:00:56,899 --> 00:01:05,580
it's now actually in Debian for Jessie

00:01:02,690 --> 00:01:07,500
so what is Laura she's doing is doing

00:01:05,580 --> 00:01:13,970
continuous integration testing so we

00:01:07,500 --> 00:01:16,860
have CI jobs that submit kernel builds

00:01:13,970 --> 00:01:20,250
sort of state the lonardo stable kernel

00:01:16,860 --> 00:01:24,390
Android builds then we have a number of

00:01:20,250 --> 00:01:27,960
instances the main instance has 103

00:01:24,390 --> 00:01:30,210
devices on landlord and we have a

00:01:27,960 --> 00:01:33,079
staging instance which has another 40 of

00:01:30,210 --> 00:01:36,390
and there's various developers who have

00:01:33,079 --> 00:01:43,290
their own setups to try and expand the

00:01:36,390 --> 00:01:45,659
range of the devices available it's

00:01:43,290 --> 00:01:47,280
based currently around a lot of OS

00:01:45,659 --> 00:01:50,670
deployment testing that's not just

00:01:47,280 --> 00:01:52,920
Debian based a lot of the images are

00:01:50,670 --> 00:01:56,219
still Ubuntu based we do a lot of open

00:01:52,920 --> 00:01:59,130
embedded work this recently starting

00:01:56,219 --> 00:02:02,579
gate level work from Yocto we've asked

00:01:59,130 --> 00:02:05,430
and sought involvement from people doing

00:02:02,579 --> 00:02:07,649
Fedora testing and so far we've only had

00:02:05,430 --> 00:02:09,450
a little bit of interest we're not sure

00:02:07,649 --> 00:02:12,480
what the problem is with that is maybe

00:02:09,450 --> 00:02:14,940
just the the Fedora approached

00:02:12,480 --> 00:02:17,519
are more the particular way the images

00:02:14,940 --> 00:02:19,319
get built but if it are though if

00:02:17,519 --> 00:02:21,360
there's any interest in other operating

00:02:19,319 --> 00:02:24,450
systems outside that we are more than

00:02:21,360 --> 00:02:26,430
willing to take it on and the principal

00:02:24,450 --> 00:02:29,489
thing we've been doing so far as a lot

00:02:26,430 --> 00:02:33,299
of kernel boot testing has this

00:02:29,489 --> 00:02:36,989
particular kernel build improved over

00:02:33,299 --> 00:02:38,370
the last build as you saw you start off

00:02:36,989 --> 00:02:40,470
with the same a boot test but then he

00:02:38,370 --> 00:02:42,900
started while she track performance data

00:02:40,470 --> 00:02:45,480
and you're doing LTP tests and you're

00:02:42,900 --> 00:02:48,510
tracking the riff the the failure rate

00:02:45,480 --> 00:02:52,099
across multiple tests and multiple

00:02:48,510 --> 00:02:55,709
periods of time we've recently added

00:02:52,099 --> 00:02:57,530
multiple node so multi node allows you

00:02:55,709 --> 00:03:00,930
to have a single test that runs across

00:02:57,530 --> 00:03:03,900
multiple devices those devices can then

00:03:00,930 --> 00:03:06,109
be synchronized purely over the serial

00:03:03,900 --> 00:03:08,790
connection that all these devices share

00:03:06,109 --> 00:03:10,200
they can raise the their own network

00:03:08,790 --> 00:03:12,950
they can do whatever they need to do

00:03:10,200 --> 00:03:17,970
with their own switches and their own

00:03:12,950 --> 00:03:19,859
environments and you can have multi

00:03:17,970 --> 00:03:22,109
device deployment as well so you could

00:03:19,859 --> 00:03:26,700
have an OE box talking to a debian box

00:03:22,109 --> 00:03:28,200
it's trivial the main thing that we need

00:03:26,700 --> 00:03:30,120
to talk about with lava with a lot of

00:03:28,200 --> 00:03:32,250
people in lot of conferences is the idea

00:03:30,120 --> 00:03:35,910
that we don't write the tests we don't

00:03:32,250 --> 00:03:38,340
define us or prescribe what tests you

00:03:35,910 --> 00:03:40,680
can run so people often ask well what

00:03:38,340 --> 00:03:43,709
tests and novel run and whatever you can

00:03:40,680 --> 00:03:46,590
think of the tests are written by the

00:03:43,709 --> 00:03:48,090
users who want the data and the tests

00:03:46,590 --> 00:03:49,980
are then developed and upgraded and

00:03:48,090 --> 00:03:51,090
worked on by the people who want the

00:03:49,980 --> 00:03:54,480
data artists tests

00:03:51,090 --> 00:03:57,840
we have our own tests that try and

00:03:54,480 --> 00:03:59,129
stress lava itself but those are largely

00:03:57,840 --> 00:04:01,319
irrelevant to the people who actually

00:03:59,129 --> 00:04:02,879
want the data on the on the systems

00:04:01,319 --> 00:04:05,760
because all quite often we're testing

00:04:02,879 --> 00:04:08,209
with a static kernel build and the

00:04:05,760 --> 00:04:10,739
static grid of s and they have

00:04:08,209 --> 00:04:14,069
submitting jobs that are a new build

00:04:10,739 --> 00:04:16,620
every time we do track results over a

00:04:14,069 --> 00:04:18,510
long period of time it's one of the main

00:04:16,620 --> 00:04:20,070
features is you can go back right way

00:04:18,510 --> 00:04:23,250
through the database track a particular

00:04:20,070 --> 00:04:24,710
series of builds and watch how it

00:04:23,250 --> 00:04:30,340
actually perform

00:04:24,710 --> 00:04:30,340
so if I go back here

00:04:35,370 --> 00:04:43,500
that's a simple graph for my local box

00:04:40,949 --> 00:04:45,210
doesn't go back that far in time there

00:04:43,500 --> 00:04:46,139
are other ones on the main servers to go

00:04:45,210 --> 00:04:48,270
back a lot further

00:04:46,139 --> 00:04:50,850
so you're just tracking the pass and

00:04:48,270 --> 00:04:52,979
fail our very particular series of tests

00:04:50,850 --> 00:04:55,650
you can see the various things were

00:04:52,979 --> 00:04:57,600
going on there at one point or other my

00:04:55,650 --> 00:04:59,729
own installation being a development box

00:04:57,600 --> 00:05:03,500
wasn't performed as well as it should do

00:04:59,729 --> 00:05:03,500
for productions of the results dipped

00:05:10,750 --> 00:05:18,380
those summary reports are created by

00:05:14,150 --> 00:05:20,030
users we don't we put the facility there

00:05:18,380 --> 00:05:21,320
for people to write those reports but

00:05:20,030 --> 00:05:25,820
the reports are written by the people

00:05:21,320 --> 00:05:28,190
who want the data so the data can be

00:05:25,820 --> 00:05:32,480
exported that what that main report

00:05:28,190 --> 00:05:35,090
there is basically a simple overview as

00:05:32,480 --> 00:05:36,920
on the front end to your data but you

00:05:35,090 --> 00:05:38,990
can export the data for further analysis

00:05:36,920 --> 00:05:40,190
combine them in new ways and work out

00:05:38,990 --> 00:05:43,820
what actually happens with the rest of

00:05:40,190 --> 00:05:47,420
it and the actual deployments you can do

00:05:43,820 --> 00:05:49,730
what larvae can do is it can be expanded

00:05:47,420 --> 00:05:54,710
by if you by particular hardware we've

00:05:49,730 --> 00:05:58,600
got ideas for record the MMP cylinder

00:05:54,710 --> 00:06:01,220
final testing but it allows you to put a

00:05:58,600 --> 00:06:04,250
relay between critical parts of the

00:06:01,220 --> 00:06:09,200
device and the device setup so it allows

00:06:04,250 --> 00:06:11,180
us to switch the SD card externally as

00:06:09,200 --> 00:06:13,670
controlled by the test itself so

00:06:11,180 --> 00:06:15,200
suddenly your SD card goes away you can

00:06:13,670 --> 00:06:16,940
switch away the network you can switch

00:06:15,200 --> 00:06:20,330
off the SATA you can switch the starter

00:06:16,940 --> 00:06:22,520
to a different connection with that's

00:06:20,330 --> 00:06:24,200
not just useful in terms of being

00:06:22,520 --> 00:06:25,460
aggressive with the test and you know

00:06:24,200 --> 00:06:28,070
how the kernel behaves but it's also

00:06:25,460 --> 00:06:30,590
useful to allow us to test boot loaders

00:06:28,070 --> 00:06:33,650
because you can put a bootloader on one

00:06:30,590 --> 00:06:35,660
SD card switch it over to the device can

00:06:33,650 --> 00:06:38,420
see it boot the device from that SD card

00:06:35,660 --> 00:06:41,750
oh it's bricked switch the SD card back

00:06:38,420 --> 00:06:42,290
to the previous image I put it again and

00:06:41,750 --> 00:06:45,190
it's fine

00:06:42,290 --> 00:06:47,600
so a lot of the automation comes down to

00:06:45,190 --> 00:06:50,570
being able to automatically recover

00:06:47,600 --> 00:06:52,460
boards there will be situations these

00:06:50,570 --> 00:06:55,250
are dev boards there will be situations

00:06:52,460 --> 00:06:57,080
where it's managed to fry one the

00:06:55,250 --> 00:06:59,720
controllers and on the board there'll be

00:06:57,080 --> 00:07:02,570
various issues like we got one

00:06:59,720 --> 00:07:04,310
particular board can lock the SD

00:07:02,570 --> 00:07:06,509
controller they're completely invisible

00:07:04,310 --> 00:07:10,900
and transpire and

00:07:06,509 --> 00:07:13,750
undetectable way we can try and work out

00:07:10,900 --> 00:07:15,639
in advance okay there are things you can

00:07:13,750 --> 00:07:17,590
possibly do to indicate that this

00:07:15,639 --> 00:07:19,690
particular board of that type is

00:07:17,590 --> 00:07:21,520
suffering this kind of problem you try

00:07:19,690 --> 00:07:23,590
and put some Diagnostics into the test

00:07:21,520 --> 00:07:25,919
in advance to see whether you're

00:07:23,590 --> 00:07:29,199
actually good likely to hit that problem

00:07:25,919 --> 00:07:32,889
and compensate and work around the

00:07:29,199 --> 00:07:36,100
problems with particular laws so what

00:07:32,889 --> 00:07:39,250
does lava currently support there is the

00:07:36,100 --> 00:07:40,630
armed bias not surprising for instance

00:07:39,250 --> 00:07:44,590
through where we actually started from

00:07:40,630 --> 00:07:49,449
and Leonardo is concentrating on v7 so

00:07:44,590 --> 00:07:53,740
we don't look at on the five army six

00:07:49,449 --> 00:07:56,530
old rb7 of the main pieces hardware that

00:07:53,740 --> 00:07:58,419
that's the majority of the lab arm d8 is

00:07:56,530 --> 00:08:01,690
then coming in with new hardware and

00:07:58,419 --> 00:08:03,699
emulations and models but the majority

00:08:01,690 --> 00:08:07,240
of the boards are available for testing

00:08:03,699 --> 00:08:10,780
currently around b7 we've got support

00:08:07,240 --> 00:08:13,389
for where the balls themselves aborted

00:08:10,780 --> 00:08:16,510
running a virtual arm system omneya

00:08:13,389 --> 00:08:19,240
physical arm hardware and that allows

00:08:16,510 --> 00:08:22,360
you to actually test both sides you can

00:08:19,240 --> 00:08:24,970
run tests on the physical Hardware while

00:08:22,360 --> 00:08:27,370
swelling a VM you can run tests inside

00:08:24,970 --> 00:08:31,180
the VM and if you've got the right hooks

00:08:27,370 --> 00:08:33,339
you can actually then communicate across

00:08:31,180 --> 00:08:36,370
them through the VM or you can actually

00:08:33,339 --> 00:08:37,900
communicate with another node the set up

00:08:36,370 --> 00:08:41,050
to interrogate it another way

00:08:37,900 --> 00:08:44,020
there are x86 systems in the lab at the

00:08:41,050 --> 00:08:45,760
same time not just for actual lava

00:08:44,020 --> 00:08:47,800
deployment but actually as test devices

00:08:45,760 --> 00:08:51,459
other situations where people need that

00:08:47,800 --> 00:08:54,000
so those devices can be available via

00:08:51,459 --> 00:08:58,209
emulation we can do any of the other

00:08:54,000 --> 00:09:01,660
architectures that Kimia supports we

00:08:58,209 --> 00:09:05,680
haven't got a lot of any physical

00:09:01,660 --> 00:09:07,209
hardware in the Cambridge lab but with

00:09:05,680 --> 00:09:09,310
lava and Debian you can easily install

00:09:07,209 --> 00:09:12,940
that and set it up with your own

00:09:09,310 --> 00:09:17,310
architectures very useful feature is the

00:09:12,940 --> 00:09:20,490
idea of dummy devices and these can be

00:09:17,310 --> 00:09:23,520
simple s Trude so an isolated root

00:09:20,490 --> 00:09:27,120
environment or SSH and that allows you

00:09:23,520 --> 00:09:28,260
to connect to a device that is the

00:09:27,120 --> 00:09:30,560
husband actually had to have a

00:09:28,260 --> 00:09:33,060
deployment it's it's sitting there

00:09:30,560 --> 00:09:34,590
pre-configured and it may be serving a

00:09:33,060 --> 00:09:36,630
lot of different jobs and you actually

00:09:34,590 --> 00:09:38,360
have jobs that connect into it and do

00:09:36,630 --> 00:09:41,130
certain things with it

00:09:38,360 --> 00:09:44,190
contention on that box is your problem

00:09:41,130 --> 00:09:46,260
as the test rider that's not up to larva

00:09:44,190 --> 00:09:48,000
to swine sort out if you've got two jobs

00:09:46,260 --> 00:09:50,370
going in on ssh and both of them try to

00:09:48,000 --> 00:09:56,730
run d package and sorry you have to sort

00:09:50,370 --> 00:10:00,030
that out yourself so a lot of the bills

00:09:56,730 --> 00:10:01,740
coming through our CI bills for the

00:10:00,030 --> 00:10:05,400
colonel bills we still do a lot of

00:10:01,740 --> 00:10:07,170
Android testing and then we are working

00:10:05,400 --> 00:10:10,370
towards increase in support for testing

00:10:07,170 --> 00:10:13,860
boot loaders obviously you boot was one

00:10:10,370 --> 00:10:18,180
that we started with in inevitably with

00:10:13,860 --> 00:10:20,430
obvious seven dev boards UEFI is the

00:10:18,180 --> 00:10:23,850
next big change and the next big boot

00:10:20,430 --> 00:10:25,770
loaded we need to test and then grub is

00:10:23,850 --> 00:10:27,810
something else that we are looking to

00:10:25,770 --> 00:10:30,180
support we thought they have explicit

00:10:27,810 --> 00:10:33,450
support for grub in lava at the moment

00:10:30,180 --> 00:10:35,970
but it's on the development line said

00:10:33,450 --> 00:10:39,420
we're currently only actually testing

00:10:35,970 --> 00:10:42,089
Linux kernels there may well be hidden

00:10:39,420 --> 00:10:45,360
assumptions in how the the structure

00:10:42,089 --> 00:10:46,860
works for other kernels we don't know

00:10:45,360 --> 00:10:51,660
yet we have to find out when the

00:10:46,860 --> 00:10:54,630
community tells us so the test jobs I've

00:10:51,660 --> 00:10:57,750
written basically using shell and markup

00:10:54,630 --> 00:11:00,089
yeah more you can address and execute

00:10:57,750 --> 00:11:02,280
any utility binary anything you can

00:11:00,089 --> 00:11:05,820
actually build or download or put onto

00:11:02,280 --> 00:11:07,980
that system most of them if you define

00:11:05,820 --> 00:11:10,620
the right Flandres for the kernel you

00:11:07,980 --> 00:11:12,180
can have a nice networking interface NIC

00:11:10,620 --> 00:11:15,740
and pull down whatever you need it's up

00:11:12,180 --> 00:11:15,740
to you it set it up in the in the test

00:11:16,160 --> 00:11:22,230
so you we get results based on whether

00:11:19,440 --> 00:11:25,560
the deployment itself worked then the

00:11:22,230 --> 00:11:27,089
test that you wrote and then there's

00:11:25,560 --> 00:11:28,890
parsers to work out whether there's

00:11:27,089 --> 00:11:30,110
parcel fails and you can do measurements

00:11:28,890 --> 00:11:32,680
and you can do

00:11:30,110 --> 00:11:36,140
the units of those measurements as well

00:11:32,680 --> 00:11:39,080
now a lot of the time you're running

00:11:36,140 --> 00:11:41,690
someone else's test feed LTP or some

00:11:39,080 --> 00:11:43,580
kind of Python unit test type thing you

00:11:41,690 --> 00:11:46,010
often have to write it on pauses

00:11:43,580 --> 00:11:47,780
sometimes you can do that in the animal

00:11:46,010 --> 00:11:50,690
with a bit of Python regex code

00:11:47,780 --> 00:11:52,970
sometimes it's actually a lot easier to

00:11:50,690 --> 00:11:54,470
write a custom script in whatever

00:11:52,970 --> 00:11:57,710
language you prefer whatever language

00:11:54,470 --> 00:12:01,940
you can actually ensure is executable on

00:11:57,710 --> 00:12:04,640
that platform and run the test inside

00:12:01,940 --> 00:12:06,470
that custom script and the custom script

00:12:04,640 --> 00:12:11,240
just outputs the test results in the

00:12:06,470 --> 00:12:14,450
format that is easier to understand what

00:12:11,240 --> 00:12:15,890
lava does is it gets hold of whatever

00:12:14,450 --> 00:12:18,320
the deployments going to be you this

00:12:15,890 --> 00:12:23,600
images here the tar balls or you overlay

00:12:18,320 --> 00:12:25,130
a basic set of data and shell scripts is

00:12:23,600 --> 00:12:26,600
a bit more data and shell scripts with

00:12:25,130 --> 00:12:29,330
you're actually tuning it with multiple

00:12:26,600 --> 00:12:33,470
nodes but generally you've got a common

00:12:29,330 --> 00:12:35,990
interface there it was based on on POSIX

00:12:33,470 --> 00:12:40,460
shell compatibility but we don't define

00:12:35,990 --> 00:12:42,140
whether you can run and we like to think

00:12:40,460 --> 00:12:45,860
too we are making no assumptions of what

00:12:42,140 --> 00:12:48,920
the device is capable of sometimes that

00:12:45,860 --> 00:12:51,890
lets us down because there are ways

00:12:48,920 --> 00:12:53,360
where you sometimes have to make some

00:12:51,890 --> 00:12:56,510
kind of assumption of what the device is

00:12:53,360 --> 00:12:59,150
able to do and sometimes we do push back

00:12:56,510 --> 00:13:01,490
at the device manufacturers and say no

00:12:59,150 --> 00:13:02,870
look the way that you've actually asked

00:13:01,490 --> 00:13:06,140
us to test this board in the way it

00:13:02,870 --> 00:13:07,640
actually boots is not going to work we

00:13:06,140 --> 00:13:10,010
need to have something that's a bit more

00:13:07,640 --> 00:13:13,270
sane and a bit more reliable because we

00:13:10,010 --> 00:13:15,800
are automated after all you can't have a

00:13:13,270 --> 00:13:17,330
board that needs a lot of manual

00:13:15,800 --> 00:13:19,850
intervention to get the thing to boot in

00:13:17,330 --> 00:13:21,110
the first place we're booting it three

00:13:19,850 --> 00:13:23,210
or four times per test a lot of the

00:13:21,110 --> 00:13:25,340
times or even more so though it

00:13:23,210 --> 00:13:27,590
sometimes have to push back at the

00:13:25,340 --> 00:13:30,530
manufacturers and say look give us a

00:13:27,590 --> 00:13:35,750
board that we can can reasonably

00:13:30,530 --> 00:13:37,730
automate but other than that and as I

00:13:35,750 --> 00:13:40,460
said we work hard to make sure that

00:13:37,730 --> 00:13:41,210
there's an automated way of recovering

00:13:40,460 --> 00:13:42,920
from

00:13:41,210 --> 00:13:46,040
a bricked device well what the other

00:13:42,920 --> 00:13:47,570
Puerto why's be a brick device without

00:13:46,040 --> 00:13:51,190
any kind of intervention from the lab

00:13:47,570 --> 00:13:51,190
admins they're busy enough as it is so

00:13:52,570 --> 00:13:59,450
now we're reaching out to Debian we've

00:13:57,020 --> 00:14:02,180
been using Ubuntu to actually run the

00:13:59,450 --> 00:14:04,460
infrastructure for a while we've now got

00:14:02,180 --> 00:14:06,500
it all migrated over to Debian all the

00:14:04,460 --> 00:14:11,300
packages are in Debian we're running the

00:14:06,500 --> 00:14:13,370
packages as they are in Debian we are

00:14:11,300 --> 00:14:15,770
looking to test that at the test the RMP

00:14:13,370 --> 00:14:17,900
colonel I've been working with number of

00:14:15,770 --> 00:14:21,410
people in Debian already on exactly how

00:14:17,900 --> 00:14:24,980
to do that so we're looking at where's

00:14:21,410 --> 00:14:26,930
the overlap between the boot reports so

00:14:24,980 --> 00:14:29,060
we can access elsewhere the available

00:14:26,930 --> 00:14:32,570
boards in lava and the DDPs that are

00:14:29,060 --> 00:14:35,090
defined in the RMP colonel i've got some

00:14:32,570 --> 00:14:37,670
links there for the the bearers various

00:14:35,090 --> 00:14:39,260
information that's the summary of the

00:14:37,670 --> 00:14:44,840
Bors we've found so far that can easily

00:14:39,260 --> 00:14:47,960
be tested for the RMP colonel I've have

00:14:44,840 --> 00:14:49,910
put it in a request for extended support

00:14:47,960 --> 00:14:53,950
for the arm Dale because that should add

00:14:49,910 --> 00:14:53,950
another couple of devices to that list

00:14:54,430 --> 00:15:00,950
are we trying to achieve or the arm MP

00:14:58,220 --> 00:15:04,220
is make sure that not only does the MP

00:15:00,950 --> 00:15:06,680
cone or boot but the hardware that is

00:15:04,220 --> 00:15:09,020
available on the board is actually

00:15:06,680 --> 00:15:10,820
operational under the arm MP colonel we

00:15:09,020 --> 00:15:14,030
know that for some of those boards on

00:15:10,820 --> 00:15:14,900
that list various components various

00:15:14,030 --> 00:15:18,410
pieces of hardware

00:15:14,900 --> 00:15:21,380
I'm not operational after you booted the

00:15:18,410 --> 00:15:26,960
RMP colonel so this gives us a way of

00:15:21,380 --> 00:15:28,550
producing repeated tests over a long

00:15:26,960 --> 00:15:29,930
period of time to try and track this and

00:15:28,550 --> 00:15:35,390
see whether we can improve it without

00:15:29,930 --> 00:15:39,350
causing regressions elsewhere those are

00:15:35,390 --> 00:15:40,580
just the main devices that we've got at

00:15:39,350 --> 00:15:42,500
the moment we're obviously open to

00:15:40,580 --> 00:15:44,480
having more devices added to the lab or

00:15:42,500 --> 00:15:46,700
to a different lab and have an access

00:15:44,480 --> 00:15:48,560
some of those devices on there are not

00:15:46,700 --> 00:15:50,780
physically located in Cambridge but we

00:15:48,560 --> 00:15:53,230
would still be able to use those within

00:15:50,780 --> 00:15:53,230
Debian

00:15:53,310 --> 00:16:01,150
so the particular challenges with RMP we

00:15:58,030 --> 00:16:04,240
need to be able to put the modules into

00:16:01,150 --> 00:16:08,800
the in a drama fest we can test with the

00:16:04,240 --> 00:16:10,900
init Rd that the unit ramp has tools

00:16:08,800 --> 00:16:15,480
actually make but that is then using

00:16:10,900 --> 00:16:19,720
Caleb C so we'd like to be able to use

00:16:15,480 --> 00:16:21,220
other interfaces with the RMP modules

00:16:19,720 --> 00:16:23,590
put in and then you've got a G Lipsy

00:16:21,220 --> 00:16:27,280
environment and you can do more more

00:16:23,590 --> 00:16:30,880
testing we need to decide on which TTP's

00:16:27,280 --> 00:16:36,640
we can actually support in the RMP

00:16:30,880 --> 00:16:39,580
kernel and put the data out there and

00:16:36,640 --> 00:16:41,980
let people work out what boards they can

00:16:39,580 --> 00:16:44,080
reliably use at the moment is it bit hit

00:16:41,980 --> 00:16:45,580
or miss as to whether the RMP kernel

00:16:44,080 --> 00:16:47,620
supports your board let's get the data

00:16:45,580 --> 00:16:50,980
let's get the test results and find out

00:16:47,620 --> 00:16:54,460
what's going on we can submit these jobs

00:16:50,980 --> 00:16:57,910
over xml-rpc to a variety of existing

00:16:54,460 --> 00:17:02,050
instances and a variety of other tests

00:16:57,910 --> 00:17:04,360
on each one including testing the Debian

00:17:02,050 --> 00:17:06,760
installer on arm

00:17:04,360 --> 00:17:12,189
there are ways of proceeding that making

00:17:06,760 --> 00:17:14,439
it work without interaction so we can

00:17:12,189 --> 00:17:18,250
test that through that will generally

00:17:14,439 --> 00:17:20,670
mean that we need to start testing with

00:17:18,250 --> 00:17:23,110
dual media so we can actually have a

00:17:20,670 --> 00:17:25,720
booted media and their deployment media

00:17:23,110 --> 00:17:29,680
so we're looking at some of the boards

00:17:25,720 --> 00:17:31,300
of the supports order for that and this

00:17:29,680 --> 00:17:33,400
comes back to what we were talking about

00:17:31,300 --> 00:17:35,620
in the first talk about what lava can do

00:17:33,400 --> 00:17:38,260
in Debian in in conjunction with piyo

00:17:35,620 --> 00:17:43,090
parts and CI Deb Internet and their

00:17:38,260 --> 00:17:45,010
archive rebuilds so it lava is an

00:17:43,090 --> 00:17:47,650
opportunity for Debian to start testing

00:17:45,010 --> 00:17:49,630
outside the idea of just the one package

00:17:47,650 --> 00:17:51,700
it allows you to start testing

00:17:49,630 --> 00:17:54,580
combinations of packages it allows you

00:17:51,700 --> 00:17:56,290
to start testing a distribution against

00:17:54,580 --> 00:17:57,340
a different distribution well that's a

00:17:56,290 --> 00:17:59,260
different suite or a completely

00:17:57,340 --> 00:18:02,260
different distribution we can test their

00:17:59,260 --> 00:18:03,910
being again so openembedded we can do a

00:18:02,260 --> 00:18:05,680
whole range of

00:18:03,910 --> 00:18:08,680
of upgrade tests we can actually work

00:18:05,680 --> 00:18:10,420
out whether this actually works in a

00:18:08,680 --> 00:18:11,830
multiple node environment you have a

00:18:10,420 --> 00:18:14,260
client and the server physically

00:18:11,830 --> 00:18:17,110
separate devices upgrade one does the

00:18:14,260 --> 00:18:18,700
does the client still work okay we

00:18:17,110 --> 00:18:22,720
didn't expect that necessarily work

00:18:18,700 --> 00:18:24,430
upgrade the client does it recover you

00:18:22,720 --> 00:18:27,130
can do testing across multiple

00:18:24,430 --> 00:18:29,680
architectures and as I said earlier but

00:18:27,130 --> 00:18:32,550
across or through the virtualization

00:18:29,680 --> 00:18:36,720
barriers depending on what kind of

00:18:32,550 --> 00:18:36,720
support you're compiling into the test

00:18:39,030 --> 00:18:44,500
the images themselves or the deployments

00:18:42,430 --> 00:18:46,780
that we support we can always make

00:18:44,500 --> 00:18:48,580
better tools for those we can make use

00:18:46,780 --> 00:18:50,920
of existing tools we can patch them in

00:18:48,580 --> 00:18:55,500
increase now that they're at their

00:18:50,920 --> 00:18:58,510
availability and then these the upgrades

00:18:55,500 --> 00:19:03,280
so that we can - you work out can you go

00:18:58,510 --> 00:19:05,650
from squeeze all the way up to said with

00:19:03,280 --> 00:19:07,450
this particular set of packages can you

00:19:05,650 --> 00:19:09,640
throw some dirty data into that can be

00:19:07,450 --> 00:19:12,610
through can you throw some dirty images

00:19:09,640 --> 00:19:15,130
with with random configuration changes

00:19:12,610 --> 00:19:17,530
and does it still work because you can

00:19:15,130 --> 00:19:19,900
define all that you haven't got to just

00:19:17,530 --> 00:19:22,810
say oh I just want a basic to boost up

00:19:19,900 --> 00:19:24,730
on it in each case you can build the

00:19:22,810 --> 00:19:26,950
image you want it put in whatever dirt

00:19:24,730 --> 00:19:29,290
dirty contamination or configuration

00:19:26,950 --> 00:19:32,580
changes you want and through the images

00:19:29,290 --> 00:19:32,580
into larvae and see what you get

00:19:34,320 --> 00:19:41,890
very useful tip when you're actually

00:19:38,650 --> 00:19:44,880
developing tests is hacking sessions

00:19:41,890 --> 00:19:48,610
basically you install OpenSSH server

00:19:44,880 --> 00:19:52,240
larvae has support for accepting your

00:19:48,610 --> 00:19:55,030
public key as a parameter and your IRC

00:19:52,240 --> 00:19:57,610
nickname it'll boot the device you've

00:19:55,030 --> 00:20:00,790
chosen with the image you've specified

00:19:57,610 --> 00:20:04,300
started OpenSSH and then notify you and

00:20:00,790 --> 00:20:07,990
on IRC sin that the session is available

00:20:04,300 --> 00:20:09,670
at this URL within a private message I

00:20:07,990 --> 00:20:14,660
need just put that into a terminal

00:20:09,670 --> 00:20:17,420
connect an earring so you're then in um

00:20:14,660 --> 00:20:19,700
the test image you've chosen on a device

00:20:17,420 --> 00:20:22,370
that you've selected of a particular

00:20:19,700 --> 00:20:25,190
type and you're in a full lava session

00:20:22,370 --> 00:20:27,500
you've got all of the lava helpers and

00:20:25,190 --> 00:20:30,680
scripts and overlays there in front of

00:20:27,500 --> 00:20:36,530
you in the in your path and you can see

00:20:30,680 --> 00:20:38,840
what's going on but that's only what

00:20:36,530 --> 00:20:41,060
we've thought up that's what we thought

00:20:38,840 --> 00:20:45,650
of within the lava team is what we can

00:20:41,060 --> 00:20:47,570
offer debian via lava structures so it's

00:20:45,650 --> 00:20:49,940
a question of coming back to us when

00:20:47,570 --> 00:20:51,950
you've played it with lava and see what

00:20:49,940 --> 00:20:54,050
you can do install it one new one of

00:20:51,950 --> 00:20:57,140
your own boxes see what it can do see

00:20:54,050 --> 00:21:02,950
what it can connect up and come back to

00:20:57,140 --> 00:21:07,030
us with what LC can actually do now

00:21:02,950 --> 00:21:10,760
after we have done the work on the

00:21:07,030 --> 00:21:12,950
packages and Tony will know all about

00:21:10,760 --> 00:21:15,680
this because we've we've done all the

00:21:12,950 --> 00:21:19,120
planning for the refactoring so this is

00:21:15,680 --> 00:21:22,970
intended to make it much much easier to

00:21:19,120 --> 00:21:26,180
extend and develop inside lava so if you

00:21:22,970 --> 00:21:28,400
you look at that right lava doesn't

00:21:26,180 --> 00:21:30,260
support this kind of device how can I

00:21:28,400 --> 00:21:33,590
get it to support this this particular

00:21:30,260 --> 00:21:35,150
mode this particular feature we're not

00:21:33,590 --> 00:21:36,380
gonna make it a lot easier in the code

00:21:35,150 --> 00:21:38,690
base to I should work your way through

00:21:36,380 --> 00:21:41,330
that because lava has developed up

00:21:38,690 --> 00:21:42,470
organically and now the refactoring is

00:21:41,330 --> 00:21:44,510
urgent

00:21:42,470 --> 00:21:47,210
so we're looking at modular components

00:21:44,510 --> 00:21:50,050
much more identifiable sections of where

00:21:47,210 --> 00:21:54,410
things go making sure that actions are

00:21:50,050 --> 00:21:56,570
important and diagnostics making it much

00:21:54,410 --> 00:22:00,230
clearer that much more obvious and much

00:21:56,570 --> 00:22:03,260
more common that when lava spots an

00:22:00,230 --> 00:22:05,330
error not only is lava able to say yes

00:22:03,260 --> 00:22:07,910
that was sorry that was the lava error

00:22:05,330 --> 00:22:10,100
file iboga we'll work on it

00:22:07,910 --> 00:22:12,290
that was an infrastructure error because

00:22:10,100 --> 00:22:15,410
a network switches probably failed or

00:22:12,290 --> 00:22:18,560
something or someone switched it off all

00:22:15,410 --> 00:22:20,900
that was a job error you've made a typo

00:22:18,560 --> 00:22:23,840
in one of the scripts or it was

00:22:20,900 --> 00:22:25,550
absolutely genuine lis a test failure so

00:22:23,840 --> 00:22:27,850
working through those kinds of

00:22:25,550 --> 00:22:32,020
situations and then when we've got

00:22:27,850 --> 00:22:34,720
lava errors or device errors something

00:22:32,020 --> 00:22:36,520
gone unexpectedly wrong but what can we

00:22:34,720 --> 00:22:37,990
do whilst we've still got the connection

00:22:36,520 --> 00:22:41,050
to the device in that particular mode

00:22:37,990 --> 00:22:43,420
can we actually get just in reports of

00:22:41,050 --> 00:22:45,160
data get into the logs get it into the

00:22:43,420 --> 00:22:47,770
actual test results and say well there's

00:22:45,160 --> 00:22:51,190
it there's what we would try to work out

00:22:47,770 --> 00:22:53,530
if he even if it's just what I ifconfig

00:22:51,190 --> 00:22:57,970
saying what's route that I am saying

00:22:53,530 --> 00:22:59,680
what's a map saying just get the data

00:22:57,970 --> 00:23:02,080
out there so the people have a chance of

00:22:59,680 --> 00:23:08,440
working out what the state was at the

00:23:02,080 --> 00:23:10,600
time we don't do enough for that yet the

00:23:08,440 --> 00:23:12,760
the refactoring will also consider

00:23:10,600 --> 00:23:16,240
allowing needs to simulate the job in

00:23:12,760 --> 00:23:19,180
advance so you'll be able to run through

00:23:16,240 --> 00:23:20,890
your test definition and see all of the

00:23:19,180 --> 00:23:23,230
actions all of the parameters or the

00:23:20,890 --> 00:23:24,850
actions than the commands of nothing

00:23:23,230 --> 00:23:28,740
would actually do on the actual device

00:23:24,850 --> 00:23:28,740
you can follow it through step by step

00:23:28,770 --> 00:23:36,070
then we get more of the data coming back

00:23:31,870 --> 00:23:38,850
at the moment we have the logs and then

00:23:36,070 --> 00:23:41,470
we have the result set the result bundle

00:23:38,850 --> 00:23:43,180
we don't actually have enough data

00:23:41,470 --> 00:23:45,880
coming back into the results that's what

00:23:43,180 --> 00:23:49,510
we're going to fix with that and

00:23:45,880 --> 00:23:51,670
allowing people to override the one of

00:23:49,510 --> 00:23:53,830
the common problems is that as lava

00:23:51,670 --> 00:23:57,190
developed there were a lot of devices

00:23:53,830 --> 00:23:59,080
that had quite slow reactions to some of

00:23:57,190 --> 00:24:00,670
the operations so some of the timeouts

00:23:59,080 --> 00:24:05,260
got longer and longer and longer and

00:24:00,670 --> 00:24:07,180
longer some of the some of the snowballs

00:24:05,260 --> 00:24:08,620
and the VP Express's they took such a

00:24:07,180 --> 00:24:10,870
long time to get through holders for

00:24:08,620 --> 00:24:13,330
firmware all the different stages in

00:24:10,870 --> 00:24:16,870
boot that they that's not the timeout

00:24:13,330 --> 00:24:19,780
for a failed boot got long too long and

00:24:16,870 --> 00:24:22,480
it became a default rather than actually

00:24:19,780 --> 00:24:23,680
being customized to particular boards so

00:24:22,480 --> 00:24:26,410
we're going to fix that and make sure

00:24:23,680 --> 00:24:28,450
that for devices now that boot much more

00:24:26,410 --> 00:24:30,100
quickly if it fails to blue you're not

00:24:28,450 --> 00:24:31,720
sitting there five minutes after it's

00:24:30,100 --> 00:24:34,090
failed to boot to get the message for

00:24:31,720 --> 00:24:36,780
love of the timer and think actually

00:24:34,090 --> 00:24:36,780
that didn't do

00:24:38,710 --> 00:24:46,100
right sit at the back there quietly

00:24:42,410 --> 00:24:49,820
working on the video is Andy who's

00:24:46,100 --> 00:24:53,840
working on the idea of putting lava into

00:24:49,820 --> 00:24:56,090
hardware so open the hardware design

00:24:53,840 --> 00:24:58,280
will be based on Debian Jesse and the

00:24:56,090 --> 00:25:01,700
idea with this is to allow you to have

00:24:58,280 --> 00:25:06,320
lava in your bag at a demo at a

00:25:01,700 --> 00:25:11,360
conference already set up support up to

00:25:06,320 --> 00:25:14,060
six devices or one little box single 5 5

00:25:11,360 --> 00:25:16,040
volt input and you'll be able to just

00:25:14,060 --> 00:25:16,910
connect up the devices you have a PD you

00:25:16,040 --> 00:25:21,290
inside the box

00:25:16,910 --> 00:25:22,640
there'll be controllable remotely you

00:25:21,290 --> 00:25:24,620
have a network switch inside the box

00:25:22,640 --> 00:25:27,680
you'll have serial connections and the

00:25:24,620 --> 00:25:30,790
serial server again remotely accessible

00:25:27,680 --> 00:25:34,340
remote control and you can turn the

00:25:30,790 --> 00:25:37,340
serial off completely during a hard

00:25:34,340 --> 00:25:41,570
reset there are devices there was one

00:25:37,340 --> 00:25:43,700
there that qb2 earlier where there's a

00:25:41,570 --> 00:25:46,640
design flaw in the hardware and if you

00:25:43,700 --> 00:25:49,670
leave the serial connected when the

00:25:46,640 --> 00:25:52,340
device is hard we said it locks the

00:25:49,670 --> 00:25:55,460
bootloader in a bad state and he can't

00:25:52,340 --> 00:25:57,800
actually get back into the test image so

00:25:55,460 --> 00:25:59,570
that was one of the boards that led us

00:25:57,800 --> 00:26:02,900
to this situation I think we have to

00:25:59,570 --> 00:26:05,270
actually have an easier way of getting

00:26:02,900 --> 00:26:08,030
our developers set up with a lab on the

00:26:05,270 --> 00:26:09,490
desk and then working through and thing

00:26:08,030 --> 00:26:13,130
actually does can be really useful for

00:26:09,490 --> 00:26:16,960
conferences and every developer working

00:26:13,130 --> 00:26:16,960
on lava or just wanted the test stuff

00:26:18,539 --> 00:26:24,659
you can actually put these up as a as a

00:26:21,419 --> 00:26:26,879
full rack as a full lab or you can have

00:26:24,659 --> 00:26:29,309
them as a delicate unit with a little

00:26:26,879 --> 00:26:33,799
board inside nice little starter drive

00:26:29,309 --> 00:26:33,799
and you've got a whole lab in one unit

00:26:34,879 --> 00:26:51,749
now just show you come back over here so

00:26:48,599 --> 00:26:57,629
currently this is what lava she looks

00:26:51,749 --> 00:27:05,759
like so you can see it's using a local

00:26:57,629 --> 00:27:09,589
file this test took Ashley took about 47

00:27:05,759 --> 00:27:12,419
seconds so these are the local image

00:27:09,589 --> 00:27:14,629
that was built with BMD bootstrap which

00:27:12,419 --> 00:27:17,129
is a nice little tool that laws

00:27:14,629 --> 00:27:20,699
originally brought in which Antonio and

00:27:17,129 --> 00:27:22,589
I have improved after that you get a

00:27:20,699 --> 00:27:24,149
nice texture to make sure that what

00:27:22,589 --> 00:27:28,649
we've downloaded is what do you think

00:27:24,149 --> 00:27:30,899
we've downloaded there's the overlay we

00:27:28,649 --> 00:27:34,079
come through and they what past that do

00:27:30,899 --> 00:27:37,889
the overlay pass it down to Queenie in

00:27:34,079 --> 00:27:43,289
this case because this is a KVM test no

00:27:37,889 --> 00:27:47,009
boot output or output all tracked

00:27:43,289 --> 00:27:49,229
there's your network address and network

00:27:47,009 --> 00:27:52,169
information these are Carroll boot time

00:27:49,229 --> 00:27:54,719
five seconds that's automatically

00:27:52,169 --> 00:27:57,599
tracked and that that stuff like that

00:27:54,719 --> 00:28:00,749
will be tracked across the board you can

00:27:57,599 --> 00:28:06,569
see here lava KVM l1 so that's where the

00:28:00,749 --> 00:28:08,699
overlay stuff actually lives nice little

00:28:06,569 --> 00:28:10,499
check to make sure that there's actually

00:28:08,699 --> 00:28:14,940
some of available space inside the KVM

00:28:10,499 --> 00:28:20,339
before we start doing stuff then the

00:28:14,940 --> 00:28:23,449
test running doing stuff like what dump

00:28:20,339 --> 00:28:26,440
the eyes configuring the output that it

00:28:23,449 --> 00:28:34,210
passed

00:28:26,440 --> 00:28:36,429
then gets routing information to attest

00:28:34,210 --> 00:28:41,649
ping actually the actual Ethernet is

00:28:36,429 --> 00:28:48,309
sane and working see if you can install

00:28:41,649 --> 00:28:50,919
the package by a pastor they can down to

00:28:48,309 --> 00:28:53,289
the end and you've got a result bundle

00:28:50,919 --> 00:28:55,750
the result bundle is just a way of

00:28:53,289 --> 00:28:57,460
collecting all the different results you

00:28:55,750 --> 00:28:59,710
get from the larva tests and your own

00:28:57,460 --> 00:29:02,590
tests so you can see the lava test

00:28:59,710 --> 00:29:06,039
results we deployed we've our tests show

00:29:02,590 --> 00:29:08,649
we got those results on three the drop

00:29:06,039 --> 00:29:12,549
came back is complete and then the user

00:29:08,649 --> 00:29:13,779
tests we work out something like that so

00:29:12,549 --> 00:29:16,960
the ping tests actually failed in that

00:29:13,779 --> 00:29:22,870
point that's mainly because my laptop is

00:29:16,960 --> 00:29:27,730
not bridged because just because so when

00:29:22,870 --> 00:29:31,090
the KVM came up it didn't have a you

00:29:27,730 --> 00:29:33,279
came over her behind a nutted address so

00:29:31,090 --> 00:29:38,529
this is on staging which is our test

00:29:33,279 --> 00:29:46,480
instance a lot more devices a lot more

00:29:38,529 --> 00:29:50,820
jobs running so if you don't get well

00:29:46,480 --> 00:29:53,950
just looking through that are there any

00:29:50,820 --> 00:29:56,590
there's just to one of these foundation

00:29:53,950 --> 00:29:58,980
models let's see what that looks like on

00:29:56,590 --> 00:29:58,980
it go through

00:30:01,850 --> 00:30:06,160
so again we work up through we

00:30:07,480 --> 00:30:14,480
foundation model you're poor you burn

00:30:09,950 --> 00:30:17,750
off the screen isn't it it's modeling

00:30:14,480 --> 00:30:22,040
now v8 writing sayings not actually an

00:30:17,750 --> 00:30:25,460
emulation is it it's in bottles the

00:30:22,040 --> 00:30:31,270
bottles the entire CPU this one is

00:30:25,460 --> 00:30:31,270
running on x86 and modeling and obviate

00:30:31,870 --> 00:30:45,440
right right yeah so you get various

00:30:42,460 --> 00:30:48,110
operations then when you're expecting

00:30:45,440 --> 00:30:49,730
various facilities to work at this spec

00:30:48,110 --> 00:30:52,490
next we are hardware and they're not

00:30:49,730 --> 00:30:53,840
there so you can record that and you can

00:30:52,490 --> 00:30:58,490
work on what's going on now we're back

00:30:53,840 --> 00:31:01,630
into a normal test so the point of

00:30:58,490 --> 00:31:05,350
showing that is that despite the

00:31:01,630 --> 00:31:08,870
disparity in the actual hardware there

00:31:05,350 --> 00:31:12,020
you get a very common very similar

00:31:08,870 --> 00:31:19,790
interface if you go back to a real piece

00:31:12,020 --> 00:31:24,830
of hardware let's go for a panda that's

00:31:19,790 --> 00:31:27,590
what the math of the submission actually

00:31:24,830 --> 00:31:31,190
looks like we're currently using JSON we

00:31:27,590 --> 00:31:32,690
are looking at using Yammer for future

00:31:31,190 --> 00:31:34,880
deployments once the refactoring is in

00:31:32,690 --> 00:31:37,280
place but you can see there that's where

00:31:34,880 --> 00:31:41,320
the image is obtained from you can see

00:31:37,280 --> 00:31:43,970
where parameters are inserted into the

00:31:41,320 --> 00:31:47,260
the animal file that is actually in the

00:31:43,970 --> 00:31:50,090
test definition in the repository and

00:31:47,260 --> 00:31:52,070
there's where you submit results and

00:31:50,090 --> 00:31:55,520
you're seeing right thus a panda device

00:31:52,070 --> 00:31:58,490
type and just given a job name and a

00:31:55,520 --> 00:32:01,190
default timeout which I eat action will

00:31:58,490 --> 00:32:03,530
use as their timeout unless it has a

00:32:01,190 --> 00:32:05,960
specific action time up just like the

00:32:03,530 --> 00:32:09,100
lava test shelves if you look at the

00:32:05,960 --> 00:32:09,100
complete log

00:32:11,090 --> 00:32:16,890
this time we have to try and connect to

00:32:13,620 --> 00:32:18,930
a real device it's not a KVM or an

00:32:16,890 --> 00:32:21,740
emulation on a model we've got a real

00:32:18,930 --> 00:32:23,400
bit harder so this is where the seal

00:32:21,740 --> 00:32:26,960
server comes in

00:32:23,400 --> 00:32:33,090
we actually so this is the this is a

00:32:26,960 --> 00:32:40,620
sticker DS four zero four it gives us a

00:32:33,090 --> 00:32:41,240
telnet interface are nice familiar you

00:32:40,620 --> 00:32:48,140
boot

00:32:41,240 --> 00:32:52,470
Trotter's or nuts the panda is using a

00:32:48,140 --> 00:32:54,570
partitioned SD card so we boot into what

00:32:52,470 --> 00:32:56,160
lava calls currently the master image

00:32:54,570 --> 00:32:58,590
this is one of the ways that we

00:32:56,160 --> 00:33:02,760
currently make sure that the test image

00:32:58,590 --> 00:33:05,720
doesn't make our panda unusable for the

00:33:02,760 --> 00:33:08,550
next test in the line so this one isn't

00:33:05,720 --> 00:33:10,760
testing boot loaders are such at the

00:33:08,550 --> 00:33:13,320
more work because it's relying on the

00:33:10,760 --> 00:33:18,080
the same bootloader three years allowing

00:33:13,320 --> 00:33:21,360
a test image to be deployed onto the

00:33:18,080 --> 00:33:24,240
third and fifth partitions on that SD

00:33:21,360 --> 00:33:27,270
card so we check that the master is

00:33:24,240 --> 00:33:29,690
coming up is sane in case something has

00:33:27,270 --> 00:33:36,260
managed to break it in the previous test

00:33:29,690 --> 00:33:40,580
and then we get hold of the test image

00:33:36,260 --> 00:33:40,580
so the pandas doing a lot of this work

00:33:42,880 --> 00:33:51,820
we then send the modified tar balls

00:33:47,530 --> 00:33:56,650
without overlay back to the Panda write

00:33:51,820 --> 00:34:01,180
it out onto the SD card sort of the blue

00:33:56,650 --> 00:34:07,270
partitioned check though you still got

00:34:01,180 --> 00:34:11,140
as a same system and then we go down for

00:34:07,270 --> 00:34:15,640
a reboot so this is now expecting to

00:34:11,140 --> 00:34:19,680
come back up into the test image at this

00:34:15,640 --> 00:34:25,590
point we we are able to control u-boot

00:34:19,680 --> 00:34:28,900
lava uses P expect a lot so we are

00:34:25,590 --> 00:34:32,260
interrogating the serial output at each

00:34:28,900 --> 00:34:33,730
point and lava is stopping you wouldn't

00:34:32,260 --> 00:34:35,350
say what I'm going to set this command

00:34:33,730 --> 00:34:37,990
now we're going to set that command and

00:34:35,350 --> 00:34:39,820
that's how when you reboot in the test

00:34:37,990 --> 00:34:43,120
image lava is able to make sure they go

00:34:39,820 --> 00:34:46,930
into partition 3 this is telling it

00:34:43,120 --> 00:34:48,730
you'd load the test unit from partition

00:34:46,930 --> 00:34:50,520
3 not partition 1 where it would have

00:34:48,730 --> 00:34:55,380
come from to get into the master image

00:34:50,520 --> 00:34:55,380
so there's you boot or the test image

00:34:55,410 --> 00:35:01,090
and the other partitions with this on

00:34:59,080 --> 00:35:05,640
middle root of s and now you're in the

00:35:01,090 --> 00:35:05,640
neuro test you're inside a test image

00:35:07,680 --> 00:35:16,240
similar sort of stuff you work through

00:35:11,080 --> 00:35:18,760
and you've got the same interface again

00:35:16,240 --> 00:35:21,400
with your test Runner inside the image

00:35:18,760 --> 00:35:23,560
you've defined you're passing in

00:35:21,400 --> 00:35:27,330
information about which one's being

00:35:23,560 --> 00:35:27,330
Jewish tests are passing and failing

00:35:34,240 --> 00:35:42,160
and this is quite a long test it's one

00:35:38,950 --> 00:35:46,089
of our functional tests but it's bit

00:35:42,160 --> 00:35:48,880
longer than some of the others okay so

00:35:46,089 --> 00:35:53,410
you can see this test image was a Ubuntu

00:35:48,880 --> 00:35:56,440
raring image so this this is one of the

00:35:53,410 --> 00:35:58,869
ones actually that will cause trouble if

00:35:56,440 --> 00:36:00,760
I choose to resubmit it because you want

00:35:58,869 --> 00:36:05,530
to have now taken raring off the mirrors

00:36:00,760 --> 00:36:08,290
and you can't see raring so these kinds

00:36:05,530 --> 00:36:10,089
of things are things you need to think

00:36:08,290 --> 00:36:13,900
about as a test writer rope what about

00:36:10,089 --> 00:36:15,220
based in this home and then in the years

00:36:13,900 --> 00:36:16,990
to come to come back actually I want to

00:36:15,220 --> 00:36:20,560
read run that test back from there if

00:36:16,990 --> 00:36:22,089
you're relying on third-party sources

00:36:20,560 --> 00:36:25,000
for the updates and the other bits

00:36:22,089 --> 00:36:27,760
you're bringing in if you want to run

00:36:25,000 --> 00:36:29,950
these things long far ahead in the

00:36:27,760 --> 00:36:32,770
future put the stuff in your own

00:36:29,950 --> 00:36:34,960
repository take a snapshot of it keep it

00:36:32,770 --> 00:36:37,390
so you can run that test in it in in the

00:36:34,960 --> 00:36:39,970
future this test suffers from that

00:36:37,390 --> 00:36:42,400
problem that it's an old test I wouldn't

00:36:39,970 --> 00:36:42,820
be able to get hold of that data there

00:36:42,400 --> 00:36:45,460
we go

00:36:42,820 --> 00:36:49,630
tell the vet doesn't exist anymore full

00:36:45,460 --> 00:36:52,060
of all that lava carries on because

00:36:49,630 --> 00:36:56,010
there's not problem with stuff one that

00:36:52,060 --> 00:36:59,920
or and the tests didn't run so goes on

00:36:56,010 --> 00:37:02,020
tries to work out what other tests it

00:36:59,920 --> 00:37:10,050
can run and reboots into the master

00:37:02,020 --> 00:37:14,430
imager once in the master image yep

00:37:10,050 --> 00:37:17,349
again texted it's half-sane gathers up

00:37:14,430 --> 00:37:19,089
the result data from the test image

00:37:17,349 --> 00:37:21,010
because the test image is on is on the

00:37:19,089 --> 00:37:24,910
same SD card so the master image can

00:37:21,010 --> 00:37:29,970
easily just read the data around and

00:37:24,910 --> 00:37:29,970
then pass it back to the server

00:37:30,860 --> 00:37:37,600
you can see that direct update failed

00:37:33,740 --> 00:37:42,440
direct install failed curl FTP failed

00:37:37,600 --> 00:37:44,750
simply because this was the information

00:37:42,440 --> 00:37:46,640
wasn't there that's the indication of

00:37:44,750 --> 00:37:49,670
however you do use the the measurements

00:37:46,640 --> 00:37:53,570
and and units just a demonstration of

00:37:49,670 --> 00:37:59,720
that in this particular test and result

00:37:53,570 --> 00:38:02,900
bundle is there because we had multiple

00:37:59,720 --> 00:38:05,390
test definitions inside one test you've

00:38:02,900 --> 00:38:07,820
got multiple sets as well are results

00:38:05,390 --> 00:38:10,250
you can do it so that you have an

00:38:07,820 --> 00:38:13,190
automatic reboot between each of these

00:38:10,250 --> 00:38:16,820
sets of tests or you can combine them

00:38:13,190 --> 00:38:18,770
and have all your tests running in in

00:38:16,820 --> 00:38:21,770
sequence in the sequence you've defined

00:38:18,770 --> 00:38:23,690
in New York test they're not resorted or

00:38:21,770 --> 00:38:33,680
you know that you define everything

00:38:23,690 --> 00:38:36,610
about how the tests are she runs quickly

00:38:33,680 --> 00:38:36,610
look up

00:38:44,369 --> 00:38:48,829
okay so if I go to yeah

00:38:55,150 --> 00:39:02,130
this is what a test definition that she

00:38:57,550 --> 00:39:05,350
looks like currently we're working on

00:39:02,130 --> 00:39:07,450
well this part isn't likely to change a

00:39:05,350 --> 00:39:09,610
few with the refactoring the submission

00:39:07,450 --> 00:39:13,870
format may well change but the structure

00:39:09,610 --> 00:39:15,840
here is not likely to change much you're

00:39:13,870 --> 00:39:19,330
defining a little bit of metadata maybe

00:39:15,840 --> 00:39:21,640
it's not necessarily deterministic we

00:39:19,330 --> 00:39:24,130
don't rely on the fact that you've

00:39:21,640 --> 00:39:28,750
marked their OS you want to it's just a

00:39:24,130 --> 00:39:30,820
clue for the result parsing the same

00:39:28,750 --> 00:39:32,590
with the devices that's up device list

00:39:30,820 --> 00:39:34,840
is there mainly to help other test

00:39:32,590 --> 00:39:36,940
writers work out whether you've already

00:39:34,840 --> 00:39:38,650
thought of support of this test

00:39:36,940 --> 00:39:40,930
supporting their devices it's not

00:39:38,650 --> 00:39:43,780
doesn't actually preclude someone trying

00:39:40,930 --> 00:39:52,270
it on a device and you've started with

00:39:43,780 --> 00:40:01,060
the basic set of run steps that's a very

00:39:52,270 --> 00:40:04,900
simple further this one as install

00:40:01,060 --> 00:40:06,760
dependencies so you can start with

00:40:04,900 --> 00:40:11,490
someone's image and then think right now

00:40:06,760 --> 00:40:15,370
I actually need to add stuff if it is a

00:40:11,490 --> 00:40:16,960
Ubuntu or Debian based test image then

00:40:15,370 --> 00:40:20,200
it's simple to actually install them as

00:40:16,960 --> 00:40:22,480
packages and just say well I know that

00:40:20,200 --> 00:40:24,490
Fred's test image over there didn't have

00:40:22,480 --> 00:40:26,620
these things installed I'm going to add

00:40:24,490 --> 00:40:28,330
them in for this particular test and

00:40:26,620 --> 00:40:30,340
then you just go through on each one and

00:40:28,330 --> 00:40:34,530
do it what David Moore testing so you

00:40:30,340 --> 00:40:38,110
can see you know we're calling their a

00:40:34,530 --> 00:40:40,480
checker psh script which is part of the

00:40:38,110 --> 00:40:43,900
git repository at this game of our lives

00:40:40,480 --> 00:40:46,300
in because the test definition is cloned

00:40:43,900 --> 00:40:48,430
directly into your test image and you

00:40:46,300 --> 00:40:51,610
can run anything that is in your git

00:40:48,430 --> 00:40:53,260
repo that's where that's why you do all

00:40:51,610 --> 00:40:56,260
your scripting and do all your

00:40:53,260 --> 00:41:00,700
definition of things that don't quite

00:40:56,260 --> 00:41:02,740
fit into a single line of yellow if it's

00:41:00,700 --> 00:41:05,290
if you start needing to use a lot of

00:41:02,740 --> 00:41:06,870
pipes and redirects and maybe with the

00:41:05,290 --> 00:41:09,450
regex pass in that

00:41:06,870 --> 00:41:12,050
goes into a script of whatever language

00:41:09,450 --> 00:41:14,430
you want to write it in yourself

00:41:12,050 --> 00:41:17,280
whatever your preferred language is or

00:41:14,430 --> 00:41:23,310
whatever the test image can support you

00:41:17,280 --> 00:41:24,540
can compile it from C if you want as

00:41:23,310 --> 00:41:27,030
long as you I thought what the test

00:41:24,540 --> 00:41:40,950
image has a compiler of course some of

00:41:27,030 --> 00:41:51,540
them don't just before just before

00:41:40,950 --> 00:41:54,540
Daniel let me show you the right we've

00:41:51,540 --> 00:41:57,330
written quite a bit of documentation it

00:41:54,540 --> 00:42:00,000
is all available every time you install

00:41:57,330 --> 00:42:02,520
lava you get all this in all this

00:42:00,000 --> 00:42:04,860
documentation on each of the instances

00:42:02,520 --> 00:42:06,180
and it is the it is the documentation

00:42:04,860 --> 00:42:08,520
for that version of your currently

00:42:06,180 --> 00:42:09,750
installed naturally a lot of that

00:42:08,520 --> 00:42:13,140
documentation be written by the

00:42:09,750 --> 00:42:18,270
developers so it's it may well be

00:42:13,140 --> 00:42:21,570
something that you need to actually come

00:42:18,270 --> 00:42:26,040
back to us and help us improve that is

00:42:21,570 --> 00:42:27,720
welcome ah well I wrote a lot of this a

00:42:26,040 --> 00:42:32,900
lot of this documentation but they

00:42:27,720 --> 00:42:32,900
definitely know it needs patching right

00:42:35,370 --> 00:42:40,860
so that's the the link there for the the

00:42:39,030 --> 00:42:44,310
main documentation on the main lab

00:42:40,860 --> 00:42:46,860
server the staging instance is there if

00:42:44,310 --> 00:42:48,990
you got questions after the talk come to

00:42:46,860 --> 00:42:51,360
us on the mailing list or on the hash

00:42:48,990 --> 00:42:55,470
Leonora larvae of TCC channel and

00:42:51,360 --> 00:42:57,480
there's our git repos and you can you

00:42:55,470 --> 00:42:59,130
can come to us directly on both Leonardo

00:42:57,480 --> 00:43:03,360
log with an account or you can just use

00:42:59,130 --> 00:43:05,040
the Devi BTS and you past the install

00:43:03,360 --> 00:43:12,030
command to go on have your packages

00:43:05,040 --> 00:43:13,320
Danny one actually is working yep so the

00:43:12,030 --> 00:43:15,720
first question I think you actually

00:43:13,320 --> 00:43:18,150
answered which was whether there was a

00:43:15,720 --> 00:43:21,090
way to program how to acquire the serial

00:43:18,150 --> 00:43:22,080
connection because she's saying it's a

00:43:21,090 --> 00:43:23,070
serial connection it's a serial

00:43:22,080 --> 00:43:26,190
connection and then at one point you

00:43:23,070 --> 00:43:28,200
mentioned to Cyclades service right that

00:43:26,190 --> 00:43:31,170
comes under the device type

00:43:28,200 --> 00:43:33,870
configuration so larva will work out all

00:43:31,170 --> 00:43:36,450
will assume that pandas have a

00:43:33,870 --> 00:43:38,700
particular way of being connected and

00:43:36,450 --> 00:43:41,610
you passed that connection command on a

00:43:38,700 --> 00:43:45,990
per device basis so you say a panda six

00:43:41,610 --> 00:43:48,120
is on sick of these four port 17 and is

00:43:45,990 --> 00:43:49,710
that generic enough for example to ipmi

00:43:48,120 --> 00:43:51,360
connections and that kind of thing yes

00:43:49,710 --> 00:43:54,270
there's a whole range of people of

00:43:51,360 --> 00:43:57,330
different ones that people are using it

00:43:54,270 --> 00:43:58,800
is just a connection command so it's it

00:43:57,330 --> 00:44:00,090
cysteine it's the entire command

00:43:58,800 --> 00:44:03,050
including Li

00:44:00,090 --> 00:44:05,400
whether you use telnet or worth use

00:44:03,050 --> 00:44:06,900
screen or mini-com or whatever you

00:44:05,400 --> 00:44:10,920
actually need to use to actually get

00:44:06,900 --> 00:44:13,260
onto that port second question is you

00:44:10,920 --> 00:44:14,550
mention the hacking mode and that sounds

00:44:13,260 --> 00:44:16,320
like a really really useful thing to

00:44:14,550 --> 00:44:19,310
have does that work on systems that

00:44:16,320 --> 00:44:19,310
don't have networks

00:44:19,950 --> 00:44:25,140
I'm not sure how you could actually get

00:44:22,440 --> 00:44:26,579
a hacking session serial connection the

00:44:25,140 --> 00:44:29,809
serial connections the problem with the

00:44:26,579 --> 00:44:32,460
serial connection is that lava has a

00:44:29,809 --> 00:44:33,930
requirement that we have access or that

00:44:32,460 --> 00:44:35,609
we have controlled the serial connection

00:44:33,930 --> 00:44:38,609
because we're running p expects on it

00:44:35,609 --> 00:44:40,440
all the time so if the with the

00:44:38,609 --> 00:44:42,270
refactoring there will certainly be ways

00:44:40,440 --> 00:44:45,329
of having secondary connections onto

00:44:42,270 --> 00:44:47,280
boards which could allow a if the board

00:44:45,329 --> 00:44:48,599
supports a second serial or something

00:44:47,280 --> 00:44:53,579
like that or some one kind of other way

00:44:48,599 --> 00:44:55,770
of doing it to PTY and then letting

00:44:53,579 --> 00:45:00,349
incoming ssh session to the server

00:44:55,770 --> 00:45:13,740
talked about it'd be really useful

00:45:00,349 --> 00:45:16,140
touches okay a third question the lava

00:45:13,740 --> 00:45:20,970
overlays yeah are they static or are

00:45:16,140 --> 00:45:24,780
they per test run there is data that is

00:45:20,970 --> 00:45:28,589
test run dependent so what do you do if

00:45:24,780 --> 00:45:29,940
you can't repack the image take say for

00:45:28,589 --> 00:45:34,950
example that what you're trying to

00:45:29,940 --> 00:45:37,430
deploy to a system is a signed lump yeah

00:45:34,950 --> 00:45:40,109
we'd have to look at that in terms of

00:45:37,430 --> 00:45:41,359
that is going to be one of the things we

00:45:40,109 --> 00:45:43,530
need to look at with the refactoring

00:45:41,359 --> 00:45:47,640
currently we don't actually have a way

00:45:43,530 --> 00:45:49,500
of doing that if we receive an image we

00:45:47,640 --> 00:45:52,170
will currently break it up into bits and

00:45:49,500 --> 00:45:53,520
deploy it on different partitions but

00:45:52,170 --> 00:45:56,490
they were certainly going to be need for

00:45:53,520 --> 00:45:59,190
how where should one of the one of one

00:45:56,490 --> 00:46:03,079
the plans will be that we will deploy it

00:45:59,190 --> 00:46:05,670
assigned we will use whatever we can

00:46:03,079 --> 00:46:09,740
instruction wise to verify that it was

00:46:05,670 --> 00:46:09,740
signed then we'll just black lover it

00:46:13,760 --> 00:46:17,960
always make me forget my last question

00:46:19,130 --> 00:46:23,940
no you have me anyone else want this

00:46:22,680 --> 00:46:28,950
otherwise I'm remembering about number

00:46:23,940 --> 00:46:31,320
30 seconds oh yeah

00:46:28,950 --> 00:46:34,590
the tests that you showed that indicated

00:46:31,320 --> 00:46:39,330
that you could say oh I require OpenSSH

00:46:34,590 --> 00:46:41,160
server or I require NTP yeah are they

00:46:39,330 --> 00:46:42,840
declarative enough that for systems

00:46:41,160 --> 00:46:45,270
which you can't install packages on like

00:46:42,840 --> 00:46:48,720
say an Android system or an otherwise

00:46:45,270 --> 00:46:51,030
arbitrarily static system you can say ah

00:46:48,720 --> 00:46:53,390
I can run these tests because the system

00:46:51,030 --> 00:46:56,510
is exporting these tags in some manner

00:46:53,390 --> 00:46:59,040
no that would be down to the test writer

00:46:56,510 --> 00:47:02,610
so for example we get this problem with

00:46:59,040 --> 00:47:05,640
openembedded openembedded is a problem

00:47:02,610 --> 00:47:07,320
in that unlike any other districts at

00:47:05,640 --> 00:47:10,020
there it does not identify itself

00:47:07,320 --> 00:47:11,790
there's no tag there's not nothing in

00:47:10,020 --> 00:47:13,920
and look for embedded image that says hi

00:47:11,790 --> 00:47:15,720
I'm often embedded so you have to look

00:47:13,920 --> 00:47:17,400
for everybody else I get to the other

00:47:15,720 --> 00:47:22,619
thing right it must open embed exists no

00:47:17,400 --> 00:47:23,340
nobody else would be recognized no not

00:47:22,619 --> 00:47:25,380
necessarily

00:47:23,340 --> 00:47:26,970
it only has LSB really see if you

00:47:25,380 --> 00:47:33,240
compile those analyst be released into

00:47:26,970 --> 00:47:38,250
your open ability but it's too much

00:47:33,240 --> 00:47:43,800
control so yeah yeah we can't

00:47:38,250 --> 00:47:45,600
necessarily be real accurate enough and

00:47:43,800 --> 00:47:48,660
working out exactly what to do system

00:47:45,600 --> 00:47:51,600
you've got on there to work to work out

00:47:48,660 --> 00:47:54,180
yes you've got that available available

00:47:51,600 --> 00:47:56,400
or whatever and it's not real Abbas job

00:47:54,180 --> 00:48:03,660
it's a case of well you gave us the test

00:47:56,400 --> 00:48:10,650
image you give us the test definition if

00:48:03,660 --> 00:48:13,650
you break it keep both bit well we we

00:48:10,650 --> 00:48:17,960
will we will lava will do that anion

00:48:13,650 --> 00:48:17,960
together but if it breaks it breaks

00:48:18,200 --> 00:48:24,579
final thought on the package I think if

00:48:20,599 --> 00:48:30,109
lava were to provide a way to specify

00:48:24,579 --> 00:48:31,940
pseudo package names yeah then you might

00:48:30,109 --> 00:48:37,670
find that's going to make the fedora

00:48:31,940 --> 00:48:39,520
people okay moment you're saying this

00:48:37,670 --> 00:48:42,380
depends on these Debbie a package rate

00:48:39,520 --> 00:48:44,720
effectively but the test definition by

00:48:42,380 --> 00:48:46,540
dears but if you can have more test

00:48:44,720 --> 00:48:49,130
definitions that are generic across

00:48:46,540 --> 00:48:51,170
distributions yeah

00:48:49,130 --> 00:48:54,020
you might get somewhere warm but then it

00:48:51,170 --> 00:48:58,700
but then it's easy for someone to come

00:48:54,020 --> 00:49:01,970
across with a larval installer script

00:48:58,700 --> 00:49:03,980
it's based on YUM you know we it's it's

00:49:01,970 --> 00:49:06,109
they it is it is extendable is this is

00:49:03,980 --> 00:49:08,119
this isn't hard code somewhere in the

00:49:06,109 --> 00:49:10,160
depths of the Python code of lava it's

00:49:08,119 --> 00:49:13,400
there in a shell script is copied onto

00:49:10,160 --> 00:49:15,530
the board so the the the debian ubuntu

00:49:13,400 --> 00:49:17,540
images have a little shell scripted is

00:49:15,530 --> 00:49:26,900
love or install packages which he calls

00:49:17,540 --> 00:49:30,380
up get until you do a question so how

00:49:26,900 --> 00:49:32,630
does that penises work is that you have

00:49:30,380 --> 00:49:36,170
both besides having drivers for each

00:49:32,630 --> 00:49:39,079
type of device you also have something

00:49:36,170 --> 00:49:44,780
similar four types of test image so you

00:49:39,079 --> 00:49:47,960
have debian fedora openembedded so when

00:49:44,780 --> 00:49:50,690
you run your test definition say it

00:49:47,960 --> 00:49:53,569
depends on foo it will be stopped who in

00:49:50,690 --> 00:49:55,849
the right way in debian or fedora and

00:49:53,569 --> 00:49:58,670
then for openembedded where you can't

00:49:55,849 --> 00:50:00,950
actually stop stuff then your test your

00:49:58,670 --> 00:50:04,420
test images needs to have that stuff

00:50:00,950 --> 00:50:07,329
already installed and then okay the

00:50:04,420 --> 00:50:10,819
penis distillation step you just say

00:50:07,329 --> 00:50:12,740
give a warning say or you depend on

00:50:10,819 --> 00:50:14,720
these packages but i don't know how to

00:50:12,740 --> 00:50:18,170
install i'm assuming your image already

00:50:14,720 --> 00:50:19,819
has them yeah and then in the key in the

00:50:18,170 --> 00:50:21,560
in the case where you have like packages

00:50:19,819 --> 00:50:25,010
with different names across

00:50:21,560 --> 00:50:27,470
distributions you can specify package

00:50:25,010 --> 00:50:30,710
names for debian and packages for fedora

00:50:27,470 --> 00:50:35,000
or package names for fubar

00:50:30,710 --> 00:50:37,730
that you need so he is possible for to

00:50:35,000 --> 00:50:39,920
keep generic attest definitions that you

00:50:37,730 --> 00:50:42,970
can be used on every single images

00:50:39,920 --> 00:50:42,970
that's fine

00:50:49,220 --> 00:50:53,290

YouTube URL: https://www.youtube.com/watch?v=VcThkY-uuMY


