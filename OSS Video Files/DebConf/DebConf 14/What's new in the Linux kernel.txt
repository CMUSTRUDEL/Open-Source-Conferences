Title: What's new in the Linux kernel
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Ben Hutchings

At: DebConf14
https://debconf14.debconf.org/
Room: Room 327
Scheduled start: 2014-08-28 19:00:00
Captions: 
	00:00:00,030 --> 00:00:05,310
I'm flew comfortably then we'll begin

00:00:02,580 --> 00:00:07,680
good evening ladies and gentlemen I'm

00:00:05,310 --> 00:00:10,290
sure you're all dying to know what's

00:00:07,680 --> 00:00:11,580
been going on in the kernel I'd love to

00:00:10,290 --> 00:00:13,080
know because I'd love to know what he's

00:00:11,580 --> 00:00:18,060
doing in there when I'd rather have him

00:00:13,080 --> 00:00:19,680
for other purposes so I would it is my

00:00:18,060 --> 00:00:21,660
distinct privilege and by privileged I

00:00:19,680 --> 00:00:23,850
mean I bags it it when the sign-up

00:00:21,660 --> 00:00:26,460
sheets were going around to introduce to

00:00:23,850 --> 00:00:29,150
you the most brilliant and beautiful

00:00:26,460 --> 00:00:31,859
kernel hacker I'm sure you'll all agree

00:00:29,150 --> 00:00:47,640
Ben Hutchings telling us what's new in

00:00:31,859 --> 00:01:03,899
the cut in the Linux kernel hoping that

00:00:47,640 --> 00:01:19,909
my slides will appear on doesn't look

00:01:03,899 --> 00:01:19,909
like my slide yes that looks like it

00:01:21,890 --> 00:01:29,159
okay so I give a somewhat similar talked

00:01:25,590 --> 00:01:32,040
last year about what was new in the

00:01:29,159 --> 00:01:34,710
Linux kernel and this year some

00:01:32,040 --> 00:01:37,259
different new things happens so will

00:01:34,710 --> 00:01:40,640
this talk will not be exactly the same

00:01:37,259 --> 00:01:45,689
although it's a pretty similar shape

00:01:40,640 --> 00:01:47,579
just gloss over who I am I am a software

00:01:45,689 --> 00:01:49,590
developer or software engineer depending

00:01:47,579 --> 00:01:53,579
on what my employer chooses to call me

00:01:49,590 --> 00:01:55,470
this year by day and having developer at

00:01:53,579 --> 00:01:57,869
night although since I've started

00:01:55,470 --> 00:02:00,000
working at home sometimes timings the

00:01:57,869 --> 00:02:04,170
other way around I've been working on

00:02:00,000 --> 00:02:08,849
the Linux kernel since about 2008 both

00:02:04,170 --> 00:02:10,709
in Debian and a my paid work currently

00:02:08,849 --> 00:02:14,490
doing most of the maintenance for

00:02:10,709 --> 00:02:16,500
uploads to unstable aside from all the

00:02:14,490 --> 00:02:19,200
non-toxic ports which don't really know

00:02:16,500 --> 00:02:22,680
very much about and I'm also maintaining

00:02:19,200 --> 00:02:25,920
the staple updates to Linux 3.2 kernel

00:02:22,680 --> 00:02:27,390
or which then those those in feed into

00:02:25,920 --> 00:02:36,060
Debian and various other distributions

00:02:27,390 --> 00:02:38,520
that based on 3.2 as they s has been

00:02:36,060 --> 00:02:41,040
advised for free software projects Linux

00:02:38,520 --> 00:02:43,170
leaders early and often currently about

00:02:41,040 --> 00:02:45,210
five times a year there's no release

00:02:43,170 --> 00:02:47,730
schedule but it works out there's about

00:02:45,210 --> 00:02:49,440
about that and there are stable updates

00:02:47,730 --> 00:02:50,910
every week or two which are just

00:02:49,440 --> 00:02:53,790
supposed to fix bugs and force

00:02:50,910 --> 00:02:55,890
regressions some of the new features

00:02:53,790 --> 00:02:59,250
that appear in a stable release aren't

00:02:55,890 --> 00:03:02,040
completely ready some of them need need

00:02:59,250 --> 00:03:04,290
support from the user learned in the

00:03:02,040 --> 00:03:08,250
last year there have been six releases

00:03:04,290 --> 00:03:11,480
3.11 to 3.16 so we have lots of new

00:03:08,250 --> 00:03:13,860
features some of which need integration

00:03:11,480 --> 00:03:16,709
some of which we just need to turn on in

00:03:13,860 --> 00:03:17,910
the kernel package I'll recap what

00:03:16,709 --> 00:03:21,420
happened to the features that I talked

00:03:17,910 --> 00:03:23,370
about last year the team device driver

00:03:21,420 --> 00:03:24,870
we'll need is a user line Support

00:03:23,370 --> 00:03:28,730
Package core clip team and it was

00:03:24,870 --> 00:03:31,830
uploaded in October the team devices are

00:03:28,730 --> 00:03:33,810
kind of a supposed to be a better

00:03:31,830 --> 00:03:41,400
replacement for the network bonding

00:03:33,810 --> 00:03:43,019
device transcendent memory I did think

00:03:41,400 --> 00:03:44,970
we needed to have a bit of a think about

00:03:43,019 --> 00:03:47,510
what what to turn on whether we needed

00:03:44,970 --> 00:03:49,950
to do some scripting perhaps for that

00:03:47,510 --> 00:03:51,239
none of which has really happened but I

00:03:49,950 --> 00:03:55,760
looked at when I was preparing this talk

00:03:51,239 --> 00:03:58,260
I looked out the options that were there

00:03:55,760 --> 00:04:00,060
partly transcendence the transcendent

00:03:58,260 --> 00:04:02,670
memory framework was present but a lot

00:04:00,060 --> 00:04:07,200
of these specific plug-ins for that

00:04:02,670 --> 00:04:09,530
we're not so so transcendent memory is

00:04:07,200 --> 00:04:14,100
about having a layer in between the

00:04:09,530 --> 00:04:18,269
working memory which is can be mapped

00:04:14,100 --> 00:04:22,140
into processors and the swap file or

00:04:18,269 --> 00:04:24,600
swap partition and files on disk because

00:04:22,140 --> 00:04:26,250
the disks tend to be a bit slow it's may

00:04:24,600 --> 00:04:28,319
be useful to have an intermediate layer

00:04:26,250 --> 00:04:32,729
between those

00:04:28,319 --> 00:04:36,060
so we have now have Z swap which lets

00:04:32,729 --> 00:04:38,219
you instead of writing the sort of

00:04:36,060 --> 00:04:39,900
writing pages out to this what partition

00:04:38,219 --> 00:04:43,500
it said compress them keep them in

00:04:39,900 --> 00:04:46,169
memory and that's sort of sales purpose

00:04:43,500 --> 00:04:49,650
of producing the the amount of used

00:04:46,169 --> 00:04:53,849
memory while also being it much much

00:04:49,650 --> 00:04:55,680
faster to decompress those not quite

00:04:53,849 --> 00:05:01,710
swapped out pages then to bring them in

00:04:55,680 --> 00:05:04,139
from the disk Xen also supports this

00:05:01,710 --> 00:05:04,949
sort of intermediate state with the edge

00:05:04,139 --> 00:05:08,400
of the hypervisor

00:05:04,949 --> 00:05:11,550
so that will be enabled in the next

00:05:08,400 --> 00:05:15,889
kernel upload Linux 3.16 point whatever

00:05:11,550 --> 00:05:18,300
it's going to be going to unstable soon

00:05:15,889 --> 00:05:20,490
the new kms drivers that I talked to

00:05:18,300 --> 00:05:24,210
bounce as far as I know there's an hour

00:05:20,490 --> 00:05:28,650
supported by the jog drivers in in

00:05:24,210 --> 00:05:30,360
testing module signing haven't been

00:05:28,650 --> 00:05:32,849
hasn't been enabled but that's mostly

00:05:30,360 --> 00:05:35,099
because we haven't really made progress

00:05:32,849 --> 00:05:37,050
with secure boot so at the same point

00:05:35,099 --> 00:05:38,849
that we get kernel signing for secure

00:05:37,050 --> 00:05:42,090
boots we should also have module signing

00:05:38,849 --> 00:05:43,830
and that should give you a lot more

00:05:42,090 --> 00:05:49,469
assurance that the kernel running is the

00:05:43,830 --> 00:05:51,870
currently meant to realm it also talks

00:05:49,469 --> 00:05:54,330
about having more support for discard

00:05:51,870 --> 00:05:57,509
which is a way of improving the

00:05:54,330 --> 00:06:00,719
efficiency of SSDs if you tell the if

00:05:57,509 --> 00:06:02,400
you tell the SSD that some blocks are

00:06:00,719 --> 00:06:07,020
not currently in use it can do a better

00:06:02,400 --> 00:06:10,909
job of we're leveling and your disk

00:06:07,020 --> 00:06:12,719
should be a bit faster and last longer

00:06:10,909 --> 00:06:16,159
unfortunately we're still not enabling

00:06:12,719 --> 00:06:19,110
discard for SSDs automatically when you

00:06:16,159 --> 00:06:21,839
when you install Debian you have to know

00:06:19,110 --> 00:06:26,690
what options to turn on later as local

00:06:21,839 --> 00:06:26,690
bug for that if you want to work on it

00:06:27,440 --> 00:06:32,639
last year I talked about improvements

00:06:29,759 --> 00:06:36,240
for to containers we had finally had

00:06:32,639 --> 00:06:39,659
user namespaces implemented properly so

00:06:36,240 --> 00:06:40,830
you can create a you can create a

00:06:39,659 --> 00:06:45,300
container where

00:06:40,830 --> 00:06:48,480
the user IDs are can start with a zero

00:06:45,300 --> 00:06:52,080
for roots and still be completely

00:06:48,480 --> 00:06:53,970
distinct from the user IDs that are

00:06:52,080 --> 00:06:57,180
numerically the same on the outside of

00:06:53,970 --> 00:06:59,400
that container and you can also have the

00:06:57,180 --> 00:07:01,770
the special capabilities that normally

00:06:59,400 --> 00:07:05,340
associate associated with roots you can

00:07:01,770 --> 00:07:10,290
give those to the containerized root and

00:07:05,340 --> 00:07:12,360
it will be able to for it to have powers

00:07:10,290 --> 00:07:15,000
over the processes in the container but

00:07:12,360 --> 00:07:18,270
but not outside the container one of the

00:07:15,000 --> 00:07:19,710
blockers for that was was XFS because

00:07:18,270 --> 00:07:23,220
every file system needs to be able to

00:07:19,710 --> 00:07:26,130
distinguish the user IDs in the current

00:07:23,220 --> 00:07:29,490
user name space from the global user IDs

00:07:26,130 --> 00:07:31,320
which get written out to disk glad to

00:07:29,490 --> 00:07:34,650
say that has been fixed so we've been

00:07:31,320 --> 00:07:38,810
able to enable user namespaces I believe

00:07:34,650 --> 00:07:43,920
Alexi and possibly some other container

00:07:38,810 --> 00:07:45,510
systems are now using that be cash I

00:07:43,920 --> 00:07:47,070
believe people are using that I think

00:07:45,510 --> 00:07:48,690
someone reported talked about it on

00:07:47,070 --> 00:07:51,510
planet Tevye oh I don't remember who

00:07:48,690 --> 00:07:54,740
however the be cash tools package that's

00:07:51,510 --> 00:07:58,680
needed to configure that is not packaged

00:07:54,740 --> 00:08:02,480
there's an open bag for an open ITP bug

00:07:58,680 --> 00:08:04,980
I think there's some kind of Licensing

00:08:02,480 --> 00:08:07,190
mix-up there that needs to be resolved

00:08:04,980 --> 00:08:09,510
but if you're interested in be cash

00:08:07,190 --> 00:08:14,600
please go and look at that box if you

00:08:09,510 --> 00:08:15,810
can help resolve it for Jesse so arm

00:08:14,600 --> 00:08:18,420
multi-platform

00:08:15,810 --> 00:08:21,480
I believe we now have Debian installer

00:08:18,420 --> 00:08:23,690
working for some of the arm v7 boxes

00:08:21,480 --> 00:08:28,580
with a with a multi-platform kernel

00:08:23,690 --> 00:08:28,580
don't know if anyone can give a specific

00:08:29,930 --> 00:08:37,370
anyone and onenote got di working v7

00:08:39,050 --> 00:08:46,030
well I think it works there's some

00:08:43,280 --> 00:08:49,310
progress on GPU drivers I believe

00:08:46,030 --> 00:08:51,740
because Nvidia support somewhat

00:08:49,310 --> 00:08:54,910
surprisingly is helped with to get

00:08:51,740 --> 00:08:58,340
Nouveau supporting their Tegra SOC s

00:08:54,910 --> 00:09:03,710
which have somewhat similar GPUs and

00:08:58,340 --> 00:09:09,470
feed to their PCI Express cards so

00:09:03,710 --> 00:09:13,780
Nouveau new very suitable for both and

00:09:09,470 --> 00:09:16,730
then the novena project is sponsoring

00:09:13,780 --> 00:09:20,380
development of the Etna veve driver for

00:09:16,730 --> 00:09:25,280
the GPU that's used on their on their

00:09:20,380 --> 00:09:33,230
laptop flash development board quite

00:09:25,280 --> 00:09:36,080
when that will be ready I don't know so

00:09:33,230 --> 00:09:40,310
getting on to the new features that have

00:09:36,080 --> 00:09:44,060
appeared in the last year unnamed

00:09:40,310 --> 00:09:47,630
temporary files not very exciting but

00:09:44,060 --> 00:09:50,210
kind of useful currently if you you can

00:09:47,630 --> 00:09:54,020
create a file that is not linked into

00:09:50,210 --> 00:09:57,580
the not linked into the file system

00:09:54,020 --> 00:10:00,680
using the C library temp file function

00:09:57,580 --> 00:10:03,820
but actually that does have to create a

00:10:00,680 --> 00:10:08,810
file with a specific name which it will

00:10:03,820 --> 00:10:12,140
it will try to generate a random random

00:10:08,810 --> 00:10:13,550
name in usually slash jump and if that

00:10:12,140 --> 00:10:14,870
fails it'll try it out the name and

00:10:13,550 --> 00:10:16,160
another name and another name until

00:10:14,870 --> 00:10:17,690
finally it comes up with something that

00:10:16,160 --> 00:10:19,130
no one's using and then it will

00:10:17,690 --> 00:10:21,160
immediately remove that file which

00:10:19,130 --> 00:10:25,850
didn't really need to have a name so

00:10:21,160 --> 00:10:28,520
there's now a kernel feature there's the

00:10:25,850 --> 00:10:32,030
option o temp file and if you specify

00:10:28,520 --> 00:10:36,710
that and you specify the name of just a

00:10:32,030 --> 00:10:39,170
directory then you'll get a drink but

00:10:36,710 --> 00:10:40,660
you'll get a new file which is here in

00:10:39,170 --> 00:10:42,890
the same file system as that directory

00:10:40,660 --> 00:10:44,270
it's right assuming your permission to

00:10:42,890 --> 00:10:48,230
write to create a file in that directory

00:10:44,270 --> 00:10:50,600
you get a file on the same file system

00:10:48,230 --> 00:10:52,579
that doesn't have a name never had a

00:10:50,600 --> 00:10:57,240
name

00:10:52,579 --> 00:10:58,920
and one of the interesting things you

00:10:57,240 --> 00:11:00,689
can do with that which are so far as I

00:10:58,920 --> 00:11:03,629
know you can't do is if you use tilt

00:11:00,689 --> 00:11:08,100
file is you you can actually give this

00:11:03,629 --> 00:11:11,879
nameless file a name later using the

00:11:08,100 --> 00:11:17,189
link at call so the result of that is

00:11:11,879 --> 00:11:19,889
you can you can put content into your

00:11:17,189 --> 00:11:24,360
file you can set all it's meditator like

00:11:19,889 --> 00:11:26,999
permissions and ACLs whatever extra

00:11:24,360 --> 00:11:29,399
attributes you want and link it into the

00:11:26,999 --> 00:11:31,709
file system and it's as if the file have

00:11:29,399 --> 00:11:35,249
been a Tom P created there's no other

00:11:31,709 --> 00:11:39,269
process is going to see this file in an

00:11:35,249 --> 00:11:40,949
incomplete state so that's probably kind

00:11:39,269 --> 00:11:47,490
of useful for some applications I'm not

00:11:40,949 --> 00:11:48,499
exactly sure what but think what you can

00:11:47,490 --> 00:11:52,879
do with that

00:11:48,499 --> 00:11:55,170
unfortunately it's not supported on all

00:11:52,879 --> 00:11:58,199
fathom types that need specific support

00:11:55,170 --> 00:12:01,170
in each file system so you're going to

00:11:58,199 --> 00:12:04,470
need a fallback unless you can your

00:12:01,170 --> 00:12:09,089
application can depend on using specific

00:12:04,470 --> 00:12:11,339
file system types and of course it was

00:12:09,089 --> 00:12:12,899
only a stood in 3.11 so if you need to

00:12:11,339 --> 00:12:17,490
support that the kernel versions used to

00:12:12,899 --> 00:12:20,429
only default back I'm gonna skip over

00:12:17,490 --> 00:12:26,850
this and come back to it if I have time

00:12:20,429 --> 00:12:30,119
at the ends the lost a file system

00:12:26,850 --> 00:12:31,709
there's parently quite popular in shaft

00:12:30,119 --> 00:12:33,809
computing applications it's a

00:12:31,709 --> 00:12:36,299
distributed file system which is a bit

00:12:33,809 --> 00:12:39,029
different from things like NFS it

00:12:36,299 --> 00:12:41,519
doesn't her a central server it's been

00:12:39,029 --> 00:12:43,999
around for a long time it's 1999 so what

00:12:41,519 --> 00:12:46,889
am I talking about this is a new feature

00:12:43,999 --> 00:12:49,319
well now it's in the linux agent

00:12:46,889 --> 00:12:52,290
directory and it's being updated for

00:12:49,319 --> 00:12:54,689
each new each new version of linux so at

00:12:52,290 --> 00:12:58,139
the very least it does build against

00:12:54,689 --> 00:13:00,299
current versions of Linux previously it

00:12:58,139 --> 00:13:03,360
was kind of lagging behind the kernel

00:13:00,299 --> 00:13:05,279
and although we heard lustre and squeeze

00:13:03,360 --> 00:13:07,290
it wasn't released in

00:13:05,279 --> 00:13:12,720
it didn't work with the next three

00:13:07,290 --> 00:13:14,220
points to an unfortunate drop-down after

00:13:12,720 --> 00:13:16,620
being completely now so while we have

00:13:14,220 --> 00:13:23,759
the kernel side of it working again we

00:13:16,620 --> 00:13:26,189
missing the user land side so I dropped

00:13:23,759 --> 00:13:29,990
a mail to the former luster maintainer

00:13:26,189 --> 00:13:31,889
x' maybe they'll land it back in if your

00:13:29,990 --> 00:13:33,779
maybe they need help so if you're

00:13:31,889 --> 00:13:37,939
interested in in getting luster back

00:13:33,779 --> 00:13:37,939
into Debian that's something to look at

00:13:38,569 --> 00:13:47,309
but four FS is gain support for

00:13:43,309 --> 00:13:50,430
deduplicating files which you can kind

00:13:47,309 --> 00:13:52,529
of do in a way by making using hard

00:13:50,430 --> 00:13:58,939
links but the problem with hard links is

00:13:52,529 --> 00:14:01,230
then an updates you might not want

00:13:58,939 --> 00:14:03,300
updates through one pass to affect the

00:14:01,230 --> 00:14:07,769
other path you want to share story if it

00:14:03,300 --> 00:14:12,199
maybe have a copy on right behavior now

00:14:07,769 --> 00:14:15,930
a bad or FS generally doesn't update

00:14:12,199 --> 00:14:17,279
data in place instead it makes a new it

00:14:15,930 --> 00:14:21,709
makes a new copy and it drops the

00:14:17,279 --> 00:14:25,290
reference to the to the to the old data

00:14:21,709 --> 00:14:28,170
so you can you can have data shared

00:14:25,290 --> 00:14:32,430
between files without necessarily

00:14:28,170 --> 00:14:34,410
linking them snapshots are very cheap

00:14:32,430 --> 00:14:38,069
and you can also do a kind of a cheap

00:14:34,410 --> 00:14:42,449
file copy currently that requires an

00:14:38,069 --> 00:14:43,829
ioctl although possibly CP as a special

00:14:42,449 --> 00:14:46,490
option for it I don't remember it now

00:14:43,829 --> 00:14:50,189
but you need to ask for it specifically

00:14:46,490 --> 00:14:53,009
so you may well end up with multiple

00:14:50,189 --> 00:14:56,699
copies of files anyway and you want save

00:14:53,009 --> 00:14:59,819
you want to save space by T duplicating

00:14:56,699 --> 00:15:01,949
those butter if s isn't going to do that

00:14:59,819 --> 00:15:04,019
for you automatically it's not going to

00:15:01,949 --> 00:15:07,290
actually go out there and scale it

00:15:04,019 --> 00:15:10,079
leaves that to use the land so you still

00:15:07,290 --> 00:15:14,160
need to do YouTube tool and you need one

00:15:10,079 --> 00:15:16,439
that's going to that's well you probably

00:15:14,160 --> 00:15:18,180
want one that is going to enable copy on

00:15:16,439 --> 00:15:20,010
right

00:15:18,180 --> 00:15:22,800
rather than linking there is one of

00:15:20,010 --> 00:15:26,100
these fun tools called beat up but it's

00:15:22,800 --> 00:15:28,830
not intervene yet so any butter and fest

00:15:26,100 --> 00:15:39,690
fans out there won't have to duplication

00:15:28,830 --> 00:15:45,510
think about packaging that is I can be

00:15:39,690 --> 00:15:49,230
part of an existing package parents can

00:15:45,510 --> 00:15:51,930
be part of butter bean okay

00:15:49,230 --> 00:15:55,100
so I look like this is going to be added

00:15:51,930 --> 00:15:55,100
to butter FS tools

00:15:56,820 --> 00:16:03,630
nf tables it's yet another file

00:15:59,130 --> 00:16:06,480
firewalling api as if we didn't have

00:16:03,630 --> 00:16:08,280
enough already okay well I explain why

00:16:06,480 --> 00:16:11,670
why this is actually a good thing

00:16:08,280 --> 00:16:13,830
currently we have IP tables for ipv4 we

00:16:11,670 --> 00:16:16,590
have IP six tables for ipv6 firewall

00:16:13,830 --> 00:16:20,270
firewalling we have ARP tables for the

00:16:16,590 --> 00:16:22,620
ARP protocol and we have eb tables for

00:16:20,270 --> 00:16:26,940
Ethernet bridges both of the Ethernet

00:16:22,620 --> 00:16:28,440
level all of our protocol specific they

00:16:26,940 --> 00:16:29,790
need a kernel module for each kind of

00:16:28,440 --> 00:16:34,550
matching you might want to do then you

00:16:29,790 --> 00:16:38,820
declare the module for each each action

00:16:34,550 --> 00:16:43,320
I think some of the actions are somewhat

00:16:38,820 --> 00:16:45,960
shareable between these the they're all

00:16:43,320 --> 00:16:48,360
based on the the kernels net field for

00:16:45,960 --> 00:16:52,620
API internally which is somewhat more

00:16:48,360 --> 00:16:54,080
flexible but only if you want only if

00:16:52,620 --> 00:16:58,680
you're prepared to write another module

00:16:54,080 --> 00:17:02,280
so the NF Tables API exposes more of

00:16:58,680 --> 00:17:05,040
that flexibility it adds a kind of

00:17:02,280 --> 00:17:07,170
virtual machine similar to the to the

00:17:05,040 --> 00:17:11,430
Berkley packet filter that's that's

00:17:07,170 --> 00:17:16,260
commonly commonly used for for packet

00:17:11,430 --> 00:17:18,030
filtering on sockets I'm not quite clear

00:17:16,260 --> 00:17:20,970
on why it needed a different virtual

00:17:18,030 --> 00:17:24,420
machine but apparently it dear to PPF

00:17:20,970 --> 00:17:30,270
wasn't quite good enough so user learns

00:17:24,420 --> 00:17:31,480
can generate matching code and upload

00:17:30,270 --> 00:17:34,090
that into the kernel

00:17:31,480 --> 00:17:37,269
and it'll all be safe probably because

00:17:34,090 --> 00:17:44,309
it's limited to what it it soundbox

00:17:37,269 --> 00:17:49,230
within this specific virtual machine so

00:17:44,309 --> 00:17:51,460
we have a used line tool and if tables

00:17:49,230 --> 00:17:54,730
which uses this API it's already

00:17:51,460 --> 00:17:56,620
packaged so that's great but the next

00:17:54,730 --> 00:17:58,299
stage was going to happen somewhere Ella

00:17:56,620 --> 00:18:01,570
line I don't know quite how far off it

00:17:58,299 --> 00:18:07,360
is is all those old file api's are now

00:18:01,570 --> 00:18:09,370
redundant but because you cannot you can

00:18:07,360 --> 00:18:13,240
generate all that matching code in user

00:18:09,370 --> 00:18:16,710
learnt now and don't need specific you

00:18:13,240 --> 00:18:16,710
don't need specific native code for it

00:18:17,880 --> 00:18:22,960
so the use line tools IP tables IP six

00:18:21,250 --> 00:18:31,080
tables and so on will need to be ported

00:18:22,960 --> 00:18:35,100
to use F tables and hopefully upstream

00:18:31,080 --> 00:18:35,100
maintain us for those we'll do that

00:18:39,230 --> 00:18:47,880
all right so lock debugging is something

00:18:44,700 --> 00:18:52,470
you're going to that is well

00:18:47,880 --> 00:18:54,720
multi-threaded programs often have bugs

00:18:52,470 --> 00:18:58,529
involving locks and the kernel is is a

00:18:54,720 --> 00:19:01,380
massively multiplayer program it has

00:18:58,529 --> 00:19:04,289
what every every single task exists in

00:19:01,380 --> 00:19:06,049
years land can also run in the kernel so

00:19:04,289 --> 00:19:08,340
you've got a thread for each of those

00:19:06,049 --> 00:19:09,900
you have kernel internal threads you

00:19:08,340 --> 00:19:12,240
have interrupts yourself interrupts you

00:19:09,900 --> 00:19:14,659
have no mask of all interrupts so you

00:19:12,240 --> 00:19:16,710
have a huge number of interesting

00:19:14,659 --> 00:19:20,730
interactions there lots of different

00:19:16,710 --> 00:19:24,409
synchronization mechanisms mutex is spin

00:19:20,730 --> 00:19:27,510
locks RW locks and you have locking

00:19:24,409 --> 00:19:29,880
locking operations that may inhibit

00:19:27,510 --> 00:19:35,190
interrupts or soft interrupts

00:19:29,880 --> 00:19:39,539
temporarily and hopefully we avoid data

00:19:35,190 --> 00:19:41,120
races that way but with all this all

00:19:39,539 --> 00:19:43,200
this locking going on

00:19:41,120 --> 00:19:46,980
unfortunately we might be looking at the

00:19:43,200 --> 00:19:51,179
wrong order and get deadlocks easy to

00:19:46,980 --> 00:19:54,510
introduce and and of course they will

00:19:51,179 --> 00:19:57,120
fight users in the field and then we

00:19:54,510 --> 00:19:58,679
don't know how to reproduce them for

00:19:57,120 --> 00:20:00,570
some years now the kernel has had a

00:19:58,679 --> 00:20:03,390
system called locked app which

00:20:00,570 --> 00:20:05,220
dynamically tracks the locking

00:20:03,390 --> 00:20:09,210
Operations sequences of lawton

00:20:05,220 --> 00:20:12,090
operations but then it will do a sort of

00:20:09,210 --> 00:20:15,000
assed static comparison of these dynamic

00:20:12,090 --> 00:20:17,610
sequences in all work out supposing

00:20:15,000 --> 00:20:21,899
these supposing these sequences occurred

00:20:17,610 --> 00:20:24,510
in parallel then cook that potentially

00:20:21,899 --> 00:20:27,210
result in a deadlock and so although

00:20:24,510 --> 00:20:31,980
it's not a pure static analyzer it's it

00:20:27,210 --> 00:20:33,710
can very quickly find many types of of

00:20:31,980 --> 00:20:37,409
deadlock bug

00:20:33,710 --> 00:20:44,630
so that's thus help to fix find and fix

00:20:37,409 --> 00:20:44,630
a lot of bugs and in conjunction with

00:20:46,010 --> 00:20:55,340
the Trinity fuzzing tool that's

00:20:51,640 --> 00:20:58,250
that's resulted a lot of improvements in

00:20:55,340 --> 00:21:03,410
the robustness of the kernel so now you

00:20:58,250 --> 00:21:04,640
too in user land can use lock tap just

00:21:03,410 --> 00:21:07,400
as soon as we get around packaging it

00:21:04,640 --> 00:21:11,840
it's available as a library which is in

00:21:07,400 --> 00:21:13,070
the in the Linux source tree and it

00:21:11,840 --> 00:21:19,880
should be built funnelin it's still a

00:21:13,070 --> 00:21:22,610
source package only it isn't yet so I

00:21:19,880 --> 00:21:23,480
hope you find time to do this if that's

00:21:22,610 --> 00:21:34,160
something that sounds really interesting

00:21:23,480 --> 00:21:35,750
to you then please please help so we've

00:21:34,160 --> 00:21:37,010
got a couple of new ports well actually

00:21:35,750 --> 00:21:38,960
there are lots and lots of new

00:21:37,010 --> 00:21:42,830
architectures being asked to Linux all

00:21:38,960 --> 00:21:48,430
the time many of which are not supported

00:21:42,830 --> 00:21:51,530
in Debian but arm 64 architecture

00:21:48,430 --> 00:21:54,800
although it sounds or sounds a lot like

00:21:51,530 --> 00:21:57,170
um and come from the same company is

00:21:54,800 --> 00:22:00,440
actually very very different from the

00:21:57,170 --> 00:22:03,410
32-bit arm and its treated as currently

00:22:00,440 --> 00:22:07,700
treated as a completely separates thing

00:22:03,410 --> 00:22:10,040
in the kernel the initial support for

00:22:07,700 --> 00:22:16,130
this was out of over a year ago but it

00:22:10,040 --> 00:22:20,510
wasn't really usable in the last year it

00:22:16,130 --> 00:22:21,980
has become useful it's been become in

00:22:20,510 --> 00:22:24,980
fact reach the point where you can run

00:22:21,980 --> 00:22:28,220
it on both emulators and real hardware I

00:22:24,980 --> 00:22:30,170
believe that the Debian packages off the

00:22:28,220 --> 00:22:31,640
UM 64 kernel do run on real hardware

00:22:30,170 --> 00:22:34,370
although I haven't seen me happen for

00:22:31,640 --> 00:22:40,700
myself general wants to donate me an arm

00:22:34,370 --> 00:22:45,470
64 board to test that perfectly willing

00:22:40,700 --> 00:22:52,390
to talk me into taking the kernels had

00:22:45,470 --> 00:22:52,390
support our PC for a very long time and

00:22:55,210 --> 00:22:59,690
which bought up several different

00:22:57,350 --> 00:23:02,510
variants of that we've had PowerPC 32

00:22:59,690 --> 00:23:04,640
bits in Debian we've had an official

00:23:02,510 --> 00:23:09,110
port to 64 bits both of which are big

00:23:04,640 --> 00:23:11,030
endian and the kernel has always run a

00:23:09,110 --> 00:23:14,540
big engine although it supports little

00:23:11,030 --> 00:23:16,780
endian userland I don't think it's what

00:23:14,540 --> 00:23:19,250
that in Debian but the current did

00:23:16,780 --> 00:23:23,510
recently there's been this the open

00:23:19,250 --> 00:23:25,460
power consortium has decided that power

00:23:23,510 --> 00:23:29,240
is going to be far more popular if only

00:23:25,460 --> 00:23:32,390
it was little-endian I think that's I

00:23:29,240 --> 00:23:36,410
think that's what it is anyway so so we

00:23:32,390 --> 00:23:40,060
know how the PBC 64 TL port 64-bit

00:23:36,410 --> 00:23:44,960
little-endian both kernel and user land

00:23:40,060 --> 00:23:48,040
that landed in linux 3.13 kernel runners

00:23:44,960 --> 00:23:51,920
little-endian as well and there's a new

00:23:48,040 --> 00:23:59,450
as a subtly different user land api

00:23:51,920 --> 00:24:01,790
formats and both of these are being

00:23:59,450 --> 00:24:03,560
bootstraps in unstable as we speak I

00:24:01,790 --> 00:24:12,680
think their main quite good progress and

00:24:03,560 --> 00:24:16,940
it might even make it into Jesse so far

00:24:12,680 --> 00:24:18,950
private locking is not not one of those

00:24:16,940 --> 00:24:24,190
things is not particularly exciting but

00:24:18,950 --> 00:24:27,320
a sort of fixes a bug in POSIX

00:24:24,190 --> 00:24:32,800
which is product is the is the standard

00:24:27,320 --> 00:24:37,060
that Linux and UNIX and similar kernels

00:24:32,800 --> 00:24:40,900
attempt to follow as a kind of a core

00:24:37,060 --> 00:24:45,050
core interface to up core core API

00:24:40,900 --> 00:24:50,990
Pollock says that if you if you lock a

00:24:45,050 --> 00:24:53,450
file then as soon as you close any file

00:24:50,990 --> 00:24:54,950
descriptor that to that file you or that

00:24:53,450 --> 00:24:58,790
your process

00:24:54,950 --> 00:25:00,080
drops it slots on that a file thing is

00:24:58,790 --> 00:25:01,940
you could open the same file multiple

00:25:00,080 --> 00:25:04,130
times you have multiple file script is

00:25:01,940 --> 00:25:05,420
it if you have a multi-threaded process

00:25:04,130 --> 00:25:06,920
you might want have multiple threads

00:25:05,420 --> 00:25:09,049
that don't know about each other

00:25:06,920 --> 00:25:10,759
opening the same file

00:25:09,049 --> 00:25:12,829
locking the file locking different

00:25:10,759 --> 00:25:16,519
ranges of the file because these are

00:25:12,829 --> 00:25:18,589
range locks not whole file locks as soon

00:25:16,519 --> 00:25:21,019
as one thread closes the file oops

00:25:18,589 --> 00:25:23,959
it dropped the locks that belong to the

00:25:21,019 --> 00:25:25,579
other threat as well so your

00:25:23,959 --> 00:25:27,469
multi-threaded process now we'll need

00:25:25,579 --> 00:25:33,919
serialization around opening and closing

00:25:27,469 --> 00:25:35,929
files which is a bit silly what's more

00:25:33,919 --> 00:25:38,329
you're going to you have the problem of

00:25:35,929 --> 00:25:40,339
hard and symbolic links which mean that

00:25:38,329 --> 00:25:41,449
maybe those files you thought or two

00:25:40,339 --> 00:25:45,319
different files were actually the same

00:25:41,449 --> 00:25:49,369
file so this serialization still doesn't

00:25:45,319 --> 00:25:53,419
help you so we have a solution to this

00:25:49,369 --> 00:25:54,829
we have a new type of lock which well

00:25:53,419 --> 00:25:55,909
it's almost the same type of lock but it

00:25:54,829 --> 00:25:58,159
has the right semantics

00:25:55,909 --> 00:26:02,209
now as associated with the open file

00:25:58,159 --> 00:26:05,449
handle so the two threads that open the

00:26:02,209 --> 00:26:09,279
file now have completely separate sets

00:26:05,449 --> 00:26:09,279
of lots associated with their Open File

00:26:13,419 --> 00:26:18,199
martabak devices don't need any don't

00:26:17,149 --> 00:26:22,989
need anything new from your application

00:26:18,199 --> 00:26:26,509
these are performance feature every

00:26:22,989 --> 00:26:30,259
block device that corresponds to a

00:26:26,509 --> 00:26:32,119
physical device a physical disk is like

00:26:30,259 --> 00:26:36,529
to have some kind of command key or

00:26:32,119 --> 00:26:39,679
request queue which has all the all the

00:26:36,529 --> 00:26:41,839
reads and writes that have been have

00:26:39,679 --> 00:26:46,429
been started or about to start on that

00:26:41,839 --> 00:26:48,019
plot device depending on the

00:26:46,429 --> 00:26:49,489
capabilities of the hardware the

00:26:48,019 --> 00:26:50,959
hardware might might only be able to

00:26:49,489 --> 00:26:52,159
send one come on to the hydro at once

00:26:50,959 --> 00:26:56,419
or you might be able to send multiple

00:26:52,159 --> 00:26:59,169
commands that's called ncq in any case

00:26:56,419 --> 00:27:02,119
you the queue is maintained in software

00:26:59,169 --> 00:27:07,639
if you only have a single queue for your

00:27:02,119 --> 00:27:09,739
single device then the adding things

00:27:07,639 --> 00:27:11,779
into the queue and taking things off the

00:27:09,739 --> 00:27:14,959
handing things over to the hardware that

00:27:11,779 --> 00:27:16,999
has to be serialized and then the

00:27:14,959 --> 00:27:20,709
completions are also being handled so a

00:27:16,999 --> 00:27:22,370
single context so you potentially have

00:27:20,709 --> 00:27:27,500
inter processing

00:27:22,370 --> 00:27:30,650
perhaps to wake up processors on another

00:27:27,500 --> 00:27:37,790
CPUs so for if you have a really fast

00:27:30,650 --> 00:27:39,440
SSD that I can be a bottleneck if you

00:27:37,790 --> 00:27:47,390
have a really fast SSD it might actually

00:27:39,440 --> 00:27:48,620
support multiple queues but the that

00:27:47,390 --> 00:27:55,429
doesn't help you so long as the kernel

00:27:48,620 --> 00:28:00,290
is using a single queue that's finally

00:27:55,429 --> 00:28:02,240
changed in in 3.16 you can have if the

00:28:00,290 --> 00:28:04,100
driver supports it that can be multiple

00:28:02,240 --> 00:28:06,679
queues for a block device you can have

00:28:04,100 --> 00:28:09,920
multiple CPUs adding to these queues in

00:28:06,679 --> 00:28:12,590
parallel sending commands to the to the

00:28:09,920 --> 00:28:17,270
device in parallel and completions come

00:28:12,590 --> 00:28:23,000
back in parallel and hopefully

00:28:17,270 --> 00:28:24,140
everything gets you don't have any you

00:28:23,000 --> 00:28:26,929
don't have so much contention between

00:28:24,140 --> 00:28:31,520
different tasks using the using the

00:28:26,929 --> 00:28:33,740
device so far however there's only one

00:28:31,520 --> 00:28:37,580
driver supports this

00:28:33,740 --> 00:28:44,900
it's MTI p3 to xx which is for a very

00:28:37,580 --> 00:28:50,290
expensive family of SSDs I believe that

00:28:44,900 --> 00:28:59,240
some that the scuzzy block drivers for

00:28:50,290 --> 00:29:02,420
the scuzzy drivers that work with some

00:28:59,240 --> 00:29:06,429
other kinds of SSDs I can't support this

00:29:02,420 --> 00:29:06,429
soon but they missed 3.16

00:29:22,220 --> 00:29:28,639
oh I missed that okay so in so nvme I'm

00:29:27,440 --> 00:29:33,529
repeating I'm repeating it with the

00:29:28,639 --> 00:29:35,659
microphone so nvme is already multi cue

00:29:33,529 --> 00:29:40,539
okay great so I think that covers all

00:29:35,659 --> 00:29:53,389
the all the really fast SSDs probably

00:29:40,539 --> 00:29:56,750
great so okay so if anyone has questions

00:29:53,389 --> 00:30:01,039
I can ask them now I can also go back to

00:29:56,750 --> 00:30:02,779
talking about the the network busy

00:30:01,039 --> 00:30:06,279
polling there's another sort of

00:30:02,779 --> 00:30:06,279
interesting PI performance feature

00:30:11,650 --> 00:30:14,790
there's a headset right

00:30:15,970 --> 00:30:49,690
there is this working here you are

00:30:41,200 --> 00:30:52,649
intending on earth yeah okay now I gonna

00:30:49,690 --> 00:30:52,649
find there are no more questions

00:30:53,500 --> 00:30:56,710
[Music]

00:31:04,040 --> 00:31:10,370
so with with just thank you with Jesse

00:31:07,730 --> 00:31:11,330
having prison at 3:16 but it's not I'm

00:31:10,370 --> 00:31:13,520
not yet

00:31:11,330 --> 00:31:16,550
like slushy I heard is the description

00:31:13,520 --> 00:31:18,230
what is this well it's not that we

00:31:16,550 --> 00:31:23,030
haven't frozen we we're not freezing

00:31:18,230 --> 00:31:25,520
until November and well 3.16 isn't in

00:31:23,030 --> 00:31:28,580
byzantine unstapled yet the next upload

00:31:25,520 --> 00:31:30,140
will be based on 3:16 so what is the

00:31:28,580 --> 00:31:32,900
opportunity for getting patches that

00:31:30,140 --> 00:31:35,750
were accepted and queued for 3:17 into

00:31:32,900 --> 00:31:42,020
3:16 Jesse the chances of it happening

00:31:35,750 --> 00:31:44,990
are very good if you ask now less so as

00:31:42,020 --> 00:31:47,480
we get towards a freeze and beyond the

00:31:44,990 --> 00:31:50,720
freeze we can still take patches for

00:31:47,480 --> 00:31:52,610
hardware enablement so you drive us off

00:31:50,720 --> 00:31:56,870
any models and so on

00:31:52,610 --> 00:32:00,670
oh they're still okay but the earlier

00:31:56,870 --> 00:32:00,670
you get the early you asked the better

00:32:02,800 --> 00:32:09,980
um I don't believe personally that

00:32:05,810 --> 00:32:12,860
Jurassic is magic but so many people

00:32:09,980 --> 00:32:16,160
have been requesting that jessic get in

00:32:12,860 --> 00:32:19,120
Jilin that is getting on my nerve is

00:32:16,160 --> 00:32:26,360
there a chance that we ever get a maybe

00:32:19,120 --> 00:32:28,700
flavor yeah ii jibon gr say is not going

00:32:26,360 --> 00:32:35,330
to support 3.16 for very long so far as

00:32:28,700 --> 00:32:41,480
I know so that's not really going to

00:32:35,330 --> 00:32:45,260
work si as a patch within the within the

00:32:41,480 --> 00:32:48,110
Linux package there is possibly there

00:32:45,260 --> 00:32:52,360
wasn't discussions several months back

00:32:48,110 --> 00:32:52,360
about the possibility of doing a a

00:32:52,420 --> 00:32:59,510
separate Linux geosenge packed package

00:32:55,810 --> 00:33:02,060
was really based on the 3.13 or 3.14

00:32:59,510 --> 00:33:04,690
branch whatever it is that some that's

00:33:02,060 --> 00:33:09,040
going to have long-term support from the

00:33:04,690 --> 00:33:09,040
Geo sec developers

00:33:14,100 --> 00:33:18,460
but I haven't seen any sign that that's

00:33:16,840 --> 00:33:23,970
actually happening

00:33:18,460 --> 00:33:28,270
I didn't just in Australia uploading to

00:33:23,970 --> 00:33:30,490
that tune you yet it's not going to come

00:33:28,270 --> 00:33:33,120
from the colonel team because we've kind

00:33:30,490 --> 00:33:33,120
of got our hands full

00:33:42,580 --> 00:33:48,029
if you move hard I can't see you

00:33:45,820 --> 00:33:48,029
otherwise

00:33:50,700 --> 00:33:56,730
hi thanks for all your work on the

00:33:52,950 --> 00:33:57,510
colonel team first maybe just to make

00:33:56,730 --> 00:34:00,030
sure I understood the answer to the

00:33:57,510 --> 00:34:01,950
previous question I think what you and I

00:34:00,030 --> 00:34:04,200
think your answer was if someone wants

00:34:01,950 --> 00:34:06,590
to upload links to our sack then that's

00:34:04,200 --> 00:34:10,380
plausible is that basically the summary

00:34:06,590 --> 00:34:12,660
yes I mean the usual objection to that

00:34:10,380 --> 00:34:14,130
would be it's more or less duplicating

00:34:12,660 --> 00:34:15,510
code and we don't and the security team

00:34:14,130 --> 00:34:20,010
doesn't like they're being duplicate

00:34:15,510 --> 00:34:22,800
code in the in the archive however in

00:34:20,010 --> 00:34:28,100
this case I think there was a tendency

00:34:22,800 --> 00:34:30,440
if yes it would be okay in this case

00:34:28,100 --> 00:34:34,320
because both of them are fairly well

00:34:30,440 --> 00:34:36,210
supporters or something like that okay

00:34:34,320 --> 00:34:39,780
and then my other question is about

00:34:36,210 --> 00:34:41,340
backboards kernels I use backports

00:34:39,780 --> 00:34:43,410
kernels but I kind of just install them

00:34:41,340 --> 00:34:45,630
willy-nilly whenever is there a schedule

00:34:43,410 --> 00:34:48,630
or a plan or I'm glad they happen but

00:34:45,630 --> 00:34:51,030
when and why do they happen there I hope

00:34:48,630 --> 00:34:54,810
kept more or less up a date with testing

00:34:51,030 --> 00:34:56,780
I don't always remember to upload as

00:34:54,810 --> 00:35:00,870
soon as the testing propagation happens

00:34:56,780 --> 00:35:04,700
but I've been being I hope I'm doing the

00:35:00,870 --> 00:35:04,700
uploads in a fairly timely fashion

00:35:07,930 --> 00:35:10,260
next

00:35:11,870 --> 00:35:17,180
any further questions before that goes

00:35:14,990 --> 00:35:19,100
for wheezy backports I haven't haven't

00:35:17,180 --> 00:35:24,530
done any uploads for squeeze back ports

00:35:19,100 --> 00:35:31,550
for some time now and possibly I I made

00:35:24,530 --> 00:35:34,570
you that to support squeeze LTS but I

00:35:31,550 --> 00:35:34,570
haven't got around to it yet

00:35:43,690 --> 00:35:49,000
sorry if this is a question from an from

00:35:45,730 --> 00:35:50,770
an outsider but oh sorry from an

00:35:49,000 --> 00:35:54,040
outsider view is there any qualification

00:35:50,770 --> 00:35:55,359
process or testing done on the Colonel's

00:35:54,040 --> 00:35:58,810
as they are going to either back ports

00:35:55,359 --> 00:36:02,800
are testing or unstable with them not

00:35:58,810 --> 00:36:06,450
really okay for testing propagation it's

00:36:02,800 --> 00:36:10,650
it's the usual the usual rule which is

00:36:06,450 --> 00:36:12,819
if there are new release critical bugs

00:36:10,650 --> 00:36:14,500
raised against version in an unstable

00:36:12,819 --> 00:36:18,819
that will block propagation to testing

00:36:14,500 --> 00:36:21,790
and hopefully if it if it's in if it's

00:36:18,819 --> 00:36:23,170
okay interesting well anything that goes

00:36:21,790 --> 00:36:26,440
in the back ports was previously in

00:36:23,170 --> 00:36:29,380
testing so barring compiler bugs or

00:36:26,440 --> 00:36:32,710
incompatibilities then then it should be

00:36:29,380 --> 00:36:35,680
alright in backwards as well it's not

00:36:32,710 --> 00:36:37,270
really very satisfactory but that's we

00:36:35,680 --> 00:36:40,810
had a hardware qualification lab that's

00:36:37,270 --> 00:36:42,579
the best we can do at the moment I was

00:36:40,810 --> 00:36:45,490
asking this in particular because the M

00:36:42,579 --> 00:36:46,839
the it a lot of Google compute engines

00:36:45,490 --> 00:36:48,220
customers are running the back ports

00:36:46,839 --> 00:36:52,960
kernel in fact the vast majority are

00:36:48,220 --> 00:36:58,480
right and around the upgrade from 314 so

00:36:52,960 --> 00:37:00,900
a lot of the customers were sorry a lot

00:36:58,480 --> 00:37:00,900
of the customers

00:37:04,540 --> 00:37:07,910
so a lot of Google compute engines

00:37:06,619 --> 00:37:09,619
customers but the vast majority are

00:37:07,910 --> 00:37:13,490
running the backwards kernel okay around

00:37:09,619 --> 00:37:15,650
the upgrade from 313 to 314 customers

00:37:13,490 --> 00:37:18,230
would get the kernel as as it comes out

00:37:15,650 --> 00:37:20,839
but we had a very large number of bugs

00:37:18,230 --> 00:37:22,190
start appearing so I was wondering if

00:37:20,839 --> 00:37:23,480
there is any plans for a testing process

00:37:22,190 --> 00:37:33,200
or a qualification process around

00:37:23,480 --> 00:37:35,839
kernels being put into backwards if you

00:37:33,200 --> 00:37:39,470
wanna if you want to you want help with

00:37:35,839 --> 00:37:41,570
that you know if you want to provide

00:37:39,470 --> 00:37:43,280
some of your engineering time to help

00:37:41,570 --> 00:37:45,589
with that that would be very much

00:37:43,280 --> 00:37:53,510
appreciated because no one wants to

00:37:45,589 --> 00:37:55,040
apply broken packages but as it is known

00:37:53,510 --> 00:37:58,089
on the kernel team has a lot of time to

00:37:55,040 --> 00:37:58,089
spend on this unfortunately

00:38:11,280 --> 00:38:16,500
right looks like we're done here so

00:38:13,820 --> 00:38:21,500
thank you all very much for coming out

00:38:16,500 --> 00:38:21,500

YouTube URL: https://www.youtube.com/watch?v=UPyMHBLroBI


