Title: Debsources: powering sources.debian.net
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Stefano Zacchiroli

At: DebConf14
https://debconf14.debconf.org/
Room: Room 328
Scheduled start: 2014-08-26 13:30:00
Captions: 
	00:00:02,550 --> 00:00:08,860
[Music]

00:00:06,830 --> 00:00:08,860
Oh

00:00:25,780 --> 00:00:28,920
[Music]

00:00:34,350 --> 00:00:37,469
[Music]

00:00:44,949 --> 00:00:47,949
stop

00:00:50,010 --> 00:00:53,130
[Music]

00:01:26,600 --> 00:01:29,660
[Music]

00:01:34,050 --> 00:01:40,020
why should the music code search the

00:01:36,250 --> 00:01:40,020
search for laundry closet businesses

00:02:34,670 --> 00:02:37,840
[Music]

00:02:44,250 --> 00:02:52,920
good start so hi everyone

00:02:50,610 --> 00:02:55,170
don't worry there will be no free

00:02:52,920 --> 00:02:57,030
software politics in this talk and with

00:02:55,170 --> 00:02:59,520
that I'm done for the day opening talk

00:02:57,030 --> 00:03:02,100
should be a pretty standard technical

00:02:59,520 --> 00:03:03,210
talk on a tool and the peace of the

00:03:02,100 --> 00:03:05,640
depending for structure I've been

00:03:03,210 --> 00:03:07,830
working on which is called that sources

00:03:05,640 --> 00:03:10,680
for this software that implements it and

00:03:07,830 --> 00:03:13,350
which has it main instance at sources of

00:03:10,680 --> 00:03:15,390
Debian dotnet so if you've never used it

00:03:13,350 --> 00:03:17,610
or if you want to check the stuff I'm

00:03:15,390 --> 00:03:19,230
saying live doing the talk I encourage

00:03:17,610 --> 00:03:21,660
you to just go to sources to be a net

00:03:19,230 --> 00:03:23,670
and see the stuff I'm talking about

00:03:21,660 --> 00:03:27,510
so this talk I will just give you

00:03:23,670 --> 00:03:30,480
another view of why and why I've created

00:03:27,510 --> 00:03:32,820
Web Services and why it exists a little

00:03:30,480 --> 00:03:35,730
bit of feature so kind of cheat sheet of

00:03:32,820 --> 00:03:37,020
how to use it some technical details for

00:03:35,730 --> 00:03:38,820
the people that might be interested in

00:03:37,020 --> 00:03:40,770
acting and helping me maintaining the

00:03:38,820 --> 00:03:44,600
tool and all the map of the stuff that

00:03:40,770 --> 00:03:47,880
is upcoming with it so with the overview

00:03:44,600 --> 00:03:50,070
so the in a nutshell that sauce is

00:03:47,880 --> 00:03:52,769
essentially a web app that allows you to

00:03:50,070 --> 00:03:55,050
browse to browse all Debian source code

00:03:52,769 --> 00:03:57,030
source code via the web so essentially

00:03:55,050 --> 00:03:59,340
is a source code a lighter in which you

00:03:57,030 --> 00:04:01,290
can pinpoint every single file contained

00:03:59,340 --> 00:04:04,170
in a debian package and see what's in it

00:04:01,290 --> 00:04:06,390
okay so the main instance is here the

00:04:04,170 --> 00:04:09,060
idea is pretty simple but it seems to be

00:04:06,390 --> 00:04:11,160
very useful okay I think it's useful for

00:04:09,060 --> 00:04:13,530
us Debian people to die is just like

00:04:11,160 --> 00:04:15,989
when it shot about specific bags and

00:04:13,530 --> 00:04:18,180
specific lines of source code file in a

00:04:15,989 --> 00:04:20,609
package it's nice just by URL you can

00:04:18,180 --> 00:04:22,200
point to when discussing it and it's

00:04:20,609 --> 00:04:23,880
easier than saying yeah you know you

00:04:22,200 --> 00:04:25,710
need to just download this package open

00:04:23,880 --> 00:04:27,419
this file and so on and so forth and I

00:04:25,710 --> 00:04:28,890
think it's also useful for the powder

00:04:27,419 --> 00:04:30,419
free software ecosystem to be able to

00:04:28,890 --> 00:04:31,800
check what's actually being built in

00:04:30,419 --> 00:04:35,520
Debian so what's in there what are the

00:04:31,800 --> 00:04:37,140
Olivia people going it poses some system

00:04:35,520 --> 00:04:39,330
level challenge to get it right because

00:04:37,140 --> 00:04:42,120
it's a fairly big amount of data and

00:04:39,330 --> 00:04:44,580
enter into that in a minute and in my

00:04:42,120 --> 00:04:47,400
opinion is possibly the highest

00:04:44,580 --> 00:04:49,410
abstraction layer layer layer at which

00:04:47,400 --> 00:04:51,870
we can show the source code containing

00:04:49,410 --> 00:04:53,520
data because if you use something else

00:04:51,870 --> 00:04:54,840
that we have a developer used

00:04:53,520 --> 00:04:56,819
packages for instance if you look into

00:04:54,840 --> 00:04:59,819
version control system it's fairly

00:04:56,819 --> 00:05:01,620
difficult to find out a common workflow

00:04:59,819 --> 00:05:02,909
or even a common brand structure right

00:05:01,620 --> 00:05:04,770
is something that we've been discussing

00:05:02,909 --> 00:05:06,509
with very same days and debian develop

00:05:04,770 --> 00:05:08,669
so it's really difficult to offer a

00:05:06,509 --> 00:05:10,289
common view of our different source

00:05:08,669 --> 00:05:12,870
packages okay so I think this is the

00:05:10,289 --> 00:05:14,639
best we can do right now to expose the

00:05:12,870 --> 00:05:19,110
debian source code to to people around

00:05:14,639 --> 00:05:20,430
the world before going further just a

00:05:19,110 --> 00:05:21,659
few acknowledgements so I need to thank

00:05:20,430 --> 00:05:24,060
my employer

00:05:21,659 --> 00:05:27,030
Uriel that essentially had sponsored the

00:05:24,060 --> 00:05:29,220
initial development of the what UI that

00:05:27,030 --> 00:05:31,139
has been done as an internship by magic

00:05:29,220 --> 00:05:32,460
and I and is also sponsoring the artwork

00:05:31,139 --> 00:05:34,770
and the hosting for the current

00:05:32,460 --> 00:05:37,400
infrastructure and is also quite happy

00:05:34,770 --> 00:05:40,710
in having me working on this in my

00:05:37,400 --> 00:05:41,909
famous spare time there are other

00:05:40,710 --> 00:05:43,620
contributors that you will sign the

00:05:41,909 --> 00:05:45,180
contributor file and I hope that by the

00:05:43,620 --> 00:05:47,219
end of this talk you will be interested

00:05:45,180 --> 00:05:50,400
in adding your name to the list to this

00:05:47,219 --> 00:05:52,379
list of contributors so research

00:05:50,400 --> 00:05:54,690
intubation that was the initial reason

00:05:52,379 --> 00:05:56,969
why I developed that sources essentially

00:05:54,690 --> 00:05:59,099
what we wanted to do is try to do some

00:05:56,969 --> 00:06:00,900
static analysis on all the packages

00:05:59,099 --> 00:06:02,520
contained in a daemon archive so we

00:06:00,900 --> 00:06:04,800
wanted to see what happens what are the

00:06:02,520 --> 00:06:07,289
trends in bugs that can be found by

00:06:04,800 --> 00:06:10,050
static analysis tool ok and now we can

00:06:07,289 --> 00:06:11,190
allow how we can analyze those so there

00:06:10,050 --> 00:06:13,440
are some tools that we are developing

00:06:11,190 --> 00:06:15,150
ourselves like coccynelle that in my

00:06:13,440 --> 00:06:17,159
very heard of it's essentially a sort of

00:06:15,150 --> 00:06:18,659
grab and said that understand the

00:06:17,159 --> 00:06:20,310
semantics of the chillin with the c

00:06:18,659 --> 00:06:22,889
language and can be used to establish

00:06:20,310 --> 00:06:25,590
bugs pattern and actually even generate

00:06:22,889 --> 00:06:27,360
automatically patches for specific bugs

00:06:25,590 --> 00:06:29,190
it's being used by the linux kernel and

00:06:27,360 --> 00:06:32,130
it's very cool stuff there are other

00:06:29,190 --> 00:06:33,719
tools ice can build by the LLVM tool

00:06:32,130 --> 00:06:36,830
train and are a lot of static analysis

00:06:33,719 --> 00:06:39,300
tool you can run on a huge load of

00:06:36,830 --> 00:06:40,349
available source code it should be

00:06:39,300 --> 00:06:41,669
something that keep up with Debian

00:06:40,349 --> 00:06:43,770
uploads so as soon as there is a new

00:06:41,669 --> 00:06:46,229
upload you want to rerun all the checks

00:06:43,770 --> 00:06:47,969
it should be integrated well in all the

00:06:46,229 --> 00:06:50,490
Debian infrastructure and ideally you

00:06:47,969 --> 00:06:52,560
should have some layer of community

00:06:50,490 --> 00:06:54,360
review so you know when you're on static

00:06:52,560 --> 00:06:56,400
analysis tool you will find plenty of

00:06:54,360 --> 00:06:59,090
false positives false negatives and

00:06:56,400 --> 00:07:01,800
before submitting bugs automatically to

00:06:59,090 --> 00:07:04,110
to the people that maintain its software

00:07:01,800 --> 00:07:05,430
you should really do that because it

00:07:04,110 --> 00:07:06,280
won't be able to be about the false

00:07:05,430 --> 00:07:07,630
positive and

00:07:06,280 --> 00:07:09,130
essentially what you want to do is

00:07:07,630 --> 00:07:10,720
essentially add a community of people

00:07:09,130 --> 00:07:11,410
that goes through their issues and says

00:07:10,720 --> 00:07:13,510
hmm

00:07:11,410 --> 00:07:15,790
at least this one looks like a real

00:07:13,510 --> 00:07:18,250
issue let's submit it and no this is not

00:07:15,790 --> 00:07:20,169
a real issue so let's ignore it and do

00:07:18,250 --> 00:07:22,480
something to avoid it keeps on popping

00:07:20,169 --> 00:07:26,139
up in the future so this was our initial

00:07:22,480 --> 00:07:28,360
motivation and to do that what we want

00:07:26,139 --> 00:07:30,669
to do is use a not very implement a

00:07:28,360 --> 00:07:32,200
thing that would do all of this but

00:07:30,669 --> 00:07:34,360
actually have a some sort of unix-like

00:07:32,200 --> 00:07:36,730
architecture with small parts that do a

00:07:34,360 --> 00:07:38,830
single thing and do it well so what we

00:07:36,730 --> 00:07:40,690
wanted to have is a network essentially

00:07:38,830 --> 00:07:42,070
our build or a static analyzed network

00:07:40,690 --> 00:07:45,010
that will keep up with Debian uploads

00:07:42,070 --> 00:07:46,960
web apps to browse the results okay and

00:07:45,010 --> 00:07:48,970
the web apps to browse specific source

00:07:46,960 --> 00:07:51,250
code and pointing to the lines which are

00:07:48,970 --> 00:07:53,800
affected by the issues so what ended up

00:07:51,250 --> 00:07:55,600
what we ended up having is actually that

00:07:53,800 --> 00:07:57,550
source is just the last part before this

00:07:55,600 --> 00:07:59,260
so in the essentially only the Kurds the

00:07:57,550 --> 00:08:01,540
Qods force browser with the ability to

00:07:59,260 --> 00:08:04,240
add specific messages to specific line

00:08:01,540 --> 00:08:06,669
and then there are other stuff this one

00:08:04,240 --> 00:08:08,830
developed by the matures an intership

00:08:06,669 --> 00:08:11,680
which essentially are about to show the

00:08:08,830 --> 00:08:13,870
result of static analysis tools based on

00:08:11,680 --> 00:08:15,220
a format called firewalls and then there

00:08:13,870 --> 00:08:18,669
is the bill which has been developed by

00:08:15,220 --> 00:08:20,320
Paul and other people to actually do the

00:08:18,669 --> 00:08:23,169
real network that keep up with the

00:08:20,320 --> 00:08:25,120
builds I guess I'm at fault for all the

00:08:23,169 --> 00:08:28,060
trainings so if you don't like them feel

00:08:25,120 --> 00:08:29,530
free to blame me and but it is a kind of

00:08:28,060 --> 00:08:32,200
architecture that we have ended up

00:08:29,530 --> 00:08:36,039
adding so the sauce is just like the

00:08:32,200 --> 00:08:38,740
last part so what you can do with that

00:08:36,039 --> 00:08:41,530
sources so this is the main instance you

00:08:38,740 --> 00:08:45,040
might have used already okay it's

00:08:41,530 --> 00:08:46,839
essentially aftering u-values way to

00:08:45,040 --> 00:08:49,060
navigate through all the source code

00:08:46,839 --> 00:08:51,490
which is there so feel free to play with

00:08:49,060 --> 00:08:53,470
it during doing this talk the main thing

00:08:51,490 --> 00:08:54,850
you have is essentially package browsing

00:08:53,470 --> 00:08:57,010
so you have the package browsing by

00:08:54,850 --> 00:08:58,480
letter prefix you have the usual stuff

00:08:57,010 --> 00:09:00,790
when you have ended up selecting a

00:08:58,480 --> 00:09:03,100
source package so the name by default al

00:09:00,790 --> 00:09:05,020
are all source packages so if you're

00:09:03,100 --> 00:09:07,270
looking for a binary packages and you

00:09:05,020 --> 00:09:10,410
don't find it that's normal we need to

00:09:07,270 --> 00:09:12,670
use the the suspected name or or

00:09:10,410 --> 00:09:14,770
alternatively submit a patch for doing

00:09:12,670 --> 00:09:16,209
automatically the resurrection ok when

00:09:14,770 --> 00:09:18,430
you have found the source package you're

00:09:16,209 --> 00:09:19,400
interested in you choose a version among

00:09:18,430 --> 00:09:22,700
all the versions of ale

00:09:19,400 --> 00:09:25,610
look what's in when URI with a specific

00:09:22,700 --> 00:09:27,140
version of a package what you find is

00:09:25,610 --> 00:09:30,440
essentially the content of the source

00:09:27,140 --> 00:09:34,130
package as obtained with the pkg source

00:09:30,440 --> 00:09:36,260
source - X so that means there are some

00:09:34,130 --> 00:09:38,870
there is some lack of uniformity there

00:09:36,260 --> 00:09:40,760
for instance patches might be applied or

00:09:38,870 --> 00:09:43,280
not depending on the patch system you

00:09:40,760 --> 00:09:46,550
are using and with recent packages that

00:09:43,280 --> 00:09:49,220
uses the 3.0 format so this was format

00:09:46,550 --> 00:09:51,140
what will end up having it's a set of

00:09:49,220 --> 00:09:53,420
source packages packages already applied

00:09:51,140 --> 00:09:55,940
if you're looking at kind of old

00:09:53,420 --> 00:09:58,400
packages or other packages that apply

00:09:55,940 --> 00:10:00,680
patches at Build time you will find

00:09:58,400 --> 00:10:02,630
patches which are not applied so this is

00:10:00,680 --> 00:10:04,160
a kind of uniformity that was difficult

00:10:02,630 --> 00:10:07,700
to get around

00:10:04,160 --> 00:10:09,740
so it's exposed to you as it is what you

00:10:07,700 --> 00:10:12,860
have is in some HTML syntax highlighting

00:10:09,740 --> 00:10:14,450
so depending on the source file you are

00:10:12,860 --> 00:10:16,070
looking at it will recognize the

00:10:14,450 --> 00:10:17,630
language and will try to do some syntax

00:10:16,070 --> 00:10:19,700
highlighting in your browser so it's

00:10:17,630 --> 00:10:21,260
client side everything is deployed is

00:10:19,700 --> 00:10:23,390
delivered to your browser and yet there

00:10:21,260 --> 00:10:25,370
is a JavaScript toolkit which will do

00:10:23,390 --> 00:10:26,900
the syntax highlighting in your in your

00:10:25,370 --> 00:10:28,670
browser there is some file type

00:10:26,900 --> 00:10:30,410
detection there is them both the

00:10:28,670 --> 00:10:32,540
extension of the file and the shipping

00:10:30,410 --> 00:10:34,760
lines if it exists meaning that we will

00:10:32,540 --> 00:10:37,310
recognize Perl files even if they need

00:10:34,760 --> 00:10:39,470
the name of the files not of PL and this

00:10:37,310 --> 00:10:42,080
is thanks to the Uni people Ginny's an

00:10:39,470 --> 00:10:43,670
ID with which they've shared with us

00:10:42,080 --> 00:10:47,500
their roles we have a doctor didn't they

00:10:43,670 --> 00:10:50,690
just work for the most part very well

00:10:47,500 --> 00:10:52,370
what you can do other than that well

00:10:50,690 --> 00:10:54,200
various kind of searches you have

00:10:52,370 --> 00:10:55,850
package name searches with some

00:10:54,200 --> 00:10:57,800
substring matching which is pretty cool

00:10:55,850 --> 00:11:02,210
if you don't remember the exact package

00:10:57,800 --> 00:11:04,310
main we have all the sha-256 of all the

00:11:02,210 --> 00:11:07,250
source code files with index so if you

00:11:04,310 --> 00:11:09,230
know the checksum of the same file you

00:11:07,250 --> 00:11:11,300
want to look it up you can do that and

00:11:09,230 --> 00:11:13,880
this is also used to talk about

00:11:11,300 --> 00:11:17,150
duplicate dashing so whenever you are on

00:11:13,880 --> 00:11:18,650
a single file with in-depth sources it

00:11:17,150 --> 00:11:21,080
will tell you the number of duplicates

00:11:18,650 --> 00:11:23,620
that exist for that file in the code

00:11:21,080 --> 00:11:27,920
base of the sausage itself and finally

00:11:23,620 --> 00:11:30,170
we run C tags on every file we have in

00:11:27,920 --> 00:11:31,650
the database so socially you can do

00:11:30,170 --> 00:11:33,779
searches like tell

00:11:31,650 --> 00:11:36,000
which file contains the function printf

00:11:33,779 --> 00:11:37,529
that would be a very bad query because

00:11:36,000 --> 00:11:39,660
you will end up having a lot of file

00:11:37,529 --> 00:11:41,610
contain well no printers not that many

00:11:39,660 --> 00:11:43,980
but print you will find many many files

00:11:41,610 --> 00:11:46,700
defining a function called print so will

00:11:43,980 --> 00:11:48,900
end up having a lot of lot of packages

00:11:46,700 --> 00:11:51,420
so this is the kind of searches we have

00:11:48,900 --> 00:11:53,339
integrated in-house and then there is a

00:11:51,420 --> 00:11:55,410
very cool integration with a service

00:11:53,339 --> 00:11:57,839
which is not provided by us which is

00:11:55,410 --> 00:11:59,450
called code search Debian net which is

00:11:57,839 --> 00:12:01,560
maintained by Michael stapler and

00:11:59,450 --> 00:12:04,380
essentially it what is doing is

00:12:01,560 --> 00:12:06,720
full-text searching of source code so it

00:12:04,380 --> 00:12:08,760
does some full-text indexing of huge

00:12:06,720 --> 00:12:10,620
amounts of source code and it allows you

00:12:08,760 --> 00:12:12,420
to search for it it's a tool we have

00:12:10,620 --> 00:12:15,360
been using to find our many packages in

00:12:12,420 --> 00:12:17,730
Debian contain you must do no evil and

00:12:15,360 --> 00:12:20,070
the file and number of our see bugs

00:12:17,730 --> 00:12:22,589
right so there is a kind of a query here

00:12:20,070 --> 00:12:24,750
because the event code search itself is

00:12:22,589 --> 00:12:27,210
not capable of indexing all the source

00:12:24,750 --> 00:12:30,000
code we have in in depth sources so it's

00:12:27,210 --> 00:12:32,760
only indexing unstable essentially and

00:12:30,000 --> 00:12:35,190
it's updated I think once per week so

00:12:32,760 --> 00:12:37,740
there is no guarantee that everything

00:12:35,190 --> 00:12:39,720
which is in code store in that sources

00:12:37,740 --> 00:12:41,550
will be fine using the event code search

00:12:39,720 --> 00:12:42,870
but it's kind of cool and integration is

00:12:41,550 --> 00:12:45,240
nice as well so essentially you have a

00:12:42,870 --> 00:12:47,790
search form for source code on sources

00:12:45,240 --> 00:12:50,700
Debian map which will use code search

00:12:47,790 --> 00:12:52,770
Debian net to do the search and the the

00:12:50,700 --> 00:12:55,860
result you will get from concerns that

00:12:52,770 --> 00:12:57,839
your net will point back to that sources

00:12:55,860 --> 00:13:02,760
to show you the results in the usual

00:12:57,839 --> 00:13:04,080
interface given that that sources was

00:13:02,760 --> 00:13:06,839
meant to be used in collaboration with

00:13:04,080 --> 00:13:08,880
other tools there is some sort of API to

00:13:06,839 --> 00:13:11,310
work with others so a first kind of API

00:13:08,880 --> 00:13:13,560
is a neural a URL mechanism which is

00:13:11,310 --> 00:13:16,680
granted to be predictable so essentially

00:13:13,560 --> 00:13:19,110
the URL here we always produce it this

00:13:16,680 --> 00:13:21,570
way so you can point to a specific file

00:13:19,110 --> 00:13:23,339
in a specific version of a specific

00:13:21,570 --> 00:13:25,950
package and this is the URL scheme that

00:13:23,339 --> 00:13:30,330
we were using now you can find a

00:13:25,950 --> 00:13:31,980
specific line with the sharp l 37 you

00:13:30,330 --> 00:13:34,650
can a life line omg's

00:13:31,980 --> 00:13:36,209
so you can understand it will point a

00:13:34,650 --> 00:13:38,010
specific line and add some kind of

00:13:36,209 --> 00:13:39,780
highlighting to individual lines if you

00:13:38,010 --> 00:13:41,880
want to talk about them you can and

00:13:39,780 --> 00:13:42,680
pop-up messages so essentially you can

00:13:41,880 --> 00:13:46,430
add you can

00:13:42,680 --> 00:13:48,470
the parameter here saying message 22 Cal

00:13:46,430 --> 00:13:51,110
say blah blah blah and we will add a

00:13:48,470 --> 00:13:53,899
pop-up messages in your browser at the

00:13:51,110 --> 00:13:56,420
the specific line okay this is what we

00:13:53,899 --> 00:13:58,520
meant to you we mean to use for mess for

00:13:56,420 --> 00:14:00,350
errors so there is static analysis tool

00:13:58,520 --> 00:14:02,420
that will return some specific errors

00:14:00,350 --> 00:14:04,399
associated to a line and the idea is

00:14:02,420 --> 00:14:06,140
that to point into the source if they

00:14:04,399 --> 00:14:09,950
will use something like this okay and

00:14:06,140 --> 00:14:11,660
there is also a specific URL for iframe

00:14:09,950 --> 00:14:13,820
embedding so if you are developing

00:14:11,660 --> 00:14:16,970
another web application in which you

00:14:13,820 --> 00:14:18,529
want to add some specific source code a

00:14:16,970 --> 00:14:20,510
lightening of some code which isn't that

00:14:18,529 --> 00:14:22,910
yen well there is an URL which I'm not

00:14:20,510 --> 00:14:25,339
showing here not sure why but in which

00:14:22,910 --> 00:14:27,020
you can just know that using that URL

00:14:25,339 --> 00:14:29,149
will give you the content of an iframe

00:14:27,020 --> 00:14:31,610
you can embed in your application

00:14:29,149 --> 00:14:35,390
everything is the Quentin here so I want

00:14:31,610 --> 00:14:37,279
to go into more detail there is a JSON

00:14:35,390 --> 00:14:39,950
API so essentially everything you can do

00:14:37,279 --> 00:14:41,839
as a user while browsing you can do also

00:14:39,950 --> 00:14:43,959
with the JSON API so you can check which

00:14:41,839 --> 00:14:46,310
versions of a package are available and

00:14:43,959 --> 00:14:47,540
retrieve the source code of the file and

00:14:46,310 --> 00:14:49,430
so on and so forth so if you need

00:14:47,540 --> 00:14:51,709
integral to integrate that in something

00:14:49,430 --> 00:14:54,050
which is not a web thingy you can you

00:14:51,709 --> 00:14:56,270
just raise an API to do the same this

00:14:54,050 --> 00:15:00,730
two is documented at the URL which is in

00:14:56,270 --> 00:15:03,709
this slide in terms of coverage

00:15:00,730 --> 00:15:05,540
essentially we are web two parts we have

00:15:03,709 --> 00:15:08,060
a live archive so a part which is

00:15:05,540 --> 00:15:10,430
keeping up with what is live in dalian

00:15:08,060 --> 00:15:13,339
meaning stuff which is shipped by the

00:15:10,430 --> 00:15:15,290
usual mirror network and what we cover

00:15:13,339 --> 00:15:17,270
right now is essentially everything on

00:15:15,290 --> 00:15:19,550
the official network mirror network okay

00:15:17,270 --> 00:15:22,520
that means you have all stiff everything

00:15:19,550 --> 00:15:24,589
from an old stable to experimental given

00:15:22,520 --> 00:15:26,420
that in this in the last part in the

00:15:24,589 --> 00:15:28,610
last few years we have migrated stamp

00:15:26,420 --> 00:15:31,160
some stuff in and out the main archive

00:15:28,610 --> 00:15:33,410
there are some weird glitches for

00:15:31,160 --> 00:15:35,510
instance we the backwards is in because

00:15:33,410 --> 00:15:37,190
it's the first version of the back pot

00:15:35,510 --> 00:15:39,649
Sakai which is shipped by the main

00:15:37,190 --> 00:15:41,360
mirror network but squeezed backwards is

00:15:39,649 --> 00:15:44,660
not there because it was on a separate

00:15:41,360 --> 00:15:46,520
archive so still we have a single mirror

00:15:44,660 --> 00:15:48,410
network for now so you will not find

00:15:46,520 --> 00:15:50,240
security in there and you will not find

00:15:48,410 --> 00:15:52,370
any derivative with something on the

00:15:50,240 --> 00:15:55,279
roadmap to be fixed

00:15:52,370 --> 00:15:58,580
there is garbage collection so we cannot

00:15:55,279 --> 00:16:01,279
afford for now but my change zone to

00:15:58,580 --> 00:16:03,800
keep all versions of all packages that

00:16:01,279 --> 00:16:05,779
ever existed in Debian so we're not as

00:16:03,800 --> 00:16:09,170
complete as a snapshot idea nor could be

00:16:05,779 --> 00:16:10,010
and what happens is that when a package

00:16:09,170 --> 00:16:12,380
expire

00:16:10,010 --> 00:16:15,710
meaning when effect disappears from the

00:16:12,380 --> 00:16:17,660
Debian mirror we wait for 14 days to

00:16:15,710 --> 00:16:19,960
avoid creating stale your urls

00:16:17,660 --> 00:16:23,839
immediately and then we remove it from

00:16:19,960 --> 00:16:25,430
sources dagonet okay so the URL which

00:16:23,839 --> 00:16:27,680
I've shown before I'm not granted to be

00:16:25,430 --> 00:16:29,720
stable or ganda to exist forever and

00:16:27,680 --> 00:16:31,250
when some packet is appear from the cave

00:16:29,720 --> 00:16:33,350
at some point it will disappear from

00:16:31,250 --> 00:16:35,870
Susie's dependent as well hopefully this

00:16:33,350 --> 00:16:37,190
delay will allow you to catch up with

00:16:35,870 --> 00:16:39,710
the kind of indexing you're doing

00:16:37,190 --> 00:16:42,080
yourself of the dip in archive the dates

00:16:39,710 --> 00:16:45,320
are push so they are coming from a Tier

00:16:42,080 --> 00:16:46,850
one Libyan Miro that means that the lag

00:16:45,320 --> 00:16:49,040
is minimized so as soon as there is an

00:16:46,850 --> 00:16:52,880
arc and I pushed an update in Debian

00:16:49,040 --> 00:16:55,339
time it will inform that sources usual

00:16:52,880 --> 00:16:56,959
update trance takes about 30 minutes ok

00:16:55,339 --> 00:16:59,150
these are the good ones the bad ones

00:16:56,959 --> 00:17:01,850
when we have to index the Linux kernel

00:16:59,150 --> 00:17:05,860
chromium libreoffice and black can take

00:17:01,850 --> 00:17:08,660
up up to a few hours okay so usually

00:17:05,860 --> 00:17:12,860
usually we are well able to complete

00:17:08,660 --> 00:17:14,630
before the next bush run so if it was

00:17:12,860 --> 00:17:17,270
for the live archive then there is the

00:17:14,630 --> 00:17:20,600
historical archive so what I've done I

00:17:17,270 --> 00:17:22,130
think last summer or maybe was the yeah

00:17:20,600 --> 00:17:25,339
it was last summer was to actually

00:17:22,130 --> 00:17:27,679
inject work on injecting all the stoical

00:17:25,339 --> 00:17:30,710
releases of the Devine archive so I went

00:17:27,679 --> 00:17:32,570
to archive the Debian dot work that in

00:17:30,710 --> 00:17:35,450
case you are not familiar is with is a

00:17:32,570 --> 00:17:37,490
kind of mirror that keeps all the old

00:17:35,450 --> 00:17:39,530
Debian releases which are no longer in a

00:17:37,490 --> 00:17:42,650
different mirror and injected all of

00:17:39,530 --> 00:17:45,650
them in the in depth sources so that's a

00:17:42,650 --> 00:17:48,350
kind of toy for the statistic geek so if

00:17:45,650 --> 00:17:50,150
people want to do stuff like monitoring

00:17:48,350 --> 00:17:52,940
what is the most popular programming

00:17:50,150 --> 00:17:55,400
language in Debian since the end of the

00:17:52,940 --> 00:17:58,760
90s up to today you can do those kind of

00:17:55,400 --> 00:18:00,590
those kind of investigation so for

00:17:58,760 --> 00:18:04,700
instance I'm not sure what to show you

00:18:00,590 --> 00:18:07,340
dude easily the number of slog of c c++

00:18:04,700 --> 00:18:09,710
java xml shell and python which are the

00:18:07,340 --> 00:18:11,269
top languages over time and here you

00:18:09,710 --> 00:18:13,639
should see how they evolve more

00:18:11,269 --> 00:18:16,220
interesting in the very interesting way

00:18:13,639 --> 00:18:18,409
is the relative distribution of

00:18:16,220 --> 00:18:20,210
languages in debian over time so here

00:18:18,409 --> 00:18:22,879
you see that in the beginning we had C

00:18:20,210 --> 00:18:24,769
which was 70% of their kyv then it

00:18:22,879 --> 00:18:28,279
declined and then it might be going up

00:18:24,769 --> 00:18:30,799
again now the language which is here is

00:18:28,279 --> 00:18:32,509
a pre c++ which kept on great increasing

00:18:30,799 --> 00:18:34,340
and you don't see much here because

00:18:32,509 --> 00:18:36,799
maybe it should've load some should have

00:18:34,340 --> 00:18:39,200
used some log scale my probably that is

00:18:36,799 --> 00:18:41,749
available you can be checked for it in

00:18:39,200 --> 00:18:46,519
the on the website under stats and it's

00:18:41,749 --> 00:18:48,259
kind of funny to play with adoption so

00:18:46,519 --> 00:18:50,179
given the original motivation for me to

00:18:48,259 --> 00:18:51,980
do that was some kind of research

00:18:50,179 --> 00:18:53,899
purpose I'm happy to say that it's been

00:18:51,980 --> 00:18:55,730
starting to be adopted in the near

00:18:53,899 --> 00:18:58,220
search words so with mature we published

00:18:55,730 --> 00:19:00,080
a paper in a quite important conference

00:18:58,220 --> 00:19:03,019
about software engineering and

00:19:00,080 --> 00:19:06,049
measurement and the idea is that we are

00:19:03,019 --> 00:19:08,539
selling both that sources the software

00:19:06,049 --> 00:19:13,159
and the data set which we obtained with

00:19:08,539 --> 00:19:14,570
it as a kind of toolkit for people

00:19:13,159 --> 00:19:16,759
interesting in looking the software

00:19:14,570 --> 00:19:18,799
volution of free software over a long

00:19:16,759 --> 00:19:21,139
period of time and to start and do

00:19:18,799 --> 00:19:23,539
everything they would want we extracted

00:19:21,139 --> 00:19:25,940
the extracted date we've also been able

00:19:23,539 --> 00:19:28,070
to essentially replicate and I do one of

00:19:25,940 --> 00:19:30,980
the major studies in the area using this

00:19:28,070 --> 00:19:33,169
data set essentially confirming most of

00:19:30,980 --> 00:19:34,940
my results and finding some some pricks

00:19:33,169 --> 00:19:36,950
in what they did at a time the vapoury

00:19:34,940 --> 00:19:38,330
server is available on my own page in

00:19:36,950 --> 00:19:41,720
case you're interested in looking at

00:19:38,330 --> 00:19:43,070
their adoption in debian well i've

00:19:41,720 --> 00:19:44,779
already talked about the integration

00:19:43,070 --> 00:19:46,820
with code search and i was really happy

00:19:44,779 --> 00:19:50,019
about that it's been already integrated

00:19:46,820 --> 00:19:52,369
in the pts thanks to paul wise and

00:19:50,019 --> 00:19:54,980
essentially you might have noticed that

00:19:52,369 --> 00:19:57,169
in associated planning single package in

00:19:54,980 --> 00:19:59,149
the pts you now have a browse a browser

00:19:57,169 --> 00:20:01,279
source code link which will bring you to

00:19:59,149 --> 00:20:04,340
browsing the source code of that package

00:20:01,279 --> 00:20:06,110
and also search source code form in

00:20:04,340 --> 00:20:09,039
which you can search within that package

00:20:06,110 --> 00:20:11,179
so if you want to find a specific

00:20:09,039 --> 00:20:13,260
Lippitt of code in a specific package

00:20:11,179 --> 00:20:15,510
from the pts we have a way to

00:20:13,260 --> 00:20:17,220
do that of course if you want to

00:20:15,510 --> 00:20:18,630
integrate other Daniel service with it

00:20:17,220 --> 00:20:21,210
you're more than welcome to come and

00:20:18,630 --> 00:20:23,000
talk to me I'd be happy to to help you

00:20:21,210 --> 00:20:25,560
do it

00:20:23,000 --> 00:20:28,620
adoption in general so the reception

00:20:25,560 --> 00:20:30,600
seemed to have been quite good so I'll

00:20:28,620 --> 00:20:31,950
tell WN talk about that there's been

00:20:30,600 --> 00:20:33,540
some blog post on the official Debian

00:20:31,950 --> 00:20:36,300
blog and was really happy about that

00:20:33,540 --> 00:20:40,020
it's kind of increasing so we are at

00:20:36,300 --> 00:20:43,830
about 3,000 requests per day it slowly

00:20:40,020 --> 00:20:45,930
increasing and my feeling is that people

00:20:43,830 --> 00:20:48,480
were generally quite annoying of having

00:20:45,930 --> 00:20:50,850
to do apt-get source or maybe that check

00:20:48,480 --> 00:20:52,590
out before being able to look at a

00:20:50,850 --> 00:20:54,960
single line of code in a specific data

00:20:52,590 --> 00:20:56,010
package so even the idea is essentially

00:20:54,960 --> 00:20:57,750
straightforward

00:20:56,010 --> 00:21:00,180
this service is essentially feeling a

00:20:57,750 --> 00:21:04,130
feeling something we were missing in our

00:21:00,180 --> 00:21:04,130
infrastructure force it's quite a while

00:21:04,250 --> 00:21:08,850
so technical leaders for people might be

00:21:07,170 --> 00:21:14,460
interested in contributing so this is

00:21:08,850 --> 00:21:16,110
the architecture it's I had to do that

00:21:14,460 --> 00:21:18,360
for the paper we submitted so that's why

00:21:16,110 --> 00:21:20,760
I spent some time in making such a big

00:21:18,360 --> 00:21:23,340
picture so essentially as a back-end

00:21:20,760 --> 00:21:24,870
here we use the Debian mirror network

00:21:23,340 --> 00:21:27,450
and archive Debian argh

00:21:24,870 --> 00:21:29,370
we mirror it locally in different ways

00:21:27,450 --> 00:21:31,530
because you can mirror the main archive

00:21:29,370 --> 00:21:33,060
using the mirror but you cannot mirror

00:21:31,530 --> 00:21:35,670
the historico locale using that mirror

00:21:33,060 --> 00:21:38,610
given the type format evolved over time

00:21:35,670 --> 00:21:43,080
so this is plain old or sink so locally

00:21:38,610 --> 00:21:45,750
we have a big local mirror essentially

00:21:43,080 --> 00:21:48,240
we have to kind of trigger that will

00:21:45,750 --> 00:21:50,820
trigger an update run so it's either

00:21:48,240 --> 00:21:54,900
cron if you have not connected your

00:21:50,820 --> 00:21:57,210
resources instance to us to the Debian

00:21:54,900 --> 00:21:59,670
mirror or if you have done that well you

00:21:57,210 --> 00:22:02,490
will essentially have the mirror itself

00:21:59,670 --> 00:22:04,590
which triggers an update okay the

00:22:02,490 --> 00:22:06,120
sources updater then goes on essentially

00:22:04,590 --> 00:22:08,280
what it does first it will update the

00:22:06,120 --> 00:22:09,810
mirrors it will extract the package and

00:22:08,280 --> 00:22:10,560
metadata from them filling a database

00:22:09,810 --> 00:22:13,290
okay

00:22:10,560 --> 00:22:15,360
and then what you will do it will run

00:22:13,290 --> 00:22:18,510
several plugins that are in charge of

00:22:15,360 --> 00:22:19,980
doing all sort of indexing on the source

00:22:18,510 --> 00:22:22,140
code which has just been extracted and

00:22:19,980 --> 00:22:24,480
on top of this we have several

00:22:22,140 --> 00:22:27,030
interfaces the main one we have seen is

00:22:24,480 --> 00:22:30,420
the depth source as well

00:22:27,030 --> 00:22:32,670
which you can peruse via HTML Javascript

00:22:30,420 --> 00:22:34,500
and in addition to that we have a very

00:22:32,670 --> 00:22:36,030
various kind of API of course we have

00:22:34,500 --> 00:22:39,030
the JSON API I have talked to you about

00:22:36,030 --> 00:22:40,559
and in theory we can also open up SQL

00:22:39,030 --> 00:22:42,299
queries right now they are not open up

00:22:40,559 --> 00:22:45,480
to the public because it's too easy

00:22:42,299 --> 00:22:47,130
with SQL to actually does the system but

00:22:45,480 --> 00:22:48,840
if you are interesting in doing specific

00:22:47,130 --> 00:22:51,900
queries over time I can give you access

00:22:48,840 --> 00:22:54,929
to you and we can work something out

00:22:51,900 --> 00:22:59,100
we have various plugins so this is the

00:22:54,929 --> 00:23:00,750
an excerpt of the database schema here

00:22:59,100 --> 00:23:02,760
we can see some numbers if you are a

00:23:00,750 --> 00:23:05,610
geek for those stuff of that stuff we

00:23:02,760 --> 00:23:10,260
have 16 Debian relatives over time we

00:23:05,610 --> 00:23:12,720
have about 30,000 package names 83,000

00:23:10,260 --> 00:23:14,700
source packages which means 83,000

00:23:12,720 --> 00:23:17,820
versions of sources for packages over

00:23:14,700 --> 00:23:20,010
time and these are the plugins that we

00:23:17,820 --> 00:23:22,650
run so on every single packet is

00:23:20,010 --> 00:23:24,000
extracted we run disk usage which is

00:23:22,650 --> 00:23:26,070
essentially a hello world project

00:23:24,000 --> 00:23:28,679
plug-in to show how to treat a plug-in

00:23:26,070 --> 00:23:30,630
we run with log count to count the

00:23:28,679 --> 00:23:33,330
amount of lines of code for every single

00:23:30,630 --> 00:23:34,049
language in in the package we run

00:23:33,330 --> 00:23:35,690
checksum

00:23:34,049 --> 00:23:39,270
this is the plug-in that checked the

00:23:35,690 --> 00:23:41,700
sha-256 of every single source code file

00:23:39,270 --> 00:23:43,260
and we once it adds this number of rows

00:23:41,700 --> 00:23:46,140
we have so the biggest table we have

00:23:43,260 --> 00:23:49,200
this attacks one with about 360 millions

00:23:46,140 --> 00:23:51,410
of rows so for database geeks that might

00:23:49,200 --> 00:23:53,880
not be that big and spoken with the

00:23:51,410 --> 00:23:54,990
postcard maintainer in Debian this is

00:23:53,880 --> 00:23:57,240
the kind of database they use for

00:23:54,990 --> 00:24:03,030
testing but for me that was a pretty

00:23:57,240 --> 00:24:06,390
substantial database this usage in case

00:24:03,030 --> 00:24:09,120
you wonder how much it takes to use this

00:24:06,390 --> 00:24:12,270
to all this kind of infrastructure all

00:24:09,120 --> 00:24:14,340
right now we have six gigs of unpackaged

00:24:12,270 --> 00:24:15,809
sauce there is no deduplication on this

00:24:14,340 --> 00:24:19,950
I will come to that in a minute

00:24:15,809 --> 00:24:22,530
the postgis DB is 100 gigs I think more

00:24:19,950 --> 00:24:24,750
than half of it is actually indexes to

00:24:22,530 --> 00:24:27,240
make quest queries feasible so I think

00:24:24,750 --> 00:24:29,730
the real data here is about 40 40 gigs

00:24:27,240 --> 00:24:31,830
the sauce mirror in the end is the the

00:24:29,730 --> 00:24:34,650
smallest thing we have it's 70 gigs and

00:24:31,830 --> 00:24:38,400
in total we are well under Tara

00:24:34,650 --> 00:24:40,350
data so that it's not that big for today

00:24:38,400 --> 00:24:42,150
requirements for hosting a significant

00:24:40,350 --> 00:24:44,340
service this is the evolution of disk

00:24:42,150 --> 00:24:47,550
usage over time and the peak here is

00:24:44,340 --> 00:24:49,680
when I have injected all the destroyer

00:24:47,550 --> 00:24:52,860
releases this is not zero we start at

00:24:49,680 --> 00:24:54,900
3.5 so it's not like we went 10 times up

00:24:52,860 --> 00:24:59,850
when I injected all the historical or

00:24:54,900 --> 00:25:02,280
disease in case you want to have a look

00:24:59,850 --> 00:25:04,200
at the code so the kind of technology we

00:25:02,280 --> 00:25:07,260
use is pretty straight forward so we use

00:25:04,200 --> 00:25:10,800
the mirror for the billing part the DB

00:25:07,260 --> 00:25:13,050
is bhaskar's 9.1 or pluses are acquired

00:25:10,800 --> 00:25:15,920
and i remember why but it works on a

00:25:13,050 --> 00:25:18,300
stable machine Python is the

00:25:15,920 --> 00:25:20,970
implementation language of choice and

00:25:18,300 --> 00:25:22,620
the the main technology used on top of

00:25:20,970 --> 00:25:25,530
Python for the infrastructure part is

00:25:22,620 --> 00:25:26,760
SQL alchemy so they're worth nice models

00:25:25,530 --> 00:25:29,940
you can use to query the database and

00:25:26,760 --> 00:25:32,070
it's working pretty well for us at every

00:25:29,940 --> 00:25:33,680
update run what will happen is that well

00:25:32,070 --> 00:25:36,510
I've already went to that and

00:25:33,680 --> 00:25:38,910
essentially after updating this first

00:25:36,510 --> 00:25:40,830
mirror we unpack all the new packages we

00:25:38,910 --> 00:25:43,530
do garbage collection for all the

00:25:40,830 --> 00:25:45,630
packages that have disappeared and we do

00:25:43,530 --> 00:25:46,980
all we updating the stats which the

00:25:45,630 --> 00:25:50,850
chancellery means to running all the

00:25:46,980 --> 00:25:53,070
planets the possibly the most active

00:25:50,850 --> 00:25:56,070
price that will we run fairly large and

00:25:53,070 --> 00:25:58,950
nested SQL alchemy transaction which

00:25:56,070 --> 00:26:01,320
surprisingly works pretty well so this

00:25:58,950 --> 00:26:02,850
is the kind of the most difficult logic

00:26:01,320 --> 00:26:05,100
code you will find are those kind of

00:26:02,850 --> 00:26:06,450
NASA transactions which are hidden for

00:26:05,100 --> 00:26:08,850
you so there is no explicit begin

00:26:06,450 --> 00:26:12,030
transaction but the SQL admin code could

00:26:08,850 --> 00:26:13,890
be so become a bit tricky the web app is

00:26:12,030 --> 00:26:16,650
straightforward as well it's Python

00:26:13,890 --> 00:26:19,890
flask has a toolkit and the other big

00:26:16,650 --> 00:26:21,510
component we use is I like Jes to do the

00:26:19,890 --> 00:26:24,600
syntax highlighting on the browser of

00:26:21,510 --> 00:26:26,760
the user so we do not use automatic

00:26:24,600 --> 00:26:28,500
language detection by Allied GS which is

00:26:26,760 --> 00:26:30,240
supposed to be one of the major feature

00:26:28,500 --> 00:26:32,610
of the tool because essentially I like

00:26:30,240 --> 00:26:35,400
Jes was meant to actually include code

00:26:32,610 --> 00:26:36,960
snippets in blog post so essentially the

00:26:35,400 --> 00:26:38,610
parts in which you have to do the the

00:26:36,960 --> 00:26:41,070
automatic detection is fairly small and

00:26:38,610 --> 00:26:43,740
it was working pretty well but it turns

00:26:41,070 --> 00:26:45,840
out that when you show an entire source

00:26:43,740 --> 00:26:46,680
code files on the web the automatic

00:26:45,840 --> 00:26:48,960
language

00:26:46,680 --> 00:26:50,670
will will not work that well so what we

00:26:48,960 --> 00:26:54,030
do we use the guinea convention which

00:26:50,670 --> 00:26:55,740
I've mentioned before if you lack source

00:26:54,030 --> 00:26:58,440
code I lightning for your favorite

00:26:55,740 --> 00:27:00,750
language the first thing to do is to go

00:26:58,440 --> 00:27:02,670
and add support for it Twilight dodged a

00:27:00,750 --> 00:27:04,590
guess so I've been asking the past two

00:27:02,670 --> 00:27:07,020
to do that for specific languages like

00:27:04,590 --> 00:27:09,510
the Scilab language or and remember what

00:27:07,020 --> 00:27:11,220
what else it was but that's the place

00:27:09,510 --> 00:27:14,580
where you need to add your support in

00:27:11,220 --> 00:27:21,540
order to twelve sources they connect

00:27:14,580 --> 00:27:24,150
using what else Padma there is a bugs

00:27:21,540 --> 00:27:27,030
file I still have to migrate all the

00:27:24,150 --> 00:27:29,550
bugs to the QA debian go to our website

00:27:27,030 --> 00:27:31,350
I plan to do that during that cough so

00:27:29,550 --> 00:27:32,910
there are some low-hanging fruits which

00:27:31,350 --> 00:27:34,920
are the the parts you might want to

00:27:32,910 --> 00:27:37,500
start looking at in case you want to

00:27:34,920 --> 00:27:39,750
contribute so one is that we've made all

00:27:37,500 --> 00:27:44,340
sorts of fancy stats for the paper we've

00:27:39,750 --> 00:27:45,900
published using matplotlib and but

00:27:44,340 --> 00:27:47,460
essentially they are not live so we have

00:27:45,900 --> 00:27:49,290
produced it for the paper but they are

00:27:47,460 --> 00:27:50,580
not shown on the web interface so it

00:27:49,290 --> 00:27:52,890
would be nice to essentially have all

00:27:50,580 --> 00:27:55,320
the same kind of stats we did they live

00:27:52,890 --> 00:27:57,690
and updated every time we do something

00:27:55,320 --> 00:27:59,400
every time there is an update would be

00:27:57,690 --> 00:28:01,170
nice to have some filename search

00:27:59,400 --> 00:28:03,000
that's not implemented yet but it's

00:28:01,170 --> 00:28:05,640
straightforward because we already have

00:28:03,000 --> 00:28:07,800
the table with all the file names and

00:28:05,640 --> 00:28:09,960
there is some interesting post good

00:28:07,800 --> 00:28:11,670
thing to be doing to be done here there

00:28:09,960 --> 00:28:13,860
are some specific indexes which work

00:28:11,670 --> 00:28:15,660
well on file names so if you are a

00:28:13,860 --> 00:28:18,660
postgis geek might be something

00:28:15,660 --> 00:28:21,090
interesting for you to to play with as I

00:28:18,660 --> 00:28:22,500
mentioned before we do not have yet any

00:28:21,090 --> 00:28:24,030
kind of our direction from binary

00:28:22,500 --> 00:28:26,360
package to sauce packages that would be

00:28:24,030 --> 00:28:29,130
nice to have because many other services

00:28:26,360 --> 00:28:31,200
in that can't have that so essentially

00:28:29,130 --> 00:28:32,700
we still lack the injection of binary

00:28:31,200 --> 00:28:34,500
package names in database but the

00:28:32,700 --> 00:28:37,050
database structure already supposed that

00:28:34,500 --> 00:28:40,110
so again this should be fairly easy AK

00:28:37,050 --> 00:28:42,030
we do not support our ball in turbo so

00:28:40,110 --> 00:28:44,220
you know those horrible Debian packages

00:28:42,030 --> 00:28:46,110
in which you do typically sauce

00:28:44,220 --> 00:28:48,180
extraction and then everything you find

00:28:46,110 --> 00:28:51,780
is a Debian directory and attach that

00:28:48,180 --> 00:28:54,990
okay that's fairly annoying to deal with

00:28:51,780 --> 00:28:56,730
in to some extent I I really don't want

00:28:54,990 --> 00:28:57,630
to add support for that because if I can

00:28:56,730 --> 00:28:59,850
add another in

00:28:57,630 --> 00:29:03,120
and to make turbulent herbal packages

00:28:59,850 --> 00:29:05,460
die I'm happy to do that but to some

00:29:03,120 --> 00:29:07,500
other extent given we have all these

00:29:05,460 --> 00:29:09,060
store Elisa's it would be nice to look

00:29:07,500 --> 00:29:11,820
to you know to be able to point to a

00:29:09,060 --> 00:29:14,940
source code file in bash for instance

00:29:11,820 --> 00:29:17,310
that would be kind of nice so that's not

00:29:14,940 --> 00:29:20,520
too difficult to add but requires some

00:29:17,310 --> 00:29:22,470
work we have a test suite which is a

00:29:20,520 --> 00:29:24,600
point interesting thing to do in this

00:29:22,470 --> 00:29:26,220
case because you know wrapping all the

00:29:24,600 --> 00:29:28,470
real work which is happening some

00:29:26,220 --> 00:29:30,930
virtual environment to do the testing is

00:29:28,470 --> 00:29:33,090
could be challenging and we do not have

00:29:30,930 --> 00:29:34,920
to 100% test Suites so if you're if you

00:29:33,090 --> 00:29:36,750
are testing geek which likes doing this

00:29:34,920 --> 00:29:39,690
kind of stuff in Python well you're

00:29:36,750 --> 00:29:42,930
welcome to to give hand something more

00:29:39,690 --> 00:29:45,510
substantial we do need to have support

00:29:42,930 --> 00:29:47,580
mainly for security because it's really

00:29:45,510 --> 00:29:49,470
annoying not to be able to really see

00:29:47,580 --> 00:29:51,780
the kind of software we are shipping to

00:29:49,470 --> 00:29:53,460
users in case we have released some

00:29:51,780 --> 00:29:55,890
security updates so that would be

00:29:53,460 --> 00:29:57,810
interesting 12 and finally with the

00:29:55,890 --> 00:29:59,910
duplication so essentially it was

00:29:57,810 --> 00:30:02,010
curious about how much disk space we

00:29:59,910 --> 00:30:04,740
could save if we actually do

00:30:02,010 --> 00:30:06,840
deduplication at the file level right so

00:30:04,740 --> 00:30:09,420
right now there is no deduplication at

00:30:06,840 --> 00:30:11,430
all so different versions of the same

00:30:09,420 --> 00:30:15,270
package will occupies essentially twice

00:30:11,430 --> 00:30:17,760
the space but in most cases a subsequent

00:30:15,270 --> 00:30:20,730
version of a package will share a lot of

00:30:17,760 --> 00:30:23,130
files with the previous one so given we

00:30:20,730 --> 00:30:25,320
have the checksum we already have the

00:30:23,130 --> 00:30:28,230
information about this this is true the

00:30:25,320 --> 00:30:30,930
oldest Oracle archive so I think you

00:30:28,230 --> 00:30:33,450
might expect it to be higher I guess but

00:30:30,930 --> 00:30:35,160
this is what we get so if we do the

00:30:33,450 --> 00:30:37,770
deduplication right now we will

00:30:35,160 --> 00:30:38,450
essentially have the space required to

00:30:37,770 --> 00:30:44,810
Aust

00:30:38,450 --> 00:30:44,810
be where only the unpackage sauce parts

00:30:46,280 --> 00:30:49,890
yes I think so

00:30:47,880 --> 00:30:52,830
I think so and even more interesting so

00:30:49,890 --> 00:30:54,240
I think pubs is not here but perhaps is

00:30:52,830 --> 00:30:56,700
proposed to actually inject their

00:30:54,240 --> 00:30:58,350
evidence in so she's taken that so

00:30:56,700 --> 00:30:59,940
taking a bomb to and putting it into

00:30:58,350 --> 00:31:02,100
sauce Italian net taking all the other

00:30:59,940 --> 00:31:03,990
derivatives we have in the derivative

00:31:02,100 --> 00:31:06,060
sensors and injecting to that I think

00:31:03,990 --> 00:31:07,860
that would be feasible because the you

00:31:06,060 --> 00:31:09,360
know the amount to overlap the

00:31:07,860 --> 00:31:11,460
derivatives have that

00:31:09,360 --> 00:31:13,410
very very high I mean won't is probably

00:31:11,460 --> 00:31:15,960
the one that has drifted the most and I

00:31:13,410 --> 00:31:17,730
think it does 10% or 15% of package

00:31:15,960 --> 00:31:22,280
which are really different the other one

00:31:17,730 --> 00:31:22,280
pretty much based on the data ones so

00:31:30,260 --> 00:31:35,309
yes so this is a feature that we have on

00:31:33,630 --> 00:31:37,049
it to the list but the point is that

00:31:35,309 --> 00:31:39,510
what we can easily do is different

00:31:37,049 --> 00:31:40,920
demands right so having an interface in

00:31:39,510 --> 00:31:41,880
which you choose a version of a package

00:31:40,920 --> 00:31:43,559
diversion of and you ask

00:31:41,880 --> 00:31:45,390
show me the deputies among these two

00:31:43,559 --> 00:31:47,580
version that is visible what the thing

00:31:45,390 --> 00:31:48,809
is not visible it's precomputing all you

00:31:47,580 --> 00:31:50,460
know all the discs because you have all

00:31:48,809 --> 00:31:52,169
the pair's and that explodes furnace no

00:31:50,460 --> 00:31:53,429
yes that's something that we haven't to

00:31:52,169 --> 00:31:55,080
do so

00:31:53,429 --> 00:31:57,510
that's absolutely feasible but be

00:31:55,080 --> 00:31:59,490
regarding derivatives they are already

00:31:57,510 --> 00:32:01,260
doing this with respect to Dalian so I

00:31:59,490 --> 00:32:03,000
think if you look into their derivatives

00:32:01,260 --> 00:32:05,400
census I think they are already doing

00:32:03,000 --> 00:32:07,380
periodically divs and keeping an index

00:32:05,400 --> 00:32:09,419
of all lives between Devon and

00:32:07,380 --> 00:32:11,220
derivatives so that exists already but

00:32:09,419 --> 00:32:14,490
it's a feature that would be nice but

00:32:11,220 --> 00:32:16,530
here as well and another kind of crazy

00:32:14,490 --> 00:32:17,910
yeah which we like quite a lot I don't

00:32:16,530 --> 00:32:20,820
know if you have ever seen

00:32:17,910 --> 00:32:23,520
Linux cross-reference is essentially a

00:32:20,820 --> 00:32:25,320
website that I've lets you browse

00:32:23,520 --> 00:32:27,630
through the kernel source code and

00:32:25,320 --> 00:32:29,490
essentially either link each function to

00:32:27,630 --> 00:32:31,320
finish each function usage to the

00:32:29,490 --> 00:32:33,330
function definition so imagine being

00:32:31,320 --> 00:32:34,860
able to do this kind of thing across all

00:32:33,330 --> 00:32:36,840
of the divine archive so that when you

00:32:34,860 --> 00:32:38,760
have a package using a library you

00:32:36,840 --> 00:32:40,770
browse the source code of the package

00:32:38,760 --> 00:32:42,480
it's calling into another library you

00:32:40,770 --> 00:32:44,220
click on the function name and you end

00:32:42,480 --> 00:32:45,929
up on the other package where you have

00:32:44,220 --> 00:32:48,000
the definition of the function that

00:32:45,929 --> 00:32:49,890
would be very cool it's not that easy

00:32:48,000 --> 00:32:52,290
because as long as it's a single project

00:32:49,890 --> 00:32:54,630
that Linux kernel even if it's peak you

00:32:52,290 --> 00:32:56,520
have not that much on big youatt well if

00:32:54,630 --> 00:32:58,679
you do this here you will have a lot of

00:32:56,520 --> 00:32:59,970
symbols that are nothing - that have

00:32:58,679 --> 00:33:02,669
nothing to do with your packet that

00:32:59,970 --> 00:33:04,590
might be its own definition so there are

00:33:02,669 --> 00:33:06,390
some strategy you can use to do

00:33:04,590 --> 00:33:08,790
deduplication for instance looking at

00:33:06,390 --> 00:33:10,320
dependency of the package or ensuring it

00:33:08,790 --> 00:33:15,330
the same language and so on and so forth

00:33:10,320 --> 00:33:17,190
but it will be a fun exercise to do so

00:33:15,330 --> 00:33:18,090
if you are interested and if I managed

00:33:17,190 --> 00:33:22,140
to get through

00:33:18,090 --> 00:33:24,870
this project the we try to follow the

00:33:22,140 --> 00:33:27,210
best practices in Debian to advertise

00:33:24,870 --> 00:33:28,740
development information so every single

00:33:27,210 --> 00:33:30,330
service in Debian which has a web

00:33:28,740 --> 00:33:32,880
interface in my opinion should have a

00:33:30,330 --> 00:33:34,770
footer pointing you to the source code

00:33:32,880 --> 00:33:36,690
of the service pointing you to where to

00:33:34,770 --> 00:33:38,549
report backs and pointing you to how to

00:33:36,690 --> 00:33:40,650
contact the maintainer of this service

00:33:38,549 --> 00:33:42,299
so just look at the food footer of

00:33:40,650 --> 00:33:44,580
sources that they can net you will find

00:33:42,299 --> 00:33:47,190
all develop information you will find

00:33:44,580 --> 00:33:49,710
the pointer to the git repo containing

00:33:47,190 --> 00:33:52,380
the code which by the way is affero GPL

00:33:49,710 --> 00:33:54,539
license so the source code should always

00:33:52,380 --> 00:33:57,870
be available no matter with the point

00:33:54,539 --> 00:34:01,320
system you will find a pointer to the

00:33:57,870 --> 00:34:03,059
list of bugs we find then there is an

00:34:01,320 --> 00:34:05,100
about page with more information and the

00:34:03,059 --> 00:34:05,730
place to discuss this in terms of

00:34:05,100 --> 00:34:08,190
development

00:34:05,730 --> 00:34:10,379
it's the Debian QA list so just show up

00:34:08,190 --> 00:34:13,830
there or they they're going to a QA IOC

00:34:10,379 --> 00:34:16,200
channel feel free to I like me I'm that

00:34:13,830 --> 00:34:17,190
that they seek a on the channel if you

00:34:16,200 --> 00:34:18,290
have a specific question about that

00:34:17,190 --> 00:34:22,290
sources

00:34:18,290 --> 00:34:24,359
so to summarize the sources is a seems

00:34:22,290 --> 00:34:26,429
to be a very simple idea yet very useful

00:34:24,359 --> 00:34:27,960
and there are quite a bit of fun

00:34:26,429 --> 00:34:31,820
development tasks in case you want to

00:34:27,960 --> 00:34:31,820
participate thanks

00:34:42,750 --> 00:34:48,010
so we we have a derivative and one of

00:34:45,849 --> 00:34:50,230
the things that we have to do is pull

00:34:48,010 --> 00:34:52,210
all the sources to analysis and find out

00:34:50,230 --> 00:34:55,179
what all the licenses are not associated

00:34:52,210 --> 00:34:58,980
with the pieces we know what the legal

00:34:55,179 --> 00:35:02,200
ramifications of that so is there a

00:34:58,980 --> 00:35:05,650
vehicle or mechanism in your and your

00:35:02,200 --> 00:35:08,500
analysis and filter to pretend perhaps

00:35:05,650 --> 00:35:12,549
our licenses are creating index for

00:35:08,500 --> 00:35:14,740
licenses okay so in the service offering

00:35:12,549 --> 00:35:16,210
on the web not yet what I'm working on

00:35:14,740 --> 00:35:18,309
because it's a topic I'm very much

00:35:16,210 --> 00:35:21,460
interesting in is using the same set of

00:35:18,309 --> 00:35:24,279
data to expose on the web and in a min

00:35:21,460 --> 00:35:26,410
without some kind of API the content of

00:35:24,279 --> 00:35:28,900
the Debian copyright file as long as

00:35:26,410 --> 00:35:30,069
those files are machine possible so you

00:35:28,900 --> 00:35:31,480
might be aware that we have two

00:35:30,069 --> 00:35:33,099
different format for that in copyright

00:35:31,480 --> 00:35:34,569
the historical one which is not machine

00:35:33,099 --> 00:35:36,940
possible so you can do some sort of

00:35:34,569 --> 00:35:39,400
heuristic on top of it but not much more

00:35:36,940 --> 00:35:41,349
than that or we have a new format which

00:35:39,400 --> 00:35:43,000
is the machine possible machine Debian

00:35:41,349 --> 00:35:45,460
copyright format and they've been

00:35:43,000 --> 00:35:48,819
monitoring the usage of that format

00:35:45,460 --> 00:35:51,880
using this corpus and it's now about 60%

00:35:48,819 --> 00:35:53,740
so if you look at unstable about 60% of

00:35:51,880 --> 00:35:55,809
the licensing information that Debian

00:35:53,740 --> 00:35:57,880
provides are encoded in that machine

00:35:55,809 --> 00:36:00,369
possible format so what I wanted to hide

00:35:57,880 --> 00:36:01,990
on top of this is a service in which you

00:36:00,369 --> 00:36:03,789
will tell the name of the package the

00:36:01,990 --> 00:36:06,130
version of the package and essentially

00:36:03,789 --> 00:36:09,730
we'll get back to you the information

00:36:06,130 --> 00:36:11,559
contained in the decoder okay so if you

00:36:09,730 --> 00:36:13,390
want to do the analysis yourself maybe

00:36:11,559 --> 00:36:14,890
because you have a derivative with other

00:36:13,390 --> 00:36:18,069
information there are essentially two

00:36:14,890 --> 00:36:19,480
possibilities either we make it true we

00:36:18,069 --> 00:36:21,339
make it real the idea of injecting

00:36:19,480 --> 00:36:23,559
derivatives here and then you will get

00:36:21,339 --> 00:36:25,960
the service for free or you can deploy

00:36:23,559 --> 00:36:28,450
yourself that sources and use the

00:36:25,960 --> 00:36:30,819
machinery that was the second product

00:36:28,450 --> 00:36:33,100
question was there is this something we

00:36:30,819 --> 00:36:37,600
could set up

00:36:33,100 --> 00:36:40,270
yourself or is it no no it's so the the

00:36:37,600 --> 00:36:41,800
source code of that platform itself is

00:36:40,270 --> 00:36:44,110
available you can deploy it wherever you

00:36:41,800 --> 00:36:46,330
want I'm not aware yet of other

00:36:44,110 --> 00:36:47,620
deployments but I've documented out do

00:36:46,330 --> 00:36:49,060
that and they've been in touch with a

00:36:47,620 --> 00:36:51,190
couple of people interesting in

00:36:49,060 --> 00:36:52,750
deploying it for their own internal list

00:36:51,190 --> 00:36:55,120
or whatever so it's absolutely feasible

00:36:52,750 --> 00:36:56,710
and in the paper I've also to commend

00:36:55,120 --> 00:36:59,200
that the full process you will need in

00:36:56,710 --> 00:37:01,360
case you want to inject all the data to

00:36:59,200 --> 00:37:03,370
that year probably you are not

00:37:01,360 --> 00:37:04,690
interested in the historical date of

00:37:03,370 --> 00:37:06,220
death yet but maybe you have some

00:37:04,690 --> 00:37:07,780
historical data for your own actually

00:37:06,220 --> 00:37:09,750
there is quite a bit of interested in

00:37:07,780 --> 00:37:14,080
historic one we would probably utilize

00:37:09,750 --> 00:37:17,950
your instance in that space because code

00:37:14,080 --> 00:37:19,930
volatility but volatility all of those

00:37:17,950 --> 00:37:21,400
things are important and understanding

00:37:19,930 --> 00:37:23,770
you know the stability of on the wrong

00:37:21,400 --> 00:37:25,720
package that comes from the sources okay

00:37:23,770 --> 00:37:29,370
great so it seems like there is some

00:37:25,720 --> 00:37:34,210
margin for collaboration yeah thanks

00:37:29,370 --> 00:37:35,440
Michael yes so you notice or you

00:37:34,210 --> 00:37:37,960
mentioned that there's a problem with

00:37:35,440 --> 00:37:40,360
the source binary packages so I guess

00:37:37,960 --> 00:37:42,900
that information is in DAC right and

00:37:40,360 --> 00:37:45,340
Donn also mentioned that in the Box talk

00:37:42,900 --> 00:37:48,100
so one earth I mean newer versions of

00:37:45,340 --> 00:37:50,410
post Chris can query remote tables as if

00:37:48,100 --> 00:37:52,960
they were local did you talk to people

00:37:50,410 --> 00:37:55,150
that you could just use the DAC table in

00:37:52,960 --> 00:37:56,380
presence you know I don't know whether

00:37:55,150 --> 00:37:57,640
that's a performance problem but maybe

00:37:56,380 --> 00:37:59,740
that might be a solution and not

00:37:57,640 --> 00:38:00,310
everybody redoing the whole thing all

00:37:59,740 --> 00:38:03,760
the time

00:38:00,310 --> 00:38:06,280
so I agree so as maintainer of the main

00:38:03,760 --> 00:38:08,380
instance I would be skeptical in adding

00:38:06,280 --> 00:38:11,020
you know runtime dependency to another

00:38:08,380 --> 00:38:13,570
service but as montina of the codebase

00:38:11,020 --> 00:38:15,610
yes I would love to not having to redo

00:38:13,570 --> 00:38:18,100
all the injection myself so what I think

00:38:15,610 --> 00:38:21,220
would be very cool is to agree on some

00:38:18,100 --> 00:38:23,530
sort of model for SQL alchemy or

00:38:21,220 --> 00:38:25,690
whatever for a subset of the package

00:38:23,530 --> 00:38:27,790
information and that code that injects

00:38:25,690 --> 00:38:30,130
that information from the packages and

00:38:27,790 --> 00:38:32,170
inject into the database at least we

00:38:30,130 --> 00:38:33,760
will not be everyone will not be nor are

00:38:32,170 --> 00:38:35,700
we doing the code to do the injection

00:38:33,760 --> 00:38:41,100
maybe Paul if some comment about that

00:38:35,700 --> 00:38:41,100
okay we compose comedies we will talk

00:38:44,600 --> 00:38:51,660
one just behind you

00:38:47,850 --> 00:38:55,620
a few years ago I was working on a

00:38:51,660 --> 00:38:59,040
legacy Oh a few years ago I was working

00:38:55,620 --> 00:39:00,750
on a Legacy Project and I needed to be

00:38:59,040 --> 00:39:03,330
able to build something that required

00:39:00,750 --> 00:39:08,610
specific versions of libraries and I

00:39:03,330 --> 00:39:10,710
ended up installing woody oh my god I

00:39:08,610 --> 00:39:13,800
was like it was already like 10 years

00:39:10,710 --> 00:39:19,920
old at that point and so I can see some

00:39:13,800 --> 00:39:21,510
some usefulness in you know historical

00:39:19,920 --> 00:39:24,150
stuff so that I could fly it is like

00:39:21,510 --> 00:39:26,370
okay which version of things can I find

00:39:24,150 --> 00:39:28,710
where can I find this version of things

00:39:26,370 --> 00:39:30,420
because otherwise it this stuff wouldn't

00:39:28,710 --> 00:39:32,340
even compile yeah

00:39:30,420 --> 00:39:33,930
so I agree so that kind of use case

00:39:32,340 --> 00:39:36,060
long-term preservation of free software

00:39:33,930 --> 00:39:37,590
is very dear to me I don't think that

00:39:36,060 --> 00:39:40,110
that sources should become the platform

00:39:37,590 --> 00:39:42,240
you get the code from but if but it's

00:39:40,110 --> 00:39:45,120
absolutely reasonable to expect you use

00:39:42,240 --> 00:39:47,070
this to actually find out which version

00:39:45,120 --> 00:39:49,440
you need and then you go down to the

00:39:47,070 --> 00:39:51,330
source right so Archive Debian are it's

00:39:49,440 --> 00:39:53,880
the the proof that taken project in

00:39:51,330 --> 00:39:56,610
general very cares very much about not

00:39:53,880 --> 00:39:58,620
losing all releases so maybe you could

00:39:56,610 --> 00:40:01,110
just use this to find a specific version

00:39:58,620 --> 00:40:03,270
and then you go to archive doc debian

00:40:01,110 --> 00:40:05,130
note org and you retrieve the version of

00:40:03,270 --> 00:40:08,340
the package you want maybe I could help

00:40:05,130 --> 00:40:10,320
making it easier associating to any

00:40:08,340 --> 00:40:12,630
single version of a package the origin

00:40:10,320 --> 00:40:14,610
for the for that specific package so

00:40:12,630 --> 00:40:17,160
maybe I could provide direct pointer for

00:40:14,610 --> 00:40:20,040
from to the BSC that existed in archive

00:40:17,160 --> 00:40:22,440
to be an arc or something such if that

00:40:20,040 --> 00:40:24,480
could help let me know and I could

00:40:22,440 --> 00:40:34,680
totally work hopefully I only had to do

00:40:24,480 --> 00:40:37,770
this once ever in my life Filipa hey

00:40:34,680 --> 00:40:41,040
Zack so following on mica suggestion

00:40:37,770 --> 00:40:42,480
Asst there are four things that you said

00:40:41,040 --> 00:40:44,580
you want to implement that will align

00:40:42,480 --> 00:40:47,070
with like packages and package QA stuff

00:40:44,580 --> 00:40:50,240
like finding filenames finding binaries

00:40:47,070 --> 00:40:52,400
and then also Packard's also has like an

00:40:50,240 --> 00:40:55,250
dump of Lighting's how are you planning

00:40:52,400 --> 00:40:57,770
on duplicating or integrating do you

00:40:55,250 --> 00:41:02,869
have anything looking out on those types

00:40:57,770 --> 00:41:04,520
of tracker packets packets QA so

00:41:02,869 --> 00:41:06,710
regarding packages that didn't work I

00:41:04,520 --> 00:41:09,050
didn't think about getting in touch with

00:41:06,710 --> 00:41:11,240
them also because it seems to me the

00:41:09,050 --> 00:41:14,330
codebase might be kind of whole these

00:41:11,240 --> 00:41:16,460
days so I wanted to do something you

00:41:14,330 --> 00:41:18,020
know more mundane able and more

00:41:16,460 --> 00:41:19,910
importantly something that could be more

00:41:18,020 --> 00:41:23,270
appealing to you know new contributors

00:41:19,910 --> 00:41:25,400
to contribute them I don't know what we

00:41:23,270 --> 00:41:27,770
can share with them with tracker Debian

00:41:25,400 --> 00:41:28,460
no target might be different a different

00:41:27,770 --> 00:41:38,020
matter

00:41:28,460 --> 00:41:38,020
yeah anyone else

00:41:41,710 --> 00:41:45,760

YouTube URL: https://www.youtube.com/watch?v=k5ImbUymiN4


