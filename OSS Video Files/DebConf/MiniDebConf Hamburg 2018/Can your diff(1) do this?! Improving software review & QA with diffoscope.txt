Title: Can your diff(1) do this?! Improving software review & QA with diffoscope
Publication date: 2018-05-27
Playlist: MiniDebConf Hamburg 2018
Description: 
	by Chris Lamb

At: MiniDebConf Hamburg
https://wiki.debian.org/DebianEvents/de/2018/MiniDebConfHamburg
Room: main
Scheduled start: 2018-05-19 18:30:00
Captions: 
	00:00:04,550 --> 00:00:10,790
yes so I'm gonna here I'm here today to

00:00:07,550 --> 00:00:12,949
talk to you about differ scope and how

00:00:10,790 --> 00:00:15,049
you can just use it as a better DIF or

00:00:12,949 --> 00:00:20,029
for quality assurance

00:00:15,049 --> 00:00:22,550
etc and things like that little moines

00:00:20,029 --> 00:00:26,570
apparently that ii north german thing

00:00:22,550 --> 00:00:29,120
just say welcome north german north

00:00:26,570 --> 00:00:30,850
denmark scandinavia that kind of thing

00:00:29,120 --> 00:00:32,899
I'm told

00:00:30,850 --> 00:00:37,340
people aren't shaking their head so I'm

00:00:32,899 --> 00:00:41,960
gonna assume that's true yeah this is my

00:00:37,340 --> 00:00:44,630
first pc IBM 555 sometimes when you

00:00:41,960 --> 00:00:46,670
rebooted it it would launch into it

00:00:44,630 --> 00:00:50,239
would somehow revert from booting from

00:00:46,670 --> 00:00:52,190
the hard disk to booting from a basic

00:00:50,239 --> 00:00:53,809
rom as in the programming language ROM

00:00:52,190 --> 00:00:56,149
it was all motherboard for some reason

00:00:53,809 --> 00:00:58,100
so randomly you just get the chance to

00:00:56,149 --> 00:00:59,870
program and basic and then sometimes you

00:00:58,100 --> 00:01:02,649
wouldn't I don't know why but you know

00:00:59,870 --> 00:01:05,570
it's quite fun with this kind of clicky

00:01:02,649 --> 00:01:08,929
keyboard and that folded in and it was

00:01:05,570 --> 00:01:10,880
this kind of big desk thing anyway this

00:01:08,929 --> 00:01:14,630
is my first Debian at the time was

00:01:10,880 --> 00:01:17,450
already old was this one this link do

00:01:14,630 --> 00:01:19,789
you point to yeah and this is when we

00:01:17,450 --> 00:01:24,380
had like us and non-us so that's really

00:01:19,789 --> 00:01:27,799
dating it remember that this is my first

00:01:24,380 --> 00:01:32,929
contribution to Debian 90s December 2006

00:01:27,799 --> 00:01:34,759
sending a patch to nilly pond just kind

00:01:32,929 --> 00:01:36,740
of interesting and the response was oh

00:01:34,759 --> 00:01:38,329
yeah rock on many thanks a lot load this

00:01:36,740 --> 00:01:40,039
and him allowing to etch and this was

00:01:38,329 --> 00:01:43,459
like super motivating because itch was

00:01:40,039 --> 00:01:45,740
just coming out and it was like great

00:01:43,459 --> 00:01:48,529
I've got like one line of like tiny

00:01:45,740 --> 00:01:51,259
patch in a release this is like super

00:01:48,529 --> 00:01:54,770
cool and Thomas is like response was

00:01:51,259 --> 00:01:56,779
super motivating so after that like that

00:01:54,770 --> 00:01:58,729
Christmas I basically spent like reading

00:01:56,779 --> 00:01:59,450
all through the Debian web pages and

00:01:58,729 --> 00:02:02,209
stuff yeah

00:01:59,450 --> 00:02:04,279
so it was very well timed so yeah I mean

00:02:02,209 --> 00:02:06,709
that's kind of a good you know if

00:02:04,279 --> 00:02:08,450
someone sends a patch be like cool

00:02:06,709 --> 00:02:10,849
thanks yeah I got old noticing the

00:02:08,450 --> 00:02:14,580
change on it was you know it's so stupid

00:02:10,849 --> 00:02:18,460
but yeah so do that kind of thing

00:02:14,580 --> 00:02:20,440
cool so moving on so why diffa scope why

00:02:18,460 --> 00:02:22,270
did we write differ scope what's the

00:02:20,440 --> 00:02:25,000
background here so it comes from

00:02:22,270 --> 00:02:27,100
reproducible builds so very quick

00:02:25,000 --> 00:02:28,870
outline of that is that whilst you can

00:02:27,100 --> 00:02:30,100
get the source code for free software

00:02:28,870 --> 00:02:31,510
you can download the source code for

00:02:30,100 --> 00:02:33,610
nginx or whatever

00:02:31,510 --> 00:02:35,230
pretty much everyone just down runs

00:02:33,610 --> 00:02:37,270
binaries on their servers or their

00:02:35,230 --> 00:02:40,810
systems in the apt install blah yum

00:02:37,270 --> 00:02:44,080
installs it whatever Android Play Store

00:02:40,810 --> 00:02:45,640
whatever and can you actually trust

00:02:44,080 --> 00:02:46,900
whether these two things correspond with

00:02:45,640 --> 00:02:48,910
each other like you can look at the

00:02:46,900 --> 00:02:52,780
source code then looks alright and then

00:02:48,910 --> 00:02:55,270
you install this binary what happened

00:02:52,780 --> 00:02:57,280
whom generated that can you trust that

00:02:55,270 --> 00:02:59,140
process can you trust you generated it

00:02:57,280 --> 00:03:02,200
even if you could trust them can you

00:02:59,140 --> 00:03:03,430
trust them not to be exploited etc this

00:03:02,200 --> 00:03:05,260
is a big problem because you can exploit

00:03:03,430 --> 00:03:08,530
a build farm and then obviously exploit

00:03:05,260 --> 00:03:10,090
all of that you know a Trojan CM had

00:03:08,530 --> 00:03:12,280
Trojans into the build farm so every

00:03:10,090 --> 00:03:14,890
single binary that comes out he's

00:03:12,280 --> 00:03:16,750
compromised kind of problematic you can

00:03:14,890 --> 00:03:18,880
also target individual developers

00:03:16,750 --> 00:03:21,070
machines so I could go off to say your

00:03:18,880 --> 00:03:23,530
machine and a little backdoor to it so

00:03:21,070 --> 00:03:25,739
every piece of soft every binary that

00:03:23,530 --> 00:03:28,450
you give to friends and things like that

00:03:25,739 --> 00:03:32,310
are compromised in some way steal all

00:03:28,450 --> 00:03:34,540
your bitcoins or whatever I can also

00:03:32,310 --> 00:03:39,370
turn up to your door and blackmail you

00:03:34,540 --> 00:03:42,700
into producing software that has

00:03:39,370 --> 00:03:44,739
compromises or extra features so we say

00:03:42,700 --> 00:03:46,660
that don't exist in the source code so

00:03:44,739 --> 00:03:48,610
what would happen there is that you'd

00:03:46,660 --> 00:03:50,590
release your source and but the binaries

00:03:48,610 --> 00:03:53,170
you produce have this sort of backdoor

00:03:50,590 --> 00:03:55,450
that's you know someone's sort of

00:03:53,170 --> 00:03:57,330
forcing you into producing so you don't

00:03:55,450 --> 00:03:59,920
to do that anyway

00:03:57,330 --> 00:04:01,440
enough of that what you do for

00:03:59,920 --> 00:04:03,760
reproducible builds is you ensure that

00:04:01,440 --> 00:04:06,060
every time you build a piece of software

00:04:03,760 --> 00:04:08,709
you get the idea and identical result

00:04:06,060 --> 00:04:10,239
multiple people then compare their bills

00:04:08,709 --> 00:04:12,730
and check whether they all get the same

00:04:10,239 --> 00:04:14,799
results and this means that an attacker

00:04:12,730 --> 00:04:16,540
must either have infected everyone at

00:04:14,799 --> 00:04:21,130
the same time or they haven't infected

00:04:16,540 --> 00:04:22,690
anyone that kind of thing so the point

00:04:21,130 --> 00:04:24,760
here is that you have to insure the

00:04:22,690 --> 00:04:25,720
builds of identical results okay great

00:04:24,760 --> 00:04:29,890
okay

00:04:25,720 --> 00:04:31,450
identical results okay great so we start

00:04:29,890 --> 00:04:34,810
and we started reproducible builds

00:04:31,450 --> 00:04:37,870
projects etc and we built two Deb's I'm

00:04:34,810 --> 00:04:39,640
sorry about the colors there you

00:04:37,870 --> 00:04:43,900
probably can't see that that says sha-1

00:04:39,640 --> 00:04:47,020
some a dev and B Deb well it's all of

00:04:43,900 --> 00:04:50,530
them actually anyway we're comparing the

00:04:47,020 --> 00:04:53,260
sha-1 Tom's off to binary Debian files

00:04:50,530 --> 00:04:56,860
okay great so these two files differ

00:04:53,260 --> 00:05:01,350
okay they're not reproducible why is

00:04:56,860 --> 00:05:04,660
that so we'll run a diff on them yeah so

00:05:01,350 --> 00:05:08,170
what can we learn from this well not

00:05:04,660 --> 00:05:11,050
very much presumably they're compressed

00:05:08,170 --> 00:05:11,500
so as soon as we see one change we'll

00:05:11,050 --> 00:05:13,300
see

00:05:11,500 --> 00:05:16,540
they'll just cascade changes because

00:05:13,300 --> 00:05:18,850
that's how compression works and we I

00:05:16,540 --> 00:05:21,130
guess we know it's in depth and probably

00:05:18,850 --> 00:05:24,550
an AR format file with you know with

00:05:21,130 --> 00:05:27,450
them yeah yeah not very useful okay

00:05:24,550 --> 00:05:30,730
great so we'll go one level it in we'll

00:05:27,450 --> 00:05:32,970
do a binary different okay well again

00:05:30,730 --> 00:05:37,960
that's not really telling us very much

00:05:32,970 --> 00:05:41,260
with the with the diff there yeah okay

00:05:37,960 --> 00:05:43,960
great let's go one level in ARX this is

00:05:41,260 --> 00:05:45,520
on the new maintainer thing how you

00:05:43,960 --> 00:05:49,180
unpack a Deb everyone remembers this

00:05:45,520 --> 00:05:51,669
right right you unpack a dad with a rx

00:05:49,180 --> 00:05:56,740
and we do it to the B Deb and then we'd

00:05:51,669 --> 00:06:00,760
if the results of that okay so yeah

00:05:56,740 --> 00:06:01,300
7-zip okay compress contents not very

00:06:00,760 --> 00:06:05,380
useful

00:06:01,300 --> 00:06:09,070
okay so let's unpack the control tower

00:06:05,380 --> 00:06:12,340
inside that inside those depths okay and

00:06:09,070 --> 00:06:13,660
then we run differ on that okay yeah

00:06:12,340 --> 00:06:15,520
still not really telling us anything

00:06:13,660 --> 00:06:19,180
useful about how to make this package

00:06:15,520 --> 00:06:23,020
reproducible so let's unpack the target

00:06:19,180 --> 00:06:26,890
X head into the tar okay inside that tar

00:06:23,020 --> 00:06:28,360
that's a file called md5 sums and it was

00:06:26,890 --> 00:06:32,800
starting to see some difference in

00:06:28,360 --> 00:06:34,479
between some files in this in these two

00:06:32,800 --> 00:06:36,370
depths something meaningful so now we

00:06:34,479 --> 00:06:38,590
have like some idea that it's something

00:06:36,370 --> 00:06:42,100
to do with this user bin PN mixer

00:06:38,590 --> 00:06:43,690
binary okay interesting okay I will

00:06:42,100 --> 00:06:45,910
unzip that and then we'll do a diff on

00:06:43,690 --> 00:06:48,580
PN mixer itself okay well now we're back

00:06:45,910 --> 00:06:50,710
into just binary gobbledygook mode this

00:06:48,580 --> 00:06:52,570
isn't very helpful and this is taking

00:06:50,710 --> 00:06:54,490
quite a while and if I remember

00:06:52,570 --> 00:06:57,460
correctly Debian has a lot of packages

00:06:54,490 --> 00:06:59,860
so this might take a little while so

00:06:57,460 --> 00:07:02,350
basically anything know this particular

00:06:59,860 --> 00:07:04,510
mean I should build a better dish yeah

00:07:02,350 --> 00:07:05,380
cetera that's not quite true because

00:07:04,510 --> 00:07:07,330
actually a.m.

00:07:05,380 --> 00:07:08,740
it was lunar it started this project and

00:07:07,330 --> 00:07:11,530
it was really called dead bin diff

00:07:08,740 --> 00:07:14,229
because we wanted to diff binary Debian

00:07:11,530 --> 00:07:16,180
packages so this is the initial commit

00:07:14,229 --> 00:07:17,919
00:07:16,180 --> 00:07:19,419
this version is successfully able to

00:07:17,919 --> 00:07:21,490
report differences in two changes files

00:07:19,419 --> 00:07:22,180
not with much interesting details but

00:07:21,490 --> 00:07:27,000
it's a start

00:07:22,180 --> 00:07:29,169
yes and it was a start so I'm

00:07:27,000 --> 00:07:30,250
fast-forwarding oh sorry about these

00:07:29,169 --> 00:07:41,950
colors I don't know if we can do

00:07:30,250 --> 00:07:45,520
anything about the lights yeah no all

00:07:41,950 --> 00:07:48,760
right and basically we're different

00:07:45,520 --> 00:07:50,380
scoping on it rut works kind of like DIF

00:07:48,760 --> 00:07:53,039
does normally you give it two files

00:07:50,380 --> 00:07:56,590
it'll output a song unified diff so

00:07:53,039 --> 00:07:58,810
different scope a different B and one

00:07:56,590 --> 00:08:01,870
file contains the word foo one contains

00:07:58,810 --> 00:08:03,970
the word bar brilliant nothing actually

00:08:01,870 --> 00:08:05,680
that would out of the ordinary it's sort

00:08:03,970 --> 00:08:10,720
of colored by default so that's why you

00:08:05,680 --> 00:08:12,940
can't see it but whatever it

00:08:10,720 --> 00:08:16,479
it supports archive formats so if you

00:08:12,940 --> 00:08:20,710
give it to tar files so if we then tar

00:08:16,479 --> 00:08:23,380
up are a file and our B file into an a

00:08:20,710 --> 00:08:26,229
dot tar and ABI dog park and then run

00:08:23,380 --> 00:08:28,330
differ scope on those tar files we get

00:08:26,229 --> 00:08:30,039
this kind of like um hierarchy here so

00:08:28,330 --> 00:08:32,469
it's saying that okay there are

00:08:30,039 --> 00:08:35,610
differences between these files in the

00:08:32,469 --> 00:08:37,390
file lists they have different

00:08:35,610 --> 00:08:39,789
timestamps because I made them at

00:08:37,390 --> 00:08:41,800
different times and and here are the

00:08:39,789 --> 00:08:43,870
contents so he gets through there and

00:08:41,800 --> 00:08:46,300
bar there so we can see the difference

00:08:43,870 --> 00:08:49,810
between them well I can I don't if you

00:08:46,300 --> 00:08:51,880
can you get the slight data if we gzip

00:08:49,810 --> 00:08:52,390
these tar files and then run differ

00:08:51,880 --> 00:08:55,360
scope

00:08:52,390 --> 00:08:58,090
those gzip things it'll say okay what

00:08:55,360 --> 00:09:01,090
we've done is to unpack it first and

00:08:58,090 --> 00:09:03,880
here's the metadata about the the gzip

00:09:01,090 --> 00:09:06,210
process and inside that are off a dot R

00:09:03,880 --> 00:09:09,850
and B dot R from the previous slides and

00:09:06,210 --> 00:09:12,840
then the a file and the B file so it's

00:09:09,850 --> 00:09:14,140
already going to levels deep into this

00:09:12,840 --> 00:09:16,840
into this

00:09:14,140 --> 00:09:18,520
tar.gz file that's pretty cool it's

00:09:16,840 --> 00:09:20,620
completely recursive so I think you'll

00:09:18,520 --> 00:09:30,970
it'll actually blow out after I think a

00:09:20,620 --> 00:09:38,890
thousand yeah well so I just bump back a

00:09:30,970 --> 00:09:42,220
bit just in case that yeah thank you

00:09:38,890 --> 00:09:44,260
yes sir I mean I yeah fubar move on so

00:09:42,220 --> 00:09:46,720
that's the a/b file we've toured them up

00:09:44,260 --> 00:09:49,000
and so now you see the hierarchy are foo

00:09:46,720 --> 00:09:52,870
and bar file there and there with gzip

00:09:49,000 --> 00:09:53,950
them so there's a gzip layer as the tar

00:09:52,870 --> 00:09:57,880
layer and then there's the files

00:09:53,950 --> 00:10:01,360
themselves and this is are on a real

00:09:57,880 --> 00:10:04,030
dead from the archive inside this dev

00:10:01,360 --> 00:10:05,860
there's a data block chards or exed and

00:10:04,030 --> 00:10:08,230
in that exit file there's obviously a

00:10:05,860 --> 00:10:10,810
dated Akhtar and inside that tar file

00:10:08,230 --> 00:10:13,090
there's a file called AFF and it's like

00:10:10,810 --> 00:10:14,620
that there's a version string that's

00:10:13,090 --> 00:10:16,840
different and that looks like a build

00:10:14,620 --> 00:10:18,610
date so we probably know that if we went

00:10:16,840 --> 00:10:20,920
back to the source package we could very

00:10:18,610 --> 00:10:23,530
quickly work out you know with a very

00:10:20,920 --> 00:10:28,170
quick grip workout where this file is

00:10:23,530 --> 00:10:30,730
being generated from the DD AFF file and

00:10:28,170 --> 00:10:32,770
then just it'll be probably usually

00:10:30,730 --> 00:10:34,990
quite obvious that it's using the

00:10:32,770 --> 00:10:37,240
current build time and then we can just

00:10:34,990 --> 00:10:40,690
nip patch that be like fix it cetera

00:10:37,240 --> 00:10:44,140
it's a great so this has gone from a to

00:10:40,690 --> 00:10:46,690
rather obscure binary debs

00:10:44,140 --> 00:10:49,900
all the way to the fix probably in about

00:10:46,690 --> 00:10:51,310
you know five five minutes you know any

00:10:49,900 --> 00:10:53,890
police in the patch off in that time

00:10:51,310 --> 00:10:56,230
because it'll be quite quick and without

00:10:53,890 --> 00:10:58,990
without difficulty without this sort of

00:10:56,230 --> 00:11:00,760
recursive unpacking you Beach is

00:10:58,990 --> 00:11:04,030
completely lost you'd be there with part

00:11:00,760 --> 00:11:05,240
of a ra rx all day and working at which

00:11:04,030 --> 00:11:08,000
files and difference

00:11:05,240 --> 00:11:11,899
trying to use xxd and it's kind of

00:11:08,000 --> 00:11:13,580
nonsense differ scope said got some

00:11:11,899 --> 00:11:15,200
other things as well so if you're trying

00:11:13,580 --> 00:11:18,560
to do reproducible packages and things

00:11:15,200 --> 00:11:21,470
are varying just on the line ordering we

00:11:18,560 --> 00:11:24,890
detect whether a file differs only in

00:11:21,470 --> 00:11:27,890
the line ordering so his file a these

00:11:24,890 --> 00:11:30,920
lines are in order far be has these

00:11:27,890 --> 00:11:33,620
order are in lines that's very difficult

00:11:30,920 --> 00:11:36,110
to say actually it's like those tongue

00:11:33,620 --> 00:11:37,850
twisters run differ scope on those two

00:11:36,110 --> 00:11:39,920
and it says it's got ordering

00:11:37,850 --> 00:11:41,839
differences only that's interesting so

00:11:39,920 --> 00:11:43,790
poor he needs a sort you go all the way

00:11:41,839 --> 00:11:45,740
back to the source code work out very

00:11:43,790 --> 00:11:47,570
very quickly if you know if you know

00:11:45,740 --> 00:11:48,740
it's just ordering differences you just

00:11:47,570 --> 00:11:50,240
kind of know and you know what the

00:11:48,740 --> 00:11:53,000
inputs are gonna be you kind of search

00:11:50,240 --> 00:11:55,100
for order and are and you get the right

00:11:53,000 --> 00:11:57,800
files I just had a sort in the right

00:11:55,100 --> 00:11:58,310
place bam sended patch off everything's

00:11:57,800 --> 00:12:00,050
great

00:11:58,310 --> 00:12:03,950
oh and send it upstream as well because

00:12:00,050 --> 00:12:06,680
look good and it supports a lot more

00:12:03,950 --> 00:12:11,029
things so that we've been showing the

00:12:06,680 --> 00:12:13,100
terminal text output here it's got a

00:12:11,029 --> 00:12:16,010
HTML output mode which is really useful

00:12:13,100 --> 00:12:19,279
in the hierarchical thing when it gets a

00:12:16,010 --> 00:12:20,779
bit more complicated so the dip instead

00:12:19,279 --> 00:12:23,870
of being layer on top of each other like

00:12:20,779 --> 00:12:26,000
a unified if you get the differently

00:12:23,870 --> 00:12:28,760
left and the right and you get sort of a

00:12:26,000 --> 00:12:31,310
nested thing inside with colors and

00:12:28,760 --> 00:12:33,320
lines and you can link to set various

00:12:31,310 --> 00:12:36,589
things in it includes bits and better

00:12:33,320 --> 00:12:39,649
data here and other bits here and what

00:12:36,589 --> 00:12:41,990
command it used so that's the HTML

00:12:39,649 --> 00:12:45,380
output we also support a lot of file

00:12:41,990 --> 00:12:47,390
formats so it's not just on text it

00:12:45,380 --> 00:12:49,399
supports all of these so to very quickly

00:12:47,390 --> 00:12:52,790
run through some of them so you can give

00:12:49,399 --> 00:12:56,750
it to android APK files which I kind of

00:12:52,790 --> 00:12:58,760
like zips but magic and it'll know how

00:12:56,750 --> 00:13:01,430
to compare them so there's like a

00:12:58,760 --> 00:13:03,980
manifest file that needs decoding it

00:13:01,430 --> 00:13:06,320
supports Berkeley DVD faces Word

00:13:03,980 --> 00:13:08,329
documents so that's a Word document with

00:13:06,320 --> 00:13:10,640
a and that's a word document with B and

00:13:08,329 --> 00:13:11,930
it'll correctly do that if you ran that

00:13:10,640 --> 00:13:14,900
through diff normally that would

00:13:11,930 --> 00:13:17,110
obviously be a binary mess so completely

00:13:14,900 --> 00:13:17,110
useless

00:13:17,270 --> 00:13:22,730
ebooks like there's an epub it also

00:13:19,160 --> 00:13:25,130
supports ma B so if you give it to a pub

00:13:22,730 --> 00:13:28,430
files it'll say oh they just differ in

00:13:25,130 --> 00:13:30,140
this state brilliant and normally that

00:13:28,430 --> 00:13:32,270
would be completely useless TIFF binary

00:13:30,140 --> 00:13:33,950
diff again so you can be like up EEP

00:13:32,270 --> 00:13:36,860
update one okay

00:13:33,950 --> 00:13:41,180
grip the source code for that BAM make a

00:13:36,860 --> 00:13:43,970
patch very quickly mono binaries git

00:13:41,180 --> 00:13:46,880
repositories yeah why not numeric

00:13:43,970 --> 00:13:50,000
spreadsheets iso images okay item it is

00:13:46,880 --> 00:13:53,630
really cool so it'll basically unpack

00:13:50,000 --> 00:13:55,670
the iso then inside that they might be i

00:13:53,630 --> 00:13:57,950
say a squash FS image and then it'll

00:13:55,670 --> 00:14:02,110
just completely go down into that and

00:13:57,950 --> 00:14:05,540
work out any differences between the two

00:14:02,110 --> 00:14:08,149
contents in the iso file including any

00:14:05,540 --> 00:14:12,200
metadata so this is on the squash FS

00:14:08,149 --> 00:14:15,850
metadata headers i think but say inside

00:14:12,200 --> 00:14:18,500
that i so there was a file that was a

00:14:15,850 --> 00:14:22,880
you know there was a PDF and inside that

00:14:18,500 --> 00:14:24,860
PDF was a ping far which varied it'll

00:14:22,880 --> 00:14:26,870
basically go all the way down and say

00:14:24,860 --> 00:14:28,850
yeah yeah it's actually here in this

00:14:26,870 --> 00:14:31,070
ping that the data difference and that

00:14:28,850 --> 00:14:32,709
means that you can just go again all go

00:14:31,070 --> 00:14:34,970
all the way back to the source and say

00:14:32,709 --> 00:14:36,829
okay cool we now to fix this quite

00:14:34,970 --> 00:14:39,250
quickly and this is really valuable in

00:14:36,829 --> 00:14:42,250
getting the recent tales distribution

00:14:39,250 --> 00:14:44,810
reproducible so there ISOs are

00:14:42,250 --> 00:14:46,880
reproducible so if you build one and i

00:14:44,810 --> 00:14:49,130
build one we get the exact same one and

00:14:46,880 --> 00:14:51,050
that's kind of useful for something like

00:14:49,130 --> 00:14:53,360
tales where you would probably want to

00:14:51,050 --> 00:14:55,279
of all there's a lot of project you

00:14:53,360 --> 00:14:57,020
might want to compromise you you might

00:14:55,279 --> 00:15:00,370
want to go off to that one because the

00:14:57,020 --> 00:15:00,370
kind of people who are using it yeah

00:15:01,130 --> 00:15:11,209
we support comparing images so this is

00:15:03,980 --> 00:15:13,010
using I think it's using as sng to text

00:15:11,209 --> 00:15:18,589
so and then just running that through

00:15:13,010 --> 00:15:20,180
diff and that is a Linux penguin and

00:15:18,589 --> 00:15:23,770
that is something else I can't remember

00:15:20,180 --> 00:15:27,980
now o ft or some anyway

00:15:23,770 --> 00:15:31,220
suppose images it supports JSON and

00:15:27,980 --> 00:15:34,250
it'll pretty print so if you give it to

00:15:31,220 --> 00:15:38,130
JSON files one with key value after

00:15:34,250 --> 00:15:41,100
it'll do a nice diff of them and it will

00:15:38,130 --> 00:15:43,140
first pretty print it first before doing

00:15:41,100 --> 00:15:45,209
the diff so it'll actually give you

00:15:43,140 --> 00:15:47,970
something clean otherwise I don't know

00:15:45,209 --> 00:15:49,890
if you've ever dipped two very long JSON

00:15:47,970 --> 00:15:52,529
lines if they differ in the middle you

00:15:49,890 --> 00:15:53,700
just get a huge long unified diff but

00:15:52,529 --> 00:15:55,110
here it's like not just those two things

00:15:53,700 --> 00:16:01,140
have changed cool

00:15:55,110 --> 00:16:04,550
brilliant open document text formats or

00:16:01,140 --> 00:16:07,380
audio files because why not

00:16:04,550 --> 00:16:14,070
TT capture files that's actually quite

00:16:07,380 --> 00:16:17,490
useful PDFs so that PDF says hello world

00:16:14,070 --> 00:16:19,980
and this PDF says hello sick sad world

00:16:17,490 --> 00:16:24,390
I don't know why a particular text in

00:16:19,980 --> 00:16:28,350
the demo but yeah so yeah again run that

00:16:24,390 --> 00:16:31,680
through normal diff program garbage XML

00:16:28,350 --> 00:16:35,060
documents again they'll pretty print

00:16:31,680 --> 00:16:37,410
them so it's nice actually nice to read

00:16:35,060 --> 00:16:40,529
so any if you want to get started on

00:16:37,410 --> 00:16:42,060
diffa scope the very easiest and

00:16:40,529 --> 00:16:45,390
quickest way to do is fire up your web

00:16:42,060 --> 00:16:48,779
browser try dr. force Cobra org select

00:16:45,390 --> 00:16:51,570
chief files press compare it and it'll

00:16:48,779 --> 00:16:54,209
upload them and run a run diffa scope in

00:16:51,570 --> 00:16:55,950
with all the support for all the file

00:16:54,209 --> 00:16:58,140
formats in the cloud for you and give

00:16:55,950 --> 00:17:00,089
you a nice HTML page that you can then

00:16:58,140 --> 00:17:02,430
link to people so that's that's the very

00:17:00,089 --> 00:17:04,860
quickest way to get started the next

00:17:02,430 --> 00:17:06,839
week this way is to install try differ

00:17:04,860 --> 00:17:09,240
scope and then even to run that on to

00:17:06,839 --> 00:17:10,770
files and you'll basically do the same

00:17:09,240 --> 00:17:12,959
thing I'll run it in the same cloud

00:17:10,770 --> 00:17:16,260
service as tried if a scope but either

00:17:12,959 --> 00:17:19,620
give you the results on the command line

00:17:16,260 --> 00:17:21,390
or if you pass the web browser option it

00:17:19,620 --> 00:17:22,880
will give you an earl or load your web

00:17:21,390 --> 00:17:24,990
browser I can remember exactly which

00:17:22,880 --> 00:17:26,970
with the same results you don't have to

00:17:24,990 --> 00:17:29,130
install any this is you know one

00:17:26,970 --> 00:17:32,460
kilobyte of Python it's got nothing

00:17:29,130 --> 00:17:34,950
basically so yeah that's the next one

00:17:32,460 --> 00:17:37,340
this way but you can then install differ

00:17:34,950 --> 00:17:39,660
scope itself on your own machine I

00:17:37,340 --> 00:17:42,990
recommend not installing recommends

00:17:39,660 --> 00:17:44,210
because all of those file formats might

00:17:42,990 --> 00:17:47,299
drag in extra

00:17:44,210 --> 00:17:51,230
and thinks about the all of tech I think

00:17:47,299 --> 00:17:53,330
all of OpenOffice all of mono all of

00:17:51,230 --> 00:18:00,350
Java all of yeah

00:17:53,330 --> 00:18:01,789
so yeah and we get quite big yards bunch

00:18:00,350 --> 00:18:05,270
of interesting I think there's another

00:18:01,789 --> 00:18:08,419
big one I can think of yes so they were

00:18:05,270 --> 00:18:11,450
all optional and it will say oh by the

00:18:08,419 --> 00:18:15,169
way I support tech documents or whatever

00:18:11,450 --> 00:18:17,049
mono whatever but you need to install

00:18:15,169 --> 00:18:20,029
this package and then you get like full

00:18:17,049 --> 00:18:21,980
pretty printed support and it'll tell

00:18:20,029 --> 00:18:24,130
you that when it's missing so if you

00:18:21,980 --> 00:18:27,409
just start with install recommends

00:18:24,130 --> 00:18:28,850
disable run it on your file if it says

00:18:27,409 --> 00:18:30,919
please install this package you can then

00:18:28,850 --> 00:18:33,020
install them as you go along as you want

00:18:30,919 --> 00:18:35,240
rather than you know installing

00:18:33,020 --> 00:18:41,750
everything and then you just pass it to

00:18:35,240 --> 00:18:44,059
files and it works as before so how you

00:18:41,750 --> 00:18:47,240
can improve your own quality assurance

00:18:44,059 --> 00:18:49,399
and Debian packaging with your scope the

00:18:47,240 --> 00:18:51,679
biggest the biggest value here is not

00:18:49,399 --> 00:18:54,470
necessarily for reproducible builds it's

00:18:51,679 --> 00:18:56,000
for basically just seeing where you do

00:18:54,470 --> 00:18:58,490
want to have a diff and you're expecting

00:18:56,000 --> 00:19:00,260
a diff and you're expecting a particular

00:18:58,490 --> 00:19:03,620
type of diff and in particular way you

00:19:00,260 --> 00:19:06,529
can basically see those changes and if

00:19:03,620 --> 00:19:11,419
you built two Deb's normally and then

00:19:06,529 --> 00:19:13,490
just ran you know well I'll try a demo

00:19:11,419 --> 00:19:15,020
in a second but if you build a dev with

00:19:13,490 --> 00:19:16,909
a patch applied and then built the dead

00:19:15,020 --> 00:19:20,600
with a patch applied you can obviously

00:19:16,909 --> 00:19:22,429
run a diff on the source package but

00:19:20,600 --> 00:19:24,110
that's not very useful because you know

00:19:22,429 --> 00:19:26,779
it's the binary they're gonna end up on

00:19:24,110 --> 00:19:30,169
people's machines but if you run a diff

00:19:26,779 --> 00:19:31,909
on the binary itself you're like did did

00:19:30,169 --> 00:19:35,330
my changes actually hit the binary I

00:19:31,909 --> 00:19:37,490
don't really know so yeah so I'll just

00:19:35,330 --> 00:19:42,200
I'll just run through a very live demo

00:19:37,490 --> 00:19:49,240
of course so it's gonna fail to switch

00:19:42,200 --> 00:19:49,240
to a it's a big enough for everyone yeah

00:19:49,600 --> 00:19:53,160
this finds him

00:19:57,010 --> 00:20:06,110
well you know I'm a DD I promise so

00:20:03,049 --> 00:20:11,210
we'll check out some we'll get this nip

00:20:06,110 --> 00:20:17,720
net X Java and we'll just build that

00:20:11,210 --> 00:20:19,490
once okay so let's say we are on

00:20:17,720 --> 00:20:21,440
security team and we want to apply patch

00:20:19,490 --> 00:20:22,520
and we want to like just be really sure

00:20:21,440 --> 00:20:28,070
because I'm gonna push it out to all our

00:20:22,520 --> 00:20:40,419
users so first we will make a change in

00:20:28,070 --> 00:20:40,419
law raising a bug

00:20:44,460 --> 00:20:55,890
cool and then we'll find some find some

00:20:51,750 --> 00:21:01,080
Java file to change let's pretend we

00:20:55,890 --> 00:21:05,640
have a real patch let's pretend that the

00:21:01,080 --> 00:21:09,660
Security floor is right okay

00:21:05,640 --> 00:21:11,580
let's replace that equals equals but say

00:21:09,660 --> 00:21:13,950
that was the fix and make it up for

00:21:11,580 --> 00:21:17,420
reason might break okay so that's the

00:21:13,950 --> 00:21:21,470
patch from upstream upstream bless patch

00:21:17,420 --> 00:21:24,540
yes yes yeah probably

00:21:21,470 --> 00:21:26,460
okay so when we build this what we want

00:21:24,540 --> 00:21:28,020
to see is just that change in the file

00:21:26,460 --> 00:21:30,390
we want to see any other nonsense

00:21:28,020 --> 00:21:32,130
changes have accidentally done and but

00:21:30,390 --> 00:21:34,500
we also definitely want to see that

00:21:32,130 --> 00:21:35,820
change because if our binary are far

00:21:34,500 --> 00:21:37,740
security released doesn't have that

00:21:35,820 --> 00:21:39,690
change then we aren't actually fixing

00:21:37,740 --> 00:21:41,910
people's machines will issue a DSA

00:21:39,690 --> 00:21:43,530
everyone will install it and be like oh

00:21:41,910 --> 00:21:45,120
it's nice and secure we actually you

00:21:43,530 --> 00:21:48,630
want I mean yeah you should do proper

00:21:45,120 --> 00:21:55,040
testing as well but hey multiple levels

00:21:48,630 --> 00:21:55,040
right cool so we'll build that again

00:21:57,350 --> 00:22:05,670
that is a test week so that's good

00:22:00,030 --> 00:22:17,420
all right then we will say that

00:22:05,670 --> 00:22:24,510
directory how do you do that so right

00:22:17,420 --> 00:22:28,620
let's do put so we want to diff the

00:22:24,510 --> 00:22:31,770
original one zero five you probably can

00:22:28,620 --> 00:22:37,410
see that we want to dip that one with

00:22:31,770 --> 00:22:41,160
our fake security one there right so you

00:22:37,410 --> 00:22:42,480
see a nice little progress bar 100% one

00:22:41,160 --> 00:22:44,520
there are differences okay

00:22:42,480 --> 00:22:48,120
there should be some differences so

00:22:44,520 --> 00:22:50,850
let's see what those differences are in

00:22:48,120 --> 00:22:52,880
our web browser using the nice HTML

00:22:50,850 --> 00:22:52,880
output

00:22:53,590 --> 00:23:02,990
is that big enough for everyone yeah

00:22:58,270 --> 00:23:07,130
okay so let's have a look are we seeing

00:23:02,990 --> 00:23:09,710
what we want to see so okay there's some

00:23:07,130 --> 00:23:14,690
changes in they can in a day Tatar okay

00:23:09,710 --> 00:23:16,670
we kind of expect that what's changing

00:23:14,690 --> 00:23:18,650
our control file okay well the versions

00:23:16,670 --> 00:23:22,190
changed well we wanted that to change

00:23:18,650 --> 00:23:24,080
perfect and it's changed to nine you're

00:23:22,190 --> 00:23:25,880
on okay cool that's what we want to see

00:23:24,080 --> 00:23:28,330
no other changes here so there was no

00:23:25,880 --> 00:23:31,210
weird controlled or in magic going on

00:23:28,330 --> 00:23:34,970
cool

00:23:31,210 --> 00:23:37,820
right in our data tar Oh with a little

00:23:34,970 --> 00:23:42,110
timestamp changes ok we'll ignore those

00:23:37,820 --> 00:23:44,450
for now the change log has changed well

00:23:42,110 --> 00:23:48,710
I hope so because I did the change with

00:23:44,450 --> 00:23:50,090
entry there's my CV number right here's

00:23:48,710 --> 00:23:51,980
what we want to start seeing we want to

00:23:50,090 --> 00:23:58,190
see a change in the the jar file which

00:23:51,980 --> 00:24:02,500
is the the Java class Java compiled sort

00:23:58,190 --> 00:24:04,880
of archive format okay we're seeing some

00:24:02,500 --> 00:24:07,370
meaningless timestamp changes but we're

00:24:04,880 --> 00:24:14,450
giving northerns let's pretend because

00:24:07,370 --> 00:24:16,520
it's just metadata maybe change a chip

00:24:14,450 --> 00:24:19,549
chip chip chip chip chip okay

00:24:16,520 --> 00:24:22,730
pass the rock class okay so if you can

00:24:19,549 --> 00:24:26,230
see here it's basically done a D

00:24:22,730 --> 00:24:29,630
compilation of the Java file itself and

00:24:26,230 --> 00:24:31,790
he's basically saying that oh it used to

00:24:29,630 --> 00:24:33,380
say if null and if not null so these are

00:24:31,790 --> 00:24:35,750
the actual byte Java bytecode

00:24:33,380 --> 00:24:38,480
instructions and what's really useful

00:24:35,750 --> 00:24:40,520
here is that no other nothing else has

00:24:38,480 --> 00:24:42,049
changed we just expected that change

00:24:40,520 --> 00:24:45,679
between the two opcodes

00:24:42,049 --> 00:24:47,480
of if not if not non null which is good

00:24:45,679 --> 00:24:49,580
it's like it hasn't made any other code

00:24:47,480 --> 00:24:51,290
changes but also crucially we can see

00:24:49,580 --> 00:24:55,910
that it has actually made a change to

00:24:51,290 --> 00:24:57,590
the code for example it wasn't you gonna

00:24:55,910 --> 00:24:59,480
use some cached version or something

00:24:57,590 --> 00:25:02,630
like that so this is really useful and

00:24:59,480 --> 00:25:04,460
just running a naive diff wouldn't have

00:25:02,630 --> 00:25:06,440
given that of course because you to just

00:25:04,460 --> 00:25:07,430
come up with binary garbage and just

00:25:06,440 --> 00:25:09,080
seen that the dev

00:25:07,430 --> 00:25:11,090
change again wouldn't have actually told

00:25:09,080 --> 00:25:12,560
you anything because all the changeover

00:25:11,090 --> 00:25:14,480
would have changed as well so it's like

00:25:12,560 --> 00:25:16,580
well this is different but the

00:25:14,480 --> 00:25:19,970
meaningful change there the actual fix

00:25:16,580 --> 00:25:23,290
is the floor we're just still in present

00:25:19,970 --> 00:25:25,760
but we know it's there yeah so that's

00:25:23,290 --> 00:25:27,170
that's kind of cool you like yeah you so

00:25:25,760 --> 00:25:29,240
shipping this dev out I'd be quite

00:25:27,170 --> 00:25:31,580
confident that that assuming that was

00:25:29,240 --> 00:25:32,660
the actual bug assuming I'd be quite

00:25:31,580 --> 00:25:34,640
confident and pushing that out because

00:25:32,660 --> 00:25:35,750
it's very minimal amount of changes you

00:25:34,640 --> 00:25:42,830
know you want to do that with security

00:25:35,750 --> 00:25:45,110
releases so yeah that's a live demo the

00:25:42,830 --> 00:25:48,350
other one is seeing no changes at all so

00:25:45,110 --> 00:25:50,900
if you you could build once if you build

00:25:48,350 --> 00:25:53,450
is reproducible you could build once

00:25:50,900 --> 00:25:56,060
change your compiler or change some

00:25:53,450 --> 00:25:57,950
other part of your tool chain build it

00:25:56,060 --> 00:26:00,980
again and if you get the exact same

00:25:57,950 --> 00:26:02,660
results well great that's not that's

00:26:00,980 --> 00:26:04,250
what you intended you want to see no

00:26:02,660 --> 00:26:07,130
changes when you change some part of it

00:26:04,250 --> 00:26:09,920
is you mean you want you want to do that

00:26:07,130 --> 00:26:11,600
and that's really useful if there were

00:26:09,920 --> 00:26:13,670
changes differ scope would highlight

00:26:11,600 --> 00:26:15,230
them and show you exactly why they had

00:26:13,670 --> 00:26:17,030
changed it might be some compiler

00:26:15,230 --> 00:26:19,820
optimizations might be some other thing

00:26:17,030 --> 00:26:21,590
as well so you can use it in both ways

00:26:19,820 --> 00:26:23,480
when you expect changes and when you

00:26:21,590 --> 00:26:25,700
don't expect changes and if those don't

00:26:23,480 --> 00:26:30,230
match your expectation differ scope will

00:26:25,700 --> 00:26:33,950
tell you exactly why it's also useful

00:26:30,230 --> 00:26:36,890
when other companies are doing security

00:26:33,950 --> 00:26:41,210
releases so naming no names whatsoever

00:26:36,890 --> 00:26:43,640
but they like to release patches as you

00:26:41,210 --> 00:26:47,630
know just a new firmware for your router

00:26:43,640 --> 00:26:49,880
in big you know fairly large file system

00:26:47,630 --> 00:26:52,610
images you basically no idea what's

00:26:49,880 --> 00:26:54,230
changed between these two files again if

00:26:52,610 --> 00:26:56,180
you run it through a diff completely

00:26:54,230 --> 00:26:59,390
useless you could start to unpack them

00:26:56,180 --> 00:27:02,390
with squash FS and blah blah blah

00:26:59,390 --> 00:27:05,060
but yeah they're probably sort of

00:27:02,390 --> 00:27:07,970
concatenated cpio archives you know so

00:27:05,060 --> 00:27:09,200
there's nonsense but differ scope will

00:27:07,970 --> 00:27:10,790
just chew through those and give you

00:27:09,200 --> 00:27:12,320
actually what the difference is between

00:27:10,790 --> 00:27:14,180
these two files and so you're like okay

00:27:12,320 --> 00:27:17,779
cool it'd have changed this they've

00:27:14,180 --> 00:27:21,200
removed or added some GPL license code

00:27:17,779 --> 00:27:24,469
the quite interesting and yeah yeah for

00:27:21,200 --> 00:27:25,549
example yeah so it's very useful for

00:27:24,469 --> 00:27:28,159
dipping

00:27:25,549 --> 00:27:33,559
those kind of binary blobs that come

00:27:28,159 --> 00:27:35,659
from various people so yeah what's the

00:27:33,559 --> 00:27:39,019
current state of the Divis cope so the

00:27:35,659 --> 00:27:41,899
development isn't up and down I did a

00:27:39,019 --> 00:27:45,259
boy yeah so again it started around well

00:27:41,899 --> 00:27:48,190
was it made 2014 or something like that

00:27:45,259 --> 00:27:54,070
a bunch of work here that's probably

00:27:48,190 --> 00:27:56,419
that is Heidelberg I think no no 15

00:27:54,070 --> 00:27:58,509
these are for just dev comps basically

00:27:56,419 --> 00:28:07,399
yeah

00:27:58,509 --> 00:28:10,940
yes all those I came down maybe these

00:28:07,399 --> 00:28:14,629
dates anyway yeah don't move up and down

00:28:10,940 --> 00:28:15,979
it's kind of interesting it's used a lot

00:28:14,629 --> 00:28:19,369
in the reproducible build projects of

00:28:15,979 --> 00:28:21,499
course so every time we do a a build on

00:28:19,369 --> 00:28:24,320
the tests to reproduce were builds to

00:28:21,499 --> 00:28:26,599
org for testing framework if we run

00:28:24,320 --> 00:28:29,149
differ scope on the result if if it's

00:28:26,599 --> 00:28:32,599
reproducible it just says hey the files

00:28:29,149 --> 00:28:35,210
are the same cool but if not we publish

00:28:32,599 --> 00:28:37,070
the differ scopes of all your packages

00:28:35,210 --> 00:28:38,599
that are unreproducible so you can just

00:28:37,070 --> 00:28:42,460
go on there and be like what's the

00:28:38,599 --> 00:28:42,460
difference between these two things

00:28:43,330 --> 00:28:52,940
adela differences here i think it's some

00:28:47,269 --> 00:28:55,159
ordering whatever does matter cool I

00:28:52,940 --> 00:28:57,169
also did a lot of work optimizing

00:28:55,159 --> 00:29:02,059
difference cope it will had some rather

00:28:57,169 --> 00:29:05,599
perverse and I think n N squared loops

00:29:02,059 --> 00:29:09,440
inside it so managed to cut down so by

00:29:05,599 --> 00:29:12,200
the time here got down here I'm here so

00:29:09,440 --> 00:29:15,309
yes there's been quite a few performance

00:29:12,200 --> 00:29:18,080
enhancements and it over over the past

00:29:15,309 --> 00:29:20,239
these are the get tax so this is version

00:29:18,080 --> 00:29:22,369
80 I think and this is version 50 and I

00:29:20,239 --> 00:29:25,249
just ran the same on a benchmark across

00:29:22,369 --> 00:29:28,940
the mall and so this shows when I've

00:29:25,249 --> 00:29:30,379
introduced some rather rather well I'm

00:29:28,940 --> 00:29:31,100
gonna sleep rather clever optimizations

00:29:30,379 --> 00:29:34,100
it's more like

00:29:31,100 --> 00:29:37,760
moving rather stupid code embarrassing

00:29:34,100 --> 00:29:39,380
but whatever speeds up now there's work

00:29:37,760 --> 00:29:41,030
being done right now on parallel

00:29:39,380 --> 00:29:43,820
processing there's been quite a few

00:29:41,030 --> 00:29:47,150
attempted before but adding it is kind

00:29:43,820 --> 00:29:49,700
of interesting and difficult luckily we

00:29:47,150 --> 00:29:51,940
have a outreach G student Juliana is she

00:29:49,700 --> 00:29:53,960
in the room she hiding

00:29:51,940 --> 00:29:56,330
she's here and she will be talking

00:29:53,960 --> 00:29:58,340
tomorrow about her work on parallel

00:29:56,330 --> 00:30:00,200
processing indifference cope and that'd

00:29:58,340 --> 00:30:02,059
be amazing because um a lot of it sort

00:30:00,200 --> 00:30:04,580
of i/o bound or waiting for external

00:30:02,059 --> 00:30:07,010
processes and with multiple CPU machines

00:30:04,580 --> 00:30:09,409
you might as well display well whilst

00:30:07,010 --> 00:30:11,659
I'm waiting for the result for a PDF to

00:30:09,409 --> 00:30:14,720
be unpacked I might as well be running

00:30:11,659 --> 00:30:16,700
something over on another CPU so I think

00:30:14,720 --> 00:30:18,710
will they see some real performance wins

00:30:16,700 --> 00:30:23,049
once we do get parallel processing

00:30:18,710 --> 00:30:25,190
merged and working and started for that

00:30:23,049 --> 00:30:28,070
you can check out our website differ

00:30:25,190 --> 00:30:34,400
scope talked recently migrated to salsa

00:30:28,070 --> 00:30:36,020
yeah and everything everything the route

00:30:34,400 --> 00:30:38,240
ROM reproduced worlds is now on sulfur

00:30:36,020 --> 00:30:40,159
which is kind of cool

00:30:38,240 --> 00:30:44,690
that's quite recent you know cutting it

00:30:40,159 --> 00:30:46,490
a bit fine so yeah thank you very much

00:30:44,690 --> 00:30:49,429
technician if you've got any questions

00:30:46,490 --> 00:30:51,470
about TIF scope just launch them at all

00:30:49,429 --> 00:30:54,789
got one over here yeah but anyway thank

00:30:51,470 --> 00:30:54,789
you very much okay

00:30:56,810 --> 00:31:01,110
[Applause]

00:30:58,460 --> 00:31:05,070
yeah password question can it if

00:31:01,110 --> 00:31:10,610
container image formats depends which

00:31:05,070 --> 00:31:13,890
ones so if they are just directory

00:31:10,610 --> 00:31:15,990
directories then yes because it's just a

00:31:13,890 --> 00:31:16,380
directory do you have ones particular in

00:31:15,990 --> 00:31:21,630
mind

00:31:16,380 --> 00:31:23,550
like docker yes the obvious one yet his

00:31:21,630 --> 00:31:27,510
stalker and then there's this OC I

00:31:23,550 --> 00:31:30,990
believe it's a standard one and that

00:31:27,510 --> 00:31:32,400
could make it password compliant okay

00:31:30,990 --> 00:31:35,490
well we're all about passwords right

00:31:32,400 --> 00:31:38,220
yeah I mean you probably differ scope

00:31:35,490 --> 00:31:40,080
block changes and then run your differ

00:31:38,220 --> 00:31:41,640
scope on kubernetes and see the

00:31:40,080 --> 00:31:45,450
difference between updates of your

00:31:41,640 --> 00:31:49,110
container images BAM sold where do I

00:31:45,450 --> 00:31:53,280
invest so I wasn't aware that Oh

00:31:49,110 --> 00:31:53,970
LCI oh is that what it's called old CIO

00:31:53,280 --> 00:31:55,860
OCI

00:31:53,970 --> 00:31:58,650
and so no it doesn't basically doesn't

00:31:55,860 --> 00:32:00,390
support that right now but it wouldn't

00:31:58,650 --> 00:32:02,100
be too difficult presumably there are

00:32:00,390 --> 00:32:03,810
tools to unpack it and as soon as we

00:32:02,100 --> 00:32:06,840
have a tool to unpackage it can then

00:32:03,810 --> 00:32:11,390
just go in into that there is a open

00:32:06,840 --> 00:32:15,030
wish list bug for docker containers and

00:32:11,390 --> 00:32:16,320
it to the point where I think it'd be

00:32:15,030 --> 00:32:18,750
really nice if you could just give it

00:32:16,320 --> 00:32:21,360
say two image names or whatever the noun

00:32:18,750 --> 00:32:23,040
is so you can say oh yeah pleased if

00:32:21,360 --> 00:32:24,660
these two docker images that are

00:32:23,040 --> 00:32:27,990
available and it could look at your

00:32:24,660 --> 00:32:29,520
local thing and do a diff on them but

00:32:27,990 --> 00:32:31,830
currently it's not supported but there

00:32:29,520 --> 00:32:34,140
is an open wish this bug yeah it

00:32:31,830 --> 00:32:36,660
shouldn't any company that releases

00:32:34,140 --> 00:32:40,220
binaries be interested in supporting

00:32:36,660 --> 00:32:40,220
differ scope and using it

00:32:44,530 --> 00:32:52,520
the rest for the micro take the

00:32:47,210 --> 00:32:55,040
microphone based basically when company

00:32:52,520 --> 00:33:03,590
releases binary they are not interested

00:32:55,040 --> 00:33:06,620
in users seeing differences so yes yeah

00:33:03,590 --> 00:33:09,590
I'm I'm surprised that actually that the

00:33:06,620 --> 00:33:11,360
the docker bug was only opened two

00:33:09,590 --> 00:33:13,670
months ago so I'm actually surprised

00:33:11,360 --> 00:33:16,190
that there hasn't been more interested

00:33:13,670 --> 00:33:19,160
in dipping container images but if you

00:33:16,190 --> 00:33:22,100
would like to open one for a CI that

00:33:19,160 --> 00:33:30,020
would be really appreciated and we can

00:33:22,100 --> 00:33:33,260
get on to that that'd be great looking

00:33:30,020 --> 00:33:35,930
at the page for a CI it says that it's

00:33:33,260 --> 00:33:38,120
based on document so once I think you

00:33:35,930 --> 00:33:48,680
get a CI for free once you've sorted out

00:33:38,120 --> 00:33:50,840
docker nice good okay the OCI image

00:33:48,680 --> 00:33:53,210
format is they've wrote down how docker

00:33:50,840 --> 00:33:55,670
image okay for this image okay perfect

00:33:53,210 --> 00:33:58,610
and so yeah we'll we'll sort that out

00:33:55,670 --> 00:34:00,340
and yeah it seems like we're using a

00:33:58,610 --> 00:34:02,660
docker a little bit more in debian so

00:34:00,340 --> 00:34:06,980
this is what really quite interesting

00:34:02,660 --> 00:34:10,419
yet cool

00:34:06,980 --> 00:34:10,419
any other questions

00:34:18,610 --> 00:34:25,700
okay out of curiosity which algorithm

00:34:23,360 --> 00:34:29,620
are you using inside

00:34:25,700 --> 00:34:34,040
are you using some bio informatics

00:34:29,620 --> 00:34:38,950
algorithm to deep trees efficiently no

00:34:34,040 --> 00:34:43,310
it's really naive it just just as a

00:34:38,950 --> 00:34:45,760
basically is all it does is run the

00:34:43,310 --> 00:34:49,790
normal diff the normal diff

00:34:45,760 --> 00:34:52,400
but it will do a I will try to identify

00:34:49,790 --> 00:34:56,300
files and unpack them first you see what

00:34:52,400 --> 00:34:59,690
I mean so use the file utility you know

00:34:56,300 --> 00:35:02,510
to me the file identifier thing that

00:34:59,690 --> 00:35:04,700
says this is a PDF and goes okay you're

00:35:02,510 --> 00:35:06,670
a PDF so we'll try and unpack it first

00:35:04,700 --> 00:35:09,170
yeah so it doesn't do any clever

00:35:06,670 --> 00:35:10,880
matching the only the clever matching it

00:35:09,170 --> 00:35:12,440
does do is there's some fuzzy matching

00:35:10,880 --> 00:35:15,320
as well so if you just rename our

00:35:12,440 --> 00:35:18,020
directory between two inside the

00:35:15,320 --> 00:35:20,030
container it'll say yeah there's a

00:35:18,020 --> 00:35:22,240
massive fuzzy match between these

00:35:20,030 --> 00:35:25,010
between these two files things like that

00:35:22,240 --> 00:35:26,840
yeah so that's that's kind of useful but

00:35:25,010 --> 00:35:30,350
apart from that it's not sort of that

00:35:26,840 --> 00:35:32,270
clever which is kind of I think what you

00:35:30,350 --> 00:35:33,830
want because if it was too clever it

00:35:32,270 --> 00:35:37,100
would start to be a little bit opaque

00:35:33,830 --> 00:35:42,190
you'd start to be like whoa yeah I mean

00:35:37,100 --> 00:35:42,190
I personally like quite dumb tools yeah

00:35:42,700 --> 00:35:47,360
so in one question to you would be

00:35:44,690 --> 00:35:52,310
whether we should start you know how if

00:35:47,360 --> 00:35:54,170
you want to do a release to stable or

00:35:52,310 --> 00:35:57,230
something like that and you get asked

00:35:54,170 --> 00:35:59,930
for the the dev diff so I'm wondering if

00:35:57,230 --> 00:36:03,080
anyone I mean I've also when doing that

00:35:59,930 --> 00:36:04,940
myself I've been submitting differ scope

00:36:03,080 --> 00:36:07,520
outputs as well because there's just

00:36:04,940 --> 00:36:09,410
slightly more readable and useful so I'm

00:36:07,520 --> 00:36:15,070
not sure if any would have any objection

00:36:09,410 --> 00:36:15,070
to people asking for those yeah

00:36:17,130 --> 00:36:20,670
instead of just running on the song

00:36:18,660 --> 00:36:22,650
however at least one thumbs-up so yeah

00:36:20,670 --> 00:36:25,950
okay I'll I'll propose that to the

00:36:22,650 --> 00:36:27,450
release team see what they say cool

00:36:25,950 --> 00:36:29,520
anyway thank you very much any other

00:36:27,450 --> 00:36:31,490
questions

00:36:29,520 --> 00:36:33,480
[Music]

00:36:31,490 --> 00:36:38,509
no further questions

00:36:33,480 --> 00:36:38,509
then let's thank Hey

00:36:40,350 --> 00:36:44,690

YouTube URL: https://www.youtube.com/watch?v=m9GN_f1WCAo


