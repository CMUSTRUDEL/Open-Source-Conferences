Title: Ansible best current practices
Publication date: 2018-05-27
Playlist: MiniDebConf Hamburg 2018
Description: 
	by Lee Garrett

At: MiniDebConf Hamburg
https://wiki.debian.org/DebianEvents/de/2018/MiniDebConfHamburg
Room: main
Scheduled start: 2018-05-20 19:00:00
Captions: 
	00:00:05,150 --> 00:00:10,730
thank you everyone for coming if you

00:00:08,090 --> 00:00:13,220
were expecting the Postgres talk that

00:00:10,730 --> 00:00:15,890
was the one before so you might need to

00:00:13,220 --> 00:00:18,920
watch the video stream yes

00:00:15,890 --> 00:00:21,290
so answerable best practices I thought

00:00:18,920 --> 00:00:25,480
about calling it ansible my best

00:00:21,290 --> 00:00:29,930
practices so just warning ahead this is

00:00:25,480 --> 00:00:33,290
things I stumbled on using ansible for

00:00:29,930 --> 00:00:36,079
the last two three years and those are

00:00:33,290 --> 00:00:37,129
like very specific things I found that

00:00:36,079 --> 00:00:40,640
work very well for me

00:00:37,129 --> 00:00:44,870
yeah about me

00:00:40,640 --> 00:00:47,989
I do also freelance work do a lot of

00:00:44,870 --> 00:00:51,199
ansible and there I'm also the Debian

00:00:47,989 --> 00:00:55,489
maintainer for ansible with Harlan Libre

00:00:51,199 --> 00:01:03,010
one so yeah if there are any bugs in the

00:00:55,489 --> 00:01:09,500
package you know just report them yes

00:01:03,010 --> 00:01:16,340
so the talk will be roughly divided into

00:01:09,500 --> 00:01:18,890
four parts the first part will be about

00:01:16,340 --> 00:01:22,190
why you actually want to use conflict

00:01:18,890 --> 00:01:26,480
management and why you specifically want

00:01:22,190 --> 00:01:29,150
to use ansible so if you're still SSA

00:01:26,480 --> 00:01:32,390
Qing into machines and editing config

00:01:29,150 --> 00:01:37,460
files it's probably a good candidate for

00:01:32,390 --> 00:01:41,120
using ansible then the second part will

00:01:37,460 --> 00:01:43,310
be about good role and playbook patterns

00:01:41,120 --> 00:01:48,020
that I have found that work really well

00:01:43,310 --> 00:01:51,200
for me and the third chapter will be

00:01:48,020 --> 00:01:54,920
about typical anti patterns I've

00:01:51,200 --> 00:01:58,850
stumbled upon either in my work with

00:01:54,920 --> 00:02:02,630
other people using ansible or over the

00:01:58,850 --> 00:02:07,160
ISC support channel for example and the

00:02:02,630 --> 00:02:10,250
fourth part will be like advanced tips

00:02:07,160 --> 00:02:11,349
and tricks you can use like fun things

00:02:10,250 --> 00:02:14,920
you can do with asthma

00:02:11,349 --> 00:02:18,999
so a quick elevator pitch what makes

00:02:14,920 --> 00:02:23,379
conflict management good it's actually

00:02:18,999 --> 00:02:26,859
also serves as documentation of changes

00:02:23,379 --> 00:02:28,480
on your servers over time so if you just

00:02:26,859 --> 00:02:31,239
put the whole config management in a git

00:02:28,480 --> 00:02:33,280
repo and just regularly commit you will

00:02:31,239 --> 00:02:35,859
actually be able to say why doesn't this

00:02:33,280 --> 00:02:39,989
work it used to work a year ago you can

00:02:35,859 --> 00:02:39,989
actually check why

00:02:40,650 --> 00:02:49,569
also most config management tools have a

00:02:47,530 --> 00:02:52,000
lot better everywhere reporting than

00:02:49,569 --> 00:02:59,439
your self-written bash scripts that do

00:02:52,000 --> 00:03:02,260
whatever and usually you have a very

00:02:59,439 --> 00:03:04,780
good reproducibility with conflict

00:03:02,260 --> 00:03:09,849
management and also edom potency meaning

00:03:04,780 --> 00:03:11,739
that if you run for example a playbook

00:03:09,849 --> 00:03:16,930
several times you will always get the

00:03:11,739 --> 00:03:21,159
same result also it's great if you work

00:03:16,930 --> 00:03:23,590
in a small team or you have you admin

00:03:21,159 --> 00:03:28,049
main time in the company and you have

00:03:23,590 --> 00:03:30,870
some people working on a few things too

00:03:28,049 --> 00:03:33,549
it makes him work a lot of easier and

00:03:30,870 --> 00:03:35,769
you will save a lot of time actually in

00:03:33,549 --> 00:03:39,540
debugging things when things break in my

00:03:35,769 --> 00:03:42,489
opinion so what makes ansible good

00:03:39,540 --> 00:03:45,699
comparing it to chef or puppet for

00:03:42,489 --> 00:03:48,790
example it's really easy to setup you

00:03:45,699 --> 00:03:52,030
start with to config files you have it

00:03:48,790 --> 00:03:55,090
installed and you're ready to go it's

00:03:52,030 --> 00:03:56,949
also agentless so whatever machines you

00:03:55,090 --> 00:04:01,780
actually want to control the only thing

00:03:56,949 --> 00:04:05,319
they really need to have is an SSH

00:04:01,780 --> 00:04:08,709
daemon and - two-six or upwards so

00:04:05,319 --> 00:04:11,169
that's virtually any debian machine you

00:04:08,709 --> 00:04:13,520
have installed and that it's still

00:04:11,169 --> 00:04:14,629
supported in any way

00:04:13,520 --> 00:04:19,440
[Music]

00:04:14,629 --> 00:04:22,410
ants will also supports configuration of

00:04:19,440 --> 00:04:26,039
very many things like networking

00:04:22,410 --> 00:04:31,490
equipment or even Windows machines they

00:04:26,039 --> 00:04:35,940
don't need SSH but they use the winner

00:04:31,490 --> 00:04:39,000
but ansible isn't came a bit late to the

00:04:35,940 --> 00:04:41,759
game so as well still not as good in

00:04:39,000 --> 00:04:45,000
coverage like for example puppet which

00:04:41,759 --> 00:04:47,130
literally you can configure any machine

00:04:45,000 --> 00:04:52,110
on the planet with that as long as it

00:04:47,130 --> 00:04:57,330
has a CPU yeah next up I will talk about

00:04:52,110 --> 00:04:59,160
good role patterns so if you've never

00:04:57,330 --> 00:05:01,349
worked with ansible before this is the

00:04:59,160 --> 00:05:04,020
point when you watch the video stream

00:05:01,349 --> 00:05:06,539
that you pause it and start working a

00:05:04,020 --> 00:05:14,610
few weeks with it and then unpause the

00:05:06,539 --> 00:05:19,229
actual video so a good role should

00:05:14,610 --> 00:05:21,960
ideally have the following layout so in

00:05:19,229 --> 00:05:25,889
the roles directory you have the name of

00:05:21,960 --> 00:05:32,490
the role and the tasks mainly amel you

00:05:25,889 --> 00:05:36,539
have the following rough layout you at

00:05:32,490 --> 00:05:40,830
the beginning of the role you check for

00:05:36,539 --> 00:05:44,220
various conditions for example using the

00:05:40,830 --> 00:05:47,280
tasks - for example check that certain

00:05:44,220 --> 00:05:51,479
variables are defined things are said

00:05:47,280 --> 00:05:53,630
that it's maybe part of a group things

00:05:51,479 --> 00:05:57,690
like that you actually want to check and

00:05:53,630 --> 00:06:03,449
then usually you install packages you

00:05:57,690 --> 00:06:06,139
can use apps on CentOS machines yum or

00:06:03,449 --> 00:06:10,710
you can do a git checkout or whatever

00:06:06,139 --> 00:06:13,770
then usually you do some templating of

00:06:10,710 --> 00:06:17,190
files where you have certain abstraction

00:06:13,770 --> 00:06:20,219
and the variables are actually put into

00:06:17,190 --> 00:06:21,900
the templates and make the actual config

00:06:20,219 --> 00:06:23,590
file

00:06:21,900 --> 00:06:25,150
there's also

00:06:23,590 --> 00:06:29,320
good to point out that the template

00:06:25,150 --> 00:06:31,930
module actually has a validate parameter

00:06:29,320 --> 00:06:35,169
that means you can actually use a

00:06:31,930 --> 00:06:39,870
command to check your config file for

00:06:35,169 --> 00:06:42,669
syntax errors and if that fails your

00:06:39,870 --> 00:06:44,860
playbook will fail before actually

00:06:42,669 --> 00:06:51,070
deploying that config file so you can

00:06:44,860 --> 00:06:54,760
for example use Apache with the right

00:06:51,070 --> 00:06:57,639
parameters to actually do a con check on

00:06:54,760 --> 00:06:59,770
the syntax of the file so that way you

00:06:57,639 --> 00:07:01,810
never end up with the state where

00:06:59,770 --> 00:07:02,950
there's a broken configure something

00:07:01,810 --> 00:07:06,310
there

00:07:02,950 --> 00:07:08,680
in the end you usually when you change

00:07:06,310 --> 00:07:19,139
things you trigger handlers to restart

00:07:08,680 --> 00:07:24,090
any humans if you use variables I

00:07:19,139 --> 00:07:29,350
recommend putting sensible defaults in

00:07:24,090 --> 00:07:33,490
defaults main llamo and then you only

00:07:29,350 --> 00:07:35,890
have to override those variables on

00:07:33,490 --> 00:07:38,680
specific cases so ideally you should

00:07:35,890 --> 00:07:41,740
have like sensible defaults you want to

00:07:38,680 --> 00:07:46,720
have to get whatever thing that is you

00:07:41,740 --> 00:07:51,310
want to have running when you start

00:07:46,720 --> 00:07:58,630
working with it and do that a bit more

00:07:51,310 --> 00:08:01,539
you notice a few things and that is your

00:07:58,630 --> 00:08:05,139
role should ideally run in check mode

00:08:01,539 --> 00:08:09,060
ansible playbook has - - check that

00:08:05,139 --> 00:08:14,139
basically is just a dry run of your

00:08:09,060 --> 00:08:16,780
complete playbook and with - - diff it

00:08:14,139 --> 00:08:19,570
will actually show you for example file

00:08:16,780 --> 00:08:23,440
changes or file mode changes stuff like

00:08:19,570 --> 00:08:26,350
that and won't actually change anything

00:08:23,440 --> 00:08:33,580
so if you end up editing a lot of stuff

00:08:26,350 --> 00:08:35,620
you can use that as a check and I'll lay

00:08:33,580 --> 00:08:36,820
to get to some anti patterns that

00:08:35,620 --> 00:08:43,060
actually break that

00:08:36,820 --> 00:08:47,260
so yeah and ideally the way you change

00:08:43,060 --> 00:08:49,690
files and config and state you should

00:08:47,260 --> 00:08:52,120
make sure that when the actual changes

00:08:49,690 --> 00:08:52,540
are deployed and you run it a second

00:08:52,120 --> 00:08:56,650
time

00:08:52,540 --> 00:09:00,580
that's ansible doesn't report any

00:08:56,650 --> 00:09:02,980
changes because if you end up writing

00:09:00,580 --> 00:09:06,430
your roles fairly sloppy you end up

00:09:02,980 --> 00:09:08,590
having a lot of changes and then in the

00:09:06,430 --> 00:09:11,710
end of the report you have like 20

00:09:08,590 --> 00:09:13,690
changes reported and you kind of then

00:09:11,710 --> 00:09:15,490
know or will those eighteen they're

00:09:13,690 --> 00:09:16,840
always there and you kind of miss the

00:09:15,490 --> 00:09:20,170
two that are important that actually

00:09:16,840 --> 00:09:23,620
broke your system so if you want to do

00:09:20,170 --> 00:09:25,510
it really well you make sure that it

00:09:23,620 --> 00:09:33,400
doesn't report any changes when you run

00:09:25,510 --> 00:09:36,010
it twice in a row also thing to consider

00:09:33,400 --> 00:09:39,370
is you can define variables in the

00:09:36,010 --> 00:09:43,990
defaults folder and also in the Val's

00:09:39,370 --> 00:09:46,030
folder but if you look up how variables

00:09:43,990 --> 00:09:48,490
get inherited you'll notice that the

00:09:46,030 --> 00:09:52,030
vast fold is really hard to actually

00:09:48,490 --> 00:09:54,420
override so you want to avoid that as

00:09:52,030 --> 00:09:54,420
much as possible

00:09:57,030 --> 00:10:04,060
yeah the much larger section will be

00:10:01,150 --> 00:10:10,030
about and typical anti-patterns i've

00:10:04,060 --> 00:10:17,320
noticed and i'll come to the first one

00:10:10,030 --> 00:10:19,180
now is the shell or command module when

00:10:17,320 --> 00:10:20,800
people start using ansible that's like

00:10:19,180 --> 00:10:24,130
the first thing they go is like oh well

00:10:20,800 --> 00:10:26,770
I I know how to use W get or I know

00:10:24,130 --> 00:10:29,470
apt-get install and then they end up

00:10:26,770 --> 00:10:31,930
using the shell module to do just that

00:10:29,470 --> 00:10:34,330
if you use the shell module or the

00:10:31,930 --> 00:10:39,150
command module usually don't want to use

00:10:34,330 --> 00:10:42,900
that and that's for several reasons

00:10:39,150 --> 00:10:45,190
there's currently I think thousands

00:10:42,900 --> 00:10:48,520
three hundred different modules in

00:10:45,190 --> 00:10:50,610
ansible so there's likely a big chance

00:10:48,520 --> 00:10:52,950
that whatever you want to do there

00:10:50,610 --> 00:10:57,500
already a module for that that just did

00:10:52,950 --> 00:11:03,839
that thing but those two modules also

00:10:57,500 --> 00:11:07,500
have several problems and that is the

00:11:03,839 --> 00:11:10,380
shell module of course gets interpreted

00:11:07,500 --> 00:11:13,380
by your actual shells so if you have any

00:11:10,380 --> 00:11:18,149
special variables and they're you'd

00:11:13,380 --> 00:11:21,360
actually also have to take care of any

00:11:18,149 --> 00:11:25,829
variables you interpret in the shell

00:11:21,360 --> 00:11:29,040
string then one of the biggest problems

00:11:25,829 --> 00:11:32,850
is if you run your PlayBook in check

00:11:29,040 --> 00:11:35,070
mode the shell and the command module

00:11:32,850 --> 00:11:36,839
won't get run so if you're actually

00:11:35,070 --> 00:11:40,890
doing anything with that they just get

00:11:36,839 --> 00:11:45,089
skipped and that might not that will

00:11:40,890 --> 00:11:48,630
cause that your actual check mode and

00:11:45,089 --> 00:11:50,760
sort of the real mode they all start

00:11:48,630 --> 00:11:58,320
diverging if you use a lot of shell

00:11:50,760 --> 00:12:00,899
modules and the worst also a bad part

00:11:58,320 --> 00:12:03,329
about this is that those two modules

00:12:00,899 --> 00:12:05,910
they'll always refer back changed like

00:12:03,329 --> 00:12:11,370
you run a command and it exits zero is

00:12:05,910 --> 00:12:13,500
like oh it changed and so to get the

00:12:11,370 --> 00:12:17,089
reporting right on that module you'd

00:12:13,500 --> 00:12:21,449
actually have to define for yourself

00:12:17,089 --> 00:12:23,940
when this is actually change or not so

00:12:21,449 --> 00:12:30,240
you'd have to probably get the outputs

00:12:23,940 --> 00:12:31,649
and then check for example if there's

00:12:30,240 --> 00:12:38,250
something on standard error or something

00:12:31,649 --> 00:12:41,070
to report an actual error or change then

00:12:38,250 --> 00:12:45,089
I'll get to the actual examples on the

00:12:41,070 --> 00:12:47,240
left is a bad example for using the shed

00:12:45,089 --> 00:12:50,399
shell module I've seen that a lot is

00:12:47,240 --> 00:12:55,380
basically how yeah I actually want this

00:12:50,399 --> 00:12:58,829
file so just use cats path to file and

00:12:55,380 --> 00:13:01,770
I'll use the register parameter to get

00:12:58,829 --> 00:13:06,160
the outputs this is

00:13:01,770 --> 00:13:07,780
do you see anything it's him so the

00:13:06,160 --> 00:13:11,590
actual output goes into the shell

00:13:07,780 --> 00:13:17,140
commands and then we want to copy it to

00:13:11,590 --> 00:13:22,200
some other file somewhere else and so we

00:13:17,140 --> 00:13:24,580
use the ginger double square brackets to

00:13:22,200 --> 00:13:30,130
define the actual content of the fall

00:13:24,580 --> 00:13:32,350
and then put it into that destination

00:13:30,130 --> 00:13:36,070
file and that is problematic because

00:13:32,350 --> 00:13:39,130
well first of all if you run it in check

00:13:36,070 --> 00:13:41,260
mode this gets skipped and then this

00:13:39,130 --> 00:13:43,090
variable is undefined and it will

00:13:41,260 --> 00:13:45,940
ansible will fail with an error so you

00:13:43,090 --> 00:13:49,180
won't be able to actually run that in

00:13:45,940 --> 00:13:52,960
check mode and the other problem is this

00:13:49,180 --> 00:13:57,820
will always report back changed so you'd

00:13:52,960 --> 00:13:59,890
probably have to the most sensible thing

00:13:57,820 --> 00:14:03,250
would probably be to say just changed

00:13:59,890 --> 00:14:05,440
when false and just acknowledge that

00:14:03,250 --> 00:14:08,380
that shell command won't change anything

00:14:05,440 --> 00:14:12,100
on your system so the good example would

00:14:08,380 --> 00:14:16,060
be to use the actual slope module that

00:14:12,100 --> 00:14:21,580
will just slope the whole file and a 64

00:14:16,060 --> 00:14:26,520
encoded and you can access the actual

00:14:21,580 --> 00:14:29,980
content with path file dot contents and

00:14:26,520 --> 00:14:34,750
you then just base 64 decoded and right

00:14:29,980 --> 00:14:38,410
in there and the nice thing is slope

00:14:34,750 --> 00:14:40,210
will never return any change so it won't

00:14:38,410 --> 00:14:47,170
say it changed and it also works great

00:14:40,210 --> 00:14:50,800
in in check mode here's another quick

00:14:47,170 --> 00:14:54,790
example the example on the left

00:14:50,800 --> 00:14:57,940
oh yeah W get here's the problem is

00:14:54,790 --> 00:15:04,240
every time your playbook runs this file

00:14:57,940 --> 00:15:07,180
will get downloaded and of course if the

00:15:04,240 --> 00:15:09,760
file is can't be retrieved from that URL

00:15:07,180 --> 00:15:14,500
it'll throw an error and

00:15:09,760 --> 00:15:16,540
that will happen all the time and the

00:15:14,500 --> 00:15:21,880
right example is a more cleaner example

00:15:16,540 --> 00:15:25,750
using the URI module you define URL to

00:15:21,880 --> 00:15:29,170
retrieve a file from you define where

00:15:25,750 --> 00:15:32,290
you want to write it to and you use the

00:15:29,170 --> 00:15:33,880
creates parameter to say well just skip

00:15:32,290 --> 00:15:42,550
the whole thing of the files already

00:15:33,880 --> 00:15:46,870
then set facts that's my that's my pet

00:15:42,550 --> 00:15:52,720
peeve set facts is a module that allows

00:15:46,870 --> 00:15:55,690
you to define variables during your

00:15:52,720 --> 00:16:00,160
playbook run so you can say set facts

00:15:55,690 --> 00:16:02,019
and then this variable equals that

00:16:00,160 --> 00:16:05,310
variable plus the third variable or

00:16:02,019 --> 00:16:10,060
whatever you can do things with that

00:16:05,310 --> 00:16:13,510
it's very problematic though because you

00:16:10,060 --> 00:16:17,370
end up having your variables change

00:16:13,510 --> 00:16:23,399
during the playbook run and that is a

00:16:17,370 --> 00:16:28,050
problem when you use the - - starts at

00:16:23,399 --> 00:16:28,050
parameter from ansible playbook and

00:16:28,949 --> 00:16:34,480
because if you this this parameter

00:16:32,290 --> 00:16:37,240
allows you to skip forward to a certain

00:16:34,480 --> 00:16:39,100
task in the role so it skips everything

00:16:37,240 --> 00:16:41,110
until that point and then continues

00:16:39,100 --> 00:16:44,829
running down and that's really great for

00:16:41,110 --> 00:16:48,819
debugging but if you define a variable

00:16:44,829 --> 00:16:53,470
with set facts and you skip over it that

00:16:48,819 --> 00:16:57,360
variable will just not be defined so if

00:16:53,470 --> 00:17:00,870
you use if you heavily use set facts

00:16:57,360 --> 00:17:06,880
that makes like prototyping really

00:17:00,870 --> 00:17:09,790
horrible another point is that you can

00:17:06,880 --> 00:17:12,490
use ansible - m setup and then the host

00:17:09,790 --> 00:17:14,730
name to check what variables are

00:17:12,490 --> 00:17:17,860
actually defined for specific cost and

00:17:14,730 --> 00:17:20,910
everything set with set facts is just

00:17:17,860 --> 00:17:24,660
not there so

00:17:20,910 --> 00:17:27,690
yeah in summary avoid the shell module

00:17:24,660 --> 00:17:32,000
avoid the command module avoid setbacks

00:17:27,690 --> 00:17:37,140
as much as you can and don't hide

00:17:32,000 --> 00:17:40,290
changes with changed when so the clean

00:17:37,140 --> 00:17:42,660
approach is always to use one task to

00:17:40,290 --> 00:17:45,270
check something and then the second task

00:17:42,660 --> 00:17:50,220
to actually execute something for

00:17:45,270 --> 00:17:53,520
example and also bad idea in my opinion

00:17:50,220 --> 00:17:55,560
is when people say oh well it's not

00:17:53,520 --> 00:17:58,290
important if this throws an error or not

00:17:55,560 --> 00:18:02,960
I'll just say fails when failed when

00:17:58,290 --> 00:18:05,640
false and that might work sometimes but

00:18:02,960 --> 00:18:08,210
the problem there is if something really

00:18:05,640 --> 00:18:16,410
breaks you'll never find out

00:18:08,210 --> 00:18:20,010
advance topics so this is about the

00:18:16,410 --> 00:18:23,190
templating so the usual approach for

00:18:20,010 --> 00:18:29,180
example for postfix role would be to do

00:18:23,190 --> 00:18:33,150
the following templating you'd define

00:18:29,180 --> 00:18:36,570
certain variables in for example the

00:18:33,150 --> 00:18:39,600
group the group VAR specific service so

00:18:36,570 --> 00:18:42,600
any host in that group would inherit

00:18:39,600 --> 00:18:47,250
these variables so this is sort of a

00:18:42,600 --> 00:18:53,250
list of parameters for SMTP recipient

00:18:47,250 --> 00:18:56,190
restrictions and this is just the SMTP

00:18:53,250 --> 00:18:59,550
he tried so the usual approach would be

00:18:56,190 --> 00:19:02,810
you define variables in the hospitals a

00:18:59,550 --> 00:19:05,610
group files or even in the defaults and

00:19:02,810 --> 00:19:08,910
then you have a template where you just

00:19:05,610 --> 00:19:12,750
check every single variable if it exists

00:19:08,910 --> 00:19:17,030
and if it exists you actually sort of

00:19:12,750 --> 00:19:20,490
put the actual value there in place so

00:19:17,030 --> 00:19:23,190
here I check if this variable is set

00:19:20,490 --> 00:19:27,960
true and if yes I put the string there

00:19:23,190 --> 00:19:30,690
else I put this string there and for

00:19:27,960 --> 00:19:32,540
example SMTP recipient restrictions I

00:19:30,690 --> 00:19:36,050
just iterate of

00:19:32,540 --> 00:19:42,230
disarray and just outputs those values

00:19:36,050 --> 00:19:46,070
in order in in that list so the problem

00:19:42,230 --> 00:19:48,680
here is that every time upstream defines

00:19:46,070 --> 00:19:51,050
a new variable you'll end up having to

00:19:48,680 --> 00:19:58,270
touch the actual template file and touch

00:19:51,050 --> 00:20:02,330
the actual variables so I thought well

00:19:58,270 --> 00:20:05,720
you actually have keys and values and

00:20:02,330 --> 00:20:08,480
strings and arrays and hashes on one

00:20:05,720 --> 00:20:10,190
side and actually a config file as

00:20:08,480 --> 00:20:17,870
nothing else than that just in a

00:20:10,190 --> 00:20:20,120
different format so I came up with the

00:20:17,870 --> 00:20:25,460
fact well the fact with ginger too is

00:20:20,120 --> 00:20:27,230
you can also define functions so I'll

00:20:25,460 --> 00:20:31,970
have to cut short a little bit on

00:20:27,230 --> 00:20:35,090
explaining it but basically up here

00:20:31,970 --> 00:20:37,520
function is defined and it's called here

00:20:35,090 --> 00:20:41,380
in the bottom and basically what it just

00:20:37,520 --> 00:20:45,280
does it iterates over the whole

00:20:41,380 --> 00:20:49,610
dictionary defined here postfix main and

00:20:45,280 --> 00:20:53,510
it just goes well it iterates of all the

00:20:49,610 --> 00:20:54,500
keys and values and it goes well if the

00:20:53,510 --> 00:20:57,830
value is a string

00:20:54,500 --> 00:21:01,490
I'll just put key equals a value and if

00:20:57,830 --> 00:21:03,530
it's an array I just iterate over it and

00:21:01,490 --> 00:21:08,060
put it there in the format that

00:21:03,530 --> 00:21:09,860
Pacific's actually wants and basically

00:21:08,060 --> 00:21:16,220
you can do the same for example for a

00:21:09,860 --> 00:21:19,180
proxy and you can just deserialize all

00:21:16,220 --> 00:21:24,440
the variables you actually don't want so

00:21:19,180 --> 00:21:27,170
the advantages of this is your template

00:21:24,440 --> 00:21:30,530
file just stays the same and it doesn't

00:21:27,170 --> 00:21:32,720
get messy if you start adding things you

00:21:30,530 --> 00:21:35,180
have complete whitespace control usually

00:21:32,720 --> 00:21:38,510
if you edit stuff you kind of get an

00:21:35,180 --> 00:21:40,840
extra space a new line in there and that

00:21:38,510 --> 00:21:44,600
changes the template files for all

00:21:40,840 --> 00:21:47,030
machines you have

00:21:44,600 --> 00:21:50,090
all the settings in alphabetical order

00:21:47,030 --> 00:21:53,240
so if you actually run it and you see

00:21:50,090 --> 00:21:57,050
the diff you don't end up having things

00:21:53,240 --> 00:21:59,090
going back and forth and if you get the

00:21:57,050 --> 00:22:00,470
syntax on the template file right you

00:21:59,090 --> 00:22:04,940
don't have to touch it after that and

00:22:00,470 --> 00:22:15,110
you also don't get any syntax errors by

00:22:04,940 --> 00:22:19,550
editing that so that follows - the next

00:22:15,110 --> 00:22:24,220
one is you can actually set hash

00:22:19,550 --> 00:22:27,950
behavior merge in the ansible config and

00:22:24,220 --> 00:22:34,120
that allows you to do the following on

00:22:27,950 --> 00:22:38,870
the left here you define for example a

00:22:34,120 --> 00:22:40,730
dictionary and this is like in a group

00:22:38,870 --> 00:22:45,260
and then in a specific machine you

00:22:40,730 --> 00:22:48,680
define other setting in this dictionary

00:22:45,260 --> 00:22:50,570
if you wouldn't use merge the second

00:22:48,680 --> 00:22:52,490
setting would just overwrite the first

00:22:50,570 --> 00:22:53,900
one and you'd end up with that but if

00:22:52,490 --> 00:22:58,430
you actually do the merge it just is a

00:22:53,900 --> 00:23:03,050
deep merge of the hash so the previous

00:22:58,430 --> 00:23:04,970
thing I showed would actually benefit

00:23:03,050 --> 00:23:07,330
from that so the combination of both is

00:23:04,970 --> 00:23:10,280
really good

00:23:07,330 --> 00:23:13,970
then I'll skip that yeah further

00:23:10,280 --> 00:23:17,780
resources and support as a really good

00:23:13,970 --> 00:23:21,620
documentation I check that there's the I

00:23:17,780 --> 00:23:26,930
see and there's also DevOps which is a

00:23:21,620 --> 00:23:31,820
project that is specific to Debian and

00:23:26,930 --> 00:23:38,270
derivatives so yeah that's it

00:23:31,820 --> 00:23:41,690
[Applause]

00:23:38,270 --> 00:23:41,690

YouTube URL: https://www.youtube.com/watch?v=4RpqD9GhSOs


