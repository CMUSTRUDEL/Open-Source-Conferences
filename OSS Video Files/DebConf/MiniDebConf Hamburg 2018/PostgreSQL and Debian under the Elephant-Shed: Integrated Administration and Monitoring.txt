Title: PostgreSQL and Debian under the Elephant-Shed: Integrated Administration and Monitoring
Publication date: 2018-05-27
Playlist: MiniDebConf Hamburg 2018
Description: 
	by Michael Banck

At: MiniDebConf Hamburg
https://wiki.debian.org/DebianEvents/de/2018/MiniDebConfHamburg
Room: main
Scheduled start: 2018-05-20 18:30:00
Captions: 
	00:00:04,880 --> 00:00:12,330
okay yeah hello everybody I'm Misha

00:00:08,550 --> 00:00:15,090
Blanc I work at create chief which is

00:00:12,330 --> 00:00:19,849
one of the sponsors and we're doing a

00:00:15,090 --> 00:00:21,929
lot of open source stuff since 1999

00:00:19,849 --> 00:00:25,349
including 24/7 support

00:00:21,929 --> 00:00:28,349
break6 support supporting open source

00:00:25,349 --> 00:00:30,839
projects like it when there if there

00:00:28,349 --> 00:00:31,800
would be a winner we brace to mention

00:00:30,839 --> 00:00:35,430
that but and we're always looking for

00:00:31,800 --> 00:00:36,990
good people so come talk to us we have

00:00:35,430 --> 00:00:39,990
about seven people in a database team

00:00:36,990 --> 00:00:43,080
which I'm one of them and database team

00:00:39,990 --> 00:00:45,180
means Postgres for us we are not super

00:00:43,080 --> 00:00:48,510
happy if clients come with my sequel

00:00:45,180 --> 00:00:54,660
problems but we will try to help them if

00:00:48,510 --> 00:01:00,840
possible so in Debian there is the

00:00:54,660 --> 00:01:02,040
package PostgreSQL team we're packaging

00:01:00,840 --> 00:01:03,960
I'm also part of the team we're

00:01:02,040 --> 00:01:07,680
packaging all the Postgres core server

00:01:03,960 --> 00:01:10,979
but also all the associated projects and

00:01:07,680 --> 00:01:14,249
that's a statistics we probably can see

00:01:10,979 --> 00:01:16,530
a lot here but the app loaders per year

00:01:14,249 --> 00:01:20,210
and the point is that it gets started by

00:01:16,530 --> 00:01:23,759
Martin Pitt who also started with the

00:01:20,210 --> 00:01:26,579
infrastructure for Postgres and he was

00:01:23,759 --> 00:01:30,060
the blue lion so he was doing a lot here

00:01:26,579 --> 00:01:32,460
but then in 2011 2012 the orange line

00:01:30,060 --> 00:01:34,770
which is my colleague crystal Burke took

00:01:32,460 --> 00:01:38,310
over and he did most of the uploads in

00:01:34,770 --> 00:01:41,039
the last couple of years and also the

00:01:38,310 --> 00:01:42,719
yellow orange line a light orange line

00:01:41,039 --> 00:01:45,329
that's Arjen phone and riche

00:01:42,719 --> 00:01:48,299
who's the Debian maintainer he's also

00:01:45,329 --> 00:01:51,630
working at Korea chief so we're doing a

00:01:48,299 --> 00:01:54,959
lot of work in the Postgres Debian and

00:01:51,630 --> 00:01:59,909
Ubuntu basically teams is my point

00:01:54,959 --> 00:02:01,649
I'm the brown one here somewhere that I

00:01:59,909 --> 00:02:03,829
did a couple of uploads not not so many

00:02:01,649 --> 00:02:03,829
No

00:02:05,680 --> 00:02:10,610
so just to give an overview about post

00:02:08,420 --> 00:02:12,740
Chris I guess most people know about it

00:02:10,610 --> 00:02:15,680
it's an extensible object relational

00:02:12,740 --> 00:02:18,290
database system created at Berkeley in

00:02:15,680 --> 00:02:21,260
the 80s but it's been open sourced in

00:02:18,290 --> 00:02:24,440
the 90s and there was some unfortunate

00:02:21,260 --> 00:02:27,680
name changes from Postgres to post Chris

00:02:24,440 --> 00:02:29,140
95 to PostgreSQL when they added SQL it

00:02:27,680 --> 00:02:32,300
didn't have SQL in the beginning and

00:02:29,140 --> 00:02:36,290
it's a BSD license project so there's a

00:02:32,300 --> 00:02:37,820
lot of also proprietary folks there's

00:02:36,290 --> 00:02:41,120
actually also a couple of unforced these

00:02:37,820 --> 00:02:44,180
days so the extension system is so good

00:02:41,120 --> 00:02:46,190
that some vendors were able to run for

00:02:44,180 --> 00:02:47,780
context there there Fork and it's now

00:02:46,190 --> 00:02:49,610
just in a regular extensions of you

00:02:47,780 --> 00:02:50,900
install a vanilla Postgres and you

00:02:49,610 --> 00:02:56,660
install the extension and you have to

00:02:50,900 --> 00:03:00,380
product know the open core know do your

00:02:56,660 --> 00:03:02,420
licensing compared to and there's also

00:03:00,380 --> 00:03:06,110
no copyright sentence so it's very very

00:03:02,420 --> 00:03:09,470
open or free not not very copy lefty I

00:03:06,110 --> 00:03:12,370
have to say but on the other hand all

00:03:09,470 --> 00:03:14,930
these companies who were doing a lot of

00:03:12,370 --> 00:03:17,299
proprietary stuff with post Chris and

00:03:14,930 --> 00:03:19,790
now kind of regretting that they were

00:03:17,299 --> 00:03:21,320
forking ten years ago and Postgres has

00:03:19,790 --> 00:03:24,380
evolved and they're trying to get back

00:03:21,320 --> 00:03:25,610
and it's a lot of work for them so they

00:03:24,380 --> 00:03:27,049
figure it out and they're trying to do

00:03:25,610 --> 00:03:32,299
the work upstream I guess most of the

00:03:27,049 --> 00:03:35,299
time and it's also probably was the

00:03:32,299 --> 00:03:37,640
first open source transaction safe

00:03:35,299 --> 00:03:41,510
database in the mid-90s so my sequel was

00:03:37,640 --> 00:03:44,540
very good at web interface a web browser

00:03:41,510 --> 00:03:46,209
web server kind of stuff quick queries

00:03:44,540 --> 00:03:48,650
but if you where transaction-based

00:03:46,209 --> 00:03:50,329
Postgres was probably the one to choose

00:03:48,650 --> 00:03:52,430
and also debian was actually choosing it

00:03:50,329 --> 00:03:58,220
for quite a few of their projects

00:03:52,430 --> 00:04:01,160
internally so just as a quick overview

00:03:58,220 --> 00:04:02,780
the Postgres community it's called the

00:04:01,160 --> 00:04:04,850
Postgres global development group but

00:04:02,780 --> 00:04:06,620
it's not really a legal entity and a

00:04:04,850 --> 00:04:10,910
sense of SPI or something small like

00:04:06,620 --> 00:04:12,560
Debian but they this is a development

00:04:10,910 --> 00:04:15,970
group and there is a core team of five

00:04:12,560 --> 00:04:17,660
members right now I believe and

00:04:15,970 --> 00:04:18,260
important part is that they have a

00:04:17,660 --> 00:04:21,020
released

00:04:18,260 --> 00:04:22,730
No and they didn't have it a couple of

00:04:21,020 --> 00:04:26,180
years ago and they were slipping and

00:04:22,730 --> 00:04:28,100
their releases but now it's there and

00:04:26,180 --> 00:04:34,160
they're keeping track of it there's

00:04:28,100 --> 00:04:35,750
around 20 committers one of our one of

00:04:34,160 --> 00:04:38,420
our president is one of the commuters

00:04:35,750 --> 00:04:43,310
Michaelmas cos he's actually committing

00:04:38,420 --> 00:04:46,010
quite some stuff but not a lot and it's

00:04:43,310 --> 00:04:48,410
it's when a neutral basically yeah no

00:04:46,010 --> 00:04:50,390
company owns it no company is dominating

00:04:48,410 --> 00:04:52,190
it there's a few companies doing quite a

00:04:50,390 --> 00:04:54,080
bit of development on it but it's not

00:04:52,190 --> 00:04:57,680
owned by any particular company and you

00:04:54,080 --> 00:05:00,350
can get support from basically different

00:04:57,680 --> 00:05:03,320
sources if you want you're not tied to

00:05:00,350 --> 00:05:05,000
one company they have now again a yearly

00:05:03,320 --> 00:05:06,710
release cycle as a set I think the nine

00:05:05,000 --> 00:05:08,780
five release three years ago was

00:05:06,710 --> 00:05:10,520
slipping to the next year but they used

00:05:08,780 --> 00:05:13,010
to release an autumn and now they're

00:05:10,520 --> 00:05:14,960
back on track and it's a bit like Debian

00:05:13,010 --> 00:05:16,670
so they have a time-based freeze feature

00:05:14,960 --> 00:05:18,890
freeze which just happened for the next

00:05:16,670 --> 00:05:21,560
release it happened in the end of March

00:05:18,890 --> 00:05:23,090
or beginning of April and now they're in

00:05:21,560 --> 00:05:25,790
the better or their it's going to be a

00:05:23,090 --> 00:05:27,770
beta release and in next week or in two

00:05:25,790 --> 00:05:30,530
weeks and then they will consolidate

00:05:27,770 --> 00:05:32,830
that fix all the bugs and it's the next

00:05:30,530 --> 00:05:35,960
major release is supposed to come out in

00:05:32,830 --> 00:05:39,860
August or September somewhere third

00:05:35,960 --> 00:05:42,350
quarter and also it was somewhat

00:05:39,860 --> 00:05:43,550
remarkable they have five years of

00:05:42,350 --> 00:05:45,590
maintenance per release so they're

00:05:43,550 --> 00:05:48,500
always really basically supporting five

00:05:45,590 --> 00:05:51,500
different major releases and they also

00:05:48,500 --> 00:05:53,510
moved to a quarterly pet release cycle

00:05:51,500 --> 00:05:54,770
so you can go on the Postgres website

00:05:53,510 --> 00:05:58,430
and there's a column that says the next

00:05:54,770 --> 00:05:59,900
patch release will be out blah blah blah

00:05:58,430 --> 00:06:01,040
I think it was actually last week that

00:05:59,900 --> 00:06:04,820
the last one was out so the next one

00:06:01,040 --> 00:06:06,890
will be out in three months and they are

00:06:04,820 --> 00:06:09,890
very conservative they're only fixing

00:06:06,890 --> 00:06:11,630
bugs or security issues and so they're

00:06:09,890 --> 00:06:13,550
basically white lists about it having

00:06:11,630 --> 00:06:15,250
stable release managers they just upload

00:06:13,550 --> 00:06:18,020
it as is you don't need to back patch

00:06:15,250 --> 00:06:20,060
the patch release just like they're just

00:06:18,020 --> 00:06:23,870
uploading the the patch releases as a

00:06:20,060 --> 00:06:25,960
new up new upstream pet release

00:06:23,870 --> 00:06:27,669
basically

00:06:25,960 --> 00:06:31,720
I talked about that there's quite a few

00:06:27,669 --> 00:06:35,699
of our Hydra folks that's that's how it

00:06:31,720 --> 00:06:38,349
goes to the BSD license so main features

00:06:35,699 --> 00:06:41,560
quick overview it's packaged in Debian

00:06:38,349 --> 00:06:44,259
yeah it's rock-solid and I think they a

00:06:41,560 --> 00:06:45,669
bit proud that they were first going for

00:06:44,259 --> 00:06:48,490
the rock-solid part and then for the

00:06:45,669 --> 00:06:50,020
speed part so there's there's some

00:06:48,490 --> 00:06:51,160
issues of course there has been some box

00:06:50,020 --> 00:06:53,949
over the years they add new features

00:06:51,160 --> 00:06:56,169
they have bugs but overall you can be

00:06:53,949 --> 00:06:58,930
pretty certain that your data is not

00:06:56,169 --> 00:07:02,380
being eaten all the time by the database

00:06:58,930 --> 00:07:05,650
server and as a SQL Server it has a

00:07:02,380 --> 00:07:11,380
pretty good and on consistent and easy

00:07:05,650 --> 00:07:15,699
to figure out use of the SQL standard so

00:07:11,380 --> 00:07:17,500
there's no real surprises and it has a

00:07:15,699 --> 00:07:19,270
couple of useful modern extensions and

00:07:17,500 --> 00:07:22,210
you serve JSON support pretty early on

00:07:19,270 --> 00:07:25,659
and that kind of stuff you can have key

00:07:22,210 --> 00:07:27,880
value stores much early own it has a

00:07:25,659 --> 00:07:29,650
cost base very planner that means that

00:07:27,880 --> 00:07:32,020
it tries to figure out okay how do I run

00:07:29,650 --> 00:07:35,500
this query what's the best way to run it

00:07:32,020 --> 00:07:38,310
what's the least cost cool way and it's

00:07:35,500 --> 00:07:40,509
just trying to run that that plan and

00:07:38,310 --> 00:07:43,030
pretty nice for administrators it has

00:07:40,509 --> 00:07:45,669
transactional changes to the database

00:07:43,030 --> 00:07:48,460
structure so you can start a transaction

00:07:45,669 --> 00:07:49,840
you can drop a table and then you can

00:07:48,460 --> 00:07:53,039
roll back and the table is still there

00:07:49,840 --> 00:07:55,750
and not every database product has that

00:07:53,039 --> 00:07:57,750
and then the extensibility is pretty

00:07:55,750 --> 00:07:59,949
good there is drivers for many

00:07:57,750 --> 00:08:01,539
programming languages for many

00:07:59,949 --> 00:08:06,280
procedural languages so you can run

00:08:01,539 --> 00:08:11,650
server procedures in R or in Python or

00:08:06,280 --> 00:08:13,330
Perl or in shell if you must and in the

00:08:11,650 --> 00:08:16,270
last couple of years the foreign data

00:08:13,330 --> 00:08:19,270
wrapper thing has also been extensively

00:08:16,270 --> 00:08:21,550
used so you can have federated access to

00:08:19,270 --> 00:08:25,630
other data sources or other Postgres

00:08:21,550 --> 00:08:27,699
servers that's that's really something

00:08:25,630 --> 00:08:32,440
that that's being exploited more and

00:08:27,699 --> 00:08:34,919
more also for bigger features like

00:08:32,440 --> 00:08:37,449
trying to implement sharding we

00:08:34,919 --> 00:08:39,849
accelerated access over over remote data

00:08:37,449 --> 00:08:42,219
sources and there's a large number of

00:08:39,849 --> 00:08:47,050
tensions and associated product so this

00:08:42,219 --> 00:08:49,870
is just a kind of the slight overview

00:08:47,050 --> 00:08:51,910
about what what's kind of in core and

00:08:49,870 --> 00:08:56,740
then external extensions you can have

00:08:51,910 --> 00:08:59,079
there's quite a few we have lots of

00:08:56,740 --> 00:09:00,970
sauce packages in the package PostgreSQL

00:08:59,079 --> 00:09:02,949
team but these are a couple of them

00:09:00,970 --> 00:09:07,870
which have been uploaded or nuisance

00:09:02,949 --> 00:09:09,100
stretch so just as a quick overview I

00:09:07,870 --> 00:09:13,000
don't want to get into too much detail

00:09:09,100 --> 00:09:14,500
here and if you're interested in the new

00:09:13,000 --> 00:09:16,149
feature so stretch came out with the

00:09:14,500 --> 00:09:18,040
nine point six and then actually change

00:09:16,149 --> 00:09:19,480
the major version scheme to ten so there

00:09:18,040 --> 00:09:21,639
is only one number now and the next one

00:09:19,480 --> 00:09:24,310
will be 11 and 12 as every year there

00:09:21,639 --> 00:09:28,149
will be an increment of one and since

00:09:24,310 --> 00:09:31,870
then so 10 and 11 gave us oops sorry

00:09:28,149 --> 00:09:33,069
logical replication so we had physical

00:09:31,870 --> 00:09:35,110
replication before but now there's

00:09:33,069 --> 00:09:37,000
logical replication and we have native

00:09:35,110 --> 00:09:39,160
speculative partitioning there was not

00:09:37,000 --> 00:09:42,040
there before you had to come up with

00:09:39,160 --> 00:09:43,870
fancy schemes and we'll have

00:09:42,040 --> 00:09:46,269
just-in-time compilation of expressions

00:09:43,870 --> 00:09:48,939
so this is an 11 this will be out by the

00:09:46,269 --> 00:09:51,550
time basser will probably freeze if we

00:09:48,939 --> 00:09:53,829
have we hope that this will be 1111 will

00:09:51,550 --> 00:09:54,699
be in Buster and a couple of other

00:09:53,829 --> 00:09:56,709
things

00:09:54,699 --> 00:09:58,930
I'm not going to into very much detail

00:09:56,709 --> 00:10:02,019
but there's new features coming every

00:09:58,930 --> 00:10:04,029
year basically so post Chris and Debian

00:10:02,019 --> 00:10:07,290
how is it working so Debian packages

00:10:04,029 --> 00:10:10,060
only one post release per version and

00:10:07,290 --> 00:10:11,769
the problem then is obvious that we have

00:10:10,060 --> 00:10:13,240
several there in releases and we have

00:10:11,769 --> 00:10:15,250
several post press releases and if you

00:10:13,240 --> 00:10:18,579
have some project which relies on a

00:10:15,250 --> 00:10:20,139
particular Postgres version or you want

00:10:18,579 --> 00:10:21,579
to upgrade your debian one but you want

00:10:20,139 --> 00:10:24,939
to keep the post chris one that's there

00:10:21,579 --> 00:10:27,750
is a problem there so what people came

00:10:24,939 --> 00:10:30,759
up with in the package PostgreSQL team

00:10:27,750 --> 00:10:32,649
they were trying to make or their they

00:10:30,759 --> 00:10:34,420
made all the versions code installable

00:10:32,649 --> 00:10:37,089
so you can install the 9 6 and 10

00:10:34,420 --> 00:10:39,730
Postgres servers on the same machine

00:10:37,089 --> 00:10:41,740
their different sauce packages and they

00:10:39,730 --> 00:10:44,439
live in different sub directories and

00:10:41,740 --> 00:10:47,949
there's a PostgreSQL come infrastructure

00:10:44,439 --> 00:10:51,220
which handles takes care of figuring out

00:10:47,949 --> 00:10:52,110
where the different database instances

00:10:51,220 --> 00:10:54,240
should go

00:10:52,110 --> 00:10:56,040
and they all listening on it on a

00:10:54,240 --> 00:10:59,580
different port so you can address them

00:10:56,040 --> 00:11:03,300
from the outside differently but then

00:10:59,580 --> 00:11:05,160
still you have only stretch in 96 so in

00:11:03,300 --> 00:11:07,470
theory you could install both but how do

00:11:05,160 --> 00:11:09,779
you get the other one and that's where

00:11:07,470 --> 00:11:11,970
the Postgres upstream team came in and

00:11:09,779 --> 00:11:15,329
it's basically my colleague Christopher

00:11:11,970 --> 00:11:18,720
Burke who is also affiliated with the

00:11:15,329 --> 00:11:20,790
upstream team he came up with a

00:11:18,720 --> 00:11:22,200
PostgreSQL dock so that's a project by

00:11:20,790 --> 00:11:24,060
the Postgres global development group

00:11:22,200 --> 00:11:26,490
but it's basically the same source

00:11:24,060 --> 00:11:29,640
packages as Debian users but their

00:11:26,490 --> 00:11:31,529
recompiling or rebuilding all the

00:11:29,640 --> 00:11:32,279
Postgres versions for all the Debian and

00:11:31,529 --> 00:11:35,339
Ubuntu

00:11:32,279 --> 00:11:38,190
LTS versions so if you need nine four

00:11:35,339 --> 00:11:39,600
four Bionic you can get it there you

00:11:38,190 --> 00:11:42,300
just have to put the right sources list

00:11:39,600 --> 00:11:47,250
and there's like obviously a pretty

00:11:42,300 --> 00:11:49,050
large number of sources this 144 oops so

00:11:47,250 --> 00:11:52,649
we have three architectures that we're

00:11:49,050 --> 00:11:55,589
supporting the PowerPC 64 is pretty

00:11:52,649 --> 00:11:58,470
recent but we had a meu 64 nine 386

00:11:55,589 --> 00:12:00,930
before and county is a Debian and Ubuntu

00:11:58,470 --> 00:12:04,370
releases so Bionic should be there now

00:12:00,930 --> 00:12:06,450
and the 11 releases this testing

00:12:04,370 --> 00:12:08,279
basically but the other ones are there

00:12:06,450 --> 00:12:11,640
there those are the ones who just still

00:12:08,279 --> 00:12:13,950
are supported upstream 9 3 will be D

00:12:11,640 --> 00:12:16,890
supported in September when 2011 comes

00:12:13,950 --> 00:12:20,100
out so there so if somebody uploads a

00:12:16,890 --> 00:12:22,070
new version of a new sauce package from

00:12:20,100 --> 00:12:29,190
any of the package PostgreSQL team

00:12:22,070 --> 00:12:32,220
there's a Jenkins build server run by DG

00:12:29,190 --> 00:12:35,730
I don't net actually so people also I'm

00:12:32,220 --> 00:12:38,640
sponsoring this conference and this will

00:12:35,730 --> 00:12:40,829
rebuild all the binary packages for all

00:12:38,640 --> 00:12:42,720
the distributions and all the well if

00:12:40,829 --> 00:12:44,339
needed Postgres version somewheres an

00:12:42,720 --> 00:12:48,329
independent that some actually need a

00:12:44,339 --> 00:12:49,589
proper Postgres version and it's also

00:12:48,329 --> 00:12:51,899
running the auto package test so we're

00:12:49,589 --> 00:12:53,760
trying to run the auto package tests if

00:12:51,899 --> 00:12:58,940
possible to see that it's actually

00:12:53,760 --> 00:13:01,740
working and install portions so

00:12:58,940 --> 00:13:03,360
PostgreSQL come working it's a it allows

00:13:01,740 --> 00:13:05,220
multiple versions to be consult already

00:13:03,360 --> 00:13:07,680
said that

00:13:05,220 --> 00:13:10,440
every instance in identified bear

00:13:07,680 --> 00:13:11,970
worship and class the name so the

00:13:10,440 --> 00:13:14,280
default name is main and the beef

00:13:11,970 --> 00:13:18,180
abortion would be nine six for example

00:13:14,280 --> 00:13:20,460
and every new instance get a new port so

00:13:18,180 --> 00:13:21,930
if you get a second cluster from the

00:13:20,460 --> 00:13:23,190
nine six version it will be running on

00:13:21,930 --> 00:13:25,440
five four three three and you need to

00:13:23,190 --> 00:13:27,720
have another name and there's reppers

00:13:25,440 --> 00:13:29,820
where you can say okay this is the

00:13:27,720 --> 00:13:31,440
binary the declined and you tell it

00:13:29,820 --> 00:13:33,840
cluster nine four main so that's a

00:13:31,440 --> 00:13:36,360
debian addition how to address that

00:13:33,840 --> 00:13:39,050
particular cluster if you don't want to

00:13:36,360 --> 00:13:41,610
know the the port number for example and

00:13:39,050 --> 00:13:43,710
there's a did you come to where you can

00:13:41,610 --> 00:13:45,690
read and edit parameter files easily and

00:13:43,710 --> 00:13:48,450
there's a couple of other things for

00:13:45,690 --> 00:13:50,970
example you can create we have this gray

00:13:48,450 --> 00:13:53,580
cluster configuration file which you can

00:13:50,970 --> 00:13:56,070
get a couple of options here and also

00:13:53,580 --> 00:13:58,920
you can get any additional conflict

00:13:56,070 --> 00:14:00,600
parameters so they will be copied into

00:13:58,920 --> 00:14:03,960
the PostgreSQL that confer main

00:14:00,600 --> 00:14:07,530
configuration file so great so this is

00:14:03,960 --> 00:14:10,440
how you can run several Postgres

00:14:07,530 --> 00:14:13,290
versions but if you're actually running

00:14:10,440 --> 00:14:15,660
Postgres in production you're just you

00:14:13,290 --> 00:14:20,160
don't just run at the Postgres server

00:14:15,660 --> 00:14:21,750
yeah you have you have to well you have

00:14:20,160 --> 00:14:23,010
two operating system and all that kind

00:14:21,750 --> 00:14:25,350
of stuff that's that's clear but you

00:14:23,010 --> 00:14:28,340
also have backups you need restore

00:14:25,350 --> 00:14:30,300
retention time you need monitoring

00:14:28,340 --> 00:14:33,990
usually if you're writing production

00:14:30,300 --> 00:14:37,050
performance alerting also reporting and

00:14:33,990 --> 00:14:39,390
maybe you also need high availability so

00:14:37,050 --> 00:14:42,230
how does that work we we at creative

00:14:39,390 --> 00:14:45,780
came up with a way of gluing together

00:14:42,230 --> 00:14:49,140
several open source projects based on

00:14:45,780 --> 00:14:51,900
PostgreSQL common basically and some

00:14:49,140 --> 00:14:55,350
systemd glue and we're trying to make

00:14:51,900 --> 00:14:57,750
Postgres as easy as possible amusing by

00:14:55,350 --> 00:14:59,160
having it's kind of like an appliance so

00:14:57,750 --> 00:15:01,500
you can download it and you can run it

00:14:59,160 --> 00:15:03,420
and it has a complete environment where

00:15:01,500 --> 00:15:06,390
all these things I just mentioned

00:15:03,420 --> 00:15:08,550
already set up for you and it's modular

00:15:06,390 --> 00:15:10,650
and extensible if you want it's just

00:15:08,550 --> 00:15:11,970
Debian packages and we have a couple of

00:15:10,650 --> 00:15:14,190
clients who are interested only in the

00:15:11,970 --> 00:15:16,790
monitoring stuff so they can just take

00:15:14,190 --> 00:15:18,690
that and use it for they're already

00:15:16,790 --> 00:15:20,160
maybe they're running it

00:15:18,690 --> 00:15:21,510
redhead or something so they can just

00:15:20,160 --> 00:15:24,480
take that part if they're interesting

00:15:21,510 --> 00:15:26,970
and it's over 1% open-source it's on

00:15:24,480 --> 00:15:30,180
github we're trying to get all the

00:15:26,970 --> 00:15:32,790
packages into Debian we're not there yet

00:15:30,180 --> 00:15:35,340
but at least the glue code is is

00:15:32,790 --> 00:15:37,620
open-source and we're committed to

00:15:35,340 --> 00:15:41,370
having a long term maintained and

00:15:37,620 --> 00:15:43,410
commercial support so those are the

00:15:41,370 --> 00:15:45,030
things that we're doing right now I'm

00:15:43,410 --> 00:15:48,000
getting into more detail right now so

00:15:45,030 --> 00:15:50,400
there's a it's web-based I didn't

00:15:48,000 --> 00:15:54,270
mention that maybe until now so you have

00:15:50,400 --> 00:15:57,030
a web-based interface this is the

00:15:54,270 --> 00:15:59,010
dashboard where you can get to all the

00:15:57,030 --> 00:16:01,470
the other parts of the thing and you get

00:15:59,010 --> 00:16:04,650
a overview over all the clusters running

00:16:01,470 --> 00:16:06,720
on that local machine so I have to say

00:16:04,650 --> 00:16:09,330
that it's mostly useful if you have a

00:16:06,720 --> 00:16:14,250
local machine where you were able to run

00:16:09,330 --> 00:16:20,520
a web server and expose that stuff to

00:16:14,250 --> 00:16:24,090
yourself and for easy maintenance yeah

00:16:20,520 --> 00:16:26,490
Postgres the main interesting part I

00:16:24,090 --> 00:16:28,560
would say is or one of the things that

00:16:26,490 --> 00:16:30,090
we actually put a lot of effort into is

00:16:28,560 --> 00:16:33,420
the monitoring which is beta on

00:16:30,090 --> 00:16:36,330
Prometheus and Crisanta so it's using a

00:16:33,420 --> 00:16:39,450
SQL exporters thing to Prometheus which

00:16:36,330 --> 00:16:41,640
is an upstream project we forked it for

00:16:39,450 --> 00:16:45,240
some performance stuff but it's not

00:16:41,640 --> 00:16:46,920
written by us and it there is no

00:16:45,240 --> 00:16:50,790
exporter in SQL exporter and those

00:16:46,920 --> 00:16:53,850
metrics are then exposed to grow fauna

00:16:50,790 --> 00:16:55,350
for dashboards that we also set up so

00:16:53,850 --> 00:16:58,950
you can easily monitor your Postgres

00:16:55,350 --> 00:17:00,720
instance that looks like that there's

00:16:58,950 --> 00:17:04,740
some more pictures or maybe I'll have

00:17:00,720 --> 00:17:07,020
time for a live demo in a minute but

00:17:04,740 --> 00:17:10,170
basically we set up all the dashboards

00:17:07,020 --> 00:17:12,089
and we also put in all the the metrics

00:17:10,170 --> 00:17:14,490
that we SQL metrics that we wanted out

00:17:12,089 --> 00:17:16,530
of SQL exported because that SQL

00:17:14,490 --> 00:17:17,790
exporter is actually a database agnostic

00:17:16,530 --> 00:17:21,510
thing and doesn't have any metrics

00:17:17,790 --> 00:17:23,280
itself so we came up with a metrics the

00:17:21,510 --> 00:17:27,590
database administration is done by PG

00:17:23,280 --> 00:17:31,890
admin 4 which is now a web based DBA

00:17:27,590 --> 00:17:33,630
interface this one was a big problem

00:17:31,890 --> 00:17:36,810
because it's philosophy is Python

00:17:33,630 --> 00:17:38,280
there's a lots of dependencies and after

00:17:36,810 --> 00:17:40,260
infinite reach has been trying to get it

00:17:38,280 --> 00:17:42,650
into Debian fully I'm not sure the

00:17:40,260 --> 00:17:45,179
current status but it's mostly there

00:17:42,650 --> 00:17:46,980
it's certainly needed because the the

00:17:45,179 --> 00:17:51,360
old PG admin 3 interface which was

00:17:46,980 --> 00:17:53,850
written in C or C++ is deprecated so we

00:17:51,360 --> 00:17:56,010
need this now and you can use it for

00:17:53,850 --> 00:17:58,610
either edgehog SQL queries or just to

00:17:56,010 --> 00:18:00,960
get an interview over all your tables

00:17:58,610 --> 00:18:03,390
for schema management and user

00:18:00,960 --> 00:18:05,490
management and dump restore stuff we're

00:18:03,390 --> 00:18:08,130
doing backups using

00:18:05,490 --> 00:18:11,580
PG backrest which is an external project

00:18:08,130 --> 00:18:14,280
it's can do it does physical backups so

00:18:11,580 --> 00:18:17,330
you can it archives your transaction

00:18:14,280 --> 00:18:19,650
logs and and you can do go back in time

00:18:17,330 --> 00:18:21,179
you can commune restore it's actually

00:18:19,650 --> 00:18:23,929
right now I have to say we're doing the

00:18:21,179 --> 00:18:26,370
backups for you with retention times but

00:18:23,929 --> 00:18:30,300
restore has to been done manually for

00:18:26,370 --> 00:18:32,010
now this is only to do this yeah we have

00:18:30,300 --> 00:18:33,810
a preferred PostgreSQL confidence we

00:18:32,010 --> 00:18:35,700
take advantage of the Postgres cocom

00:18:33,810 --> 00:18:37,950
framework here where you can drop in the

00:18:35,700 --> 00:18:41,340
right configuration parameters for PG

00:18:37,950 --> 00:18:44,160
backrest in the template from PostgreSQL

00:18:41,340 --> 00:18:46,200
calm and it so it can work there's a

00:18:44,160 --> 00:18:48,780
prepare systemd timer is every time you

00:18:46,200 --> 00:18:50,030
actually create a new cluster there will

00:18:48,780 --> 00:18:53,070
be a system D

00:18:50,030 --> 00:18:55,320
service or timer prepared for backups

00:18:53,070 --> 00:18:57,929
being done so you don't have to set it

00:18:55,320 --> 00:19:00,090
up yourself or you can do it ad hoc if

00:18:57,929 --> 00:19:02,100
you want there's a button on the

00:19:00,090 --> 00:19:04,200
interface we're in some locks all

00:19:02,100 --> 00:19:06,780
analysts not going to go into detail

00:19:04,200 --> 00:19:09,120
here a lot because it's it's PG badger

00:19:06,780 --> 00:19:12,060
it's pretty standard log file analysis

00:19:09,120 --> 00:19:15,120
also having a haughty ml HTML report of

00:19:12,060 --> 00:19:17,010
it and we're using cockpit for system

00:19:15,120 --> 00:19:18,990
management basically mostly so you can

00:19:17,010 --> 00:19:20,550
see the log files or you can start and

00:19:18,990 --> 00:19:22,830
stop the instances but you can also use

00:19:20,550 --> 00:19:24,540
it for all the other stuff so cockpit is

00:19:22,830 --> 00:19:26,190
a system written by Red Hat

00:19:24,540 --> 00:19:28,950
but Martin did know I think is working

00:19:26,190 --> 00:19:31,320
on it also you can use it for all the

00:19:28,950 --> 00:19:34,700
system-wide administration and in theory

00:19:31,320 --> 00:19:38,130
also to actually update your your system

00:19:34,700 --> 00:19:41,550
um we're supporting right now

00:19:38,130 --> 00:19:43,680
debian stable mostly but since the next

00:19:41,550 --> 00:19:47,820
release we're also supporting

00:19:43,680 --> 00:19:50,250
ionic for the server for their clients I

00:19:47,820 --> 00:19:52,170
would say and the server can be it's

00:19:50,250 --> 00:19:53,520
more not a big problem

00:19:52,170 --> 00:19:56,190
you need you have to prometheus

00:19:53,520 --> 00:19:59,690
exporters that's basically it we have

00:19:56,190 --> 00:20:03,240
packages for both of those execs

00:19:59,690 --> 00:20:06,330
amd64 empowers Roetzel further

00:20:03,240 --> 00:20:08,460
development the one to zero wineries

00:20:06,330 --> 00:20:11,100
just happened two days ago and this one

00:20:08,460 --> 00:20:15,930
we managed to update to graph an a5 and

00:20:11,100 --> 00:20:18,270
for me first - so that so now is a good

00:20:15,930 --> 00:20:20,640
time to try it because before yeah all

00:20:18,270 --> 00:20:21,930
that all the Prometheus metrics would

00:20:20,640 --> 00:20:24,780
have to be thrown away because I'm not

00:20:21,930 --> 00:20:26,940
sure it's it's upgrade or at least we

00:20:24,780 --> 00:20:28,350
haven't I'm not a pro me first expert

00:20:26,940 --> 00:20:30,840
but as far as I understand you couldn't

00:20:28,350 --> 00:20:34,950
use the new old data with the new

00:20:30,840 --> 00:20:36,270
Prometheus you cannot right so now's a

00:20:34,950 --> 00:20:37,770
good time to try it because we just made

00:20:36,270 --> 00:20:40,680
the move to Prometheus - and hopefully

00:20:37,770 --> 00:20:42,810
this will be more stable going forward

00:20:40,680 --> 00:20:44,730
and we have a monitoring dashboard and

00:20:42,810 --> 00:20:46,380
as I said there's Bionic support what we

00:20:44,730 --> 00:20:47,730
want to do in the future is get redhead

00:20:46,380 --> 00:20:49,650
and central support so some customers

00:20:47,730 --> 00:20:53,160
asking for that yes quite a few

00:20:49,650 --> 00:20:55,170
and and also adrian funding terry has

00:20:53,160 --> 00:20:58,230
been working on a PostgreSQL comm rest

00:20:55,170 --> 00:21:02,400
api so it would be much easier so this

00:20:58,230 --> 00:21:03,990
is a good job repo and so you can do

00:21:02,400 --> 00:21:06,630
configuration changes or instant

00:21:03,990 --> 00:21:09,720
management via the REST API so right now

00:21:06,630 --> 00:21:11,100
actually creating an instance means you

00:21:09,720 --> 00:21:14,370
have to create the instance on a command

00:21:11,100 --> 00:21:15,540
line it will be there automatically on

00:21:14,370 --> 00:21:17,220
the web front-end but he cannot create

00:21:15,540 --> 00:21:19,710
an instance but then you will be able to

00:21:17,220 --> 00:21:21,780
actually create or destroy instances

00:21:19,710 --> 00:21:24,290
three of a web interface and we're also

00:21:21,780 --> 00:21:27,720
looking at a multi host administration

00:21:24,290 --> 00:21:30,210
if possible so we can use you can

00:21:27,720 --> 00:21:32,520
combine the view of them several servers

00:21:30,210 --> 00:21:34,500
but this is a slightly bigger project

00:21:32,520 --> 00:21:36,840
which we're not having a date and a real

00:21:34,500 --> 00:21:40,130
timeline right so if you want to try it

00:21:36,840 --> 00:21:44,310
out you can do it there's a vagrant box

00:21:40,130 --> 00:21:46,560
takes a bit of this space but ok and you

00:21:44,310 --> 00:21:48,780
can just run a current waking up and

00:21:46,560 --> 00:21:50,700
then you have all these things and

00:21:48,780 --> 00:21:54,890
basically the the web GUI is here and

00:21:50,700 --> 00:21:57,290
you your initiative basically good to go

00:21:54,890 --> 00:21:59,840
and the website is elephant shed thought

00:21:57,290 --> 00:22:01,430
i/o if you want to check it out and I

00:21:59,840 --> 00:22:03,440
have to say that most of the work has

00:22:01,430 --> 00:22:06,100
been done by Christoph and Alexander and

00:22:03,440 --> 00:22:08,450
not rearm so shout out to them and

00:22:06,100 --> 00:22:10,460
further information elephants at i/o

00:22:08,450 --> 00:22:11,900
there's the github it's it's on github

00:22:10,460 --> 00:22:15,260
we don't have an internal repository

00:22:11,900 --> 00:22:17,750
anymore it's all on github and some

00:22:15,260 --> 00:22:19,220
information if you're looking if you're

00:22:17,750 --> 00:22:21,560
interested in then working for us or

00:22:19,220 --> 00:22:25,280
interested in as a as a client or in

00:22:21,560 --> 00:22:26,900
January you can you can go there and my

00:22:25,280 --> 00:22:37,040
content address is there so I think I'm

00:22:26,900 --> 00:22:54,530
mostly out of time anyway and anyway I'm

00:22:37,040 --> 00:22:59,930
done and if there's any questions hey I

00:22:54,530 --> 00:23:03,320
was curious if you have markets all this

00:22:59,930 --> 00:23:06,230
stuff because of interesting especially

00:23:03,320 --> 00:23:06,590
for graph on ax and the changes done

00:23:06,230 --> 00:23:09,980
today

00:23:06,590 --> 00:23:12,170
primitive support and all that so we

00:23:09,980 --> 00:23:15,920
have a we have a local there in

00:23:12,170 --> 00:23:18,890
repository which I didn't put the link

00:23:15,920 --> 00:23:20,450
on um I can give it to you I mean it's

00:23:18,890 --> 00:23:22,610
it's it's public and it should be

00:23:20,450 --> 00:23:25,790
actually on the elephants at i/o well

00:23:22,610 --> 00:23:28,670
website I'm pretty sure and I don't

00:23:25,790 --> 00:23:29,990
think we have lots of for like we're

00:23:28,670 --> 00:23:34,070
using the graph on our packages this

00:23:29,990 --> 00:23:35,990
might be slightly adopted but it might

00:23:34,070 --> 00:23:38,210
be a pre-release or something so we we

00:23:35,990 --> 00:23:41,530
are obviously not using stretch in that

00:23:38,210 --> 00:23:44,060
sense but you can look it there and then

00:23:41,530 --> 00:23:46,430
if there's any questions you can that we

00:23:44,060 --> 00:23:47,480
can also discuss later I cannot say it

00:23:46,430 --> 00:23:49,670
we're not because I didn't upload the

00:23:47,480 --> 00:23:53,630
fermitas packages to that repo but

00:23:49,670 --> 00:23:55,220
mostly interested in there to mention

00:23:53,630 --> 00:23:57,860
something we're trying to move them into

00:23:55,220 --> 00:23:59,420
Debian if that's a package PostgreSQL

00:23:57,860 --> 00:24:01,910
stuff we do it directly because we have

00:23:59,420 --> 00:24:03,720
the upload stuff if not we're trying to

00:24:01,910 --> 00:24:12,990
talk to the people or not

00:24:03,720 --> 00:24:15,690
I kind of thought thanks is when talking

00:24:12,990 --> 00:24:18,600
about updating versions you said that

00:24:15,690 --> 00:24:20,879
for updating Nate's visiting in the data

00:24:18,600 --> 00:24:25,080
you will need two versions of past

00:24:20,879 --> 00:24:27,779
versus Cal why is that and how to how

00:24:25,080 --> 00:24:30,840
the process looks like well that's a

00:24:27,779 --> 00:24:32,820
good question it takes so they're on

00:24:30,840 --> 00:24:36,600
this format general between major

00:24:32,820 --> 00:24:39,480
versions is not comfortable you can use

00:24:36,600 --> 00:24:41,909
an in on there's in-place upgrades using

00:24:39,480 --> 00:24:45,000
it's called T G upgrade but you need to

00:24:41,909 --> 00:24:47,490
data directories for that you don't

00:24:45,000 --> 00:24:49,259
necessarily need to you need to copy all

00:24:47,490 --> 00:24:51,120
the data but at least you need to places

00:24:49,259 --> 00:24:53,909
and then there needs to be some

00:24:51,120 --> 00:24:55,620
transformation done so it's not a you

00:24:53,909 --> 00:24:57,269
cannot just so far from minor patch

00:24:55,620 --> 00:24:58,529
releases you just put in the Debian

00:24:57,269 --> 00:24:59,909
packages and restart the store but

00:24:58,529 --> 00:25:02,460
that's not a problem but for major

00:24:59,909 --> 00:25:04,379
updates the system catalogs change and

00:25:02,460 --> 00:25:06,360
then other things change so either you

00:25:04,379 --> 00:25:09,509
need to dump all the data to backup and

00:25:06,360 --> 00:25:12,659
restore it or you need to do this in

00:25:09,509 --> 00:25:15,470
place up great thing and then you need

00:25:12,659 --> 00:25:17,610
both versions installed obviously

00:25:15,470 --> 00:25:19,350
because the you need both servers

00:25:17,610 --> 00:25:21,539
running at the same time in two

00:25:19,350 --> 00:25:23,309
different data directories is that

00:25:21,539 --> 00:25:26,539
basically answering your question but

00:25:23,309 --> 00:25:29,100
it's I mean upgrades is a huge huge

00:25:26,539 --> 00:25:31,669
topic for the Posca so I could go on for

00:25:29,100 --> 00:25:31,669
now and then

00:25:33,180 --> 00:25:38,410
[Music]

00:25:41,529 --> 00:25:46,580
this seems like a very turnkey solution

00:25:44,269 --> 00:25:50,720
you just put it on and it works but who

00:25:46,580 --> 00:25:53,419
we looked to who are you selling this or

00:25:50,720 --> 00:25:55,249
who will solve this because I I mean

00:25:53,419 --> 00:25:57,259
it's a bunch of thing as regrading all

00:25:55,249 --> 00:25:58,399
works together but if I wanted to put

00:25:57,259 --> 00:26:00,019
that in my system it wouldn't work

00:25:58,399 --> 00:26:02,179
because I already have monitoring all

00:26:00,019 --> 00:26:04,220
your backups it's right if you already

00:26:02,179 --> 00:26:04,639
have all of that then maybe you don't

00:26:04,220 --> 00:26:06,200
need it

00:26:04,639 --> 00:26:08,059
some people as a set are interested just

00:26:06,200 --> 00:26:10,039
in the rivana dashboards and for me

00:26:08,059 --> 00:26:13,940
first metrics if you already have that

00:26:10,039 --> 00:26:16,999
they might be interested in there and

00:26:13,940 --> 00:26:19,820
it's I think it's an interesting way to

00:26:16,999 --> 00:26:22,669
come up if you have a new say your your

00:26:19,820 --> 00:26:25,190
a database guy and you want to check out

00:26:22,669 --> 00:26:26,450
Postgres but you don't want to come up

00:26:25,190 --> 00:26:28,460
with a huge project then you can install

00:26:26,450 --> 00:26:30,289
it locally at first and then see ok

00:26:28,460 --> 00:26:33,499
everything's working and then maybe also

00:26:30,289 --> 00:26:35,299
deployed somewhere else certainly I

00:26:33,499 --> 00:26:37,879
wouldn't recommend it for multi terabyte

00:26:35,299 --> 00:26:40,519
databases and stuff like that but just

00:26:37,879 --> 00:26:43,369
to try it out it's very easy it's just a

00:26:40,519 --> 00:26:44,869
waking box and you can take parts of it

00:26:43,369 --> 00:26:47,389
if you anyway running on Debbie and you

00:26:44,869 --> 00:26:53,940
can just take parts of it and you're

00:26:47,389 --> 00:26:57,049
good to go alright thank you yeah

00:26:53,940 --> 00:26:57,049
[Music]

00:26:57,970 --> 00:27:01,570

YouTube URL: https://www.youtube.com/watch?v=IwIZlY5hUY8


