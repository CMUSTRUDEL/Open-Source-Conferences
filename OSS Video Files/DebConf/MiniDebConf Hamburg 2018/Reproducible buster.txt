Title: Reproducible buster
Publication date: 2018-05-27
Playlist: MiniDebConf Hamburg 2018
Description: 
	by Holger Levsen, et al.

At: MiniDebConf Hamburg
https://wiki.debian.org/DebianEvents/de/2018/MiniDebConfHamburg
Room: main
Scheduled start: 2018-05-20 15:00:00
Captions: 
	00:00:04,540 --> 00:00:14,260
hello this will be the talk about

00:00:07,809 --> 00:00:19,750
reproducible builds presented by Stephen

00:00:14,260 --> 00:00:27,220
Chris Yatim and myself Hoidal I just

00:00:19,750 --> 00:00:31,390
leave this state stage now for ya tom hi

00:00:27,220 --> 00:00:37,749
everybody so welcome to our talk and we

00:00:31,390 --> 00:00:39,940
will present repulsively Buster well as

00:00:37,749 --> 00:00:42,699
you know reversible builds have the

00:00:39,940 --> 00:00:45,489
purpose to enable to anyone to reproduce

00:00:42,699 --> 00:00:49,269
the identical binary packages from a

00:00:45,489 --> 00:00:52,539
given source and our project goals are

00:00:49,269 --> 00:00:55,959
enabled the insured Bills have identical

00:00:52,539 --> 00:00:58,239
results and also we want to change the

00:00:55,959 --> 00:01:04,839
meaning of free software it is only free

00:00:58,239 --> 00:01:08,470
software if it is reproducible during

00:01:04,839 --> 00:01:11,950
the last months we we have given some

00:01:08,470 --> 00:01:16,000
talks like bong hack all system go all

00:01:11,950 --> 00:01:18,750
things open also hack meet free not live

00:01:16,000 --> 00:01:23,530
qua comp open company and summit

00:01:18,750 --> 00:01:27,070
linux.com dot ow first them scale Neelu

00:01:23,530 --> 00:01:30,540
liber planet Easter hey Minnie DEFCON

00:01:27,070 --> 00:01:37,110
Curitiba first North flows UK an

00:01:30,540 --> 00:01:40,810
mentioned by several talks at 3/4 C 3

00:01:37,110 --> 00:01:42,070
what we have new since Def Con 17 in

00:01:40,810 --> 00:01:47,400
Montreal

00:01:42,070 --> 00:01:50,800
ok we have done the migration to salsa

00:01:47,400 --> 00:01:55,570
also we had a theory possible built

00:01:50,800 --> 00:01:59,290
summit in Berlin and we have discussing

00:01:55,570 --> 00:02:04,960
about the new logo and the voting and

00:01:59,290 --> 00:02:11,590
this is the new logo for our team but

00:02:04,960 --> 00:02:15,609
not the final typeface and color but we

00:02:11,590 --> 00:02:18,689
will soon have t-shirts which we like

00:02:15,609 --> 00:02:18,689
wanted for more than a year

00:02:24,810 --> 00:02:35,080
okay so since debconf in Montreal a few

00:02:31,660 --> 00:02:39,820
things have happened in GCC upstream a

00:02:35,080 --> 00:02:45,370
patch was merged that is called macro

00:02:39,820 --> 00:02:49,420
prefix map this in our use case refers

00:02:45,370 --> 00:02:53,950
to build paths and being embedded in the

00:02:49,420 --> 00:02:59,860
binary so in this small example see

00:02:53,950 --> 00:03:03,190
source file use of this file macro if if

00:02:59,860 --> 00:03:05,920
you come if the if the compilation

00:03:03,190 --> 00:03:12,310
process calls the compiler with full

00:03:05,920 --> 00:03:13,630
path to to main dot C then the the

00:03:12,310 --> 00:03:17,380
current working directory would end up

00:03:13,630 --> 00:03:18,730
embedded in the binary and so depending

00:03:17,380 --> 00:03:21,840
who builds the package they will always

00:03:18,730 --> 00:03:24,549
get a different result to someone else

00:03:21,840 --> 00:03:26,320
in the case of Debian brill's the build

00:03:24,549 --> 00:03:29,470
path is random every time so this would

00:03:26,320 --> 00:03:33,400
be a this this opens a whole class of

00:03:29,470 --> 00:03:36,840
reproducibility issues in packages but

00:03:33,400 --> 00:03:41,410
this this new option in upstream GCC

00:03:36,840 --> 00:03:46,480
allow us to do kind of a search we plays

00:03:41,410 --> 00:03:49,780
of the the the path wherever it is used

00:03:46,480 --> 00:03:54,670
in macros and change it to something

00:03:49,780 --> 00:04:00,209
that is reproducible between different

00:03:54,670 --> 00:04:00,209
builds of the source file like so

00:04:04,710 --> 00:04:10,180
we are talking with four people so maybe

00:04:07,450 --> 00:04:14,080
but um the problem with this build pass

00:04:10,180 --> 00:04:16,299
issue is that for basta we just say we

00:04:14,080 --> 00:04:18,730
use the same build pass as it was

00:04:16,299 --> 00:04:20,950
originally built to reproduce because s

00:04:18,730 --> 00:04:22,900
we won't have this third 93% we're

00:04:20,950 --> 00:04:25,420
having but we would have something in

00:04:22,900 --> 00:04:28,210
the 80s because this bug is not solved

00:04:25,420 --> 00:04:31,240
but in GCC and many other compilers so

00:04:28,210 --> 00:04:33,100
if we say for basta we say just use the

00:04:31,240 --> 00:04:36,820
same build path to reproduce than the

00:04:33,100 --> 00:04:37,990
original build but this is so

00:04:36,820 --> 00:04:40,030
that's why we don't want to do this

00:04:37,990 --> 00:04:42,730
that's why people are dealing with this

00:04:40,030 --> 00:04:45,520
GCC build process but it's a long-term

00:04:42,730 --> 00:04:47,110
goal maybe not even bullseye I guess

00:04:45,520 --> 00:04:48,700
we'll take some time because there's

00:04:47,110 --> 00:04:51,160
other compilers having the same issue

00:04:48,700 --> 00:04:53,170
but we want to fix this properly so

00:04:51,160 --> 00:05:04,300
that's why we're discussing this and

00:04:53,170 --> 00:05:14,800
then we spend put it away so there was a

00:05:04,300 --> 00:05:16,930
bug report late last year where thanks

00:05:14,800 --> 00:05:19,930
to a package being reproducible it was

00:05:16,930 --> 00:05:23,110
possible to test and if I drop a

00:05:19,930 --> 00:05:25,270
particular build dependency at Build

00:05:23,110 --> 00:05:27,669
time and built a package does it make

00:05:25,270 --> 00:05:30,370
any difference to the binary output

00:05:27,669 --> 00:05:35,190
because if it doesn't then it doesn't

00:05:30,370 --> 00:05:35,190
need to be there as a bill dependency so

00:05:35,250 --> 00:05:40,270
this is one possible application of

00:05:38,070 --> 00:05:43,600
reproducible bills that wasn't really

00:05:40,270 --> 00:05:45,700
intended or much thought about but some

00:05:43,600 --> 00:05:49,840
kind of automated QA could be possible

00:05:45,700 --> 00:05:53,110
there to find is a build dependency

00:05:49,840 --> 00:05:57,520
really necessary because if it's not

00:05:53,110 --> 00:05:58,960
that could mean it's wrongly listed in

00:05:57,520 --> 00:06:01,060
the bill dependencies or it could mean

00:05:58,960 --> 00:06:03,370
that something is wrongly compiled and

00:06:01,060 --> 00:06:05,169
not used at bil dependency and not

00:06:03,370 --> 00:06:12,160
enabled a feature that it should have

00:06:05,169 --> 00:06:15,370
enabled so reproducible builds extends

00:06:12,160 --> 00:06:16,690
way beyond Debian itself for example the

00:06:15,370 --> 00:06:18,169
religious will build some it brought

00:06:16,690 --> 00:06:22,370
together people from many

00:06:18,169 --> 00:06:26,539
open-source projects not it's not at all

00:06:22,370 --> 00:06:30,340
limited to Debian there's been a lot of

00:06:26,539 --> 00:06:33,710
interest and activity and other projects

00:06:30,340 --> 00:06:36,020
actually nooks announced they were able

00:06:33,710 --> 00:06:38,389
to with a modified version of the

00:06:36,020 --> 00:06:40,550
package manager' reproduce at least

00:06:38,389 --> 00:06:43,490
eighty percent of their packages

00:06:40,550 --> 00:06:45,680
openSUSE ninety three percent net BST

00:06:43,490 --> 00:06:47,419
and FreeBSD potentially one hundred

00:06:45,680 --> 00:06:52,250
percent with the right configuration

00:06:47,419 --> 00:06:53,569
options for the build tails have gone

00:06:52,250 --> 00:06:54,919
even further with their three point

00:06:53,569 --> 00:06:57,310
three release and again in three point

00:06:54,919 --> 00:07:01,939
six point one they they made the whole

00:06:57,310 --> 00:07:04,879
installation binary media bit for bit

00:07:01,939 --> 00:07:06,909
reproducible which is sort of the

00:07:04,879 --> 00:07:10,339
ultimate goal

00:07:06,909 --> 00:07:13,539
similarly open wrt can do this for at

00:07:10,339 --> 00:07:15,979
least some of the images they produce

00:07:13,539 --> 00:07:20,199
and then there's plenty more interest in

00:07:15,979 --> 00:07:22,879
in other projects that are looking to

00:07:20,199 --> 00:07:25,699
promote that the fact that they support

00:07:22,879 --> 00:07:30,650
or enable or help with reproducible

00:07:25,699 --> 00:07:33,770
builds in some way shortly after the

00:07:30,650 --> 00:07:36,379
depth confident montreal it was accepted

00:07:33,770 --> 00:07:39,529
into the policy that Debian packages

00:07:36,379 --> 00:07:43,449
should be built reproducibly but that's

00:07:39,529 --> 00:07:43,449
not a hard requirement of course

00:07:43,659 --> 00:07:56,360
so what's still missing in Debian I'm

00:07:51,919 --> 00:07:59,360
the one telling the bad news so di

00:07:56,360 --> 00:08:01,969
images are not reproducible and nobody

00:07:59,360 --> 00:08:03,680
is working on this so if you want to get

00:08:01,969 --> 00:08:05,870
involved into reproducible builds and

00:08:03,680 --> 00:08:08,300
have some spare cycles look at the eye

00:08:05,870 --> 00:08:11,659
images why they are not reproducible

00:08:08,300 --> 00:08:13,699
that is rather easy task PDI twice

00:08:11,659 --> 00:08:19,419
run differ scope on it and fix the

00:08:13,699 --> 00:08:19,419
problem choose needs

00:08:22,740 --> 00:08:29,229
and this is the other thing that's also

00:08:27,160 --> 00:08:31,270
Debian CD images could also be made

00:08:29,229 --> 00:08:32,919
reproducible just like the tales I saw

00:08:31,270 --> 00:08:35,919
because they are they would still

00:08:32,919 --> 00:08:38,800
contain with unreproducible packages but

00:08:35,919 --> 00:08:42,130
they are reproducibly assembled into the

00:08:38,800 --> 00:08:43,719
same images all the time the other thing

00:08:42,130 --> 00:08:45,790
what we are not doing we don't compare

00:08:43,719 --> 00:08:47,740
against packages from the archive we

00:08:45,790 --> 00:08:50,380
just compare packages we built because

00:08:47,740 --> 00:08:55,330
packages we build but not the real ones

00:08:50,380 --> 00:08:57,430
on Debian that should be fixed and that

00:08:55,330 --> 00:09:03,010
would help us detect when maintained as

00:08:57,430 --> 00:09:05,890
build an unclean environments and then

00:09:03,010 --> 00:09:08,260
funding has impact and it's actually

00:09:05,890 --> 00:09:10,750
rather the lack of funding because we

00:09:08,260 --> 00:09:13,630
were we used to be get paid or some of

00:09:10,750 --> 00:09:14,980
us used to get paid by the core

00:09:13,630 --> 00:09:17,310
infrastructure initiative and that

00:09:14,980 --> 00:09:20,350
funding ran out at the end of last year

00:09:17,310 --> 00:09:23,350
so since then we have less progress on

00:09:20,350 --> 00:09:26,230
new developments stuff like the GCC

00:09:23,350 --> 00:09:27,640
stuff stuff like comparing packages

00:09:26,230 --> 00:09:29,860
against the real archive lots of

00:09:27,640 --> 00:09:32,680
progress is slowing down some things

00:09:29,860 --> 00:09:36,190
even go backwards like it's not only

00:09:32,680 --> 00:09:38,260
Jenkins is 54 hosts running these tests

00:09:36,190 --> 00:09:41,320
and there's some issues on I 386 there's

00:09:38,260 --> 00:09:43,170
some issues here and there and there's

00:09:41,320 --> 00:09:45,490
no time to fix those

00:09:43,170 --> 00:09:48,520
there's impact on collaboration and

00:09:45,490 --> 00:09:51,610
community like there's the summit in

00:09:48,520 --> 00:09:53,529
Berlin needs to be prepared soon like in

00:09:51,610 --> 00:09:55,180
two or three months and somebody needs

00:09:53,529 --> 00:09:56,740
to do it and I used to do it the last

00:09:55,180 --> 00:09:58,779
three times and I'm not sure if I have

00:09:56,740 --> 00:10:02,170
time or go walking somewhere and make

00:09:58,779 --> 00:10:05,380
money and we keep up the weekly block

00:10:02,170 --> 00:10:07,570
and the block about our success every

00:10:05,380 --> 00:10:10,810
week so people think oh this is growing

00:10:07,570 --> 00:10:13,240
nicely nicely nicely and don't realize

00:10:10,810 --> 00:10:18,040
that it's going slower and slower and

00:10:13,240 --> 00:10:19,660
not so good so we had won't have funding

00:10:18,040 --> 00:10:21,730
we it would be interesting to get

00:10:19,660 --> 00:10:23,920
funding to extend this to keep the work

00:10:21,730 --> 00:10:28,750
done because it's still a lot of work

00:10:23,920 --> 00:10:32,230
and then Debian is wrong are the things

00:10:28,750 --> 00:10:35,050
wrong me this 93% is a lie

00:10:32,230 --> 00:10:37,780
we need infrastructure we need processes

00:10:35,050 --> 00:10:39,490
and policies not only the motive and

00:10:37,780 --> 00:10:41,650
policy it should be really producing

00:10:39,490 --> 00:10:44,140
but the should be policy that there must

00:10:41,650 --> 00:10:46,090
be reproducible that the securities

00:10:44,140 --> 00:10:48,340
things have to be in place these things

00:10:46,090 --> 00:10:51,820
what we have at the moment is testing

00:10:48,340 --> 00:10:54,460
but we only have testing or seq a thing

00:10:51,820 --> 00:10:56,820
and we have a way goal packages should

00:10:54,460 --> 00:10:58,360
be reproducible but it's not a must so

00:10:56,820 --> 00:11:01,780
who cares

00:10:58,360 --> 00:11:03,910
and there's an upcoming list of bugs and

00:11:01,780 --> 00:11:07,630
was that we don't want to finger point

00:11:03,910 --> 00:11:10,150
at teams but rather make it clear what's

00:11:07,630 --> 00:11:12,220
missing because only if it's clear that

00:11:10,150 --> 00:11:14,020
there's some things are not there we can

00:11:12,220 --> 00:11:18,310
fix them because if you think everything

00:11:14,020 --> 00:11:20,290
is fine we cannot fix them and most of

00:11:18,310 --> 00:11:24,760
the things we can remove alone even if

00:11:20,290 --> 00:11:26,710
we have FTP team member on board he also

00:11:24,760 --> 00:11:31,620
cannot do everything and the FTP team

00:11:26,710 --> 00:11:36,880
and it must come from Debian I think so

00:11:31,620 --> 00:11:39,880
one of the major blockers is and the

00:11:36,880 --> 00:11:42,430
it's unclear whether it's an SPD part or

00:11:39,880 --> 00:11:45,010
deep deep packet it's that when you do a

00:11:42,430 --> 00:11:47,050
sauce only upload in amd64

00:11:45,010 --> 00:11:49,930
built-in for changes file is usually

00:11:47,050 --> 00:11:52,890
produced cause you built on ami 64 that

00:11:49,930 --> 00:11:56,410
gets uploaded to the archive duxi set

00:11:52,890 --> 00:11:58,570
and then the binary built happens

00:11:56,410 --> 00:12:00,400
and another MD 64-bit info file is

00:11:58,570 --> 00:12:05,560
created and that's uploaded and tax has

00:12:00,400 --> 00:12:08,170
no and there could be several ways to

00:12:05,560 --> 00:12:10,810
solve the deport just but upload these

00:12:08,170 --> 00:12:13,570
files or des package could rename them

00:12:10,810 --> 00:12:15,520
differently or something needs to be

00:12:13,570 --> 00:12:17,440
happen there needs to be consensus on

00:12:15,520 --> 00:12:22,810
this but first and then the fixes are

00:12:17,440 --> 00:12:25,030
rather easier thing then we have this

00:12:22,810 --> 00:12:27,520
wonderful problem was been an amuse and

00:12:25,030 --> 00:12:31,540
the M times and our sync so when a

00:12:27,520 --> 00:12:34,000
banana meu has made a new debian change

00:12:31,540 --> 00:12:36,940
log entry is created but it's not put in

00:12:34,000 --> 00:12:40,000
the source and then the package was

00:12:36,940 --> 00:12:42,700
built was this changed log entry was the

00:12:40,000 --> 00:12:45,010
same source date epoch as before was

00:12:42,700 --> 00:12:45,970
getting different files and they are

00:12:45,010 --> 00:12:47,949
they're not the same and

00:12:45,970 --> 00:12:49,870
then but the aim time is the same

00:12:47,949 --> 00:12:51,939
because of the same source date epoch

00:12:49,870 --> 00:12:56,910
and then asking says things of the same

00:12:51,939 --> 00:13:01,269
file it caused a backup problem and this

00:12:56,910 --> 00:13:04,720
probably needs to needs a redesign how

00:13:01,269 --> 00:13:06,579
BIM you saw that so the back I think is

00:13:04,720 --> 00:13:10,149
at the moment also assigned to FTP

00:13:06,579 --> 00:13:12,670
Debian org there was almost consensus on

00:13:10,149 --> 00:13:14,680
the back and then the discussion started

00:13:12,670 --> 00:13:18,639
restarted in the middle two years ago I

00:13:14,680 --> 00:13:21,129
would say maybe read this back and reply

00:13:18,639 --> 00:13:26,290
especially if you involved and the

00:13:21,129 --> 00:13:28,300
Beatty's infrastructure there's also has

00:13:26,290 --> 00:13:30,129
I think problems for mutti are so it's

00:13:28,300 --> 00:13:31,990
not only backup and reproducible but

00:13:30,129 --> 00:13:35,649
booty arches also broken was because of

00:13:31,990 --> 00:13:40,120
this and then we have a bunch of

00:13:35,649 --> 00:13:43,839
problems with build info files this back

00:13:40,120 --> 00:13:48,220
is about putting the bit info files to

00:13:43,839 --> 00:13:50,800
be info Debian net so that we have them

00:13:48,220 --> 00:13:53,410
outside FTP master they are also knurled

00:13:50,800 --> 00:13:54,790
on cocea I think so DDS can get the

00:13:53,410 --> 00:14:01,180
built in full files but the general

00:13:54,790 --> 00:14:02,829
public cannot this is I think I spoke

00:14:01,180 --> 00:14:05,259
was gonna yesterday because I knew he

00:14:02,829 --> 00:14:07,089
would leave today and in general Organa

00:14:05,259 --> 00:14:09,370
sets and patches via sites are they

00:14:07,089 --> 00:14:11,379
merged 15 patches last week or this

00:14:09,370 --> 00:14:14,589
weekend so they are happy to merge

00:14:11,379 --> 00:14:17,709
purged patches and there's the stuff

00:14:14,589 --> 00:14:20,649
which just sent backs to the beat back

00:14:17,709 --> 00:14:22,870
BTS sends information to the BTS that

00:14:20,649 --> 00:14:25,649
function could probably be man adopted

00:14:22,870 --> 00:14:28,540
to do this for other bit and for files

00:14:25,649 --> 00:14:30,610
then we also want to include the

00:14:28,540 --> 00:14:32,410
built-in for files in the archive so

00:14:30,610 --> 00:14:34,329
having them on page info Debian net it's

00:14:32,410 --> 00:14:36,309
just a workaround but it's a easier

00:14:34,329 --> 00:14:39,990
workaround so we have these two blocks

00:14:36,309 --> 00:14:42,730
and you see that buck is way over and

00:14:39,990 --> 00:14:45,309
then we have the problem with security

00:14:42,730 --> 00:14:47,350
updates because security is an embargoed

00:14:45,309 --> 00:14:49,870
host so things are slightly different

00:14:47,350 --> 00:14:52,120
there and this back also needs to be

00:14:49,870 --> 00:14:55,059
separated into the speech info debian

00:14:52,120 --> 00:14:57,399
net and in the archive but we need this

00:14:55,059 --> 00:14:59,199
to have reproducible security updates

00:14:57,399 --> 00:14:59,860
which we could have as a feature since

00:14:59,199 --> 00:15:01,720
threat

00:14:59,860 --> 00:15:06,339
because the food chain supports it but

00:15:01,720 --> 00:15:10,540
the infrastructure doesn't so this is

00:15:06,339 --> 00:15:12,880
another interesting buck and yeah

00:15:10,540 --> 00:15:14,710
stretch is the was the release

00:15:12,880 --> 00:15:16,839
reproducible in theory but not in

00:15:14,710 --> 00:15:18,339
practice we had to package the petrous

00:15:16,839 --> 00:15:21,790
in there but we didn't rebuild the

00:15:18,339 --> 00:15:23,709
packages buster is we shut reproducible

00:15:21,790 --> 00:15:27,100
like a policy it shook but we are not

00:15:23,709 --> 00:15:29,380
reproducible and poets is then maybe the

00:15:27,100 --> 00:15:33,610
release we still haven't made it I would

00:15:29,380 --> 00:15:37,510
be very sad if this is becomes real so

00:15:33,610 --> 00:15:38,140
I'd rather see say Buster is still not

00:15:37,510 --> 00:15:40,180
released

00:15:38,140 --> 00:15:42,279
it's not even frozen there's half a year

00:15:40,180 --> 00:15:43,990
at least to work on these things so

00:15:42,279 --> 00:15:49,870
maybe we can make Buster a lot better

00:15:43,990 --> 00:15:58,720
than what it's looking like now that's

00:15:49,870 --> 00:16:02,350
it for most things I think we have

00:15:58,720 --> 00:16:09,089
plenty of time for questions we have two

00:16:02,350 --> 00:16:09,089
microphones we have questions

00:16:15,120 --> 00:16:24,509
do you think reproducible are useful do

00:16:22,499 --> 00:16:29,269
you think we can get do better for

00:16:24,509 --> 00:16:29,269
Buster than I just made painted black

00:16:36,529 --> 00:16:41,170
no comments nobody wants a microphone

00:16:47,910 --> 00:16:53,680
so maybe more common than question so

00:16:50,950 --> 00:16:58,180
from your talk I understood that this is

00:16:53,680 --> 00:17:01,720
more question first of manpower and some

00:16:58,180 --> 00:17:03,070
support and also question of community

00:17:01,720 --> 00:17:05,980
agreement that we should do this and

00:17:03,070 --> 00:17:08,470
everybody does their own part but also

00:17:05,980 --> 00:17:10,959
that we have some common goal like what

00:17:08,470 --> 00:17:13,990
we do we built info how we change

00:17:10,959 --> 00:17:16,030
animals and so ladies is that correct or

00:17:13,990 --> 00:17:27,069
data it means understood something

00:17:16,030 --> 00:17:34,540
I think that's correct yeah that sounds

00:17:27,069 --> 00:17:41,320
right so it's actually a lot more policy

00:17:34,540 --> 00:17:47,049
or design of more complex structural

00:17:41,320 --> 00:17:50,200
problems in the infrastructure so it's

00:17:47,049 --> 00:17:53,880
more that that than individually working

00:17:50,200 --> 00:17:53,880
through individual packages fixing them

00:17:55,559 --> 00:18:02,380
question there's still a lot of work on

00:17:59,830 --> 00:18:05,290
individual packages as well we still

00:18:02,380 --> 00:18:07,690
have 500 non apply patches there's 500

00:18:05,290 --> 00:18:10,480
nm use to be done so if you want to NMU

00:18:07,690 --> 00:18:14,410
packages five a day you can do so for

00:18:10,480 --> 00:18:17,140
the next hundred days if you just do one

00:18:14,410 --> 00:18:25,480
per week you're helping so please

00:18:17,140 --> 00:18:28,720
consider doing one per month yeah I was

00:18:25,480 --> 00:18:30,970
talking to it at Montreal someone may

00:18:28,720 --> 00:18:34,960
know I've maintained thunderbird package

00:18:30,970 --> 00:18:37,030
and it's a huge package and I'm not able

00:18:34,960 --> 00:18:39,870
to get this package reproducible because

00:18:37,030 --> 00:18:43,150
of lack of time lack of knowledge it EDC

00:18:39,870 --> 00:18:45,490
how did you see packages like fun about

00:18:43,150 --> 00:18:48,059
me I must be more when such packages how

00:18:45,490 --> 00:18:51,070
can be improve a situation such thing I

00:18:48,059 --> 00:18:53,570
haven't been a really good idea to

00:18:51,070 --> 00:18:56,780
surface

00:18:53,570 --> 00:18:58,580
I I certainly get what you mean there's

00:18:56,780 --> 00:19:00,770
quite a few packages in that category

00:18:58,580 --> 00:19:03,710
and quite a few tool chains in Debian in

00:19:00,770 --> 00:19:06,080
that category that I just like where do

00:19:03,710 --> 00:19:09,680
you start with something like you know

00:19:06,080 --> 00:19:11,540
Firefox Thunderbird etc have you spoken

00:19:09,680 --> 00:19:14,480
to upstream at all because I think if

00:19:11,540 --> 00:19:15,920
you got perhaps by in there they might

00:19:14,480 --> 00:19:17,090
start looking at stuff and then they

00:19:15,920 --> 00:19:20,780
perhaps called and make some of the

00:19:17,090 --> 00:19:24,410
effort between other distributions like

00:19:20,780 --> 00:19:26,810
because part of the problem I see I see

00:19:24,410 --> 00:19:29,210
that face we have heard luck but Mike is

00:19:26,810 --> 00:19:32,240
working for Mozilla and Sylvester also

00:19:29,210 --> 00:19:35,510
but my communication has slightly going

00:19:32,240 --> 00:19:38,090
in a bad way with both person because of

00:19:35,510 --> 00:19:40,850
there's no communication currently I've

00:19:38,090 --> 00:19:43,220
asked both persons because of the new

00:19:40,850 --> 00:19:46,250
years our versions and I got quite zero

00:19:43,220 --> 00:19:48,740
feedback so it's quite difficult to get

00:19:46,250 --> 00:19:49,490
in contact with with both and and to us

00:19:48,740 --> 00:19:51,290
I think

00:19:49,490 --> 00:19:55,640
Mozilla especially we found our team is

00:19:51,290 --> 00:19:57,410
really a team that gets there you can

00:19:55,640 --> 00:20:01,040
probably get easy in contact and they

00:19:57,410 --> 00:20:03,440
are friendly to answer my questions but

00:20:01,040 --> 00:20:05,360
mostly these problems are need to be

00:20:03,440 --> 00:20:07,820
done by a by the Firefox core team

00:20:05,360 --> 00:20:12,770
because especially if Thunderbird uses I

00:20:07,820 --> 00:20:15,860
think 90% of a code is Firefox and there

00:20:12,770 --> 00:20:18,860
are four cores currently but even they

00:20:15,860 --> 00:20:20,810
happy to get even the affair bug fixed

00:20:18,860 --> 00:20:23,500
and just in time for the rest is quite

00:20:20,810 --> 00:20:26,000
no personal power on this idea that

00:20:23,500 --> 00:20:28,220
highlights another problem because

00:20:26,000 --> 00:20:31,120
Firefox or rather tor browser was

00:20:28,220 --> 00:20:34,430
reproducible Maitri producible in 2012

00:20:31,120 --> 00:20:36,620
by the tor browser people and we had

00:20:34,430 --> 00:20:38,210
Firefox reproducible in our test setup

00:20:36,620 --> 00:20:40,010
then it was not reproducible again

00:20:38,210 --> 00:20:42,020
anymore and it's and that's because

00:20:40,010 --> 00:20:44,180
Firefox is changing a lot their code and

00:20:42,020 --> 00:20:45,710
then they use new technologies but

00:20:44,180 --> 00:20:46,400
whether to me the to chamber was not

00:20:45,710 --> 00:20:48,200
reproducible

00:20:46,400 --> 00:20:50,360
so we also once we had achieved

00:20:48,200 --> 00:20:52,340
reproducibility we still need to test

00:20:50,360 --> 00:20:53,570
and make sure that it's continuous

00:20:52,340 --> 00:20:56,720
reproducibly

00:20:53,570 --> 00:20:58,310
and I think for these big packages

00:20:56,720 --> 00:21:00,860
upstream is this thing I don't think

00:20:58,310 --> 00:21:02,720
Debian maintainer can solve all upstream

00:21:00,860 --> 00:21:06,410
problems whether it be reproducible or

00:21:02,720 --> 00:21:07,370
others so sometimes it's just way if you

00:21:06,410 --> 00:21:09,950
cannot do it

00:21:07,370 --> 00:21:12,410
wait that somebody else does it and what

00:21:09,950 --> 00:21:14,510
we can do as a project we can have this

00:21:12,410 --> 00:21:17,059
list of important packages the base set

00:21:14,510 --> 00:21:20,050
the required set the CD set and then see

00:21:17,059 --> 00:21:22,280
okay we have 25,000 packages and 93%

00:21:20,050 --> 00:21:26,000
means there's 2,000 unreproducible

00:21:22,280 --> 00:21:27,830
packages but the the basic install has

00:21:26,000 --> 00:21:30,500
only two thousand packages and all of

00:21:27,830 --> 00:21:33,050
these are only 50 unreproducible

00:21:30,500 --> 00:21:35,780
so let's take her the first 20 of those

00:21:33,050 --> 00:21:39,770
50 first and then get there step by step

00:21:35,780 --> 00:21:42,620
by step I think you can do is perhaps

00:21:39,770 --> 00:21:44,929
help you convince upstream to make it a

00:21:42,620 --> 00:21:46,970
priority because sure they're gonna work

00:21:44,929 --> 00:21:49,190
on a fail first and then perhaps new

00:21:46,970 --> 00:21:50,900
features and like presumably they're not

00:21:49,190 --> 00:21:53,090
against reproducible builds me no one

00:21:50,900 --> 00:21:55,550
here is against the idea have like who's

00:21:53,090 --> 00:21:59,809
for them yeah sure I like I'd vote for

00:21:55,550 --> 00:22:02,120
heaven too but yeah if we can if we can

00:21:59,809 --> 00:22:03,800
help move it up their priority list and

00:22:02,120 --> 00:22:05,059
make it a bit more of a concern for them

00:22:03,800 --> 00:22:06,860
I think that's something that we can

00:22:05,059 --> 00:22:08,540
help because that's sort of fairly

00:22:06,860 --> 00:22:11,300
generic information that would work for

00:22:08,540 --> 00:22:15,410
Firefox another bird latex whatever

00:22:11,300 --> 00:22:17,780
whatever you fully agree maybe we can

00:22:15,410 --> 00:22:20,470
build such a place they are like all the

00:22:17,780 --> 00:22:25,130
mahogany engines we can collect such

00:22:20,470 --> 00:22:28,160
packages that can be problematic but oh

00:22:25,130 --> 00:22:29,420
no as I said I think there must be more

00:22:28,160 --> 00:22:31,490
packages like Thunderbird

00:22:29,420 --> 00:22:33,860
which need interaction for marketing

00:22:31,490 --> 00:22:37,300
that's correct even if I have fixed us

00:22:33,860 --> 00:22:39,980
all being need to go up sleep of course

00:22:37,300 --> 00:22:41,840
we have such a place where we collect

00:22:39,980 --> 00:22:44,900
these lists already there's packet sets

00:22:41,840 --> 00:22:47,300
on our tests web pages where there are

00:22:44,900 --> 00:22:49,280
these sets like norm and the first CD

00:22:47,300 --> 00:22:53,000
and packages installed on Debian or

00:22:49,280 --> 00:22:55,850
canned packages here there I think

00:22:53,000 --> 00:22:58,130
perhaps the notes gates repository might

00:22:55,850 --> 00:23:01,540
be the other place yeah that's more

00:22:58,130 --> 00:23:01,540
saying for particularly yeah

00:23:06,320 --> 00:23:09,320
chance

00:23:12,580 --> 00:23:18,970
hey guys I don't know if anyone has

00:23:17,080 --> 00:23:21,460
thought about talking about it before

00:23:18,970 --> 00:23:23,590
but can we just like made a see ICT

00:23:21,460 --> 00:23:28,180
system where the packages goes

00:23:23,590 --> 00:23:34,030
mainstream if it's reproducible a what

00:23:28,180 --> 00:23:37,960
systems are integration delivery like

00:23:34,030 --> 00:23:39,880
you have you upload a package we test

00:23:37,960 --> 00:23:44,110
see if it's reproducible if it is not

00:23:39,880 --> 00:23:49,120
you don't go mainstream you know what I

00:23:44,110 --> 00:23:51,130
mean yes but this you want to prevent

00:23:49,120 --> 00:23:54,070
packages from reaching unstable when

00:23:51,130 --> 00:23:57,190
they are unreproducible yes but then we

00:23:54,070 --> 00:23:59,140
won't have Firefox and we probably and

00:23:57,190 --> 00:24:03,450
thunderbird and probably not the linux

00:23:59,140 --> 00:24:07,600
kernel and or maybe not unstable but and

00:24:03,450 --> 00:24:09,970
maybe some packages if it's a Debian

00:24:07,600 --> 00:24:12,460
policy right now we can enforce it well

00:24:09,970 --> 00:24:17,680
at the moment it should so it's just a

00:24:12,460 --> 00:24:18,940
normal buck it's like yeah so I think we

00:24:17,680 --> 00:24:21,340
must get too much

00:24:18,940 --> 00:24:24,160
we must get to policies say packages

00:24:21,340 --> 00:24:26,290
must be reproducible but even then the

00:24:24,160 --> 00:24:29,320
release team will overwrite this box and

00:24:26,290 --> 00:24:31,480
say we want to release was Firefox let's

00:24:29,320 --> 00:24:34,630
ignore this Aussie buck and I'm thankful

00:24:31,480 --> 00:24:36,400
the release team will do that because I

00:24:34,630 --> 00:24:42,580
won't fire for I need to Firefox or

00:24:36,400 --> 00:24:45,850
whatever so I think I think the bigger

00:24:42,580 --> 00:24:47,290
thing is that we could we could do that

00:24:45,850 --> 00:24:51,760
it's like that's like technically

00:24:47,290 --> 00:24:53,140
feasible but does that does it really

00:24:51,760 --> 00:24:56,260
help in the sense that we've all got

00:24:53,140 --> 00:24:58,450
buy-in on the problems like magic making

00:24:56,260 --> 00:25:01,720
it impossible to upload to sid if your

00:24:58,450 --> 00:25:03,220
packages and reproducible doesn't really

00:25:01,720 --> 00:25:05,380
solve these infrastructure problems and

00:25:03,220 --> 00:25:09,120
that's like our real like blockers at

00:25:05,380 --> 00:25:11,770
the moment if you see what I mean so

00:25:09,120 --> 00:25:13,960
yeah I think no one's against having

00:25:11,770 --> 00:25:16,120
reproducible packages so I'm not really

00:25:13,960 --> 00:25:19,670
sure what it would help apart from

00:25:16,120 --> 00:25:24,440
having a destroy without

00:25:19,670 --> 00:25:27,020
the sense that we can if we follow the

00:25:24,440 --> 00:25:28,970
only package that our participant occurs

00:25:27,020 --> 00:25:33,710
in the archive will be reproducible by

00:25:28,970 --> 00:25:39,530
default know what I mean we won't have

00:25:33,710 --> 00:25:46,100
to test against the archive I don't

00:25:39,530 --> 00:25:48,440
quite get it sorry if you're proposing

00:25:46,100 --> 00:25:51,620
that we test against the archive instead

00:25:48,440 --> 00:25:53,600
of testing against our stuff yes we

00:25:51,620 --> 00:25:56,390
should do that but this is the part we

00:25:53,600 --> 00:25:59,030
had was lack of funding the our new

00:25:56,390 --> 00:26:01,790
progress slow down it's on the to-do

00:25:59,030 --> 00:26:04,190
list since more than a year we can since

00:26:01,790 --> 00:26:06,740
December 2016 we can do it because we

00:26:04,190 --> 00:26:08,960
they're archiving produces reproducible

00:26:06,740 --> 00:26:11,360
packages no but we never got along to

00:26:08,960 --> 00:26:12,980
implement this and that was would still

00:26:11,360 --> 00:26:14,900
not prevent getting the packages in but

00:26:12,980 --> 00:26:16,460
it would give real results that would

00:26:14,900 --> 00:26:21,680
definitely better we would should do

00:26:16,460 --> 00:26:23,690
that there was something of an opt-in so

00:26:21,680 --> 00:26:26,030
that a package manager could say if when

00:26:23,690 --> 00:26:30,080
I upload my package is no longer

00:26:26,030 --> 00:26:32,470
reproducible then don't don't don't

00:26:30,080 --> 00:26:32,470
accept

00:26:33,410 --> 00:26:36,499
[Music]

00:26:39,920 --> 00:26:45,380
hi from the maintainer point of view

00:26:42,620 --> 00:26:48,230
what I what it's the status of build

00:26:45,380 --> 00:26:50,000
tools with regards to reproducibility so

00:26:48,230 --> 00:26:52,610
do I've in the packets and and I don't

00:26:50,000 --> 00:26:54,410
need to do anything to have P builder

00:26:52,610 --> 00:26:58,520
tell me if it's not reproducible or not

00:26:54,410 --> 00:27:01,700
yes or no do I need to do to get to go

00:26:58,520 --> 00:27:03,830
through hoops or do additional steps to

00:27:01,700 --> 00:27:06,170
get that information should we work in

00:27:03,830 --> 00:27:07,970
in providing the maintainer i'ma

00:27:06,170 --> 00:27:12,050
maintainer maybe I don't have much idea

00:27:07,970 --> 00:27:13,700
of reproducibility but I don't even test

00:27:12,050 --> 00:27:17,210
it because it doesn't come by default

00:27:13,700 --> 00:27:19,960
even if it's not yet in in if it's a

00:27:17,210 --> 00:27:22,490
should it's not a must

00:27:19,960 --> 00:27:25,160
testing for reproducibility will

00:27:22,490 --> 00:27:29,180
increase the build time at least by 50%

00:27:25,160 --> 00:27:31,340
and so that's why there those two words

00:27:29,180 --> 00:27:34,250
don't that's one of the reasons those

00:27:31,340 --> 00:27:35,900
two words don't do it by default like

00:27:34,250 --> 00:27:38,900
people are also rather than one few

00:27:35,900 --> 00:27:41,300
parts by default about why people that

00:27:38,900 --> 00:27:43,520
can do that and it cannot do test for a

00:27:41,300 --> 00:27:46,730
participant at the moment we do have

00:27:43,520 --> 00:27:48,440
great protests in Debian which it's also

00:27:46,730 --> 00:27:51,110
available outside everything I think and

00:27:48,440 --> 00:27:54,410
repo tests will build a package twice

00:27:51,110 --> 00:27:56,750
and if it's then unreproducible it will

00:27:54,410 --> 00:27:59,480
reduce the number of variations and

00:27:56,750 --> 00:28:02,030
build it again with reduced variations

00:27:59,480 --> 00:28:04,670
until it finds the reproducible version

00:28:02,030 --> 00:28:06,080
hopefully and then it will tell you is

00:28:04,670 --> 00:28:09,470
able to tell you you picketers

00:28:06,080 --> 00:28:11,990
unreproducible with timezone variation

00:28:09,470 --> 00:28:14,330
or with whatever the variation causes or

00:28:11,990 --> 00:28:16,700
helps you to find the problem but

00:28:14,330 --> 00:28:18,260
sometimes it's not possible that this it

00:28:16,700 --> 00:28:20,480
finds something what helps you and

00:28:18,260 --> 00:28:23,240
sometimes the repo tests because it also

00:28:20,480 --> 00:28:25,550
uses fake time packages are more likely

00:28:23,240 --> 00:28:28,070
to fail with v2 build with rate protest

00:28:25,550 --> 00:28:31,610
because of fake time being used so there

00:28:28,070 --> 00:28:35,000
is not the tool also what we have in our

00:28:31,610 --> 00:28:38,180
testing infrastructure we have kind of

00:28:35,000 --> 00:28:40,580
maximized variations but there might be

00:28:38,180 --> 00:28:46,670
other variations in the wild so that is

00:28:40,580 --> 00:28:49,160
the the one of the core central problems

00:28:46,670 --> 00:28:51,020
was reproducibility you can only prove

00:28:49,160 --> 00:28:53,049
the opposite you can only prove that

00:28:51,020 --> 00:28:54,730
something is not reproducible

00:28:53,049 --> 00:28:56,669
and you can only assume it is

00:28:54,730 --> 00:28:59,440
reproducible and a variety of

00:28:56,669 --> 00:29:00,850
environments as until you find an

00:28:59,440 --> 00:29:03,850
environment where it's not reproducible

00:29:00,850 --> 00:29:06,720
anymore and so testing for

00:29:03,850 --> 00:29:09,639
reproducibility is not so easy

00:29:06,720 --> 00:29:12,369
so I also don't I also think because of

00:29:09,639 --> 00:29:15,100
this that I don't think that maintain as

00:29:12,369 --> 00:29:17,289
must test or should test the packages

00:29:15,100 --> 00:29:19,360
for reproducibility before uploading I

00:29:17,289 --> 00:29:20,799
think maintainer so test whether the

00:29:19,360 --> 00:29:22,960
packets build and whether the package

00:29:20,799 --> 00:29:25,239
works but testing whether it's

00:29:22,960 --> 00:29:29,460
reproducible I think it's out of scope

00:29:25,239 --> 00:29:33,190
usually for the normal uploader process

00:29:29,460 --> 00:29:35,830
when particularly when you can check the

00:29:33,190 --> 00:29:38,289
status on test stop reproducible builds

00:29:35,830 --> 00:29:45,940
the org as well so that takes like that

00:29:38,289 --> 00:29:47,139
the urgency after that innocence see

00:29:45,940 --> 00:29:49,210
that it's a problem because if you

00:29:47,139 --> 00:29:51,039
accept if you fix the reproducible

00:29:49,210 --> 00:29:52,359
issues you want to confirm this and then

00:29:51,039 --> 00:29:54,789
you do an upload so that this

00:29:52,359 --> 00:29:56,700
infrastructure tests it it's kind of

00:29:54,789 --> 00:30:00,700
suboptimal

00:29:56,700 --> 00:30:01,690
take me with the what you say 500 I

00:30:00,700 --> 00:30:06,369
think it's more like a thousand

00:30:01,690 --> 00:30:07,809
unapplied patches it's greater maintain

00:30:06,369 --> 00:30:09,759
you get a patch like well I'm just am I

00:30:07,809 --> 00:30:11,289
just gonna apply it I want to see what

00:30:09,759 --> 00:30:13,179
difference it makes and without

00:30:11,289 --> 00:30:15,999
uploading it it's quite difficult to

00:30:13,179 --> 00:30:17,980
tell if it's actually gonna make your

00:30:15,999 --> 00:30:21,369
package reproducible because you don't

00:30:17,980 --> 00:30:24,639
necessarily have the tool locally to to

00:30:21,369 --> 00:30:26,980
validate that so it's like well great

00:30:24,639 --> 00:30:29,190
don't want to just cowboy applying

00:30:26,980 --> 00:30:29,190
patches

00:30:36,960 --> 00:30:41,350
[Music]

00:30:38,740 --> 00:30:45,640
with differ scope you could check that

00:30:41,350 --> 00:30:50,370
if you had the image that worked having

00:30:45,640 --> 00:30:52,990
this that gave rise to the the stat on

00:30:50,370 --> 00:30:54,760
reproducible builds so would there be a

00:30:52,990 --> 00:30:56,650
way of saying please preserve the image

00:30:54,760 --> 00:31:00,730
because I'm just doing a build next time

00:30:56,650 --> 00:31:03,910
you build this and then you could push

00:31:00,730 --> 00:31:08,310
your your built package at reproducible

00:31:03,910 --> 00:31:10,810
builds for another run through the tests

00:31:08,310 --> 00:31:13,780
you probably give me the image right

00:31:10,810 --> 00:31:16,030
because if if I send you a patch for

00:31:13,780 --> 00:31:18,340
your package I say please apply this

00:31:16,030 --> 00:31:21,460
once you apply this you should get a

00:31:18,340 --> 00:31:24,310
shot of X yeah if you get the same jar

00:31:21,460 --> 00:31:27,790
then you've won yeah and it's not it's

00:31:24,310 --> 00:31:31,650
probably your building berm yeah okay I

00:31:27,790 --> 00:31:31,650
will do that q1

00:31:33,280 --> 00:31:38,050
one of the problems in the one example

00:31:35,590 --> 00:31:41,500
for the problem is that on our test

00:31:38,050 --> 00:31:45,570
infrastructure we build with German

00:31:41,500 --> 00:31:49,000
French English and Italian locales to

00:31:45,570 --> 00:31:52,330
test local variations but some packages

00:31:49,000 --> 00:31:55,030
fail to build with Hebrew or Arabic or

00:31:52,330 --> 00:31:59,200
Chinese or they they produce different

00:31:55,030 --> 00:32:01,510
results when used whatever not those

00:31:59,200 --> 00:32:05,470
those languages are fine but with finish

00:32:01,510 --> 00:32:08,020
at failures and so you can only fix it

00:32:05,470 --> 00:32:10,750
for that and then and we won't do all

00:32:08,020 --> 00:32:13,120
the builds with all local variations but

00:32:10,750 --> 00:32:15,520
especially locates are so confusing and

00:32:13,120 --> 00:32:17,680
complex that I'm sure we there are some

00:32:15,520 --> 00:32:20,550
bugs we don't catch yet and that's a

00:32:17,680 --> 00:32:20,550
principle problem

00:32:20,570 --> 00:32:23,710
[Music]

00:32:23,770 --> 00:32:27,220
you said you had some funding issues so

00:32:25,480 --> 00:32:28,900
what kind of sponsors are you looking

00:32:27,220 --> 00:32:31,120
for let's say if people are watching you

00:32:28,900 --> 00:32:40,360
and you want to tell the sponsors at

00:32:31,120 --> 00:32:42,040
some important work I think we didn't

00:32:40,360 --> 00:32:44,290
prepare much for this question because

00:32:42,040 --> 00:32:48,030
we prepared for the Debian audience what

00:32:44,290 --> 00:32:48,030
we can fix for technical problems

00:32:53,130 --> 00:32:57,010
nothing really add I mean for for

00:32:55,450 --> 00:33:01,090
sponsors it we would probably have to

00:32:57,010 --> 00:33:02,679
speak to their needs I mean because they

00:33:01,090 --> 00:33:03,970
would probably want to they're pretty

00:33:02,679 --> 00:33:05,290
common coming from a particular angle

00:33:03,970 --> 00:33:08,890
that they want to solve for their

00:33:05,290 --> 00:33:12,130
business whether that's to do with say a

00:33:08,890 --> 00:33:14,410
compliance angle or they want to have a

00:33:12,130 --> 00:33:16,750
security angle but you need to have like

00:33:14,410 --> 00:33:20,440
probably different messages and you're

00:33:16,750 --> 00:33:22,420
sort of talking if you talk to me like

00:33:20,440 --> 00:33:24,610
you know 10 people you're gonna want 10

00:33:22,420 --> 00:33:26,860
different images messages there because

00:33:24,610 --> 00:33:28,960
they they just have different demands

00:33:26,860 --> 00:33:36,820
because just to say reproducible builds

00:33:28,960 --> 00:33:41,429
at them it's not really that well for

00:33:36,820 --> 00:33:46,540
Google it already made coach bill times

00:33:41,429 --> 00:33:50,320
lower quite that's just another example

00:33:46,540 --> 00:33:52,990
of another that that's a third example

00:33:50,320 --> 00:33:54,610
of you might want to speak to Google to

00:33:52,990 --> 00:33:57,130
say oh we can make your coding time

00:33:54,610 --> 00:34:03,179
smaller for me no hilarious xkcd

00:33:57,130 --> 00:34:05,679
reference but as like for a big

00:34:03,179 --> 00:34:07,540
manufacturer of equipment you may want

00:34:05,679 --> 00:34:09,310
to say you really want this or a

00:34:07,540 --> 00:34:10,629
manufacturer of medical equipment will

00:34:09,310 --> 00:34:11,980
need a different message because they

00:34:10,629 --> 00:34:13,359
have a different use case for

00:34:11,980 --> 00:34:18,639
reproducible books they don't care about

00:34:13,359 --> 00:34:20,230
build time making audit easier by seeing

00:34:18,639 --> 00:34:23,260
what changed between two versions of

00:34:20,230 --> 00:34:25,000
your compiled code yeah I'm not

00:34:23,260 --> 00:34:27,580
disagreeing with the the use cases I'm

00:34:25,000 --> 00:34:30,100
just saying that each potential sponsor

00:34:27,580 --> 00:34:33,100
will have their own different needs and

00:34:30,100 --> 00:34:35,169
so therefore you you can't just you

00:34:33,100 --> 00:34:38,040
can't just like have a list of a hundred

00:34:35,169 --> 00:34:40,690
things that I it's good for and let them

00:34:38,040 --> 00:34:44,070
let them do all the work in in working

00:34:40,690 --> 00:34:47,800
out what's fits them is you I mean I

00:34:44,070 --> 00:34:49,510
think this was very good at the funding

00:34:47,800 --> 00:34:52,570
we had that this was essentially

00:34:49,510 --> 00:34:55,869
research funding and it's a lot of

00:34:52,570 --> 00:34:58,150
degree it's a research project and many

00:34:55,869 --> 00:35:01,480
other projects benefit from our research

00:34:58,150 --> 00:35:03,100
and use it and it's hard to get funding

00:35:01,480 --> 00:35:05,680
to continue with the research it would

00:35:03,100 --> 00:35:09,040
be easy to get funding to make whatever

00:35:05,680 --> 00:35:10,900
writer pitch for GCC that because we

00:35:09,040 --> 00:35:13,000
need it and who could see how this is

00:35:10,900 --> 00:35:14,560
the goal and fix this thing but in my

00:35:13,000 --> 00:35:17,290
experience it was way better this

00:35:14,560 --> 00:35:19,600
brought funding we had and then we could

00:35:17,290 --> 00:35:22,540
look at the problem as broad as we

00:35:19,600 --> 00:35:24,400
wanted and caught way more issues with

00:35:22,540 --> 00:35:28,330
it and had a wider impact on the

00:35:24,400 --> 00:35:36,670
community also so research funding I

00:35:28,330 --> 00:35:39,750
think would be our preferred model is

00:35:36,670 --> 00:35:39,750
that all for our questions

00:35:41,260 --> 00:35:45,810
okay good then thank you all for

00:35:43,630 --> 00:35:45,810
watching

00:35:46,200 --> 00:35:52,340

YouTube URL: https://www.youtube.com/watch?v=jhHfA2sCIgw


