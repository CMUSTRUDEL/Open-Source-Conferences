Title: Software Heritage - Preserving the Free Software Commons
Publication date: 2018-05-27
Playlist: MiniDebConf Hamburg 2018
Description: 
	by Nicolas Dandrimont

At: MiniDebConf Hamburg
https://wiki.debian.org/DebianEvents/de/2018/MiniDebConfHamburg
Room: main
Scheduled start: 2018-05-20 16:00:00
Captions: 
	00:00:04,520 --> 00:00:10,790
hi thank you I'm Nicola don't ring me

00:00:08,510 --> 00:00:13,490
and I will indeed be talking to you

00:00:10,790 --> 00:00:15,559
about software heritage I am a software

00:00:13,490 --> 00:00:19,250
engineer for this project I've been

00:00:15,559 --> 00:00:22,900
working on it for three years now and we

00:00:19,250 --> 00:00:22,900
see what this thing is all about

00:00:38,270 --> 00:00:52,660
yeah I guess the batteries are out so

00:00:50,030 --> 00:00:54,890
let's try that again so we all know

00:00:52,660 --> 00:00:57,350
we've been doing free software for a

00:00:54,890 --> 00:00:59,800
while that software source code is

00:00:57,350 --> 00:01:04,550
something special

00:00:59,800 --> 00:01:07,190
why is that as how the habit zone has

00:01:04,550 --> 00:01:11,870
said in sicp

00:01:07,190 --> 00:01:15,500
his textbook on programming programs are

00:01:11,870 --> 00:01:18,410
made to be read by people and then

00:01:15,500 --> 00:01:22,369
incidentally by for machines to execute

00:01:18,410 --> 00:01:26,180
so basically what software source code

00:01:22,369 --> 00:01:29,770
provides us is a way inside the mind of

00:01:26,180 --> 00:01:33,950
the designer of the program for instance

00:01:29,770 --> 00:01:39,280
you can have like you can get insights

00:01:33,950 --> 00:01:40,850
in very crazy algorithms that can do

00:01:39,280 --> 00:01:46,220
very fast

00:01:40,850 --> 00:01:49,759
rivers square roots for 3d kind of stuff

00:01:46,220 --> 00:01:52,640
so like in the quake 2 source code you

00:01:49,759 --> 00:01:54,590
can also get insight on the algorithms

00:01:52,640 --> 00:01:56,990
that are underpinning the internet for

00:01:54,590 --> 00:02:02,590
instance using seeing the net cue

00:01:56,990 --> 00:02:05,450
algorithm in the Linux kernel so yeah

00:02:02,590 --> 00:02:09,289
what we are building as the free

00:02:05,450 --> 00:02:12,920
software community is the free software

00:02:09,289 --> 00:02:17,200
Commons basically the Commons is all the

00:02:12,920 --> 00:02:19,940
cultural and social and natural

00:02:17,200 --> 00:02:22,310
resources that we share and that

00:02:19,940 --> 00:02:23,900
everyone has access to and most

00:02:22,310 --> 00:02:27,050
specifically the software Commons is

00:02:23,900 --> 00:02:29,690
what we are building with software that

00:02:27,050 --> 00:02:36,100
is open and that is available for all to

00:02:29,690 --> 00:02:41,150
use to modify to execute to distribute

00:02:36,100 --> 00:02:46,250
we know that those comments are a really

00:02:41,150 --> 00:02:48,629
critical part of our Commons who's

00:02:46,250 --> 00:02:52,030
taking care of it

00:02:48,629 --> 00:02:55,840
the software is fragile like all digital

00:02:52,030 --> 00:02:59,069
information you can lose software people

00:02:55,840 --> 00:03:03,340
can decide to shut down hosting spaces

00:02:59,069 --> 00:03:07,030
because of business decisions people can

00:03:03,340 --> 00:03:09,489
hack into software hosting platforms and

00:03:07,030 --> 00:03:15,129
remove the code maliciously or just

00:03:09,489 --> 00:03:19,060
inadvertently and of course for the

00:03:15,129 --> 00:03:21,879
obsolete stuff there's rot if you don't

00:03:19,060 --> 00:03:27,459
care about the data then it rots and it

00:03:21,879 --> 00:03:30,790
decays and you lose it so where is the

00:03:27,459 --> 00:03:33,129
archive we go to when something is rust

00:03:30,790 --> 00:03:37,180
when gif lab goes away when github goes

00:03:33,129 --> 00:03:40,090
away where do we go finally there's one

00:03:37,180 --> 00:03:44,500
last thing that we noticed is that

00:03:40,090 --> 00:03:50,169
there's lots and lots of teams that work

00:03:44,500 --> 00:03:53,739
on research on software and there's no

00:03:50,169 --> 00:03:57,639
real big infrastructure for research on

00:03:53,739 --> 00:04:00,689
code there's tons of critical issues

00:03:57,639 --> 00:04:06,370
around code safety security verification

00:04:00,689 --> 00:04:09,489
proves nobody is doing this at a very

00:04:06,370 --> 00:04:12,310
large scale if you want to see the stars

00:04:09,489 --> 00:04:14,470
you go to the Atacama Desert and you

00:04:12,310 --> 00:04:17,949
point a telescope at the sky where is

00:04:14,470 --> 00:04:22,030
the telescope for source code and that's

00:04:17,949 --> 00:04:25,030
what software heritage wants to be what

00:04:22,030 --> 00:04:27,729
we do is we collect we preserved and

00:04:25,030 --> 00:04:31,719
which and we share all the software that

00:04:27,729 --> 00:04:34,389
is publicly available why do we do that

00:04:31,719 --> 00:04:36,310
we do that to preserve the past to

00:04:34,389 --> 00:04:38,520
enhance the present and to prepare for

00:04:36,310 --> 00:04:42,430
the future

00:04:38,520 --> 00:04:45,509
so what we're building is a base

00:04:42,430 --> 00:04:47,949
infrastructure that can be used for

00:04:45,509 --> 00:04:50,590
cultural heritage for industry for

00:04:47,949 --> 00:04:52,210
research and for education purposes how

00:04:50,590 --> 00:04:54,729
do we do it we do it with an open

00:04:52,210 --> 00:04:59,260
approach every single line of code that

00:04:54,729 --> 00:05:02,300
we write is free software we do it

00:04:59,260 --> 00:05:05,690
transparently everything that we do

00:05:02,300 --> 00:05:10,060
we do it in the open visit on a mailing

00:05:05,690 --> 00:05:12,530
list or on our issue tracker and we

00:05:10,060 --> 00:05:15,860
strive to do it for the very long haul

00:05:12,530 --> 00:05:19,760
so we do it with replication in mind so

00:05:15,860 --> 00:05:23,210
that no single entity has full control

00:05:19,760 --> 00:05:26,450
over the data that we collect and we do

00:05:23,210 --> 00:05:30,770
it in a nonprofit fashion so that we

00:05:26,450 --> 00:05:36,880
avoid business driven decisions

00:05:30,770 --> 00:05:41,360
impacting the project so what we do

00:05:36,880 --> 00:05:45,650
concretely we do archiving of version

00:05:41,360 --> 00:05:47,690
control systems what does that mean it

00:05:45,650 --> 00:05:50,570
means work I have file contents so

00:05:47,690 --> 00:05:53,540
source code files we archive revisions

00:05:50,570 --> 00:05:57,020
which means all the metadata of the

00:05:53,540 --> 00:06:00,860
history of the projects we try to we try

00:05:57,020 --> 00:06:05,570
to download it and we put it inside a

00:06:00,860 --> 00:06:10,190
common data model that is shared across

00:06:05,570 --> 00:06:12,920
all the archive we archive releases of

00:06:10,190 --> 00:06:14,930
the software releases that have been

00:06:12,920 --> 00:06:17,180
tagged in a version control system as

00:06:14,930 --> 00:06:22,820
well as releases that we can find as

00:06:17,180 --> 00:06:28,430
doubles because sometimes views of this

00:06:22,820 --> 00:06:31,280
code differ and of course we archive

00:06:28,430 --> 00:06:34,370
where and when we've seen the data that

00:06:31,280 --> 00:06:40,090
we've corrected and all of this we put

00:06:34,370 --> 00:06:44,150
inside canonical VCS agnostic data model

00:06:40,090 --> 00:06:46,670
so if you have a debian package with its

00:06:44,150 --> 00:06:48,290
history if you have a git repository if

00:06:46,670 --> 00:06:50,750
you have a subversion repository if you

00:06:48,290 --> 00:06:53,000
have a mercurial repository it all looks

00:06:50,750 --> 00:06:57,910
the same and you can work on it with the

00:06:53,000 --> 00:07:01,010
same tools what we don't do is archive

00:06:57,910 --> 00:07:03,110
what around the software for instance

00:07:01,010 --> 00:07:05,710
the back tracking systems or the home

00:07:03,110 --> 00:07:08,990
pages or the wiki's or the mailing lists

00:07:05,710 --> 00:07:10,880
there are some projects that work in

00:07:08,990 --> 00:07:12,950
this space for instance the Internet

00:07:10,880 --> 00:07:13,820
Archive does a lot of very good work

00:07:12,950 --> 00:07:18,950
around

00:07:13,820 --> 00:07:21,550
having the web so our goal is not to

00:07:18,950 --> 00:07:27,890
replace them but to work with them and

00:07:21,550 --> 00:07:30,520
be able to do linking across all the

00:07:27,890 --> 00:07:33,890
archives that exist we can for instance

00:07:30,520 --> 00:07:36,140
for the mailing lists does the G main

00:07:33,890 --> 00:07:40,850
project that there's a lot of archiving

00:07:36,140 --> 00:07:44,950
of free software mailing lists so our

00:07:40,850 --> 00:07:48,170
long-term vision is to play a part in a

00:07:44,950 --> 00:07:52,100
semantic Wikipedia of software wiki data

00:07:48,170 --> 00:07:55,580
of software where we can hyperlink all

00:07:52,100 --> 00:08:01,070
the archives that exist and do stuff in

00:07:55,580 --> 00:08:05,450
the area so quick tour of our

00:08:01,070 --> 00:08:11,420
infrastructure so basically all the way

00:08:05,450 --> 00:08:15,650
to the right is our archive so our

00:08:11,420 --> 00:08:18,320
archive consists of a huge graph of all

00:08:15,650 --> 00:08:21,200
the metadata about the fights the

00:08:18,320 --> 00:08:25,190
directories the revisions the commits

00:08:21,200 --> 00:08:29,090
and the releases and all the projects

00:08:25,190 --> 00:08:31,580
that are on top of the of the graph we

00:08:29,090 --> 00:08:34,880
separate the file storage into another

00:08:31,580 --> 00:08:38,690
object storage because of the size

00:08:34,880 --> 00:08:41,690
discrepancy we have lots and lots of

00:08:38,690 --> 00:08:44,510
file contents that we need to store so

00:08:41,690 --> 00:08:49,730
we do that outside of the database that

00:08:44,510 --> 00:08:51,950
is used to store the graph so basically

00:08:49,730 --> 00:08:55,520
what we are kyv is a set of software

00:08:51,950 --> 00:08:59,480
origins that are git repositories

00:08:55,520 --> 00:09:04,670
mercurial repositories etc etc so all

00:08:59,480 --> 00:09:08,380
those origins are loaded on a regular

00:09:04,670 --> 00:09:10,790
schedule so if there is a very active

00:09:08,380 --> 00:09:14,810
software origin we are going to archive

00:09:10,790 --> 00:09:19,550
it more often than stale things that

00:09:14,810 --> 00:09:21,740
don't get a lot of updates and so what

00:09:19,550 --> 00:09:25,280
we do to get the list of software

00:09:21,740 --> 00:09:27,139
origins that we archive we have a bunch

00:09:25,280 --> 00:09:29,839
of Lister's that can

00:09:27,139 --> 00:09:31,609
like scroll through the list of

00:09:29,839 --> 00:09:36,350
repositories for instance on github or

00:09:31,609 --> 00:09:39,579
other hosting platforms we have code

00:09:36,350 --> 00:09:42,350
that can read Debian archive metadata to

00:09:39,579 --> 00:09:46,910
make a list of the packages that are

00:09:42,350 --> 00:09:51,049
inside this archive and can be can be

00:09:46,910 --> 00:09:53,839
archived etc etc so all of this is done

00:09:51,049 --> 00:09:56,299
on a regular basis we are currently

00:09:53,839 --> 00:09:59,989
working on some kind of push mechanism

00:09:56,299 --> 00:10:03,609
so that people or other systems can

00:09:59,989 --> 00:10:07,489
notify us of updates our goal is not to

00:10:03,609 --> 00:10:10,339
do real-time archiving we're really in

00:10:07,489 --> 00:10:15,079
it for the long run but we still want to

00:10:10,339 --> 00:10:19,699
be able to prioritize stuff that people

00:10:15,079 --> 00:10:21,889
tell us is important to archive the

00:10:19,699 --> 00:10:24,859
Internet Archive has a safe now button

00:10:21,889 --> 00:10:26,779
and we want to implement something along

00:10:24,859 --> 00:10:29,689
those lines as well so if we know that

00:10:26,779 --> 00:10:32,529
some software project is in danger for a

00:10:29,689 --> 00:10:36,949
reason or another then we can prioritize

00:10:32,529 --> 00:10:39,110
archiving it so this is the basic

00:10:36,949 --> 00:10:42,679
structure of a revision in this very

00:10:39,110 --> 00:10:46,100
attached archive you'll see that it's

00:10:42,679 --> 00:10:50,480
very similar to a git commit it's just

00:10:46,100 --> 00:10:52,639
right so the format of the metadata is

00:10:50,480 --> 00:10:55,069
pretty much what you'll find in the git

00:10:52,639 --> 00:10:58,160
commits with some extensions that you

00:10:55,069 --> 00:11:02,239
don't see here because this is from a

00:10:58,160 --> 00:11:08,059
git commit so basically what we do is we

00:11:02,239 --> 00:11:11,539
take the like identifier of the of the

00:11:08,059 --> 00:11:15,199
directory that the revision points to we

00:11:11,539 --> 00:11:17,569
take the identifier of the parent of the

00:11:15,199 --> 00:11:21,049
revision so we can keep track of the

00:11:17,569 --> 00:11:24,139
history and then we add some metadata of

00:11:21,049 --> 00:11:26,720
our chip and commuter ship information

00:11:24,139 --> 00:11:29,480
and then revision message and then we

00:11:26,720 --> 00:11:34,970
take our hash of this it makes an

00:11:29,480 --> 00:11:38,019
identifier that's probably unique very

00:11:34,970 --> 00:11:38,019
very probably unique

00:11:38,579 --> 00:11:46,049
and so using those identifiers we can

00:11:41,999 --> 00:11:48,389
retrace all the origins or the or the

00:11:46,049 --> 00:11:51,179
history of development of the projects

00:11:48,389 --> 00:11:54,569
and we can duplicate across all the

00:11:51,179 --> 00:11:58,049
archive all the ordered identifiers are

00:11:54,569 --> 00:12:00,540
intrinsic which means that we compute

00:11:58,049 --> 00:12:03,720
them from the contents of the things

00:12:00,540 --> 00:12:05,249
that we are archiving which means that

00:12:03,720 --> 00:12:12,119
we can depreciate very efficiently

00:12:05,249 --> 00:12:18,179
across well the data that we archive how

00:12:12,119 --> 00:12:22,259
much data do we archive a bits so we

00:12:18,179 --> 00:12:27,660
have passed the billion revision marks a

00:12:22,259 --> 00:12:31,799
few weeks ago it's graph is bit anyway

00:12:27,660 --> 00:12:34,470
you have a live graph so that's more

00:12:31,799 --> 00:12:38,759
modern foreign a half billion unique

00:12:34,470 --> 00:12:43,649
source code files we don't actually

00:12:38,759 --> 00:12:45,329
discriminate between what we would

00:12:43,649 --> 00:12:47,489
consider its source code and what

00:12:45,329 --> 00:12:49,379
upstream developers consider a source

00:12:47,489 --> 00:12:52,259
code so everything that's in a git

00:12:49,379 --> 00:12:56,600
repository we consider a source code if

00:12:52,259 --> 00:12:59,369
it's below sighs Fred hold one hundred

00:12:56,600 --> 00:13:02,610
billion revisions across 80 million

00:12:59,369 --> 00:13:06,569
projects so what do we archive we

00:13:02,610 --> 00:13:09,059
archive github we archive Debian so

00:13:06,569 --> 00:13:11,669
Debian we run the archival process every

00:13:09,059 --> 00:13:13,429
day so every day we get the new packages

00:13:11,669 --> 00:13:17,910
that have been uploaded in the archive

00:13:13,429 --> 00:13:20,429
github we try to keep up we are

00:13:17,910 --> 00:13:22,439
currently working on some performance

00:13:20,429 --> 00:13:24,419
improvements and some scalability

00:13:22,439 --> 00:13:28,160
improvements to make sure that we can

00:13:24,419 --> 00:13:36,619
keep up with the development on github

00:13:28,160 --> 00:13:39,509
we have archived as one of thing the

00:13:36,619 --> 00:13:44,279
former contents of Gautreau's and google

00:13:39,509 --> 00:13:47,089
code which are two prominent code

00:13:44,279 --> 00:13:50,860
hosting spaces that closed recently and

00:13:47,089 --> 00:13:54,210
we've been working

00:13:50,860 --> 00:13:57,010
archiving the contents of bitbucket

00:13:54,210 --> 00:14:01,060
which is kind of a challenge because the

00:13:57,010 --> 00:14:06,880
API is a bit buggy and a question isn't

00:14:01,060 --> 00:14:11,080
interested in fixing it so in concrete

00:14:06,880 --> 00:14:15,190
storage terms we have 175 terabytes of

00:14:11,080 --> 00:14:19,090
blobs so the files take when I read 75

00:14:15,190 --> 00:14:22,330
turbines and kind of big database 6

00:14:19,090 --> 00:14:26,890
terabytes so the database only contains

00:14:22,330 --> 00:14:29,980
the graph of like the metadata for the

00:14:26,890 --> 00:14:34,240
archive which is a basically an eight

00:14:29,980 --> 00:14:38,860
billion nodes and 70 billion edges graph

00:14:34,240 --> 00:14:40,330
and of course it's growing daily we we

00:14:38,860 --> 00:14:41,920
are pretty sure this is the richest the

00:14:40,330 --> 00:14:47,530
big sauce could archive that's available

00:14:41,920 --> 00:14:51,670
now and it keeps growing so how do we

00:14:47,530 --> 00:14:56,910
actually what kind of stack do we use to

00:14:51,670 --> 00:15:00,610
store all this we use Debian of course

00:14:56,910 --> 00:15:03,910
all our deployment recipes are in

00:15:00,610 --> 00:15:08,340
pipette in public repositories we've

00:15:03,910 --> 00:15:10,540
started using self for the blob storage

00:15:08,340 --> 00:15:13,330
we use possibly basic code for the

00:15:10,540 --> 00:15:15,760
metadata storage with some of the

00:15:13,330 --> 00:15:18,930
standard tools that live around to the

00:15:15,760 --> 00:15:24,930
basic rule for backups and replication

00:15:18,930 --> 00:15:29,830
we use standard Python stack for

00:15:24,930 --> 00:15:33,940
scheduling of jobs and for web interface

00:15:29,830 --> 00:15:38,430
stuff so basically a psycho PG - for the

00:15:33,940 --> 00:15:45,280
low level stuff Django for the web stuff

00:15:38,430 --> 00:15:48,070
and celery for the scheduling of jobs in

00:15:45,280 --> 00:15:51,280
house with written an ad hoc object

00:15:48,070 --> 00:15:53,950
storage system which has a bunch of

00:15:51,280 --> 00:15:56,530
backends that you can use so basically

00:15:53,950 --> 00:15:57,040
we are agnostic between a UNIX

00:15:56,530 --> 00:16:03,100
filesystem

00:15:57,040 --> 00:16:04,150
asier safe or tons of everything it's a

00:16:03,100 --> 00:16:05,770
really simple

00:16:04,150 --> 00:16:08,200
object storage system where you can just

00:16:05,770 --> 00:16:10,980
put an object get on objects put a bunch

00:16:08,200 --> 00:16:16,120
of objects get a bunch of villagers and

00:16:10,980 --> 00:16:20,830
we've implemented removal but we don't

00:16:16,120 --> 00:16:23,230
really use it yet all the data model

00:16:20,830 --> 00:16:25,390
implementation or the Lister's the

00:16:23,230 --> 00:16:28,720
loaders the schedulers everything has

00:16:25,390 --> 00:16:30,840
been written by us it's a pile of Python

00:16:28,720 --> 00:16:33,640
code

00:16:30,840 --> 00:16:36,280
so basically 20 Python packages and

00:16:33,640 --> 00:16:38,730
around 30 puppet modules to deploy all

00:16:36,280 --> 00:16:43,570
that and we've done everything as a

00:16:38,730 --> 00:16:45,960
copyleft license so gplv3 for the back

00:16:43,570 --> 00:16:52,950
end and a gplv3 for the front end so

00:16:45,960 --> 00:16:56,860
even if people try and make their own

00:16:52,950 --> 00:17:02,020
software heritage using our code they

00:16:56,860 --> 00:17:06,400
have to publish their changes hardware

00:17:02,020 --> 00:17:12,820
wise we run for now everything on few

00:17:06,400 --> 00:17:16,810
hypotheses in-house and our main storage

00:17:12,820 --> 00:17:21,220
is currently still on a very high

00:17:16,810 --> 00:17:23,860
density very slow very bulky storage

00:17:21,220 --> 00:17:28,870
array but we've started to migrate off

00:17:23,860 --> 00:17:31,720
this this thing into self storage

00:17:28,870 --> 00:17:36,190
cluster which we're going to grow as we

00:17:31,720 --> 00:17:40,570
need in the next few months we've also

00:17:36,190 --> 00:17:43,900
been granted by Microsoft some

00:17:40,570 --> 00:17:46,660
sponsorship in-kind sponsorship for

00:17:43,900 --> 00:17:49,600
their cloud services so we've started

00:17:46,660 --> 00:17:52,390
putting mirrors of everything in their

00:17:49,600 --> 00:17:55,480
infrastructure as well which means a

00:17:52,390 --> 00:17:59,950
full object storage mirror so hundred 70

00:17:55,480 --> 00:18:03,250
terabytes of stuff mirrored on Asia as

00:17:59,950 --> 00:18:06,160
well as a database mirror for graph and

00:18:03,250 --> 00:18:08,160
we're also doing all the contents

00:18:06,160 --> 00:18:15,780
indexing and all the things that need

00:18:08,160 --> 00:18:18,059
like scalability on Asia now so yeah and

00:18:15,780 --> 00:18:20,940
finally at the university of

00:18:18,059 --> 00:18:25,129
we have a back-end storage for the

00:18:20,940 --> 00:18:28,799
download so currently our main storage

00:18:25,129 --> 00:18:31,320
is quite slow so if you want to download

00:18:28,799 --> 00:18:34,830
a bundle of things that we've archived

00:18:31,320 --> 00:18:38,399
then we actually keep a cache of what

00:18:34,830 --> 00:18:41,879
we've done so that it doesn't take a

00:18:38,399 --> 00:18:45,479
million years to download stuff we do

00:18:41,879 --> 00:18:50,129
our development in a classic software

00:18:45,479 --> 00:18:53,450
way so we talk on mailing lists on IRC

00:18:50,129 --> 00:18:55,889
on a forge everything is in English

00:18:53,450 --> 00:18:57,450
everything's in public there's more

00:18:55,889 --> 00:19:00,149
information on our website if you want

00:18:57,450 --> 00:19:06,809
to actually have a look and see what we

00:19:00,149 --> 00:19:11,879
do so that's very interesting but how do

00:19:06,809 --> 00:19:14,759
we actually look into it so one of the

00:19:11,879 --> 00:19:19,019
ways that you can browse and that you

00:19:14,759 --> 00:19:22,109
can use the archive is using REST API so

00:19:19,019 --> 00:19:25,049
basically this API allows you to to

00:19:22,109 --> 00:19:27,629
point-wise browsing of the archive so

00:19:25,049 --> 00:19:32,070
you can go and follow the links in the

00:19:27,629 --> 00:19:37,289
graph which is very slow that gives you

00:19:32,070 --> 00:19:40,259
pretty much food access of for the data

00:19:37,289 --> 00:19:42,929
so there's an index for the API that you

00:19:40,259 --> 00:19:46,529
can look at but that's not really

00:19:42,929 --> 00:19:50,070
convenient so we also have a web user

00:19:46,529 --> 00:19:53,690
interface it's in preview right now

00:19:50,070 --> 00:19:57,989
we're gonna go we can do a full launch

00:19:53,690 --> 00:20:00,269
in the month of June so if you go to

00:19:57,989 --> 00:20:05,099
archive lots of try to teach the dog /

00:20:00,269 --> 00:20:10,889
browse with two given credentials you

00:20:05,099 --> 00:20:16,999
can see what's going on basically we

00:20:10,889 --> 00:20:23,029
have a web interface that allows you to

00:20:16,999 --> 00:20:26,860
look at wet origins we have downloaded

00:20:23,029 --> 00:20:31,360
when we have downloaded the origins and

00:20:26,860 --> 00:20:34,510
so with a with a kind of graph view of

00:20:31,360 --> 00:20:37,060
how often we've visited the origins and

00:20:34,510 --> 00:20:40,750
a calendar view of when we have visited

00:20:37,060 --> 00:20:43,180
the origins and then inside the visits

00:20:40,750 --> 00:20:45,460
you can actually browse the contents

00:20:43,180 --> 00:20:49,800
that we've archived so for instance this

00:20:45,460 --> 00:20:52,750
is the Python repository as of May 2013

00:20:49,800 --> 00:20:54,160
and you can have the list of files and

00:20:52,750 --> 00:20:59,230
then drill down

00:20:54,160 --> 00:21:01,240
it's a should be pretty intuitive if you

00:20:59,230 --> 00:21:03,010
look at the history of a project you can

00:21:01,240 --> 00:21:07,720
see the differences between two

00:21:03,010 --> 00:21:09,760
revisions of a project no that's the

00:21:07,720 --> 00:21:15,610
syntax highlighting but anyway the divs

00:21:09,760 --> 00:21:18,310
arrived right after so yeah pretty cool

00:21:15,610 --> 00:21:22,180
stuff I should be able to do a demo as

00:21:18,310 --> 00:21:24,600
well it's gonna be yeah should work go

00:21:22,180 --> 00:21:24,600
try

00:21:32,690 --> 00:21:35,809
[Music]

00:21:43,659 --> 00:21:49,279
so this is the main archive you can see

00:21:46,880 --> 00:21:52,149
some statistics about the objects that

00:21:49,279 --> 00:21:57,020
we've downloaded when you zoom in you

00:21:52,149 --> 00:21:59,480
get some kind of overflows because yeah

00:21:57,020 --> 00:22:06,010
why would you do that if we want to

00:21:59,480 --> 00:22:06,010
browse we can try to find a an origin

00:22:09,279 --> 00:22:18,679
okay so there's lots and lots of like

00:22:14,570 --> 00:22:22,070
random github folks of things we don't

00:22:18,679 --> 00:22:26,630
discriminate and we don't really like

00:22:22,070 --> 00:22:29,899
filter what we what we download we are

00:22:26,630 --> 00:22:40,340
looking into doing some relevance kind

00:22:29,899 --> 00:22:42,679
of sorting of the results here next Z

00:22:40,340 --> 00:22:45,200
rings why not

00:22:42,679 --> 00:22:48,679
so this has been downloaded for the last

00:22:45,200 --> 00:22:52,880
time on the 3rd of August 2016 so it's

00:22:48,679 --> 00:22:56,659
probably a dead repository but here you

00:22:52,880 --> 00:23:04,549
can see a bunch of source code you can

00:22:56,659 --> 00:23:07,549
read the readme of the gilepsy so if we

00:23:04,549 --> 00:23:10,940
go back to more interesting origin is

00:23:07,549 --> 00:23:14,440
the repository for kids I've selected

00:23:10,940 --> 00:23:17,720
the voluntary an old visit of the repo

00:23:14,440 --> 00:23:23,480
so that we can see what was going on

00:23:17,720 --> 00:23:28,429
them and then so if I look at the

00:23:23,480 --> 00:23:31,549
current of view yeah you can see that

00:23:28,429 --> 00:23:40,549
we've had some issues actually updating

00:23:31,549 --> 00:23:44,669
this but anyway forget the last visit

00:23:40,549 --> 00:23:48,620
then we can actually browse the contents

00:23:44,669 --> 00:23:52,139
you can get syntax highlighting as well

00:23:48,620 --> 00:24:03,389
this is a big way fired with lots of

00:23:52,139 --> 00:24:08,009
comments let's see would make sure

00:24:03,389 --> 00:24:11,850
source code anyway so that's the

00:24:08,009 --> 00:24:14,549
browsing interface we can also now get

00:24:11,850 --> 00:24:17,159
back with we've archived and downloaded

00:24:14,549 --> 00:24:20,700
which is kind of something that you

00:24:17,159 --> 00:24:23,879
might want to do if a repository is lost

00:24:20,700 --> 00:24:27,350
you can actually download it and get the

00:24:23,879 --> 00:24:30,629
source code back again so how we do that

00:24:27,350 --> 00:24:33,480
if you go on the top right of this

00:24:30,629 --> 00:24:36,240
browsing interface you have actions and

00:24:33,480 --> 00:24:39,179
download and you can download the

00:24:36,240 --> 00:24:42,360
directory that you're currently looking

00:24:39,179 --> 00:24:45,240
at so it's an a synchronous process

00:24:42,360 --> 00:24:47,700
which means that if there's a lot of

00:24:45,240 --> 00:24:50,820
load and it's going to take some time to

00:24:47,700 --> 00:24:53,070
get actually to be able to download the

00:24:50,820 --> 00:24:55,230
contents so you can put in your email

00:24:53,070 --> 00:24:57,389
address so we can notify you when the

00:24:55,230 --> 00:25:03,570
download is ready I'm gonna try my luck

00:24:57,389 --> 00:25:06,720
and say just ok and it's going to appear

00:25:03,570 --> 00:25:11,519
at some point in the list of things that

00:25:06,720 --> 00:25:14,730
I've requested but yeah I've already

00:25:11,519 --> 00:25:21,740
requested some things to download they

00:25:14,730 --> 00:25:21,740
can actually get an open as a tab oh

00:25:24,679 --> 00:25:27,679
yeah

00:25:28,029 --> 00:25:35,149
you please yeah I think that's the thing

00:25:32,869 --> 00:25:39,440
that I was actually looking at which is

00:25:35,149 --> 00:25:44,059
this revision of the git source code and

00:25:39,440 --> 00:25:48,129
then I can do you can open it yeah you

00:25:44,059 --> 00:25:58,190
max that's when you want a source code

00:25:48,129 --> 00:26:01,159
yeah so it seems to work and then of

00:25:58,190 --> 00:26:03,440
course if you want to actually script

00:26:01,159 --> 00:26:05,690
what you're doing there's an API that

00:26:03,440 --> 00:26:11,419
allows you to do the downloads as well

00:26:05,690 --> 00:26:15,259
so you can so the source code is the

00:26:11,419 --> 00:26:18,889
duplicated alerts which means that for

00:26:15,259 --> 00:26:21,229
one single repository you get tons of

00:26:18,889 --> 00:26:24,019
files that we we have to correct if you

00:26:21,229 --> 00:26:29,749
want to shown to actually download an

00:26:24,019 --> 00:26:36,259
archive of a directory so it takes a

00:26:29,749 --> 00:26:38,960
while but we have an asynchronous API so

00:26:36,259 --> 00:26:42,259
you can post the identifier of a

00:26:38,960 --> 00:26:44,690
revision to this URL and then get such

00:26:42,259 --> 00:26:50,450
sub dates and at some point it will tell

00:26:44,690 --> 00:26:52,999
you that so here the status will tell

00:26:50,450 --> 00:26:56,419
you that the object is available I can

00:26:52,999 --> 00:26:59,179
download it and you can even download

00:26:56,419 --> 00:27:02,119
the full history of a project and get

00:26:59,179 --> 00:27:05,419
that as an get fast export archive that

00:27:02,119 --> 00:27:09,379
you can report into a new git repository

00:27:05,419 --> 00:27:10,129
so any kind of this yes that we've

00:27:09,379 --> 00:27:13,129
imported

00:27:10,129 --> 00:27:20,960
you can export as a git repository and

00:27:13,129 --> 00:27:24,559
re-import on your machine so how to get

00:27:20,960 --> 00:27:27,169
involved in the project we have a lot of

00:27:24,559 --> 00:27:30,289
features that we're interested in lots

00:27:27,169 --> 00:27:33,830
of them are now in early access or have

00:27:30,289 --> 00:27:38,749
been done there's some stuff that we

00:27:33,830 --> 00:27:40,130
would like help with this is some stuff

00:27:38,749 --> 00:27:42,260
that we're working on

00:27:40,130 --> 00:27:43,880
provenance information so you have a

00:27:42,260 --> 00:27:45,860
content you want to know which

00:27:43,880 --> 00:27:48,230
repository it comes from that's

00:27:45,860 --> 00:27:52,190
something that we are working on food

00:27:48,230 --> 00:27:54,800
take search if you want I mean the end

00:27:52,190 --> 00:27:58,310
goal is to be able even to trace a

00:27:54,800 --> 00:28:00,310
source of snippets of code that have

00:27:58,310 --> 00:28:02,840
been copied from what project to another

00:28:00,310 --> 00:28:05,930
that's something that we can look into

00:28:02,840 --> 00:28:08,960
with the wealth of information that we

00:28:05,930 --> 00:28:12,110
have inside the archive there's a lot of

00:28:08,960 --> 00:28:13,880
things that I mean there's a lot of

00:28:12,110 --> 00:28:17,060
things that people want to do with the

00:28:13,880 --> 00:28:19,510
archive our goal is to enable people to

00:28:17,060 --> 00:28:23,720
do things to do interesting things with

00:28:19,510 --> 00:28:26,030
a lot of source code so yeah if you have

00:28:23,720 --> 00:28:28,940
an idea of what you'd want to do with

00:28:26,030 --> 00:28:33,230
such an archive please you can come talk

00:28:28,940 --> 00:28:38,990
to us and yeah we would be happy to help

00:28:33,230 --> 00:28:42,560
you help us so yeah what we want to do

00:28:38,990 --> 00:28:47,000
is to diversify the sources of things

00:28:42,560 --> 00:28:50,450
that we archive currently we have good

00:28:47,000 --> 00:28:55,430
support forget we have a case report for

00:28:50,450 --> 00:28:58,010
subversion and mercurial if your project

00:28:55,430 --> 00:29:03,730
of choice is in another version control

00:28:58,010 --> 00:29:09,160
system we are going to miss it so yeah

00:29:03,730 --> 00:29:13,250
people can contribute in this area if

00:29:09,160 --> 00:29:18,320
for the listing part we have coverage of

00:29:13,250 --> 00:29:21,710
Debian we have coverage of github if

00:29:18,320 --> 00:29:26,960
your code is somewhere else we won't see

00:29:21,710 --> 00:29:28,550
it so we need people to contribute stuff

00:29:26,960 --> 00:29:33,140
that can list for instance gitlab

00:29:28,550 --> 00:29:35,660
instances and then we can integrate that

00:29:33,140 --> 00:29:41,270
in our infrastructure and actually have

00:29:35,660 --> 00:29:46,360
people be able to archive the instances

00:29:41,270 --> 00:29:49,160
and of course we need to spread the word

00:29:46,360 --> 00:29:52,090
make the project sustainable we have a

00:29:49,160 --> 00:29:52,090
few sponsors now

00:29:52,869 --> 00:30:03,409
Microsoft Nokia Way github has joined as

00:29:59,869 --> 00:30:06,740
a sponsor the University of Bologna

00:30:03,409 --> 00:30:08,990
of course India is sponsoring but we

00:30:06,740 --> 00:30:12,980
need to keep spreading the world and

00:30:08,990 --> 00:30:16,039
keep keep the project sustainable and of

00:30:12,980 --> 00:30:18,230
course we need to like save endangered

00:30:16,039 --> 00:30:21,139
source code and for that we have a

00:30:18,230 --> 00:30:26,749
suggestion box on the wiki that you can

00:30:21,139 --> 00:30:28,669
add things to for instance we have in

00:30:26,749 --> 00:30:30,860
the back of our minds archiving

00:30:28,669 --> 00:30:35,149
SourceForge because we know that this

00:30:30,860 --> 00:30:41,779
isn't very sustainable in its at risk of

00:30:35,149 --> 00:30:45,649
being taken down at some point so if you

00:30:41,779 --> 00:30:48,889
want to join us we also have some job

00:30:45,649 --> 00:30:52,639
openings that are available for now it's

00:30:48,889 --> 00:30:55,929
in Paris so if you want to consider

00:30:52,639 --> 00:31:01,389
coming work with us in Paris you can

00:30:55,929 --> 00:31:03,830
look into that that's software attached

00:31:01,389 --> 00:31:05,539
we are building a reference archive of

00:31:03,830 --> 00:31:08,200
all the free software that's been ever

00:31:05,539 --> 00:31:10,809
written in an international open

00:31:08,200 --> 00:31:14,720
nonprofit and virtualized infrastructure

00:31:10,809 --> 00:31:19,029
that we have opened up to everyone all

00:31:14,720 --> 00:31:21,559
users vendors developers can use it and

00:31:19,029 --> 00:31:27,679
the idea is to be at the service of the

00:31:21,559 --> 00:31:30,679
community and for society as a whole so

00:31:27,679 --> 00:31:33,490
if you want to join us you can look at

00:31:30,679 --> 00:31:36,980
our website you can look at our code and

00:31:33,490 --> 00:31:39,369
you can also talk to me so if you have

00:31:36,980 --> 00:31:43,419
any questions I think we have about

00:31:39,369 --> 00:31:43,419
10-12 minutes for questions

00:31:50,280 --> 00:32:00,220
do you have question how do you protect

00:31:58,030 --> 00:32:02,050
the archive against stuff that you don't

00:32:00,220 --> 00:32:05,380
want to have in the archive I can think

00:32:02,050 --> 00:32:08,710
of a stuff that is copyright protected

00:32:05,380 --> 00:32:13,630
and that github will also delete after a

00:32:08,710 --> 00:32:15,850
while Wars if I would misuse the archive

00:32:13,630 --> 00:32:17,560
as my private back up and store

00:32:15,850 --> 00:32:19,690
encrypted blocks on github

00:32:17,560 --> 00:32:25,960
and you will eventually backup them for

00:32:19,690 --> 00:32:28,870
me so there's I think two sides of the

00:32:25,960 --> 00:32:33,070
question the first side is do we really

00:32:28,870 --> 00:32:35,650
archive only stuff that is free software

00:32:33,070 --> 00:32:41,260
and that we can redistribute and how do

00:32:35,650 --> 00:32:48,480
we manage for instance copyright

00:32:41,260 --> 00:32:50,980
takedown stuff so currently so most of

00:32:48,480 --> 00:32:54,760
the infrastructure of the project is in

00:32:50,980 --> 00:32:58,900
the French law that's defined process to

00:32:54,760 --> 00:33:04,900
do copyright takedown in the French in

00:32:58,900 --> 00:33:06,730
the French legal system we would be

00:33:04,900 --> 00:33:10,500
really annoyed to have to take down

00:33:06,730 --> 00:33:10,500
content from the archive

00:33:11,490 --> 00:33:19,980
what we do however is to mirror public

00:33:16,950 --> 00:33:24,010
information that is publicly available

00:33:19,980 --> 00:33:29,710
of course I'm not like a lawyer for the

00:33:24,010 --> 00:33:31,210
project so I can't really like I'm not a

00:33:29,710 --> 00:33:36,220
hundred percent sure of what I'm about

00:33:31,210 --> 00:33:39,370
to say but what I know is that in the

00:33:36,220 --> 00:33:42,070
current French legislation studies if

00:33:39,370 --> 00:33:43,900
the source of the data is still

00:33:42,070 --> 00:33:46,360
available so for instance if the data is

00:33:43,900 --> 00:33:48,880
still on github then you need to have

00:33:46,360 --> 00:33:57,580
github take it down before we have to

00:33:48,880 --> 00:34:01,130
take it down if we are not currently

00:33:57,580 --> 00:34:04,190
filtering content for misuse of the

00:34:01,130 --> 00:34:06,049
so the only thing that we do is that we

00:34:04,190 --> 00:34:08,320
put a limit on the size of the files

00:34:06,049 --> 00:34:11,060
that are archived in software heritage

00:34:08,320 --> 00:34:18,250
the limit is pretty high like hundred

00:34:11,060 --> 00:34:22,010
megabytes something we can't really like

00:34:18,250 --> 00:34:25,310
decide ourselves what its source code

00:34:22,010 --> 00:34:29,000
but it's not source code because for

00:34:25,310 --> 00:34:31,040
instance if your if your project is a

00:34:29,000 --> 00:34:33,440
cryptography library you might want to

00:34:31,040 --> 00:34:36,349
have some encrypted blocks of data that

00:34:33,440 --> 00:34:39,859
are stored in your source code

00:34:36,349 --> 00:34:42,770
repository as test fixtures and then you

00:34:39,859 --> 00:34:45,440
need them to build the code and to make

00:34:42,770 --> 00:34:47,720
sure that it works so how would that be

00:34:45,440 --> 00:34:50,960
any different than your encrypted backup

00:34:47,720 --> 00:34:54,320
on github how could we suffer heritage

00:34:50,960 --> 00:35:00,650
distinguish between proper use and

00:34:54,320 --> 00:35:03,140
misuse of the resources so I guess our

00:35:00,650 --> 00:35:05,540
long-term goal is to not have to care

00:35:03,140 --> 00:35:09,260
about misuse because it's going to be a

00:35:05,540 --> 00:35:12,920
drop in the ocean we're gonna have so

00:35:09,260 --> 00:35:15,650
much but we want to have enough space

00:35:12,920 --> 00:35:17,359
and enough resources that we don't

00:35:15,650 --> 00:35:28,839
really need to ask ourselves this

00:35:17,359 --> 00:35:28,839
question basically other questions

00:35:30,240 --> 00:35:36,920
[Music]

00:35:33,069 --> 00:35:38,839
have you looked at of some form of

00:35:36,920 --> 00:35:42,799
authentication to provide additional

00:35:38,839 --> 00:35:46,430
assurance that the archived source code

00:35:42,799 --> 00:35:51,589
hasn't been modified or tampered with in

00:35:46,430 --> 00:35:53,869
some form so first of all all the

00:35:51,589 --> 00:35:57,650
identifiers for the objects that are

00:35:53,869 --> 00:36:00,079
inside the archive are cryptographic

00:35:57,650 --> 00:36:04,400
hashes of the contents that we've

00:36:00,079 --> 00:36:08,450
archived so for files for instance we

00:36:04,400 --> 00:36:14,210
take the shy one the sha-256 the one of

00:36:08,450 --> 00:36:17,750
the Blake hashes and get modified try

00:36:14,210 --> 00:36:19,730
one of the file and we use that in the

00:36:17,750 --> 00:36:22,609
manifests for the directories so the

00:36:19,730 --> 00:36:26,359
directories the directory identifiers

00:36:22,609 --> 00:36:28,240
are a hash of the manifest of the list

00:36:26,359 --> 00:36:32,510
of files that are inside the directory

00:36:28,240 --> 00:36:38,510
etc etc so recursively you can make sure

00:36:32,510 --> 00:36:45,349
that the data that we give back to you

00:36:38,510 --> 00:36:49,849
has not been at least altered by like

00:36:45,349 --> 00:36:52,760
the trip or anything so we regularly run

00:36:49,849 --> 00:36:54,980
a scrub of the data that we have in the

00:36:52,760 --> 00:36:59,420
archive so we make sure that there's no

00:36:54,980 --> 00:37:08,809
rot inside our archive we've not looked

00:36:59,420 --> 00:37:11,720
into basically attestation of for

00:37:08,809 --> 00:37:14,079
instance making sure that the code that

00:37:11,720 --> 00:37:14,079
we've downloaded

00:37:18,370 --> 00:37:26,890
I mean we we're not doing anything more

00:37:23,050 --> 00:37:29,880
than taking a picture of the data and we

00:37:26,890 --> 00:37:34,060
say we've computed this hash

00:37:29,880 --> 00:37:36,610
maybe the code that's been presented by

00:37:34,060 --> 00:37:38,560
github to software heritage is different

00:37:36,610 --> 00:37:46,030
than what you've uploaded to github

00:37:38,560 --> 00:37:48,310
we can't tell in the case of gates you

00:37:46,030 --> 00:37:50,350
can always use the identifier of the

00:37:48,310 --> 00:37:53,410
objects that you've pushed so you have

00:37:50,350 --> 00:37:55,960
the commit hash which is itself a

00:37:53,410 --> 00:38:00,100
cryptographic identifier of the contents

00:37:55,960 --> 00:38:03,340
of the commit in turn if the commit is

00:38:00,100 --> 00:38:05,020
signed then the signature is still

00:38:03,340 --> 00:38:09,700
stored in the software attach metadata

00:38:05,020 --> 00:38:12,190
and you can like reproduce the original

00:38:09,700 --> 00:38:14,920
get object and check the signature but

00:38:12,190 --> 00:38:17,800
we've not done anything specific for

00:38:14,920 --> 00:38:27,340
software attached in this area does that

00:38:17,800 --> 00:38:32,410
answer your question questions that's

00:38:27,340 --> 00:38:41,250
one in front so it's partially question

00:38:32,410 --> 00:38:43,720
partially comments so for now for me

00:38:41,250 --> 00:38:46,330
it's more like microscopes so you can

00:38:43,720 --> 00:38:48,310
focus on one thing but that's not much

00:38:46,330 --> 00:38:51,760
so have you started thinking about how

00:38:48,310 --> 00:38:54,310
to analyze entire ecosystem or so for

00:38:51,760 --> 00:38:55,780
example now we have jungle - which is

00:38:54,310 --> 00:38:58,120
Python free only so it would be

00:38:55,780 --> 00:39:00,160
interesting to look at all jungle models

00:38:58,120 --> 00:39:01,780
to see you and they starts moving to

00:39:00,160 --> 00:39:05,800
this jungle so we would need to start

00:39:01,780 --> 00:39:08,950
analyzing thousands or millions of files

00:39:05,800 --> 00:39:13,090
but then we would need to some SQL like

00:39:08,950 --> 00:39:17,680
or some MapReduce jobs or some yes so

00:39:13,090 --> 00:39:18,550
we've started so the the two initiators

00:39:17,680 --> 00:39:21,100
of the project

00:39:18,550 --> 00:39:24,180
Roberto D Cosmo and Stefano security

00:39:21,100 --> 00:39:27,270
both researchers in computer science so

00:39:24,180 --> 00:39:30,250
there was strong background in actually

00:39:27,270 --> 00:39:35,120
mining software repositories and

00:39:30,250 --> 00:39:39,350
doing some large-scale analysis on

00:39:35,120 --> 00:39:43,670
source code we've been talking with

00:39:39,350 --> 00:39:47,350
research groups whose main goal is to do

00:39:43,670 --> 00:39:49,360
analysis on large-scale National

00:39:47,350 --> 00:39:53,960
Archives

00:39:49,360 --> 00:39:56,810
one of the first mirrors so out loud

00:39:53,960 --> 00:40:00,110
outside of our control of the archive

00:39:56,810 --> 00:40:04,820
will be in Grenoble there's a there's a

00:40:00,110 --> 00:40:08,060
few teams that work on actually doing

00:40:04,820 --> 00:40:08,420
large-scale research on source code over

00:40:08,060 --> 00:40:10,850
there

00:40:08,420 --> 00:40:15,620
so that's what the mirror will be used

00:40:10,850 --> 00:40:18,170
for we've also been looking at what the

00:40:15,620 --> 00:40:21,050
Google open-source team does they have

00:40:18,170 --> 00:40:23,180
like this big repository with all the

00:40:21,050 --> 00:40:27,920
code that Google uses and they've

00:40:23,180 --> 00:40:31,360
started to push back like do large-scale

00:40:27,920 --> 00:40:36,560
analysis of security vulnerabilities of

00:40:31,360 --> 00:40:38,720
like issues with static and dynamic

00:40:36,560 --> 00:40:42,590
analysis of the code and they've started

00:40:38,720 --> 00:40:46,250
pushing their fixes upstream that's

00:40:42,590 --> 00:40:48,290
something that we want to enable users

00:40:46,250 --> 00:40:50,240
to do that's not something that we want

00:40:48,290 --> 00:40:53,410
to do ourselves but we want to make sure

00:40:50,240 --> 00:40:56,840
that people can do it using our archive

00:40:53,410 --> 00:40:59,680
so we'd be happy to work with people who

00:40:56,840 --> 00:41:03,020
already do that so that they can use

00:40:59,680 --> 00:41:07,850
their knowledge and their tools inside

00:41:03,020 --> 00:41:09,940
our archive does that answer your

00:41:07,850 --> 00:41:09,940
question

00:41:13,870 --> 00:41:20,930
any more questions no then thank you

00:41:20,330 --> 00:41:23,060
very much

00:41:20,930 --> 00:41:28,090
Nicola thank you

00:41:23,060 --> 00:41:28,090

YouTube URL: https://www.youtube.com/watch?v=TiGt8TSZYHQ


