Title: Putting GNU kFreeBSD into production
Publication date: 2017-12-05
Playlist: DebConf 16
Description: 
	by Steven Chamberlain

At: Debconf 16 video RSS feed
https://debconf16.debconf.org/
Room: Menzies 9
Scheduled start: 2016-07-05 11:10:00
Captions: 
	00:00:00,030 --> 00:00:04,560
next up Stephen Chamberlain will be

00:00:02,310 --> 00:00:07,980
telling us what he's done and there be a

00:00:04,560 --> 00:00:10,380
FreeBSD since the last aircraft and also

00:00:07,980 --> 00:00:15,839
some example of people actually using a

00:00:10,380 --> 00:00:19,949
FreeBSD in production thank you and okay

00:00:15,839 --> 00:00:22,590
so you know what KPBS tea is before I

00:00:19,949 --> 00:00:25,230
start well put your hands up if you know

00:00:22,590 --> 00:00:27,689
what it is yeah so I don't really need

00:00:25,230 --> 00:00:31,880
to go over that much or any of you

00:00:27,689 --> 00:00:38,399
actually using it for things yet oh yeah

00:00:31,880 --> 00:00:39,750
one more thing I thought yeah I had a

00:00:38,399 --> 00:00:43,850
lot of people asking questions about a

00:00:39,750 --> 00:00:45,930
FreeBSD but also about me because I

00:00:43,850 --> 00:00:52,590
generally don't talk much about myself

00:00:45,930 --> 00:00:55,920
but we have time I'm I'm from the very

00:00:52,590 --> 00:01:00,449
North East of England where there were

00:00:55,920 --> 00:01:03,180
very few Dedes around not many major IT

00:01:00,449 --> 00:01:06,470
companies so I just freelance I am a

00:01:03,180 --> 00:01:08,990
developer and a Systems Administrator

00:01:06,470 --> 00:01:15,299
capabie Steve sounded interesting to me

00:01:08,990 --> 00:01:16,560
five years ago just seemed something

00:01:15,299 --> 00:01:19,560
really cool and different I thought I

00:01:16,560 --> 00:01:23,850
would try it out and as I started to

00:01:19,560 --> 00:01:26,460
find bugs in it and she had some fun

00:01:23,850 --> 00:01:30,689
fixing those and decided to keep going

00:01:26,460 --> 00:01:34,229
for another five years so other

00:01:30,689 --> 00:01:37,829
questions I've had people ask me why

00:01:34,229 --> 00:01:40,229
they should run Kay FreeBSD or why does

00:01:37,829 --> 00:01:43,860
Debian nikkei FreeBSD and what's wrong

00:01:40,229 --> 00:01:45,479
with just using Linux but I'm not gonna

00:01:43,860 --> 00:01:47,009
answer these questions because they they

00:01:45,479 --> 00:01:50,670
have a they all have a sort of negative

00:01:47,009 --> 00:01:53,130
connotation to them I am NOT saying

00:01:50,670 --> 00:01:54,780
Linux is bad it's very good obviously

00:01:53,130 --> 00:01:58,170
many of you seem to like it

00:01:54,780 --> 00:02:01,020
and I don't want to sell caifa bastey to

00:01:58,170 --> 00:02:03,590
you because if if you think it's useful

00:02:01,020 --> 00:02:06,149
to you you should already know this

00:02:03,590 --> 00:02:08,369
people will just think oh I actually do

00:02:06,149 --> 00:02:10,229
need to run a free beastie kernel for

00:02:08,369 --> 00:02:12,569
some reason or I have some application

00:02:10,229 --> 00:02:13,290
that can only be won on the freebsd

00:02:12,569 --> 00:02:15,269
kernel and

00:02:13,290 --> 00:02:21,420
I would like all the good things that

00:02:15,269 --> 00:02:24,209
come with Debian as well and why I

00:02:21,420 --> 00:02:26,939
personally work on this project and some

00:02:24,209 --> 00:02:31,280
of the others before me and Santiago

00:02:26,939 --> 00:02:35,250
Vela said because we can because well

00:02:31,280 --> 00:02:38,849
Debian is really well organized to allow

00:02:35,250 --> 00:02:43,709
people to work on whatever they want to

00:02:38,849 --> 00:02:46,700
do and mostly keep a keep out of each

00:02:43,709 --> 00:02:49,079
other's way and produce something that's

00:02:46,700 --> 00:02:53,340
the combination of everyone's efforts in

00:02:49,079 --> 00:02:57,989
different areas Debian always offers

00:02:53,340 --> 00:03:03,419
tries to its users so we carry whole

00:02:57,989 --> 00:03:06,000
different desktop environments in its

00:03:03,419 --> 00:03:07,980
systems and different window managers

00:03:06,000 --> 00:03:10,500
even every every small detail there is a

00:03:07,980 --> 00:03:14,669
choice within Debian for whatever the

00:03:10,500 --> 00:03:17,220
user would like to use and many Debian

00:03:14,669 --> 00:03:20,180
users love Debian for this reason so

00:03:17,220 --> 00:03:22,650
yeah let's offer different kernels to

00:03:20,180 --> 00:03:25,889
it's also very educational working on

00:03:22,650 --> 00:03:28,190
KPBS D I only had about two years of

00:03:25,889 --> 00:03:30,239
university studying computer science

00:03:28,190 --> 00:03:35,669
which is not a lot of practical

00:03:30,239 --> 00:03:37,799
knowledge I think but yeah diving into

00:03:35,669 --> 00:03:41,879
something like k4 BSD where one moment

00:03:37,799 --> 00:03:43,590
and when working on some crufty Perl

00:03:41,879 --> 00:03:45,239
script and then the next minute I'm

00:03:43,590 --> 00:03:49,169
trying to build open JDK or something

00:03:45,239 --> 00:03:50,370
which is a huge C++ project and these

00:03:49,169 --> 00:03:54,870
are all things that you can only really

00:03:50,370 --> 00:03:59,310
learn by doing and I've learned a lot in

00:03:54,870 --> 00:04:02,489
five years so umm some advantages that

00:03:59,310 --> 00:04:06,299
KPBS D has for Debian is that it's a

00:04:02,489 --> 00:04:08,280
good QA we find interesting books quite

00:04:06,299 --> 00:04:11,579
a lot of them actually and some are in

00:04:08,280 --> 00:04:15,859
Debian packaging and maybe making wrong

00:04:11,579 --> 00:04:15,859
assumptions about what will happen

00:04:18,200 --> 00:04:32,910
test Suites often make the assumption

00:04:21,450 --> 00:04:43,770
that something yeah many tests are just

00:04:32,910 --> 00:04:45,060
broken people seem to just run the test

00:04:43,770 --> 00:04:48,560
and then whatever the answer is they

00:04:45,060 --> 00:04:48,560
caught that in as the expected result

00:04:49,370 --> 00:04:55,740
but having software be able to run on

00:04:52,560 --> 00:05:01,020
very different systems is a healthy

00:04:55,740 --> 00:05:03,420
thing I think it might not make sense if

00:05:01,020 --> 00:05:06,510
we might not seem to make sense if 90%

00:05:03,420 --> 00:05:08,640
99% of people just used amd64 on Linux

00:05:06,510 --> 00:05:10,560
but every now and again there's a new

00:05:08,640 --> 00:05:15,020
cool platform where Debian would be

00:05:10,560 --> 00:05:19,530
really nice to have and the more

00:05:15,020 --> 00:05:21,810
practice we have porting to new or old

00:05:19,530 --> 00:05:23,550
platforms then the more agility

00:05:21,810 --> 00:05:25,080
flexibility we should have in our tool

00:05:23,550 --> 00:05:26,820
chain packaging to be able to support

00:05:25,080 --> 00:05:33,330
and you architecture when it comes along

00:05:26,820 --> 00:05:35,430
and in FreeBSD kernel itself there are

00:05:33,330 --> 00:05:38,970
some cool things like BSD jails which

00:05:35,430 --> 00:05:42,240
were around before it's quite similar to

00:05:38,970 --> 00:05:45,540
System DNS born I think but also has

00:05:42,240 --> 00:05:48,000
some it allows to give an IP address to

00:05:45,540 --> 00:05:51,810
a container like openvz if any of you

00:05:48,000 --> 00:05:54,590
remember that I think Alex sees doing a

00:05:51,810 --> 00:05:56,460
similar thing now in Linux but um

00:05:54,590 --> 00:05:58,800
FreeBSD has had this for quite some time

00:05:56,460 --> 00:05:59,220
it's quite meteor there and they're so

00:05:58,800 --> 00:06:00,720
cute

00:05:59,220 --> 00:06:02,880
extra security features like secure

00:06:00,720 --> 00:06:05,160
level which some people are interested

00:06:02,880 --> 00:06:07,890
in having this in Linux but yeah we

00:06:05,160 --> 00:06:09,630
already have that in capability and the

00:06:07,890 --> 00:06:11,340
firewall is good that's that's the one

00:06:09,630 --> 00:06:14,550
from open BSD just a very slightly

00:06:11,340 --> 00:06:17,480
different implementation and and we

00:06:14,550 --> 00:06:17,480
already had ZFS

00:06:20,680 --> 00:06:25,210
debian can offer some nice things to the

00:06:22,720 --> 00:06:28,000
freebsd user and they could come to

00:06:25,210 --> 00:06:29,530
debian and we have a nice collection of

00:06:28,000 --> 00:06:33,190
software packages there well looks after

00:06:29,530 --> 00:06:37,800
we have very strict policy on how the

00:06:33,190 --> 00:06:43,600
package can be what the package can do

00:06:37,800 --> 00:06:46,600
DFS G upstream FreeBSD has different

00:06:43,600 --> 00:06:54,669
opinions on what they will allow to put

00:06:46,600 --> 00:07:00,490
in a a package and yeah Debian has a

00:06:54,669 --> 00:07:03,550
lovely community behind it and right now

00:07:00,490 --> 00:07:05,410
if you're running a free base T Weasley

00:07:03,550 --> 00:07:09,160
and some people still are you should

00:07:05,410 --> 00:07:11,770
probably upgrade because since we're not

00:07:09,160 --> 00:07:14,710
part of the LTS that's end-of-life now

00:07:11,770 --> 00:07:17,590
you should upgrade to the new suite

00:07:14,710 --> 00:07:19,270
which is called Jesse K FreeBSD so it's

00:07:17,590 --> 00:07:21,760
not just Jesse you have to edit your apt

00:07:19,270 --> 00:07:25,539
sources and change the sweet name -

00:07:21,760 --> 00:07:28,210
Jesse - Kay for BSD and then app get

00:07:25,539 --> 00:07:31,380
just upgrade reboot and hopefully

00:07:28,210 --> 00:07:31,380
everything should be just fine

00:07:35,490 --> 00:07:42,039
Jesse K PBS D is not a an official

00:07:38,530 --> 00:07:43,630
Debian release architecture but it does

00:07:42,039 --> 00:07:45,789
have security support because we simply

00:07:43,630 --> 00:07:49,840
take the packages that are uploaded to

00:07:45,789 --> 00:07:51,729
the main security suite and we have a

00:07:49,840 --> 00:07:53,800
security build daemon that will just

00:07:51,729 --> 00:07:56,410
build these packages for K for BST as

00:07:53,800 --> 00:07:59,650
well that only leaves parts that are

00:07:56,410 --> 00:08:03,870
caifa BD k FreeBSD specific we look

00:07:59,650 --> 00:08:09,760
after those - we package up streams

00:08:03,870 --> 00:08:13,810
errata and security updates now if you

00:08:09,760 --> 00:08:15,130
want to install this fresh the

00:08:13,810 --> 00:08:17,500
difficulty is that we haven't been able

00:08:15,130 --> 00:08:20,919
to build CD images in the correct way

00:08:17,500 --> 00:08:23,020
for an official release and we have some

00:08:20,919 --> 00:08:25,660
things that are in Jesse capability

00:08:23,020 --> 00:08:29,770
proposed updates and some packages that

00:08:25,660 --> 00:08:32,140
are in Jesse care for BSD the CD image

00:08:29,770 --> 00:08:34,900
building tools don't usually

00:08:32,140 --> 00:08:39,850
build from these two sources at once but

00:08:34,900 --> 00:08:42,550
yeah maybe we could yeah this is still

00:08:39,850 --> 00:08:45,100
to be worked out and I have some

00:08:42,550 --> 00:08:47,770
unofficial install media around if you

00:08:45,100 --> 00:08:51,620
do want to try ask me or there's a

00:08:47,770 --> 00:08:54,390
mailing list post I can show you

00:08:51,620 --> 00:09:01,060
[Applause]

00:08:54,390 --> 00:09:03,690
so actually using KPBS D well this

00:09:01,060 --> 00:09:12,880
laptop is running KPBS D I have Firefox

00:09:03,690 --> 00:09:17,610
VLC console everything I need 3d

00:09:12,880 --> 00:09:17,610
graphics is working now in Jessie it

00:09:18,090 --> 00:09:22,120
wasn't always the case

00:09:19,660 --> 00:09:24,970
we relied on the visa driver in wheezy

00:09:22,120 --> 00:09:28,750
but now have these kms drivers which are

00:09:24,970 --> 00:09:38,620
being ported from Linux and they mostly

00:09:28,750 --> 00:09:40,690
work ok I'll also mention that

00:09:38,620 --> 00:09:43,450
capability doesn't have system D that's

00:09:40,690 --> 00:09:44,620
because it cannot be easily ported and

00:09:43,450 --> 00:09:49,350
it's sort of a moving target

00:09:44,620 --> 00:09:51,850
we were unlikely to go with it but

00:09:49,350 --> 00:09:53,620
upstream FreeBSD is interested in new

00:09:51,850 --> 00:09:55,810
init systems they have actually multiple

00:09:53,620 --> 00:09:59,050
projects going on to look at

00:09:55,810 --> 00:10:00,970
alternatives like open RC and nosh is

00:09:59,050 --> 00:10:04,600
something that may be able to take

00:10:00,970 --> 00:10:08,350
system D init files and use those as is

00:10:04,600 --> 00:10:10,600
a sort of compatibility layer for

00:10:08,350 --> 00:10:12,790
systems that want to use system D unit

00:10:10,600 --> 00:10:18,790
files but on platforms that don't have

00:10:12,790 --> 00:10:21,040
system T I've known many people use

00:10:18,790 --> 00:10:24,010
capability for a small firewall router

00:10:21,040 --> 00:10:28,000
box because of the nice network stack in

00:10:24,010 --> 00:10:30,720
FreeBSD it's well known that some

00:10:28,000 --> 00:10:33,850
companies like Yahoo Netflix

00:10:30,720 --> 00:10:36,850
what's up even power their systems on

00:10:33,850 --> 00:10:38,440
FreeBSD for some reason maybe some

00:10:36,850 --> 00:10:40,570
people feel that Network stack is better

00:10:38,440 --> 00:10:42,130
or easier to extend for for their

00:10:40,570 --> 00:10:46,780
particular application

00:10:42,130 --> 00:10:50,380
and the PF firewall is very good it has

00:10:46,780 --> 00:10:52,630
a lovely configuration syntax and and

00:10:50,380 --> 00:10:54,640
there's also carp which comes from

00:10:52,630 --> 00:10:57,100
OpenBSD that allows for high

00:10:54,640 --> 00:10:58,720
availability set up of multiple firewall

00:10:57,100 --> 00:10:59,740
systems and if any one goes down the

00:10:58,720 --> 00:11:05,370
other one should just take over

00:10:59,740 --> 00:11:08,140
automatically I personally have used

00:11:05,370 --> 00:11:11,380
KPBS D to set up wireless access points

00:11:08,140 --> 00:11:16,570
quite a network of them bridging between

00:11:11,380 --> 00:11:18,670
a wired VLAN and a number of nodes which

00:11:16,570 --> 00:11:21,220
are running capability is wireless

00:11:18,670 --> 00:11:29,950
access points this is super easy to set

00:11:21,220 --> 00:11:32,680
up it's basically just running if config

00:11:29,950 --> 00:11:35,050
in the right parameters and you know if

00:11:32,680 --> 00:11:37,980
you have the appropriate hardware that

00:11:35,050 --> 00:11:40,570
can support running in master mode then

00:11:37,980 --> 00:11:43,780
then you can set up a really easy by

00:11:40,570 --> 00:11:45,460
this access point that way and the

00:11:43,780 --> 00:11:47,160
advantage of running Debian on your

00:11:45,460 --> 00:11:50,980
access point is that you can install any

00:11:47,160 --> 00:11:52,930
Debian package software on it so you can

00:11:50,980 --> 00:11:55,090
run an SSH server on your access point

00:11:52,930 --> 00:11:59,140
log into it see what's going on look at

00:11:55,090 --> 00:12:06,160
what nodes are connected to it the

00:11:59,140 --> 00:12:08,170
signal strength of those I even got a

00:12:06,160 --> 00:12:11,290
sort of graph is script that would show

00:12:08,170 --> 00:12:14,140
all the nodes connected to different

00:12:11,290 --> 00:12:16,150
access points in different buildings to

00:12:14,140 --> 00:12:23,110
see see web devices are located and

00:12:16,150 --> 00:12:25,360
there's the signal strength also all the

00:12:23,110 --> 00:12:26,860
system deployment tools in Debian such

00:12:25,360 --> 00:12:28,780
as puppet and Anza born you could

00:12:26,860 --> 00:12:29,440
actually use those to configure your

00:12:28,780 --> 00:12:31,390
wireless network

00:12:29,440 --> 00:12:36,150
if if the access points were running

00:12:31,390 --> 00:12:39,670
Debian and file servers are popular I

00:12:36,150 --> 00:12:43,750
use capability for this some of the

00:12:39,670 --> 00:12:47,860
capability uses of set up file servers

00:12:43,750 --> 00:12:49,810
because ZFS is really nice it compresses

00:12:47,860 --> 00:12:53,910
the files on disk it just it's on

00:12:49,810 --> 00:12:57,750
checksumming to assure integrity of data

00:12:53,910 --> 00:13:02,130
and snapshots brilliant I will talk

00:12:57,750 --> 00:13:04,470
about those next ZFS was based around

00:13:02,130 --> 00:13:07,170
the principle that hardware RAID

00:13:04,470 --> 00:13:08,850
controller suck they limit you in what

00:13:07,170 --> 00:13:14,400
you can do and run a propriety firmware

00:13:08,850 --> 00:13:17,610
usually so if this is all implemented in

00:13:14,400 --> 00:13:20,220
software free software then you can do

00:13:17,610 --> 00:13:24,450
things that a raid vendor would not

00:13:20,220 --> 00:13:30,060
allow you to do like it's very easy in k

00:13:24,450 --> 00:13:32,790
freebsd to replace what to adjust the

00:13:30,060 --> 00:13:35,940
configuration of your raid on the fly

00:13:32,790 --> 00:13:39,420
while it is online so you could upgrade

00:13:35,940 --> 00:13:41,580
an entire raid from small discs to newer

00:13:39,420 --> 00:13:45,770
larger capacity discs without any

00:13:41,580 --> 00:13:48,060
downtime and expand into that space I

00:13:45,770 --> 00:13:52,800
mean some raid controllers will allow

00:13:48,060 --> 00:13:55,190
you to do that but some won't or will do

00:13:52,800 --> 00:13:57,870
an awful lot of rethinking and things

00:13:55,190 --> 00:14:01,020
rethinking is much faster in ZFS because

00:13:57,870 --> 00:14:04,380
it only resyncs the allocated data and

00:14:01,020 --> 00:14:06,810
not the whole pool like Linux and empty

00:14:04,380 --> 00:14:08,460
would do on the plot advice because if

00:14:06,810 --> 00:14:11,100
Linux and he doesn't really know if

00:14:08,460 --> 00:14:14,420
blocks are in use whereas ZFS does and

00:14:11,100 --> 00:14:17,490
it will only need to resync those ones

00:14:14,420 --> 00:14:19,440
ZFS snapshots a good thing to have on

00:14:17,490 --> 00:14:21,600
your backup server especially if it's

00:14:19,440 --> 00:14:23,700
writable by everyone if you write all

00:14:21,600 --> 00:14:27,080
your data on the backup server then any

00:14:23,700 --> 00:14:29,550
user might delete things from there

00:14:27,080 --> 00:14:32,030
people sometimes delete their backups by

00:14:29,550 --> 00:14:32,030
accident

00:14:32,660 --> 00:14:39,780
malware I might corrupt your backups in

00:14:35,370 --> 00:14:43,140
some way even though the desktop system

00:14:39,780 --> 00:14:45,330
it's useful to have ZFS snapshots if you

00:14:43,140 --> 00:14:48,030
had some cryptolocker malware you'll

00:14:45,330 --> 00:14:49,830
want to revert to some older version of

00:14:48,030 --> 00:14:54,840
your files before they have malware in

00:14:49,830 --> 00:14:56,400
them or whatever and snapshots are

00:14:54,840 --> 00:14:58,260
slightly different from incremental

00:14:56,400 --> 00:15:02,970
backups in that you can delete

00:14:58,260 --> 00:15:05,610
intermediate snapshots generally you

00:15:02,970 --> 00:15:06,800
don't care about having a backup per

00:15:05,610 --> 00:15:09,230
hour of something

00:15:06,800 --> 00:15:11,209
like two years ago you just care that

00:15:09,230 --> 00:15:18,589
you can retrieve this thing that's from

00:15:11,209 --> 00:15:22,399
about two years ago and but if if you're

00:15:18,589 --> 00:15:23,839
doing day-to-day work you don't want to

00:15:22,399 --> 00:15:25,730
lose too much data in cases of this

00:15:23,839 --> 00:15:27,529
problem so you really want to be running

00:15:25,730 --> 00:15:29,990
snapshots often you can run them as off

00:15:27,529 --> 00:15:31,610
as often as every hour if you want so

00:15:29,990 --> 00:15:35,779
that you always have a recent backup and

00:15:31,610 --> 00:15:38,300
then just delete all the snapshots to

00:15:35,779 --> 00:15:41,600
free up disk space and then that way you

00:15:38,300 --> 00:15:46,190
have a sort of range of time periods you

00:15:41,600 --> 00:15:47,930
can revert to I was going to talk more

00:15:46,190 --> 00:15:50,480
about Z build but I haven't really

00:15:47,930 --> 00:15:52,579
finished it yet it's a mess I don't want

00:15:50,480 --> 00:15:56,779
to show you it because it's something I

00:15:52,579 --> 00:16:01,010
began in shell and should have rewritten

00:15:56,779 --> 00:16:04,610
already in a real language but it does

00:16:01,010 --> 00:16:08,240
actually run already I have a server

00:16:04,610 --> 00:16:12,950
that it runs debug strapped quite

00:16:08,240 --> 00:16:15,079
regularly and then snapshots the result

00:16:12,950 --> 00:16:18,470
so at all times I have a snapshot of a

00:16:15,079 --> 00:16:21,490
successfully D bootstraps SID you then

00:16:18,470 --> 00:16:21,490
clone a snapshot

00:16:21,910 --> 00:16:26,690
this is copy-on-write

00:16:23,750 --> 00:16:29,810
so it's very space it's very efficient

00:16:26,690 --> 00:16:32,990
on disk space you have a copy of a Sid

00:16:29,810 --> 00:16:36,920
fresh Sid Schrute you can unpack a

00:16:32,990 --> 00:16:39,470
Debian source package there and install

00:16:36,920 --> 00:16:42,260
bill dependencies what I would then do

00:16:39,470 --> 00:16:43,399
is snapshot again because quite often

00:16:42,260 --> 00:16:45,320
you want to build something more than

00:16:43,399 --> 00:16:48,290
once and there are some people who want

00:16:45,320 --> 00:16:50,540
to test for reproducible builds maybe in

00:16:48,290 --> 00:16:54,370
the room and so if you have a snapshot

00:16:50,540 --> 00:16:56,630
of after having unpacked source and

00:16:54,370 --> 00:17:00,140
installing build apps that's actually

00:16:56,630 --> 00:17:01,850
quite slow if many packages are small in

00:17:00,140 --> 00:17:04,730
unpacking them and installing bill

00:17:01,850 --> 00:17:05,959
dependencies takes time and if you're

00:17:04,730 --> 00:17:08,209
going to be building something more than

00:17:05,959 --> 00:17:10,640
once it's nice if you can just snap shut

00:17:08,209 --> 00:17:12,620
the result of that and reuse it you can

00:17:10,640 --> 00:17:16,130
then trigger as many bills as you like

00:17:12,620 --> 00:17:18,589
and you could make some small change

00:17:16,130 --> 00:17:20,470
first like upgrade to GCC six before

00:17:18,589 --> 00:17:23,689
running the build again and income

00:17:20,470 --> 00:17:26,449
it to your other build with DCC five or

00:17:23,689 --> 00:17:29,240
see if it builds with GC six at all you

00:17:26,449 --> 00:17:33,340
could try other variations in the

00:17:29,240 --> 00:17:39,019
environment between successive bills and

00:17:33,340 --> 00:17:41,990
look for issues of reproducibility and I

00:17:39,019 --> 00:17:43,840
have this running already it's not time

00:17:41,990 --> 00:17:47,240
to show you but Jenkins careful mr.

00:17:43,840 --> 00:17:52,639
Jenkins Kay FreeBSD GU there are some

00:17:47,240 --> 00:17:54,710
jobs on there and some of them are just

00:17:52,639 --> 00:17:57,850
checking out upstream software projects

00:17:54,710 --> 00:18:00,950
and seeing if they still build on KPBS D

00:17:57,850 --> 00:18:03,260
the idea of this is that I don't want

00:18:00,950 --> 00:18:05,090
maintainer to pull in your upstream

00:18:03,260 --> 00:18:08,539
version find out it doesn't build on

00:18:05,090 --> 00:18:09,919
KPBS D and then require help fixing it

00:18:08,539 --> 00:18:11,539
I'd rather catch that early and then

00:18:09,919 --> 00:18:15,070
sort of cut the Debian maintainer out of

00:18:11,539 --> 00:18:17,389
the loop so I can just save them time by

00:18:15,070 --> 00:18:21,500
getting it fixed upstream before it

00:18:17,389 --> 00:18:24,529
reaches Debian a project that started

00:18:21,500 --> 00:18:26,659
last step confers we bootstrap we are

00:18:24,529 --> 00:18:29,240
multinational tool trains to make it

00:18:26,659 --> 00:18:31,659
easier to cross build from capability to

00:18:29,240 --> 00:18:33,679
other architectures and vice versa

00:18:31,659 --> 00:18:37,340
something new that will come out of this

00:18:33,679 --> 00:18:40,840
soon is capabie st mhf we're hoping to

00:18:37,340 --> 00:18:40,840
make this a thing soon

00:18:41,380 --> 00:18:49,880
recently in sid k4 bc 10.3 just landed

00:18:47,620 --> 00:18:52,909
there's a really cool downstream project

00:18:49,880 --> 00:18:55,490
now called upon to bsd it's an abuti

00:18:52,909 --> 00:18:57,889
user who wanted some K for BSD but

00:18:55,490 --> 00:18:59,809
didn't want to leave Ubuntu it's not an

00:18:57,889 --> 00:19:01,580
official Davonte project but it's

00:18:59,809 --> 00:19:04,159
already ten times more popular than ours

00:19:01,580 --> 00:19:05,990
in terms of users but yeah they're

00:19:04,159 --> 00:19:10,250
really great they are finding bugs

00:19:05,990 --> 00:19:12,350
before we hit them and send patches to

00:19:10,250 --> 00:19:15,889
up streams and tours so thank you to

00:19:12,350 --> 00:19:19,190
them and thank you everyone in Debian

00:19:15,889 --> 00:19:20,990
who's helped in some way caifa bsd DSA

00:19:19,190 --> 00:19:25,340
team security team for all the

00:19:20,990 --> 00:19:29,510
infrastructure ftp masters kb working on

00:19:25,340 --> 00:19:31,610
the Installer and yeah thank thank you

00:19:29,510 --> 00:19:33,530
all for making it really fun to come

00:19:31,610 --> 00:19:45,140
here and work on free software thank you

00:19:33,530 --> 00:19:45,860
oh do we have time for questions okay

00:19:45,140 --> 00:19:51,920
good

00:19:45,860 --> 00:19:56,270
if you have questions I'm you mentioned

00:19:51,920 --> 00:19:59,540
that PF is working in capability but I

00:19:56,270 --> 00:20:02,630
failed to use PF lock which is quite a

00:19:59,540 --> 00:20:05,630
useful for debugging why firewall rules

00:20:02,630 --> 00:20:09,380
do not work as one expected them to work

00:20:05,630 --> 00:20:12,710
yeah PF log needs work but the rest of

00:20:09,380 --> 00:20:15,020
PF is fine if you have more questions

00:20:12,710 --> 00:20:18,670
and I'm going to start hanging out in

00:20:15,020 --> 00:20:20,780
the IRC I never really used IRC but I'll

00:20:18,670 --> 00:20:22,550
I'll have a look in there to see if

00:20:20,780 --> 00:20:26,500
anyone has questions if you're either

00:20:22,550 --> 00:20:31,120
here or watching from home well we're so

00:20:26,500 --> 00:20:39,040
popping IRC well we're nice group we'll

00:20:31,120 --> 00:20:42,740
be happy to chat with you Steven c99

00:20:39,040 --> 00:20:44,150
okay thank you much we have to close the

00:20:42,740 --> 00:20:47,210
session because there's another one

00:20:44,150 --> 00:20:51,620
that's just say about to to come in

00:20:47,210 --> 00:20:57,929
running so so thank you

00:20:51,620 --> 00:20:57,929

YouTube URL: https://www.youtube.com/watch?v=7quSz7F3W7A


