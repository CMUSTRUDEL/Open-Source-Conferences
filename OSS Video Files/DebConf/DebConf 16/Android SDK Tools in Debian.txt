Title: Android SDK Tools in Debian
Publication date: 2017-12-05
Playlist: DebConf 16
Description: 
	by Kai-Chung Yan

At: Debconf 16 video RSS feed
https://debconf16.debconf.org/
Room: Menzies 12
Scheduled start: 2016-07-07 11:10:00
Captions: 
	00:00:00,030 --> 00:00:05,250
hi everyone and today I'm here to talk

00:00:03,570 --> 00:00:07,200
about the and joys the gate who's in

00:00:05,250 --> 00:00:10,200
Debian this project is a google Summer

00:00:07,200 --> 00:00:13,080
of Code project in 2015 and 2016 which

00:00:10,200 --> 00:00:15,900
we are working on there are three Indian

00:00:13,080 --> 00:00:17,820
student and I work on this project we in

00:00:15,900 --> 00:00:21,960
this project we package basically

00:00:17,820 --> 00:00:24,000
package and enjoy SDK into Debian and so

00:00:21,960 --> 00:00:27,150
why are we doing this

00:00:24,000 --> 00:00:29,820
the first reason is the the SDK from

00:00:27,150 --> 00:00:32,520
Google is not free software it the

00:00:29,820 --> 00:00:35,399
bundle that SDK Punto downloaded from

00:00:32,520 --> 00:00:39,270
the website is not free software it it's

00:00:35,399 --> 00:00:42,149
not Apache 2.0 its proprietary if you

00:00:39,270 --> 00:00:45,180
use that you will have some limitations

00:00:42,149 --> 00:00:47,370
for example you can load any SDK

00:00:45,180 --> 00:00:49,980
component onto a mobile device or you

00:00:47,370 --> 00:00:52,230
can even use the SDK to develop

00:00:49,980 --> 00:00:57,480
application for four platforms other

00:00:52,230 --> 00:01:00,149
than Android and the next reason is by

00:00:57,480 --> 00:01:02,789
we are packaging SDK into Debian we can

00:01:00,149 --> 00:01:04,530
build it from source and we can assume

00:01:02,789 --> 00:01:07,439
that they yes and we can make sure the

00:01:04,530 --> 00:01:10,200
SDK is reproducible and we can make sure

00:01:07,439 --> 00:01:11,010
the SDK produced can produce a

00:01:10,200 --> 00:01:14,310
reproducible

00:01:11,010 --> 00:01:17,310
apks for example my momento hands

00:01:14,310 --> 00:01:20,490
Christophe Steiner has passed Zeppelin

00:01:17,310 --> 00:01:25,259
to add an option to zip out the time

00:01:20,490 --> 00:01:29,280
stamps inside the empty case and and we

00:01:25,259 --> 00:01:33,210
can also deploy completed free f-droid

00:01:29,280 --> 00:01:37,590
build servers using provided that enjo

00:01:33,210 --> 00:01:39,210
sdk is in debian so we can just use one

00:01:37,590 --> 00:01:41,549
line of command and you can install

00:01:39,210 --> 00:01:46,170
everything to deploy a build server

00:01:41,549 --> 00:01:47,909
after all it's like their peon it's like

00:01:46,170 --> 00:01:50,070
they're being spilled tea you upload the

00:01:47,909 --> 00:01:54,930
enjoy source code to the server and it

00:01:50,070 --> 00:01:59,219
builds for you and and having n joystick

00:01:54,930 --> 00:02:01,079
in debian also is can is handy for if

00:01:59,219 --> 00:02:03,000
you if you are going to route to your

00:02:01,079 --> 00:02:05,130
phone or you you're gonna flash your

00:02:03,000 --> 00:02:07,530
rooms you can just install ADB and

00:02:05,130 --> 00:02:09,929
fastboot actually most of the people

00:02:07,530 --> 00:02:12,290
don't need other components in the esta

00:02:09,929 --> 00:02:14,719
gated only need ADB and fastboot

00:02:12,290 --> 00:02:17,109
and if you if you with if ADB and

00:02:14,719 --> 00:02:19,519
fastboot I think the attend you can just

00:02:17,109 --> 00:02:23,030
install this tool you don't need to in

00:02:19,519 --> 00:02:25,519
downloading highest decay the last

00:02:23,030 --> 00:02:28,549
reason which is the most important one

00:02:25,519 --> 00:02:32,090
is is packaging Engine SDK in the Debian

00:02:28,549 --> 00:02:35,920
we can prevent prevent the Xcode ghost

00:02:32,090 --> 00:02:39,409
on Android Xcode ghost is AI Osiris

00:02:35,920 --> 00:02:42,859
broke up in last year it was they were

00:02:39,409 --> 00:02:46,760
apparel 1000 applications was were

00:02:42,859 --> 00:02:49,250
infected by this virus first most of

00:02:46,760 --> 00:02:51,139
them are Chinese apps those Chinese

00:02:49,250 --> 00:02:54,739
developers are sometimes they have

00:02:51,139 --> 00:02:57,109
difficulties on accessing App Store to

00:02:54,739 --> 00:02:59,569
download the Xcode it has very slow to

00:02:57,109 --> 00:03:04,129
download the Xcode from App Store so you

00:02:59,569 --> 00:03:08,329
the they what they do is to download the

00:03:04,129 --> 00:03:11,389
SDK download Xcode from web drives like

00:03:08,329 --> 00:03:12,950
Baidu web drive or other places and they

00:03:11,389 --> 00:03:14,870
are unofficial and maybe they are

00:03:12,950 --> 00:03:17,720
modified and actually they are modified

00:03:14,870 --> 00:03:19,909
planted with Xcode ghost and all

00:03:17,720 --> 00:03:23,629
applications compiled with that x cocoa

00:03:19,909 --> 00:03:27,620
and with that Xcode is planted by with

00:03:23,629 --> 00:03:30,069
Xcode ghost and these apps uploaded to

00:03:27,620 --> 00:03:32,840
your App Store and you just you just

00:03:30,069 --> 00:03:34,609
download the app store download the apps

00:03:32,840 --> 00:03:36,979
from the App Store and you get infected

00:03:34,609 --> 00:03:38,870
by the virus it's it's terrible you

00:03:36,979 --> 00:03:42,079
can't do anything if you are ordinary

00:03:38,870 --> 00:03:45,319
user so in end in androids way worse

00:03:42,079 --> 00:03:48,470
because in China every piece of Google

00:03:45,319 --> 00:03:51,799
is blocked so you can download the SDK

00:03:48,470 --> 00:03:55,389
without using a VPN so I think I think

00:03:51,799 --> 00:03:58,639
many Chinese developers only only

00:03:55,389 --> 00:04:03,229
download SDK from from some unofficial

00:03:58,639 --> 00:04:05,150
places and perhaps these these Android

00:04:03,229 --> 00:04:05,569
SDK has been planted with some virus I

00:04:05,150 --> 00:04:10,549
don't know

00:04:05,569 --> 00:04:13,970
but perhaps so if say if we can download

00:04:10,549 --> 00:04:19,070
it the SDK from Debian and everyone can

00:04:13,970 --> 00:04:24,150
get this SDK or one world and and we can

00:04:19,070 --> 00:04:27,270
make sure these SDKs is unmodified

00:04:24,150 --> 00:04:32,639
and without any virus and we can prevent

00:04:27,270 --> 00:04:34,740
export goes happening on Android so the

00:04:32,639 --> 00:04:37,110
current goal of the project is that we

00:04:34,740 --> 00:04:41,100
are we are making sure that we can have

00:04:37,110 --> 00:04:44,370
a minimalist build environment on on

00:04:41,100 --> 00:04:46,380
Debian you can just build the apps using

00:04:44,370 --> 00:04:49,320
one command line Gradle assemble and

00:04:46,380 --> 00:04:51,900
that's it we are not doing we are not

00:04:49,320 --> 00:04:57,000
doing the full environment yet because

00:04:51,900 --> 00:05:01,620
they are too big we are additionally we

00:04:57,000 --> 00:05:03,800
have well we will do NDK and support

00:05:01,620 --> 00:05:06,360
library and Google libraries because

00:05:03,800 --> 00:05:08,520
because they are they are necessary

00:05:06,360 --> 00:05:12,360
sometimes necessary to build an Android

00:05:08,520 --> 00:05:15,060
apps and the NDK is too complicated to

00:05:12,360 --> 00:05:18,960
to build from source for now so we are

00:05:15,060 --> 00:05:20,880
doing it using a via installer package

00:05:18,960 --> 00:05:23,580
and the Google libraries are proprietary

00:05:20,880 --> 00:05:27,870
software so they also be a installer

00:05:23,580 --> 00:05:31,229
libraries install a package sorry and we

00:05:27,870 --> 00:05:33,419
are not doing the emulator or system

00:05:31,229 --> 00:05:36,900
image for now because the system image

00:05:33,419 --> 00:05:39,810
is basically an entire android system

00:05:36,900 --> 00:05:43,080
and it needs to build from several gb of

00:05:39,810 --> 00:05:46,440
source code it's too big and practical

00:05:43,080 --> 00:05:49,400
for for for doing in debian so so it can

00:05:46,440 --> 00:05:54,300
be ignore for now but we can still do it

00:05:49,400 --> 00:05:57,900
with installer packages and the NGO

00:05:54,300 --> 00:06:00,320
studio is also too big for us so we are

00:05:57,900 --> 00:06:04,979
not well not doing this for now and

00:06:00,320 --> 00:06:08,159
during the project we we met some

00:06:04,979 --> 00:06:11,699
difficulties actually the first one is

00:06:08,159 --> 00:06:14,250
the there is the rest they have to many

00:06:11,699 --> 00:06:16,590
versions the SDK has their own version

00:06:14,250 --> 00:06:19,229
and the SDK has basically has three

00:06:16,590 --> 00:06:21,240
components the SDK tools the pillow

00:06:19,229 --> 00:06:24,300
tools and platform tools and all of them

00:06:21,240 --> 00:06:27,110
have different versions and Android has

00:06:24,300 --> 00:06:30,449
an API level and NGO has its own version

00:06:27,110 --> 00:06:31,940
so we are not we don't know how we we

00:06:30,449 --> 00:06:35,830
didn't know in the first place how to

00:06:31,940 --> 00:06:39,250
which text should check out in a

00:06:35,830 --> 00:06:42,099
rapper to to download the turbo but

00:06:39,250 --> 00:06:43,720
finally we settle down with the Android

00:06:42,099 --> 00:06:47,080
version we check out the Android version

00:06:43,720 --> 00:06:51,129
of the in the git repo together upstream

00:06:47,080 --> 00:06:53,169
and and there is another difficult

00:06:51,129 --> 00:06:56,430
there's another problem is that these

00:06:53,169 --> 00:06:59,860
components in the SDK is typically has

00:06:56,430 --> 00:07:04,330
some of them have circular dependencies

00:06:59,860 --> 00:07:08,050
for example we have this two source

00:07:04,330 --> 00:07:10,120
packages and one is one produces ATP

00:07:08,050 --> 00:07:15,639
fast-food lip law and lip blah blah blah

00:07:10,120 --> 00:07:19,960
and the other repository has as this 2 F

00:07:15,639 --> 00:07:22,539
2 FS yuto's and ext4 users and turns out

00:07:19,960 --> 00:07:25,289
that fastboot depends on these two

00:07:22,539 --> 00:07:28,240
libraries and these two libraries

00:07:25,289 --> 00:07:30,879
depends on back to lip lock and these

00:07:28,240 --> 00:07:34,180
two packages have circular dependencies

00:07:30,879 --> 00:07:37,770
and what and what we did to solve this

00:07:34,180 --> 00:07:41,550
issue is that we use build profiles

00:07:37,770 --> 00:07:45,370
build profiles is mechanism that you can

00:07:41,550 --> 00:07:47,919
you can make the package produce some

00:07:45,370 --> 00:07:51,610
components in stage one and produce the

00:07:47,919 --> 00:07:55,449
rest of the components in stage two so

00:07:51,610 --> 00:07:57,960
we can what we did is that the first

00:07:55,449 --> 00:08:01,960
Android platform system called to

00:07:57,960 --> 00:08:04,360
produce ADB and lots of things except

00:08:01,960 --> 00:08:08,050
for fast boat in a stage one and then we

00:08:04,360 --> 00:08:10,240
everything we have enjoyed platforms of

00:08:08,050 --> 00:08:13,419
lectures for these two libraries and

00:08:10,240 --> 00:08:17,400
then we produce the fast book at a full

00:08:13,419 --> 00:08:20,650
stage of of that report so treat and it

00:08:17,400 --> 00:08:25,270
solves the circular report circular

00:08:20,650 --> 00:08:28,690
dependencies so and we have other

00:08:25,270 --> 00:08:31,930
difficulties like some components have a

00:08:28,690 --> 00:08:34,930
need to needs multiple upstream web

00:08:31,930 --> 00:08:38,890
hosts for example the NGO jar which is

00:08:34,930 --> 00:08:41,440
the Android platform frameworks API

00:08:38,890 --> 00:08:43,779
stops it's only API stuff but it needs

00:08:41,440 --> 00:08:46,630
four apples from the Android

00:08:43,779 --> 00:08:49,390
repositories and we don't like to merge

00:08:46,630 --> 00:08:53,770
multiple upstream into one package but

00:08:49,390 --> 00:08:56,400
we have to in this case and there is a

00:08:53,770 --> 00:08:59,440
there are also difficulties that they

00:08:56,400 --> 00:09:03,970
enjoy the Android source code does not

00:08:59,440 --> 00:09:07,570
have usable build system a small build

00:09:03,970 --> 00:09:11,200
system it doesn't have this they have an

00:09:07,570 --> 00:09:15,340
Android or MK in every group in every

00:09:11,200 --> 00:09:19,240
directory and we can we can only read

00:09:15,340 --> 00:09:23,260
the end joy to MK to pen write make file

00:09:19,240 --> 00:09:26,020
to to to compile the libraries it is

00:09:23,260 --> 00:09:30,250
handwritten so it's a report and it

00:09:26,020 --> 00:09:32,500
needs too much work effort so perhaps in

00:09:30,250 --> 00:09:35,020
the future we can we can develop some

00:09:32,500 --> 00:09:38,040
script to interpret and Jorge oMG and

00:09:35,020 --> 00:09:44,290
automatically generate the make files

00:09:38,040 --> 00:09:46,660
and some some some enjoy repos have have

00:09:44,290 --> 00:09:50,740
sleep Laplace project as well as Java

00:09:46,660 --> 00:09:54,420
projects so it's it's quite tricky to to

00:09:50,740 --> 00:09:58,480
deal with package with two languages and

00:09:54,420 --> 00:10:03,070
and finally Google also a lot of

00:09:58,480 --> 00:10:05,980
things I say he's a fault because he

00:10:03,070 --> 00:10:08,790
used Google used those third-party

00:10:05,980 --> 00:10:12,580
libraries but he also makes some little

00:10:08,790 --> 00:10:14,590
modifications maybe you are not aware of

00:10:12,580 --> 00:10:17,080
that but he just just make modifications

00:10:14,590 --> 00:10:21,010
and sometimes and modifications are

00:10:17,080 --> 00:10:24,810
baked to a so big that you can't even

00:10:21,010 --> 00:10:30,400
build a project using the the up stream

00:10:24,810 --> 00:10:33,510
upstream libraries and so far we have

00:10:30,400 --> 00:10:36,520
packaged tool upstream libraries that's

00:10:33,510 --> 00:10:39,840
modified by Google which is lip and wind

00:10:36,520 --> 00:10:43,560
and live as a Linux they are totally

00:10:39,840 --> 00:10:50,530
they won't interfere with the existing

00:10:43,560 --> 00:10:53,020
libraries in the system so so and we we

00:10:50,530 --> 00:10:56,650
also we also package dot lava which is

00:10:53,020 --> 00:11:01,030
which is necessary to build the Android

00:10:56,650 --> 00:11:03,250
jar and they also they also fault open

00:11:01,030 --> 00:11:06,610
SSL which is pouring SSL

00:11:03,250 --> 00:11:08,470
but well we don't but we don't need to

00:11:06,610 --> 00:11:11,860
package boring as I sell anymore because

00:11:08,470 --> 00:11:15,640
we later out later on found that boring

00:11:11,860 --> 00:11:18,240
SSL is not necessary to build en Georgia

00:11:15,640 --> 00:11:23,110
and also the Debian security team also

00:11:18,240 --> 00:11:28,240
object to this idea so the progress so

00:11:23,110 --> 00:11:32,140
far is that we have updated Grado to 2.0

00:11:28,240 --> 00:11:33,100
before we did google Summer of Code back

00:11:32,140 --> 00:11:37,470
in 2015

00:11:33,100 --> 00:11:43,540
Greta was still version 1.5 and now is

00:11:37,470 --> 00:11:45,790
2.39 I guess and we updated Gradle

00:11:43,540 --> 00:11:47,940
because we need to use the Gradle plugin

00:11:45,790 --> 00:11:51,610
and now the gravel parking is also

00:11:47,940 --> 00:11:54,940
inside abbien but but but the artifact

00:11:51,610 --> 00:11:57,730
are not installed into maybe repos so so

00:11:54,940 --> 00:12:00,490
basically it's it's quite hard to use

00:11:57,730 --> 00:12:05,260
right now but we polish the package

00:12:00,490 --> 00:12:11,350
later on and the NGO tree is almost done

00:12:05,260 --> 00:12:13,720
and we have as we as I have said and

00:12:11,350 --> 00:12:17,070
joystick a has three components platform

00:12:13,720 --> 00:12:19,960
tools and SDK tools and build tools and

00:12:17,070 --> 00:12:23,260
we have packaged most of the platform

00:12:19,960 --> 00:12:25,240
tools here as we can as we can see and

00:12:23,260 --> 00:12:30,070
we have packaged some of the build tools

00:12:25,240 --> 00:12:34,600
and but we we haven't been dealing with

00:12:30,070 --> 00:12:40,839
any SDK tools yet but we would we'll do

00:12:34,600 --> 00:12:43,690
that later on but so overall this SDK is

00:12:40,839 --> 00:12:47,490
not usable for now because we we have

00:12:43,690 --> 00:12:50,860
been testing using this SDK to build

00:12:47,490 --> 00:12:55,120
minimalist Gradle apps about Android

00:12:50,860 --> 00:12:58,720
apps and it just it just has errors so

00:12:55,120 --> 00:13:04,990
it's not usable for now but we will will

00:12:58,720 --> 00:13:07,060
we are making progress so we're making

00:13:04,990 --> 00:13:09,460
progress but the crop progress is slow

00:13:07,060 --> 00:13:12,970
so if anyone is interested in this

00:13:09,460 --> 00:13:15,430
project or you can join us or anyone has

00:13:12,970 --> 00:13:17,379
some questions we can you can ask us on

00:13:15,430 --> 00:13:20,859
this 2rc live

00:13:17,379 --> 00:13:23,699
IRC channel there being mobile we we

00:13:20,859 --> 00:13:28,569
usually be in Debian mobile channel and

00:13:23,699 --> 00:13:31,509
we are we usually put put most of our

00:13:28,569 --> 00:13:32,549
information into the Android tools wiki

00:13:31,509 --> 00:13:38,159
page

00:13:32,549 --> 00:13:38,159
so any question here

00:13:52,500 --> 00:13:59,850
what's the long-term role do you plan

00:13:56,280 --> 00:14:02,820
for example for Android in Debian to be

00:13:59,850 --> 00:14:06,690
portable usable in with official Android

00:14:02,820 --> 00:14:08,820
studio or other ideas like I don't know

00:14:06,690 --> 00:14:12,830
IntelliJ or something like this do you

00:14:08,820 --> 00:14:17,240
want for it to be usable with official

00:14:12,830 --> 00:14:22,110
emulators what's the longer-term goal

00:14:17,240 --> 00:14:24,960
longer-term is that that those emulator

00:14:22,110 --> 00:14:28,320
and those emulators and system image

00:14:24,960 --> 00:14:31,920
will be will be packaged using an

00:14:28,320 --> 00:14:33,810
installer package so it's it's part it's

00:14:31,920 --> 00:14:37,200
some kind of non-free software because

00:14:33,810 --> 00:14:40,100
it's hard to build from source and and

00:14:37,200 --> 00:14:42,390
now the goal is that we are building a

00:14:40,100 --> 00:14:44,730
command line environment we can just

00:14:42,390 --> 00:14:46,830
build the apps using command line we are

00:14:44,730 --> 00:14:47,480
not doing the idea for now because it's

00:14:46,830 --> 00:14:50,310
too big

00:14:47,480 --> 00:14:53,550
I'm not asking about the packaging ideas

00:14:50,310 --> 00:14:55,110
but if for example it in when I'm

00:14:53,550 --> 00:14:57,960
listening Android's to different sample

00:14:55,110 --> 00:15:00,720
I can point it to already existing SDK

00:14:57,960 --> 00:15:03,050
on the disk so do you plan to provide

00:15:00,720 --> 00:15:05,520
something really so I'm installing all

00:15:03,050 --> 00:15:08,730
Android Debian packages then I'm

00:15:05,520 --> 00:15:17,640
standing yeah and then I'm pointing it

00:15:08,730 --> 00:15:21,750
to us well that is in our discussion now

00:15:17,640 --> 00:15:24,510
we we think we can do that because why I

00:15:21,750 --> 00:15:28,310
don't we don't want our Android SDK in

00:15:24,510 --> 00:15:32,190
Debian is so limited so I think we can

00:15:28,310 --> 00:15:37,880
solve this problem we can just patch the

00:15:32,190 --> 00:15:37,880
code thank you

00:15:46,630 --> 00:15:53,660
hello

00:15:48,770 --> 00:15:56,960
how do you deal with deep pockets or

00:15:53,660 --> 00:15:59,720
some Bionic Lipsy another core component

00:15:56,960 --> 00:16:02,750
where the tool change so you can build

00:15:59,720 --> 00:16:06,410
this application and then when you this

00:16:02,750 --> 00:16:08,560
is one question then when you get the

00:16:06,410 --> 00:16:10,940
application do you have some kind of

00:16:08,560 --> 00:16:16,160
compatible layer that you can run the

00:16:10,940 --> 00:16:24,680
application in the Debian system or like

00:16:16,160 --> 00:16:28,570
hybrid library I'm sorry I I kind of

00:16:24,680 --> 00:16:28,570
Stan okay

00:16:32,050 --> 00:16:37,730
and this is chuh ro Desai

00:16:34,700 --> 00:16:38,740
he's one of the students working on this

00:16:37,730 --> 00:16:42,080
project

00:16:38,740 --> 00:16:45,530
Thank You patron I'm also working on

00:16:42,080 --> 00:16:47,540
this Bionic is used in the user space of

00:16:45,530 --> 00:16:49,730
Android so that is not something we are

00:16:47,540 --> 00:16:52,010
packaging right now what we are working

00:16:49,730 --> 00:16:54,080
on is getting the Android SDK into

00:16:52,010 --> 00:16:57,110
Debian so developers can build

00:16:54,080 --> 00:17:01,010
applications then as far some sort of a

00:16:57,110 --> 00:17:03,080
hybrid layer we haven't a we aren't

00:17:01,010 --> 00:17:07,580
working on anything like that right now

00:17:03,080 --> 00:17:09,440
or we don't have it planned but what we

00:17:07,580 --> 00:17:10,940
are seeing it we haven't really thought

00:17:09,440 --> 00:17:14,240
about it it would be quite complicated

00:17:10,940 --> 00:17:15,890
to try to run an Android app to try to

00:17:14,240 --> 00:17:18,500
get the Android Java Virtual Machine

00:17:15,890 --> 00:17:21,890
touch on Debian and then try to put an

00:17:18,500 --> 00:17:24,950
Android app so and Bionic is also the

00:17:21,890 --> 00:17:28,940
Android lips CV we are not using that we

00:17:24,950 --> 00:17:31,010
don't need that to build apps it's in

00:17:28,940 --> 00:17:33,880
the NDK that that's also something we

00:17:31,010 --> 00:17:33,880
are not doing right now

00:17:36,850 --> 00:17:40,480
any other questions

00:17:48,050 --> 00:17:52,250
roughly could you estimate what's your

00:17:50,120 --> 00:17:53,780
sort of percentage completion progress

00:17:52,250 --> 00:17:56,300
and how many more people would you need

00:17:53,780 --> 00:18:01,910
to get this dog and say before before

00:17:56,300 --> 00:18:03,800
the Android seven gets released right

00:18:01,910 --> 00:18:05,780
now I would say that we are kind of

00:18:03,800 --> 00:18:08,930
halfway through the SDK thing we have

00:18:05,780 --> 00:18:10,670
identified what we need to fix like we

00:18:08,930 --> 00:18:14,270
have this one strange book with app

00:18:10,670 --> 00:18:17,210
where it's an Android tool and if we use

00:18:14,270 --> 00:18:19,610
the binary Google provide it is work if

00:18:17,210 --> 00:18:23,390
I compile the binary myself from the

00:18:19,610 --> 00:18:26,150
Android but if we use the Android and

00:18:23,390 --> 00:18:29,360
make file that he wrote and if we try to

00:18:26,150 --> 00:18:32,090
compare the binary with that crackers we

00:18:29,360 --> 00:18:33,320
have yet to debug that but that's kind

00:18:32,090 --> 00:18:36,920
of some of the challenges we are facing

00:18:33,320 --> 00:18:39,110
so it's but apart from that we have

00:18:36,920 --> 00:18:41,360
everything in place so we just need to

00:18:39,110 --> 00:18:42,890
fill in the missing missing stuff and we

00:18:41,360 --> 00:18:45,740
should be able to build I would say a

00:18:42,890 --> 00:18:51,080
majority of the Android apps on Debian

00:18:45,740 --> 00:18:53,150
by the time G seconds by the time we are

00:18:51,080 --> 00:18:56,380
done with G sock in August we should be

00:18:53,150 --> 00:18:56,380
able to build a lot of the Android apps

00:19:04,530 --> 00:19:06,590
you

00:19:08,430 --> 00:19:14,739

YouTube URL: https://www.youtube.com/watch?v=P7IvQyjJUYw


