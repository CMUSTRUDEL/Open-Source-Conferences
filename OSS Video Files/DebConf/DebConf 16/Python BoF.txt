Title: Python BoF
Publication date: 2017-12-05
Playlist: DebConf 16
Description: 
	by Piotr OÅ¼arowski

At: Debconf 16 video RSS feed
https://debconf16.debconf.org/
Room: Menzies 12
Scheduled start: 2016-07-05 16:15:00
Captions: 
	00:00:00,030 --> 00:00:07,919
okay so hello thank you for everyone for

00:00:04,500 --> 00:00:09,840
attending this I'm my name is Peter

00:00:07,919 --> 00:00:14,160
Rothstein

00:00:09,840 --> 00:00:17,550
I'm with Mattias and Scott who is not

00:00:14,160 --> 00:00:20,310
here are maintaining Python defaults

00:00:17,550 --> 00:00:26,189
package which is responsive responsible

00:00:20,310 --> 00:00:31,289
for a list of with the main purpose of

00:00:26,189 --> 00:00:34,469
this package is to list Python versions

00:00:31,289 --> 00:00:37,440
that we currently support and I'm

00:00:34,469 --> 00:00:40,500
responsible for helpers

00:00:37,440 --> 00:00:44,040
we use in Debian to package Python stuff

00:00:40,500 --> 00:00:49,309
and this is above so it's about

00:00:44,040 --> 00:00:54,239
discussion various Python really related

00:00:49,309 --> 00:00:57,480
things I prepared some on the gobby you

00:00:54,239 --> 00:01:05,430
can join it edit it that would be great

00:00:57,480 --> 00:01:09,720
it if you can add comments or notes from

00:01:05,430 --> 00:01:11,720
what we talked here but we can talk

00:01:09,720 --> 00:01:16,470
about anything

00:01:11,720 --> 00:01:22,850
Debian and Python related so it's just a

00:01:16,470 --> 00:01:27,470
proposal but please feel free to ask any

00:01:22,850 --> 00:01:27,470
questions you have in mind

00:01:33,070 --> 00:01:41,800
so the first topic is actually answered

00:01:37,180 --> 00:01:46,200
to yesterday by release team they own

00:01:41,800 --> 00:01:48,940
the lights and put python 3.5 only as

00:01:46,200 --> 00:01:52,530
supported Python free versions so I

00:01:48,940 --> 00:01:56,140
guess we don't have to talk about it

00:01:52,530 --> 00:02:04,410
unless you really want to support Python

00:01:56,140 --> 00:02:07,660
free but 3.6 but I actually think that

00:02:04,410 --> 00:02:08,369
supporting only Python 3.5 is a good

00:02:07,660 --> 00:02:14,080
idea

00:02:08,369 --> 00:02:17,740
not only because by Scott I think

00:02:14,080 --> 00:02:20,770
mentioned by supporting two two versions

00:02:17,740 --> 00:02:27,850
we will increase the size of our

00:02:20,770 --> 00:02:30,910
packages quite a lot but also final

00:02:27,850 --> 00:02:35,350
version of Python 3.6 will be released

00:02:30,910 --> 00:02:40,750
really late and I'm not that convinced

00:02:35,350 --> 00:02:45,000
we will be able to update all our

00:02:40,750 --> 00:02:52,989
packages into a state that we will be

00:02:45,000 --> 00:02:56,799
happy within in the stable release so we

00:02:52,989 --> 00:03:00,940
can how many in Debian Python Madhu's

00:02:56,799 --> 00:03:07,750
packaging team members are here can you

00:03:00,940 --> 00:03:10,989
rise it your hand so just a few so we

00:03:07,750 --> 00:03:16,170
probably should skip the second topic

00:03:10,989 --> 00:03:22,209
because it's really the team specific

00:03:16,170 --> 00:03:26,530
and move to another one one that I

00:03:22,209 --> 00:03:38,290
already mentioned last year and we still

00:03:26,530 --> 00:03:41,200
did we still are not there is vitam free

00:03:38,290 --> 00:03:43,750
depend in python 3 package depending on

00:03:41,200 --> 00:03:45,150
the H Python Python free is a package

00:03:43,750 --> 00:03:49,450
that

00:03:45,150 --> 00:03:51,970
depends on currently default Python free

00:03:49,450 --> 00:03:56,950
version so right now it depends on

00:03:51,970 --> 00:04:02,470
python 3.5 and it's a special package

00:03:56,950 --> 00:04:06,790
that that allows user to install always

00:04:02,470 --> 00:04:09,810
the laced latest version of python so

00:04:06,790 --> 00:04:12,580
you don't have to know which Python free

00:04:09,810 --> 00:04:15,190
version is currently the default you

00:04:12,580 --> 00:04:21,570
just install python free and this

00:04:15,190 --> 00:04:26,490
package used to have some helper tools

00:04:21,570 --> 00:04:30,130
that were used during for example

00:04:26,490 --> 00:04:36,040
package build and another package that

00:04:30,130 --> 00:04:40,120
supported python free had to at least at

00:04:36,040 --> 00:04:44,560
least python free to get th python free

00:04:40,120 --> 00:04:46,810
helper for example and right now all

00:04:44,560 --> 00:04:51,790
these helpers were moved to another

00:04:46,810 --> 00:04:55,030
source package called th python and this

00:04:51,790 --> 00:04:58,540
new package contains all the tools th by

00:04:55,030 --> 00:05:02,170
ton to th bite on 3d h-pipe isil and few

00:04:58,540 --> 00:05:10,630
other tools that are used during bull

00:05:02,170 --> 00:05:14,820
built and because they were shipped in

00:05:10,630 --> 00:05:21,240
python free we had to add th python

00:05:14,820 --> 00:05:27,010
dependency in python free package until

00:05:21,240 --> 00:05:30,550
all these packages still need it until

00:05:27,010 --> 00:05:35,070
they add th Python to build the pens and

00:05:30,550 --> 00:05:38,590
I just checked there are over 1000

00:05:35,070 --> 00:05:40,900
packages that still don't do it so in

00:05:38,590 --> 00:05:44,680
case of Python free it's not that a big

00:05:40,900 --> 00:05:48,610
deal because while we still if somebody

00:05:44,680 --> 00:05:51,340
installs Python 3 th Python is installed

00:05:48,610 --> 00:05:56,200
as well and if it's not that big it's

00:05:51,340 --> 00:05:57,729
just a few hundred kilobytes so it's not

00:05:56,200 --> 00:06:06,999
a big deal but in

00:05:57,729 --> 00:06:10,629
case of Python 2 it's it's kind of

00:06:06,999 --> 00:06:13,259
different story because there are we

00:06:10,629 --> 00:06:16,509
couldn't do that

00:06:13,259 --> 00:06:19,539
the we couldn't do the same trick to

00:06:16,509 --> 00:06:24,639
just instant depend on different package

00:06:19,539 --> 00:06:29,199
because Python we cannot depend on

00:06:24,639 --> 00:06:32,080
Python 3 on in Python to interpreters if

00:06:29,199 --> 00:06:37,240
user wants to install interpreter in

00:06:32,080 --> 00:06:40,059
version 2 we would have to force him to

00:06:37,240 --> 00:06:48,599
insult my Python free as well and we

00:06:40,059 --> 00:06:55,210
don't want to do that so this problem is

00:06:48,599 --> 00:06:58,839
kind of important because invite on - we

00:06:55,210 --> 00:07:05,229
still have to ship the the older version

00:06:58,839 --> 00:07:09,129
on of d-h Python - helper so the fix for

00:07:05,229 --> 00:07:14,319
that is really simple all packages that

00:07:09,129 --> 00:07:17,409
bill depend on use during built one of

00:07:14,319 --> 00:07:22,689
these tools have to build depend on the

00:07:17,409 --> 00:07:26,409
H Python but they still do not do and my

00:07:22,689 --> 00:07:27,370
question is what can we do to improve

00:07:26,409 --> 00:07:33,939
this situation

00:07:27,370 --> 00:07:36,879
I prepared a patch for lincoin that

00:07:33,939 --> 00:07:41,669
detects that but the first version of

00:07:36,879 --> 00:07:44,889
that patch was a bit stripped before

00:07:41,669 --> 00:07:47,830
applied very lenient maintainer so I

00:07:44,889 --> 00:07:52,659
created another one it's still

00:07:47,830 --> 00:07:56,110
unfortunately not applied and that's why

00:07:52,659 --> 00:08:02,349
Linton still doesn't warn about most of

00:07:56,110 --> 00:08:05,319
these cases but the question is can we

00:08:02,349 --> 00:08:07,870
do something about it I mean not not

00:08:05,319 --> 00:08:08,689
only the Delaine thien think will be

00:08:07,870 --> 00:08:13,580
fixed

00:08:08,689 --> 00:08:17,679
soon I guess but what can we do to

00:08:13,580 --> 00:08:22,239
encourage maintainer to add new

00:08:17,679 --> 00:08:27,559
dependency to in Debian control file or

00:08:22,239 --> 00:08:31,039
can we do some kind of mass back

00:08:27,559 --> 00:08:38,990
squashing party or like we did with

00:08:31,039 --> 00:08:44,120
Python support or and what are your

00:08:38,990 --> 00:08:50,120
ideas is this above and dive I have

00:08:44,120 --> 00:08:56,839
problems and I want you to help me fix

00:08:50,120 --> 00:09:01,509
them or maybe we can talk about

00:08:56,839 --> 00:09:01,509
something completely else it's above

00:09:02,199 --> 00:09:17,990
sorry port everything to Python 3 yeah

00:09:08,899 --> 00:09:20,990
that's that's a goal yes but I think

00:09:17,990 --> 00:09:23,449
even even actually that's something I

00:09:20,990 --> 00:09:26,839
should talk about because during this

00:09:23,449 --> 00:09:30,680
DEFCON the most question I had was how

00:09:26,839 --> 00:09:34,339
long will we support Python 2 and my

00:09:30,680 --> 00:09:36,949
answer to that is we will we have no

00:09:34,339 --> 00:09:42,370
plans to i and i think material you are

00:09:36,949 --> 00:09:42,370
agreeing with me can you think not mic

00:10:08,230 --> 00:10:20,350
so see the ideas that 2020 is I think

00:10:15,760 --> 00:10:23,240
three years after this watch release and

00:10:20,350 --> 00:10:26,779
if you want to have a long-term support

00:10:23,240 --> 00:10:29,839
release of stretch we won't get well

00:10:26,779 --> 00:10:32,779
that much more absalom support for PI's

00:10:29,839 --> 00:10:37,760
them to okay there are all ways will be

00:10:32,779 --> 00:10:39,920
somebody who will update that but PI

00:10:37,760 --> 00:10:45,740
snaps I made it very clear that they

00:10:39,920 --> 00:10:48,260
want to move 2003 now maybe it's a bit

00:10:45,740 --> 00:10:52,220
ambitious to to drop PI's them too far

00:10:48,260 --> 00:10:55,820
stretch but it's good enough for pi

00:10:52,220 --> 00:10:59,600
since we is good enough to so that that

00:10:55,820 --> 00:11:02,390
we can well convert all small scripts

00:10:59,600 --> 00:11:05,900
and things which we use in packaging on

00:11:02,390 --> 00:11:08,810
in small packages to move to PI since we

00:11:05,900 --> 00:11:12,730
and that should start now and we

00:11:08,810 --> 00:11:12,730
shouldn't delay that until after stretch

00:11:14,410 --> 00:11:19,970
all the Debian infrastructure will if

00:11:17,720 --> 00:11:22,550
not in threat it's probably too late for

00:11:19,970 --> 00:11:26,000
stretch belt in stretch plus in

00:11:22,550 --> 00:11:28,339
Ambassador will use Python free but it

00:11:26,000 --> 00:11:31,910
doesn't mean we will remove Python 2.7

00:11:28,339 --> 00:11:34,850
from from Debian it will remain there

00:11:31,910 --> 00:11:38,180
because there are lots of companies that

00:11:34,850 --> 00:11:40,910
will use it so even if we internally in

00:11:38,180 --> 00:11:45,080
Debian don't use it and and every even

00:11:40,910 --> 00:11:47,630
if every package I mean every

00:11:45,080 --> 00:11:53,930
application doesn't port it to Python 3

00:11:47,630 --> 00:12:00,970
we will still not remove Python 2.7 for

00:11:53,930 --> 00:12:00,970
at least buster and probably faster +1

00:12:01,790 --> 00:12:09,140
I was volunteering to do the back

00:12:06,920 --> 00:12:13,480
porting to baton to seven for all the

00:12:09,140 --> 00:12:18,790
security fixes upstream will not fix it

00:12:13,480 --> 00:12:22,340
will stop fixing it in four years and we

00:12:18,790 --> 00:12:31,400
will probably not have manpower to to do

00:12:22,340 --> 00:12:33,590
what to do it ourselves so that might

00:12:31,400 --> 00:12:36,640
just be a question for the LTS team as

00:12:33,590 --> 00:12:39,860
well I mean it's they might want to say

00:12:36,640 --> 00:12:42,320
starting from release date plus two

00:12:39,860 --> 00:12:44,540
years no Python to saying we'll be

00:12:42,320 --> 00:12:46,280
support security supported and if they

00:12:44,540 --> 00:12:47,930
do a public announcement about that if

00:12:46,280 --> 00:12:51,170
you still want to run pass on to seven

00:12:47,930 --> 00:12:53,500
to two ish on stretch then it's you're

00:12:51,170 --> 00:12:53,500
on your own

00:12:59,530 --> 00:13:07,119
[Music]

00:13:08,500 --> 00:13:14,750
honestly I don't think we can do that

00:13:11,990 --> 00:13:17,360
now there are still some big

00:13:14,750 --> 00:13:23,000
applications which are not yet ported to

00:13:17,360 --> 00:13:25,130
Python 3 so one big user is OpenStack if

00:13:23,000 --> 00:13:27,440
they are preparing for Python 3

00:13:25,130 --> 00:13:31,190
but I'm not sure that they'll be all

00:13:27,440 --> 00:13:35,480
ready for the next release another one

00:13:31,190 --> 00:13:38,150
is Samba there's some work done porting

00:13:35,480 --> 00:13:41,690
the bindings but samba itself is not yet

00:13:38,150 --> 00:13:44,810
ported to Paislee and upstream doesn't

00:13:41,690 --> 00:13:49,970
want to support both 2 and 3 at the same

00:13:44,810 --> 00:13:53,890
time there are some net applications for

00:13:49,970 --> 00:13:58,640
the desktop which are not yet port but I

00:13:53,890 --> 00:14:00,410
mean it it's a good goal for Buster but

00:13:58,640 --> 00:14:02,620
I think it's too late for for first

00:14:00,410 --> 00:14:02,620
bridge

00:14:04,820 --> 00:14:12,980
in my personal opinion even in Bastyr we

00:14:08,000 --> 00:14:18,670
will have Python too so but I still

00:14:12,980 --> 00:14:18,670
encourage everyone to depart to Python 3

00:14:20,080 --> 00:14:26,210
so on the other hand for bastard why I

00:14:23,390 --> 00:14:28,730
mean we could also say we remove patent

00:14:26,210 --> 00:14:30,830
2 7 at the release date from testing and

00:14:28,730 --> 00:14:33,050
then the echo system will follow we also

00:14:30,830 --> 00:14:36,410
I mean we're also meeting I'm sure

00:14:33,050 --> 00:14:38,870
everything in Debian for buster can use

00:14:36,410 --> 00:14:48,340
Python 3 only but there are companies

00:14:38,870 --> 00:14:51,740
that have very large applications and

00:14:48,340 --> 00:14:56,390
infrastructure that they simply don't

00:14:51,740 --> 00:15:03,550
have manpower right now or will to

00:14:56,390 --> 00:15:07,370
report to Python 3 and they probably

00:15:03,550 --> 00:15:11,230
would be fine even with the interpreter

00:15:07,370 --> 00:15:14,780
that simply compiles in Debian Buster or

00:15:11,230 --> 00:15:17,570
Buster plus one even if they don't have

00:15:14,780 --> 00:15:19,910
security support so it's not that easy

00:15:17,570 --> 00:15:22,370
to hope move it just from testing

00:15:19,910 --> 00:15:24,170
because then we have to change all the

00:15:22,370 --> 00:15:28,190
packaging not to build PI's in two

00:15:24,170 --> 00:15:32,140
modules anymore and I'd rather support

00:15:28,190 --> 00:15:39,430
this then well going to each package and

00:15:32,140 --> 00:15:45,500
try to remove it so I might say that in

00:15:39,430 --> 00:15:48,110
one do we we are currently well moving

00:15:45,500 --> 00:15:50,720
out our build dependencies out of main

00:15:48,110 --> 00:15:54,680
into universe so the non-supported

00:15:50,720 --> 00:15:59,840
Ubuntu section what I'm trying to do

00:15:54,680 --> 00:16:03,080
there is to to get rid of Python 2 in in

00:15:59,840 --> 00:16:06,290
main so that we say we still needed for

00:16:03,080 --> 00:16:09,320
to build stuff but we don't rely on on

00:16:06,290 --> 00:16:12,260
running stuff and that might be designed

00:16:09,320 --> 00:16:18,050
to say well now we can run stuff with

00:16:12,260 --> 00:16:18,740
person 3 and I tend to use that to make

00:16:18,050 --> 00:16:22,790
a

00:16:18,740 --> 00:16:24,200
first of all debian when we can well we

00:16:22,790 --> 00:16:35,839
can consider dropping

00:16:24,200 --> 00:16:39,200
Pisan - would it be feasible to use a

00:16:35,839 --> 00:16:41,600
different Python - implementation like

00:16:39,200 --> 00:16:47,140
pi PI which I'm sure will be continued

00:16:41,600 --> 00:16:47,140
or continue to be supported past 2025

00:16:48,040 --> 00:16:54,680
icons currently share a package module

00:16:52,279 --> 00:16:57,350
path with C Python because the PI C

00:16:54,680 --> 00:16:59,120
files are different in Python 3 that is

00:16:57,350 --> 00:17:03,980
less of a problem in Python 2 it's a big

00:16:59,120 --> 00:17:16,100
problem - we are currently adding PI pi

00:17:03,980 --> 00:17:21,490
full binary packages I mean to use the

00:17:16,100 --> 00:17:21,490
existing Python full packages packages

00:17:24,400 --> 00:17:32,390
as an alternative migration path if

00:17:28,429 --> 00:17:35,170
Python C Python 2 is end-of-life and you

00:17:32,390 --> 00:17:40,309
can't put everything to Python 3

00:17:35,170 --> 00:17:43,610
switching to pi PI 2 gives you a way to

00:17:40,309 --> 00:17:46,340
still run your PI pike will Python 2

00:17:43,610 --> 00:17:49,370
point whatever code without having to

00:17:46,340 --> 00:17:54,559
rewrite a lot of it just as a potential

00:17:49,370 --> 00:17:56,870
idea I'm sorry I have a Mac for you yeah

00:17:54,559 --> 00:17:59,570
that doesn't work because pi PI at some

00:17:56,870 --> 00:18:01,309
point we moved to Python 3 or sooner or

00:17:59,570 --> 00:18:03,530
later and they are already working on it

00:18:01,309 --> 00:18:07,190
is already patches available for it so

00:18:03,530 --> 00:18:09,730
it's it may work short time long time it

00:18:07,190 --> 00:18:09,730
doesn't work

00:18:22,059 --> 00:18:37,789
the movie do you want to add something

00:18:24,710 --> 00:18:39,320
about Phi Phi where are we um yes I

00:18:37,789 --> 00:18:43,190
assume pi PI it's gotta be continued to

00:18:39,320 --> 00:18:45,259
be maintains for quite a long time still

00:18:43,190 --> 00:18:49,039
if nothing else then because pipat than

00:18:45,259 --> 00:18:55,820
pi pi 3 is written in python 2 and i

00:18:49,039 --> 00:18:58,070
don't see that changing anytime soon pi

00:18:55,820 --> 00:19:00,379
by 3 isn't really particularly useful

00:18:58,070 --> 00:19:07,159
for debian yets because it doesn't

00:19:00,379 --> 00:19:07,639
support three point four yet and well it

00:19:07,159 --> 00:19:10,070
doesn't

00:19:07,639 --> 00:19:11,929
yeah lots of the Debian packages that

00:19:10,070 --> 00:19:18,230
support Python 3 require newer versions

00:19:11,929 --> 00:19:26,570
of Python 3 than pi PI itself is we can

00:19:18,230 --> 00:19:30,080
package it sharing these packages

00:19:26,570 --> 00:19:35,649
because this packages can contain code

00:19:30,080 --> 00:19:35,649
that requires Python 3.5 or later

00:19:41,279 --> 00:19:48,460
that's why I haven't bothered with pi PI

00:19:43,629 --> 00:19:50,919
3 recently I've got a half I'm thinking

00:19:48,460 --> 00:19:54,669
on my laptop somewhere that is almost

00:19:50,919 --> 00:20:03,190
but I don't really see the point of it

00:19:54,669 --> 00:20:06,369
yet so I'd be very much

00:20:03,190 --> 00:20:08,710
if after freezy after stretch is

00:20:06,369 --> 00:20:10,629
released we start to aggressively remove

00:20:08,710 --> 00:20:14,499
pattern to libraries when they don't

00:20:10,629 --> 00:20:24,099
have dependencies what's your guy's view

00:20:14,499 --> 00:20:27,639
on that when when packages which slowly

00:20:24,099 --> 00:20:30,669
moved to Python 3 and we can remove

00:20:27,639 --> 00:20:33,549
Python modules support for Python - I

00:20:30,669 --> 00:20:45,039
think we should start that work just

00:20:33,549 --> 00:20:49,119
after frizzy stretch is released to

00:20:45,039 --> 00:20:52,299
create at least 4 new packages only

00:20:49,119 --> 00:20:57,580
fight on free version the package but

00:20:52,299 --> 00:21:00,759
and at Python to support only if if it's

00:20:57,580 --> 00:21:07,539
really needed so if some kind of

00:21:00,759 --> 00:21:10,479
application but that's our

00:21:07,539 --> 00:21:13,840
recommendation for new packages and

00:21:10,479 --> 00:21:15,789
shall we don't practice even already

00:21:13,840 --> 00:21:24,759
existing packages I mean not the

00:21:15,789 --> 00:21:28,840
infrastructure what we probably could do

00:21:24,759 --> 00:21:30,220
is identify all PI's modules which are

00:21:28,840 --> 00:21:32,820
not available in the past and stay

00:21:30,220 --> 00:21:36,429
version check if they are portable and

00:21:32,820 --> 00:21:40,049
if they are not portable well just drop

00:21:36,429 --> 00:21:44,349
them now and that will get rid of some

00:21:40,049 --> 00:21:47,679
how the are I called Python chili pison

00:21:44,349 --> 00:21:50,139
GDK - staff aren't possible of

00:21:47,679 --> 00:21:52,450
dependencies of that some of that stuff

00:21:50,139 --> 00:21:54,400
is really useful to our users

00:21:52,450 --> 00:21:56,680
probably because it's really hard to

00:21:54,400 --> 00:21:58,870
build from yourself you can't just stick

00:21:56,680 --> 00:22:01,720
it in a virtual anyone set up to PI

00:21:58,870 --> 00:22:08,790
install part 2003

00:22:01,720 --> 00:22:08,790
I mean how many packages are these

00:22:10,050 --> 00:22:17,350
applications yes it's it's people's

00:22:16,000 --> 00:22:19,330
personal scripts as well and that's

00:22:17,350 --> 00:22:24,250
that's the harder part that's actually

00:22:19,330 --> 00:22:30,880
trying is isn't there some way of

00:22:24,250 --> 00:22:33,730
actually getting Pisan to - rusev put

00:22:30,880 --> 00:22:35,200
out warnings or even something funny I

00:22:33,730 --> 00:22:43,540
should run in the applications and this

00:22:35,200 --> 00:22:48,540
thing really needs to be operated so the

00:22:43,540 --> 00:22:53,280
fedora guys had a well big database made

00:22:48,540 --> 00:22:58,000
for packages which still use pies and -

00:22:53,280 --> 00:22:59,620
then yeah they're showing that progress

00:22:58,000 --> 00:23:02,550
how they are converting to pies and

00:22:59,620 --> 00:23:08,560
three so maybe it's time for somebody to

00:23:02,550 --> 00:23:11,260
do that for them in as well maybe we

00:23:08,560 --> 00:23:13,860
should disallow uploading new packages

00:23:11,260 --> 00:23:19,630
on use new pies and modules which

00:23:13,860 --> 00:23:26,380
package for pies into only of even new

00:23:19,630 --> 00:23:31,930
applications so we don't accumulate more

00:23:26,380 --> 00:23:36,100
stuff to pork yeah but unless until

00:23:31,930 --> 00:23:40,540
somebody is doing such an analysis how

00:23:36,100 --> 00:23:43,530
many packages need porting I think we we

00:23:40,540 --> 00:23:43,530
are still speculating

00:23:52,610 --> 00:23:59,419
I just want to add that I would not

00:23:55,070 --> 00:24:10,070
remove them in stretch and start doing

00:23:59,419 --> 00:24:14,779
that ambassador so that we can maybe we

00:24:10,070 --> 00:24:19,519
can add something to the release note of

00:24:14,779 --> 00:24:23,630
stretch that if you are using Python

00:24:19,519 --> 00:24:26,240
please note that it's a last version of

00:24:23,630 --> 00:24:28,460
Python where we fully support Python 2

00:24:26,240 --> 00:24:30,470
and we will start beginning to remove

00:24:28,460 --> 00:24:36,260
libraries or something like that so that

00:24:30,470 --> 00:24:40,549
users are aware that well we could ask

00:24:36,260 --> 00:24:44,360
FTP muster not to accept new packages I

00:24:40,549 --> 00:24:48,320
mean users who don't know about packages

00:24:44,360 --> 00:24:52,870
and they just meet libraries so we need

00:24:48,320 --> 00:24:56,000
to communicate that to them that we are

00:24:52,870 --> 00:24:59,659
starting to fade out

00:24:56,000 --> 00:25:05,289
item 2 and they should do that as well

00:24:59,659 --> 00:25:10,630
as companies users so maybe a note in

00:25:05,289 --> 00:25:10,630
stretch release notes would be

00:25:22,360 --> 00:25:29,060
if if if you guys are going to remove

00:25:26,510 --> 00:25:30,860
the Python to binary packages is there a

00:25:29,060 --> 00:25:46,130
point to in keeping the interpreter

00:25:30,860 --> 00:25:51,140
around and in Buster +1

00:25:46,130 --> 00:25:58,310
I don't know we can we can check in the

00:25:51,140 --> 00:26:05,900
pipe ID is it's good enough Wi-Fi is

00:25:58,310 --> 00:26:09,410
good enough to replace cpython or maybe

00:26:05,900 --> 00:26:13,690
it will be better to ship even without

00:26:09,410 --> 00:26:17,840
security support welcome to pronounce

00:26:13,690 --> 00:26:19,910
it's a master plus 1 or plus 2 I think

00:26:17,840 --> 00:26:21,260
it's fair it's fairly safe to assume

00:26:19,910 --> 00:26:23,540
that there's going to be security

00:26:21,260 --> 00:26:25,910
support available for a/c pythons from

00:26:23,540 --> 00:26:27,440
somewhere because all the Python to

00:26:25,910 --> 00:26:30,890
point X code is not going to suddenly

00:26:27,440 --> 00:26:33,460
die in 3 years time it's going to be

00:26:30,890 --> 00:26:33,460
around for decades

00:26:39,030 --> 00:26:54,970
let's help me tell me one thing we can

00:26:42,070 --> 00:27:00,520
hope another thing I listed on this

00:26:54,970 --> 00:27:04,530
somebody has questions another thing I

00:27:00,520 --> 00:27:11,130
listed is a problem that I'm aware of

00:27:04,530 --> 00:27:15,820
and so far nobody really needed that in

00:27:11,130 --> 00:27:18,640
vitam free there's currently no way I

00:27:15,820 --> 00:27:22,120
mean for helpers and in the interpreter

00:27:18,640 --> 00:27:26,530
itself as well a no way to specify

00:27:22,120 --> 00:27:30,700
minimum required Python free version so

00:27:26,530 --> 00:27:36,400
if there's a library that requires

00:27:30,700 --> 00:27:38,320
python 3.6 and we have 3.5 and 3.6 as

00:27:36,400 --> 00:27:42,520
supported which is not the case now and

00:27:38,320 --> 00:27:43,890
will not be in stretch but maybe in

00:27:42,520 --> 00:27:50,980
buster

00:27:43,890 --> 00:27:54,160
there's no way to do the scribe and in

00:27:50,980 --> 00:27:56,500
vitam free libraries sure I mean

00:27:54,160 --> 00:28:00,850
packages share the same dis packages

00:27:56,500 --> 00:28:04,120
directory and there were some ideas

00:28:00,850 --> 00:28:10,060
upstream how to solve that with sub

00:28:04,120 --> 00:28:15,090
directories or hitters in files but it's

00:28:10,060 --> 00:28:15,090
not fix it upstream so I didn't try to

00:28:15,690 --> 00:28:22,780
to solve it in any way in helpers as

00:28:19,990 --> 00:28:27,280
well hoping that AB string will we'll

00:28:22,780 --> 00:28:29,380
fix it and right now we support only one

00:28:27,280 --> 00:28:35,090
fight on free version so it's not an

00:28:29,380 --> 00:28:42,170
issue but maybe you have some ideas

00:28:35,090 --> 00:28:51,350
we can prepare for future but I guess

00:28:42,170 --> 00:28:53,750
it's more a question to upstream and we

00:28:51,350 --> 00:28:57,400
have X Python 3 version don't we for our

00:28:53,750 --> 00:29:01,850
source packages yes and it tells our

00:28:57,400 --> 00:29:04,670
helpers which interpreter versions used

00:29:01,850 --> 00:29:07,820
to build a package but once they build

00:29:04,670 --> 00:29:12,590
it in the binary rich installed and for

00:29:07,820 --> 00:29:17,560
example if user has Python 3.6 installed

00:29:12,590 --> 00:29:23,090
even now even though we don't support it

00:29:17,560 --> 00:29:27,860
things can break for example if user

00:29:23,090 --> 00:29:31,280
installs something locally all the tools

00:29:27,860 --> 00:29:36,430
that are used during upgrades will try

00:29:31,280 --> 00:29:40,790
to buy to compile this these files for

00:29:36,430 --> 00:29:44,030
for five python 3.5 as well and if given

00:29:40,790 --> 00:29:46,580
file requires python 3.6 it will fight

00:29:44,030 --> 00:29:48,680
we will have the same problem with pi PI

00:29:46,580 --> 00:29:50,420
3 sharing those directories as well and

00:29:48,680 --> 00:29:52,880
we decided to ignore that one for now

00:29:50,420 --> 00:29:54,320
because we haven't seen it actually be

00:29:52,880 --> 00:30:07,190
an issue yet because PI by 3 doesn't

00:29:54,320 --> 00:30:10,150
exist yet well in Debian we are not

00:30:07,190 --> 00:30:10,150
prepared for that

00:30:24,100 --> 00:31:03,970
oh so the discussion happens maybe one

00:31:01,960 --> 00:31:05,500
point related to transition it might be

00:31:03,970 --> 00:31:07,419
obvious but I think one thing that

00:31:05,500 --> 00:31:09,850
really helps for these type of things

00:31:07,419 --> 00:31:11,980
that are other otherwise never-ending is

00:31:09,850 --> 00:31:14,080
having metrics and making sure we

00:31:11,980 --> 00:31:16,780
actually measure how big the problem is

00:31:14,080 --> 00:31:19,179
and how much work is left until we can

00:31:16,780 --> 00:31:22,539
actually remove we might do that through

00:31:19,179 --> 00:31:25,240
linton which has now measuring purposes

00:31:22,539 --> 00:31:27,010
so we can have graphs for that measures

00:31:25,240 --> 00:31:31,950
across the whole archive dependencies

00:31:27,010 --> 00:31:31,950
and stuff yeah

00:31:34,530 --> 00:31:38,200
aka don't work in the wall in the void

00:31:36,850 --> 00:31:44,650
just make sure you have a graph that

00:31:38,200 --> 00:31:46,980
says you're done or not done don't be

00:31:44,650 --> 00:31:46,980
silly

00:31:58,470 --> 00:32:08,650
so I'd be

00:32:02,560 --> 00:32:12,070
does anybody have any problems with the

00:32:08,650 --> 00:32:16,290
Hubble tubes I wrote is there something

00:32:12,070 --> 00:32:19,780
I can automate did you have have to

00:32:16,290 --> 00:32:21,910
overwrite the H out or install or build

00:32:19,780 --> 00:32:31,630
or something

00:32:21,910 --> 00:32:35,340
I think the usual problems are people

00:32:31,630 --> 00:32:35,340
struggle to find documentation on it

00:32:38,770 --> 00:32:47,980
[Applause]

00:32:41,550 --> 00:32:53,710
every question I get I try to reflect

00:32:47,980 --> 00:33:02,110
that in the wiki or or in Mon page but

00:32:53,710 --> 00:33:04,360
if anybody wants to help me writing some

00:33:02,110 --> 00:33:08,890
documentation I'm more than happy to

00:33:04,360 --> 00:33:10,810
answer any questions if I'm more than

00:33:08,890 --> 00:33:12,990
happy to answer any questions even if

00:33:10,810 --> 00:33:18,790
you don't want to write the commutation

00:33:12,990 --> 00:33:26,980
and I think I did answer at least on IRC

00:33:18,790 --> 00:33:30,810
I try to answer at least but I know that

00:33:26,980 --> 00:33:35,820
I'm not a great documentation writer so

00:33:30,810 --> 00:33:42,370
that's something a newcomer could

00:33:35,820 --> 00:33:45,010
probably do because it's the best way

00:33:42,370 --> 00:33:47,170
probably to write documentation is to

00:33:45,010 --> 00:33:49,960
write it when you don't know something

00:33:47,170 --> 00:33:52,630
and you have to dig it for answers and

00:33:49,960 --> 00:33:58,720
I'm more than happy to to provide

00:33:52,630 --> 00:34:01,090
answers as long as I know them and then

00:33:58,720 --> 00:34:07,630
somebody has to

00:34:01,090 --> 00:34:11,470
could at least write it down in a way

00:34:07,630 --> 00:34:18,630
that everybody else can understand it

00:34:11,470 --> 00:34:18,630
and not in a way I write it there are

00:34:19,110 --> 00:34:25,570
probably too many wiki pages already and

00:34:22,870 --> 00:34:29,350
sometimes it's a problem we have our

00:34:25,570 --> 00:34:32,230
documentation is there but is you know

00:34:29,350 --> 00:34:38,620
different places and it's maybe not easy

00:34:32,230 --> 00:34:41,770
to find I try to keep PI built for

00:34:38,620 --> 00:34:46,990
example examples only on the wiki page

00:34:41,770 --> 00:34:52,990
that is mentioned in I built man page so

00:34:46,990 --> 00:34:55,390
it's all linked I don't know I still

00:34:52,990 --> 00:35:01,000
keep hearing complaints about

00:34:55,390 --> 00:35:04,510
documentation but I would like to hear

00:35:01,000 --> 00:35:07,260
more about specific what what what what

00:35:04,510 --> 00:35:11,740
is missing was do you want me to add I

00:35:07,260 --> 00:35:16,500
will I can add that documentation myself

00:35:11,740 --> 00:35:16,500
but I need to know what what is missing

00:35:24,390 --> 00:35:32,470
here on the documentation it's less that

00:35:30,430 --> 00:35:34,870
I don't necessarily know how to do

00:35:32,470 --> 00:35:37,150
something it will be I think I'm doing

00:35:34,870 --> 00:35:40,180
it it works but I think it's pretty ugly

00:35:37,150 --> 00:35:44,140
and I think I'll show you what the

00:35:40,180 --> 00:35:46,630
solution would be but if you perhaps

00:35:44,140 --> 00:35:48,220
document some best practices or I feel

00:35:46,630 --> 00:35:52,440
like I'm hard coding a bunch of stuff

00:35:48,220 --> 00:35:52,440
and yeah it works but

00:35:56,020 --> 00:36:02,380
did something wrong in the tools because

00:35:58,690 --> 00:36:06,400
they should ultimate everything and if

00:36:02,380 --> 00:36:10,330
you have have to hard code things and so

00:36:06,400 --> 00:36:14,520
on please contact me and I will try to

00:36:10,330 --> 00:36:19,660
figure out if if I can help you somehow

00:36:14,520 --> 00:36:23,369
by showing how you can automate this or

00:36:19,660 --> 00:36:27,820
by improving tools to twelve eight that

00:36:23,369 --> 00:36:28,840
right okay it won't be the best approach

00:36:27,820 --> 00:36:30,850
for that because they're typically not

00:36:28,840 --> 00:36:34,060
bugs cuz I already filed a bug saying I

00:36:30,850 --> 00:36:35,830
think my packaging is ugly and assign it

00:36:34,060 --> 00:36:47,260
to th by do you see what I mean it's a

00:36:35,830 --> 00:36:49,690
bit for me those problems are usually

00:36:47,260 --> 00:36:54,250
around tests it's just some packages are

00:36:49,690 --> 00:36:59,230
really hard to test with Bibles you the

00:36:54,250 --> 00:37:01,119
test suite because because the test

00:36:59,230 --> 00:37:03,280
suite is rubbish and requires you to be

00:37:01,119 --> 00:37:08,830
in a particular directory and have had

00:37:03,280 --> 00:37:12,310
totally insane imports yes yes I added

00:37:08,830 --> 00:37:15,400
quite a few hacks like changing the

00:37:12,310 --> 00:37:18,400
directory to the directory copying test

00:37:15,400 --> 00:37:22,450
files over there and so on and are

00:37:18,400 --> 00:37:25,990
probably more needed but I need to know

00:37:22,450 --> 00:37:29,740
about it because for packages that I

00:37:25,990 --> 00:37:34,119
maintain I I had to add hacks like that

00:37:29,740 --> 00:37:40,510
and I I add them of the improving tools

00:37:34,119 --> 00:37:43,930
so I knew about these facts and I added

00:37:40,510 --> 00:37:46,750
support for them but I need to know what

00:37:43,930 --> 00:37:53,170
else is missing what yeah what things

00:37:46,750 --> 00:37:55,539
you need you can report backs or

00:37:53,170 --> 00:38:02,200
or just being me and show me what you

00:37:55,539 --> 00:38:05,740
needed to run these tests and we can

00:38:02,200 --> 00:38:09,339
find a way to to automate that so that

00:38:05,740 --> 00:38:11,559
you don't have to do it anymore and then

00:38:09,339 --> 00:38:13,660
ideally get to a point where we can run

00:38:11,559 --> 00:38:20,230
automate Auto pkg tests from them as

00:38:13,660 --> 00:38:25,720
well but I think I think I can improve

00:38:20,230 --> 00:38:31,480
the situation in that area but in in in

00:38:25,720 --> 00:38:34,599
the pi PI 2 pi pi/2 that tool so the one

00:38:31,480 --> 00:38:38,019
that creates pack them in directory from

00:38:34,599 --> 00:38:40,510
scratch I can add support or outer

00:38:38,019 --> 00:38:45,849
package that's over there but it's only

00:38:40,510 --> 00:38:49,569
for new packages I don't really think I

00:38:45,849 --> 00:38:53,160
can do anything about it in I build

00:38:49,569 --> 00:38:57,299
because it's my abilities use during

00:38:53,160 --> 00:39:00,400
built so and outer package test is

00:38:57,299 --> 00:39:04,420
mostly about creating debian tests

00:39:00,400 --> 00:39:08,859
control file I think right so it's not a

00:39:04,420 --> 00:39:10,450
place where PI boots should for some

00:39:08,859 --> 00:39:13,240
test cases that could share the same

00:39:10,450 --> 00:39:15,009
configuration but it depends on the test

00:39:13,240 --> 00:39:21,269
suite being very nice to begin with

00:39:15,009 --> 00:39:25,650
there's a new support vital module in

00:39:21,269 --> 00:39:25,650
somebody from our team created it

00:39:29,190 --> 00:39:39,650
yeah that that was Andre Novi he added

00:39:36,530 --> 00:39:42,569
support out of that page which is a

00:39:39,650 --> 00:39:44,490
support pack that creates if your

00:39:42,569 --> 00:39:46,890
package doesn't have Debian task on so

00:39:44,490 --> 00:39:50,130
it creates one for you based on metadata

00:39:46,890 --> 00:39:53,970
on the package so what you want to do

00:39:50,130 --> 00:39:56,069
there is probably have strikes a tool to

00:39:53,970 --> 00:39:59,039
run tests from pi build and then have

00:39:56,069 --> 00:40:12,480
that in a separate binary package that

00:39:59,039 --> 00:40:14,880
you can uses a test opinion so that part

00:40:12,480 --> 00:40:21,140
is or is partially done by by own dredge

00:40:14,880 --> 00:40:24,240
so right now it just does like a simple

00:40:21,140 --> 00:40:26,730
import foo to make sure that you can

00:40:24,240 --> 00:40:28,829
actually load the test well when you

00:40:26,730 --> 00:40:32,359
when you have that other tool that

00:40:28,829 --> 00:40:40,260
branded that actually runs the test

00:40:32,359 --> 00:40:42,839
that's what a pkg test has a mechanism

00:40:40,260 --> 00:40:45,599
of water tests so a particular type of

00:40:42,839 --> 00:40:47,609
package can have a single test that

00:40:45,599 --> 00:40:49,589
works for all of them and this

00:40:47,609 --> 00:40:56,579
essentially works for all Python modules

00:40:49,589 --> 00:41:02,250
by in doing its simple import all it's

00:40:56,579 --> 00:41:04,260
enabled already I mean yeah yeah but it

00:41:02,250 --> 00:41:08,130
just is import test it doesn't actually

00:41:04,260 --> 00:41:12,029
run any tests so what we need to do is

00:41:08,130 --> 00:41:13,980
to improve the auto generation of the

00:41:12,029 --> 00:41:20,549
outer package tests to include a call to

00:41:13,980 --> 00:41:22,319
the tool that actually runs the test yes

00:41:20,549 --> 00:41:25,770
and they have well Stanley mechanism

00:41:22,319 --> 00:41:27,779
calling stuff I don't like it

00:41:25,770 --> 00:41:31,460
if you introduce Auto packaged tests

00:41:27,779 --> 00:41:34,890
without then doing something with it

00:41:31,460 --> 00:41:38,000
because usually even if an auto package

00:41:34,890 --> 00:41:42,300
test fails nobody cares about it and

00:41:38,000 --> 00:41:45,630
sorry to say will do cares about them

00:41:42,300 --> 00:41:49,890
and I'm doing that then the whole QA for

00:41:45,630 --> 00:41:53,220
father OB team in Debian or than for the

00:41:49,890 --> 00:41:57,540
Python team so it would be nice if so at

00:41:53,220 --> 00:41:59,460
least team could well on a result of

00:41:57,540 --> 00:42:01,860
auto package tests and then it would

00:41:59,460 --> 00:42:05,370
make sense to turn them on even in a

00:42:01,860 --> 00:42:06,870
very simple way so it's some only forms

00:42:05,370 --> 00:42:13,440
of a least team here who could comment

00:42:06,870 --> 00:42:15,300
on that no just just making sure it's

00:42:13,440 --> 00:42:16,620
not me that I asked it for it it's

00:42:15,300 --> 00:42:29,010
someone from the Python thing that

00:42:16,620 --> 00:42:30,330
started doing it so I know that person

00:42:29,010 --> 00:42:33,000
because he's been doing some opens up

00:42:30,330 --> 00:42:36,090
languages with me what we do in the team

00:42:33,000 --> 00:42:39,570
is that we do have tests at Build time

00:42:36,090 --> 00:42:42,720
and we'll also run the auto package

00:42:39,570 --> 00:42:44,880
tests after the package is built so

00:42:42,720 --> 00:42:47,580
that's probably one of the ways to make

00:42:44,880 --> 00:42:49,800
sure that these tests are in order it's

00:42:47,580 --> 00:42:51,780
like you run them after the package is

00:42:49,800 --> 00:42:55,640
built so that you make sure it's okay to

00:42:51,780 --> 00:42:55,640
put the package this way in Yakov

00:43:05,550 --> 00:43:12,050
and by the way hello wondrous PNA ah see

00:43:35,660 --> 00:43:39,870
actually we running now out of time so I

00:43:38,490 --> 00:43:42,300
think we need to close the session

00:43:39,870 --> 00:43:44,960
because we have an attention session

00:43:42,300 --> 00:43:49,550
after here so thank you for the POF

00:43:44,960 --> 00:43:49,550
thank you and for the for discussions

00:43:49,600 --> 00:43:56,350

YouTube URL: https://www.youtube.com/watch?v=lmY0MsAj7pY


