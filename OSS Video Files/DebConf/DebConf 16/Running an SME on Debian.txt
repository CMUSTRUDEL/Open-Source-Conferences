Title: Running an SME on Debian
Publication date: 2017-12-05
Playlist: DebConf 16
Description: 
	by Apollon Oikonomopoulos

At: Debconf 16 video RSS feed
https://debconf16.debconf.org/
Room: Menzies 9
Scheduled start: 2016-07-04 17:15:00
Captions: 
	00:00:00,390 --> 00:00:05,759
good afternoon everybody thanks for

00:00:01,949 --> 00:00:08,670
being here this talk is titled running

00:00:05,759 --> 00:00:11,280
and small to mid-sized enterprise on

00:00:08,670 --> 00:00:13,049
Debian but because I'm not obviously bad

00:00:11,280 --> 00:00:15,800
at naming things I would add subtitle

00:00:13,049 --> 00:00:18,560
like merging Debian across a whole fleet

00:00:15,800 --> 00:00:21,390
so just a couple of words about

00:00:18,560 --> 00:00:24,289
presentation it's the success story kind

00:00:21,390 --> 00:00:28,529
of thing it's mostly what we do at my

00:00:24,289 --> 00:00:30,810
day job so I'll make a short

00:00:28,529 --> 00:00:34,320
introduction and then I will try to

00:00:30,810 --> 00:00:36,200
cover aspects of installing managing

00:00:34,320 --> 00:00:40,680
configuration managing packages and

00:00:36,200 --> 00:00:44,399
getting your people involved so just a

00:00:40,680 --> 00:00:47,489
quick introduction i'm apollon also

00:00:44,399 --> 00:00:49,410
known as articles in debian my day job

00:00:47,489 --> 00:00:52,320
is ahead of infrastructure schools gr

00:00:49,410 --> 00:00:55,590
which is what we'll be seeing in a

00:00:52,320 --> 00:00:59,430
minute I've been a relatively long time

00:00:55,590 --> 00:01:03,629
Linux user and Debian admins in more

00:00:59,430 --> 00:01:05,880
than 10 years I started contributing to

00:01:03,629 --> 00:01:08,729
Debian a while back and I became a DD

00:01:05,880 --> 00:01:11,340
finally two and a half years ago so

00:01:08,729 --> 00:01:13,500
nowadays I do mostly packaging work and

00:01:11,340 --> 00:01:16,040
most my packages are several rented but

00:01:13,500 --> 00:01:20,720
I also act as a local DSA contact for

00:01:16,040 --> 00:01:23,189
Debian machines hosted at geonet so

00:01:20,720 --> 00:01:26,610
they've been across the fleet a success

00:01:23,189 --> 00:01:29,700
story the company's called screwed

00:01:26,610 --> 00:01:32,750
that's a funny spelling but that's how

00:01:29,700 --> 00:01:35,820
most Greeks would actually spell Scrooge

00:01:32,750 --> 00:01:38,759
using the Latin alphabet so it's pretty

00:01:35,820 --> 00:01:39,990
intuitive when you're Greek it's

00:01:38,759 --> 00:01:41,970
basically a product search and

00:01:39,990 --> 00:01:44,970
comparison engine or search engine for

00:01:41,970 --> 00:01:47,310
products available online and by many

00:01:44,970 --> 00:01:50,880
ranking its rankings it's the most

00:01:47,310 --> 00:01:54,770
visited Greek web page right now so we

00:01:50,880 --> 00:01:57,170
average about 600,000 visitors daily and

00:01:54,770 --> 00:01:59,090
five and a half million unique visitors

00:01:57,170 --> 00:02:01,939
per month that's almost half the

00:01:59,090 --> 00:02:05,990
county's population and the whole

00:02:01,939 --> 00:02:08,479
company has about 150 employees all in

00:02:05,990 --> 00:02:12,470
Greece which makes it actually a

00:02:08,479 --> 00:02:14,660
mid-sized enterprise let's say so our

00:02:12,470 --> 00:02:18,049
infrastructure currently consists of

00:02:14,660 --> 00:02:21,950
about 85 physical servers and some of

00:02:18,049 --> 00:02:24,099
them run around 280 to 300 km virtual

00:02:21,950 --> 00:02:26,510
machines on managed by Kenneth E and

00:02:24,099 --> 00:02:29,540
they're all dispersed in three physical

00:02:26,510 --> 00:02:32,950
locations co-located in different data

00:02:29,540 --> 00:02:35,090
centers we strive to have a redundant

00:02:32,950 --> 00:02:38,930
infrastructure and many high

00:02:35,090 --> 00:02:43,010
availability features and what's

00:02:38,930 --> 00:02:45,170
actually the thing with small and

00:02:43,010 --> 00:02:47,810
mid-sized enterprises that you can't

00:02:45,170 --> 00:02:51,829
have huge teams of people doing things

00:02:47,810 --> 00:02:53,930
so currently there is a team of four

00:02:51,829 --> 00:02:56,360
system administrators doing operations

00:02:53,930 --> 00:03:03,109
and infrastructure work and that plus

00:02:56,360 --> 00:03:05,389
one more doing office IT support so what

00:03:03,109 --> 00:03:08,660
do we use Debian for the answer is

00:03:05,389 --> 00:03:10,459
almost everything that can run it we run

00:03:08,660 --> 00:03:14,930
our production servers on it we're on

00:03:10,459 --> 00:03:17,540
our rooters using Debian the developers

00:03:14,930 --> 00:03:21,530
many developers run Debian on their

00:03:17,540 --> 00:03:22,790
workstations or laptops and we use

00:03:21,530 --> 00:03:24,620
Debian for the majority of the

00:03:22,790 --> 00:03:29,690
non-technical staff workstations as well

00:03:24,620 --> 00:03:30,950
and this also includes some raspberry

00:03:29,690 --> 00:03:32,810
PI's that we have connected to

00:03:30,950 --> 00:03:35,660
televisions like for the dashboard

00:03:32,810 --> 00:03:37,700
displays and I'm probably forgetting a

00:03:35,660 --> 00:03:39,829
couple more things but I mean it's

00:03:37,700 --> 00:03:42,139
almost everything basically everything

00:03:39,829 --> 00:03:46,760
and as far as I know we just don't run

00:03:42,139 --> 00:03:49,849
Debian on our switches yet so when it

00:03:46,760 --> 00:03:52,940
comes to servers we're running a pretty

00:03:49,849 --> 00:03:55,819
modern full HTTP stack including a proxy

00:03:52,940 --> 00:03:57,109
varnish nginx and so on so our main

00:03:55,819 --> 00:04:01,579
application is a rails application

00:03:57,109 --> 00:04:03,280
running on top of unicorn we use as as I

00:04:01,579 --> 00:04:06,350
said before we use ganeti for virtual

00:04:03,280 --> 00:04:08,190
virtualization class and management for

00:04:06,350 --> 00:04:11,130
KVM virtual machines

00:04:08,190 --> 00:04:13,250
and apart from the website which is our

00:04:11,130 --> 00:04:16,380
main service we also run a full-scale

00:04:13,250 --> 00:04:19,380
supporting core infrastructure including

00:04:16,380 --> 00:04:22,230
things like DNS email LDAP radius all

00:04:19,380 --> 00:04:25,070
kinds of monitoring so which quickly

00:04:22,230 --> 00:04:27,480
adds up to a big number of machines

00:04:25,070 --> 00:04:31,140
everything is managed using puppet and

00:04:27,480 --> 00:04:33,210
we use Debian packages for practically

00:04:31,140 --> 00:04:35,730
everything apart from the web

00:04:33,210 --> 00:04:40,050
application itself which is deployed

00:04:35,730 --> 00:04:42,360
using Capistrano so when it comes to

00:04:40,050 --> 00:04:46,140
Reuters and now this is something I

00:04:42,360 --> 00:04:47,970
personally don't see very often but in

00:04:46,140 --> 00:04:50,160
our case our core routers are really

00:04:47,970 --> 00:04:53,640
pairs of redundant 1u servers with a

00:04:50,160 --> 00:04:57,120
bunch of gigabit interfaces so we use a

00:04:53,640 --> 00:04:58,560
very routing daemon for BGP and OSPF BGP

00:04:57,120 --> 00:05:01,860
with our upstream peers and ibgp

00:04:58,560 --> 00:05:07,380
internally plus OSPF for our own routing

00:05:01,860 --> 00:05:09,060
domain on the client side we ensure

00:05:07,380 --> 00:05:12,320
things are running smoothly using

00:05:09,060 --> 00:05:15,120
keepalive T which does vrrp so the

00:05:12,320 --> 00:05:18,720
gateway IP addresses in our network are

00:05:15,120 --> 00:05:21,720
all floating between two machines these

00:05:18,720 --> 00:05:23,910
machines also do stateful dual-stack

00:05:21,720 --> 00:05:26,400
firewall on the border of the

00:05:23,910 --> 00:05:29,550
infrastructure so it's both ipv4 and

00:05:26,400 --> 00:05:32,010
ipv6 using firm which readily offers

00:05:29,550 --> 00:05:34,800
this capability of writing to your stack

00:05:32,010 --> 00:05:37,110
rules and we also use contract D to

00:05:34,800 --> 00:05:40,320
replicate the firewall state between

00:05:37,110 --> 00:05:42,360
machines so if the active router

00:05:40,320 --> 00:05:46,650
actually goes down then the backup

00:05:42,360 --> 00:05:48,950
replica can continue serving already

00:05:46,650 --> 00:05:52,530
established connections without an issue

00:05:48,950 --> 00:05:57,440
so the busiest of those machines routes

00:05:52,530 --> 00:06:00,300
about one gigabit per second of traffic

00:05:57,440 --> 00:06:02,310
the network's not very big but we still

00:06:00,300 --> 00:06:05,450
have three distinct locations three data

00:06:02,310 --> 00:06:07,950
centers five different uplink from two

00:06:05,450 --> 00:06:09,710
different option providers plus one

00:06:07,950 --> 00:06:15,030
internet exchange that were connected to

00:06:09,710 --> 00:06:16,560
so it's really nice to have your router

00:06:15,030 --> 00:06:18,720
behave like the rest of your

00:06:16,560 --> 00:06:21,630
infrastructure and be able to manage it

00:06:18,720 --> 00:06:25,920
using puppet and even have your things

00:06:21,630 --> 00:06:27,840
your BGP puredata in high era plus when

00:06:25,920 --> 00:06:29,760
it's exactly the same as a machine

00:06:27,840 --> 00:06:33,210
you're working on you can get rid of

00:06:29,760 --> 00:06:37,080
SNMP at do things like monitoring like a

00:06:33,210 --> 00:06:39,180
human should do so using actual scripts

00:06:37,080 --> 00:06:46,350
to pick whatever data you want out of

00:06:39,180 --> 00:06:48,150
the system now as I said before there's

00:06:46,350 --> 00:06:51,810
also a number of workstations that are

00:06:48,150 --> 00:06:55,530
using them in company so we have

00:06:51,810 --> 00:06:59,330
different uses and we have also both

00:06:55,530 --> 00:07:01,710
technical and non-technical users so

00:06:59,330 --> 00:07:03,600
technical users that is engineers and

00:07:01,710 --> 00:07:05,430
developers usually get a laptop with

00:07:03,600 --> 00:07:07,500
full disk encryption pre-installed with

00:07:05,430 --> 00:07:11,040
Debian and that's it they can do their

00:07:07,500 --> 00:07:12,630
own support from then on for

00:07:11,040 --> 00:07:15,450
non-technical users we mostly use

00:07:12,630 --> 00:07:17,490
desktop computers and we do manage them

00:07:15,450 --> 00:07:19,560
using puppet as well

00:07:17,490 --> 00:07:23,400
they all run known as the desktop

00:07:19,560 --> 00:07:27,330
environment but we have gone along to

00:07:23,400 --> 00:07:31,050
adding G conf and Deacon settings to

00:07:27,330 --> 00:07:36,180
puppet so that we can ensure uniformity

00:07:31,050 --> 00:07:39,660
across all this fleet of desktops now

00:07:36,180 --> 00:07:43,890
let's go on to bootstrapping

00:07:39,660 --> 00:07:47,730
how do we actually start a machines

00:07:43,890 --> 00:07:49,110
lifecycle in company we used Debian in

00:07:47,730 --> 00:07:52,170
story proceeding actually across the

00:07:49,110 --> 00:07:54,960
fleet so there are a number of ways we

00:07:52,170 --> 00:07:56,490
use to get Debian installer running most

00:07:54,960 --> 00:07:59,880
for servers and workstations that's

00:07:56,490 --> 00:08:03,420
mostly PXE booting of a network laptops

00:07:59,880 --> 00:08:06,660
nowadays don't have Ethernet cards so we

00:08:03,420 --> 00:08:09,150
boot them over USB and we also used the

00:08:06,660 --> 00:08:10,980
Debian installer to install virtual

00:08:09,150 --> 00:08:14,550
machines which I'm going to say a bit

00:08:10,980 --> 00:08:15,960
more about later so the aim here is to

00:08:14,550 --> 00:08:18,960
have completely unattended installation

00:08:15,960 --> 00:08:21,660
for most classes of systems and just

00:08:18,960 --> 00:08:23,940
bring the system's to a point where they

00:08:21,660 --> 00:08:27,750
can run puppet we don't want to answer

00:08:23,940 --> 00:08:29,460
that Debian installers prompts and we

00:08:27,750 --> 00:08:33,660
have succeeded so far I mean we wrote a

00:08:29,460 --> 00:08:35,190
first proceeding file back in the

00:08:33,660 --> 00:08:37,470
squeezie right

00:08:35,190 --> 00:08:40,800
correctly and it has been running smooth

00:08:37,470 --> 00:08:43,229
ever since the only let's say bad part

00:08:40,800 --> 00:08:44,790
is apartment recipes could be a lot

00:08:43,229 --> 00:08:49,040
better I don't know how many of you have

00:08:44,790 --> 00:08:51,570
ever tried writing a full full proceed

00:08:49,040 --> 00:08:54,050
configuration it's just probably the

00:08:51,570 --> 00:08:58,920
hardest point is get is to get

00:08:54,050 --> 00:09:01,560
partitioning right so one might ask why

00:08:58,920 --> 00:09:04,520
do we use Debian installer for virtual

00:09:01,560 --> 00:09:09,170
machines there are tons of images and

00:09:04,520 --> 00:09:12,360
yeah we actually we were running using

00:09:09,170 --> 00:09:14,250
full image ourselves before it's just

00:09:12,360 --> 00:09:16,890
that full images need to be kept up to

00:09:14,250 --> 00:09:18,390
date and that's additional work so you

00:09:16,890 --> 00:09:19,580
have point releases you have security

00:09:18,390 --> 00:09:22,230
updates

00:09:19,580 --> 00:09:26,520
somebody has to actually go out and

00:09:22,230 --> 00:09:28,650
update that image so that it's the

00:09:26,520 --> 00:09:30,150
latest and greatest it's not fun to get

00:09:28,650 --> 00:09:31,530
your virtual machine up and running only

00:09:30,150 --> 00:09:33,120
to discover that it needs another five

00:09:31,530 --> 00:09:36,630
hundred megabytes or updates and another

00:09:33,120 --> 00:09:39,630
reboot another factor is that care must

00:09:36,630 --> 00:09:43,620
be taken to actually strip sensitive

00:09:39,630 --> 00:09:45,810
data out of those images SSH keys some

00:09:43,620 --> 00:09:50,640
randomization using user IDs and so on

00:09:45,810 --> 00:09:52,650
so I I heard a story from UNIX colleague

00:09:50,640 --> 00:09:55,470
about their own infrastructure that at

00:09:52,650 --> 00:09:57,930
some point they found out that the whole

00:09:55,470 --> 00:10:02,190
fleet of virtual machines simply had the

00:09:57,930 --> 00:10:05,280
same ECDSA host key everywhere because

00:10:02,190 --> 00:10:07,020
they had a they had a script in place to

00:10:05,280 --> 00:10:09,510
just strip the host keys out of the

00:10:07,020 --> 00:10:13,590
master image but it was only RSA and DSA

00:10:09,510 --> 00:10:16,110
aware so with Jesse when we started

00:10:13,590 --> 00:10:17,670
having ECDSA keys as well the script did

00:10:16,110 --> 00:10:21,900
what it should but it didn't strip the

00:10:17,670 --> 00:10:24,120
ECDSA key so for us using the Debian

00:10:21,900 --> 00:10:30,030
installer just solves all of the above

00:10:24,120 --> 00:10:31,380
so we threw together again at the

00:10:30,030 --> 00:10:33,420
operating system provider that's

00:10:31,380 --> 00:10:35,940
actually a set of scripts that kinnetik

00:10:33,420 --> 00:10:37,350
calls to provision a virtual a newly

00:10:35,940 --> 00:10:40,380
installed virtual machine with an

00:10:37,350 --> 00:10:42,120
operating system which all it does is

00:10:40,380 --> 00:10:43,950
that it boots an ephemeral KVM instance

00:10:42,120 --> 00:10:46,380
running Debian installer with the

00:10:43,950 --> 00:10:48,490
preceeding configuration actually with a

00:10:46,380 --> 00:10:50,950
URL to the preceding configuration

00:10:48,490 --> 00:10:53,380
and then it captures and logs all di

00:10:50,950 --> 00:10:55,270
output and will abort if a prompt

00:10:53,380 --> 00:10:57,220
appears because that's supposed to be

00:10:55,270 --> 00:10:59,260
non interactive you there is no way in

00:10:57,220 --> 00:11:02,020
ganeti that you can interact with

00:10:59,260 --> 00:11:05,290
installer on operating system

00:11:02,020 --> 00:11:07,600
installation time using a local apt

00:11:05,290 --> 00:11:09,910
cache and using tricks such as

00:11:07,600 --> 00:11:13,150
right-back caching to speed up things a

00:11:09,910 --> 00:11:15,400
bit the installation time has come down

00:11:13,150 --> 00:11:17,800
to approximately two minutes per

00:11:15,400 --> 00:11:19,720
instance which is something we are

00:11:17,800 --> 00:11:21,730
willing to pay we're not a public cloud

00:11:19,720 --> 00:11:25,240
we're just creating a couple of virtual

00:11:21,730 --> 00:11:27,250
machines a day and after finishing

00:11:25,240 --> 00:11:29,350
everything is fresh everything is the

00:11:27,250 --> 00:11:33,160
latest and greatest and no need for

00:11:29,350 --> 00:11:36,310
additional reboots so this is something

00:11:33,160 --> 00:11:37,930
that I also intend to package for Debian

00:11:36,310 --> 00:11:40,150
actually it is a Debian package already

00:11:37,930 --> 00:11:44,170
but I need to strip all site-specific

00:11:40,150 --> 00:11:49,240
stuff and make sure that it can play

00:11:44,170 --> 00:11:52,390
without expecting the proceeding file to

00:11:49,240 --> 00:11:54,100
be in a globally reachable URL some sort

00:11:52,390 --> 00:11:57,070
so you should be able to feed it with a

00:11:54,100 --> 00:11:58,840
configuration file and that's it so once

00:11:57,070 --> 00:12:03,070
this is done I intend to uploading

00:11:58,840 --> 00:12:06,100
Debian as well now after everything is

00:12:03,070 --> 00:12:09,250
installed we obviously need to continue

00:12:06,100 --> 00:12:12,540
managing it like many others we are

00:12:09,250 --> 00:12:15,310
using puppet which is one of the most

00:12:12,540 --> 00:12:17,230
popular solution these days but it could

00:12:15,310 --> 00:12:20,800
have been chef or ansible or name

00:12:17,230 --> 00:12:22,690
whatever else so a configuration

00:12:20,800 --> 00:12:24,370
management system nowadays is essential

00:12:22,690 --> 00:12:27,490
for maintaining anything more than a

00:12:24,370 --> 00:12:31,000
bunch of machines but people tend to

00:12:27,490 --> 00:12:32,650
abuse it so for instance for me

00:12:31,000 --> 00:12:34,420
configuration management must document a

00:12:32,650 --> 00:12:36,310
package manager and not override or

00:12:34,420 --> 00:12:38,050
replace it the fact that you can ship

00:12:36,310 --> 00:12:42,540
arbitrary files to the systems doesn't

00:12:38,050 --> 00:12:46,120
mean that you actually should do it so

00:12:42,540 --> 00:12:50,530
what can you do to write puppet manifest

00:12:46,120 --> 00:12:53,080
play nice with debian in our case we

00:12:50,530 --> 00:12:55,570
follow a simple set of rules that seems

00:12:53,080 --> 00:13:00,640
to make sense with debian and our

00:12:55,570 --> 00:13:01,740
modules play well enough so the first

00:13:00,640 --> 00:13:03,150
one is

00:13:01,740 --> 00:13:06,950
drop configuration files in

00:13:03,150 --> 00:13:09,840
configuration director is it possible so

00:13:06,950 --> 00:13:12,600
there is no reason to go manage etc' app

00:13:09,840 --> 00:13:14,520
sources list just drop a file with your

00:13:12,600 --> 00:13:16,590
own repositories and sources list B

00:13:14,520 --> 00:13:19,800
since the distribution actually provides

00:13:16,590 --> 00:13:21,870
a way to do this the second is in order

00:13:19,800 --> 00:13:25,620
to allow local administrators of each

00:13:21,870 --> 00:13:29,730
machine which may not always be the ones

00:13:25,620 --> 00:13:32,010
as the ones that control puppet that we

00:13:29,730 --> 00:13:34,110
create some exclusively manage snippet

00:13:32,010 --> 00:13:36,990
directories where ever supported for

00:13:34,110 --> 00:13:40,650
instance our arthas log setup is like

00:13:36,990 --> 00:13:43,620
this we have etcs log D which is managed

00:13:40,650 --> 00:13:45,840
by Debian end-users and then we have it

00:13:43,620 --> 00:13:47,940
is your syslog puppet T which is

00:13:45,840 --> 00:13:49,920
exclusively managed by property anything

00:13:47,940 --> 00:13:52,200
going there which puppet knows nothing

00:13:49,920 --> 00:13:54,360
about will be removed the same goes

00:13:52,200 --> 00:13:57,420
firewall rules using firm and a couple

00:13:54,360 --> 00:14:01,190
of other places the third guideline is

00:13:57,420 --> 00:14:04,740
just don't ship all configuration files

00:14:01,190 --> 00:14:08,400
if the change is needed to Debian

00:14:04,740 --> 00:14:10,500
defaults are relatively few you can use

00:14:08,400 --> 00:14:14,070
things like your keys to modify defaults

00:14:10,500 --> 00:14:18,570
this will be this will make dist

00:14:14,070 --> 00:14:20,100
upgrades actually very easy plus you

00:14:18,570 --> 00:14:24,720
will be able to have your module

00:14:20,100 --> 00:14:26,400
functioning especially during times of

00:14:24,720 --> 00:14:29,760
transition from one stable release to

00:14:26,400 --> 00:14:32,730
the next one even if the configuration

00:14:29,760 --> 00:14:34,230
file has changed you don't want to go

00:14:32,730 --> 00:14:36,780
through a district raid and a three-way

00:14:34,230 --> 00:14:38,070
merge only to have puppet replace it

00:14:36,780 --> 00:14:41,160
with a previous version again on the

00:14:38,070 --> 00:14:42,630
next round so just change only the

00:14:41,160 --> 00:14:46,830
minimum things that you need to change

00:14:42,630 --> 00:14:48,390
and the fourth is use the package

00:14:46,830 --> 00:14:50,460
provided facilities like the package

00:14:48,390 --> 00:14:52,470
divert or star override to play nice

00:14:50,460 --> 00:14:55,140
with the package just don't enforce

00:14:52,470 --> 00:14:58,860
permissions and content on operating

00:14:55,140 --> 00:15:02,490
system managed files divert them or use

00:14:58,860 --> 00:15:06,750
that override to set the permissions on

00:15:02,490 --> 00:15:08,580
the Debian side what I find what I call

00:15:06,750 --> 00:15:13,430
puppet friendly packaging our packages

00:15:08,580 --> 00:15:15,000
were just basically they they provide

00:15:13,430 --> 00:15:16,770
configuration

00:15:15,000 --> 00:15:19,860
in a way that is easy to monitor using

00:15:16,770 --> 00:15:21,960
puppets what it all comes out it comes

00:15:19,860 --> 00:15:25,470
down to is using include configuration

00:15:21,960 --> 00:15:27,960
from directors by default and if

00:15:25,470 --> 00:15:30,720
possible splitting out the same defaults

00:15:27,960 --> 00:15:32,340
from sample values you won't there be on

00:15:30,720 --> 00:15:35,360
specific defaults to be left untouched

00:15:32,340 --> 00:15:38,250
which leads to easier and safer upgrades

00:15:35,360 --> 00:15:40,800
while giving the admin or user the

00:15:38,250 --> 00:15:46,620
ability to override only sample values

00:15:40,800 --> 00:15:52,160
in a different file so after having

00:15:46,620 --> 00:15:58,050
managed I'd say yeah a lot of systems

00:15:52,160 --> 00:16:01,500
using puppet and Debian and I've been

00:15:58,050 --> 00:16:03,710
thinking of whether a Debian puppet

00:16:01,500 --> 00:16:07,470
module would actually be of some use

00:16:03,710 --> 00:16:10,380
so the standard puppet types just manage

00:16:07,470 --> 00:16:12,120
users and files and execute commands and

00:16:10,380 --> 00:16:14,010
yeah they also monitor services and a

00:16:12,120 --> 00:16:17,580
couple of other things but that's pretty

00:16:14,010 --> 00:16:21,030
much it it's in enough to do almost

00:16:17,580 --> 00:16:23,180
anything but the OL you do need to wrap

00:16:21,030 --> 00:16:25,800
to write boilerplate code in some cases

00:16:23,180 --> 00:16:27,570
for example when you shape or modify a

00:16:25,800 --> 00:16:30,360
system be unit these days you must

00:16:27,570 --> 00:16:32,730
trigger systemctl daemon reload this is

00:16:30,360 --> 00:16:34,980
something that almost everybody wishing

00:16:32,730 --> 00:16:36,930
to shape system the units on the Debian

00:16:34,980 --> 00:16:41,640
system or any other system for that

00:16:36,930 --> 00:16:43,140
matter should do and also we don't make

00:16:41,640 --> 00:16:45,180
much use of Debian's

00:16:43,140 --> 00:16:49,890
tools like the package divert or star

00:16:45,180 --> 00:16:52,470
override so at least in the concept of

00:16:49,890 --> 00:16:55,200
in the scope of the package puppet

00:16:52,470 --> 00:16:57,150
puppet group we could provide a

00:16:55,200 --> 00:16:59,190
batteries included Debian puppet module

00:16:57,150 --> 00:17:03,030
that would make the life of Debian C's

00:16:59,190 --> 00:17:04,680
admins easier and expose things like up

00:17:03,030 --> 00:17:08,730
sources management or multi

00:17:04,680 --> 00:17:10,709
architectures or alternatives or the

00:17:08,730 --> 00:17:14,459
package divert and this list can go on

00:17:10,709 --> 00:17:19,589
for a long way so this is open to

00:17:14,459 --> 00:17:21,329
further discussion and I intend to at

00:17:19,589 --> 00:17:24,920
least start the discussion propose

00:17:21,329 --> 00:17:24,920
creating such a module at some point

00:17:25,950 --> 00:17:30,150
the other thing with configuration

00:17:27,300 --> 00:17:33,030
management is the question whether we

00:17:30,150 --> 00:17:35,160
have two or three roles in the end

00:17:33,030 --> 00:17:37,350
so both the filesystem hierarchy

00:17:35,160 --> 00:17:40,500
standard and the con file handling right

00:17:37,350 --> 00:17:41,760
now basically assume two roles one is

00:17:40,500 --> 00:17:43,380
the role of the distribution and the

00:17:41,760 --> 00:17:47,100
other one is the role of the local

00:17:43,380 --> 00:17:49,410
system administrator so the question is

00:17:47,100 --> 00:17:51,540
should we assume that there is also a

00:17:49,410 --> 00:17:55,970
third one which is the config management

00:17:51,540 --> 00:17:58,590
system or let's say site-wide defaults

00:17:55,970 --> 00:18:00,600
in a sense that the configuration

00:17:58,590 --> 00:18:02,850
management system should be able to

00:18:00,600 --> 00:18:05,760
override the distribution but then you

00:18:02,850 --> 00:18:07,650
still get the local local admin of the

00:18:05,760 --> 00:18:11,160
machine who should be able to override

00:18:07,650 --> 00:18:13,680
the CMS so currently we have use our

00:18:11,160 --> 00:18:16,140
local but I mean where should we drop

00:18:13,680 --> 00:18:18,420
files using puppet on the USR or user

00:18:16,140 --> 00:18:21,720
local where should we place system V

00:18:18,420 --> 00:18:25,020
units using puppet under ATC on or under

00:18:21,720 --> 00:18:31,980
/ lib or a third location so that's also

00:18:25,020 --> 00:18:33,900
open to debate I think moving on from

00:18:31,980 --> 00:18:39,570
managing configuration to managing

00:18:33,900 --> 00:18:42,960
packages as I said we're using mostly

00:18:39,570 --> 00:18:45,420
that's probably more than 99% Debian

00:18:42,960 --> 00:18:48,480
packages from Debian stable as they are

00:18:45,420 --> 00:18:51,120
and a few from backports and for the

00:18:48,480 --> 00:18:53,370
rest 1% it's either not in Debian it's

00:18:51,120 --> 00:18:56,550
too old in Debian or it is site-specific

00:18:53,370 --> 00:19:00,660
and not worth including Debian for the

00:18:56,550 --> 00:19:02,670
99% we use a squid proxy as a cache so

00:19:00,660 --> 00:19:05,070
that we don't hammer the local mirrors

00:19:02,670 --> 00:19:06,870
and for the 1% we have a local

00:19:05,070 --> 00:19:08,910
repository using the repair Pro of

00:19:06,870 --> 00:19:11,730
course we try to minimize the Delta by

00:19:08,910 --> 00:19:13,410
contributing wherever possible but still

00:19:11,730 --> 00:19:16,290
there's always a set of packages that we

00:19:13,410 --> 00:19:19,470
have to maintain outside the bin so

00:19:16,290 --> 00:19:21,300
unlike the Debian archive we need

00:19:19,470 --> 00:19:24,120
multiple versions of the same package

00:19:21,300 --> 00:19:27,830
for each distribution some examples

00:19:24,120 --> 00:19:31,170
include mostly clustered services or

00:19:27,830 --> 00:19:33,210
databases where you want to run one

00:19:31,170 --> 00:19:36,800
version one plaster and another version

00:19:33,210 --> 00:19:38,310
and another cluster for some reason so

00:19:36,800 --> 00:19:40,180
there you go

00:19:38,310 --> 00:19:42,010
MongoDB elasticsearch

00:19:40,180 --> 00:19:46,270
and sure there are a couple of them more

00:19:42,010 --> 00:19:48,040
but I'm forgetting right now and another

00:19:46,270 --> 00:19:50,230
difference is that we also need some

00:19:48,040 --> 00:19:50,800
thin partial distributions for certain

00:19:50,230 --> 00:19:53,290
needs

00:19:50,800 --> 00:19:58,030
for example we are rebuilding Ruby and

00:19:53,290 --> 00:20:01,030
Lib curl against OpenSSL 102 because of

00:19:58,030 --> 00:20:04,360
101 has broken alternate paths checking

00:20:01,030 --> 00:20:08,230
and it turns out there are some SS some

00:20:04,360 --> 00:20:11,080
cross signed routes yeas out there that

00:20:08,230 --> 00:20:15,310
break with break break the chains when

00:20:11,080 --> 00:20:16,810
tried to verify it with 101 and the

00:20:15,310 --> 00:20:19,780
other cases for nginx and haproxy

00:20:16,810 --> 00:20:22,090
running on our front end servers where

00:20:19,780 --> 00:20:26,950
they have to be rebuilt against 102 to

00:20:22,090 --> 00:20:28,300
get a LP and support for HTTP 2 so we

00:20:26,950 --> 00:20:31,060
don't want to rebuild everything

00:20:28,300 --> 00:20:35,470
everything against open SSL 102 we don't

00:20:31,060 --> 00:20:37,420
want to ship open SSL 1 or 2 to every

00:20:35,470 --> 00:20:40,420
system so we have to create small

00:20:37,420 --> 00:20:43,660
partial distributions only for the nodes

00:20:40,420 --> 00:20:46,990
affected we do this by doing heavy use

00:20:43,660 --> 00:20:49,060
of components so we don't actually

00:20:46,990 --> 00:20:51,370
create distributions we have only two

00:20:49,060 --> 00:20:53,950
distributions and we create calm profile

00:20:51,370 --> 00:20:57,610
components mostly which are then tied to

00:20:53,950 --> 00:21:00,310
specific puppet classes and we also use

00:20:57,610 --> 00:21:02,140
some up references magic to boost the

00:21:00,310 --> 00:21:05,410
preference of the profile components we

00:21:02,140 --> 00:21:08,430
ate the rest so when deploying a new

00:21:05,410 --> 00:21:12,280
package of the production it's not like

00:21:08,430 --> 00:21:14,170
the usual Debbie and upload to unstable

00:21:12,280 --> 00:21:19,120
thing it's more like stable release

00:21:14,170 --> 00:21:21,220
management so you don't want to deploy a

00:21:19,120 --> 00:21:22,540
new package or an updated package to the

00:21:21,220 --> 00:21:24,790
whole fleet you want to do that

00:21:22,540 --> 00:21:26,770
gradually and in a controlled way so we

00:21:24,790 --> 00:21:29,880
use two main distributions we have Jesse

00:21:26,770 --> 00:21:33,400
screws and Jesse's could post updates

00:21:29,880 --> 00:21:35,770
inspired by stable proposed updates of

00:21:33,400 --> 00:21:38,970
course so both distributions are

00:21:35,770 --> 00:21:41,530
configured on all machines they have

00:21:38,970 --> 00:21:43,360
different apt priorities that's nine

00:21:41,530 --> 00:21:46,410
hundred and forty four Jesse screws is

00:21:43,360 --> 00:21:49,630
always preferred versus minus one for

00:21:46,410 --> 00:21:52,490
the proposed updates so proposed updates

00:21:49,630 --> 00:21:57,920
must be installed from

00:21:52,490 --> 00:22:00,950
manually explicitly and we also boost

00:21:57,920 --> 00:22:04,040
the profile packages by another 10

00:22:00,950 --> 00:22:06,890
points over main so all our packages

00:22:04,040 --> 00:22:09,380
enter the proposed updates and then we

00:22:06,890 --> 00:22:12,020
do test them deploy them to certain

00:22:09,380 --> 00:22:14,660
systems by hand and after the quarantine

00:22:12,020 --> 00:22:19,690
period is over we just copy them using

00:22:14,660 --> 00:22:19,690
retro copy to the stable distribution

00:22:20,110 --> 00:22:26,630
when it comes building now these

00:22:22,520 --> 00:22:29,090
packages the thing is that they're too

00:22:26,630 --> 00:22:31,100
small and too few packages and only one

00:22:29,090 --> 00:22:32,930
architecture it doesn't really weren't

00:22:31,100 --> 00:22:35,450
setting up a build infrastructure so

00:22:32,930 --> 00:22:38,480
what we do is we run P builder on our

00:22:35,450 --> 00:22:41,510
workstations and in order to get things

00:22:38,480 --> 00:22:44,590
right and make builds as consistent as

00:22:41,510 --> 00:22:48,800
possible we have created our own

00:22:44,590 --> 00:22:51,140
wrappers around people there we actually

00:22:48,800 --> 00:22:53,420
use a couple of scripts to manage the

00:22:51,140 --> 00:22:56,600
truths to create and keep them up to

00:22:53,420 --> 00:22:58,340
date and also ship some custom

00:22:56,600 --> 00:23:00,260
configuration and hooks that ensure that

00:22:58,340 --> 00:23:01,760
things built for a profile component

00:23:00,260 --> 00:23:05,000
will actually use the correct build

00:23:01,760 --> 00:23:07,580
dependencies when you build Ruby against

00:23:05,000 --> 00:23:11,060
lip SSL 102 you want it to actually pick

00:23:07,580 --> 00:23:13,280
that dependency so then we have a

00:23:11,060 --> 00:23:15,860
wraparound PD build which builds

00:23:13,280 --> 00:23:17,570
packages and enforces a correct

00:23:15,860 --> 00:23:20,240
distribution which is always proposed

00:23:17,570 --> 00:23:22,790
updates and also captures the component

00:23:20,240 --> 00:23:24,920
from for which the package was built in

00:23:22,790 --> 00:23:29,300
an additional field in the changes file

00:23:24,920 --> 00:23:31,220
we can then pick it up with a wrapper

00:23:29,300 --> 00:23:33,830
around repre processing coming and place

00:23:31,220 --> 00:23:39,860
it in the correct component of the

00:23:33,830 --> 00:23:42,010
repository so deploying security updates

00:23:39,860 --> 00:23:44,990
security updates are hard actually

00:23:42,010 --> 00:23:47,630
keeping more than 300 machines

00:23:44,990 --> 00:23:49,820
up-to-date is difficult for workstations

00:23:47,630 --> 00:23:51,830
there is the lovely untended upgrade it

00:23:49,820 --> 00:23:53,920
solves every problem because

00:23:51,830 --> 00:23:56,330
workstations are rebooted once a day and

00:23:53,920 --> 00:23:59,120
we don't really care they don't run any

00:23:56,330 --> 00:24:01,400
services it's perfectly fine but servers

00:23:59,120 --> 00:24:03,380
are a different story first of all we

00:24:01,400 --> 00:24:04,650
want a gradual rollout we don't want a

00:24:03,380 --> 00:24:08,640
regression to

00:24:04,650 --> 00:24:10,620
just kilowatt machines instantly and we

00:24:08,640 --> 00:24:12,660
also don't want any unwanted service

00:24:10,620 --> 00:24:16,500
restarts so we can't rely on automatic

00:24:12,660 --> 00:24:18,390
installations currently we have a custom

00:24:16,500 --> 00:24:21,390
solution based on puppet server Mon and

00:24:18,390 --> 00:24:23,340
readies ceremony is actually a piece of

00:24:21,390 --> 00:24:25,020
free software that was written in my

00:24:23,340 --> 00:24:30,120
previous workplace

00:24:25,020 --> 00:24:32,520
it's a dashboard that displays

00:24:30,120 --> 00:24:38,700
information puppet knows about the host

00:24:32,520 --> 00:24:40,320
the host it manages so part of that is

00:24:38,700 --> 00:24:45,750
that after every puppet run all

00:24:40,320 --> 00:24:47,160
available updates all my package updates

00:24:45,750 --> 00:24:49,290
that are available on a given machine

00:24:47,160 --> 00:24:51,410
are posted back to server moans so

00:24:49,290 --> 00:24:54,300
there's a central database that knows

00:24:51,410 --> 00:24:57,900
which packages need an upgrade on which

00:24:54,300 --> 00:25:00,090
machine and vice versa no this is all

00:24:57,900 --> 00:25:01,980
displayed on central - port with a handy

00:25:00,090 --> 00:25:06,570
nice padlock next to security updates

00:25:01,980 --> 00:25:08,490
and then what we actually do is that we

00:25:06,570 --> 00:25:13,170
have a system to manually approve these

00:25:08,490 --> 00:25:16,230
updates we call this staging so we have

00:25:13,170 --> 00:25:19,500
a CLI tool which can filter on packages

00:25:16,230 --> 00:25:23,040
by name it supports globbing it can

00:25:19,500 --> 00:25:25,290
filter by hosts also and by whether it's

00:25:23,040 --> 00:25:27,840
a security update or not and what it

00:25:25,290 --> 00:25:30,690
actually does is that it's just places a

00:25:27,840 --> 00:25:32,850
keen Redis and says this house should

00:25:30,690 --> 00:25:35,100
get these these this and that package

00:25:32,850 --> 00:25:37,410
updated so on the next puppet run every

00:25:35,100 --> 00:25:40,500
stage the update turns into an app get

00:25:37,410 --> 00:25:43,530
install - - no removed as - keep old

00:25:40,500 --> 00:25:49,140
config blah blah blah for every package

00:25:43,530 --> 00:25:50,790
and so this happens

00:25:49,140 --> 00:25:52,650
I mean puppet runs every 20 minutes in

00:25:50,790 --> 00:25:55,860
our infrastructure so this means that if

00:25:52,650 --> 00:25:57,330
you globally whitelist an update for the

00:25:55,860 --> 00:26:00,240
whole infrastructure it will be

00:25:57,330 --> 00:26:04,770
gradually low rolled out during the next

00:26:00,240 --> 00:26:07,740
20 minutes and once a package has been

00:26:04,770 --> 00:26:09,030
installed then puppet reports back to

00:26:07,740 --> 00:26:10,470
the puppet master and we have a report

00:26:09,030 --> 00:26:12,270
processor there that deletes

00:26:10,470 --> 00:26:14,690
successfully installed updates from

00:26:12,270 --> 00:26:18,540
Redis so they won't be retried or

00:26:14,690 --> 00:26:22,110
notifies us if app get install exited

00:26:18,540 --> 00:26:27,870
the non-zero value for any reason so the

00:26:22,110 --> 00:26:33,060
system has worked well enough it we

00:26:27,870 --> 00:26:36,030
still don't handle replaced libraries we

00:26:33,060 --> 00:26:39,540
do this by hand although now with system

00:26:36,030 --> 00:26:42,380
D it's really easy to find out whether a

00:26:39,540 --> 00:26:45,450
given process ID belongs to a service

00:26:42,380 --> 00:26:46,680
you don't need any heuristics to find if

00:26:45,450 --> 00:26:47,250
it's controlled by an image script

00:26:46,680 --> 00:26:49,200
anymore

00:26:47,250 --> 00:26:53,820
so this is something we will be working

00:26:49,200 --> 00:26:56,550
on in the future and I will also try to

00:26:53,820 --> 00:26:58,380
see if it makes sense and if I can strip

00:26:56,550 --> 00:27:03,200
all the site-specific thing out of this

00:26:58,380 --> 00:27:06,330
and make some kind of stand-alone

00:27:03,200 --> 00:27:09,150
cluster security update manager let's

00:27:06,330 --> 00:27:11,310
say for Debian machines but it's still

00:27:09,150 --> 00:27:14,880
in early stages I mean it works for us

00:27:11,310 --> 00:27:15,930
or 300 machines most of the time I would

00:27:14,880 --> 00:27:18,080
like to have the ability to

00:27:15,930 --> 00:27:23,400
automatically whitelist certain updates

00:27:18,080 --> 00:27:29,180
but it's still work-in-progress so for

00:27:23,400 --> 00:27:31,350
the last part people you won't

00:27:29,180 --> 00:27:33,840
essentially to get your sis admins

00:27:31,350 --> 00:27:36,570
involved why because it's benefit both

00:27:33,840 --> 00:27:39,210
ways it's for them it's for the company

00:27:36,570 --> 00:27:41,640
and for Debian as well the truth is

00:27:39,210 --> 00:27:45,780
there is still a relatively high barrier

00:27:41,640 --> 00:27:48,690
when it comes to contributing even for

00:27:45,780 --> 00:27:52,470
experiences admins most people are

00:27:48,690 --> 00:27:54,150
reluctant to report bugs so another

00:27:52,470 --> 00:27:55,980
thing is that build environments are

00:27:54,150 --> 00:27:58,620
still non-trivial to set up and most

00:27:55,980 --> 00:28:03,000
people will just use the build when they

00:27:58,620 --> 00:28:06,000
first want to rebuild a package with not

00:28:03,000 --> 00:28:08,520
the best results and of course you can't

00:28:06,000 --> 00:28:09,990
rely on every sermon reading the main

00:28:08,520 --> 00:28:12,590
policy on the new or the new maintenance

00:28:09,990 --> 00:28:18,120
guide especially when they are under

00:28:12,590 --> 00:28:20,310
work pressure so question is what can we

00:28:18,120 --> 00:28:23,070
do to lower that barrier I mean as a

00:28:20,310 --> 00:28:26,550
lead or as a senior sis admin you should

00:28:23,070 --> 00:28:29,400
just lead by example you file back

00:28:26,550 --> 00:28:31,440
reports but then you file them yourself

00:28:29,400 --> 00:28:31,890
but at least you keep your siblings in

00:28:31,440 --> 00:28:35,370
the loop

00:28:31,890 --> 00:28:39,150
they see what's going on and you explain

00:28:35,370 --> 00:28:41,370
why you opted for that severity or why

00:28:39,150 --> 00:28:46,020
you use the specific tag or what policy

00:28:41,370 --> 00:28:47,760
issue this was about and get them to

00:28:46,020 --> 00:28:50,910
install things like how can I help

00:28:47,760 --> 00:28:53,880
well these are all trivial steps but

00:28:50,910 --> 00:28:57,180
they tend to help to get people on the

00:28:53,880 --> 00:28:59,610
right track things that we could do in

00:28:57,180 --> 00:29:05,040
Debian I think most of the complaints I

00:28:59,610 --> 00:29:07,190
actually hear about are BTS related the

00:29:05,040 --> 00:29:11,640
usual complaint is that the interfaces

00:29:07,190 --> 00:29:13,620
ugly is inconvenient personally I find

00:29:11,640 --> 00:29:15,210
it pretty convenient that I like the

00:29:13,620 --> 00:29:18,540
email interface but I can understand

00:29:15,210 --> 00:29:21,330
that many people are put off by it so I

00:29:18,540 --> 00:29:25,020
think we should give some effort to get

00:29:21,330 --> 00:29:26,790
things on that front improved a bit at

00:29:25,020 --> 00:29:30,150
least in the search and the interface

00:29:26,790 --> 00:29:32,580
Department and then you're still relying

00:29:30,150 --> 00:29:35,190
on report back by default having a

00:29:32,580 --> 00:29:38,220
working MPI on the system and when your

00:29:35,190 --> 00:29:40,680
admin you will run report back on the

00:29:38,220 --> 00:29:44,070
affected server which might be behind

00:29:40,680 --> 00:29:47,190
three lines of firewalls and even on it

00:29:44,070 --> 00:29:51,570
I don't know when air-gapped Network so

00:29:47,190 --> 00:29:54,120
this really doesn't work we we have to

00:29:51,570 --> 00:29:59,220
find a way to make things easier in that

00:29:54,120 --> 00:30:02,220
front adding an MTA less mode so I don't

00:29:59,220 --> 00:30:04,940
know be that SMT being directly to

00:30:02,220 --> 00:30:07,620
Debian org servers might work or

00:30:04,940 --> 00:30:10,650
creating an alternate transport for bug

00:30:07,620 --> 00:30:13,770
reports might also work these are just a

00:30:10,650 --> 00:30:15,750
couple of ideas and I mean it's just

00:30:13,770 --> 00:30:21,270
something that we at some point should

00:30:15,750 --> 00:30:23,490
discuss so I'm sure there's a lot we can

00:30:21,270 --> 00:30:25,230
do here these are just a couple of

00:30:23,490 --> 00:30:27,870
suggestions so I'd be glad if anybody

00:30:25,230 --> 00:30:32,460
has any more or anybody would like to

00:30:27,870 --> 00:30:35,040
discuss after this presentation so a

00:30:32,460 --> 00:30:38,720
couple of links this is Sarah Mona was

00:30:35,040 --> 00:30:41,670
talking about and the other one is a

00:30:38,720 --> 00:30:44,130
link to Vincent Bernards post about

00:30:41,670 --> 00:30:45,860
local corporate repositories which was

00:30:44,130 --> 00:30:50,420
the basis on

00:30:45,860 --> 00:30:50,420
for the design of our own repositories

00:30:50,900 --> 00:30:57,810
so I guess we're a bit early

00:30:55,110 --> 00:31:06,300
yes there's time for a couple of

00:30:57,810 --> 00:31:13,710
questions thank you very much then

00:31:06,300 --> 00:31:15,660
questions what's your solution to avoid

00:31:13,710 --> 00:31:20,790
our start on packaging plates

00:31:15,660 --> 00:31:24,540
- was that service or starting package

00:31:20,790 --> 00:31:29,100
upgrades okay so we don't have a single

00:31:24,540 --> 00:31:32,250
solution for that what we basically do

00:31:29,100 --> 00:31:34,530
is that we do the updates to affected

00:31:32,250 --> 00:31:36,360
packages manually completely manually as

00:31:34,530 --> 00:31:43,440
in SSA to the machine and install the

00:31:36,360 --> 00:31:45,000
package at a convenient time this thing

00:31:43,440 --> 00:31:46,670
is getting a lot more difficult when

00:31:45,000 --> 00:31:48,930
you're dealing with clustered services

00:31:46,670 --> 00:31:51,750
for example when you have elasticsearch

00:31:48,930 --> 00:31:53,760
you don't want even even if it was

00:31:51,750 --> 00:31:55,200
acceptable to restart elasticsearch on a

00:31:53,760 --> 00:31:58,530
single node there are constraints

00:31:55,200 --> 00:32:01,020
between different nodes so you can't go

00:31:58,530 --> 00:32:03,090
and restart two nodes in the cluster if

00:32:01,020 --> 00:32:05,700
you have only two replicas of each

00:32:03,090 --> 00:32:07,230
charge because at some point you will

00:32:05,700 --> 00:32:11,850
have one shard that will be completely

00:32:07,230 --> 00:32:17,910
lost so our solution for the time being

00:32:11,850 --> 00:32:24,090
is do this manually and we do have some

00:32:17,910 --> 00:32:28,730
policy our CD harness in place but not

00:32:24,090 --> 00:32:30,990
for upgrades for different kind of uses

00:32:28,730 --> 00:32:33,030
but clustered services are really

00:32:30,990 --> 00:32:36,870
problem that respect I mean even if you

00:32:33,030 --> 00:32:39,390
solve it at the Machine level

00:32:36,870 --> 00:32:44,340
you then have to solve it of class level

00:32:39,390 --> 00:32:46,590
so something like a hook in the packages

00:32:44,340 --> 00:32:49,310
transaction at the point where it should

00:32:46,590 --> 00:32:53,070
run the pre in store the posting script

00:32:49,310 --> 00:32:55,320
would make things a lot easier so if you

00:32:53,070 --> 00:32:57,240
could actually have a policy layer that

00:32:55,320 --> 00:32:59,960
will say if it starts acceptable or not

00:32:57,240 --> 00:32:59,960
at this point

00:33:00,190 --> 00:33:08,620
would make things a lot easier other

00:33:06,230 --> 00:33:08,620
questions

00:33:13,520 --> 00:33:17,929
it's not really a question but I wanted

00:33:15,710 --> 00:33:20,419
to point out that report back already

00:33:17,929 --> 00:33:24,200
supports an email directly to a Devon

00:33:20,419 --> 00:33:27,169
doctor on the submission port and they

00:33:24,200 --> 00:33:30,590
offer this the configuration at the end

00:33:27,169 --> 00:33:33,440
mm-hmm by default right it's not well

00:33:30,590 --> 00:33:34,640
report Brooke has no same default

00:33:33,440 --> 00:33:37,130
configuration when you start it the

00:33:34,640 --> 00:33:39,110
first time we it does yes silly

00:33:37,130 --> 00:33:41,510
questions yeah and maybe it should be

00:33:39,110 --> 00:33:44,059
the before with it yeah I know I mean I

00:33:41,510 --> 00:33:45,830
mean I first one report by the long time

00:33:44,059 --> 00:33:54,799
ago and everything figuration ever since

00:33:45,830 --> 00:34:01,820
so okay thank you how the question no

00:33:54,799 --> 00:34:05,179
questions there was the last minute

00:34:01,820 --> 00:34:07,669
question in your all Deb in work station

00:34:05,179 --> 00:34:10,580
environment what do you use for internal

00:34:07,669 --> 00:34:12,500
communication is IRC years things like

00:34:10,580 --> 00:34:13,730
that you have something entirely free

00:34:12,500 --> 00:34:16,310
software that works across your

00:34:13,730 --> 00:34:19,599
organization well we used to have IRC

00:34:16,310 --> 00:34:23,109
and then we had a job a server as well

00:34:19,599 --> 00:34:25,460
currently we're using slack because

00:34:23,109 --> 00:34:28,550
that's more convenient for non-technical

00:34:25,460 --> 00:34:32,810
users so and there are also people with

00:34:28,550 --> 00:34:34,760
some people with Macs and some very few

00:34:32,810 --> 00:34:38,089
people with Windows workstation so that

00:34:34,760 --> 00:34:40,159
it was becoming too diverse and people

00:34:38,089 --> 00:34:43,490
were not accustomed to IRC but we were

00:34:40,159 --> 00:34:46,869
using IRC for a long time you just got

00:34:43,490 --> 00:34:46,869
the IRC but with gifts now

00:34:56,210 --> 00:35:00,710
are you paying any attention to unfix

00:34:58,910 --> 00:35:03,380
security issues and how they want to

00:35:00,710 --> 00:35:05,030
affect you - sorry

00:35:03,380 --> 00:35:09,970
security issues that haven't been fixed

00:35:05,030 --> 00:35:09,970
yet that haven't been fixed yet so

00:35:10,599 --> 00:35:16,280
there's a luck adjacent fade from

00:35:14,240 --> 00:35:21,910
security track it there you know yeah I

00:35:16,280 --> 00:35:23,780
know at some point I started writing an

00:35:21,910 --> 00:35:25,790
integration a bridge between the

00:35:23,780 --> 00:35:29,450
security tracker and server moon so that

00:35:25,790 --> 00:35:36,740
you could have a list of which CVS

00:35:29,450 --> 00:35:38,180
effect which machine it didn't get far I

00:35:36,740 --> 00:35:40,130
mean go to a point where I got

00:35:38,180 --> 00:35:42,770
everything to a database and I could use

00:35:40,130 --> 00:35:46,310
it on my own then I had to do some real

00:35:42,770 --> 00:35:47,570
work so like every week in project just

00:35:46,310 --> 00:35:49,010
for behind but it's something that I

00:35:47,570 --> 00:35:53,030
really like to do

00:35:49,010 --> 00:35:54,859
I mean honestly we've solved things at

00:35:53,030 --> 00:35:58,849
the Machine level pretty well with

00:35:54,859 --> 00:36:01,609
Debian now everything is expanding so

00:35:58,849 --> 00:36:04,880
fast that I think we have to provide

00:36:01,609 --> 00:36:08,089
tools to at least provide some deep

00:36:04,880 --> 00:36:12,050
insight into big clusters running Debian

00:36:08,089 --> 00:36:15,310
and getting things integrated with

00:36:12,050 --> 00:36:19,869
security track here or you DeeDee is

00:36:15,310 --> 00:36:22,820
really I mean for me it's a way forward

00:36:19,869 --> 00:36:25,099
but this also needs work on the Debian

00:36:22,820 --> 00:36:29,740
side I mean right now security tracker

00:36:25,099 --> 00:36:32,089
just exports a huge JSON which is

00:36:29,740 --> 00:36:36,560
generated every time there's no easy way

00:36:32,089 --> 00:36:40,640
as far as I know to query things like

00:36:36,560 --> 00:36:48,290
incrementally so but I think it's

00:36:40,640 --> 00:36:50,589
something worth investigating so yeah we

00:36:48,290 --> 00:36:52,849
do check when we know that something is

00:36:50,589 --> 00:36:55,520
actually important we do check the

00:36:52,849 --> 00:36:58,670
security tracker but it's not part of a

00:36:55,520 --> 00:37:01,609
day-to-day workflow right now so the

00:36:58,670 --> 00:37:03,820
day-to-day workflow is just so updates

00:37:01,609 --> 00:37:11,450
that are already in

00:37:03,820 --> 00:37:13,540
security okay thank you very much thank

00:37:11,450 --> 00:37:13,540

YouTube URL: https://www.youtube.com/watch?v=_ZfCaHABIFM


