Title: Less passwords, more security: mass administration of MariaDB servers with socket authentication
Publication date: 2017-12-05
Playlist: DebConf 16
Description: 
	by Otto Kekäläinen

At: Debconf 16 video RSS feed
https://debconf16.debconf.org/
Room: Menzies 9
Scheduled start: 2016-07-05 16:15:00
Captions: 
	00:00:00,030 --> 00:00:06,899
right hello everybody I'm I'm Otto from

00:00:04,020 --> 00:00:09,480
the marubi foundation and I'm here to

00:00:06,899 --> 00:00:13,139
tell you about some basic security

00:00:09,480 --> 00:00:15,920
issues related to Maria dB I find it

00:00:13,139 --> 00:00:18,270
that most of the time when there are

00:00:15,920 --> 00:00:21,180
security breaches on a massive scale

00:00:18,270 --> 00:00:24,660
the most of the time are related to

00:00:21,180 --> 00:00:26,939
people doing the basics wrong so now I'm

00:00:24,660 --> 00:00:31,040
going through the basics what you should

00:00:26,939 --> 00:00:34,860
do if you maintain a my really be

00:00:31,040 --> 00:00:37,410
database and there are a few few cool

00:00:34,860 --> 00:00:41,010
things that are new which you should

00:00:37,410 --> 00:00:44,989
know about and mainly circuit

00:00:41,010 --> 00:00:47,989
authentication I'm also going to touch

00:00:44,989 --> 00:00:53,610
about the other basic things everybody

00:00:47,989 --> 00:00:55,770
should do and the nice thing about this

00:00:53,610 --> 00:00:59,670
is that socket authentication is by

00:00:55,770 --> 00:01:01,469
default enabled in in Debian so if you

00:00:59,670 --> 00:01:03,840
install and you may really be in Debian

00:01:01,469 --> 00:01:05,159
it will be using a socket authentication

00:01:03,840 --> 00:01:11,909
directly you don't need to do anything

00:01:05,159 --> 00:01:14,460
special and also for example the

00:01:11,909 --> 00:01:17,490
settings on what connections it listens

00:01:14,460 --> 00:01:20,400
to are secure by default in Debian but

00:01:17,490 --> 00:01:23,490
still you might want to latch them if

00:01:20,400 --> 00:01:26,310
you're in if you have a setup where you

00:01:23,490 --> 00:01:36,229
have remote connections so it's good to

00:01:26,310 --> 00:01:36,229
know the basics about them so

00:01:36,610 --> 00:01:44,080
let's first check how many of you

00:01:39,240 --> 00:01:52,300
administer Murray DB service all right

00:01:44,080 --> 00:01:55,120
cool so you you know that my Murray DB

00:01:52,300 --> 00:01:58,390
is a fork from MySQL made by the

00:01:55,120 --> 00:02:03,720
original authors of MySQL namely 1tb

00:01:58,390 --> 00:02:03,720
Dennis who wrote who started MySQL and

00:02:03,870 --> 00:02:11,410
then after Oracle acquired son and got

00:02:07,780 --> 00:02:15,130
my skew of that way then Monty decided

00:02:11,410 --> 00:02:17,320
to fork it so it's now with using the

00:02:15,130 --> 00:02:19,480
name Maria DB but it couldn't use the

00:02:17,320 --> 00:02:22,930
name muscular because Oracle was the

00:02:19,480 --> 00:02:26,110
trademark for it and the fork happened

00:02:22,930 --> 00:02:29,620
at the five five versions so my SQ v 5m

00:02:26,110 --> 00:02:31,930
r da five five are very close to each

00:02:29,620 --> 00:02:34,720
other and then for every really release

00:02:31,930 --> 00:02:37,360
the features that diverges a little bit

00:02:34,720 --> 00:02:41,140
but all the basic things stay the same

00:02:37,360 --> 00:02:43,750
and there's a company called Maria DB

00:02:41,140 --> 00:02:46,300
that provides commercial services and

00:02:43,750 --> 00:02:48,310
there's also a foundation and I am from

00:02:46,300 --> 00:02:50,709
the foundation and the Foundation's

00:02:48,310 --> 00:02:55,050
tasks just take care of the open source

00:02:50,709 --> 00:03:01,570
project that it can't be sold or

00:02:55,050 --> 00:03:04,720
anything harmful to its success and and

00:03:01,570 --> 00:03:08,290
the foundation runs on donations and we

00:03:04,720 --> 00:03:10,720
have many big companies who sponsored

00:03:08,290 --> 00:03:13,480
the foundation so you can we can do what

00:03:10,720 --> 00:03:17,280
we do we are seven people and from the

00:03:13,480 --> 00:03:21,040
foundation we have here me and Ian jib

00:03:17,280 --> 00:03:23,860
there and and Sergey who had a talk

00:03:21,040 --> 00:03:31,050
earlier today he's there and he's he's

00:03:23,860 --> 00:03:34,510
working for the corporation all right so

00:03:31,050 --> 00:03:36,610
if you've ever installed mysql or

00:03:34,510 --> 00:03:40,720
mariadb on debian i'm sure you've seen

00:03:36,610 --> 00:03:43,239
the screen so when you do up get install

00:03:40,720 --> 00:03:46,060
it will ask your root password it yeah

00:03:43,239 --> 00:03:49,530
you need to set it traditionally is this

00:03:46,060 --> 00:03:55,990
familiar to you yes

00:03:49,530 --> 00:03:59,500
so when you have lots of hosts to

00:03:55,990 --> 00:04:02,770
maintain then this becomes a problem

00:03:59,500 --> 00:04:04,810
because you have a first you have some

00:04:02,770 --> 00:04:07,450
credentials to the host itself so that

00:04:04,810 --> 00:04:09,490
you can get through SSH or something

00:04:07,450 --> 00:04:12,130
else to the host and then you have a

00:04:09,490 --> 00:04:15,160
second set of credentials to get into

00:04:12,130 --> 00:04:18,459
the database and the more hosts you have

00:04:15,160 --> 00:04:22,780
the more and more passwords you have for

00:04:18,459 --> 00:04:26,130
SSH you maybe use SSH keys so that

00:04:22,780 --> 00:04:29,260
solves it you don't need a root password

00:04:26,130 --> 00:04:31,390
but for my sq then when you

00:04:29,260 --> 00:04:32,860
traditionally have a root account and

00:04:31,390 --> 00:04:39,460
the root password and you need to manage

00:04:32,860 --> 00:04:42,810
that password somehow and then if you

00:04:39,460 --> 00:04:45,310
have tens or hundreds of thousands of

00:04:42,810 --> 00:04:48,610
hosts then you use some kind of

00:04:45,310 --> 00:04:52,300
automation like puppet or unstably or

00:04:48,610 --> 00:04:57,040
salt or chef or whatever and here's an

00:04:52,300 --> 00:05:00,220
example from unsimilar from a Galera

00:04:57,040 --> 00:05:03,640
cluster and that you actually need to

00:05:00,220 --> 00:05:06,610
sit set three different passwords you

00:05:03,640 --> 00:05:10,540
need to set one for the cluster root

00:05:06,610 --> 00:05:13,570
password and you need to set one for the

00:05:10,540 --> 00:05:16,479
Debian maintainer user and then you need

00:05:13,570 --> 00:05:20,410
to set one password for the account that

00:05:16,479 --> 00:05:22,390
is done is used to make backups from the

00:05:20,410 --> 00:05:24,310
data so you need to manage three

00:05:22,390 --> 00:05:27,100
passwords and then you have have all

00:05:24,310 --> 00:05:28,840
this configuration files that go on

00:05:27,100 --> 00:05:32,169
every host and in that configuration

00:05:28,840 --> 00:05:33,820
file are these passwords and those

00:05:32,169 --> 00:05:36,580
configuration files are basically

00:05:33,820 --> 00:05:40,360
protected only by UNIX file permissions

00:05:36,580 --> 00:05:45,840
so it's a kind of a brittle little thing

00:05:40,360 --> 00:05:48,460
and not not only is the risk of of

00:05:45,840 --> 00:05:51,820
leaking the passwords in this kind of

00:05:48,460 --> 00:05:54,190
situation you also have the problem that

00:05:51,820 --> 00:05:56,290
the passwords might get out of sync if

00:05:54,190 --> 00:05:58,950
you change the password on your system

00:05:56,290 --> 00:06:02,050
then you need to figure out how to

00:05:58,950 --> 00:06:02,950
update the configuration everywhere to

00:06:02,050 --> 00:06:07,630
get the correct

00:06:02,950 --> 00:06:09,040
- word up there so all of this is and

00:06:07,630 --> 00:06:12,010
then of course you have this all these

00:06:09,040 --> 00:06:14,380
Angela scripts or puppet or whatever and

00:06:12,010 --> 00:06:16,000
you have that in some git repository and

00:06:14,380 --> 00:06:18,280
you can't have passwords in that git

00:06:16,000 --> 00:06:20,800
repository maybe maybe you have maybe

00:06:18,280 --> 00:06:23,380
not but if you don't have then you have

00:06:20,800 --> 00:06:25,870
some kind of secrets management that

00:06:23,380 --> 00:06:28,330
then does some lookups or something into

00:06:25,870 --> 00:06:32,020
a separate place where the secrets are

00:06:28,330 --> 00:06:35,530
so all of this suddenly makes everything

00:06:32,020 --> 00:06:40,560
quite complex to manage how many of you

00:06:35,530 --> 00:06:51,670
use unzila to deploy marilla be hosts

00:06:40,560 --> 00:06:54,220
how what puppet chef salt alright so if

00:06:51,670 --> 00:06:56,920
you go to github and for example google

00:06:54,220 --> 00:07:00,460
for mysql password you will notice

00:06:56,920 --> 00:07:02,950
there's a lot of unzip blend salt and

00:07:00,460 --> 00:07:04,870
whatever files that people have

00:07:02,950 --> 00:07:07,390
committed to the version control and

00:07:04,870 --> 00:07:09,220
then some of them might be real

00:07:07,390 --> 00:07:12,100
passwords and some some we're not but

00:07:09,220 --> 00:07:13,990
anyway there's a risk that you

00:07:12,100 --> 00:07:15,460
accidentally leak your password when

00:07:13,990 --> 00:07:18,390
it's part of the configuration and the

00:07:15,460 --> 00:07:21,460
configuration is managed

00:07:18,390 --> 00:07:23,950
so it's um reporting in some repository

00:07:21,460 --> 00:07:25,540
which maybe was a secret initially but

00:07:23,950 --> 00:07:31,750
somebody accidentally published it or

00:07:25,540 --> 00:07:37,630
something like that how many of you use

00:07:31,750 --> 00:07:40,780
docker one all right so have you are you

00:07:37,630 --> 00:07:42,940
familiar with this this pattern that in

00:07:40,780 --> 00:07:45,760
docker you send in as environment

00:07:42,940 --> 00:07:51,280
variables the password yeah you're

00:07:45,760 --> 00:07:53,410
whipping how secure is it for example it

00:07:51,280 --> 00:07:56,260
will be visible in the process list on

00:07:53,410 --> 00:07:58,860
the host and as it is in the common line

00:07:56,260 --> 00:08:01,330
it will be in the bash history so of

00:07:58,860 --> 00:08:04,720
course it means that you need to have

00:08:01,330 --> 00:08:07,360
access to the host machine but anyway

00:08:04,720 --> 00:08:11,940
it's just more and more places where the

00:08:07,360 --> 00:08:11,940
password password can potentially leak

00:08:13,279 --> 00:08:19,519
so there's lots of problems related to

00:08:15,769 --> 00:08:22,329
password management you need to design

00:08:19,519 --> 00:08:27,949
systems how to keep the secrets and

00:08:22,329 --> 00:08:31,399
configuration separately and and and

00:08:27,949 --> 00:08:33,909
against leaks you need you are afraid

00:08:31,399 --> 00:08:36,829
that the password might leak you should

00:08:33,909 --> 00:08:40,550
change the password maybe once a year or

00:08:36,829 --> 00:08:42,560
something like that and so on so there's

00:08:40,550 --> 00:08:46,370
a lot of inconvenience related to that

00:08:42,560 --> 00:08:48,829
so good news you don't need to use

00:08:46,370 --> 00:08:54,129
passwords always there are other ways

00:08:48,829 --> 00:08:57,649
you can do the authentication and also

00:08:54,129 --> 00:09:00,439
by the way even if you don't have the

00:08:57,649 --> 00:09:03,439
password to the morally B server but if

00:09:00,439 --> 00:09:07,879
you have root you have anyway access to

00:09:03,439 --> 00:09:10,550
it you can always you can always go

00:09:07,879 --> 00:09:12,379
directly to the files and either delete

00:09:10,550 --> 00:09:14,180
them or copy them somewhere else and

00:09:12,379 --> 00:09:16,819
then open the data so actually the

00:09:14,180 --> 00:09:18,949
password if you have root on the machine

00:09:16,819 --> 00:09:21,829
then the password doesn't actually

00:09:18,949 --> 00:09:24,639
protect anything it's only for useful

00:09:21,829 --> 00:09:24,639
for remote access

00:09:31,350 --> 00:09:44,100
so root on a Debian system anyway has

00:09:36,240 --> 00:09:47,670
access to everything so the goal is to

00:09:44,100 --> 00:09:49,650
eliminate the passwords how many of you

00:09:47,670 --> 00:09:51,900
have noticed that there's this there be

00:09:49,650 --> 00:09:54,090
ended CNF file which has this

00:09:51,900 --> 00:09:55,050
maintenance user and its password in

00:09:54,090 --> 00:09:59,520
clear-text

00:09:55,050 --> 00:10:02,070
yes so for example if there are some

00:09:59,520 --> 00:10:05,430
cron jobs or even every time the init

00:10:02,070 --> 00:10:07,200
script is triggered this is both for

00:10:05,430 --> 00:10:10,260
MySQL and meridia me because of

00:10:07,200 --> 00:10:12,540
historical reasons there is an and

00:10:10,260 --> 00:10:13,890
maintenance account like this so that

00:10:12,540 --> 00:10:16,380
the init script can do certain things

00:10:13,890 --> 00:10:25,230
and there's a place where it can find a

00:10:16,380 --> 00:10:27,630
password so not only that we want to get

00:10:25,230 --> 00:10:29,910
rid of the root password which you as an

00:10:27,630 --> 00:10:32,280
administrator yourself set when you

00:10:29,910 --> 00:10:34,590
install marilla b we also want to get

00:10:32,280 --> 00:10:37,830
rid of this password of this maintenance

00:10:34,590 --> 00:10:41,820
user account which is automatic and most

00:10:37,830 --> 00:10:44,570
people haven't noticed it exists so the

00:10:41,820 --> 00:10:47,460
solution is UNIX socket identification

00:10:44,570 --> 00:10:50,400
so UNIX socket identification is based

00:10:47,460 --> 00:10:53,820
on the fact that if you access your

00:10:50,400 --> 00:10:57,570
Murray DB server not remotely but

00:10:53,820 --> 00:11:00,360
locally you access it via a UNIX socket

00:10:57,570 --> 00:11:01,320
which is basically a file as in UNIX

00:11:00,360 --> 00:11:05,750
everything is a file

00:11:01,320 --> 00:11:08,760
and then that file when you access

00:11:05,750 --> 00:11:14,460
Murrah DB through that file it will see

00:11:08,760 --> 00:11:18,780
what username you have and simply by

00:11:14,460 --> 00:11:23,070
installing this UNIX socket plug in and

00:11:18,780 --> 00:11:25,950
then granting that root on localhost can

00:11:23,070 --> 00:11:28,230
be identified via UNIX circuit you can

00:11:25,950 --> 00:11:31,530
allow that the root can come in without

00:11:28,230 --> 00:11:34,530
giving a password because the MySQL

00:11:31,530 --> 00:11:36,750
daemon will see that it was root who is

00:11:34,530 --> 00:11:42,020
coming in it will see the UNIX user name

00:11:36,750 --> 00:11:44,190
of that user so here are the commands to

00:11:42,020 --> 00:11:47,040
install it

00:11:44,190 --> 00:11:52,140
but on Debian you don't need to do this

00:11:47,040 --> 00:11:54,810
it's done automatically so here's an

00:11:52,140 --> 00:11:57,330
example if you want to get in if you're

00:11:54,810 --> 00:11:58,860
the root user you just type my SQL you

00:11:57,330 --> 00:12:01,950
actually don't need to specify a

00:11:58,860 --> 00:12:13,650
username and it will immediately let you

00:12:01,950 --> 00:12:16,170
in and if you are not root then yeah if

00:12:13,650 --> 00:12:18,570
you are not root you can still with sudo

00:12:16,170 --> 00:12:20,820
get into MySQL because when you'd run

00:12:18,570 --> 00:12:25,500
sudo the UNIX socket will say that this

00:12:20,820 --> 00:12:30,420
is done as the root user but then if you

00:12:25,500 --> 00:12:36,360
are yeah but other users you can't get

00:12:30,420 --> 00:12:38,100
in and also some corner cases that if

00:12:36,360 --> 00:12:42,240
you have socket authentication enabled

00:12:38,100 --> 00:12:44,610
and you give a password it doesn't it

00:12:42,240 --> 00:12:46,860
ignores the password completely and lets

00:12:44,610 --> 00:12:50,150
you invest on it now and the fact that

00:12:46,860 --> 00:12:53,970
it noticed that you are root already and

00:12:50,150 --> 00:12:58,290
it's only for root access so the root

00:12:53,970 --> 00:13:02,900
user cannot enter the database as some

00:12:58,290 --> 00:13:02,900
other user that's the third example here

00:13:04,370 --> 00:13:11,330
does this look convenient to you cool

00:13:13,699 --> 00:13:22,459
all right but there is one drawback that

00:13:16,910 --> 00:13:25,399
how many of you use PHP my admin yeah so

00:13:22,459 --> 00:13:28,040
if you have a if you used to have the

00:13:25,399 --> 00:13:30,709
system that you install a new server and

00:13:28,040 --> 00:13:33,410
you set a root user and the password

00:13:30,709 --> 00:13:36,350
then you can use tools like PHP myadmin

00:13:33,410 --> 00:13:39,230
to log in or you can remotely log in

00:13:36,350 --> 00:13:40,790
anywhere but after you you after you

00:13:39,230 --> 00:13:45,290
start using this UNIX socket

00:13:40,790 --> 00:13:47,839
identification remote connections will

00:13:45,290 --> 00:13:50,629
not work because it's not actually the

00:13:47,839 --> 00:13:55,100
root logging in but it's the PHP process

00:13:50,629 --> 00:13:59,660
logging in so MySQL won't let you let

00:13:55,100 --> 00:14:02,720
the PHP process access the database so

00:13:59,660 --> 00:14:05,959
this is the drawback but this is

00:14:02,720 --> 00:14:11,169
actually an intended consequence because

00:14:05,959 --> 00:14:14,779
we want you to have a more secure setup

00:14:11,169 --> 00:14:16,759
and the solution for this PHP my admin

00:14:14,779 --> 00:14:19,639
kind of scenario is that you create a

00:14:16,759 --> 00:14:22,249
separate user with a separate username

00:14:19,639 --> 00:14:24,350
and password and then you can maybe give

00:14:22,249 --> 00:14:26,179
it full access to your database or

00:14:24,350 --> 00:14:33,829
limited access to database which is much

00:14:26,179 --> 00:14:37,160
better all right so the UNIX socket

00:14:33,829 --> 00:14:39,919
authentication plug-in and and the root

00:14:37,160 --> 00:14:41,929
account is installed activated and

00:14:39,919 --> 00:14:46,100
installed by default in Debian since

00:14:41,929 --> 00:14:49,369
they be an 8 and also in recent boon

00:14:46,100 --> 00:14:51,919
tools and this is actually something

00:14:49,369 --> 00:14:54,649
that has been implemented specifically

00:14:51,919 --> 00:14:58,369
in Debian and it's not globally by

00:14:54,649 --> 00:15:00,799
default in all Murray DB installations

00:14:58,369 --> 00:15:03,319
in other distributions but we think that

00:15:00,799 --> 00:15:05,689
we're going to make it default globally

00:15:03,319 --> 00:15:08,539
universally for all Murray Libby

00:15:05,689 --> 00:15:12,279
releases at some point and also note

00:15:08,539 --> 00:15:14,359
that this applies for new installations

00:15:12,279 --> 00:15:17,089
if you already have an existing

00:15:14,359 --> 00:15:20,449
installation you already have set a root

00:15:17,089 --> 00:15:23,749
user password then we won't clear that

00:15:20,449 --> 00:15:26,419
out it will continue to be as it was so

00:15:23,749 --> 00:15:28,600
if you have an existing installation and

00:15:26,419 --> 00:15:31,280
you want to start used

00:15:28,600 --> 00:15:34,700
circuit authentication then you need to

00:15:31,280 --> 00:15:36,920
manually do this and the other things

00:15:34,700 --> 00:15:46,780
that's related to the fact that your old

00:15:36,920 --> 00:15:50,570
password stops working all right yeah so

00:15:46,780 --> 00:15:52,760
this was done the packaging in Debian

00:15:50,570 --> 00:15:55,070
which enables this in post scripts and

00:15:52,760 --> 00:16:00,140
other installation stuff was done by me

00:15:55,070 --> 00:16:02,030
and Daniel black and it's only only

00:16:00,140 --> 00:16:06,310
available in Debian at the moment and

00:16:02,030 --> 00:16:10,900
Ubuntu but not in Red Hat does you sir

00:16:06,310 --> 00:16:14,630
alright so this covers the root case and

00:16:10,900 --> 00:16:16,430
hand root now you have a password less

00:16:14,630 --> 00:16:18,020
root at all your uncie blends out

00:16:16,430 --> 00:16:21,200
scripts and everything you don't need to

00:16:18,020 --> 00:16:24,470
define any passwords there because uncie

00:16:21,200 --> 00:16:27,140
blends out scripts are run as root so

00:16:24,470 --> 00:16:29,510
they automatically have access to the

00:16:27,140 --> 00:16:38,750
MySQL daemon and can do the tricks and

00:16:29,510 --> 00:16:42,080
things they need to do okay so and this

00:16:38,750 --> 00:16:44,600
way every every time you do something on

00:16:42,080 --> 00:16:48,890
the on the local machine as root or

00:16:44,600 --> 00:16:51,500
using sudo it will work but if you need

00:16:48,890 --> 00:16:53,930
remote access or something else then you

00:16:51,500 --> 00:16:57,110
need to learn how to make new accounts

00:16:53,930 --> 00:16:59,690
so and anyway it's pretty obvious that

00:16:57,110 --> 00:17:02,180
if everybody are always using the

00:16:59,690 --> 00:17:04,190
accessing the database as root using the

00:17:02,180 --> 00:17:07,040
root password then there's something

00:17:04,190 --> 00:17:09,350
wrong with your security configuration

00:17:07,040 --> 00:17:13,730
you should definitely think about

00:17:09,350 --> 00:17:15,590
creating accounts for individual users

00:17:13,730 --> 00:17:18,770
or most of the time individual

00:17:15,590 --> 00:17:21,110
applications because their accounts are

00:17:18,770 --> 00:17:24,860
used by all kinds of web applications

00:17:21,110 --> 00:17:27,080
and others so you should create a

00:17:24,860 --> 00:17:29,840
separate database for every application

00:17:27,080 --> 00:17:34,040
and a separate user for every

00:17:29,840 --> 00:17:38,540
application and here is the syntax how

00:17:34,040 --> 00:17:40,430
to do it in SQL and I will post a link

00:17:38,540 --> 00:17:42,800
to my slides on my Twitter

00:17:40,430 --> 00:17:44,900
after this talk so you can check out the

00:17:42,800 --> 00:17:48,880
syntax there or you can just google it

00:17:44,900 --> 00:17:55,190
from the Marais DB knowledge base and

00:17:48,880 --> 00:17:57,800
then if you want to want to be have

00:17:55,190 --> 00:18:00,560
additional security then you could do

00:17:57,800 --> 00:18:03,530
multiple users who have access to the

00:18:00,560 --> 00:18:07,100
same database but some users have less

00:18:03,530 --> 00:18:08,840
privileges and you only grant them the

00:18:07,100 --> 00:18:11,570
privileges that they actually need that

00:18:08,840 --> 00:18:13,700
kind of protects you accounting against

00:18:11,570 --> 00:18:16,880
for example SQL injections and other

00:18:13,700 --> 00:18:22,010
stuff that might be in applications

00:18:16,880 --> 00:18:25,490
despite all other protections and also

00:18:22,010 --> 00:18:27,740
note that when you create a user you you

00:18:25,490 --> 00:18:32,270
define a username and a password but you

00:18:27,740 --> 00:18:35,450
also define where there are where the

00:18:32,270 --> 00:18:37,550
user is coming from so you can allow

00:18:35,450 --> 00:18:40,370
them users that they only come from

00:18:37,550 --> 00:18:43,280
localhost or then you can define some

00:18:40,370 --> 00:18:46,610
network address and if you use this

00:18:43,280 --> 00:18:49,100
present present I'll sign that's a wild

00:18:46,610 --> 00:18:52,460
card it means that anybody from this

00:18:49,100 --> 00:18:56,840
space can access and if you put only a

00:18:52,460 --> 00:18:58,280
wild card after the username then it

00:18:56,840 --> 00:19:02,150
means that the user can access from

00:18:58,280 --> 00:19:04,370
anywhere and then always remember to run

00:19:02,150 --> 00:19:07,490
flush privity privileges so that the

00:19:04,370 --> 00:19:12,320
user tater data is updated after you've

00:19:07,490 --> 00:19:15,320
made changes to the table you can also

00:19:12,320 --> 00:19:17,840
use MySQL admin and other tools to

00:19:15,320 --> 00:19:20,870
manage these users the point here is

00:19:17,840 --> 00:19:23,300
that you should not use root to do

00:19:20,870 --> 00:19:27,500
everything in the database create

00:19:23,300 --> 00:19:33,980
separate databases and and you users for

00:19:27,500 --> 00:19:36,580
each each case alright in 10.1 there are

00:19:33,980 --> 00:19:39,590
more additional security features

00:19:36,580 --> 00:19:41,900
related to this you can for example put

00:19:39,590 --> 00:19:44,900
policies and the passwords that they

00:19:41,900 --> 00:19:47,240
need to be of certain length or certain

00:19:44,900 --> 00:19:48,890
complexity or need to be changed at a

00:19:47,240 --> 00:19:51,500
certain interval and stuff like that if

00:19:48,890 --> 00:19:53,600
you have a if you're you know you

00:19:51,500 --> 00:19:54,200
enterprise use case then you might have

00:19:53,600 --> 00:19:56,480
some secure

00:19:54,200 --> 00:20:01,010
the policy that dictates something so

00:19:56,480 --> 00:20:03,680
you can implement it in Murray DB and in

00:20:01,010 --> 00:20:07,400
this example I'm using the grant command

00:20:03,680 --> 00:20:09,920
to create the user and grant them

00:20:07,400 --> 00:20:13,250
permissions in one single go but there's

00:20:09,920 --> 00:20:16,000
also a create user command available so

00:20:13,250 --> 00:20:18,350
you can do it in separate steps and and

00:20:16,000 --> 00:20:21,470
here's the cool cool thing which is

00:20:18,350 --> 00:20:24,920
available in grant and now also in

00:20:21,470 --> 00:20:29,270
create user in 10.2 onwards that you can

00:20:24,920 --> 00:20:33,890
put that you require SSL so in this

00:20:29,270 --> 00:20:37,370
example this we create a user that is

00:20:33,890 --> 00:20:41,060
allowed to to log to access the database

00:20:37,370 --> 00:20:43,070
over the network and then we also we set

00:20:41,060 --> 00:20:45,050
the password but we also require that it

00:20:43,070 --> 00:20:50,750
must come through an ssl connection so

00:20:45,050 --> 00:20:59,740
this is additional security alright any

00:20:50,750 --> 00:20:59,740
questions about this one all right

00:21:00,320 --> 00:21:07,540
yeah then another thing to restrict

00:21:03,590 --> 00:21:10,400
connections so there are still plenty

00:21:07,540 --> 00:21:13,430
despite all firewalls and everything

00:21:10,400 --> 00:21:16,280
that people should know the basics about

00:21:13,430 --> 00:21:19,430
administering servers the internet seems

00:21:16,280 --> 00:21:22,670
to be full of all kinds of open services

00:21:19,430 --> 00:21:25,150
all around and people are unfortunately

00:21:22,670 --> 00:21:28,790
running way too many MySQL and MariaDB

00:21:25,150 --> 00:21:31,670
servers so that they are listening to

00:21:28,790 --> 00:21:35,210
connections from anywhere that's stupid

00:21:31,670 --> 00:21:37,670
so what we have in Debian is that we

00:21:35,210 --> 00:21:43,450
have this bind address to localhost by

00:21:37,670 --> 00:21:46,370
default so that solves that problem and

00:21:43,450 --> 00:21:49,460
as an administrator you might want to

00:21:46,370 --> 00:21:52,880
change this so there are few things you

00:21:49,460 --> 00:21:55,910
can do there is this option called skip

00:21:52,880 --> 00:21:58,580
networking that will turn off whatever

00:21:55,910 --> 00:22:01,310
is in bind address it will not bind to

00:21:58,580 --> 00:22:04,130
any TCP address at all it will only

00:22:01,310 --> 00:22:07,070
listen on UNIX socket that's the most

00:22:04,130 --> 00:22:09,530
secure option you have but we have this

00:22:07,070 --> 00:22:11,840
bind address to localhost enable because

00:22:09,530 --> 00:22:15,080
that's slightly more compatible in

00:22:11,840 --> 00:22:18,710
certain situations Wonder's TCP

00:22:15,080 --> 00:22:21,440
connections coming from localhost and if

00:22:18,710 --> 00:22:23,510
you want the server to accept

00:22:21,440 --> 00:22:26,480
connections from anywhere then you can

00:22:23,510 --> 00:22:28,550
comment out this bind address and then

00:22:26,480 --> 00:22:31,250
the default will set in which is zero

00:22:28,550 --> 00:22:34,180
zero zero zero so that the daemon

00:22:31,250 --> 00:22:38,470
listens on all interfaces and addresses

00:22:34,180 --> 00:22:42,140
you can also put here certain rules or

00:22:38,470 --> 00:22:45,260
you can do that on your own your

00:22:42,140 --> 00:22:47,540
firewall which firewall one might be a

00:22:45,260 --> 00:22:52,490
better place to restrict certain

00:22:47,540 --> 00:22:58,910
networks and address places right do you

00:22:52,490 --> 00:23:03,500
have questions about this one no this is

00:22:58,910 --> 00:23:05,630
pretty pretty basic but it's just this

00:23:03,500 --> 00:23:07,250
is a very basic thing for anybody who's

00:23:05,630 --> 00:23:10,010
administering servers that you need to

00:23:07,250 --> 00:23:13,750
do this but for some reason people seem

00:23:10,010 --> 00:23:19,160
to forget and neglect even by

00:23:13,750 --> 00:23:23,360
basic so it's good to discuss this

00:23:19,160 --> 00:23:26,000
quickly all right then the second thing

00:23:23,360 --> 00:23:32,740
and this is not enabled by default in

00:23:26,000 --> 00:23:36,080
Debian so just like HTTP is an

00:23:32,740 --> 00:23:39,260
unencrypted connection if you have

00:23:36,080 --> 00:23:41,570
remote connections coming in to a mysql

00:23:39,260 --> 00:23:45,890
or mariadb server they are completely

00:23:41,570 --> 00:23:47,990
unencrypted so most of the time those

00:23:45,890 --> 00:23:50,870
connections are in inside the data

00:23:47,990 --> 00:23:53,570
center and in internal network so it

00:23:50,870 --> 00:23:55,610
doesn't matter but anyway if you have a

00:23:53,570 --> 00:23:57,020
cloud environment and maybe virtual

00:23:55,610 --> 00:23:59,690
servers and you're not quite certain

00:23:57,020 --> 00:24:03,740
where their traffic are routed and so on

00:23:59,690 --> 00:24:06,530
it might be a good idea to enable SSL on

00:24:03,740 --> 00:24:09,470
these connections and after that they

00:24:06,530 --> 00:24:13,910
will be encrypted this is a slightly

00:24:09,470 --> 00:24:17,540
difficult thing to do because you need

00:24:13,910 --> 00:24:20,000
to use open SSL command line or some

00:24:17,540 --> 00:24:23,180
graphical tool like for example tiny CA

00:24:20,000 --> 00:24:27,860
to create your own certificate authority

00:24:23,180 --> 00:24:30,110
and then you need to create a key pair

00:24:27,860 --> 00:24:32,810
for the server and then you need to

00:24:30,110 --> 00:24:35,530
create the key pair for the client and

00:24:32,810 --> 00:24:38,090
then you need to sign this with your

00:24:35,530 --> 00:24:43,420
certificate authority so that they are

00:24:38,090 --> 00:24:47,600
all trusted with within your network so

00:24:43,420 --> 00:24:49,250
this is not so this is what you what it

00:24:47,600 --> 00:24:52,810
looks like when you have all these keys

00:24:49,250 --> 00:24:56,330
set up and enabled on your server and

00:24:52,810 --> 00:24:58,430
this is how it looks like on the client

00:24:56,330 --> 00:25:05,060
configuration on the remote machine

00:24:58,430 --> 00:25:07,180
that's connecting to your server and if

00:25:05,060 --> 00:25:11,330
you're unsure if the connection is

00:25:07,180 --> 00:25:14,600
secured or not you can give this command

00:25:11,330 --> 00:25:17,270
back slash s and it will show the server

00:25:14,600 --> 00:25:23,140
status and there's a line about SSL it

00:25:17,270 --> 00:25:23,140
will tell you if it's in use or not and

00:25:23,840 --> 00:25:31,860
since 10.0 15 marie debbie has had

00:25:29,220 --> 00:25:33,890
support for TLS 1.2 which is the only

00:25:31,860 --> 00:25:35,730
protocol that doesn't have any known

00:25:33,890 --> 00:25:38,250
vulnerabilities at the moment so

00:25:35,730 --> 00:25:42,470
everybody should use it and you can put

00:25:38,250 --> 00:25:46,620
in your configuration this SSL cipher

00:25:42,470 --> 00:25:54,000
line to enforce that TLS 1.2 is always

00:25:46,620 --> 00:25:57,810
used unfortunately for for for licensing

00:25:54,000 --> 00:26:01,020
reasons some people think that open SSL

00:25:57,810 --> 00:26:03,000
is not okay to use with Maria DB in

00:26:01,020 --> 00:26:06,960
Debian even if it's okay to use with

00:26:03,000 --> 00:26:11,610
MySQL so so we don't in Debian have open

00:26:06,960 --> 00:26:17,360
SSL use but we have why a yes

00:26:11,610 --> 00:26:21,660
SSL SSL the security team might want to

00:26:17,360 --> 00:26:23,610
review this if this if this is something

00:26:21,660 --> 00:26:33,200
that we will be allowed to enable in

00:26:23,610 --> 00:26:33,200
Debian right do you have questions about

00:26:33,500 --> 00:26:41,810
securing the connection sir Sergey

00:26:53,469 --> 00:26:59,509
that my skill package is independent use

00:26:56,419 --> 00:27:07,549
OpenSSL yes MySQL packages

00:26:59,509 --> 00:27:09,649
no they don't well we need to see people

00:27:07,549 --> 00:27:11,779
shaking their head I think they are

00:27:09,649 --> 00:27:14,479
using open SSL because they have the

00:27:11,779 --> 00:27:17,179
open SSL exception but the open SSL

00:27:14,479 --> 00:27:20,449
license exception hasn't been explicitly

00:27:17,179 --> 00:27:24,499
given to marie DB so some people who are

00:27:20,449 --> 00:27:27,379
very strict on on interpreting these

00:27:24,499 --> 00:27:30,979
license things said that we can't use it

00:27:27,379 --> 00:27:32,809
formerly b but maybe maybe the security

00:27:30,979 --> 00:27:35,809
team wants to use a bit better here or

00:27:32,809 --> 00:27:39,279
something like that if it should be

00:27:35,809 --> 00:27:39,279
fixed in other ways

00:27:42,879 --> 00:27:50,959
alright then to the last part of my

00:27:47,559 --> 00:27:54,189
security talk so now you have got rid of

00:27:50,959 --> 00:27:58,299
the passwords so your management is

00:27:54,189 --> 00:28:01,699
secure then you have the network

00:27:58,299 --> 00:28:04,699
connections encrypted and you have your

00:28:01,699 --> 00:28:06,289
daemon that it doesn't listen listen to

00:28:04,699 --> 00:28:08,959
connections which are not supposed to

00:28:06,289 --> 00:28:11,949
happen in the first place then what

00:28:08,959 --> 00:28:15,679
remains is encrypting the data at rest

00:28:11,949 --> 00:28:19,309
so what you can do you can for example

00:28:15,679 --> 00:28:21,619
encrypt the entire hard disk that

00:28:19,309 --> 00:28:25,399
protects you against if somebody steals

00:28:21,619 --> 00:28:29,719
the physical hardware or you can do some

00:28:25,399 --> 00:28:31,699
some things in your application to to

00:28:29,719 --> 00:28:34,219
encrypt the data and then only store

00:28:31,699 --> 00:28:36,439
encrypt the data in the database but

00:28:34,219 --> 00:28:39,109
that's kind of stupid because then the

00:28:36,439 --> 00:28:42,019
database doesn't understand what data is

00:28:39,109 --> 00:28:45,739
inside it and it can't for example give

00:28:42,019 --> 00:28:48,019
it in correct order or make or do

00:28:45,739 --> 00:28:53,599
selects on the content or something like

00:28:48,019 --> 00:28:55,729
that so the smart thing to do yeah and

00:28:53,599 --> 00:28:57,769
and if you have encrypted the entire

00:28:55,729 --> 00:29:03,319
hard disk that doesn't protect you in

00:28:57,769 --> 00:29:04,909
any way against against for example if

00:29:03,319 --> 00:29:07,040
you have backups that go to some other

00:29:04,909 --> 00:29:09,230
machine or something like that

00:29:07,040 --> 00:29:11,240
the person administering the database

00:29:09,230 --> 00:29:13,430
can't be sure if all the backups and all

00:29:11,240 --> 00:29:16,010
the hard disks everywhere are encrypted

00:29:13,430 --> 00:29:18,830
so the optimal thing to do is to have

00:29:16,010 --> 00:29:21,980
database level encryption that means

00:29:18,830 --> 00:29:24,350
that the database sees the data and it

00:29:21,980 --> 00:29:26,900
can sort it and read the values and do

00:29:24,350 --> 00:29:28,850
the calculations everything but the

00:29:26,900 --> 00:29:30,380
operating system does not see the data

00:29:28,850 --> 00:29:32,180
it's encrypted from the operating system

00:29:30,380 --> 00:29:36,020
point of view and the files on the disk

00:29:32,180 --> 00:29:38,210
are encrypted and all all backups and

00:29:36,020 --> 00:29:40,730
everything is encrypted so the database

00:29:38,210 --> 00:29:46,150
administrator can be rest assured that

00:29:40,730 --> 00:29:51,460
the data is always encrypted and this is

00:29:46,150 --> 00:29:54,200
available in Murray DB since 10.1 and

00:29:51,460 --> 00:29:57,230
there are lots of settings you need to

00:29:54,200 --> 00:30:00,500
put on to enable it so we have this

00:29:57,230 --> 00:30:03,260
shortcut that you can write that include

00:30:00,500 --> 00:30:06,590
this preset file and then those settings

00:30:03,260 --> 00:30:08,930
go on however that's not enough you also

00:30:06,590 --> 00:30:11,780
need to consider key management where

00:30:08,930 --> 00:30:13,700
you have the key in a file what is the

00:30:11,780 --> 00:30:16,160
password going to be and or will you

00:30:13,700 --> 00:30:19,400
have a separate key server and so on and

00:30:16,160 --> 00:30:22,130
and you need to choose if you want to

00:30:19,400 --> 00:30:23,780
have maybe logs encrypted or not

00:30:22,130 --> 00:30:25,760
encrypted do you want to leave something

00:30:23,780 --> 00:30:29,450
in the logs to make it easier to debug

00:30:25,760 --> 00:30:33,350
and how about different kinds of things

00:30:29,450 --> 00:30:34,820
so it's nice to know this exists and if

00:30:33,350 --> 00:30:37,280
you're interested you'd really need to

00:30:34,820 --> 00:30:39,950
read up a lot and you really need to

00:30:37,280 --> 00:30:43,130
read read carefully everything because

00:30:39,950 --> 00:30:45,890
in the worst case you shut yourself out

00:30:43,130 --> 00:30:49,240
of the data if you screw up the keys or

00:30:45,890 --> 00:30:52,940
something like that and this was

00:30:49,240 --> 00:30:56,830
contributed by Google so it's in in

00:30:52,940 --> 00:30:56,830
production use at least at Google

00:30:58,900 --> 00:31:03,460
all right thank you and I will post the

00:31:01,510 --> 00:31:06,970
slides on my Twitter account so you can

00:31:03,460 --> 00:31:09,240
follow me there to get them do you have

00:31:06,970 --> 00:31:09,240
questions

00:31:14,289 --> 00:31:24,350
well round of applause thank you very

00:31:23,840 --> 00:31:27,759
much

00:31:24,350 --> 00:31:31,369
so after this talk we're gonna have a

00:31:27,759 --> 00:31:33,889
BOF session about meridian mysql in

00:31:31,369 --> 00:31:36,229
debian so if you're interested you

00:31:33,889 --> 00:31:47,419
should hang up to stay up stay around

00:31:36,229 --> 00:31:51,289
here for that session to come on do you

00:31:47,419 --> 00:31:52,879
have any questions my presentation can't

00:31:51,289 --> 00:32:01,609
be so complete that you don't have

00:31:52,879 --> 00:32:07,700
anything you wonder so I just installed

00:32:01,609 --> 00:32:11,749
mariadb on me just on any installation

00:32:07,700 --> 00:32:15,249
and the socket authentication

00:32:11,749 --> 00:32:20,859
functionality isn't there do I need to

00:32:15,249 --> 00:32:20,859
enable anything or do I name it

00:32:26,940 --> 00:32:30,499
on Jessie you say

00:32:37,110 --> 00:32:41,330
then dot 0.25

00:32:46,290 --> 00:33:02,180
I need to double-check where it is

00:32:51,600 --> 00:33:02,180
available if I get my network working

00:33:23,530 --> 00:33:29,260
yeah I don't get my network working now

00:33:26,020 --> 00:33:32,260
but it might be that I remember

00:33:29,260 --> 00:33:34,120
incorrectly and it's not in Jessie yet

00:33:32,260 --> 00:33:37,750
well then it will be in stretch it it

00:33:34,120 --> 00:33:41,140
has at least been in unstable for for

00:33:37,750 --> 00:33:42,100
more than a year so might I don't

00:33:41,140 --> 00:33:48,490
remember did it

00:33:42,100 --> 00:33:50,380
miss miss last freeze or not it's an

00:33:48,490 --> 00:33:52,900
unstable and testing for over a year and

00:33:50,380 --> 00:33:56,770
it's been in Ubuntu for a long time

00:33:52,900 --> 00:34:01,570
because you're going to what question

00:33:56,770 --> 00:34:05,230
about connecting as with SSL - mereta

00:34:01,570 --> 00:34:08,409
b-but I guess my question is also - my

00:34:05,230 --> 00:34:10,300
squirrel is that around long already

00:34:08,409 --> 00:34:15,399
because I remember that there was a bug

00:34:10,300 --> 00:34:18,490
with that but I'm not quite up so you

00:34:15,399 --> 00:34:24,520
showed how to enable it now but has it

00:34:18,490 --> 00:34:27,820
been around how long is that around it

00:34:24,520 --> 00:34:30,490
has been around for a long time I don't

00:34:27,820 --> 00:34:34,450
remember exactly maybe Sergei knows

00:34:30,490 --> 00:34:38,159
better how long has SSL been available

00:34:34,450 --> 00:34:38,159
for MySQL mruby

00:34:46,030 --> 00:34:50,649
is the question how long my cell was

00:34:48,970 --> 00:34:54,879
available in high school and married EB

00:34:50,649 --> 00:34:58,450
at least since the 2000 so for a while

00:34:54,879 --> 00:35:02,140
yeah so actually what you might remember

00:34:58,450 --> 00:35:03,970
is that there was a bug that the the

00:35:02,140 --> 00:35:07,000
client connecting to the server could

00:35:03,970 --> 00:35:09,850
and could downgrade their protocol so

00:35:07,000 --> 00:35:11,530
that it doesn't use SSL so that's why

00:35:09,850 --> 00:35:13,990
you should use this in your

00:35:11,530 --> 00:35:17,020
configuration and the client that it

00:35:13,990 --> 00:35:19,420
enforces that you the connection must be

00:35:17,020 --> 00:35:22,290
SSL otherwise it will not it will refuse

00:35:19,420 --> 00:35:22,290
to connect to the server

00:35:30,560 --> 00:35:34,900
right any other questions

00:35:42,890 --> 00:35:52,960
all right thank you thank you please

00:35:48,950 --> 00:35:52,960

YouTube URL: https://www.youtube.com/watch?v=bvVVzJRIbGI


