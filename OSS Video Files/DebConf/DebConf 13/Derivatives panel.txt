Title: Derivatives panel
Publication date: 2017-11-29
Playlist: DebConf 13
Description: 
	by Paul Wise

At: DebConf13
https://debconf13.debconf.org/
Room: Main talk room
Scheduled start: 2013-08-12 17:30:00
Captions: 
	00:00:00,709 --> 00:00:05,640
hi everyone welcome to the debian

00:00:04,140 --> 00:00:08,400
derivatives panel

00:00:05,640 --> 00:00:11,160
I'm Paul Weiss I started the debian

00:00:08,400 --> 00:00:13,530
derivative census and have been working

00:00:11,160 --> 00:00:16,320
on the to reduce front desk desk for a

00:00:13,530 --> 00:00:19,080
while but we have Colin Watson

00:00:16,320 --> 00:00:22,949
representing a bunt to Rafael Hertzog

00:00:19,080 --> 00:00:26,240
representing Kali Linux Jeanne I don't

00:00:22,949 --> 00:00:29,250
know how to pronounce this John Michell

00:00:26,240 --> 00:00:33,030
representing doo doo Linux and wookie

00:00:29,250 --> 00:00:39,020
representing M Damien and Holger Lipson

00:00:33,030 --> 00:00:43,379
representing Debian edu I blend okay so

00:00:39,020 --> 00:00:46,170
we'll start by maybe you can give us an

00:00:43,379 --> 00:00:50,219
introduction to your derivatives and

00:00:46,170 --> 00:00:55,500
blends and your role in those

00:00:50,219 --> 00:00:58,920
derivatives okay hi Paul said I'm Colin

00:00:55,500 --> 00:01:01,590
Watson I work in a bid to where if

00:00:58,920 --> 00:01:04,920
anybody doesn't know what winter is it's

00:01:01,590 --> 00:01:08,490
a general purpose mass markets Linux

00:01:04,920 --> 00:01:12,090
distribution based on Debian on stable

00:01:08,490 --> 00:01:15,360
aiming at user friendliness and a number

00:01:12,090 --> 00:01:17,659
of specific products I specifically work

00:01:15,360 --> 00:01:21,030
on it we're sponsored by canonical I

00:01:17,659 --> 00:01:23,040
specifically work on mostly the best

00:01:21,030 --> 00:01:27,000
layer of user space so I work on

00:01:23,040 --> 00:01:29,310
installers boot loaders package

00:01:27,000 --> 00:01:31,439
management tools I also do a fair bit of

00:01:29,310 --> 00:01:34,890
release engineering work so things like

00:01:31,439 --> 00:01:37,259
our package manager so I think Sekhar

00:01:34,890 --> 00:01:41,100
archive management and image building

00:01:37,259 --> 00:01:42,960
tools that sort of thing if you want to

00:01:41,100 --> 00:01:45,390
hear more about the latter part of that

00:01:42,960 --> 00:01:48,090
Steve Lang a second I are running a talk

00:01:45,390 --> 00:01:50,340
on Thursday afternoon which i think is

00:01:48,090 --> 00:01:52,409
entitled open to daily quality

00:01:50,340 --> 00:01:56,430
improvements and we'll be going a lot

00:01:52,409 --> 00:01:59,430
more depth on out there in Rafah red

00:01:56,430 --> 00:02:03,600
sock and working part time for Kali

00:01:59,430 --> 00:02:06,240
Linux which is the real derivative

00:02:03,600 --> 00:02:11,670
dedicated to penetration testing with

00:02:06,240 --> 00:02:13,569
lots of security tools it's baked by

00:02:11,670 --> 00:02:17,010
offensive security

00:02:13,569 --> 00:02:20,680
a company which sells training on

00:02:17,010 --> 00:02:25,209
security training and they use Kali

00:02:20,680 --> 00:02:27,340
Linux as a product to gather yeah to

00:02:25,209 --> 00:02:30,819
give them a good imagine to find find

00:02:27,340 --> 00:02:34,150
customers and stuff like that I'm we're

00:02:30,819 --> 00:02:36,849
really really small a few part-time

00:02:34,150 --> 00:02:38,500
people because while they do do you walk

00:02:36,849 --> 00:02:41,439
in the security field and they do also

00:02:38,500 --> 00:02:44,919
work to package the tools that they use

00:02:41,439 --> 00:02:47,799
and I'm mainly doing all the

00:02:44,919 --> 00:02:49,510
infrastructure part and everything

00:02:47,799 --> 00:02:51,760
related yes to deafen installer and

00:02:49,510 --> 00:02:54,459
building the image and keeping up with

00:02:51,760 --> 00:02:59,109
the build demons and stuff like that for

00:02:54,459 --> 00:03:01,930
them I'm sure Michelle Phillipe I'm a

00:02:59,109 --> 00:03:03,879
founder of doo doo linux this is a

00:03:01,930 --> 00:03:07,930
computer system targeted at children

00:03:03,879 --> 00:03:12,510
from - so we try to make a computer

00:03:07,930 --> 00:03:16,500
system as easy to use as gaming consoles

00:03:12,510 --> 00:03:22,319
we are currently in using several

00:03:16,500 --> 00:03:26,650
nursery schools in France and we have 43

00:03:22,319 --> 00:03:31,900
language teams on transifex so it's

00:03:26,650 --> 00:03:34,569
quite huge question around the world one

00:03:31,900 --> 00:03:38,500
of our objectives is to stimulate

00:03:34,569 --> 00:03:41,680
children force fulfillment using digital

00:03:38,500 --> 00:03:44,319
technologies we also want them to master

00:03:41,680 --> 00:03:47,829
technology for real

00:03:44,319 --> 00:03:52,150
if you feel interested in this topic I

00:03:47,829 --> 00:04:04,209
will speak in a lightning talk on

00:03:52,150 --> 00:04:06,159
Saturday boo-ki again we've had various

00:04:04,209 --> 00:04:07,870
M Debian talks over the last 10 years so

00:04:06,159 --> 00:04:12,819
hopefully most of you it works out what

00:04:07,870 --> 00:04:15,719
it is by now but if not it's an attempt

00:04:12,819 --> 00:04:19,169
to make Debian smaller fundamentally

00:04:15,719 --> 00:04:22,840
it's evolved somewhat over the years

00:04:19,169 --> 00:04:26,590
initially we made quite a lot of changes

00:04:22,840 --> 00:04:28,180
to make things run on small machines

00:04:26,590 --> 00:04:30,100
and that produced an enormous

00:04:28,180 --> 00:04:32,680
maintenance load which fundamentally was

00:04:30,100 --> 00:04:35,680
too hard so we stopped doing that and

00:04:32,680 --> 00:04:38,200
now we just use exactly the same

00:04:35,680 --> 00:04:41,350
binaries as Debian produces but with all

00:04:38,200 --> 00:04:42,820
the crap removed and a reduced package

00:04:41,350 --> 00:04:45,310
set so it's about three thousand

00:04:42,820 --> 00:04:47,260
packages rather than 17-thousand which

00:04:45,310 --> 00:04:49,720
of course reduces your metadata size as

00:04:47,260 --> 00:04:53,050
well and the nice thing about that is it

00:04:49,720 --> 00:04:55,030
can be entirely automated so it is the

00:04:53,050 --> 00:04:58,060
we have stable releases synchronized

00:04:55,030 --> 00:05:00,760
with Debian's and now in fact M Debian

00:04:58,060 --> 00:05:02,830
is available from the Debian FTP servers

00:05:00,760 --> 00:05:06,910
so we've got quite closely integrated

00:05:02,830 --> 00:05:09,610
with Debian it's it is a derivative but

00:05:06,910 --> 00:05:11,580
we don't really change anything in a

00:05:09,610 --> 00:05:13,990
sense for the point of the view binaries

00:05:11,580 --> 00:05:15,850
we've also provided tool chains crossed

00:05:13,990 --> 00:05:17,200
all chains for a long time to enable

00:05:15,850 --> 00:05:18,430
cross building so a lot of the cross

00:05:17,200 --> 00:05:20,800
building stuff that has been made to

00:05:18,430 --> 00:05:24,370
work has been tested in M Debian first

00:05:20,800 --> 00:05:26,260
and increasingly in a bun - first and we

00:05:24,370 --> 00:05:28,990
badly need to stop doing that and get it

00:05:26,260 --> 00:05:32,820
all into Debian there's various other

00:05:28,990 --> 00:05:32,820
bits and bobs but that's basically it

00:05:34,590 --> 00:05:39,490
the P master and documentation

00:05:37,030 --> 00:05:42,550
maintainer for Debian IDO which is a

00:05:39,490 --> 00:05:45,039
Debian sub project exists since 12 years

00:05:42,550 --> 00:05:48,760
we started as a CD which is no black

00:05:45,039 --> 00:05:52,300
quad blend for seven to four easy 7/2 we

00:05:48,760 --> 00:05:53,710
might be hundred-percent Debian still

00:05:52,300 --> 00:05:56,110
needs to be discussed with the stable

00:05:53,710 --> 00:05:58,060
release masters but there's five figure

00:05:56,110 --> 00:05:59,590
sets which were we have the version in

00:05:58,060 --> 00:06:04,450
Jessie we would like them in VG and

00:05:59,590 --> 00:06:07,000
they're just only apply to our packages

00:06:04,450 --> 00:06:11,110
so what we are is a streamlined

00:06:07,000 --> 00:06:12,669
installer for AMD 64 and a 386 where

00:06:11,110 --> 00:06:15,580
there are four profiles to choose

00:06:12,669 --> 00:06:18,639
standalone then the main server which

00:06:15,580 --> 00:06:20,710
what exists needs to exist which then an

00:06:18,639 --> 00:06:22,690
80s piece of a profile which you can add

00:06:20,710 --> 00:06:25,030
on the main server or on other servers a

00:06:22,690 --> 00:06:28,330
workstation installation and a CSP

00:06:25,030 --> 00:06:30,580
clients via PXE therefore we have

00:06:28,330 --> 00:06:34,060
documentation in six languages which

00:06:30,580 --> 00:06:38,020
describes the setup from a school admin

00:06:34,060 --> 00:06:40,040
point of view it's out of the box

00:06:38,020 --> 00:06:42,530
configured for schools and university

00:06:40,040 --> 00:06:44,950
but really it can be used in offices or

00:06:42,530 --> 00:06:47,180
wherever because basically it's just the

00:06:44,950 --> 00:06:49,280
out-of-the-box working set up with some

00:06:47,180 --> 00:06:51,140
education applications which you can

00:06:49,280 --> 00:06:54,380
just remove with up.get or you can add

00:06:51,140 --> 00:06:56,600
your own so that we need Oh is basically

00:06:54,380 --> 00:07:08,390
a different kind of installer for

00:06:56,600 --> 00:07:10,430
networks set up so now we'll open it up

00:07:08,390 --> 00:07:11,570
for questions from the audience and if

00:07:10,430 --> 00:07:20,960
there are none then I have some

00:07:11,570 --> 00:07:23,570
pre-prepared questions okay I'll start

00:07:20,960 --> 00:07:27,320
with one that I'm very interested in

00:07:23,570 --> 00:07:31,550
some of the derivatives have like

00:07:27,320 --> 00:07:34,280
pre-installed images could those of you

00:07:31,550 --> 00:07:35,600
who trip are creating such images could

00:07:34,280 --> 00:07:37,850
you say something about how you do it

00:07:35,600 --> 00:07:43,250
and how we could integrate that into the

00:07:37,850 --> 00:07:45,110
Debian so you're you're talking about

00:07:43,250 --> 00:07:48,050
the sort of thing that you would copy

00:07:45,110 --> 00:07:49,970
onto onto a system and OEM style

00:07:48,050 --> 00:07:53,030
yeah we've been we've been doing this

00:07:49,970 --> 00:07:55,550
kind of thing since but I've been to

00:07:53,030 --> 00:07:57,830
five to ten with the robots although it

00:07:55,550 --> 00:08:04,130
took a while for any actual OEMs to pick

00:07:57,830 --> 00:08:07,190
it up after that the so for a while all

00:08:04,130 --> 00:08:10,730
of the Ubuntu installation images have

00:08:07,190 --> 00:08:13,220
been have been live images by default or

00:08:10,730 --> 00:08:16,880
at least the desktop ones have been live

00:08:13,220 --> 00:08:19,190
filesystem style so you have a you have

00:08:16,880 --> 00:08:21,470
a file system tree your installer copies

00:08:19,190 --> 00:08:24,170
at all onto disk and fiddles about with

00:08:21,470 --> 00:08:27,460
it until it works with fear with the

00:08:24,170 --> 00:08:30,200
system that you're installing onto and

00:08:27,460 --> 00:08:32,840
this this sort of thing works quite well

00:08:30,200 --> 00:08:35,120
with new m-model though there are there

00:08:32,840 --> 00:08:38,419
are obvious differences at the moment we

00:08:35,120 --> 00:08:42,530
build everything using live bills sin

00:08:38,419 --> 00:08:45,440
for the last couple of releases the we

00:08:42,530 --> 00:08:47,780
have a live boot system that's similar

00:08:45,440 --> 00:08:49,460
to the one used in Debian though for

00:08:47,780 --> 00:08:51,590
historical reasons they're a bit

00:08:49,460 --> 00:08:53,779
divergent

00:08:51,590 --> 00:08:56,270
regarding the sort of things that you

00:08:53,779 --> 00:08:57,950
need to change when you when you copy

00:08:56,270 --> 00:09:01,480
onto the target system you obviously

00:08:57,950 --> 00:09:05,029
have to go around and make sure that you

00:09:01,480 --> 00:09:07,640
replace any components of the of the

00:09:05,029 --> 00:09:11,240
system that are that are unique Varys

00:09:07,640 --> 00:09:14,470
mystery machine uniques whose keys the

00:09:11,240 --> 00:09:17,810
popularity contest ID that sort of thing

00:09:14,470 --> 00:09:19,100
at the moment we just have a we just

00:09:17,810 --> 00:09:21,050
hard-coded less than the installer

00:09:19,100 --> 00:09:22,760
unfortunately that's where we go around

00:09:21,050 --> 00:09:26,180
and deep go to reconfigure various

00:09:22,760 --> 00:09:28,550
packages much prefer to see some kind of

00:09:26,180 --> 00:09:29,690
system of directory of hooks that people

00:09:28,550 --> 00:09:31,820
could drop it their package maintainer

00:09:29,690 --> 00:09:34,610
could drop in for to declare that sort

00:09:31,820 --> 00:09:37,850
of thing so I had a thought on that

00:09:34,610 --> 00:09:41,930
maybe we could have support in D package

00:09:37,850 --> 00:09:44,510
for systems that are not yet configured

00:09:41,930 --> 00:09:48,800
for the hardware that they're installed

00:09:44,510 --> 00:09:53,270
on so the open SSH keys for example

00:09:48,800 --> 00:09:54,980
would be generated on first boot well

00:09:53,270 --> 00:09:59,540
I'm the I'm the opener 17 are

00:09:54,980 --> 00:10:01,010
conveniently but so I think that I I

00:09:59,540 --> 00:10:03,950
don't know what the deeper containers

00:10:01,010 --> 00:10:05,720
gonna say I feel I feel kind of like

00:10:03,950 --> 00:10:07,550
that's an unnecessary thing to have in

00:10:05,720 --> 00:10:10,970
deeper coach that's it's the sort of

00:10:07,550 --> 00:10:12,530
thing that we can that we can declare

00:10:10,970 --> 00:10:15,560
using much more light where it hooks

00:10:12,530 --> 00:10:19,850
than the knots and achieve much the same

00:10:15,560 --> 00:10:21,589
girl well I don't know if you I think

00:10:19,850 --> 00:10:23,720
there's a google Summer of Code project

00:10:21,589 --> 00:10:27,440
on it also at least what an idea of

00:10:23,720 --> 00:10:30,080
doing one and I had a discussion once

00:10:27,440 --> 00:10:33,110
with DDR abou on this topic I believe

00:10:30,080 --> 00:10:38,959
that just a shared depth of question

00:10:33,110 --> 00:10:44,420
would be enough so maybe the DI in om

00:10:38,959 --> 00:10:47,080
what could set up a proceed and the

00:10:44,420 --> 00:10:50,240
postern stuff the various services would

00:10:47,080 --> 00:10:54,020
not do what they are supposed to do on

00:10:50,240 --> 00:10:59,089
first boot and on mid-weight on later in

00:10:54,020 --> 00:11:04,070
some way maybe we saw maybe you came

00:10:59,089 --> 00:11:05,089
into a startup scripts which is generic

00:11:04,070 --> 00:11:06,439
enough

00:11:05,089 --> 00:11:08,720
something like that but I don't need

00:11:06,439 --> 00:11:20,779
don't think you need to change the pkg -

00:11:08,720 --> 00:11:22,670
under that coming back to you do you

00:11:20,779 --> 00:11:25,970
want to order answer on the OEM question

00:11:22,670 --> 00:11:28,879
maybe Carly doesn't have read the OEM

00:11:25,970 --> 00:11:31,339
image except while we provide live image

00:11:28,879 --> 00:11:38,089
so like build is doing all the fancy

00:11:31,339 --> 00:11:40,120
stuff for us right now for Judah Linux

00:11:38,089 --> 00:11:42,620
we are not really concerned by a

00:11:40,120 --> 00:11:46,639
cryptographic needs of course because

00:11:42,620 --> 00:11:51,470
it's for children but in quite near

00:11:46,639 --> 00:11:54,230
future we may need a cryptographic key

00:11:51,470 --> 00:11:57,079
because we have currently an issue with

00:11:54,230 --> 00:12:00,370
a web content filtering we are using

00:11:57,079 --> 00:12:10,040
Dan's guardian' and it is not able to

00:12:00,370 --> 00:12:13,540
analyze encrypted HTTP traffic a

00:12:10,040 --> 00:12:18,709
possible solution I understood is to

00:12:13,540 --> 00:12:22,220
introduce a local proxy with HTTPS

00:12:18,709 --> 00:12:26,839
secure of HTTP and in this case we would

00:12:22,220 --> 00:12:31,670
need a cryptographic key for a local

00:12:26,839 --> 00:12:35,749
proxy in this case we would need on our

00:12:31,670 --> 00:12:38,870
life as a CD something to regenerate the

00:12:35,749 --> 00:12:42,170
key each time the system is booting and

00:12:38,870 --> 00:12:50,749
of course when it is pre-installed the

00:12:42,170 --> 00:12:52,429
same issue is occurring yes so making

00:12:50,749 --> 00:12:54,019
images yeah this is a subject dear to my

00:12:52,429 --> 00:12:54,920
heart I could give you all talk about

00:12:54,019 --> 00:12:58,999
this

00:12:54,920 --> 00:13:03,649
so we supply lots of architectures M 264

00:12:58,999 --> 00:13:05,870
306 are me alarm HF MIPS oo / PC MIPS so

00:13:03,649 --> 00:13:09,050
and in practice mostly people using em

00:13:05,870 --> 00:13:12,290
Debian are installing on non x86 more

00:13:09,050 --> 00:13:15,649
systems so you have to cross make images

00:13:12,290 --> 00:13:17,220
and Debian's stuff basically doesn't do

00:13:15,649 --> 00:13:19,020
that very well

00:13:17,220 --> 00:13:21,660
because we expect to be able to run

00:13:19,020 --> 00:13:25,260
configure scripts at install and unpack

00:13:21,660 --> 00:13:25,950
time and that's a problem if you can't

00:13:25,260 --> 00:13:29,760
run it because it's the wrong

00:13:25,950 --> 00:13:34,770
architecture so we invented a thing

00:13:29,760 --> 00:13:37,530
called mods multi-strap which uses apps

00:13:34,770 --> 00:13:39,120
and D package rather than doing what D

00:13:37,530 --> 00:13:41,220
bootstrap does which is to explicitly

00:13:39,120 --> 00:13:43,290
avoid using apt and D package because

00:13:41,220 --> 00:13:47,550
it's intended to run on non Debian boxes

00:13:43,290 --> 00:13:49,410
as well and that actually works so the

00:13:47,550 --> 00:13:52,170
problem with that is that there is no

00:13:49,410 --> 00:13:54,330
way to say I've unpacked this but I

00:13:52,170 --> 00:13:57,750
can't run the configure scripts that the

00:13:54,330 --> 00:14:00,420
pre you can't run tree in scripts before

00:13:57,750 --> 00:14:01,820
you unpack because you can't run the

00:14:00,420 --> 00:14:04,230
scripts now and you've got to unpack it

00:14:01,820 --> 00:14:05,790
so what we just do is install everything

00:14:04,230 --> 00:14:08,850
without running pre in scripts now

00:14:05,790 --> 00:14:10,320
actually they nearly always are intended

00:14:08,850 --> 00:14:15,090
to fix previous cock-ups

00:14:10,320 --> 00:14:17,010
so this actually nearly always works

00:14:15,090 --> 00:14:22,710
except where things create their user in

00:14:17,010 --> 00:14:24,810
the pre in script and so on yeah this is

00:14:22,710 --> 00:14:28,320
exactly what the first stage of des bit

00:14:24,810 --> 00:14:29,760
strap does and packages do have to it's

00:14:28,320 --> 00:14:32,190
an extra constraint and packages that

00:14:29,760 --> 00:14:33,990
they have to behave in some quite

00:14:32,190 --> 00:14:38,040
specific ways we've had some amazingly

00:14:33,990 --> 00:14:40,590
difficult to debug problems with it yeah

00:14:38,040 --> 00:14:43,800
but des Bistro has another so it does do

00:14:40,590 --> 00:14:45,810
that but that means because it unpacks

00:14:43,800 --> 00:14:47,340
them again using D package later you

00:14:45,810 --> 00:14:48,780
have to have the Deb's in the image so

00:14:47,340 --> 00:14:50,220
now the image is twice the size because

00:14:48,780 --> 00:14:51,450
you've got everything unpacked and all

00:14:50,220 --> 00:14:52,980
the Deb's so it can unpack them again

00:14:51,450 --> 00:14:55,170
afterwards which seems slightly crap and

00:14:52,980 --> 00:14:57,450
the bootstrap can only take everything

00:14:55,170 --> 00:14:59,010
from one source which in the real world

00:14:57,450 --> 00:15:00,990
of embedded distros is a serious

00:14:59,010 --> 00:15:03,120
limitation because in practice everybody

00:15:00,990 --> 00:15:05,250
always wants the stuff out of stable and

00:15:03,120 --> 00:15:06,900
some of the packages out of their local

00:15:05,250 --> 00:15:10,050
repo which might even be proprietary

00:15:06,900 --> 00:15:11,460
stuff so one of the things so an apt of

00:15:10,050 --> 00:15:13,800
course can take stuff from anywhere so

00:15:11,460 --> 00:15:16,200
using out to get whatever is needed to

00:15:13,800 --> 00:15:17,670
satisfy your dependencies is actually

00:15:16,200 --> 00:15:19,980
much nicer but we always have this

00:15:17,670 --> 00:15:22,530
problem with the pre in scripts now in

00:15:19,980 --> 00:15:24,660
practice it works well enough if you're

00:15:22,530 --> 00:15:27,300
making a specific image for a particular

00:15:24,660 --> 00:15:29,819
product you just write some hacky

00:15:27,300 --> 00:15:33,279
scripts to do anything important in the

00:15:29,819 --> 00:15:36,519
Prien scripts which works so i just did

00:15:33,279 --> 00:15:38,699
it for the arm 64 port because so you

00:15:36,519 --> 00:15:40,540
can't work around this but using qemu

00:15:38,699 --> 00:15:43,389
except where you haven't got a qemu

00:15:40,540 --> 00:15:45,279
because it's a new architecture so it's

00:15:43,389 --> 00:15:48,189
a useful tool but it does have its

00:15:45,279 --> 00:15:49,240
issues as Colin says as weird things go

00:15:48,189 --> 00:15:52,749
wrong if you don't run your Priyan

00:15:49,240 --> 00:15:54,999
scripts so yes that's what we do

00:15:52,749 --> 00:15:56,499
and that tool is already in Debian has

00:15:54,999 --> 00:15:58,629
been for years so if you want to use

00:15:56,499 --> 00:16:04,300
multi-strap you just tap get it use it

00:15:58,629 --> 00:16:06,670
there have been it all mostly uses the

00:16:04,300 --> 00:16:09,839
Debian to it so we build CDs was like a

00:16:06,670 --> 00:16:12,300
CD image we have modified di to ask

00:16:09,839 --> 00:16:14,410
profile questions and also to have

00:16:12,300 --> 00:16:16,420
everything asked in the beginning which

00:16:14,410 --> 00:16:19,839
I think now went back into the I am not

00:16:16,420 --> 00:16:22,509
fully sure we lack the resource that the

00:16:19,839 --> 00:16:24,189
people doing I'm building a life system

00:16:22,509 --> 00:16:25,689
even though it would be trivial so if

00:16:24,189 --> 00:16:27,970
somebody wants to help their being IDO

00:16:25,689 --> 00:16:33,069
reading a live CD would be great for

00:16:27,970 --> 00:16:35,589
busy and what we mostly need is packages

00:16:33,069 --> 00:16:39,040
which support configuration better like

00:16:35,589 --> 00:16:40,990
with etc' profile d so that we can drop

00:16:39,040 --> 00:16:42,970
in our configuration without modifying

00:16:40,990 --> 00:16:45,189
the package and braking upgrade pauses

00:16:42,970 --> 00:16:47,379
that's really what every Needham mostly

00:16:45,189 --> 00:16:56,499
needs and this is from a few selected

00:16:47,379 --> 00:16:58,620
packages so any questions from the

00:16:56,499 --> 00:16:58,620
audience

00:17:00,809 --> 00:17:10,329
nope okay so have a more general

00:17:05,699 --> 00:17:12,339
question for you what can debian do to

00:17:10,329 --> 00:17:21,459
make the lives of your derivatives

00:17:12,339 --> 00:17:23,529
easier I gotta go first again when when

00:17:21,459 --> 00:17:25,510
when Paul asked me this before the

00:17:23,529 --> 00:17:27,640
before the session the first thing I

00:17:25,510 --> 00:17:30,669
thought of was supplier patches okay

00:17:27,640 --> 00:17:32,620
I've got about something like a see

00:17:30,669 --> 00:17:34,360
unemployed Patterson the BTS that have

00:17:32,620 --> 00:17:38,260
been sitting there for ages from my work

00:17:34,360 --> 00:17:39,669
clients but and you know if you multiply

00:17:38,260 --> 00:17:41,580
it up by all the people in working in

00:17:39,669 --> 00:17:45,010
Ventura it's actually quite a lot

00:17:41,580 --> 00:17:46,720
the in in general doing a good job at

00:17:45,010 --> 00:17:49,659
keeping your package building cleanly

00:17:46,720 --> 00:17:52,780
causes us to spend a lot less time going

00:17:49,659 --> 00:17:55,900
Ron you know we we make a change we find

00:17:52,780 --> 00:17:59,140
that actually the package blows up due

00:17:55,900 --> 00:18:00,520
to this separable package deep chin of

00:17:59,140 --> 00:18:02,049
something and we add up we end up

00:18:00,520 --> 00:18:04,150
spinning wheels quite a lot and going

00:18:02,049 --> 00:18:05,440
around and going back and fixing things

00:18:04,150 --> 00:18:09,250
that really ought to have just worked in

00:18:05,440 --> 00:18:11,429
Debian the vast majority of packages do

00:18:09,250 --> 00:18:14,559
build extraordinarily cleanly across

00:18:11,429 --> 00:18:16,929
across a wide swath of time but but we

00:18:14,559 --> 00:18:20,850
generally have a few hundred build

00:18:16,929 --> 00:18:22,990
failures active at any one time and

00:18:20,850 --> 00:18:26,110
keeping it keeping your package building

00:18:22,990 --> 00:18:27,580
cleanly makes makes a huge difference to

00:18:26,110 --> 00:18:30,370
derivatives who are trying to make

00:18:27,580 --> 00:18:36,220
changes that really have that are really

00:18:30,370 --> 00:18:38,289
incidental so that the things like cross

00:18:36,220 --> 00:18:40,539
building and multi arch improvement

00:18:38,289 --> 00:18:42,549
Caesar projects that as wiki said we've

00:18:40,539 --> 00:18:45,159
been we've been working with them Debian

00:18:42,549 --> 00:18:48,580
and other folks in in Debian who are

00:18:45,159 --> 00:18:51,179
interested in those and those sorts of

00:18:48,580 --> 00:18:55,390
things make a make a huge difference to

00:18:51,179 --> 00:18:57,309
some of the more exotic things that that

00:18:55,390 --> 00:18:59,140
cedric just sometimes have to do and

00:18:57,309 --> 00:19:01,150
there's certain things that require

00:18:59,140 --> 00:19:04,030
changes to many many Debian packages

00:19:01,150 --> 00:19:06,909
across the board and that was really

00:19:04,030 --> 00:19:09,610
helpful if if Debian developers can be

00:19:06,909 --> 00:19:17,919
proactive about enabling in their own

00:19:09,610 --> 00:19:19,840
packages for Kali Linux I have based on

00:19:17,919 --> 00:19:22,929
stable for most packages for all the

00:19:19,840 --> 00:19:26,890
infrastructure but we tend to import new

00:19:22,929 --> 00:19:31,390
work you know we patch it a little bit

00:19:26,890 --> 00:19:34,600
but kernel are very very well maintained

00:19:31,390 --> 00:19:37,809
on the dev ensign unfortunately we don't

00:19:34,600 --> 00:19:43,330
have di release that goes with them

00:19:37,809 --> 00:19:46,090
always and so either we keep an older

00:19:43,330 --> 00:19:49,270
kernel or we have to patch di ourselves

00:19:46,090 --> 00:19:51,730
temporarily or and it would be really

00:19:49,270 --> 00:19:55,100
great if Devon could have more regular

00:19:51,730 --> 00:19:58,309
kernel and di release

00:19:55,100 --> 00:19:59,820
that would make it easier for us

00:19:58,309 --> 00:20:02,909
otherwise

00:19:59,820 --> 00:20:05,129
I tend to agree with with Colin of

00:20:02,909 --> 00:20:06,869
course when we tend to submit touched

00:20:05,129 --> 00:20:11,220
really we like we like when it's

00:20:06,869 --> 00:20:15,389
integrated quite quickly and when we

00:20:11,220 --> 00:20:17,669
lacking also really a team which is

00:20:15,389 --> 00:20:20,549
dedicated to security tools in Damien

00:20:17,669 --> 00:20:23,730
there is a team around forensic tools

00:20:20,549 --> 00:20:26,369
but not generic maintenance team for

00:20:23,730 --> 00:20:31,169
security tools and the well I guess we

00:20:26,369 --> 00:20:33,570
will try to create one because because

00:20:31,169 --> 00:20:37,919
really we have a Callias a lot of

00:20:33,570 --> 00:20:40,230
package to contribute and they are all

00:20:37,919 --> 00:20:43,470
team maintained by two or three people

00:20:40,230 --> 00:20:46,769
on the curry side and we really want to

00:20:43,470 --> 00:20:49,919
well share the load a bit with Debian on

00:20:46,769 --> 00:20:56,429
this so this is something that I'm going

00:20:49,919 --> 00:21:00,179
to work on the next few months for Judah

00:20:56,429 --> 00:21:04,350
Linux we have our own package repository

00:21:00,179 --> 00:21:08,909
with tens of packages most of them our

00:21:04,350 --> 00:21:12,960
own packages that we are building to set

00:21:08,909 --> 00:21:16,679
up the environment to do Linux but we

00:21:12,960 --> 00:21:20,029
also have batch packages from the

00:21:16,679 --> 00:21:24,269
official Debian are chill we have

00:21:20,029 --> 00:21:28,919
upstream versions but newer debian

00:21:24,269 --> 00:21:32,460
archie and finally we also have some

00:21:28,919 --> 00:21:37,830
software but is not available at all

00:21:32,460 --> 00:21:43,950
Endymion so in the end we have tons of

00:21:37,830 --> 00:21:48,389
packaged cheese free releases and four

00:21:43,950 --> 00:21:51,659
or five architectures so this is a lot

00:21:48,389 --> 00:21:55,110
of packages to build currently we are

00:21:51,659 --> 00:21:58,409
unfortunately doing this manually so

00:21:55,110 --> 00:22:02,909
this this takes a lot of time this is a

00:21:58,409 --> 00:22:04,020
error prone what we are dreaming of is

00:22:02,909 --> 00:22:08,190
something like

00:22:04,020 --> 00:22:11,550
Lubuntu launchpad something that anybody

00:22:08,190 --> 00:22:14,970
can use and which would be based on the

00:22:11,550 --> 00:22:18,890
DNA infrastructure so that we get all

00:22:14,970 --> 00:22:23,090
our packages and our repositories built

00:22:18,890 --> 00:22:27,330
automatically this will also help us

00:22:23,090 --> 00:22:31,110
test new architectures recently someone

00:22:27,330 --> 00:22:34,050
asked me if do do linux is available for

00:22:31,110 --> 00:22:37,580
PowerPC and unfortunately it is not

00:22:34,050 --> 00:22:45,330
because the developers cannot build on

00:22:37,580 --> 00:22:46,800
PowerPC just jumping on this topic I

00:22:45,330 --> 00:22:48,870
agree as well

00:22:46,800 --> 00:22:52,200
there are many table infrastructures

00:22:48,870 --> 00:22:54,180
which are not really easy to use for

00:22:52,200 --> 00:22:57,720
derivatives I mean in Kali Linux we

00:22:54,180 --> 00:22:59,850
opted to use rebuild T we use a repro

00:22:57,720 --> 00:23:02,610
Pro but so you are not really you are

00:22:59,850 --> 00:23:06,540
not using a build D and we're not using

00:23:02,610 --> 00:23:11,160
DAC there are many parts that really

00:23:06,540 --> 00:23:14,160
should be better documented more easy to

00:23:11,160 --> 00:23:16,320
use and to set up because well it

00:23:14,160 --> 00:23:21,270
doesn't make sense for us to have to

00:23:16,320 --> 00:23:24,270
discover every time our to build our own

00:23:21,270 --> 00:23:28,140
solution based on tools which are easier

00:23:24,270 --> 00:23:30,150
to use so so I'm fixing this for the

00:23:28,140 --> 00:23:31,860
package tracking system I expect other

00:23:30,150 --> 00:23:38,010
people in Devon to fix it for other

00:23:31,860 --> 00:23:39,510
parts so yeah Raphael just beat me to it

00:23:38,010 --> 00:23:41,660
I was about to complain about the fact

00:23:39,510 --> 00:23:43,770
that it's really hard to make build e

00:23:41,660 --> 00:23:45,030
everybody needs a build even if you only

00:23:43,770 --> 00:23:46,080
maintain one package you want to build

00:23:45,030 --> 00:23:48,660
over and over again if you want to build

00:23:46,080 --> 00:23:50,790
a whole distro and the one part we made

00:23:48,660 --> 00:23:52,380
difficult to reproduce is that the rest

00:23:50,790 --> 00:23:54,120
of its great rep repros brilliant s

00:23:52,380 --> 00:23:56,550
builds brilliant d package build

00:23:54,120 --> 00:23:58,800
everything tools it's all great but

00:23:56,550 --> 00:24:00,540
build these are a problem there is a

00:23:58,800 --> 00:24:02,940
thing called PI bit which is what M

00:24:00,540 --> 00:24:05,490
Debian people ended up writing which

00:24:02,940 --> 00:24:07,860
uses 0 mq and does building and cross

00:24:05,490 --> 00:24:09,570
building and might well be something we

00:24:07,860 --> 00:24:11,420
should pick up and use rebuild these ok

00:24:09,570 --> 00:24:15,940
but it's a bit thick and a bit broken

00:24:11,420 --> 00:24:18,550
and various ways but yeah

00:24:15,940 --> 00:24:22,170
and Roger keeps threatening to make the

00:24:18,550 --> 00:24:25,210
build D thing in s bill actually work

00:24:22,170 --> 00:24:26,950
but it's not quite finished I think so

00:24:25,210 --> 00:24:30,790
now that that is a thing somebody needs

00:24:26,950 --> 00:24:33,660
to work on it will be lovely other

00:24:30,790 --> 00:24:37,330
things while I forget was going to say

00:24:33,660 --> 00:24:38,890
so most of what we've wanted has gone

00:24:37,330 --> 00:24:40,150
into Debian and generally we have no

00:24:38,890 --> 00:24:41,590
complaints over how that's gone it's

00:24:40,150 --> 00:24:43,360
taken a long time but some of it was

00:24:41,590 --> 00:24:45,340
difficult you know deep package of endor

00:24:43,360 --> 00:24:48,540
and cross building support and multi

00:24:45,340 --> 00:24:50,770
arch support I would say that the again

00:24:48,540 --> 00:24:52,870
accepting packages quickly is great

00:24:50,770 --> 00:24:54,460
sometimes a multi arch patch takes a day

00:24:52,870 --> 00:24:56,820
some of them are still moldering after a

00:24:54,460 --> 00:24:59,800
year and a half that's annoying

00:24:56,820 --> 00:25:01,110
sometimes the freeze doesn't help that's

00:24:59,800 --> 00:25:04,420
always true

00:25:01,110 --> 00:25:05,470
yeah that's mostly it somebody actually

00:25:04,420 --> 00:25:13,390
wanted to say something the audience we

00:25:05,470 --> 00:25:15,580
should probably let him yes didn't

00:25:13,390 --> 00:25:18,370
wasn't Paul tagged working on a little

00:25:15,580 --> 00:25:21,310
bull D system called D bill dot me or

00:25:18,370 --> 00:25:22,990
something like that I don't know much

00:25:21,310 --> 00:25:25,510
about it other than that it exists and

00:25:22,990 --> 00:25:28,030
he's generally very excited about things

00:25:25,510 --> 00:25:30,330
I'm sure if you talk to him he'll pull

00:25:28,030 --> 00:25:30,330
tag

00:25:39,310 --> 00:25:44,660
for Debian Ito we really use only use

00:25:42,170 --> 00:25:45,350
packages from Debian main so that's not

00:25:44,660 --> 00:25:48,890
an issue

00:25:45,350 --> 00:25:52,490
we do have own archive mostly for being

00:25:48,890 --> 00:25:54,260
able to test faster for squeeze it's

00:25:52,490 --> 00:25:57,350
also needed to build the images the

00:25:54,260 --> 00:25:59,210
final ones for busy hopefully not we use

00:25:57,350 --> 00:26:01,340
doc the doc install for that which is

00:25:59,210 --> 00:26:04,940
clearly overkill because it's 10

00:26:01,340 --> 00:26:07,340
packages in there oh yeah and we have

00:26:04,940 --> 00:26:10,550
hoped to switch to the Debian form of

00:26:07,340 --> 00:26:12,620
PPAs which was set probably to arrive

00:26:10,550 --> 00:26:14,860
maybe this year later that would regret

00:26:12,620 --> 00:26:26,000
cool for the Veneto so we can just use

00:26:14,860 --> 00:26:28,700
FTP W not for everything I could ask the

00:26:26,000 --> 00:26:30,890
opposite of that question is there one

00:26:28,700 --> 00:26:32,180
or two things achievable and may be

00:26:30,890 --> 00:26:35,480
aspirational that you think your

00:26:32,180 --> 00:26:42,410
derivatives could do better by Debian

00:26:35,480 --> 00:26:44,060
before so the previous question was what

00:26:42,410 --> 00:26:45,140
could debian do for you is there some

00:26:44,060 --> 00:26:47,150
things that you could do for Debian

00:26:45,140 --> 00:26:49,580
maybe that you're not doing now that you

00:26:47,150 --> 00:26:53,140
could do or maybe things that are maybe

00:26:49,580 --> 00:26:53,140
more pipe dreams that you should do

00:26:56,140 --> 00:27:02,390
obviously we have lots of packages that

00:27:00,290 --> 00:27:05,590
are not yet in Devon so the first thing

00:27:02,390 --> 00:27:09,100
to do is to contribute symbol to Devon

00:27:05,590 --> 00:27:11,150
it's going to some some of them are

00:27:09,100 --> 00:27:12,770
mostly really because they were quite

00:27:11,150 --> 00:27:14,780
clean but some of them are really ugly

00:27:12,770 --> 00:27:17,120
because sometimes it's a wanted software

00:27:14,780 --> 00:27:19,310
quickly and I don't know if you have

00:27:17,120 --> 00:27:23,420
tried to package some security tools

00:27:19,310 --> 00:27:25,520
which would Ruby with lots of games

00:27:23,420 --> 00:27:28,990
which are downloaded on a specific

00:27:25,520 --> 00:27:31,610
version and which is not the current one

00:27:28,990 --> 00:27:34,250
and you have the opposite problem as

00:27:31,610 --> 00:27:38,470
well debian are sometimes quite older

00:27:34,250 --> 00:27:40,940
package so it's really I'd like to

00:27:38,470 --> 00:27:43,340
package them properly if you didn't

00:27:40,940 --> 00:27:46,940
we're quite a few package which are

00:27:43,340 --> 00:27:52,640
which do burn the lab multiple gems in

00:27:46,940 --> 00:27:54,050
it and this it's not going to you

00:27:52,640 --> 00:27:57,020
benefit from not having to divide by

00:27:54,050 --> 00:27:59,270
Debian's stricter quality standards we

00:27:57,020 --> 00:28:02,120
do benefit but we do suffer from it as

00:27:59,270 --> 00:28:05,660
well because while we it makes your life

00:28:02,120 --> 00:28:08,180
easier in some ways yeah anyway it would

00:28:05,660 --> 00:28:10,970
be nice to be able to contribute more

00:28:08,180 --> 00:28:15,350
tools and but it's the main value that

00:28:10,970 --> 00:28:18,950
we can bring to Devon I don't see one we

00:28:15,350 --> 00:28:25,160
can go further maybe integration but I'm

00:28:18,950 --> 00:28:28,280
not sure it's going to be useful yeah I

00:28:25,160 --> 00:28:29,930
mean obviously this stack of the stack

00:28:28,280 --> 00:28:31,580
of patches that we have constitutes

00:28:29,930 --> 00:28:34,580
technical debt from our point of view

00:28:31,580 --> 00:28:37,310
and we clearly need to pay that done for

00:28:34,580 --> 00:28:43,310
booth for our own good and for for

00:28:37,310 --> 00:28:45,410
Debian's the the more we do with with

00:28:43,310 --> 00:28:47,600
trying to improve our own distributions

00:28:45,410 --> 00:28:50,420
quality the more its it becomes obvious

00:28:47,600 --> 00:28:53,980
that's the best way to do this is often

00:28:50,420 --> 00:28:56,360
helping with with particularly big

00:28:53,980 --> 00:28:59,180
transitions in Debian and shifting

00:28:56,360 --> 00:29:02,870
shifting unstable forward at the fastest

00:28:59,180 --> 00:29:05,060
possible rate and I think the more

00:29:02,870 --> 00:29:08,240
people from our side that we can

00:29:05,060 --> 00:29:10,520
encourage to join Debian the relevant

00:29:08,240 --> 00:29:13,340
Debian teams to tell Bart with those the

00:29:10,520 --> 00:29:15,590
better I think we have we have quite a

00:29:13,340 --> 00:29:19,750
bit of manpower that there can be put to

00:29:15,590 --> 00:29:19,750
use for for a variety of things and

00:29:20,200 --> 00:29:24,380
again I'm probably going to be talking

00:29:22,610 --> 00:29:31,460
more about this on Thursday afternoon so

00:29:24,380 --> 00:29:33,140
we won't go on too far nine so yeah I'm

00:29:31,460 --> 00:29:34,970
we works out there probably about nine

00:29:33,140 --> 00:29:36,590
years ago that the busiest way to make

00:29:34,970 --> 00:29:39,950
our lives easier was to put stuff back

00:29:36,590 --> 00:29:43,010
upstream and so basically all the cross

00:29:39,950 --> 00:29:44,840
building and multi arch stuff has not

00:29:43,010 --> 00:29:47,030
been entirely driven by em Debian but

00:29:44,840 --> 00:29:48,140
that was part of it and so that's

00:29:47,030 --> 00:29:49,940
actually been quite a significant

00:29:48,140 --> 00:29:51,950
contribution and I think it's fair to

00:29:49,940 --> 00:29:53,030
say a Bunty has helped a lot because so

00:29:51,950 --> 00:29:54,179
be honest a transition like that it's

00:29:53,030 --> 00:29:55,619
easier to get done in a band

00:29:54,179 --> 00:29:57,779
than it is in Debian because you've only

00:29:55,619 --> 00:29:59,100
got to persuade a relatively small set

00:29:57,779 --> 00:30:01,080
of people we've commit access to

00:29:59,100 --> 00:30:02,490
everything rather than thousands of

00:30:01,080 --> 00:30:06,389
developers who go what is this crazy

00:30:02,490 --> 00:30:11,700
talk so yeah we have done some things

00:30:06,389 --> 00:30:13,379
and there's this private tool so yeah

00:30:11,700 --> 00:30:16,080
that's that's like this really more in

00:30:13,379 --> 00:30:18,330
an earlier question but one one thing

00:30:16,080 --> 00:30:20,490
that's that I very much noticed when

00:30:18,330 --> 00:30:22,139
trying to push particularly multi arch

00:30:20,490 --> 00:30:24,389
changes back into Debian is that we

00:30:22,139 --> 00:30:26,539
spend an awful lot of time explaining

00:30:24,389 --> 00:30:30,809
over and over and over and over again

00:30:26,539 --> 00:30:33,269
what what we're doing and it's it would

00:30:30,809 --> 00:30:36,769
be it would be helpful if if more people

00:30:33,269 --> 00:30:36,769
kept up with that kind of thing I think

00:30:40,610 --> 00:30:47,580
it's not directly related to the river

00:30:44,029 --> 00:30:51,269
derivatives but I would be interested to

00:30:47,580 --> 00:30:55,259
hear your ideas if you have ideas howdy

00:30:51,269 --> 00:30:57,749
bian could become more current to keep

00:30:55,259 --> 00:31:02,309
being stable but also to have more

00:30:57,749 --> 00:31:06,659
current software and what would your

00:31:02,309 --> 00:31:09,960
advice be for Debian in this regard we

00:31:06,659 --> 00:31:15,749
have an awful lot of blessed moment

00:31:09,960 --> 00:31:18,600
where we rely on we rely on human

00:31:15,749 --> 00:31:21,720
efforts to to do a lot of our testing in

00:31:18,600 --> 00:31:24,409
Debian so the whole the whole process of

00:31:21,720 --> 00:31:26,879
migrating from unstable to testing is

00:31:24,409 --> 00:31:28,440
completely reliant on humans telling it

00:31:26,879 --> 00:31:30,059
well not completely but it's very it's

00:31:28,440 --> 00:31:31,590
very extensively reliant in humans

00:31:30,059 --> 00:31:33,929
telling us whether it worked or not and

00:31:31,590 --> 00:31:35,850
in order to make that work in order to

00:31:33,929 --> 00:31:38,309
allow enough time for this whole process

00:31:35,850 --> 00:31:41,190
to operate we have to artificially slow

00:31:38,309 --> 00:31:45,149
ourselves down to allow ourselves time

00:31:41,190 --> 00:31:47,820
for humans to give us feedback the the

00:31:45,149 --> 00:31:51,629
more that we can move towards automated

00:31:47,820 --> 00:31:54,960
testing and responding quickly to you

00:31:51,629 --> 00:31:57,360
know promoting packages quickly in

00:31:54,960 --> 00:31:58,799
response to those those automated tests

00:31:57,360 --> 00:32:01,320
rather than having this very human

00:31:58,799 --> 00:32:03,389
driven process the more I think we'd be

00:32:01,320 --> 00:32:05,880
able to move forward much more quickly

00:32:03,389 --> 00:32:08,710
and with many fewer

00:32:05,880 --> 00:32:15,280
incredibly complicated tangles than we

00:32:08,710 --> 00:32:18,550
have at the moment Kelly we have a

00:32:15,280 --> 00:32:24,580
repository named bleeding-edge and where

00:32:18,550 --> 00:32:27,220
we basically use our package and we will

00:32:24,580 --> 00:32:31,000
grab the latest after inversion and when

00:32:27,220 --> 00:32:32,860
we detect one and we cut back to Dayton

00:32:31,000 --> 00:32:34,630
directory from the floral and we try to

00:32:32,860 --> 00:32:37,930
build it and make it available to

00:32:34,630 --> 00:32:40,920
advanced user we want to lock it up and

00:32:37,930 --> 00:32:44,080
so this gives us early feedback whether

00:32:40,920 --> 00:32:46,360
new versions are working or not

00:32:44,080 --> 00:32:53,110
without actually having to do lots of

00:32:46,360 --> 00:32:54,850
work maybe Devon could have some similar

00:32:53,110 --> 00:32:59,230
infrastructure as well it would have

00:32:54,850 --> 00:33:02,770
maintained resum because quite often our

00:32:59,230 --> 00:33:05,680
problem is Devon is taking too long

00:33:02,770 --> 00:33:07,540
I seems time to get down but there are

00:33:05,680 --> 00:33:09,640
many maintainer through we're not

00:33:07,540 --> 00:33:12,100
interested in doing it right right away

00:33:09,640 --> 00:33:14,050
they want the latest version and a good

00:33:12,100 --> 00:33:15,610
version for the next table but say it

00:33:14,050 --> 00:33:18,310
don't care about the current version in

00:33:15,610 --> 00:33:27,540
in unstable and until a few few days

00:33:18,310 --> 00:33:29,920
before the freeze yeah I'm not sure I

00:33:27,540 --> 00:33:32,380
don't know how to fix this problem but

00:33:29,920 --> 00:33:34,900
you notice it particularly when Milan ro

00:33:32,380 --> 00:33:35,830
hat instead of my am debian hat you know

00:33:34,900 --> 00:33:37,210
they're building the very latest

00:33:35,830 --> 00:33:39,130
everything all the time and there's

00:33:37,210 --> 00:33:42,250
quite a big impedance mismatch with

00:33:39,130 --> 00:33:44,260
trying to get that stuff into Debian at

00:33:42,250 --> 00:33:46,840
all you know even running it on the

00:33:44,260 --> 00:33:50,470
system and so yeah fast it would be

00:33:46,840 --> 00:33:53,110
better but I don't really have anything

00:33:50,470 --> 00:33:55,180
useful to say about Bill and what Collin

00:33:53,110 --> 00:33:56,620
said about trying to automate things

00:33:55,180 --> 00:34:00,330
because it's the only way to make things

00:33:56,620 --> 00:34:03,130
go faster anything well one thing is

00:34:00,330 --> 00:34:04,780
clearly the main problem is on the

00:34:03,130 --> 00:34:09,730
release management and it's a difficult

00:34:04,780 --> 00:34:11,250
issue but I do believe that PPA could

00:34:09,730 --> 00:34:13,840
really I because we could have

00:34:11,250 --> 00:34:15,550
transition prepared in para and instead

00:34:13,840 --> 00:34:17,860
of the release team having to say so

00:34:15,550 --> 00:34:18,320
next one is this one and we will take

00:34:17,860 --> 00:34:20,530
the

00:34:18,320 --> 00:34:22,880
it needs to go through we could have

00:34:20,530 --> 00:34:24,380
multiple transition prepared and the

00:34:22,880 --> 00:34:27,500
first one which is release is going to

00:34:24,380 --> 00:34:31,160
be the next one instead of having a

00:34:27,500 --> 00:34:35,330
human - only some guesses from humans to

00:34:31,160 --> 00:34:37,910
decide there's one potential problem

00:34:35,330 --> 00:34:40,100
there is that transitions get entangled

00:34:37,910 --> 00:34:44,060
with each other because of the

00:34:40,100 --> 00:34:46,730
dependency trees and stuff it's it's not

00:34:44,060 --> 00:34:50,080
a it's not a silver bullet by any means

00:34:46,730 --> 00:34:53,090
I entirely agree with Rafael would help

00:34:50,080 --> 00:34:58,850
one thing one thing we often notice in

00:34:53,090 --> 00:35:03,440
indigo - I've driven several transitions

00:34:58,850 --> 00:35:05,660
there which we've you know which we've

00:35:03,440 --> 00:35:07,610
started in our development release about

00:35:05,660 --> 00:35:08,930
the same time debian does often because

00:35:07,610 --> 00:35:11,750
we've just Auto synched something from

00:35:08,930 --> 00:35:15,020
unstable and then have to finish it the

00:35:11,750 --> 00:35:18,020
it's very noticeable if when you're

00:35:15,020 --> 00:35:20,000
following this in Ubuntu that there's a

00:35:18,020 --> 00:35:22,220
there's a handful of transitions that

00:35:20,000 --> 00:35:25,880
are managed exceptionally well the the

00:35:22,220 --> 00:35:27,500
pearl transitions are wonderful we we

00:35:25,880 --> 00:35:29,660
generally find that the vast majority

00:35:27,500 --> 00:35:32,000
has been prepared by the apparel team

00:35:29,660 --> 00:35:33,770
and there's absolutely no problem there

00:35:32,000 --> 00:35:36,530
are there are various other transitions

00:35:33,770 --> 00:35:38,270
where we find that there are a couple

00:35:36,530 --> 00:35:41,300
where I find that I basically had to do

00:35:38,270 --> 00:35:43,810
all the work because the if somebody had

00:35:41,300 --> 00:35:47,120
started in Debian and hadn't really

00:35:43,810 --> 00:35:48,830
hadn't properly tried to build

00:35:47,120 --> 00:35:53,540
everything that was going to need to be

00:35:48,830 --> 00:35:54,320
rebuilt and preparing this sort of thing

00:35:53,540 --> 00:35:56,870
in the PAS

00:35:54,320 --> 00:35:58,520
in a PPA you would still have to you'd

00:35:56,870 --> 00:36:00,020
still have to effectively redo the work

00:35:58,520 --> 00:36:02,750
and unstable you know you'd have to

00:36:00,020 --> 00:36:05,000
rebuild everything because partly

00:36:02,750 --> 00:36:07,550
because of this entanglement problem but

00:36:05,000 --> 00:36:10,040
you might at least have some chance of

00:36:07,550 --> 00:36:12,230
ensuring that people have built

00:36:10,040 --> 00:36:15,430
everything before they start which is

00:36:12,230 --> 00:36:15,430
not currently the case

00:36:23,050 --> 00:36:28,490
jerk yes but just a Tamiya see that he

00:36:26,210 --> 00:36:30,590
plans to start on this this week so on

00:36:28,490 --> 00:36:34,160
this PP a bike shed plan I think bike

00:36:30,590 --> 00:36:48,470
shed was the name we agreed on but I

00:36:34,160 --> 00:36:50,660
leave it to him so similar question so

00:36:48,470 --> 00:36:54,530
it's the release cycle working for you

00:36:50,660 --> 00:36:57,350
and for the derivatives that aren't

00:36:54,530 --> 00:36:59,540
based on Debian stable how is your

00:36:57,350 --> 00:37:02,420
release process different or better than

00:36:59,540 --> 00:37:07,310
Damian and how can we integrate some of

00:37:02,420 --> 00:37:08,840
those changes I'm saying this a lot but

00:37:07,310 --> 00:37:12,920
I'll talk about missing this it most of

00:37:08,840 --> 00:37:14,900
this and Thursday we but briefly we

00:37:12,920 --> 00:37:16,310
branch from unstable the the main

00:37:14,900 --> 00:37:19,550
effects that the release cycle has

00:37:16,310 --> 00:37:21,440
nurses that essentially the flow of

00:37:19,550 --> 00:37:23,270
incoming changes sometimes slows down we

00:37:21,440 --> 00:37:25,760
have to start sinking from from

00:37:23,270 --> 00:37:28,460
experimental instead which is a lot more

00:37:25,760 --> 00:37:30,470
ad hoc which we generally be a lot

00:37:28,460 --> 00:37:36,010
happier with shorter phrases I think

00:37:30,470 --> 00:37:38,300
every weight we carry is based

00:37:36,010 --> 00:37:41,630
difference table but there is no really

00:37:38,300 --> 00:37:44,180
no real policy we well when we started

00:37:41,630 --> 00:37:47,000
we walked on new easy because we knew it

00:37:44,180 --> 00:37:49,580
was going to be the next table we wait a

00:37:47,000 --> 00:37:50,930
number of problem because while all the

00:37:49,580 --> 00:37:53,000
tools were not really ready during the

00:37:50,930 --> 00:37:56,060
freeze and we contributed quite a few

00:37:53,000 --> 00:37:59,510
fix to a life build who even to gdm for

00:37:56,060 --> 00:38:04,880
accessibility issues and to multiple

00:37:59,510 --> 00:38:06,620
each one important things but and we do

00:38:04,880 --> 00:38:11,630
have two versions in parallel carry and

00:38:06,620 --> 00:38:14,180
carry dev but we mainly use it for few

00:38:11,630 --> 00:38:18,430
chests it's not really continuously main

00:38:14,180 --> 00:38:22,130
maintain erratically that one we have

00:38:18,430 --> 00:38:24,350
proposed you that area so we preparing

00:38:22,130 --> 00:38:26,920
this new stuff for the current version

00:38:24,350 --> 00:38:26,920
always

00:38:28,480 --> 00:38:35,740
we're not really set on a specific base

00:38:33,820 --> 00:38:37,420
it might be that in one year we're going

00:38:35,740 --> 00:38:39,910
to use different testing because with it

00:38:37,420 --> 00:38:42,329
too old for too many of our package it

00:38:39,910 --> 00:38:42,329
depends

00:38:43,800 --> 00:38:49,030
currently the stable release of the

00:38:47,140 --> 00:38:51,369
latest stable release of Judah Linux is

00:38:49,030 --> 00:38:54,579
still based on our stable but our

00:38:51,369 --> 00:38:59,710
objective is to be based on stable of

00:38:54,579 --> 00:39:02,140
course the release cycle is quite good

00:38:59,710 --> 00:39:06,940
for us because we don't have so much

00:39:02,140 --> 00:39:11,130
time to spend on setting up the

00:39:06,940 --> 00:39:14,560
environment for a new version or debian

00:39:11,130 --> 00:39:17,410
that said the main issue we could have

00:39:14,560 --> 00:39:21,369
with the current release cycle is a

00:39:17,410 --> 00:39:24,160
freshness of drivers for people who want

00:39:21,369 --> 00:39:27,000
to use a printer of adjust they've just

00:39:24,160 --> 00:39:32,260
bought at the supermarket for example

00:39:27,000 --> 00:39:35,800
and so regularly we see people coming

00:39:32,260 --> 00:39:39,369
and telling us where I can't make this

00:39:35,800 --> 00:39:43,540
work with Linux and he's unfortunately

00:39:39,369 --> 00:39:46,359
yes we know we are still using software

00:39:43,540 --> 00:39:51,760
but is 2 or 3 years old

00:39:46,359 --> 00:39:55,319
and we cannot do anything for you our

00:39:51,760 --> 00:40:00,609
issue is not really psycho research but

00:39:55,319 --> 00:40:03,730
the availability of fresh our packages

00:40:00,609 --> 00:40:05,829
for drivers and I'm not sure there is

00:40:03,730 --> 00:40:07,950
really a simple solution for this

00:40:05,829 --> 00:40:10,420
problem

00:40:07,950 --> 00:40:13,599
now that was mentioned in the kernel

00:40:10,420 --> 00:40:14,740
buff we're gonna try some stuff because

00:40:13,599 --> 00:40:17,079
the same problem is buying any new

00:40:14,740 --> 00:40:20,920
hardware may or may not work with old

00:40:17,079 --> 00:40:22,720
kernels so because our thing is entirely

00:40:20,920 --> 00:40:26,260
automated we have no problem whatsoever

00:40:22,720 --> 00:40:28,180
with the release cycle everything in the

00:40:26,260 --> 00:40:29,859
table gets processed as it comes out and

00:40:28,180 --> 00:40:31,329
when there's a stable release we just do

00:40:29,859 --> 00:40:33,460
a stable release exactly like Debian's

00:40:31,329 --> 00:40:35,589
and copy the install scripts and change

00:40:33,460 --> 00:40:40,480
them a bit sorry the install readme

00:40:35,589 --> 00:40:42,099
thing so yeah it works fine because most

00:40:40,480 --> 00:40:42,340
people want to work in unstable except

00:40:42,099 --> 00:40:43,420
some

00:40:42,340 --> 00:40:45,430
people who actually want to ship stable

00:40:43,420 --> 00:40:47,020
stuff and in practice they have a load

00:40:45,430 --> 00:40:48,850
of their own packages you know other

00:40:47,020 --> 00:40:51,070
people use our stuff to make actual

00:40:48,850 --> 00:40:52,840
other distros rather than those being

00:40:51,070 --> 00:40:58,560
anything other than exactly what Debian

00:40:52,840 --> 00:41:00,820
currently puts out and that's fine we

00:40:58,560 --> 00:41:03,280
that we need to realize a lot on the

00:41:00,820 --> 00:41:07,900
Debian stable release process itself so

00:41:03,280 --> 00:41:09,760
we use Debian that's Debian so what we

00:41:07,900 --> 00:41:12,070
do on top of this is menu a testing of

00:41:09,760 --> 00:41:14,380
our features and since half a year we

00:41:12,070 --> 00:41:16,210
also have Jenkins jobs which test the

00:41:14,380 --> 00:41:18,730
extra installation which helped us to

00:41:16,210 --> 00:41:20,590
find some bugs there we don't yet test

00:41:18,730 --> 00:41:23,230
the functionality or the network

00:41:20,590 --> 00:41:25,570
services combined with a main server to

00:41:23,230 --> 00:41:28,120
another system but that we plan to do

00:41:25,570 --> 00:41:38,710
this day for during development really

00:41:28,120 --> 00:41:39,570
daily automatically also so we have two

00:41:38,710 --> 00:41:43,060
minutes left

00:41:39,570 --> 00:41:45,490
is there anything any you and if the

00:41:43,060 --> 00:41:49,890
panelists want to say about Debian or

00:41:45,490 --> 00:41:53,620
your derivative or something else I

00:41:49,890 --> 00:41:57,370
don't really get mean provides a great

00:41:53,620 --> 00:42:02,650
best for us it's it's an astonishing

00:41:57,370 --> 00:42:04,480
effort to that's kept things working

00:42:02,650 --> 00:42:07,690
over this you know massive period of

00:42:04,480 --> 00:42:09,580
twenty years and notwithstanding Joey's

00:42:07,690 --> 00:42:14,530
Joey's talk has any reason why I can't

00:42:09,580 --> 00:42:17,950
continue for twenty more while cologne

00:42:14,530 --> 00:42:21,820
is starting so we're planning to be

00:42:17,950 --> 00:42:24,490
multiple years so obviously we we want

00:42:21,820 --> 00:42:27,700
even to strive for a long time and we're

00:42:24,490 --> 00:42:36,310
going to do our little share not much

00:42:27,700 --> 00:42:38,290
but a bit a bit if we have chosen Debian

00:42:36,310 --> 00:42:43,500
for Judy Nix it's just because it's

00:42:38,290 --> 00:42:48,370
great it works very well it's full of

00:42:43,500 --> 00:42:51,600
various software and of course this is

00:42:48,370 --> 00:42:51,600
driven by a community

00:42:52,000 --> 00:42:55,660
so yeah you could argue the Debian's a

00:42:53,859 --> 00:42:57,580
crappy base for an embedded distribution

00:42:55,660 --> 00:43:00,430
but actually it works a lot better than

00:42:57,580 --> 00:43:01,270
people expect it to I think that's

00:43:00,430 --> 00:43:03,609
called and says you've done a brilliant

00:43:01,270 --> 00:43:05,230
job the only thing is please take our

00:43:03,609 --> 00:43:07,840
patches about weird cross building crap

00:43:05,230 --> 00:43:15,760
okay it's important it doesn't matter if

00:43:07,840 --> 00:43:19,510
you understand just put it in Debian IDO

00:43:15,760 --> 00:43:21,550
is really happy Debian user stable user

00:43:19,510 --> 00:43:23,890
so thank you for your support supporting

00:43:21,550 --> 00:43:25,720
your packages and stable and also for

00:43:23,890 --> 00:43:28,980
providing stable back ports that's very

00:43:25,720 --> 00:43:28,980
useful thank you

00:43:30,860 --> 00:43:36,820

YouTube URL: https://www.youtube.com/watch?v=PWD_v9o20oQ


