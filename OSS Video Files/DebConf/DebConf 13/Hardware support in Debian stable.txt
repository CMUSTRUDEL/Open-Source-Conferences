Title: Hardware support in Debian stable
Publication date: 2017-11-28
Playlist: DebConf 13
Description: 
	by Ben Hutchings

At: DebConf13
https://debconf13.debconf.org/
Room: Second talk room
Scheduled start: 2013-08-11 17:30:00
Captions: 
	00:00:00,000 --> 00:00:40,640
a new system

00:00:44,070 --> 00:00:49,759
[Music]

00:00:51,920 --> 00:00:56,649
[Music]

00:01:07,700 --> 00:01:11,680
[Music]

00:01:22,620 --> 00:01:25,669
[Music]

00:01:31,270 --> 00:01:34,420
to be

00:01:59,549 --> 00:02:41,170
now there is this the rest of you if you

00:02:37,660 --> 00:02:55,510
take all these drivers from them say

00:02:41,170 --> 00:02:57,370
they 3.10 their aggressions where this

00:02:55,510 --> 00:02:59,970
way I probably knew my way of working

00:02:57,370 --> 00:02:59,970
aggressions

00:03:04,260 --> 00:03:07,360
[Music]

00:03:19,130 --> 00:03:23,730
[Music]

00:03:21,109 --> 00:03:26,790
what about just using new attendants who

00:03:23,730 --> 00:03:28,950
exist because if you make available

00:03:26,790 --> 00:03:35,340
resumes they may not come back for

00:03:28,950 --> 00:03:37,469
things just use a new partition from the

00:03:35,340 --> 00:03:50,099
restaurant system so you get me a text

00:03:37,469 --> 00:03:51,510
to work if you've just a bacon we don't

00:03:50,099 --> 00:04:02,790
have a kind of testing resources

00:03:51,510 --> 00:04:05,459
available heavy so you want to consider

00:04:02,790 --> 00:04:08,129
how we do the penalty stuff as opposed

00:04:05,459 --> 00:04:11,219
to just saying if you've got new album

00:04:08,129 --> 00:04:12,599
in you can realize that is an option but

00:04:11,219 --> 00:04:14,989
we will then need to make it easy for

00:04:12,599 --> 00:04:18,500
people to install activex evidently

00:04:14,989 --> 00:04:18,500
security supported

00:04:26,870 --> 00:04:29,080
so

00:04:29,180 --> 00:04:36,410
I don't put the GPU drivers bunch of

00:04:33,910 --> 00:04:39,050
distributions had success with baseline

00:04:36,410 --> 00:04:41,360
is taking the whole erm slash directory

00:04:39,050 --> 00:04:45,050
popping it over and then you cherry pick

00:04:41,360 --> 00:04:48,880
a couple of other patches like this one

00:04:45,050 --> 00:04:53,419
core changing through ten or so for the

00:04:48,880 --> 00:05:01,389
new tech stack and that seems like a

00:04:53,419 --> 00:05:01,389
potential middle ground between instead

00:05:01,720 --> 00:05:35,300
because we need to make a real big

00:05:32,229 --> 00:05:38,270
effort to get it to make sure use do

00:05:35,300 --> 00:05:40,810
test do just easily catch most of those

00:05:38,270 --> 00:05:40,810
regressions

00:05:45,330 --> 00:05:53,420
the risk is that you get we say please

00:05:49,170 --> 00:05:55,620
bless this see if it works that you get

00:05:53,420 --> 00:05:57,960
you get messing feedback from people

00:05:55,620 --> 00:06:00,090
throughout who's chips weren't supports

00:05:57,960 --> 00:06:01,590
it and they say great my my chip is now

00:06:00,090 --> 00:06:06,620
supported it works fine but you don't

00:06:01,590 --> 00:06:06,620
get from people using their parents

00:06:11,840 --> 00:06:18,860
solution American what can they call a

00:06:17,340 --> 00:06:21,330
betrayal routine

00:06:18,860 --> 00:06:24,150
so what solution we've been talking

00:06:21,330 --> 00:06:27,660
about implementing in the user space

00:06:24,150 --> 00:06:29,580
side of the graphics driver is you know

00:06:27,660 --> 00:06:31,530
there's this conflict between we really

00:06:29,580 --> 00:06:32,760
want to be able to get the current

00:06:31,530 --> 00:06:34,620
version of our driver for the new

00:06:32,760 --> 00:06:37,470
chipsets into old person and

00:06:34,620 --> 00:06:39,960
distributions but no distribution wants

00:06:37,470 --> 00:06:41,820
to take the new beggar because yeah you

00:06:39,960 --> 00:06:43,320
know you broke the old generation on

00:06:41,820 --> 00:06:47,250
some application that you're not going

00:06:43,320 --> 00:06:52,650
around to fixing it down so one of the

00:06:47,250 --> 00:06:55,110
ideas we had was okay let's take the

00:06:52,650 --> 00:06:57,390
lagea loader the loader of the graphic

00:06:55,110 --> 00:06:59,700
factory have it look at the PC ID of

00:06:57,390 --> 00:07:01,710
your chipset and decide which file to

00:06:59,700 --> 00:07:06,200
open based on that and then you could

00:07:01,710 --> 00:07:08,730
have if debian could choose to have the

00:07:06,200 --> 00:07:11,040
current generation of chipsets load the

00:07:08,730 --> 00:07:13,020
current virtual drive already supports

00:07:11,040 --> 00:07:15,030
them and then when newer chip that's

00:07:13,020 --> 00:07:16,650
come along later you would just update

00:07:15,030 --> 00:07:19,380
to say oh yeah and all these new

00:07:16,650 --> 00:07:20,700
chipsets load this new driver off to the

00:07:19,380 --> 00:07:25,080
side that was built using a newer

00:07:20,700 --> 00:07:26,430
version of ASA and then you don't have

00:07:25,080 --> 00:07:29,010
regressions because otherwise it didn't

00:07:26,430 --> 00:07:31,130
you up at all yeah actually I never

00:07:29,010 --> 00:07:35,410
understood why

00:07:31,130 --> 00:07:38,090
i 9:15 those drives haven't been split

00:07:35,410 --> 00:07:42,410
so that the refactoring support new

00:07:38,090 --> 00:07:44,120
trick doesn't has no effect on it so we

00:07:42,410 --> 00:07:46,550
actually did just split off the

00:07:44,120 --> 00:07:48,110
remainder of the 915 load from 95 we

00:07:46,550 --> 00:07:51,860
used every pile of sugar coated about

00:07:48,110 --> 00:07:56,330
15,000 lines we split that into its down

00:07:51,860 --> 00:07:58,370
to 10,000 lines between the two after

00:07:56,330 --> 00:08:00,680
deleting a bunch on both sides I saw was

00:07:58,370 --> 00:08:03,980
a big increase in code we would have to

00:08:00,680 --> 00:08:06,080
maintain over time about in addition if

00:08:03,980 --> 00:08:10,040
I think was five or 10,000 lines of code

00:08:06,080 --> 00:08:11,480
to maintain for us but now when we

00:08:10,040 --> 00:08:15,920
modify the new driver we don't have to

00:08:11,480 --> 00:08:18,710
break the old one right in Mesa yeah

00:08:15,920 --> 00:08:20,540
and we're we've talked constantly about

00:08:18,710 --> 00:08:21,860
well you know is there another split we

00:08:20,540 --> 00:08:23,960
want to do but the question is always

00:08:21,860 --> 00:08:30,650
which generation because because what

00:08:23,960 --> 00:08:32,479
yes duplicate code man you know once we

00:08:30,650 --> 00:08:34,789
do that basically you wouldn't end up

00:08:32,479 --> 00:08:36,080
fixing anything on older drivers and we

00:08:34,789 --> 00:08:38,330
do have but that's fine tribute errs

00:08:36,080 --> 00:08:40,430
because we have contributors improving

00:08:38,330 --> 00:08:42,050
older drivers generally which is pretty

00:08:40,430 --> 00:08:43,910
cool like being able to run new

00:08:42,050 --> 00:08:47,090
applications on your old iron lake

00:08:43,910 --> 00:08:49,640
system from three years ago now you know

00:08:47,090 --> 00:08:51,650
that's that's neat that we're doing that

00:08:49,640 --> 00:08:55,430
open source software I think I think we

00:08:51,650 --> 00:08:57,050
want to make that possible but yeah for

00:08:55,430 --> 00:08:59,180
a stable distribution I think you want

00:08:57,050 --> 00:09:03,920
to avoid pulling in those newer feature

00:08:59,180 --> 00:09:06,650
updates so yeah you know is matching

00:09:03,920 --> 00:09:08,570
based on PCIe going to be enough for

00:09:06,650 --> 00:09:11,840
people to say yeah we could pull in new

00:09:08,570 --> 00:09:16,220
mesa for new chipsets and keep the old

00:09:11,840 --> 00:09:19,400
stuff for the old stuff if you can if we

00:09:16,220 --> 00:09:21,980
can make that work yeah I don't know how

00:09:19,400 --> 00:09:23,540
that would work in the in the kernel

00:09:21,980 --> 00:09:27,320
level how you deal with having to now

00:09:23,540 --> 00:09:29,480
915 drivers maybe the worst part for the

00:09:27,320 --> 00:09:31,550
kernel is not going to be the 915 driver

00:09:29,480 --> 00:09:34,490
which you could presumably you know do

00:09:31,550 --> 00:09:37,520
some said job to subset symbols but

00:09:34,490 --> 00:09:40,570
there's also the shared DRM core which

00:09:37,520 --> 00:09:42,680
is yes additionally that was the

00:09:40,570 --> 00:09:43,949
communication between the different DRM

00:09:42,680 --> 00:09:46,049
drivers

00:09:43,949 --> 00:09:49,339
I don't think you could do that split in

00:09:46,049 --> 00:09:49,339
the same way in the current yeah

00:09:51,139 --> 00:10:00,529
versions yeah see when you see you would

00:09:56,040 --> 00:10:04,649
have mason 9.1 you know today with the

00:10:00,529 --> 00:10:06,689
intel up Ivybridge driver and the Radeon

00:10:04,649 --> 00:10:09,299
drivers and the new bow drivers and then

00:10:06,689 --> 00:10:13,859
you know stable would also end up with

00:10:09,299 --> 00:10:15,119
Mason 9.2 for bait rail the next

00:10:13,859 --> 00:10:30,119
platform that's coming out that we're

00:10:15,119 --> 00:10:32,279
still building the coach so the I don't

00:10:30,119 --> 00:10:36,059
know how that would get managed from the

00:10:32,279 --> 00:10:38,040
like get packaged version control side

00:10:36,059 --> 00:10:42,239
of things but in terms of the installed

00:10:38,040 --> 00:10:45,269
files it's just these DRI dots so file

00:10:42,239 --> 00:10:46,980
names and all we would what we need to

00:10:45,269 --> 00:10:48,809
do is add this code for having the

00:10:46,980 --> 00:10:51,299
loader look at your PC ID and decide a

00:10:48,809 --> 00:10:54,499
different name based on that so that's

00:10:51,299 --> 00:10:54,499
that's my job

00:11:08,190 --> 00:11:15,880
okay we didn't really get a we didn't

00:11:13,240 --> 00:11:19,240
really get an answer there about how we

00:11:15,880 --> 00:11:25,529
were deal with the DRM core changes

00:11:19,240 --> 00:11:25,529
there I've got nothing on that one

00:11:45,200 --> 00:11:52,720
[Music]

00:11:47,550 --> 00:11:55,149
that seems to be easy because there

00:11:52,720 --> 00:12:00,490
aren't so many changes in the the

00:11:55,149 --> 00:12:02,050
network driver API and since that's my

00:12:00,490 --> 00:12:05,440
day job is maintaining a network driver

00:12:02,050 --> 00:12:07,149
I know all about the gotchas four back

00:12:05,440 --> 00:12:11,410
with back and forth about ability there

00:12:07,149 --> 00:12:13,480
so that's I won't say that wheezy it up

00:12:11,410 --> 00:12:17,050
to date with Ethernet drive support but

00:12:13,480 --> 00:12:23,490
that's that's something I can think is

00:12:17,050 --> 00:12:23,490
is easier to do to support used to do

00:12:36,100 --> 00:12:45,019
to the compact drivers the compact

00:12:41,000 --> 00:12:46,699
drivers project does cover some Ethernet

00:12:45,019 --> 00:13:07,209
drivers a thing I'm not sure exactly

00:12:46,699 --> 00:13:07,209
which to see no I don't have a list

00:13:11,690 --> 00:13:18,080
so could we go could we perhaps half

00:13:15,680 --> 00:13:21,770
compact drivers an optional as an extra

00:13:18,080 --> 00:13:36,500
separate package and what would that's

00:13:21,770 --> 00:13:41,750
what would that how could that work as a

00:13:36,500 --> 00:13:43,760
package of of the newer drivers with

00:13:41,750 --> 00:13:46,190
some compatibility coat so they can

00:13:43,760 --> 00:13:48,470
build against an older older kernel

00:13:46,190 --> 00:13:51,670
headers he would build those out of tree

00:13:48,470 --> 00:13:53,870
well that's that's heist meant to work

00:13:51,670 --> 00:13:58,100
so if we would have package that that

00:13:53,870 --> 00:14:01,610
would I suppose those drugs modules will

00:13:58,100 --> 00:14:05,170
get installed into the updates directory

00:14:01,610 --> 00:14:10,270
honest they would override the that the

00:14:05,170 --> 00:14:10,270
drivers part of a Linux image package

00:14:15,850 --> 00:14:23,660
and you need to have the I supposedly to

00:14:19,730 --> 00:14:27,730
have the installer work out that if you

00:14:23,660 --> 00:14:31,190
have if you have a PC ID IDs presence I

00:14:27,730 --> 00:14:33,980
guess you need to have discover know

00:14:31,190 --> 00:14:55,730
that with with these PC IDs you need

00:14:33,980 --> 00:15:05,050
you'll need compared drivers yes would

00:14:55,730 --> 00:15:05,050
you yeah

00:15:14,580 --> 00:15:17,950
but there's no there's no regression for

00:15:16,840 --> 00:15:22,810
people who didn't need it in the first

00:15:17,950 --> 00:15:25,030
place so I don't know it's it's suddenly

00:15:22,810 --> 00:15:26,080
no worse than what I would have at the

00:15:25,030 --> 00:15:28,930
moment which is they will have the

00:15:26,080 --> 00:15:30,250
option to install a new kernel from from

00:15:28,930 --> 00:15:31,720
back box and then if they want to secure

00:15:30,250 --> 00:15:36,130
any security support they have to keep

00:15:31,720 --> 00:15:52,600
updating that as well or anything close

00:15:36,130 --> 00:15:54,070
to security support doesn't have no it

00:15:52,600 --> 00:15:58,770
hasn't been no one's attempts to package

00:15:54,070 --> 00:15:58,770
this yet potentially you could do that

00:16:19,470 --> 00:16:28,200
or raise your hand

00:16:21,339 --> 00:16:28,200
Mike anybody's

00:16:32,230 --> 00:16:37,460
don't brighter than the one you've

00:16:34,010 --> 00:16:40,270
already had it so we just need some

00:16:37,460 --> 00:16:40,270
other volunteers try it

00:16:57,200 --> 00:17:08,240
yeah well I'll have to suppose I'll have

00:16:58,940 --> 00:17:10,569
a go at packaging combat drivers that

00:17:08,240 --> 00:17:10,569

YouTube URL: https://www.youtube.com/watch?v=vlJrqh3P15c


