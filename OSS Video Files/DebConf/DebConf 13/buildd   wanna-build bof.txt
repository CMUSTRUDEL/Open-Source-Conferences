Title: buildd   wanna-build bof
Publication date: 2017-11-29
Playlist: DebConf 13
Description: 
	by Andi Barth

At: DebConf13
https://debconf13.debconf.org/
Room: Second talk room
Scheduled start: 2013-08-15 10:30:00
Captions: 
	00:00:00,000 --> 00:00:05,160
thanks for the introduction just the

00:00:03,000 --> 00:00:07,290
first note I've a few exercises in this

00:00:05,160 --> 00:00:09,750
presentation I don't know how much you

00:00:07,290 --> 00:00:12,150
are acquainted with infrastructure so I

00:00:09,750 --> 00:00:14,940
might skip over source if if you are

00:00:12,150 --> 00:00:16,890
already familiar otherwise I might want

00:00:14,940 --> 00:00:18,779
to say a bit more so that we understand

00:00:16,890 --> 00:00:21,090
what we are talking about so if you

00:00:18,779 --> 00:00:23,189
think everything is already known please

00:00:21,090 --> 00:00:25,500
just say so but I sees a few new faces

00:00:23,189 --> 00:00:27,869
so I'm not sure if I should really short

00:00:25,500 --> 00:00:29,519
so first of all what is it

00:00:27,869 --> 00:00:32,040
Bonaparte is a central automating

00:00:29,519 --> 00:00:34,500
database we have a Debian it keeps it

00:00:32,040 --> 00:00:37,829
like of the state of packages it

00:00:34,500 --> 00:00:40,590
merchant package of FTP masters in over

00:00:37,829 --> 00:00:42,629
50 minutes except UMD install it

00:00:40,590 --> 00:00:44,610
schedules packages for being built can

00:00:42,629 --> 00:00:46,829
take you to court minimal requests and

00:00:44,610 --> 00:00:49,110
so on and it has map interface

00:00:46,829 --> 00:00:53,280
said you might have already done a

00:00:49,110 --> 00:00:55,050
course then we have this ability man

00:00:53,280 --> 00:00:57,870
itself set some demons at once on the

00:00:55,050 --> 00:01:00,390
autopilot machine itself it connects to

00:00:57,870 --> 00:01:03,870
run a build its start spare building

00:01:00,390 --> 00:01:05,700
packages and say let's say similar to

00:01:03,870 --> 00:01:09,299
the ones we already have in the Debian

00:01:05,700 --> 00:01:11,490
archive more on that later when why do

00:01:09,299 --> 00:01:13,320
we need it because that's the only way

00:01:11,490 --> 00:01:15,780
we can make sure our packages are built

00:01:13,320 --> 00:01:18,299
in a timely manner on all any textures

00:01:15,780 --> 00:01:19,979
and if we have a delaila

00:01:18,299 --> 00:01:21,780
like half a days it's just to be

00:01:19,979 --> 00:01:24,420
expected because sometimes beauties are

00:01:21,780 --> 00:01:26,340
busy with things like oh yes two

00:01:24,420 --> 00:01:28,799
different g2z version starts we upload a

00:01:26,340 --> 00:01:30,720
plus one OpenOffice or plus one security

00:01:28,799 --> 00:01:34,680
update of the kernel and that make have

00:01:30,720 --> 00:01:37,500
some yeah may waste some time and we

00:01:34,680 --> 00:01:39,479
have an shared responsibility for

00:01:37,500 --> 00:01:42,000
success successful building its both

00:01:39,479 --> 00:01:44,070
with maintenance and porters and if it

00:01:42,000 --> 00:01:46,740
fails to build usual ways

00:01:44,070 --> 00:01:48,840
find out why you say our porters change

00:01:46,740 --> 00:01:52,470
suits uploads those hooks fix those

00:01:48,840 --> 00:01:55,110
packages to unstable and be happy so now

00:01:52,470 --> 00:01:57,299
that's a lifecycle what happens and

00:01:55,110 --> 00:02:00,119
source package gets uploaded to FTP

00:01:57,299 --> 00:02:02,850
master senate's sooner or later accepted

00:02:00,119 --> 00:02:05,490
into the archive then Vanderbilt gets

00:02:02,850 --> 00:02:06,990
pushed past index files and index files

00:02:05,490 --> 00:02:09,390
are trust the same that everybody here

00:02:06,990 --> 00:02:12,870
so it's a packages file and the sources

00:02:09,390 --> 00:02:13,890
file so it merge them it says okay

00:02:12,870 --> 00:02:15,810
here's

00:02:13,890 --> 00:02:18,120
suicides has not been built yet on that

00:02:15,810 --> 00:02:20,790
I he texture it marks a package as needs

00:02:18,120 --> 00:02:23,580
built sudden a building pick picks a

00:02:20,790 --> 00:02:25,530
package up suddenly it gets eventually

00:02:23,580 --> 00:02:28,380
be built sudden it's marked so it's

00:02:25,530 --> 00:02:30,840
uploaded and its end its installed if P

00:02:28,380 --> 00:02:32,610
master and then Vanderbilt says oh yes

00:02:30,840 --> 00:02:35,220
we found out now it's installed it's in

00:02:32,610 --> 00:02:36,600
its proto state a state of installed and

00:02:35,220 --> 00:02:38,970
then of course again a next source

00:02:36,600 --> 00:02:43,620
version package is uploaded some days

00:02:38,970 --> 00:02:45,780
later and it all begins again we might

00:02:43,620 --> 00:02:47,850
have a few problems there so in some

00:02:45,780 --> 00:02:50,100
kinds in cases the autopilot cannot set

00:02:47,850 --> 00:02:52,769
up the changeful properly in which case

00:02:50,100 --> 00:02:54,720
the packages just give them back if it

00:02:52,769 --> 00:02:56,760
fails to build the package and smile is

00:02:54,720 --> 00:02:59,630
marked as fail it which means it can't

00:02:56,760 --> 00:03:02,040
be all to build and sometimes pictures

00:02:59,630 --> 00:03:04,320
disappear and reappear in its build list

00:03:02,040 --> 00:03:06,480
that might be because of a given backup

00:03:04,320 --> 00:03:08,790
off or because automatic British

00:03:06,480 --> 00:03:11,910
dependency checking and there are some

00:03:08,790 --> 00:03:13,560
interesting things going on and a full

00:03:11,910 --> 00:03:15,930
page lock is always available on the

00:03:13,560 --> 00:03:18,390
build team debian oxide except for

00:03:15,930 --> 00:03:19,860
security builds so if you have an issue

00:03:18,390 --> 00:03:21,840
I don't know what went wrong

00:03:19,860 --> 00:03:25,610
please check sir and there should be a

00:03:21,840 --> 00:03:28,320
full build available for your package so

00:03:25,610 --> 00:03:31,980
where you will be used to do that mostly

00:03:28,320 --> 00:03:35,940
in change in clone change via LVM now we

00:03:31,980 --> 00:03:37,769
use calm we do outer audition of extra

00:03:35,940 --> 00:03:39,900
mental back ports whatever sources lines

00:03:37,769 --> 00:03:42,870
if necessarily but by us I buy a script

00:03:39,900 --> 00:03:45,060
which helped us quite a lot and to

00:03:42,870 --> 00:03:47,130
change that always contains the main and

00:03:45,060 --> 00:03:47,970
concert binary packages but doesn't

00:03:47,130 --> 00:03:51,209
contain the

00:03:47,970 --> 00:03:53,160
Anansi binary packages independent of if

00:03:51,209 --> 00:03:54,930
we build from main concept born on flee

00:03:53,160 --> 00:03:56,820
I mean that's a very important thing to

00:03:54,930 --> 00:03:58,829
know because we got a lot of complaints

00:03:56,820 --> 00:04:00,480
about viruses nonce we dependency not

00:03:58,829 --> 00:04:04,530
work because we don't have normal food

00:04:00,480 --> 00:04:08,790
apparently dependence is working but you

00:04:04,530 --> 00:04:13,560
ought to sign it I mean that's yeah such

00:04:08,790 --> 00:04:17,760
as working now these days if package ash

00:04:13,560 --> 00:04:21,840
are specific basically saying we don't

00:04:17,760 --> 00:04:25,800
want to build a package on this I Texas

00:04:21,840 --> 00:04:27,540
we now resistant mostly polar parcel

00:04:25,800 --> 00:04:30,000
source package description

00:04:27,540 --> 00:04:33,090
but we still can they still have some

00:04:30,000 --> 00:04:35,340
annual list and we still use it so a bit

00:04:33,090 --> 00:04:37,680
more about our infrastructure I already

00:04:35,340 --> 00:04:40,140
said about the website we have run a

00:04:37,680 --> 00:04:42,120
build which is on Greek Debian or

00:04:40,140 --> 00:04:44,820
wherever developer could access it and

00:04:42,120 --> 00:04:47,460
it's a good archive where everybody

00:04:44,820 --> 00:04:50,060
could access it we have built e and s

00:04:47,460 --> 00:04:53,010
built as I said before we have a few

00:04:50,060 --> 00:04:55,890
differences to the packages in Debian

00:04:53,010 --> 00:04:58,980
say I thought in a common bla in a

00:04:55,890 --> 00:05:02,520
comment get Pam repository however we

00:04:58,980 --> 00:05:05,250
live on the branch beauty or 64 and we

00:05:02,520 --> 00:05:08,730
currently have 18 specific pictures

00:05:05,250 --> 00:05:11,670
relative to us Debian package more

00:05:08,730 --> 00:05:14,610
mostly small things like oh yes

00:05:11,670 --> 00:05:16,800
so FTP Mars occasion for this and that

00:05:14,610 --> 00:05:19,500
trust has been changed sometimes a bit

00:05:16,800 --> 00:05:21,530
bit larger ones because our most

00:05:19,500 --> 00:05:26,130
important goal is to sings runs

00:05:21,530 --> 00:05:28,380
7.24 so what did we do for BC we up say

00:05:26,130 --> 00:05:32,160
we upgrade upstream version although at

00:05:28,380 --> 00:05:34,140
6 4 spaces for our own version and had

00:05:32,160 --> 00:05:37,440
some yeah and need to do some

00:05:34,140 --> 00:05:40,920
adjustments a semi notice that LEM

00:05:37,440 --> 00:05:42,900
snapshots are not bloating in VC this is

00:05:40,920 --> 00:05:47,040
back report is not Debian specific

00:05:42,900 --> 00:05:48,870
feature if you if you if you searching

00:05:47,040 --> 00:05:51,540
around in the art review or in the back

00:05:48,870 --> 00:05:55,500
report you will see that was a leap was

00:05:51,540 --> 00:05:57,450
from fedora let head fools and so on so

00:05:55,500 --> 00:05:59,880
Trust has an interesting way L VM

00:05:57,450 --> 00:06:02,850
snapshot sometimes are broken broken

00:05:59,880 --> 00:06:06,560
trust means that if you said somehow is

00:06:02,850 --> 00:06:09,090
a mixture between LVM and you def

00:06:06,560 --> 00:06:11,040
makes it impossible for the l vm

00:06:09,090 --> 00:06:13,770
comments to run which means if you start

00:06:11,040 --> 00:06:15,060
some several just freeze and the only

00:06:13,770 --> 00:06:18,360
way to escape that this is the boot in

00:06:15,060 --> 00:06:21,870
your system just didn't make us a really

00:06:18,360 --> 00:06:25,020
happy and so depending on the eye

00:06:21,870 --> 00:06:27,060
texture EA 64 is only good because it's

00:06:25,020 --> 00:06:28,890
fast in detecting such things we needed

00:06:27,060 --> 00:06:30,980
less than one day to the earth with a

00:06:28,890 --> 00:06:36,060
produces on a year 64 in average case

00:06:30,980 --> 00:06:39,630
other ie textures needed days for it so

00:06:36,060 --> 00:06:41,280
even as a fast ones like amd64 doesn't

00:06:39,630 --> 00:06:43,920
get as good with porkness

00:06:41,280 --> 00:06:47,100
sixty-four but it eventually will also

00:06:43,920 --> 00:06:52,470
get broken sending bits right pretty LFS

00:06:47,100 --> 00:06:54,600
and it's as a very spoke it's on a 64

00:06:52,470 --> 00:06:57,000
even it doesn't survive one build

00:06:54,600 --> 00:06:59,400
whereas LVM at least usually does

00:06:57,000 --> 00:07:01,440
something like three to five builds

00:06:59,400 --> 00:07:03,419
so now has been switched to table

00:07:01,440 --> 00:07:06,240
exchange suits and we adjusted a few

00:07:03,419 --> 00:07:07,620
extended four options I mean if you if

00:07:06,240 --> 00:07:09,900
you if you love for that data

00:07:07,620 --> 00:07:12,930
don't use source but if you don't as a

00:07:09,900 --> 00:07:15,150
really good because it's more or less

00:07:12,930 --> 00:07:17,700
convert sex and for file system through

00:07:15,150 --> 00:07:19,860
an lamps to interior to entertain temp

00:07:17,700 --> 00:07:22,470
FS file system which is good for build

00:07:19,860 --> 00:07:24,360
speed and then we noticed said a spark

00:07:22,470 --> 00:07:26,660
we can't run the stable corners because

00:07:24,360 --> 00:07:28,380
the stable corners will just cook

00:07:26,660 --> 00:07:29,850
relational system and that's an

00:07:28,380 --> 00:07:31,800
interesting way and we need to run old

00:07:29,850 --> 00:07:33,540
stable stable kernels so our current

00:07:31,800 --> 00:07:36,900
spark business on this old stable

00:07:33,540 --> 00:07:40,710
kernels which does not only make this D

00:07:36,900 --> 00:07:44,220
is a not happy but but also not us so

00:07:40,710 --> 00:07:46,260
this was a fast ago so built in and all

00:07:44,220 --> 00:07:48,600
these in the blue things I mean this is

00:07:46,260 --> 00:07:50,160
a buff so that this more less a

00:07:48,600 --> 00:07:52,800
discussion but I just wanted to give us

00:07:50,160 --> 00:07:58,190
some common points to start now

00:07:52,800 --> 00:08:01,970
discussions or suggestions whatever

00:07:58,190 --> 00:08:01,970
above is your place

00:08:06,590 --> 00:08:14,270
and all-star yeah so I'll start the ball

00:08:11,160 --> 00:08:17,690
rolling with multi-hour on build these

00:08:14,270 --> 00:08:19,800
but we'll miss multi-attribute this and

00:08:17,690 --> 00:08:21,630
being able to say first that you have a

00:08:19,800 --> 00:08:24,000
build dependency say you're building on

00:08:21,630 --> 00:08:26,130
amd64 but you need the 9 3 6 package to

00:08:24,000 --> 00:08:29,070
build is there any chance we could get

00:08:26,130 --> 00:08:29,820
that oh yes of course there's a quite

00:08:29,070 --> 00:08:35,160
easy chance

00:08:29,820 --> 00:08:37,830
simply open pictures yeah I mean the

00:08:35,160 --> 00:08:40,260
principle kind of thing on the I mean I

00:08:37,830 --> 00:08:42,630
see a few as ability people here zoom as

00:08:40,260 --> 00:08:48,540
well so please please please to speak

00:08:42,630 --> 00:08:50,610
about set but my gut feeling is said I

00:08:48,540 --> 00:08:52,890
don't yet see how we could integrate

00:08:50,610 --> 00:08:55,380
said in a way that doesn't make it

00:08:52,890 --> 00:08:58,530
overly complex this doesn't mean I'm

00:08:55,380 --> 00:09:01,010
opposed to it but I would like to see a

00:08:58,530 --> 00:09:03,480
concept impetus first

00:09:01,010 --> 00:09:05,160
yeah we've we've been pretty leery about

00:09:03,480 --> 00:09:07,980
turning out on the winter even though

00:09:05,160 --> 00:09:13,350
we've are empty six four systems by

00:09:07,980 --> 00:09:16,860
defaults for users use six which I think

00:09:13,350 --> 00:09:18,300
Debian should as well but the we've been

00:09:16,860 --> 00:09:20,460
pretty nervous about turning the other

00:09:18,300 --> 00:09:23,370
on build ease just because we didn't

00:09:20,460 --> 00:09:27,780
want to run into we didn't really want

00:09:23,370 --> 00:09:29,490
to run into bugs with packages

00:09:27,780 --> 00:09:32,370
accidentally being chosen from the wrong

00:09:29,490 --> 00:09:34,470
architecture or something and if you

00:09:32,370 --> 00:09:36,900
know if a def package is installed on

00:09:34,470 --> 00:09:39,720
your native architecture but not and not

00:09:36,900 --> 00:09:41,550
in the foreign architecture sorry vice

00:09:39,720 --> 00:09:43,020
versa if it's uninstalled on your native

00:09:41,550 --> 00:09:45,540
architecture but installable in the

00:09:43,020 --> 00:09:54,750
foreign architecture then it's

00:09:45,540 --> 00:09:56,700
conceivable so it's conceivable the

00:09:54,750 --> 00:10:00,540
doctor could install the foreign one

00:09:56,700 --> 00:10:02,340
instead which would be quite scary so I

00:10:00,540 --> 00:10:04,860
think I'd like to see this somehow

00:10:02,340 --> 00:10:07,050
turned on only four selected packages

00:10:04,860 --> 00:10:09,060
maybe yes it's what I've also just

00:10:07,050 --> 00:10:11,970
thinking is that if you say we need this

00:10:09,060 --> 00:10:16,200
kind of Paris's package we happen let's

00:10:11,970 --> 00:10:18,540
say a trusted sources list and I trusted

00:10:16,200 --> 00:10:20,400
a preferences with trust allows say

00:10:18,540 --> 00:10:23,370
peckish we actually need and be in so

00:10:20,400 --> 00:10:25,740
we're basically even already on a page

00:10:23,370 --> 00:10:27,510
level we have on sensor 5 let's say for

00:10:25,740 --> 00:10:30,060
this packets okay to coincide exactly

00:10:27,510 --> 00:10:32,310
these packages or whatever just say in

00:10:30,060 --> 00:10:35,240
case this explicit dependence it's ok

00:10:32,310 --> 00:10:38,400
and as a not but I fail a bit to Caesar

00:10:35,240 --> 00:10:40,560
also the basic code will be written to

00:10:38,400 --> 00:10:43,200
supported in a vase it doesn't Blake on

00:10:40,560 --> 00:10:44,490
every occasion yeah we it strikes me

00:10:43,200 --> 00:10:47,100
that we end up with something like

00:10:44,490 --> 00:10:49,560
packages aren't specific or something I

00:10:47,100 --> 00:10:51,510
don't want I want and I want asset to

00:10:49,560 --> 00:10:55,620
automate it a bit more because packages

00:10:51,510 --> 00:10:57,450
are specific really is aging otherwise I

00:10:55,620 --> 00:11:05,220
don't mean I don't mean that in

00:10:57,450 --> 00:11:07,050
particular but I mean yes as a control

00:11:05,220 --> 00:11:10,470
agent extra truck means a Swiss file in

00:11:07,050 --> 00:11:11,910
there is a DSC so I'm very interested in

00:11:10,470 --> 00:11:14,100
this as well I want to build the cross

00:11:11,910 --> 00:11:15,930
compilers that way and it all works if

00:11:14,100 --> 00:11:17,430
you just do it on a machine so the

00:11:15,930 --> 00:11:19,110
question is how do we enable that and

00:11:17,430 --> 00:11:20,610
build is as you say it's specific you

00:11:19,110 --> 00:11:22,050
know we could be quite specific about a

00:11:20,610 --> 00:11:24,660
fairly small set of packages we do it

00:11:22,050 --> 00:11:28,410
for we could have a special builder with

00:11:24,660 --> 00:11:31,050
this enabled do we have to do something

00:11:28,410 --> 00:11:33,360
like XS or two builds that we use for a

00:11:31,050 --> 00:11:36,660
non-free but we could have access multi

00:11:33,360 --> 00:11:38,850
arch and technically it's we could be

00:11:36,660 --> 00:11:40,770
just great new to new change so it's on

00:11:38,850 --> 00:11:42,120
every time so I don't actually I don't

00:11:40,770 --> 00:11:44,580
mind what happens to the change so as

00:11:42,120 --> 00:11:47,010
long as the builds that this is going to

00:11:44,580 --> 00:11:48,030
happen it's working because we saw ways

00:11:47,010 --> 00:11:49,950
it changed afterwards

00:11:48,030 --> 00:11:52,230
anyways I mean I think we have still two

00:11:49,950 --> 00:11:54,150
measures left us out with no clone

00:11:52,230 --> 00:11:55,410
change suits is I just won't do it and

00:11:54,150 --> 00:11:58,050
there's not an issue I mean those

00:11:55,410 --> 00:12:01,800
missions also don't build non-free they

00:11:58,050 --> 00:12:03,330
don't build experimental yeah so so now

00:12:01,800 --> 00:12:06,930
they change to something we are now

00:12:03,330 --> 00:12:09,750
really good with yes because for me like

00:12:06,930 --> 00:12:12,240
I build depend on GCC multi Lib

00:12:09,750 --> 00:12:15,540
so I'm building on any architecture for

00:12:12,240 --> 00:12:19,260
32-bit packages and I can declare my

00:12:15,540 --> 00:12:22,050
dependencies which work in a380 ti3 86

00:12:19,260 --> 00:12:26,750
Schrute but they don't when somebody

00:12:22,050 --> 00:12:26,750
accidentally builds on AMD 64 without

00:12:27,900 --> 00:12:34,800
perhaps some interesting note on that

00:12:29,640 --> 00:12:36,750
just via via such a second.we what you

00:12:34,800 --> 00:12:38,730
should be aware certain is the last year

00:12:36,750 --> 00:12:40,740
we mostly switched to or we have now

00:12:38,730 --> 00:12:42,029
lots of bilities which paid more than

00:12:40,740 --> 00:12:45,000
one architecture so we have for example

00:12:42,029 --> 00:12:48,260
EC 86 m be 64 change wood on same piece

00:12:45,000 --> 00:12:50,670
of hardware which is quite helpful but

00:12:48,260 --> 00:12:52,680
might an acid and that's a couple of

00:12:50,670 --> 00:12:54,960
other things because we I think you've I

00:12:52,680 --> 00:12:59,310
have only one you say cat6 plenty left

00:12:54,960 --> 00:13:02,430
which dozens on an AMD 64 kernel yeah I

00:12:59,310 --> 00:13:12,060
mean multi live is the the whole by our

00:13:02,430 --> 00:13:12,540
system yeah I think this is a dogfooding

00:13:12,060 --> 00:13:14,430
issue

00:13:12,540 --> 00:13:16,560
we're expecting people to build stuff

00:13:14,430 --> 00:13:18,450
this way for various purposes where it's

00:13:16,560 --> 00:13:19,920
necessary or sensible I think we should

00:13:18,450 --> 00:13:21,690
try and use it in our infrastructure as

00:13:19,920 --> 00:13:24,420
well so I guess maybe a few others need

00:13:21,690 --> 00:13:26,490
to sit down and stretch this out yeah

00:13:24,420 --> 00:13:29,010
suppose we could sing actually I think

00:13:26,490 --> 00:13:30,270
the answer to the question is yes in

00:13:29,010 --> 00:13:31,410
principle what we need to work out how

00:13:30,270 --> 00:13:36,030
we're going to do without breaking

00:13:31,410 --> 00:13:38,490
things in in one really important piece

00:13:36,030 --> 00:13:41,490
in bilities is really say one most of

00:13:38,490 --> 00:13:43,500
the time not being actively watched and

00:13:41,490 --> 00:13:45,630
whatever they do that just takes us a

00:13:43,500 --> 00:13:48,690
final buy another package side and then

00:13:45,630 --> 00:13:50,010
shipped it into the FTP master so we

00:13:48,690 --> 00:13:52,500
need to be British forward said whatever

00:13:50,010 --> 00:13:55,110
we do I mean it shouldn't like anything

00:13:52,500 --> 00:13:57,000
but if it breaks the package must not be

00:13:55,110 --> 00:13:59,670
installed so the site needs to be a

00:13:57,000 --> 00:14:02,100
failure but if we pile up two days of

00:13:59,670 --> 00:14:05,370
facial bit features we will have a very

00:14:02,100 --> 00:14:07,589
hard time our users so Big D sounds

00:14:05,370 --> 00:14:09,390
early in something you won't shouldn't

00:14:07,589 --> 00:14:14,550
miss this unnecessarily

00:14:09,390 --> 00:14:15,690
this is always a bit yeah it says it's a

00:14:14,550 --> 00:14:17,760
not so visible part of our

00:14:15,690 --> 00:14:19,350
infrastructure but users can start

00:14:17,760 --> 00:14:23,010
really fast complaining if there's no

00:14:19,350 --> 00:14:25,910
amd64 to Peters for example so I think

00:14:23,010 --> 00:14:27,779
there's another another one by Colin I

00:14:25,910 --> 00:14:32,850
think we have two microphones here

00:14:27,779 --> 00:14:34,630
anyway so sorry the the other kind of

00:14:32,850 --> 00:14:36,910
melty harsh related thing is

00:14:34,630 --> 00:14:41,730
um and I guess isn't really a question

00:14:36,910 --> 00:14:44,140
but a request for help the things like

00:14:41,730 --> 00:14:47,950
coolant any annotations on bill

00:14:44,140 --> 00:14:50,050
dependencies I sent a stack of patches a

00:14:47,950 --> 00:14:54,910
while back to get some of that working

00:14:50,050 --> 00:14:56,710
on in s build and in I think just some

00:14:54,910 --> 00:14:58,930
extent on the build a branch of s bills

00:14:56,710 --> 00:15:02,220
but I'm not desperately sure about

00:14:58,930 --> 00:15:04,690
what's the about exactly which

00:15:02,220 --> 00:15:06,670
configuration is being used on the on

00:15:04,690 --> 00:15:09,460
build machines so it's slightly hard to

00:15:06,670 --> 00:15:13,000
work out what each back port could I

00:15:09,460 --> 00:15:16,420
work with somebody here sure let's do it

00:15:13,000 --> 00:15:18,910
offers access to a lot and yes let's do

00:15:16,420 --> 00:15:20,710
that afterwards but but as a channel

00:15:18,910 --> 00:15:22,960
genetically mark will answer

00:15:20,710 --> 00:15:26,580
configuration from the PTO sixty-four

00:15:22,960 --> 00:15:29,440
branch and we sometimes chela pick

00:15:26,580 --> 00:15:31,810
branches from the master I picture from

00:15:29,440 --> 00:15:33,340
the master branch but if you think

00:15:31,810 --> 00:15:35,500
something is relevant for us we just

00:15:33,340 --> 00:15:36,910
applied in our branch and so also

00:15:35,500 --> 00:15:40,990
patrons from us at chellah pick to the

00:15:36,910 --> 00:15:42,820
master branch right the I think in I

00:15:40,990 --> 00:15:46,300
think there is also an issue about

00:15:42,820 --> 00:15:49,270
having a suitable version of D package

00:15:46,300 --> 00:15:54,310
dev I think we have some the the build a

00:15:49,270 --> 00:15:56,380
branch has some has its own Fork of bits

00:15:54,310 --> 00:15:59,620
of the duplicate modules I think from

00:15:56,380 --> 00:16:03,010
from live deeper corporal I don't really

00:15:59,620 --> 00:16:05,910
suggest to actually is a beautiful on or

00:16:03,010 --> 00:16:08,590
in the script repository says intestine

00:16:05,910 --> 00:16:10,600
let's say in another version of one

00:16:08,590 --> 00:16:12,880
ability included which we don't use so

00:16:10,600 --> 00:16:14,920
I'm not sure which tools are there but

00:16:12,880 --> 00:16:16,540
I'd never get I wasn't thinking of that

00:16:14,920 --> 00:16:18,630
I was saying here there are a few things

00:16:16,540 --> 00:16:22,750
that has build uses for parsing

00:16:18,630 --> 00:16:26,830
dependencies we have gotten rid of that

00:16:22,750 --> 00:16:28,120
right you have but I can't the thing

00:16:26,830 --> 00:16:30,700
that we'd need to check is whether

00:16:28,120 --> 00:16:32,020
wheezies deep coach is good enough and

00:16:30,700 --> 00:16:35,830
whether we might need to reintroduce

00:16:32,020 --> 00:16:38,380
those or reintroduce those Forks in

00:16:35,830 --> 00:16:41,050
order to be able to parse cool and any

00:16:38,380 --> 00:16:42,640
and cool native bill dependencies it's a

00:16:41,050 --> 00:16:46,420
consideration of passing bill

00:16:42,640 --> 00:16:47,449
dependences as follows for the non over

00:16:46,420 --> 00:16:50,389
latest abuse

00:16:47,449 --> 00:16:53,119
I mean for example unstable he was up to

00:16:50,389 --> 00:16:58,309
do that for the over later situations

00:16:53,119 --> 00:17:01,160
for example experimental we making pen

00:16:58,309 --> 00:17:03,319
and filtered package which contains just

00:17:01,160 --> 00:17:04,880
everything from the defense line which

00:17:03,319 --> 00:17:07,220
is relevant for that I he tech chure

00:17:04,880 --> 00:17:09,289
Zambian semi trust it stole the package

00:17:07,220 --> 00:17:11,089
by a deep package and since I've a semi

00:17:09,289 --> 00:17:16,970
say to aptitude and I will solve the

00:17:11,089 --> 00:17:19,610
mess please okay well we can just one

00:17:16,970 --> 00:17:22,189
thing I was reading over the report

00:17:19,610 --> 00:17:24,319
about the L VM snapshot issue yeah and

00:17:22,189 --> 00:17:26,389
this Monday somebody sends an email that

00:17:24,319 --> 00:17:27,949
he backboarded LVM from unstable and

00:17:26,389 --> 00:17:30,769
that that fixed the issue for him

00:17:27,949 --> 00:17:33,010
so that actually be good news I don't

00:17:30,769 --> 00:17:36,080
know if it's we probably need to

00:17:33,010 --> 00:17:38,480
investigate in detail but it looks good

00:17:36,080 --> 00:17:40,070
well now I would say for the first

00:17:38,480 --> 00:17:42,679
bility I think we have her work a

00:17:40,070 --> 00:17:44,870
solution however is never given it's

00:17:42,679 --> 00:17:46,669
very very unhappy with birthday but

00:17:44,870 --> 00:17:49,340
anyways as a Debian developer I think if

00:17:46,669 --> 00:17:51,230
I found a fix for that issue we need to

00:17:49,340 --> 00:17:52,610
make sure it's available in stable so

00:17:51,230 --> 00:17:54,649
that's all the questions what I'm saying

00:17:52,610 --> 00:17:56,630
you know I'm pretty sure the answer to

00:17:54,649 --> 00:17:58,340
Colin's question about any and native is

00:17:56,630 --> 00:17:58,970
that the weazy version D package does

00:17:58,340 --> 00:18:03,110
have what we need

00:17:58,970 --> 00:18:05,510
I think it's right okay okay I just

00:18:03,110 --> 00:18:07,370
think we should check and what we

00:18:05,510 --> 00:18:10,700
usually do boom is start breaking code I

00:18:07,370 --> 00:18:12,980
said we take one bility just to stick to

00:18:10,700 --> 00:18:15,019
experimental and black experimental

00:18:12,980 --> 00:18:22,429
trust which is not as bad as breaking

00:18:15,019 --> 00:18:25,190
unstable that's that's fine except when

00:18:22,429 --> 00:18:27,470
you're doing things that depend on the

00:18:25,190 --> 00:18:28,730
differences between the resolvers that

00:18:27,470 --> 00:18:31,070
you're using for unstable and

00:18:28,730 --> 00:18:32,870
experimental so I'm not convinced that

00:18:31,070 --> 00:18:35,200
building for experiment so it would

00:18:32,870 --> 00:18:38,389
actually be a good correct test of this

00:18:35,200 --> 00:18:43,100
then because of what you just describes

00:18:38,389 --> 00:18:45,500
mmm in I have a few ideas how we could

00:18:43,100 --> 00:18:46,909
even tries that an experimental or we

00:18:45,500 --> 00:18:49,809
could just we could just run things

00:18:46,909 --> 00:18:52,279
through unstable build days but yeah

00:18:49,809 --> 00:18:54,019
similar thing so I mean we have

00:18:52,279 --> 00:18:56,929
different levels of testing depending on

00:18:54,019 --> 00:18:59,000
what we change it says not a bunch both

00:18:56,929 --> 00:19:00,510
of starts telling sis a survey to accept

00:18:59,000 --> 00:19:02,730
new changes in

00:19:00,510 --> 00:19:04,860
some changes I've spread the obvious and

00:19:02,730 --> 00:19:07,320
we just throw them out everywhere and we

00:19:04,860 --> 00:19:13,230
haven't had to make mistake too often

00:19:07,320 --> 00:19:17,160
with it yeah we have we have one parser

00:19:13,230 --> 00:19:19,380
of dissing arrow step check to do the

00:19:17,160 --> 00:19:22,170
checking that it's installable before it

00:19:19,380 --> 00:19:28,020
goats or abilities I don't know if that

00:19:22,170 --> 00:19:32,760
supports it or not yeah which is now

00:19:28,020 --> 00:19:35,550
superseded by Lib doze but yeah that's

00:19:32,760 --> 00:19:37,110
all being are we using that a lot for

00:19:35,550 --> 00:19:43,440
analysis but I don't quite know how it

00:19:37,110 --> 00:19:46,410
works with yes I I could trust explain

00:19:43,440 --> 00:19:48,630
how the house of how the checking of

00:19:46,410 --> 00:19:53,190
social ability works but we do is we

00:19:48,630 --> 00:19:54,960
generate a fake packages file and then

00:19:53,190 --> 00:19:55,710
say just what in this package Feist

00:19:54,960 --> 00:19:57,540
installable

00:19:55,710 --> 00:19:59,910
SV I speak about source packages

00:19:57,540 --> 00:20:04,650
contains packages starting with resource

00:19:59,910 --> 00:20:07,640
- - - package name or with step - - -

00:20:04,650 --> 00:20:10,170
package name - check for the menu ascent

00:20:07,640 --> 00:20:12,630
dependencies but yes in in the end is

00:20:10,170 --> 00:20:14,670
fastened and packaged as far as it looks

00:20:12,630 --> 00:20:16,440
like a normal pin packages file and

00:20:14,670 --> 00:20:20,220
maybe want to have the sides what of

00:20:16,440 --> 00:20:23,370
them is installable and whatnot and also

00:20:20,220 --> 00:20:25,020
we have one small patch in we assumes

00:20:23,370 --> 00:20:27,450
that build essentials always have

00:20:25,020 --> 00:20:30,120
installable so we happen packages five

00:20:27,450 --> 00:20:33,000
is pretty essential without any

00:20:30,120 --> 00:20:35,820
dependencies because otherwise if you re

00:20:33,000 --> 00:20:38,010
up load parts of that builds trust

00:20:35,820 --> 00:20:40,890
oh yeah now nothing is available anymore

00:20:38,010 --> 00:20:42,870
I will quit working but usually pretty

00:20:40,890 --> 00:20:46,670
essential is over already installed is a

00:20:42,870 --> 00:20:46,670
change route so it wouldn't make sense

00:20:50,660 --> 00:20:53,910
something completely different on the

00:20:52,470 --> 00:20:58,440
wanna be on the wanna build side of

00:20:53,910 --> 00:21:01,640
things now we've got built using and one

00:20:58,440 --> 00:21:04,290
thing I'd like to see but this means

00:21:01,640 --> 00:21:06,780
probably changed the policy is automatic

00:21:04,290 --> 00:21:09,630
banana mousse on packages that declare

00:21:06,780 --> 00:21:13,830
built using when they're built used

00:21:09,630 --> 00:21:15,330
stuff changes my first acai I've got

00:21:13,830 --> 00:21:17,820
well I I maintain the windows

00:21:15,330 --> 00:21:20,760
cross-compiler stuff so I've got big new

00:21:17,820 --> 00:21:23,519
tools for mingw GCC from ng that we and

00:21:20,760 --> 00:21:25,620
so on and they are built using whichever

00:21:23,519 --> 00:21:27,779
version of binutils was in at the time

00:21:25,620 --> 00:21:29,460
they got built and GCC and so on and

00:21:27,779 --> 00:21:32,460
something that would be very nice for me

00:21:29,460 --> 00:21:34,950
as if whenever Ben details changed or

00:21:32,460 --> 00:21:40,289
GCC changed my packages got rebuilt as

00:21:34,950 --> 00:21:42,809
well I I have I have two different

00:21:40,289 --> 00:21:44,880
answers on that some serve honest I'm a

00:21:42,809 --> 00:21:48,630
bit unhappy because it would means that

00:21:44,880 --> 00:21:51,120
we get a I expects it will assume that a

00:21:48,630 --> 00:21:52,620
very high increase this is usage we're

00:21:51,120 --> 00:21:53,850
not actually nobody cares why's that

00:21:52,620 --> 00:21:55,980
it's the case because whatever

00:21:53,850 --> 00:21:57,360
maintenance just a little change so we

00:21:55,980 --> 00:21:59,519
need to have some control or what

00:21:57,360 --> 00:22:01,049
happens here otherwise it's not only the

00:21:59,519 --> 00:22:03,120
beauties get unhappy but it's a other

00:22:01,049 --> 00:22:05,399
maintenance get unhappy as well because

00:22:03,120 --> 00:22:08,010
we are just using too much powerful

00:22:05,399 --> 00:22:11,429
social rebuilds as a part of the answer

00:22:08,010 --> 00:22:13,289
is it actually the question of how which

00:22:11,429 --> 00:22:15,029
bangle package needs to be the built in

00:22:13,289 --> 00:22:17,159
order to get the archive into a working

00:22:15,029 --> 00:22:21,919
state it's a topic which is handled

00:22:17,159 --> 00:22:26,039
mostly by released teams these days so

00:22:21,919 --> 00:22:29,010
yeah I think so if basically what I

00:22:26,039 --> 00:22:30,510
think is if you have an if you have good

00:22:29,010 --> 00:22:33,710
reasons to do that or not

00:22:30,510 --> 00:22:36,149
I would try I try to start taking it as

00:22:33,710 --> 00:22:38,610
discussion and send pointers to the

00:22:36,149 --> 00:22:41,789
deputies and so one a big team mailing

00:22:38,610 --> 00:22:43,470
list but what pointers was explicitly in

00:22:41,789 --> 00:22:46,289
that sentence because this don't

00:22:43,470 --> 00:22:48,929
includes a list of the discussion but

00:22:46,289 --> 00:22:50,429
yeah I am not sure what's what's the

00:22:48,929 --> 00:22:54,419
outcome will be I mean technically it

00:22:50,429 --> 00:22:57,659
would be probably possible and perhaps

00:22:54,419 --> 00:23:01,429
even less hearts and the various subject

00:22:57,659 --> 00:23:01,429
but I'm not convinced it's a good idea

00:23:07,130 --> 00:23:11,790
I'd like to see some improved

00:23:09,300 --> 00:23:13,680
documentation I'd like to see some

00:23:11,790 --> 00:23:16,370
improved documentation on how to set up

00:23:13,680 --> 00:23:19,110
the ability so there are these two

00:23:16,370 --> 00:23:20,700
configuration files and for one it's a

00:23:19,110 --> 00:23:22,170
mess with the email addresses when you

00:23:20,700 --> 00:23:24,360
put in the email address with a slash

00:23:22,170 --> 00:23:26,430
before the ad or not changes in every

00:23:24,360 --> 00:23:29,430
configuration line I couldn't figure out

00:23:26,430 --> 00:23:33,630
how to run to bilities or to builds in

00:23:29,430 --> 00:23:35,160
parallel not possible and send us a

00:23:33,630 --> 00:23:38,370
photo answer it's just it says somehow

00:23:35,160 --> 00:23:39,870
in the in the configure yes that was

00:23:38,370 --> 00:23:42,150
never working as M is removed it and

00:23:39,870 --> 00:23:44,310
then the the global timeouts there is no

00:23:42,150 --> 00:23:45,140
example in the package how to set global

00:23:44,310 --> 00:23:49,170
timeouts

00:23:45,140 --> 00:23:52,290
okay that used to be possible four years

00:23:49,170 --> 00:23:56,580
ago I have a few different answers on

00:23:52,290 --> 00:23:59,180
that yes sir

00:23:56,580 --> 00:24:02,070
I mean for a few things that might be

00:23:59,180 --> 00:24:04,770
lets say documentation improvements

00:24:02,070 --> 00:24:07,650
possible however I mean me not really

00:24:04,770 --> 00:24:08,610
speaking about big deal expert has two

00:24:07,650 --> 00:24:11,670
different branches

00:24:08,610 --> 00:24:13,500
and for the branch we maintain I would

00:24:11,670 --> 00:24:16,020
say our goal is to recommend it in a

00:24:13,500 --> 00:24:18,420
vase it is possible to set it up in the

00:24:16,020 --> 00:24:26,430
same base as it is set up on a Debian

00:24:18,420 --> 00:24:28,590
system but so what we have done but what

00:24:26,430 --> 00:24:30,990
we what we try it's rife in the lastest

00:24:28,590 --> 00:24:33,810
multiple times was to move configuration

00:24:30,990 --> 00:24:36,300
from the forms ability itself to one

00:24:33,810 --> 00:24:39,300
ability because it's it's easier to

00:24:36,300 --> 00:24:42,990
configure that it for all systems so for

00:24:39,300 --> 00:24:45,360
example recent changes you know these

00:24:42,990 --> 00:24:47,880
days you can run a speech without an

00:24:45,360 --> 00:24:49,860
gotta speed as the configuration file

00:24:47,880 --> 00:24:51,960
which wasn't possible up to now because

00:24:49,860 --> 00:24:54,060
it has nothing you need to set say

00:24:51,960 --> 00:24:56,910
anymore you just moved everything from

00:24:54,060 --> 00:24:58,350
God s period to the ability mercy and

00:24:56,910 --> 00:25:03,030
from there we could move it to run a bit

00:24:58,350 --> 00:25:09,120
and then be done oh you should to put up

00:25:03,030 --> 00:25:10,050
beauty as you could yeah you're right

00:25:09,120 --> 00:25:13,680
you should probably have some

00:25:10,050 --> 00:25:15,630
documentation what to get and let's say

00:25:13,680 --> 00:25:17,320
similar aside as I said before I'm

00:25:15,630 --> 00:25:19,090
interested in providing an documentation

00:25:17,320 --> 00:25:21,130
that allow us to maintain us to

00:25:19,090 --> 00:25:29,830
understand how it works so to get into

00:25:21,130 --> 00:25:31,690
get similar sites at home if you if you

00:25:29,830 --> 00:25:33,460
need my Geo oxygen last year water

00:25:31,690 --> 00:25:35,019
documentation on the wiki it is not

00:25:33,460 --> 00:25:37,630
perfect and you probably already all

00:25:35,019 --> 00:25:40,179
know that but it is a tutorial for

00:25:37,630 --> 00:25:42,490
beginner to having a first buildi

00:25:40,179 --> 00:25:45,909
running it by the way but what you just

00:25:42,490 --> 00:25:50,700
said this is but some other people may

00:25:45,909 --> 00:25:55,299
be the last one built is four years ago

00:25:50,700 --> 00:25:56,799
things have changed it's made I think of

00:25:55,299 --> 00:25:59,259
another important piece of information

00:25:56,799 --> 00:26:00,610
is and it had been developer could could

00:25:59,259 --> 00:26:02,049
speak with one Apple it see states of

00:26:00,610 --> 00:26:04,000
one app it is no longer the sticker to a

00:26:02,049 --> 00:26:06,580
certain group it just can't update it so

00:26:04,000 --> 00:26:08,200
if you want to see what up what ability

00:26:06,580 --> 00:26:10,960
gets from one app you can just ask one

00:26:08,200 --> 00:26:12,909
app it's the same way ability does trust

00:26:10,960 --> 00:26:15,250
ability will refuse to make any of light

00:26:12,909 --> 00:26:17,110
super token you can lead and lead up and

00:26:15,250 --> 00:26:19,000
and take a package the first part of

00:26:17,110 --> 00:26:21,039
taking packages tell me which packets is

00:26:19,000 --> 00:26:23,500
available and you could do that and in

00:26:21,039 --> 00:26:25,299
one app it has a - - simulate flick

00:26:23,500 --> 00:26:27,039
if you said set you can even make a take

00:26:25,299 --> 00:26:29,080
on it and it will just give you the same

00:26:27,039 --> 00:26:30,730
output s ability grits but it doesn't

00:26:29,080 --> 00:26:32,259
change the database internally so you

00:26:30,730 --> 00:26:36,159
could do that ever all the time if you

00:26:32,259 --> 00:26:38,500
want this is also a new future in

00:26:36,159 --> 00:26:40,330
monopod I like very much helps the

00:26:38,500 --> 00:26:43,299
parking issues because you can trust an

00:26:40,330 --> 00:26:48,820
ability with - - simulate in surveys out

00:26:43,299 --> 00:26:50,289
comment nothing with people anyways I'm

00:26:48,820 --> 00:26:52,649
sorry I'm a bit late

00:26:50,289 --> 00:26:56,620
maybe this question is answered already

00:26:52,649 --> 00:26:59,169
but if not this there seems to be a

00:26:56,620 --> 00:27:01,779
certain amount of pain with setting up

00:26:59,169 --> 00:27:06,460
new change routes when things need to

00:27:01,779 --> 00:27:09,220
get done and when requesting such it

00:27:06,460 --> 00:27:12,279
seems to take a long time until it

00:27:09,220 --> 00:27:14,740
actually happens and wonder if there is

00:27:12,279 --> 00:27:22,720
anything that can be done to reduce this

00:27:14,740 --> 00:27:24,340
pain on all involved sites yes now let's

00:27:22,720 --> 00:27:28,870
see where we are I think I need this

00:27:24,340 --> 00:27:31,060
slide so yes we have may have a very

00:27:28,870 --> 00:27:33,220
good working script to set up tensional

00:27:31,060 --> 00:27:38,350
this LVM however we don't do it anymore

00:27:33,220 --> 00:27:41,680
because AVM is poor so just about urge

00:27:38,350 --> 00:27:43,630
has said there is that seems to be in

00:27:41,680 --> 00:27:46,870
fixed for that back if so we should of

00:27:43,630 --> 00:27:48,460
course upload it to stable or we should

00:27:46,870 --> 00:27:52,420
first test this in the Napoli to stable

00:27:48,460 --> 00:27:54,610
as always and the other is our scripts

00:27:52,420 --> 00:27:56,710
might need some adjustment for the table

00:27:54,610 --> 00:28:00,100
ace to change was we need to use these

00:27:56,710 --> 00:28:01,810
days so basically what we trusted

00:28:00,100 --> 00:28:04,170
let me notice it back we did since I'm

00:28:01,810 --> 00:28:06,940
an emergency kind of operations the

00:28:04,170 --> 00:28:10,300
convert and I've changed to debase so

00:28:06,940 --> 00:28:12,850
our build is still work but because we

00:28:10,300 --> 00:28:15,760
don't have a nice crypto set setup so if

00:28:12,850 --> 00:28:18,100
anybody wants to fix the script and the

00:28:15,760 --> 00:28:23,320
script is no Beauty piranha and eaten it

00:28:18,100 --> 00:28:28,150
is in I think it should see a setup

00:28:23,320 --> 00:28:31,900
change to the edge also then we I would

00:28:28,150 --> 00:28:34,560
really like to see that and that would

00:28:31,900 --> 00:28:37,540
be really useful for for for us as well

00:28:34,560 --> 00:28:39,010
actually just just take this in now so

00:28:37,540 --> 00:28:40,600
we have a general problem that is hard

00:28:39,010 --> 00:28:42,520
to set up build ease and there's there's

00:28:40,600 --> 00:28:45,220
actually two parts to this there's like

00:28:42,520 --> 00:28:46,960
Debian does which is kind of relatively

00:28:45,220 --> 00:28:48,070
well dealt with but there's a whole lot

00:28:46,960 --> 00:28:51,340
of other cases where lots of people

00:28:48,070 --> 00:28:52,510
either being derived distros or people

00:28:51,340 --> 00:28:53,770
who just want to rebuild their packages

00:28:52,510 --> 00:28:56,370
over and over again for continuous

00:28:53,770 --> 00:28:58,810
integration all of that's too hard and

00:28:56,370 --> 00:29:00,910
we need to do there's quite a lot of

00:28:58,810 --> 00:29:03,730
tools there's rebuild D there's the new

00:29:00,910 --> 00:29:08,080
PI bit thing there's the other buildi we

00:29:03,730 --> 00:29:09,580
don't use the Rajah does and we study we

00:29:08,080 --> 00:29:13,690
fixed the initializing the database

00:29:09,580 --> 00:29:15,630
problem is that okay so work work is

00:29:13,690 --> 00:29:18,910
ongoing on that is that where we're at

00:29:15,630 --> 00:29:22,510
well actually I ought to be happy if

00:29:18,910 --> 00:29:25,180
somebody would interact reserve with a

00:29:22,510 --> 00:29:26,890
bill T or maintenance list or there's a

00:29:25,180 --> 00:29:29,680
mailing list about some honorable admins

00:29:26,890 --> 00:29:31,510
bon appetit team list if somebody would

00:29:29,680 --> 00:29:34,000
be on that list who take who has

00:29:31,510 --> 00:29:37,000
interest in making some possibilities

00:29:34,000 --> 00:29:39,130
documented for others and submitting

00:29:37,000 --> 00:29:41,560
patches on that effect I would totally

00:29:39,130 --> 00:29:43,060
be happy to accept some but its amount

00:29:41,560 --> 00:29:44,380
of petrol and that topics that I could

00:29:43,060 --> 00:29:46,570
write in my own time is

00:29:44,380 --> 00:29:49,470
a bit limited I better think now your

00:29:46,570 --> 00:29:51,940
question is on divorce Lhasa about

00:29:49,470 --> 00:29:53,230
viability maintenance take so long as it

00:29:51,940 --> 00:29:55,870
takes a long because we have lost our

00:29:53,230 --> 00:29:58,060
automation recently which is actually

00:29:55,870 --> 00:30:02,290
bad news for all of us involved it used

00:29:58,060 --> 00:30:05,500
to be better and on the other hand we

00:30:02,290 --> 00:30:07,210
shouldn't at new-built it basically

00:30:05,500 --> 00:30:08,740
should just add a new change which ones

00:30:07,210 --> 00:30:10,660
in society and that the static laughter

00:30:08,740 --> 00:30:13,990
stable the reasons after the words just

00:30:10,660 --> 00:30:16,540
upgrade but all of these things are

00:30:13,990 --> 00:30:20,440
currently not in the same state I would

00:30:16,540 --> 00:30:22,870
be happy to as a few other options but

00:30:20,440 --> 00:30:25,060
not necessarily appealing and there's no

00:30:22,870 --> 00:30:29,490
code for not for any of them

00:30:25,060 --> 00:30:29,490
this is currently as I said part of it

00:30:31,710 --> 00:30:37,110
I'm home and I would like to discuss the

00:30:34,420 --> 00:30:40,060
issue of debug ability of failing bills

00:30:37,110 --> 00:30:42,850
as I mean one of the maintenance of the

00:30:40,060 --> 00:30:43,690
doxygen package I'm experiencing a few

00:30:42,850 --> 00:30:45,570
heisenbugs

00:30:43,690 --> 00:30:47,860
which means the build is failing the

00:30:45,570 --> 00:30:51,760
easiest solution is to just give it back

00:30:47,860 --> 00:30:54,720
and it works so that makes debugging the

00:30:51,760 --> 00:30:59,560
bill almost impossible debugging

00:30:54,720 --> 00:31:01,960
reassigned bugs almost impossible and I

00:30:59,560 --> 00:31:05,610
was thinking about some options to fix

00:31:01,960 --> 00:31:09,670
that one nice thing to have would be

00:31:05,610 --> 00:31:12,850
obtaining core dumps from Bill T's so I

00:31:09,670 --> 00:31:15,520
could investigate the situation after

00:31:12,850 --> 00:31:19,540
the fact that it's held while discussing

00:31:15,520 --> 00:31:22,900
this with a few other people are a few

00:31:19,540 --> 00:31:25,900
other ideas came up so if the bill fails

00:31:22,900 --> 00:31:29,560
during configure it might make sense to

00:31:25,900 --> 00:31:33,120
save the config and if a build fails

00:31:29,560 --> 00:31:36,430
with an internal compile error from GCC

00:31:33,120 --> 00:31:39,090
Adriel usually tries to build the file

00:31:36,430 --> 00:31:43,540
twice and if the failure is reproducible

00:31:39,090 --> 00:31:46,270
it saves the pre-processed c source and

00:31:43,540 --> 00:31:52,270
a temp file location to investigate

00:31:46,270 --> 00:31:55,150
further so I was I would like to ask the

00:31:52,270 --> 00:31:57,220
question what kinds of artifacts can we

00:31:55,150 --> 00:31:58,120
save from failing bills to make it

00:31:57,220 --> 00:32:02,320
easier to debug

00:31:58,120 --> 00:32:04,659
and how can we achieve that now I will I

00:32:02,320 --> 00:32:07,120
will just start with another part of the

00:32:04,659 --> 00:32:09,760
answer we used to have a situation where

00:32:07,120 --> 00:32:12,520
we just deleted a directory success

00:32:09,760 --> 00:32:14,950
successful builds and we kept cells of

00:32:12,520 --> 00:32:17,440
faith builds around but that meant that

00:32:14,950 --> 00:32:20,830
after a few days we run out of space

00:32:17,440 --> 00:32:25,539
which has to lead to some anyways in

00:32:20,830 --> 00:32:27,100
addition to that I said I've said it's a

00:32:25,539 --> 00:32:31,270
bit unfortunate but most maintenance

00:32:27,100 --> 00:32:33,010
don't care enough so I see it's just I'm

00:32:31,270 --> 00:32:35,440
happy to see somebody telling about it

00:32:33,010 --> 00:32:37,899
but that's why we are at the current

00:32:35,440 --> 00:32:41,710
situation so my question is really I

00:32:37,899 --> 00:32:43,480
mean I'm happy to just share everything

00:32:41,710 --> 00:32:44,679
between solute electrode is this

00:32:43,480 --> 00:32:47,169
appropriate maintain us

00:32:44,679 --> 00:32:49,120
but my question shows how to make it

00:32:47,169 --> 00:32:51,580
work in a way that the maintenance can

00:32:49,120 --> 00:32:55,210
easily access the data and that we

00:32:51,580 --> 00:32:56,529
entered our this don't get too full so

00:32:55,210 --> 00:32:58,240
the main problem why you run out of

00:32:56,529 --> 00:33:00,010
space is because you use throwaway

00:32:58,240 --> 00:33:01,929
streets and you need to throw the way

00:33:00,010 --> 00:33:03,820
the entire street which takes a lot more

00:33:01,929 --> 00:33:04,990
space and if you use non throw a

00:33:03,820 --> 00:33:10,289
throughs and you just need to keep the

00:33:04,990 --> 00:33:13,299
building directory actually that's true

00:33:10,289 --> 00:33:15,370
well I think this I mean basically if

00:33:13,299 --> 00:33:21,340
you use it throw a chute in a VM

00:33:15,370 --> 00:33:23,470
snapshot use five kicks per build we're

00:33:21,340 --> 00:33:25,539
deleting it's built as a bicyclist

00:33:23,470 --> 00:33:29,169
beauties is unpacked in the in slash

00:33:25,539 --> 00:33:30,159
built and we just really move to the

00:33:29,169 --> 00:33:32,440
lecture in that one

00:33:30,159 --> 00:33:34,330
I think if it keeps a built or if it

00:33:32,440 --> 00:33:36,940
what keeps artifacts is built I like to

00:33:34,330 --> 00:33:44,350
this'll be helpful for your case but I'm

00:33:36,940 --> 00:33:46,510
a but we we have seen that we said we

00:33:44,350 --> 00:33:49,779
run out of an inlet that actually as

00:33:46,510 --> 00:33:52,299
well because if we have a few large

00:33:49,779 --> 00:33:54,130
packages being failed and so some has

00:33:52,299 --> 00:33:55,720
something we need to do like you can

00:33:54,130 --> 00:33:57,429
recover so artifact something like C

00:33:55,720 --> 00:33:59,679
days after built and afterwards a gun

00:33:57,429 --> 00:34:02,919
that would be an option and then think

00:33:59,679 --> 00:34:04,299
of how to reduce it but yeah something

00:34:02,919 --> 00:34:06,010
like said we need to think about how we

00:34:04,299 --> 00:34:08,889
can do it in a way that works and how we

00:34:06,010 --> 00:34:10,170
could easily get some I mean when you

00:34:08,889 --> 00:34:15,690
get a compiler

00:34:10,170 --> 00:34:17,640
internal error the pre-purchase the

00:34:15,690 --> 00:34:19,470
artifact in question is not really large

00:34:17,640 --> 00:34:21,750
because we don't actually want the whole

00:34:19,470 --> 00:34:24,150
bill tree with all the artifacts we just

00:34:21,750 --> 00:34:25,890
want the Bri protest source code which

00:34:24,150 --> 00:34:28,590
was generated but you see when it got

00:34:25,890 --> 00:34:31,140
the compiler error that can be like five

00:34:28,590 --> 00:34:33,720
or seven megabytes big but it's just one

00:34:31,140 --> 00:34:36,390
file if we have a good way to find it

00:34:33,720 --> 00:34:38,760
out and have yes the prints it prints

00:34:36,390 --> 00:34:43,680
where the file is picture page will be

00:34:38,760 --> 00:34:46,140
accepted this bill patches basis s build

00:34:43,680 --> 00:34:53,070
that has the functionality yes it would

00:34:46,140 --> 00:34:54,540
need to be a nest built so yeah so the

00:34:53,070 --> 00:34:56,610
suggestion to just take the bill

00:34:54,540 --> 00:34:58,680
directory doesn't work for me because

00:34:56,610 --> 00:34:59,910
currently we don't save core dumps at

00:34:58,680 --> 00:35:04,050
all mm-hm

00:34:59,910 --> 00:35:06,540
so I need enabling core dumping on build

00:35:04,050 --> 00:35:09,660
these it's not a common problem but it

00:35:06,540 --> 00:35:12,150
happens occasionally and maybe saving

00:35:09,660 --> 00:35:15,900
the bill directory for one week or like

00:35:12,150 --> 00:35:19,020
that for maintenance to spot the errors

00:35:15,900 --> 00:35:21,090
so and they can just fetch it in that

00:35:19,020 --> 00:35:22,500
time and if they fail to do that they'll

00:35:21,090 --> 00:35:25,890
have to rebuild on like that

00:35:22,500 --> 00:35:28,800
so these bugs keep popping up over and

00:35:25,890 --> 00:35:30,840
over again and just catching a few of

00:35:28,800 --> 00:35:32,940
them would be great for me I really

00:35:30,840 --> 00:35:36,690
think we should discuss ah we have all

00:35:32,940 --> 00:35:38,220
see the 10 meters slide assimilates ago

00:35:36,690 --> 00:35:40,380
so I think we should discuss about what

00:35:38,220 --> 00:35:42,390
we could do afterwards on some occasions

00:35:40,380 --> 00:35:44,160
but it's yes it definitely sounds

00:35:42,390 --> 00:35:45,480
sensible to me to do something there I

00:35:44,160 --> 00:35:49,380
just don't know what the right answer

00:35:45,480 --> 00:35:51,980
will be I've got a question do you have

00:35:49,380 --> 00:35:54,210
any plan to make Didion part of visual

00:35:51,980 --> 00:35:56,870
for now it's quite hard to get a new

00:35:54,210 --> 00:35:59,310
architecture into this service and and

00:35:56,870 --> 00:36:01,550
already on doesn't have too much time

00:35:59,310 --> 00:36:01,550
anymore

00:36:04,970 --> 00:36:11,730
this it's a very easy answer was I can't

00:36:09,780 --> 00:36:14,760
remember at the end of the refused to

00:36:11,730 --> 00:36:16,470
put on to put any I texture into the

00:36:14,760 --> 00:36:18,960
minds of our into our vulnerability in

00:36:16,470 --> 00:36:22,590
the last eight years that means

00:36:18,960 --> 00:36:23,430
basically since we have says say you set

00:36:22,590 --> 00:36:26,069
up

00:36:23,430 --> 00:36:27,900
databases which was done by the fools

00:36:26,069 --> 00:36:30,260
ago we don't have this large it's just

00:36:27,900 --> 00:36:34,680
but I think Phil wants to give an answer

00:36:30,260 --> 00:36:37,109
so it's better this is that really a

00:36:34,680 --> 00:36:39,119
problem I mean if you need a new

00:36:37,109 --> 00:36:41,160
architecture they wanna build on their

00:36:39,119 --> 00:36:43,829
inputs you can also pick me I mean

00:36:41,160 --> 00:36:45,660
that's what I did so if I did database

00:36:43,829 --> 00:36:48,440
changes on the main wanna build a

00:36:45,660 --> 00:36:51,420
replicated them we've got a bit of food

00:36:48,440 --> 00:36:53,790
we currently only run architectures that

00:36:51,420 --> 00:36:56,490
on the main archive on the main machine

00:36:53,790 --> 00:36:58,770
also I mean we need a lot of time of

00:36:56,490 --> 00:37:04,109
those 15 minutes currently to do all the

00:36:58,770 --> 00:37:05,790
processing yeah well if a multiple main

00:37:04,109 --> 00:37:08,220
oh there ought to be multiple

00:37:05,790 --> 00:37:10,140
maintenance of Debian ports but I had a

00:37:08,220 --> 00:37:12,119
feeling that onion was taking care of

00:37:10,140 --> 00:37:13,890
that I wasn't aware you were am also

00:37:12,119 --> 00:37:16,710
involved in that yeah so I contacted

00:37:13,890 --> 00:37:19,079
overnight or minnows or build poor the

00:37:16,710 --> 00:37:20,730
Debian port is already overloaded and we

00:37:19,079 --> 00:37:23,760
cannot add a new architecture inside

00:37:20,730 --> 00:37:27,470
that's another problem because we only

00:37:23,760 --> 00:37:30,059
have a VM of TSA that's also like

00:37:27,470 --> 00:37:31,859
underpowered and I think we need to

00:37:30,059 --> 00:37:35,790
speak about service tsa anyway that's

00:37:31,859 --> 00:37:39,089
another venue because the way it's done

00:37:35,790 --> 00:37:41,220
it's not main Debian so currently I mean

00:37:39,089 --> 00:37:44,430
superb also Debian man appeared and

00:37:41,220 --> 00:37:48,869
supportive imports wanna build both are

00:37:44,430 --> 00:37:51,720
valid CPU intense so the Savannah bit

00:37:48,869 --> 00:37:53,760
mentioned even if I said it's it isn't

00:37:51,720 --> 00:37:56,760
as bad as it used to be with Berkeley

00:37:53,760 --> 00:37:59,760
databases which are easy to break with

00:37:56,760 --> 00:38:01,950
it operations we still use to have a

00:37:59,760 --> 00:38:03,930
very high average flow because they're

00:38:01,950 --> 00:38:06,540
ever 50 minutes we compare all the files

00:38:03,930 --> 00:38:08,579
processed data makes it all things so

00:38:06,540 --> 00:38:10,589
from the 50 minutes for FTP mas approved

00:38:08,579 --> 00:38:13,770
after P master push a single currently

00:38:10,589 --> 00:38:18,990
use 10 or 15 minutes to run scripts yeah

00:38:13,770 --> 00:38:20,400
a trace parallel yeah so I just are a

00:38:18,990 --> 00:38:21,630
new pour right now and I just asked

00:38:20,400 --> 00:38:25,140
really and he said you need to do these

00:38:21,630 --> 00:38:28,530
things and that seems to be going okay

00:38:25,140 --> 00:38:31,049
but we have to have a good mechanism for

00:38:28,530 --> 00:38:33,960
introducing new ports and maybe

00:38:31,049 --> 00:38:35,819
so either we need to give more resources

00:38:33,960 --> 00:38:36,930
to ports dotnet or we should bring it

00:38:35,819 --> 00:38:39,150
more in house

00:38:36,930 --> 00:38:40,890
and maybe that's easier to do now with

00:38:39,150 --> 00:38:43,589
David I must admit an understanding how

00:38:40,890 --> 00:38:48,420
all this works but I guess it's probably

00:38:43,589 --> 00:38:51,210
more productive to talk in a smaller IC

00:38:48,420 --> 00:38:52,770
to singer a bit more about that how we

00:38:51,210 --> 00:38:54,990
could make better use or how we could

00:38:52,770 --> 00:38:57,329
share the sources better or whatever is

00:38:54,990 --> 00:39:00,420
sensible but I think we all at least it

00:38:57,329 --> 00:39:04,020
needs to be easy to start a new part but

00:39:00,420 --> 00:39:05,550
whatever that means and so a side needs

00:39:04,020 --> 00:39:07,470
a bit more discussion and now we have

00:39:05,550 --> 00:39:12,420
five minutes so that means wonderful

00:39:07,470 --> 00:39:13,559
questions are left if any okay we

00:39:12,420 --> 00:39:18,780
managed to shut everyone up

00:39:13,559 --> 00:39:20,160
I saw Holger pass by one of the things I

00:39:18,780 --> 00:39:22,559
would like to ask is would it be

00:39:20,160 --> 00:39:25,950
conceivable to find a way to run things

00:39:22,559 --> 00:39:29,270
like pew parts on idle bill T's because

00:39:25,950 --> 00:39:34,520
we don't have test machines for the non

00:39:29,270 --> 00:39:34,520
current known for some architectures I

00:39:36,380 --> 00:39:40,819
don't think I would be happy with that

00:39:42,200 --> 00:39:49,579
basically I mean what I expect is that

00:39:45,869 --> 00:39:53,220
we get that we get personal ash I assume

00:39:49,579 --> 00:39:55,530
by a per FTP master and then I assume we

00:39:53,220 --> 00:39:59,130
won't have any free times

00:39:55,530 --> 00:40:02,609
so currently our goal is to say we we

00:39:59,130 --> 00:40:04,950
are we build packages an unstable quite

00:40:02,609 --> 00:40:07,079
fast and we eventually build

00:40:04,950 --> 00:40:09,089
experimental but we have enough aya

00:40:07,079 --> 00:40:11,369
sections which are which only have a

00:40:09,089 --> 00:40:13,890
limited amount of spare time and I'm

00:40:11,369 --> 00:40:15,900
always not sure how the pure parts set

00:40:13,890 --> 00:40:18,270
up is compatible with the other set up I

00:40:15,900 --> 00:40:21,599
mean if I'm sure that's a pure part

00:40:18,270 --> 00:40:24,869
Sports is not running too long but from

00:40:21,599 --> 00:40:26,970
the for my gut feeling I'm not really

00:40:24,869 --> 00:40:28,770
sure I'm happy but perhaps that might

00:40:26,970 --> 00:40:37,680
change if I get shown that it works

00:40:28,770 --> 00:40:43,500
rather well next and last or don't we

00:40:37,680 --> 00:40:45,180
have a last question okay in that case I

00:40:43,500 --> 00:40:46,440
will just say thank you very much all

00:40:45,180 --> 00:40:47,130
for trolling for your question for

00:40:46,440 --> 00:40:49,530
discussion

00:40:47,130 --> 00:40:51,060
and I think there are a few more things

00:40:49,530 --> 00:40:52,830
discussing the remaining debconf days

00:40:51,060 --> 00:40:59,830
thank you

00:40:52,830 --> 00:40:59,830

YouTube URL: https://www.youtube.com/watch?v=jhlQ7EAj-nA


