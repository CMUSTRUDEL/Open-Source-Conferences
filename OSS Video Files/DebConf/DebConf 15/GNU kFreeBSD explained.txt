Title: GNU kFreeBSD explained
Publication date: 2017-12-02
Playlist: DebConf 15
Description: 
	by Steven Chamberlain

At: DebConf15
https://summit.debconf.org/debconf15/meeting/294/gnukfreebsd-explained/
https://debconf15.debconf.org/

An overview of how GNU/kFreeBSD works, and what it can do.  We present a rationale for porting work within Debian, and think about the future.  There will be a live demo of a jessie-kfreebsd system.

Room: Heidelberg
Scheduled start: 2015-08-15 17:00:00
Captions: 
	00:00:11,990 --> 00:00:16,949
hello

00:00:13,340 --> 00:00:19,380
so next talk will be a new car for us D

00:00:16,949 --> 00:00:23,010
will be presented by the ste Chamberlain

00:00:19,380 --> 00:00:23,369
I have hidden now to continue with the

00:00:23,010 --> 00:00:26,720
table

00:00:23,369 --> 00:00:31,710
thank you thank you hello everyone and

00:00:26,720 --> 00:00:35,059
this is new ke b st explained this

00:00:31,710 --> 00:00:39,270
appeared just short 20 minute talk

00:00:35,059 --> 00:00:44,370
talking about some of the history of

00:00:39,270 --> 00:00:45,450
care for bsd and the current status of

00:00:44,370 --> 00:00:47,820
it because it's been quite some time

00:00:45,450 --> 00:00:51,780
since we really did any sort of

00:00:47,820 --> 00:00:54,149
publicity demonstrated what new

00:00:51,780 --> 00:01:01,320
capability is now capable of in testing

00:00:54,149 --> 00:01:06,630
and said so new KPBS d is a sub-project

00:01:01,320 --> 00:01:10,020
within debian we only use packages from

00:01:06,630 --> 00:01:15,720
the official archive except linux

00:01:10,020 --> 00:01:21,000
because the idea was to use an

00:01:15,720 --> 00:01:22,920
alternative kernel I still like to use

00:01:21,000 --> 00:01:25,610
Linux and there's nothing really wrong

00:01:22,920 --> 00:01:25,610
with the next but

00:01:33,390 --> 00:01:37,080
this is not just simply a set of

00:01:35,550 --> 00:01:39,900
packages to be installed on a canoe

00:01:37,080 --> 00:01:43,260
Linux system but you can't simply

00:01:39,900 --> 00:01:45,030
apt-get install a kernel and booted the

00:01:43,260 --> 00:01:49,950
entire system has been recompiled for

00:01:45,030 --> 00:01:52,050
the freebsd kernel as well as the kernel

00:01:49,950 --> 00:01:55,950
we get all of the freebsd kernels

00:01:52,050 --> 00:01:58,620
hardware driver support so the drivers

00:01:55,950 --> 00:02:00,720
and themselves are different from in

00:01:58,620 --> 00:02:02,820
most cases different from the drivers

00:02:00,720 --> 00:02:04,500
shipped by Linux which is quite useful

00:02:02,820 --> 00:02:11,070
and in case you have trouble with

00:02:04,500 --> 00:02:13,020
hardware using Linux drivers and this

00:02:11,070 --> 00:02:15,000
would be an alternative to test the

00:02:13,020 --> 00:02:18,630
hardware to check if it's a kernel book

00:02:15,000 --> 00:02:21,060
or hardware issue or it may be that

00:02:18,630 --> 00:02:24,290
careful beasties simply works on

00:02:21,060 --> 00:02:26,489
hardware that you have available so

00:02:24,290 --> 00:02:29,459
instead of throwing it in the trash you

00:02:26,489 --> 00:02:30,900
could use care for beasty and still use

00:02:29,459 --> 00:02:34,260
hardware that otherwise would have been

00:02:30,900 --> 00:02:37,820
useless to you and as well as the kernel

00:02:34,260 --> 00:02:40,560
we take a few utilities from FreeBSD

00:02:37,820 --> 00:02:45,890
mainly just to boot it there are already

00:02:40,560 --> 00:02:45,890
some BSD utilities in the Debian archive

00:02:47,150 --> 00:02:54,930
so the mailing list actually does back

00:02:50,280 --> 00:03:04,920
to 1999 the work didn't begin that long

00:02:54,930 --> 00:03:07,470
ago the first debian bsd based system

00:03:04,920 --> 00:03:11,370
was something that matthew garrett

00:03:07,470 --> 00:03:13,620
claims to have bootstrapped but we never

00:03:11,370 --> 00:03:15,180
really the developers at the time I

00:03:13,620 --> 00:03:17,190
wasn't involved that long ago but the

00:03:15,180 --> 00:03:20,570
developers at the time and couldn't

00:03:17,190 --> 00:03:23,400
easily exchange the work they were doing

00:03:20,570 --> 00:03:26,970
people many developers then had dial-up

00:03:23,400 --> 00:03:32,329
connections it wasn't convenient to

00:03:26,970 --> 00:03:34,799
exchange whole machine images of

00:03:32,329 --> 00:03:36,870
compiled binaries as well as patched

00:03:34,799 --> 00:03:40,530
source code

00:03:36,870 --> 00:03:44,980
so you know in modern times github and

00:03:40,530 --> 00:03:46,630
the cloud giving free storages is really

00:03:44,980 --> 00:03:48,430
something we take for granted now it was

00:03:46,630 --> 00:03:56,590
a real limitation to online

00:03:48,430 --> 00:03:59,350
collaboration and in 2002 it was

00:03:56,590 --> 00:04:01,330
suggested that it may be easy easier to

00:03:59,350 --> 00:04:04,540
put Debian packages to a different

00:04:01,330 --> 00:04:07,150
kernel if the same Lib C was used new

00:04:04,540 --> 00:04:10,830
Lib see the new herd project was already

00:04:07,150 --> 00:04:10,830
active at the time and had the same idea

00:04:12,030 --> 00:04:17,079
Nathan Hawkins managed it bootstrap

00:04:14,650 --> 00:04:19,720
searches system based on FreeBSD and

00:04:17,079 --> 00:04:21,850
clean loop C but that was hosted on an

00:04:19,720 --> 00:04:24,610
FTP server at a university we've had a

00:04:21,850 --> 00:04:27,370
fire and before anyone else was able to

00:04:24,610 --> 00:04:33,580
get another copy of his work it was lost

00:04:27,370 --> 00:04:37,810
permanently so it was Boost apt again by

00:04:33,580 --> 00:04:38,950
someone else for what millon and he took

00:04:37,810 --> 00:04:41,680
it further and managed to make the

00:04:38,950 --> 00:04:43,810
Schrute it was a Schrute running on top

00:04:41,680 --> 00:04:47,290
of regular FreeBSD it wasn't something

00:04:43,810 --> 00:04:49,570
bootable by itself but it contained

00:04:47,290 --> 00:04:52,780
enough of the compilers tool chain and

00:04:49,570 --> 00:04:55,090
Debian core packages to actually build

00:04:52,780 --> 00:04:58,570
new packages so from there you could

00:04:55,090 --> 00:05:01,570
build many many more things like

00:04:58,570 --> 00:05:06,310
building the kernel and being able to

00:05:01,570 --> 00:05:09,100
boot came like much later and it was

00:05:06,310 --> 00:05:11,940
accepted into in stable in 2009 prior to

00:05:09,100 --> 00:05:14,470
that there was an unreleased archive of

00:05:11,940 --> 00:05:19,180
custom-built packages that had been like

00:05:14,470 --> 00:05:22,900
manually bootstrapped so not something

00:05:19,180 --> 00:05:25,120
really releasable as they they wouldn't

00:05:22,900 --> 00:05:27,160
have undergone the same QA or has

00:05:25,120 --> 00:05:31,540
security support as the rest of the

00:05:27,160 --> 00:05:34,479
Debian archive would by 2011 it was

00:05:31,540 --> 00:05:37,240
ready for release with squeeze it was

00:05:34,479 --> 00:05:40,120
called the technology preview because it

00:05:37,240 --> 00:05:45,010
was still somewhat boogy and incomplete

00:05:40,120 --> 00:05:48,330
and it had about 85% of Debian source

00:05:45,010 --> 00:05:48,330
packages building for it

00:05:48,810 --> 00:05:55,920
by 2013 9 increase to 29% ZFS support

00:05:52,950 --> 00:05:58,230
was added in the Installer and also

00:05:55,920 --> 00:06:00,780
within group 2 that was that was work

00:05:58,230 --> 00:06:03,150
done by Robert Mellon I actually noticed

00:06:00,780 --> 00:06:06,140
this show up more recently on the

00:06:03,150 --> 00:06:09,600
PlayStation 4 dev kit there was a

00:06:06,140 --> 00:06:12,540
screenshot leaked of the ps4 dev kit and

00:06:09,600 --> 00:06:15,680
that was booting free bs like a freebsd

00:06:12,540 --> 00:06:20,820
derived system not new KPBS D but

00:06:15,680 --> 00:06:22,950
FreeBSD itself Sony we're using that

00:06:20,820 --> 00:06:25,910
that code that Robert millon had written

00:06:22,950 --> 00:06:25,910
for for this project

00:06:26,930 --> 00:06:33,510
BST gels were working and even now we

00:06:30,750 --> 00:06:39,840
still don't have a full set of utilities

00:06:33,510 --> 00:06:42,630
to administer that easily but what can

00:06:39,840 --> 00:06:49,080
be done with that is you can create

00:06:42,630 --> 00:06:51,030
multiple routes basically but it

00:06:49,080 --> 00:06:54,540
includes facilities more like containers

00:06:51,030 --> 00:06:58,680
yeah you can assign multiple IP

00:06:54,540 --> 00:07:03,540
addresses to a server and then assign

00:06:58,680 --> 00:07:06,240
some of those IP addresses to your

00:07:03,540 --> 00:07:10,020
containers which each run in a BSD jail

00:07:06,240 --> 00:07:17,070
so you could run a service within the

00:07:10,020 --> 00:07:18,690
jail and then log into those SSH

00:07:17,070 --> 00:07:20,910
services so for example on my

00:07:18,690 --> 00:07:23,850
development system which runs

00:07:20,910 --> 00:07:27,660
Weezie new carry bsd there are shoots

00:07:23,850 --> 00:07:33,840
for CID which I'll show you how it has

00:07:27,660 --> 00:07:40,320
its own IP address its own IP address on

00:07:33,840 --> 00:07:42,300
the local network so I have shoes for

00:07:40,320 --> 00:07:45,380
each of like sid jesse wheezy and I can

00:07:42,300 --> 00:07:45,380
just ssh into them

00:07:47,670 --> 00:07:57,720
and the PF firewall was already ready PF

00:07:54,840 --> 00:08:00,330
firewall has a configuration syntax

00:07:57,720 --> 00:08:05,750
which is quite desirable it's similar to

00:08:00,330 --> 00:08:09,120
a utility I forget the name of that is

00:08:05,750 --> 00:08:13,790
used as a wrapper around IP tables that

00:08:09,120 --> 00:08:16,350
DSA uses a tool to administer IP tables

00:08:13,790 --> 00:08:18,330
PF firewall configuration su tax it was

00:08:16,350 --> 00:08:24,300
actually quite similar to that and it's

00:08:18,330 --> 00:08:28,050
very extensible with wheezy we already

00:08:24,300 --> 00:08:30,600
had Apache my single PHP scripting

00:08:28,050 --> 00:08:34,740
languages so to someone who's familiar

00:08:30,600 --> 00:08:37,050
with a Linux Apache my sequel PHP

00:08:34,740 --> 00:08:39,180
development environment if you were to

00:08:37,050 --> 00:08:41,430
put them on a wheezy nuclear bsd server

00:08:39,180 --> 00:08:44,550
they probably wouldn't notice any

00:08:41,430 --> 00:08:51,000
difference because the only tools that

00:08:44,550 --> 00:08:55,740
they really use already available you

00:08:51,000 --> 00:08:58,880
could also deploy a wheezy

00:08:55,740 --> 00:09:03,270
schroot on top of freebsd itself

00:08:58,880 --> 00:09:05,640
containing Debian packages and the

00:09:03,270 --> 00:09:08,220
connealy Lipsy and you could run those

00:09:05,640 --> 00:09:10,770
on top of FreeBSD so we were actually

00:09:08,220 --> 00:09:12,540
bringing software to FreeBSD that might

00:09:10,770 --> 00:09:13,640
not have existed in there there on

00:09:12,540 --> 00:09:16,800
FreeBSD ports

00:09:13,640 --> 00:09:19,080
archive and you could do the reverse you

00:09:16,800 --> 00:09:23,010
could install a FreeBSD Schrute on top

00:09:19,080 --> 00:09:25,350
of Debian new care for BSD and if for

00:09:23,010 --> 00:09:29,220
example you had proprietary software

00:09:25,350 --> 00:09:31,380
compiled for FreeBSD you would be able

00:09:29,220 --> 00:09:33,630
to use this to run it on a actually

00:09:31,380 --> 00:09:39,510
Debian based system without

00:09:33,630 --> 00:09:42,840
virtualization and ZFS I mentioned was

00:09:39,510 --> 00:09:46,410
already working in wheezy also there was

00:09:42,840 --> 00:09:50,400
support to create ZFS pack file systems

00:09:46,410 --> 00:09:53,790
within the Installer if you have a ZFS

00:09:50,400 --> 00:09:56,820
file server there's a lot of discussion

00:09:53,790 --> 00:09:59,939
recently about the ideal way to backup

00:09:56,820 --> 00:10:02,609
data with Debian based servers

00:09:59,939 --> 00:10:05,819
and what I do and have been doing for

00:10:02,609 --> 00:10:09,569
some time is with my ZFS file system for

00:10:05,819 --> 00:10:16,949
a file server sorry I am periodically i

00:10:09,569 --> 00:10:21,419
sync my data to that server and you ZFS

00:10:16,949 --> 00:10:26,789
snapshots which allowed to permanently

00:10:21,419 --> 00:10:30,299
keep a consistent set of files from from

00:10:26,789 --> 00:10:38,059
that particular point in time which you

00:10:30,299 --> 00:10:42,869
could restore later he's an example of

00:10:38,059 --> 00:10:45,329
the ZFS utils script in Debian Etsy

00:10:42,869 --> 00:10:47,659
default ZFS utils you can configure

00:10:45,329 --> 00:10:51,419
snapshots to happen automatically and

00:10:47,659 --> 00:10:59,549
then arbitrarily delete snapshots

00:10:51,419 --> 00:11:01,589
between snapshots if you do this on the

00:10:59,549 --> 00:11:03,629
assumption that the most recent data is

00:11:01,589 --> 00:11:05,879
most important to you you're most likely

00:11:03,629 --> 00:11:08,970
to want to restore recent data but you

00:11:05,879 --> 00:11:12,689
still like with less granularity some

00:11:08,970 --> 00:11:14,489
backups from longer ago that this is a

00:11:12,689 --> 00:11:18,929
really good way of doing that which you

00:11:14,489 --> 00:11:21,299
can't easily do in with incrementals

00:11:18,929 --> 00:11:23,459
like tip style incrementals because you

00:11:21,299 --> 00:11:25,919
can't arbitrarily delete incrementals

00:11:23,459 --> 00:11:28,169
you would need like a full set of

00:11:25,919 --> 00:11:31,679
incrementals scipio to restore to a

00:11:28,169 --> 00:11:34,079
particular point in time but this was

00:11:31,679 --> 00:11:38,939
working really well in ZFS already in

00:11:34,079 --> 00:11:41,579
wizzy on production servers and I've

00:11:38,939 --> 00:11:43,889
deployed this and once server didn't

00:11:41,579 --> 00:11:45,449
crash didn't have to be rebooted for a

00:11:43,889 --> 00:11:49,349
serious security vulnerability in the

00:11:45,449 --> 00:11:49,729
kernel didn't didn't go down for 400

00:11:49,349 --> 00:11:56,309
days

00:11:49,729 --> 00:12:01,049
consistently continuously sorry for miss

00:11:56,309 --> 00:12:02,369
wasn't great the first bar here these

00:12:01,049 --> 00:12:03,689
pin these benchmarks will be taken with

00:12:02,369 --> 00:12:06,899
a grain of salt they're not necessarily

00:12:03,689 --> 00:12:09,239
benchmarking the OS itself but the way

00:12:06,899 --> 00:12:11,869
that packages or third-party software

00:12:09,239 --> 00:12:15,260
gets built and then how it then performs

00:12:11,869 --> 00:12:19,200
in situ

00:12:15,260 --> 00:12:21,570
it has improved between Weezy and Jesse

00:12:19,200 --> 00:12:24,720
and it's almost on a par with Linux for

00:12:21,570 --> 00:12:27,740
certain tasks anything that's like

00:12:24,720 --> 00:12:27,740
heavily cpu-bound

00:12:27,920 --> 00:12:33,959
should perform the same either way if

00:12:31,860 --> 00:12:37,200
it's limited by i/o it can in some cases

00:12:33,959 --> 00:12:43,610
even be faster on FreeBSD especially

00:12:37,200 --> 00:12:48,240
using ZFS with features like compression

00:12:43,610 --> 00:12:51,779
and caifa PC has shown up in a few

00:12:48,240 --> 00:12:54,930
places around the world in Japan in

00:12:51,779 --> 00:12:56,940
Tokyo I noticed this picture of

00:12:54,930 --> 00:13:00,240
someone's laptop at that conference is

00:12:56,940 --> 00:13:03,120
Tokyo it seems they had FreeBSD and had

00:13:00,240 --> 00:13:10,110
installed the debian eesh root on top of

00:13:03,120 --> 00:13:16,740
it also it was apparently powering the

00:13:10,110 --> 00:13:19,560
new PG git repository server and in 2015

00:13:16,740 --> 00:13:20,579
it was rejected from the official

00:13:19,560 --> 00:13:26,550
release

00:13:20,579 --> 00:13:29,040
but right now christoph and i are trying

00:13:26,550 --> 00:13:30,079
to put together a release of jessie from

00:13:29,040 --> 00:13:36,300
the state it was in

00:13:30,079 --> 00:13:37,740
when official jesse was released and it

00:13:36,300 --> 00:13:40,620
allowed the kernel of free bc ten point

00:13:37,740 --> 00:13:44,959
or which has many improvements that are

00:13:40,620 --> 00:13:44,959
relevant to desktop use cases mostly

00:13:45,350 --> 00:13:49,550
we've now pointed more than 90 percent

00:13:47,370 --> 00:13:54,510
of packages to run on this po ass and

00:13:49,550 --> 00:13:56,730
fixed a lot of books if you were to use

00:13:54,510 --> 00:13:58,199
this on a desktop it's possible with

00:13:56,730 --> 00:14:00,930
some difficulty to set up disk

00:13:58,199 --> 00:14:06,690
encryption ZFS provides compression

00:14:00,930 --> 00:14:10,199
checksumming of data redundancy if you

00:14:06,690 --> 00:14:12,300
have multiple disks it integrates

00:14:10,199 --> 00:14:13,829
support for raid or even if you only

00:14:12,300 --> 00:14:19,199
have one disk you can ask it to start

00:14:13,829 --> 00:14:21,930
two copies of files and it will

00:14:19,199 --> 00:14:24,390
automatically use the it'll detect

00:14:21,930 --> 00:14:26,699
corruption on the disk and still be able

00:14:24,390 --> 00:14:27,750
to retrieve a intact copy from elsewhere

00:14:26,699 --> 00:14:30,780
on the disk unless the

00:14:27,750 --> 00:14:34,050
entire disk fails or too much of the

00:14:30,780 --> 00:14:36,150
metadata is lost again you can use the

00:14:34,050 --> 00:14:37,860
ZFS snapshots locally instead of on a

00:14:36,150 --> 00:14:48,060
file server and then you can run those

00:14:37,860 --> 00:14:50,310
more often say hourly and we support

00:14:48,060 --> 00:14:52,770
multiple desktops except for gnome which

00:14:50,310 --> 00:14:56,520
it would have been too difficult at the

00:14:52,770 --> 00:14:59,310
time for us to port it was changing

00:14:56,520 --> 00:15:02,460
quite a lot due to system D logon D

00:14:59,310 --> 00:15:04,560
integration and although free/busy has

00:15:02,460 --> 00:15:06,420
shown it can be ported still to freebsd

00:15:04,560 --> 00:15:11,850
we didn't really have the resources to

00:15:06,420 --> 00:15:13,320
do that ourselves within Debian and 3d

00:15:11,850 --> 00:15:16,020
graphics should be improved because

00:15:13,320 --> 00:15:17,580
previously there weren't actually kernel

00:15:16,020 --> 00:15:25,770
mode switching drivers available but

00:15:17,580 --> 00:15:28,980
they are now we have a separate Jessie

00:15:25,770 --> 00:15:31,770
caifa beastie suite for this so we can

00:15:28,980 --> 00:15:33,720
now make corrections to packages without

00:15:31,770 --> 00:15:36,660
going through stable proposed updates

00:15:33,720 --> 00:15:39,120
but our own capability Jessie proposed

00:15:36,660 --> 00:15:40,770
updates and we can fix portability books

00:15:39,120 --> 00:15:43,110
that may not have been seriously enough

00:15:40,770 --> 00:15:46,260
to request a stable PU from the release

00:15:43,110 --> 00:15:48,330
team but we can fix other books that are

00:15:46,260 --> 00:15:52,050
more specific to care for bsd and try to

00:15:48,330 --> 00:15:55,220
make it less buggy overall it has

00:15:52,050 --> 00:15:59,580
security updates and security team have

00:15:55,220 --> 00:16:04,800
hosted bill T and our packages on the

00:15:59,580 --> 00:16:06,450
security door mirrors so an install

00:16:04,800 --> 00:16:09,600
system would have a apt sources.list

00:16:06,450 --> 00:16:11,880
something like this so thank you to a

00:16:09,600 --> 00:16:13,320
team aster and security teams who are

00:16:11,880 --> 00:16:28,920
actually hosting our project on their

00:16:13,320 --> 00:16:31,140
infrastructure the user land and we take

00:16:28,920 --> 00:16:36,320
a snapshot of the freebsd kernel that's

00:16:31,140 --> 00:16:38,550
packaged as care for bc-10 sauce package

00:16:36,320 --> 00:16:40,800
from that we build care for BC kernel

00:16:38,550 --> 00:16:43,230
headers we prefer that as few packages

00:16:40,800 --> 00:16:45,030
as possible actually use the kernel

00:16:43,230 --> 00:16:46,320
headers because we want software to be

00:16:45,030 --> 00:16:50,480
portable and not really care which

00:16:46,320 --> 00:16:50,480
kernel is running on the machine and

00:16:51,589 --> 00:16:58,740
when we upgrade the kernel only packages

00:16:55,589 --> 00:17:00,209
such as the G Lib C and some

00:16:58,740 --> 00:17:02,240
cross-platform libraries such as Libby

00:17:00,209 --> 00:17:04,290
USB which directly access to Hardware

00:17:02,240 --> 00:17:06,350
those are said to be the only things

00:17:04,290 --> 00:17:11,459
that really need changes for a big

00:17:06,350 --> 00:17:14,130
kernel transition so the libraries are

00:17:11,459 --> 00:17:20,130
upsetting away specifics about the

00:17:14,130 --> 00:17:23,130
kernel if you were to pull out your own

00:17:20,130 --> 00:17:24,959
package we don't want to be listed as

00:17:23,130 --> 00:17:28,020
another if def in a header

00:17:24,959 --> 00:17:30,210
you know like Linux OpenBSD FreeBSD and

00:17:28,020 --> 00:17:34,440
then dragonfly bsd we don't wanna be in

00:17:30,210 --> 00:17:36,360
another one of these because and it's

00:17:34,440 --> 00:17:39,420
better in core to distinguish whether

00:17:36,360 --> 00:17:42,660
you need a specific kernel feature or a

00:17:39,420 --> 00:17:47,280
feature of the user land better still if

00:17:42,660 --> 00:17:49,170
if you test for specific features that

00:17:47,280 --> 00:17:51,830
your software needs to enable a piece of

00:17:49,170 --> 00:17:54,390
code so that someday if that kernel or

00:17:51,830 --> 00:17:57,690
that specific combination of kernel and

00:17:54,390 --> 00:17:59,250
userland gain support for a feature it

00:17:57,690 --> 00:18:06,500
will be used automatically on the next

00:17:59,250 --> 00:18:06,500
package build so I'm gonna skip that

00:18:08,710 --> 00:18:12,549
so what I'd like to do is care for

00:18:09,970 --> 00:18:16,450
basting myself is support old hardware

00:18:12,549 --> 00:18:18,999
for longer if possible Linux for example

00:18:16,450 --> 00:18:24,100
has no longer installable from floppy

00:18:18,999 --> 00:18:26,139
drives I think some people will have all

00:18:24,100 --> 00:18:29,850
hardware lying around and it's not

00:18:26,139 --> 00:18:35,889
really obsolete until we stop making

00:18:29,850 --> 00:18:37,210
up-to-date software for it and I

00:18:35,889 --> 00:18:39,220
mentioned already you may have save

00:18:37,210 --> 00:18:41,580
free/busy proprietary applications you

00:18:39,220 --> 00:18:46,779
might may not want to throw those away

00:18:41,580 --> 00:18:48,610
but rather be able to run those still in

00:18:46,779 --> 00:19:00,309
a tree root for example on a more

00:18:48,610 --> 00:19:02,470
up-to-date Debian system I think this

00:19:00,309 --> 00:19:05,110
project should pave the way for new herd

00:19:02,470 --> 00:19:07,570
maybe I see the the architecture of new

00:19:05,110 --> 00:19:09,460
her to be more like the ideal of how it

00:19:07,570 --> 00:19:15,129
like things to be is currently not as

00:19:09,460 --> 00:19:17,619
capable as care for BST but since we're

00:19:15,129 --> 00:19:20,830
trying to abstract away kernel specific

00:19:17,619 --> 00:19:22,360
features I think new hood will benefit

00:19:20,830 --> 00:19:27,249
from our work and that should be

00:19:22,360 --> 00:19:28,480
eventually easier I'm going to put these

00:19:27,249 --> 00:19:30,549
slides up online because I don't have

00:19:28,480 --> 00:19:37,119
time to get through all of them I did

00:19:30,549 --> 00:19:42,460
promise you a demo so STL for example is

00:19:37,119 --> 00:19:44,139
very portable the the new support for

00:19:42,460 --> 00:19:47,169
accelerated graphics makes this possible

00:19:44,139 --> 00:19:50,730
the frame eights were terrible before

00:19:47,169 --> 00:19:53,259
with the VGA graphics but now when

00:19:50,730 --> 00:19:55,919
accelerated 2d and even 3d graphics are

00:19:53,259 --> 00:19:55,919
now possible

00:20:01,490 --> 00:20:05,760
another thing we do have wines so at

00:20:04,529 --> 00:20:11,220
some point we are trying to get steamed

00:20:05,760 --> 00:20:12,690
and and initially Windows games to

00:20:11,220 --> 00:20:14,220
actually be able to still work because

00:20:12,690 --> 00:20:17,850
it's a popular thing that people try to

00:20:14,220 --> 00:20:21,059
do on free operating systems they still

00:20:17,850 --> 00:20:22,769
like to run their world applications yes

00:20:21,059 --> 00:20:25,649
so actually steam just work and some

00:20:22,769 --> 00:20:29,039
steam games will also work I'll

00:20:25,649 --> 00:20:31,440
encourage you to try out kefir BST will

00:20:29,039 --> 00:20:32,429
there will be announcements shortly with

00:20:31,440 --> 00:20:35,580
it within Deb camp

00:20:32,429 --> 00:20:37,409
sorry DEFCON when we have a release

00:20:35,580 --> 00:20:39,510
build or release candidate put together

00:20:37,409 --> 00:20:43,130
but that will be coming this week and

00:20:39,510 --> 00:20:44,940
you'll be able to try it hopefully so

00:20:43,130 --> 00:20:49,000
I'm afraid we don't have time for your

00:20:44,940 --> 00:20:53,579
questions and thank you all thank you

00:20:49,000 --> 00:20:53,579
[Applause]

00:21:54,080 --> 00:21:58,460
it's a talk scheduled for the half past

00:22:19,490 --> 00:22:25,429
you can yet okay one question I have is

00:22:22,960 --> 00:22:28,510
what's actually the most difficult thing

00:22:25,429 --> 00:22:30,770
when porting like some software that

00:22:28,510 --> 00:22:36,649
compiles on FreeBSD and

00:22:30,770 --> 00:22:37,940
on Debian Linux 2k FreeBSD and that's

00:22:36,649 --> 00:22:42,950
actually really useful when software

00:22:37,940 --> 00:22:44,870
supports FreeBSD and GNU Linux and you

00:22:42,950 --> 00:22:49,010
can sometimes solve the problem in two

00:22:44,870 --> 00:22:51,230
different ways you may have a choice to

00:22:49,010 --> 00:22:53,929
use either the freebsd support if it can

00:22:51,230 --> 00:22:55,429
communicate with the kernel still or you

00:22:53,929 --> 00:22:57,350
could choose to use the new linux

00:22:55,429 --> 00:22:59,270
support if there's enough of the new

00:22:57,350 --> 00:23:04,100
userland there for it to communicate

00:22:59,270 --> 00:23:05,450
with just random example and that that

00:23:04,100 --> 00:23:09,140
dialogue of the top right of the screen

00:23:05,450 --> 00:23:11,000
is responding to a CPI events now

00:23:09,140 --> 00:23:12,740
whatever shows that dialogue we never

00:23:11,000 --> 00:23:15,230
parted that so that was something that

00:23:12,740 --> 00:23:17,990
worked on FreeBSD and because it's

00:23:15,230 --> 00:23:20,450
listening probably to dev D just a

00:23:17,990 --> 00:23:23,090
userland piece of software that talks to

00:23:20,450 --> 00:23:25,600
the kernel receiving a CPI event because

00:23:23,090 --> 00:23:27,559
of that it just works automatically and

00:23:25,600 --> 00:23:34,880
they may have been yet another way of

00:23:27,559 --> 00:23:40,159
doing this by looking at CC TL or /proc

00:23:34,880 --> 00:23:42,440
where we have compatibility

00:23:40,159 --> 00:23:46,159
compatibility interfaces into things

00:23:42,440 --> 00:23:49,000
that a Linux program may expect there to

00:23:46,159 --> 00:23:49,000
be on that system

00:24:01,820 --> 00:24:12,320
um I seem what's current suggestions or

00:24:08,070 --> 00:24:12,320
we commanded a installation procedure

00:24:12,350 --> 00:24:19,610
wait for the announcement and there's

00:24:14,990 --> 00:24:21,480
there have been some Jessie CD bills but

00:24:19,610 --> 00:24:23,790
we didn't think they were fit for

00:24:21,480 --> 00:24:29,750
release until the last of the books were

00:24:23,790 --> 00:24:34,170
fixed being perfectionists and all yeah

00:24:29,750 --> 00:24:35,970
we have a an upload being made today of

00:24:34,170 --> 00:24:38,310
Debian installer and when that's

00:24:35,970 --> 00:24:45,330
finished I'll be a mini ISO and netbook

00:24:38,310 --> 00:24:48,210
images and if if Steve McIntyre has time

00:24:45,330 --> 00:24:53,000
during Deb conf will put out a full spin

00:24:48,210 --> 00:24:53,000
of install media and we'll announce that

00:24:56,950 --> 00:25:08,990
[Applause]

00:25:01,580 --> 00:25:08,990

YouTube URL: https://www.youtube.com/watch?v=E4BZYEF0i7A


