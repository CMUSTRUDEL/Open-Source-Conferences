Title: Preferred Debian Packaging
Publication date: 2017-12-03
Playlist: DebConf 15
Description: 
	by Daniel Kahn Gillmor

At: DebConf15
https://summit.debconf.org/debconf15/meeting/307/preferred-debian-packaging/
https://debconf15.debconf.org/

I've written up my "preferred packaging" techniques at https://wiki.debian.org/DanielKahnGillmor/preferred_packaging -- I'd like to briefly present them in person, with a projector to show how I work with the tools and how i investigate a package's revision history this way.

Room: Berlin/London
Scheduled start: 2015-08-16 15:00:00
Captions: 
	00:00:00,000 --> 00:00:08,599
thank you very much okay so thanks

00:00:03,990 --> 00:00:10,980
everybody for coming this is how you can

00:00:08,599 --> 00:00:12,179
if you're packaging software and you

00:00:10,980 --> 00:00:13,889
want me to work on it with you this is

00:00:12,179 --> 00:00:15,599
how you can do that it's a very

00:00:13,889 --> 00:00:16,920
self-centered talk I just wanted to

00:00:15,599 --> 00:00:19,740
explain some of the things that I like

00:00:16,920 --> 00:00:22,140
about some practices that I prefer about

00:00:19,740 --> 00:00:25,500
Debian packaging and I don't pretend

00:00:22,140 --> 00:00:27,599
that this is a any sort of official

00:00:25,500 --> 00:00:29,369
permanent or final thing it's just I

00:00:27,599 --> 00:00:30,779
wanted to share some ideas that I have

00:00:29,369 --> 00:00:34,500
about the way that I work with packages

00:00:30,779 --> 00:00:36,480
in the hopes that maybe well sort of -

00:00:34,500 --> 00:00:38,010
hopes one is that I hope that I can show

00:00:36,480 --> 00:00:39,960
you something that you hadn't heard of

00:00:38,010 --> 00:00:41,520
or maybe you thought you were doing

00:00:39,960 --> 00:00:42,420
differently or maybe you think it's the

00:00:41,520 --> 00:00:44,340
right thing to do and you're just nice

00:00:42,420 --> 00:00:45,360
to see somebody else doing it my second

00:00:44,340 --> 00:00:48,030
hope is that you can tell me what I'm

00:00:45,360 --> 00:00:49,770
doing wrong and and you can help me

00:00:48,030 --> 00:00:51,809
learn and improve on my own packaging

00:00:49,770 --> 00:00:53,250
techniques so if you see something that

00:00:51,809 --> 00:00:54,420
I'm proposing up here and you think

00:00:53,250 --> 00:00:56,309
there's a problem with it I'd like to

00:00:54,420 --> 00:00:57,719
hear about it too so I just wanted I'd

00:00:56,309 --> 00:00:59,460
like to see more of a culture within

00:00:57,719 --> 00:01:01,140
Debian of people who are doing packaging

00:00:59,460 --> 00:01:02,430
explaining what they're doing and so I

00:01:01,140 --> 00:01:03,780
thought I would just step up and explain

00:01:02,430 --> 00:01:07,229
here are some of the practices that I do

00:01:03,780 --> 00:01:08,790
in the hopes that other people will do

00:01:07,229 --> 00:01:10,530
the same and explain what they're doing

00:01:08,790 --> 00:01:14,220
and maybe they can learn from me and I

00:01:10,530 --> 00:01:16,830
can learn from them so without much

00:01:14,220 --> 00:01:18,990
further ado I'm just gonna dive into it

00:01:16,830 --> 00:01:21,479
if you have questions I'm perfectly

00:01:18,990 --> 00:01:24,299
happy to be interrupted we have some

00:01:21,479 --> 00:01:26,909
folks with walking mics in the crowd you

00:01:24,299 --> 00:01:28,500
can just raise your hand and so if

00:01:26,909 --> 00:01:30,869
you've got a question or an interruption

00:01:28,500 --> 00:01:32,909
or whatever that's fine I doubt I'll go

00:01:30,869 --> 00:01:34,470
the whole 15 minutes I think there's 20

00:01:32,909 --> 00:01:35,640
minutes I'll go the whole time so there

00:01:34,470 --> 00:01:37,590
will be also time for questions at the

00:01:35,640 --> 00:01:41,490
end if you prefer but I don't mind being

00:01:37,590 --> 00:01:43,530
interrupted so this is all in this

00:01:41,490 --> 00:01:44,970
webpage here you could probably skip

00:01:43,530 --> 00:01:45,869
this talk and go read the webpage but

00:01:44,970 --> 00:01:47,520
then you wouldn't get to have the nice

00:01:45,869 --> 00:01:49,049
in-person interaction and it's easier to

00:01:47,520 --> 00:01:52,320
tell me that I'm wrong in person so I'd

00:01:49,049 --> 00:01:54,299
like to have that happen so I put this

00:01:52,320 --> 00:01:56,340
up on the Debian wiki because I want

00:01:54,299 --> 00:01:57,930
anyone to be able to find it if you're

00:01:56,340 --> 00:01:59,939
if you think you've got some good ideas

00:01:57,930 --> 00:02:03,390
you should put up up the Debian wiki to

00:01:59,939 --> 00:02:07,170
other people can take advantage of the

00:02:03,390 --> 00:02:10,229
ideas that you've got so so okay so

00:02:07,170 --> 00:02:12,120
first baseline is I really like revision

00:02:10,229 --> 00:02:13,650
control and I know this makes me a

00:02:12,120 --> 00:02:16,590
certain flavor of nerd

00:02:13,650 --> 00:02:18,030
but but when we're working with things

00:02:16,590 --> 00:02:22,409
that are as complicated as software

00:02:18,030 --> 00:02:24,599
packages and we're working I mean in

00:02:22,409 --> 00:02:26,040
Debian I think a lot of people don't get

00:02:24,599 --> 00:02:27,930
that in Debian you're not just working

00:02:26,040 --> 00:02:29,250
on one software package you're actually

00:02:27,930 --> 00:02:30,959
probably if you're doing it responsibly

00:02:29,250 --> 00:02:33,359
working on at least two software

00:02:30,959 --> 00:02:35,099
packages and maybe five right so you've

00:02:33,359 --> 00:02:36,870
got the version that's in unstable and

00:02:35,099 --> 00:02:38,579
you've got the version that you're

00:02:36,870 --> 00:02:41,430
trying to maintain for stable as well

00:02:38,579 --> 00:02:45,690
and we're committing we're committing to

00:02:41,430 --> 00:02:50,239
doing maintenance work right a lot of

00:02:45,690 --> 00:02:52,859
our work within the project is is

00:02:50,239 --> 00:02:54,120
janitorial in nature right where you

00:02:52,859 --> 00:02:55,170
want to clean up the mess and we want to

00:02:54,120 --> 00:02:58,470
sort of stay out of the way and make

00:02:55,170 --> 00:02:59,790
sure things work functionally for people

00:02:58,470 --> 00:03:01,079
who are relying on the operating system

00:02:59,790 --> 00:03:02,939
to not get in their way

00:03:01,079 --> 00:03:04,439
so revision control I think is really

00:03:02,939 --> 00:03:06,150
helpful because it means you can keep

00:03:04,439 --> 00:03:08,220
track of what changes you've done on

00:03:06,150 --> 00:03:09,930
different branches of the project while

00:03:08,220 --> 00:03:12,870
you're maintaining both of them so

00:03:09,930 --> 00:03:13,859
basically I require working with the

00:03:12,870 --> 00:03:15,870
revision control system but I'm

00:03:13,859 --> 00:03:17,159
comfortable with I prefer git I'm not

00:03:15,870 --> 00:03:19,819
going to have a religious war about it

00:03:17,159 --> 00:03:22,949
if upstream uses git I'm even happier

00:03:19,819 --> 00:03:29,909
and I try to make my packaging depend on

00:03:22,949 --> 00:03:33,000
upstreams revision control so I like to

00:03:29,909 --> 00:03:33,930
use git build package and I like to use

00:03:33,000 --> 00:03:36,359
it with debhelper

00:03:33,930 --> 00:03:37,799
so if you haven't tried out get build

00:03:36,359 --> 00:03:40,109
package we're gonna have a git bill

00:03:37,799 --> 00:03:41,879
package Skillshare session later on

00:03:40,109 --> 00:03:44,549
today actually and I welcome you to come

00:03:41,879 --> 00:03:46,560
and share your tricks with it or learn

00:03:44,549 --> 00:03:47,849
some tricks from other people it's a

00:03:46,560 --> 00:03:50,970
particular way that you can keep your

00:03:47,849 --> 00:03:52,859
Debian packaging in a git repo and it

00:03:50,970 --> 00:03:55,949
helps you to keep track of all of the

00:03:52,859 --> 00:03:58,019
changes that have happened within within

00:03:55,949 --> 00:03:59,129
your packaging and within upstream to

00:03:58,019 --> 00:04:01,500
make sure that you're not accidentally

00:03:59,129 --> 00:04:03,180
making other changes so it's very easy

00:04:01,500 --> 00:04:06,419
to go back and review what you've done I

00:04:03,180 --> 00:04:08,970
find that really useful I definitely

00:04:06,419 --> 00:04:11,220
also like to keep up streams source code

00:04:08,970 --> 00:04:12,389
in the same revision control system I

00:04:11,220 --> 00:04:13,889
like to keep the tarballs in the

00:04:12,389 --> 00:04:15,900
revision control system because it means

00:04:13,889 --> 00:04:17,789
that if someone is interested they can

00:04:15,900 --> 00:04:19,650
use this tool called Deb checkout and

00:04:17,789 --> 00:04:21,389
you can use Deb checkout with the name

00:04:19,650 --> 00:04:23,370
of a package you so just you know I'm

00:04:21,389 --> 00:04:25,020
really interested in package foo let me

00:04:23,370 --> 00:04:26,070
see the source code for that Deb check

00:04:25,020 --> 00:04:28,860
out foo

00:04:26,070 --> 00:04:31,530
and you get the source code and you get

00:04:28,860 --> 00:04:33,060
the source code from a revision control

00:04:31,530 --> 00:04:37,920
system that you can now track and you

00:04:33,060 --> 00:04:40,050
can propose changes on so and you can

00:04:37,920 --> 00:04:41,880
also extract the tarball from that from

00:04:40,050 --> 00:04:43,110
that revision control system Deb check

00:04:41,880 --> 00:04:45,090
it actually works even if you don't have

00:04:43,110 --> 00:04:46,230
upstream stuff in there but I like to

00:04:45,090 --> 00:04:47,520
keep it all in one revision control

00:04:46,230 --> 00:04:48,480
system it's just easier to find

00:04:47,520 --> 00:04:51,540
everything where you want

00:04:48,480 --> 00:04:54,450
I also some some of these things that I

00:04:51,540 --> 00:04:56,610
prefer have to do with what the upstream

00:04:54,450 --> 00:04:58,830
software developer has done so I'm less

00:04:56,610 --> 00:05:00,990
inclined to try to package an upstream

00:04:58,830 --> 00:05:02,640
software project if they just throw tar

00:05:00,990 --> 00:05:04,350
balls over the wall into an FTP site

00:05:02,640 --> 00:05:05,670
every now and then it makes it more

00:05:04,350 --> 00:05:07,980
difficult for me to know what they're

00:05:05,670 --> 00:05:09,120
doing and why they're doing it so I like

00:05:07,980 --> 00:05:10,980
it what I've already said when an

00:05:09,120 --> 00:05:12,990
upstream users get I also like it when

00:05:10,980 --> 00:05:15,660
upstream signs their releases and says

00:05:12,990 --> 00:05:17,640
hey here's a specific release because

00:05:15,660 --> 00:05:19,680
that's a signal that I can use to say

00:05:17,640 --> 00:05:23,880
upstream at least somebody else who's

00:05:19,680 --> 00:05:24,900
understands the project can has said we

00:05:23,880 --> 00:05:26,670
think this is something that other

00:05:24,900 --> 00:05:28,260
people can use or this is a particular

00:05:26,670 --> 00:05:29,730
version that we would like other people

00:05:28,260 --> 00:05:31,350
to test there are a lot of other

00:05:29,730 --> 00:05:32,490
situations where maybe it's not so

00:05:31,350 --> 00:05:34,080
important and having that be

00:05:32,490 --> 00:05:36,030
cryptographically signed is really

00:05:34,080 --> 00:05:37,980
useful I care about cryptographic

00:05:36,030 --> 00:05:41,070
signatures on software because I want to

00:05:37,980 --> 00:05:43,020
know that what I'm running is related to

00:05:41,070 --> 00:05:45,300
the code that somebody else thought

00:05:43,020 --> 00:05:47,190
should be run and if you don't verify

00:05:45,300 --> 00:05:49,020
yourself for cryptographically anyone

00:05:47,190 --> 00:05:50,490
who can intercept the network connection

00:05:49,020 --> 00:05:52,470
between you and that software can modify

00:05:50,490 --> 00:05:54,530
the software before it gets to you and a

00:05:52,470 --> 00:05:57,690
cryptographic signature just says look

00:05:54,530 --> 00:05:59,460
this is a this is a version that I am ok

00:05:57,690 --> 00:06:01,170
with I'm putting it out there and it

00:05:59,460 --> 00:06:08,880
comes from me and so I can have a trace

00:06:01,170 --> 00:06:10,140
back to that to that point so let me

00:06:08,880 --> 00:06:11,520
just talk briefly about how you do

00:06:10,140 --> 00:06:13,260
cryptographic verification of upstream

00:06:11,520 --> 00:06:14,580
so one is you might know upstream you

00:06:13,260 --> 00:06:17,280
might know them personally you know

00:06:14,580 --> 00:06:19,190
their key already that's fine that's not

00:06:17,280 --> 00:06:23,040
the usual case we work on the Internet

00:06:19,190 --> 00:06:24,180
so in the situation where your upstream

00:06:23,040 --> 00:06:25,740
is signing their tar balls and you

00:06:24,180 --> 00:06:27,840
haven't met them you don't have to sign

00:06:25,740 --> 00:06:29,820
their key you don't have to say you know

00:06:27,840 --> 00:06:31,320
I announce this is their key but it's

00:06:29,820 --> 00:06:33,300
probably the same one that's signing

00:06:31,320 --> 00:06:35,190
every release so you should keep track

00:06:33,300 --> 00:06:37,780
of that Debian has a nice way to keep

00:06:35,190 --> 00:06:40,300
track of that by you just

00:06:37,780 --> 00:06:42,160
you can tell debian how to find the new

00:06:40,300 --> 00:06:44,260
version of the upstream tar ball so this

00:06:42,160 --> 00:06:44,830
is in the Debian watch file if you type

00:06:44,260 --> 00:06:48,610
man

00:06:44,830 --> 00:06:50,260
you scan letter you SCA n you can learn

00:06:48,610 --> 00:06:52,270
more about Debian watch and Debian watch

00:06:50,260 --> 00:06:53,980
now has a feature that lets you say not

00:06:52,270 --> 00:06:56,710
only is this where you find the tar ball

00:06:53,980 --> 00:06:58,330
but upstream publishes signatures and

00:06:56,710 --> 00:07:00,850
the signatures look like this you know

00:06:58,330 --> 00:07:02,710
like they've got a dot cig at the end so

00:07:00,850 --> 00:07:05,110
there's a particular arcane way to

00:07:02,710 --> 00:07:06,730
specify that but if you specify it the

00:07:05,110 --> 00:07:07,930
new scan can find not only the upstream

00:07:06,730 --> 00:07:11,200
tar ball they can find the upstream

00:07:07,930 --> 00:07:14,020
signature and if you drop up streams

00:07:11,200 --> 00:07:15,130
signing key which of course I didn't put

00:07:14,020 --> 00:07:18,370
on the wiki page someone should edit

00:07:15,130 --> 00:07:21,310
that and fix it you can put the upstream

00:07:18,370 --> 00:07:25,570
signing key in Debian slash upstream

00:07:21,310 --> 00:07:27,130
slash signing key ASC so you can

00:07:25,570 --> 00:07:30,160
indicate and then and then if you do

00:07:27,130 --> 00:07:32,770
that you scan when you say you scan you

00:07:30,160 --> 00:07:34,600
can tell so maybe some people here don't

00:07:32,770 --> 00:07:37,090
know how to use you scan you scan is a

00:07:34,600 --> 00:07:38,710
very simple tool you run it from a

00:07:37,090 --> 00:07:40,510
software package that has a Debian

00:07:38,710 --> 00:07:42,010
directory or even one level up if you

00:07:40,510 --> 00:07:44,380
keep all of your software packages in in

00:07:42,010 --> 00:07:47,320
one folder you can go one level up and

00:07:44,380 --> 00:07:49,300
say you scan and then look in all of the

00:07:47,320 --> 00:07:51,340
folders directly that are children of it

00:07:49,300 --> 00:07:53,080
and look for new versions by trying to

00:07:51,340 --> 00:07:55,539
find the new upstream version in Debian

00:07:53,080 --> 00:07:57,460
/watch and if you've configured Debbie

00:07:55,539 --> 00:07:59,410
and watch properly it can find the new

00:07:57,460 --> 00:08:02,350
upstream signatures and if you've got

00:07:59,410 --> 00:08:04,330
the upstream slash signing key ASC then

00:08:02,350 --> 00:08:05,890
it'll actually verify the signatures for

00:08:04,330 --> 00:08:07,690
you as part of fetching the new upstream

00:08:05,890 --> 00:08:09,250
tarball so you can get all of those

00:08:07,690 --> 00:08:10,419
things just by setting up your packaging

00:08:09,250 --> 00:08:11,830
that way sorry there's a hand up down

00:08:10,419 --> 00:08:16,120
there can we get the mic down to the

00:08:11,830 --> 00:08:22,150
hand thanks or to the person who has the

00:08:16,120 --> 00:08:28,060
hand it's not just a hand publish a

00:08:22,150 --> 00:08:32,409
table and a hash don't Sh sha-1 and sign

00:08:28,060 --> 00:08:34,630
the hash does sha dot ASC yep can use

00:08:32,409 --> 00:08:37,120
can cope with this and check the

00:08:34,630 --> 00:08:39,310
signature on the hash and the hash

00:08:37,120 --> 00:08:41,560
belongs to the table oh I don't believe

00:08:39,310 --> 00:08:43,870
that you scan can do that currently so

00:08:41,560 --> 00:08:45,460
anybody out there who wants to make

00:08:43,870 --> 00:08:46,750
things better for the world should go

00:08:45,460 --> 00:08:48,430
hack on you scan that's a pretty

00:08:46,750 --> 00:08:50,860
straightforward thing that we should fix

00:08:48,430 --> 00:08:55,570
because I agree that's a common pattern

00:08:50,860 --> 00:08:58,810
I have no answer to this question but I

00:08:55,570 --> 00:09:01,120
have an another question how could do

00:08:58,810 --> 00:09:06,399
you convince upstreams who don't really

00:09:01,120 --> 00:09:08,140
stars or who don't set text in get which

00:09:06,399 --> 00:09:10,360
women who don't make tags and yeah yeah

00:09:08,140 --> 00:09:13,240
if they have no text you cannot check

00:09:10,360 --> 00:09:18,100
out in table is there any good way to

00:09:13,240 --> 00:09:19,810
convince upstream to do this right so so

00:09:18,100 --> 00:09:22,089
gate has this nice feature which is that

00:09:19,810 --> 00:09:25,420
you can create a tag which is associated

00:09:22,089 --> 00:09:27,550
with a particular revision and and then

00:09:25,420 --> 00:09:29,680
you you'd like to have a tag everywhere

00:09:27,550 --> 00:09:32,830
that that a tarball has been released

00:09:29,680 --> 00:09:35,620
from I'm tempted to pull up a get viewer

00:09:32,830 --> 00:09:37,570
and shows people some tags the question

00:09:35,620 --> 00:09:39,940
that you ask is a social one though not

00:09:37,570 --> 00:09:41,709
just a technical one and I actually find

00:09:39,940 --> 00:09:44,980
my up streams are pretty responsive

00:09:41,709 --> 00:09:46,600
usually I frame my request as hey it

00:09:44,980 --> 00:09:49,180
looks like you made this tarball from

00:09:46,600 --> 00:09:51,520
this particular commit ID if you could

00:09:49,180 --> 00:09:53,709
tag your releases it would be really

00:09:51,520 --> 00:09:55,570
helpful to me and here's the command

00:09:53,709 --> 00:09:58,360
that I would use to tag the release and

00:09:55,570 --> 00:09:59,589
I say get tagged and of course I can

00:09:58,360 --> 00:10:02,079
never remember so first I'd look it up

00:09:59,589 --> 00:10:03,910
but it's either a tag name commit ID or

00:10:02,079 --> 00:10:05,200
commit ID tag name but I would look it

00:10:03,910 --> 00:10:06,579
up and I would write the email so that

00:10:05,200 --> 00:10:08,500
all they have to do is they read it

00:10:06,579 --> 00:10:10,570
understand my argument and execute one

00:10:08,500 --> 00:10:11,829
command and then that gets them in I

00:10:10,570 --> 00:10:13,149
mean it doesn't get them in the habit

00:10:11,829 --> 00:10:18,490
but it starts them towards it

00:10:13,149 --> 00:10:21,760
thanks yes and if you say tag - s then

00:10:18,490 --> 00:10:23,350
the then your tag will be signed with a

00:10:21,760 --> 00:10:26,279
you know cryptographically signed which

00:10:23,350 --> 00:10:28,810
i think is a really good thing to do -

00:10:26,279 --> 00:10:31,570
so kripacharya verification of upstream

00:10:28,810 --> 00:10:34,000
as i said i want to keep up streams code

00:10:31,570 --> 00:10:36,339
in the revision control system I also

00:10:34,000 --> 00:10:38,350
like to keep it if you know in my ideal

00:10:36,339 --> 00:10:40,240
case upstream is using git I'm using it

00:10:38,350 --> 00:10:43,810
for packaging I actually like to keep up

00:10:40,240 --> 00:10:45,790
streams get history fully in my

00:10:43,810 --> 00:10:47,500
repository so that I don't just have the

00:10:45,790 --> 00:10:49,240
tarballs but I actually have all of

00:10:47,500 --> 00:10:51,670
their commits and that turns out to be

00:10:49,240 --> 00:10:54,430
really useful for two specific cases in

00:10:51,670 --> 00:10:56,680
one case there's a common scenario where

00:10:54,430 --> 00:10:58,329
upstream will fix a bug but they haven't

00:10:56,680 --> 00:11:00,610
made a release yet and that bug is

00:10:58,329 --> 00:11:02,560
really really obviously problematic for

00:11:00,610 --> 00:11:04,600
the folks who are using debian so I want

00:11:02,560 --> 00:11:06,639
to fix it but what I can do is

00:11:04,600 --> 00:11:09,699
I have their full revision history I can

00:11:06,639 --> 00:11:11,800
use get to cherry-pick the upstream

00:11:09,699 --> 00:11:13,690
commit and then I cherry-pick that

00:11:11,800 --> 00:11:15,130
upstream commit and I can apply that

00:11:13,690 --> 00:11:16,660
commit separately and really mate

00:11:15,130 --> 00:11:18,519
release a debian version that has the

00:11:16,660 --> 00:11:20,829
fix even before upstream has made it

00:11:18,519 --> 00:11:22,600
release with the fix so then one nice

00:11:20,829 --> 00:11:25,930
thing about having upstream revision is

00:11:22,600 --> 00:11:27,519
that I can actually basically pull fixes

00:11:25,930 --> 00:11:29,740
from upstream before they decided to

00:11:27,519 --> 00:11:33,519
release it the other advantage is the

00:11:29,740 --> 00:11:35,399
other way around often when I'm doing

00:11:33,519 --> 00:11:37,959
packaging I'll discover a problem and

00:11:35,399 --> 00:11:39,430
maybe I can fix the problem and in fact

00:11:37,959 --> 00:11:41,649
maybe I'm already shipping a debian

00:11:39,430 --> 00:11:43,720
package that fixes the problem well if

00:11:41,649 --> 00:11:46,180
my debian fixes can be directly applied

00:11:43,720 --> 00:11:49,000
to upstream then I can use whatever

00:11:46,180 --> 00:11:50,589
their preferred upstream patch

00:11:49,000 --> 00:11:52,720
submission guidelines are whether it's a

00:11:50,589 --> 00:11:54,910
github pull request or a patch to a

00:11:52,720 --> 00:11:58,660
mailing list or a hey can you pull this

00:11:54,910 --> 00:12:00,880
from my git repo over here email the

00:11:58,660 --> 00:12:02,350
fact that I'm using the same get history

00:12:00,880 --> 00:12:05,019
that they're using makes it much easier

00:12:02,350 --> 00:12:07,540
for me to push my changes back to them

00:12:05,019 --> 00:12:09,430
so it sort of sort of smooths the

00:12:07,540 --> 00:12:11,829
interaction if you can consolidate and

00:12:09,430 --> 00:12:14,889
use the same revision control system as

00:12:11,829 --> 00:12:16,839
they are towards that aim I use the

00:12:14,889 --> 00:12:19,600
system now called patch queue which is

00:12:16,839 --> 00:12:24,339
part of git build package so git build

00:12:19,600 --> 00:12:26,980
package is GPP patch queue is PQ so to

00:12:24,339 --> 00:12:29,709
execute to deal with patch queue you say

00:12:26,980 --> 00:12:32,290
gb p space PQ and then you have some

00:12:29,709 --> 00:12:36,040
commands and what that does is it takes

00:12:32,290 --> 00:12:37,630
so how many of you are vien packagers

00:12:36,040 --> 00:12:41,110
how many of you packaged software for

00:12:37,630 --> 00:12:43,180
debian a very large percentage but not

00:12:41,110 --> 00:12:44,410
everyone hopefully some folks are

00:12:43,180 --> 00:12:47,800
considering starting packaging who

00:12:44,410 --> 00:12:49,149
haven't done it yet so of those of you

00:12:47,800 --> 00:12:51,040
who packaged software how many of you

00:12:49,149 --> 00:12:53,230
packaged software with modifications how

00:12:51,040 --> 00:12:55,600
many of you ship a modified version of

00:12:53,230 --> 00:12:57,699
the upstream sources beyond the Debian

00:12:55,600 --> 00:12:59,980
directory just debian patches right so

00:12:57,699 --> 00:13:03,519
the common the common way to do that for

00:12:59,980 --> 00:13:05,769
the debian 3.0 quilt packaging scheme is

00:13:03,519 --> 00:13:08,040
that in your Debian directory you have a

00:13:05,769 --> 00:13:10,480
patches subdirectory that has a set of

00:13:08,040 --> 00:13:11,920
individual patches that apply certain

00:13:10,480 --> 00:13:14,439
changes and they're applied in order

00:13:11,920 --> 00:13:18,020
based on the file called Debian patches

00:13:14,439 --> 00:13:19,970
series so maintaining that is

00:13:18,020 --> 00:13:21,560
kind of a drag when upstream makes big

00:13:19,970 --> 00:13:22,820
changes and then all of a sudden you've

00:13:21,560 --> 00:13:25,250
got this set of patches and they don't

00:13:22,820 --> 00:13:26,390
quite apply um it's a drag even if you

00:13:25,250 --> 00:13:29,720
don't have it in the Debian patches

00:13:26,390 --> 00:13:32,830
directory but what Debian patch queue

00:13:29,720 --> 00:13:36,709
does is it Maps that directory of

00:13:32,830 --> 00:13:39,830
patches into a little branch on your git

00:13:36,709 --> 00:13:41,810
revision history and so when you get a

00:13:39,830 --> 00:13:44,149
new upstream version you can say patch

00:13:41,810 --> 00:13:45,890
queue rebase and it takes it and it

00:13:44,149 --> 00:13:47,690
treats it just as get it takes the patch

00:13:45,890 --> 00:13:50,180
queue and it you know you've already

00:13:47,690 --> 00:13:52,190
imported it the new version and it

00:13:50,180 --> 00:13:54,020
reapplies your patches and sometimes

00:13:52,190 --> 00:13:56,570
that means some minor adjustments gets

00:13:54,020 --> 00:13:58,339
really good at figuring out what the

00:13:56,570 --> 00:14:00,140
right minor adjustments are to make and

00:13:58,339 --> 00:14:02,839
so all of a sudden the patch queue is

00:14:00,140 --> 00:14:04,540
rebased and you refresh it in your

00:14:02,839 --> 00:14:08,450
revision control system thank you and

00:14:04,540 --> 00:14:10,580
and and and there you go

00:14:08,450 --> 00:14:13,310
so I like to use git build package patch

00:14:10,580 --> 00:14:15,470
queue tagging it was already brought up

00:14:13,310 --> 00:14:17,630
thank you for that I like to tag

00:14:15,470 --> 00:14:19,100
everything that I release I like to push

00:14:17,630 --> 00:14:22,010
that as soon as I can so that other

00:14:19,100 --> 00:14:24,920
people who are following my work can

00:14:22,010 --> 00:14:26,149
know where my release has come from the

00:14:24,920 --> 00:14:28,130
reason that I like other people

00:14:26,149 --> 00:14:31,850
following my work is they can fix my

00:14:28,130 --> 00:14:33,470
bugs easier so I make mistakes everybody

00:14:31,850 --> 00:14:34,940
makes mistakes and it's really important

00:14:33,470 --> 00:14:37,279
to me that if someone makes if someone

00:14:34,940 --> 00:14:38,750
catches one of my mistakes I can accept

00:14:37,279 --> 00:14:40,459
their feedback their criticism their

00:14:38,750 --> 00:14:43,520
improvements as easily as possible

00:14:40,459 --> 00:14:45,709
I want a low barrier to entry for people

00:14:43,520 --> 00:14:47,750
to help me fix my problems it's

00:14:45,709 --> 00:14:49,459
selfishness so I try to patch it and

00:14:47,750 --> 00:14:51,980
publish these things so people can find

00:14:49,459 --> 00:14:53,180
it I'm gonna rattle through some of

00:14:51,980 --> 00:14:55,310
these period pretty fast because we're

00:14:53,180 --> 00:14:56,750
almost out of time I like to put my

00:14:55,310 --> 00:14:58,279
repos someplace where other people can

00:14:56,750 --> 00:15:00,260
get to them at the moment I like to put

00:14:58,279 --> 00:15:02,750
them in collab mate it has some problems

00:15:00,260 --> 00:15:05,209
but it's better than not publishing your

00:15:02,750 --> 00:15:07,100
stuff and it's nice because it's sort of

00:15:05,209 --> 00:15:09,200
a public use so I put stuff in collab

00:15:07,100 --> 00:15:11,029
mate I like to standardize how my

00:15:09,200 --> 00:15:12,890
branches are named so if I'm working on

00:15:11,029 --> 00:15:15,050
something that's got a stable version

00:15:12,890 --> 00:15:16,790
that's for Jesse I'll name the branch

00:15:15,050 --> 00:15:18,320
Jesse because I'll probably be making

00:15:16,790 --> 00:15:22,190
changes like I said when editing

00:15:18,320 --> 00:15:24,170
multiple branches of software I try to

00:15:22,190 --> 00:15:26,930
push as frequently as I've made

00:15:24,170 --> 00:15:28,970
something that looks sensible I do not

00:15:26,930 --> 00:15:30,470
feel obliged to push my commits to a

00:15:28,970 --> 00:15:31,459
public repository when I'm still

00:15:30,470 --> 00:15:32,990
experimenting

00:15:31,459 --> 00:15:34,879
actually really like to experiment and

00:15:32,990 --> 00:15:37,160
and I also like to keep track of my

00:15:34,879 --> 00:15:39,379
experiments while I'm doing them so I

00:15:37,160 --> 00:15:41,269
try to push when there's like a sensible

00:15:39,379 --> 00:15:42,889
set of changes and I try to get myself

00:15:41,269 --> 00:15:45,439
to a point where I can understand what

00:15:42,889 --> 00:15:46,970
I've done even if it's wrong if we can

00:15:45,439 --> 00:15:49,249
get myself to a conceptual point that

00:15:46,970 --> 00:15:50,720
where it's done I will push my changes

00:15:49,249 --> 00:15:53,029
so other people can see what I'm working

00:15:50,720 --> 00:15:54,649
on and then work from there it's okay to

00:15:53,029 --> 00:15:56,389
public to push something that's wrong as

00:15:54,649 --> 00:15:58,939
long as you push something that's people

00:15:56,389 --> 00:16:01,670
can understand when you make a get

00:15:58,939 --> 00:16:02,749
commit if you're working with it one of

00:16:01,670 --> 00:16:05,869
the things that helps me to think about

00:16:02,749 --> 00:16:07,189
for for commit messages people often

00:16:05,869 --> 00:16:09,499
think the commit message should say what

00:16:07,189 --> 00:16:11,929
change you made I think that the get

00:16:09,499 --> 00:16:13,790
patch shows what change you've made and

00:16:11,929 --> 00:16:17,389
I think your commit message should say

00:16:13,790 --> 00:16:19,790
why you made the change and that's what

00:16:17,389 --> 00:16:21,379
people really want to read and yeah if

00:16:19,790 --> 00:16:23,929
you need to explain technically why the

00:16:21,379 --> 00:16:25,879
thing that you did maps to the

00:16:23,929 --> 00:16:27,079
conceptual thing that you wanted to do

00:16:25,879 --> 00:16:28,220
then that's fine include that in your

00:16:27,079 --> 00:16:30,019
commit message too but it's really

00:16:28,220 --> 00:16:32,540
important to say why you made the change

00:16:30,019 --> 00:16:35,300
not just like initialize variable - no

00:16:32,540 --> 00:16:37,220
it's like okay well we can see that from

00:16:35,300 --> 00:16:39,619
the patch what you're really saying is

00:16:37,220 --> 00:16:41,360
there was a crash if someone did X and

00:16:39,619 --> 00:16:45,499
we were avoiding that crash by setting

00:16:41,360 --> 00:16:47,929
this to no so I like to send patches via

00:16:45,499 --> 00:16:49,429
via mail so I try to configure get email

00:16:47,929 --> 00:16:52,519
which makes it really easy to just push

00:16:49,429 --> 00:16:54,410
patches back upstream if I'm starting up

00:16:52,519 --> 00:16:56,329
taking over a project that somebody else

00:16:54,410 --> 00:16:58,189
has passed on and they didn't use git I

00:16:56,329 --> 00:16:59,420
will try to do historical imports I'm

00:16:58,189 --> 00:17:00,949
happy to talk with people about how to

00:16:59,420 --> 00:17:03,920
do that if you have questions come find

00:17:00,949 --> 00:17:05,449
me I like to keep my files nice and

00:17:03,920 --> 00:17:10,610
simple there's a tool called wrap and

00:17:05,449 --> 00:17:12,799
sort WRA P a and D - SOR T that just

00:17:10,610 --> 00:17:14,809
sort of canonical eise's your files to

00:17:12,799 --> 00:17:17,329
make them look yes and in a simple and

00:17:14,809 --> 00:17:18,949
sensible way and it's nice because it

00:17:17,329 --> 00:17:21,319
means that everything is sorry about

00:17:18,949 --> 00:17:23,270
that that it does things like

00:17:21,319 --> 00:17:25,730
alphabetize your list of build depends

00:17:23,270 --> 00:17:27,500
and breaks them out one per line and the

00:17:25,730 --> 00:17:29,270
nice thing about that is not since

00:17:27,500 --> 00:17:30,950
you're using revision control when you

00:17:29,270 --> 00:17:32,990
make a change to your build depends the

00:17:30,950 --> 00:17:34,700
changes become very easy to see oh they

00:17:32,990 --> 00:17:36,890
added one new package here there's a

00:17:34,700 --> 00:17:38,270
single plus one doom on your dependency

00:17:36,890 --> 00:17:40,520
they removed a build dependency so you

00:17:38,270 --> 00:17:44,000
can see that kind of thing I like to use

00:17:40,520 --> 00:17:45,320
DEP five to format Debian copyright to

00:17:44,000 --> 00:17:46,639
be machine readable it's

00:17:45,320 --> 00:17:48,110
for people who are doing scans of the

00:17:46,639 --> 00:17:49,759
archive and trying to reason about what

00:17:48,110 --> 00:17:51,980
the patterns are in licensing and free

00:17:49,759 --> 00:17:54,320
software and if I'm doing something

00:17:51,980 --> 00:17:56,000
really crazy that's gonna make a big

00:17:54,320 --> 00:17:57,679
change I like to use a feature branch in

00:17:56,000 --> 00:17:59,500
revision control so sorry we've got one

00:17:57,679 --> 00:18:03,110
minute left I want to open it up for

00:17:59,500 --> 00:18:12,110
four other questions it's kind of

00:18:03,110 --> 00:18:14,899
rambling you know said you are using rap

00:18:12,110 --> 00:18:18,289
and salt which is nice I had learnt that

00:18:14,899 --> 00:18:21,710
convict murder edit or CME it was the

00:18:18,289 --> 00:18:25,279
same drop and on my in some parts does a

00:18:21,710 --> 00:18:28,100
better job it also enhances standard

00:18:25,279 --> 00:18:33,080
version if it doesn't fit or it makes

00:18:28,100 --> 00:18:36,470
VCs fields properly as I should be OCME

00:18:33,080 --> 00:18:39,889
fix dpkg - control fixture control file

00:18:36,470 --> 00:18:41,899
okay CM e CA me and what is it in what

00:18:39,889 --> 00:18:45,230
package ii should see me in unstable

00:18:41,899 --> 00:18:47,779
here me and Jesse it's lip config model

00:18:45,230 --> 00:18:50,690
we're developing an unstable that's TMI

00:18:47,779 --> 00:18:57,620
okay thank you other questions or

00:18:50,690 --> 00:19:01,070
suggestions or complaints if you change

00:18:57,620 --> 00:19:03,740
the original source code and do some

00:19:01,070 --> 00:19:07,309
commits how do you convert that into a

00:19:03,740 --> 00:19:09,289
series of quilt packages not just I use

00:19:07,309 --> 00:19:10,820
patch queue for that as well so what I

00:19:09,289 --> 00:19:13,070
do is I say I want to move over to my

00:19:10,820 --> 00:19:14,629
patch queue view of the tree and then I

00:19:13,070 --> 00:19:18,019
make my changes and I make my commits

00:19:14,629 --> 00:19:20,269
and then I say Pat GB ppq export so

00:19:18,019 --> 00:19:21,830
that's patch queue export and it takes

00:19:20,269 --> 00:19:23,720
the patch queue that I'm on and dumps it

00:19:21,830 --> 00:19:26,929
back into the Debian patches directory

00:19:23,720 --> 00:19:28,399
so if you haven't used GBP patch queue I

00:19:26,929 --> 00:19:29,840
recommend looking into it it takes a

00:19:28,399 --> 00:19:31,190
little while to get used to and I still

00:19:29,840 --> 00:19:34,759
screw it up sometimes but it makes it

00:19:31,190 --> 00:19:38,269
easy to fix your mistakes - last

00:19:34,759 --> 00:19:40,429
question do you think it's possible to

00:19:38,269 --> 00:19:47,240
make this patch queue branch pool above

00:19:40,429 --> 00:19:48,559
by upstream it is I don't actually think

00:19:47,240 --> 00:19:50,029
it's possible to make it directly

00:19:48,559 --> 00:19:51,590
probable by upstream I think upstream

00:19:50,029 --> 00:19:52,879
can cherry-pick patches from it but I

00:19:51,590 --> 00:19:57,010
don't see how to make it potable if

00:19:52,879 --> 00:19:57,010
someone else does I'd be happy to learn

00:19:58,160 --> 00:20:04,550
yeah okay this was before last and last

00:20:01,420 --> 00:20:06,860
so my question is do you have a

00:20:04,550 --> 00:20:08,420
recording of you using the tools that

00:20:06,860 --> 00:20:12,080
you've mentioned a video recording will

00:20:08,420 --> 00:20:13,520
be great just to show I don't have

00:20:12,080 --> 00:20:16,130
anything like that and I don't really

00:20:13,520 --> 00:20:18,470
know how to do that if somebody wants to

00:20:16,130 --> 00:20:19,510
help me do that I'm happy to do it okay

00:20:18,470 --> 00:20:21,980
thanks

00:20:19,510 --> 00:20:25,100
let me I'm gonna give one last plug I

00:20:21,980 --> 00:20:29,210
know we're out of time here sorry of

00:20:25,100 --> 00:20:32,630
this is tool is called get K so this is

00:20:29,210 --> 00:20:33,710
an example sorry we should leave but

00:20:32,630 --> 00:20:36,200
this is but this is a way that I

00:20:33,710 --> 00:20:37,700
visualized my revision control system we

00:20:36,200 --> 00:20:39,410
could do a whole other session about get

00:20:37,700 --> 00:20:41,450
K if you don't try to visualize or get

00:20:39,410 --> 00:20:43,160
control system you're missing out so I

00:20:41,450 --> 00:20:44,960
recommend trying to find a way to

00:20:43,160 --> 00:20:45,260
visualize stuff find one that works for

00:20:44,960 --> 00:20:49,000
you

00:20:45,260 --> 00:20:49,000
thanks for coming thank you

00:20:51,900 --> 00:20:53,960

YouTube URL: https://www.youtube.com/watch?v=z2YSX9eZuwc


