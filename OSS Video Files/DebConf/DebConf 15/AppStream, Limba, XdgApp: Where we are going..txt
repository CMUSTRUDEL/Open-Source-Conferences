Title: AppStream, Limba, XdgApp: Where we are going.
Publication date: 2017-12-03
Playlist: DebConf 15
Description: 
	by Matthias Klumpp

At: DebConf15
https://summit.debconf.org/debconf15/meeting/200/appstream-limba-xdgapp-past-present-and-future/
https://debconf15.debconf.org/

AppStream is a metadata-enhancement project for both Linux distributions and upstream projects which develop for Linux. It allows upstreams to provide distributors with a machine-readable description of an application or generic software package, links to screenshots and websites and several other useful metadata.
It also allows projects to assign a unique identifier to their software, which allows other software to find it in the distribution's package repositories.
AppStream also is the basis for new exciting projects, like automatic UEFI firmware updates.

The first half of the talk will go into detail about why we need AppStream, and the work which was done to integrate it with Debian.

The second half of the talk will give an overview on the current plans to change the way software is distributed on Linux. Traditionally upstream software is packaged by a downstream Linux distributor and then released as a Linux distribution. Currently, work is going on on solutions to allow projects to distribute their software directly to the end user, as well as for sandboxing the 3rd-party software and isolating it from the rest of the system.
I will give a brief introduction on the Limba and XdgApp approaches to the software-distribution issue, and what we at Debian should prepare for in future.

Room: Berlin/London
Scheduled start: 2015-08-16 11:00:00
Captions: 
	00:03:22,620 --> 00:03:27,130
it takes a long time for first Ave going

00:03:25,870 --> 00:03:29,200
from upstream to the into the

00:03:27,130 --> 00:03:33,790
distribution and being shipped to the

00:03:29,200 --> 00:03:35,200
users so mainly the upstream always

00:03:33,790 --> 00:03:37,210
wants people to use the latest software

00:03:35,200 --> 00:03:39,610
or this have an option to use the latest

00:03:37,210 --> 00:03:43,110
software so in case you are on a stable

00:03:39,610 --> 00:03:43,110
distribution like that be unstable and

00:03:46,950 --> 00:03:52,209
suffer the upstream basically needs to

00:03:50,260 --> 00:03:54,640
wait for the user to upgrade the

00:03:52,209 --> 00:03:56,770
distribution or to get to compile a

00:03:54,640 --> 00:03:59,470
software or to do some other stance to

00:03:56,770 --> 00:04:00,880
to get it available if the user does not

00:03:59,470 --> 00:04:03,940
want to upgrade the distribution

00:04:00,880 --> 00:04:05,080
operator to a rolling release so the

00:04:03,940 --> 00:04:06,459
software usually goes to your

00:04:05,080 --> 00:04:07,810
distribution package owner who wants to

00:04:06,459 --> 00:04:10,150
suffer too much a certain quality

00:04:07,810 --> 00:04:12,190
standards for policy requirements and

00:04:10,150 --> 00:04:14,230
basically cares for a system integration

00:04:12,190 --> 00:04:16,120
because that's what we do in Debian we

00:04:14,230 --> 00:04:18,549
integrate software coming from upstream

00:04:16,120 --> 00:04:20,260
into the system and we are caring for

00:04:18,549 --> 00:04:23,760
the operating system part that the

00:04:20,260 --> 00:04:23,760
operating system is stable and

00:04:24,900 --> 00:04:29,350
distributing applications quickly and

00:04:27,610 --> 00:04:31,570
the distribution itself should be

00:04:29,350 --> 00:04:34,060
basically one solid because nobody who

00:04:31,570 --> 00:04:36,760
nobody wants part of the distribution

00:04:34,060 --> 00:04:39,280
exchanged in between unless he is a

00:04:36,760 --> 00:04:40,870
technical user and well knows how to

00:04:39,280 --> 00:04:44,530
deal with problems which might arise

00:04:40,870 --> 00:04:47,110
during up kernel appraised xorg upgrades

00:04:44,530 --> 00:04:48,790
or whatever happens so a rolling release

00:04:47,110 --> 00:04:50,229
distribution which you might assume

00:04:48,790 --> 00:04:53,290
would be an answer to this problem

00:04:50,229 --> 00:04:55,150
is not the solution for the user I have

00:04:53,290 --> 00:04:57,400
in mind in this case which is one who

00:04:55,150 --> 00:05:02,260
has no idea how to fix problems in case

00:04:57,400 --> 00:05:07,600
they happen so I think can you still

00:05:02,260 --> 00:05:09,790
hear me okay great then in order to fix

00:05:07,600 --> 00:05:11,979
this issues the presentation issue and

00:05:09,790 --> 00:05:14,410
the distribution issue several project

00:05:11,979 --> 00:05:16,900
have evolved to well to deal with it

00:05:14,410 --> 00:05:19,260
with his upstream metadata specification

00:05:16,900 --> 00:05:23,260
to solve the presentation issue and

00:05:19,260 --> 00:05:25,660
lambda and xdg app which solve the the

00:05:23,260 --> 00:05:27,669
problem or which attempt to solve as I

00:05:25,660 --> 00:05:29,500
said the problem of distributing

00:05:27,669 --> 00:05:31,690
software there's also new stuff like

00:05:29,500 --> 00:05:33,250
firmware update which is able to update

00:05:31,690 --> 00:05:35,050
you a5 firmware which is the new

00:05:33,250 --> 00:05:37,240
emerging project

00:05:35,050 --> 00:05:38,710
and which I will not talk about although

00:05:37,240 --> 00:05:40,210
it's very interesting and you should

00:05:38,710 --> 00:05:42,639
take a look at there's a working group

00:05:40,210 --> 00:05:44,229
and Debian forming right now to to bring

00:05:42,639 --> 00:05:47,319
into Debian so you will hear about it

00:05:44,229 --> 00:05:49,180
more in future so let's start with

00:05:47,319 --> 00:05:51,159
upstream and what this is actually

00:05:49,180 --> 00:05:52,680
because I made quite some lies about it

00:05:51,159 --> 00:05:55,900
so maybe you have heard about it already

00:05:52,680 --> 00:05:58,360
a stream is basically a metadata

00:05:55,900 --> 00:06:01,870
specification for every single software

00:05:58,360 --> 00:06:03,699
component it's basically just XML which

00:06:01,870 --> 00:06:06,759
upstreams create and ship with their

00:06:03,699 --> 00:06:09,130
software and which describes some

00:06:06,759 --> 00:06:10,630
information users find valuable and also

00:06:09,130 --> 00:06:14,680
some technical details about an

00:06:10,630 --> 00:06:16,870
application yeah those software

00:06:14,680 --> 00:06:18,490
components can be anything from firmware

00:06:16,870 --> 00:06:20,830
to a desktop application to an add-on

00:06:18,490 --> 00:06:23,169
extending an existing software to codec

00:06:20,830 --> 00:06:25,270
to input methods and to fonts this is

00:06:23,169 --> 00:06:28,780
already a distinction from the previous

00:06:25,270 --> 00:06:30,849
package a model where you now have

00:06:28,780 --> 00:06:32,889
different categories of what the

00:06:30,849 --> 00:06:37,000
software is and which users can search

00:06:32,889 --> 00:06:39,909
for a stream also after metadata it's

00:06:37,000 --> 00:06:42,580
also created by upstream projects yeah

00:06:39,909 --> 00:06:45,130
sorry for that app stream the upstream

00:06:42,580 --> 00:06:47,770
project and upstream is kind of

00:06:45,130 --> 00:06:49,569
confusing if I talk about it yeah well

00:06:47,770 --> 00:06:50,830
it's created by the the app stream

00:06:49,569 --> 00:06:53,740
metadata is created by the upstream

00:06:50,830 --> 00:06:55,719
project and the distributions only

00:06:53,740 --> 00:06:57,250
transform it and review it so there's no

00:06:55,719 --> 00:06:59,069
duplication not f4f effort anymore

00:06:57,250 --> 00:07:02,949
because the upstream project will write

00:06:59,069 --> 00:07:04,719
the write that all the details about the

00:07:02,949 --> 00:07:07,120
software the description even translated

00:07:04,719 --> 00:07:08,979
shape screenshots and stuff so we don't

00:07:07,120 --> 00:07:11,110
need to deal with it anymore you just

00:07:08,979 --> 00:07:15,940
need to check if it's same and can we

00:07:11,110 --> 00:07:18,340
ship to our users and also the upstream

00:07:15,940 --> 00:07:21,009
meta F saying xml metadata does not

00:07:18,340 --> 00:07:22,870
replace existing metadata but instead

00:07:21,009 --> 00:07:25,150
extends it for example if there's the

00:07:22,870 --> 00:07:26,979
deaths of fire present already

00:07:25,150 --> 00:07:28,779
we will not duplicate the information

00:07:26,979 --> 00:07:30,849
which is already in there but instead

00:07:28,779 --> 00:07:32,560
extended for example Edessa file does

00:07:30,849 --> 00:07:35,529
not have a long description so you

00:07:32,560 --> 00:07:37,690
created upstream metadata to add a long

00:07:35,529 --> 00:07:39,099
description to your application you will

00:07:37,690 --> 00:07:42,219
find this stuff installed into user

00:07:39,099 --> 00:07:43,839
share updater and one thing which is

00:07:42,219 --> 00:07:45,520
important for Debian packages is that

00:07:43,839 --> 00:07:47,139
you should ship this metadata file

00:07:45,520 --> 00:07:48,390
together with the desktop file in the

00:07:47,139 --> 00:07:50,940
same package

00:07:48,390 --> 00:07:52,470
and also in the same package where the

00:07:50,940 --> 00:07:53,760
application is in which should be

00:07:52,470 --> 00:07:54,330
installed in case the package is

00:07:53,760 --> 00:07:56,010
installed

00:07:54,330 --> 00:07:59,250
reasons for that will become obvious

00:07:56,010 --> 00:08:01,860
soon so how does it actually look like

00:07:59,250 --> 00:08:04,470
the upstream XML not sure if one can

00:08:01,860 --> 00:08:08,100
read this but yeah it's actually doesn't

00:08:04,470 --> 00:08:09,810
matter one key point of the XML ship by

00:08:08,100 --> 00:08:12,030
upstream is that it defines the

00:08:09,810 --> 00:08:14,370
universal and unique identifier for a

00:08:12,030 --> 00:08:17,430
software component this is multiple

00:08:14,370 --> 00:08:19,380
benefits for X and if you want to search

00:08:17,430 --> 00:08:21,030
for a software component and on a

00:08:19,380 --> 00:08:23,340
foreign distribution where I don't know

00:08:21,030 --> 00:08:25,800
the package name because this ID is

00:08:23,340 --> 00:08:27,900
unique among around among every

00:08:25,800 --> 00:08:31,290
distribution so this also means that

00:08:27,900 --> 00:08:33,900
software that upstream people can

00:08:31,290 --> 00:08:36,960
request a software component with this

00:08:33,900 --> 00:08:39,660
ID and ask the system to install a

00:08:36,960 --> 00:08:42,000
missing package in case you for example

00:08:39,660 --> 00:08:45,510
have a file manager wanting to access

00:08:42,000 --> 00:08:47,490
the network share via samba and samba is

00:08:45,510 --> 00:08:49,980
missing on the system the application

00:08:47,490 --> 00:08:52,200
can ask the user if he wants to install

00:08:49,980 --> 00:08:55,170
somebody fix this problem this leads to

00:08:52,200 --> 00:08:58,050
less craft and less unneeded components

00:08:55,170 --> 00:08:59,640
well still being user-friendly and being

00:08:58,050 --> 00:09:02,700
able to install missing stuff in case

00:08:59,640 --> 00:09:05,310
it's needed the metadata also contains

00:09:02,700 --> 00:09:08,660
quite some other stuff like a long

00:09:05,310 --> 00:09:12,180
description of the software or

00:09:08,660 --> 00:09:13,500
translation so in we do not need to read

00:09:12,180 --> 00:09:15,000
translate the stuff which is already

00:09:13,500 --> 00:09:18,660
translated upstream and those

00:09:15,000 --> 00:09:20,460
translations are well shipped to average

00:09:18,660 --> 00:09:23,130
distribution so there is no duplication

00:09:20,460 --> 00:09:25,320
of translation effort anymore although

00:09:23,130 --> 00:09:28,440
we could of course extended but yeah the

00:09:25,320 --> 00:09:30,240
all the work for this metadata creation

00:09:28,440 --> 00:09:33,360
happens upstream and the shared between

00:09:30,240 --> 00:09:35,850
distributions it also contains some URLs

00:09:33,360 --> 00:09:38,130
like after dream project links links to

00:09:35,850 --> 00:09:40,560
manual pages links to the back tracker

00:09:38,130 --> 00:09:42,600
donation page links and everything which

00:09:40,560 --> 00:09:44,280
the user might find useful to learn more

00:09:42,600 --> 00:09:48,150
about the application or to get help or

00:09:44,280 --> 00:09:49,760
to get well information about things

00:09:48,150 --> 00:09:53,990
there are also some screenshots URLs

00:09:49,760 --> 00:09:56,370
included so in this case no foreign

00:09:53,990 --> 00:09:58,830
person uploads a screenshot for the

00:09:56,370 --> 00:10:02,190
application which might badly represent

00:09:58,830 --> 00:10:05,250
it in upstream view but after

00:10:02,190 --> 00:10:07,710
itself creates screenshot how he wants

00:10:05,250 --> 00:10:09,630
he or she wants his/her application to

00:10:07,710 --> 00:10:11,610
be represented in the software center of

00:10:09,630 --> 00:10:13,980
the distribution

00:10:11,610 --> 00:10:16,290
one other thing with the absent

00:10:13,980 --> 00:10:19,500
specification provides is technical

00:10:16,290 --> 00:10:22,560
items like binaries ship with the

00:10:19,500 --> 00:10:25,830
application of mime types and this can

00:10:22,560 --> 00:10:29,280
be used in case the user wants to open

00:10:25,830 --> 00:10:31,530
for example a file type which is not

00:10:29,280 --> 00:10:33,300
which are no application is available to

00:10:31,530 --> 00:10:35,190
open it with and then the Software

00:10:33,300 --> 00:10:37,950
Center can ask for can search for a

00:10:35,190 --> 00:10:41,610
component providing support for this

00:10:37,950 --> 00:10:43,260
mine type so in general it's a way to

00:10:41,610 --> 00:10:45,630
through metadata to make the system

00:10:43,260 --> 00:10:49,830
smarter on what is actually needed to

00:10:45,630 --> 00:10:52,020
solve a certain task so now the is also

00:10:49,830 --> 00:10:53,910
distribution XML which is the thing

00:10:52,020 --> 00:10:55,320
which we actually ship to the user in

00:10:53,910 --> 00:10:58,710
which we create from the upstream

00:10:55,320 --> 00:11:00,240
metadata it is a Djamel file in Debian

00:10:58,710 --> 00:11:02,700
and XML and any other distribution

00:11:00,240 --> 00:11:07,230
reason for that are historic but mainly

00:11:02,700 --> 00:11:09,330
our FTP masters well do not like XML and

00:11:07,230 --> 00:11:11,250
asked me to write a gem of specification

00:11:09,330 --> 00:11:14,130
instead so I created a different

00:11:11,250 --> 00:11:15,720
specification so we are in Debian and

00:11:14,130 --> 00:11:17,630
all Debian derivatives are the only

00:11:15,720 --> 00:11:20,670
distributions using Djamel as

00:11:17,630 --> 00:11:21,450
intermediate format you ship absolutely

00:11:20,670 --> 00:11:23,730
metadata

00:11:21,450 --> 00:11:26,670
it's called DEP 11 because it's Debian

00:11:23,730 --> 00:11:29,760
extension project 11 and you can read

00:11:26,670 --> 00:11:32,400
about it in the wiki this is my sound

00:11:29,760 --> 00:11:34,290
bad at the first but currently all tools

00:11:32,400 --> 00:11:38,160
are able to handle both the Jama files

00:11:34,290 --> 00:11:40,950
and the XML files so it does not matter

00:11:38,160 --> 00:11:44,280
what you should if it's the Debian jumbo

00:11:40,950 --> 00:11:46,110
or the XML this files make the data

00:11:44,280 --> 00:11:48,630
accessible for software centers like

00:11:46,110 --> 00:11:51,210
genome software or KDE Smew and discover

00:11:48,630 --> 00:11:54,900
which is right now in development and

00:11:51,210 --> 00:11:56,610
which will be shipped soon yeah and it

00:11:54,900 --> 00:11:58,170
provides the component the software

00:11:56,610 --> 00:12:01,800
component to package name mapping to

00:11:58,170 --> 00:12:03,540
install stuff which is required what we

00:12:01,800 --> 00:12:05,490
also do with the distribution size is to

00:12:03,540 --> 00:12:07,980
merge metadata from the deso files into

00:12:05,490 --> 00:12:10,740
the final XML so you will have one XML

00:12:07,980 --> 00:12:13,500
file containing all metadata or one JAMA

00:12:10,740 --> 00:12:15,960
fall in Debian's case and we also

00:12:13,500 --> 00:12:17,910
extract icons and screenshots and

00:12:15,960 --> 00:12:20,130
other components the main reason for

00:12:17,910 --> 00:12:22,440
caching screenshots is legal reasons

00:12:20,130 --> 00:12:24,450
because we want to be able to in case

00:12:22,440 --> 00:12:25,680
there is something inappropriate and in

00:12:24,450 --> 00:12:28,589
appropriate screen search we want to be

00:12:25,680 --> 00:12:32,070
able to delete it and we also do not

00:12:28,589 --> 00:12:34,140
want some foreign URL to be linked

00:12:32,070 --> 00:12:37,440
against from inside Debian from the

00:12:34,140 --> 00:12:39,209
surface Center so we basically catch it

00:12:37,440 --> 00:12:42,570
at the Debian site to get some control

00:12:39,209 --> 00:12:44,820
over it hmm the architecture looks like

00:12:42,570 --> 00:12:46,800
this now so we have this composed server

00:12:44,820 --> 00:12:48,690
at the Debian site which reads all the

00:12:46,800 --> 00:12:52,620
package files extracts all the metadata

00:12:48,690 --> 00:12:55,470
and then creates the XML well the Jama

00:12:52,620 --> 00:12:57,480
data in this case and a table all of all

00:12:55,470 --> 00:12:59,370
the icons on the mirror the mirror will

00:12:57,480 --> 00:13:02,010
be the archive itself and there are

00:12:59,370 --> 00:13:04,020
still negotiation missing missing with

00:13:02,010 --> 00:13:06,720
the FTP masters to get the data included

00:13:04,020 --> 00:13:09,570
into the official mirror but all the apt

00:13:06,720 --> 00:13:11,610
parts are ready so apps will be able to

00:13:09,570 --> 00:13:14,550
download this data additional to the

00:13:11,610 --> 00:13:17,580
client where will then be transformed

00:13:14,550 --> 00:13:19,890
into exception database which is then

00:13:17,580 --> 00:13:22,080
consumed by the Software Center the

00:13:19,890 --> 00:13:23,670
genome software project will not use a

00:13:22,080 --> 00:13:25,529
second database but reads the data

00:13:23,670 --> 00:13:27,450
directly and said but yeah in the end it

00:13:25,529 --> 00:13:29,370
doesn't matter the data is available as

00:13:27,450 --> 00:13:32,330
soon as it's downloaded by out onto the

00:13:29,370 --> 00:13:34,020
client we will not download the data

00:13:32,330 --> 00:13:36,330
unconditionally but it would be a

00:13:34,020 --> 00:13:38,790
setting which is likely set by the

00:13:36,330 --> 00:13:40,170
software centers themselves so to advise

00:13:38,790 --> 00:13:41,970
app to download this data

00:13:40,170 --> 00:13:43,680
yeah there's office center itself

00:13:41,970 --> 00:13:45,150
interfaces with packaged kid with with

00:13:43,680 --> 00:13:47,339
which is a package management

00:13:45,150 --> 00:13:50,490
abstraction layer available and all

00:13:47,339 --> 00:13:52,709
almost all distributions were just then

00:13:50,490 --> 00:13:56,220
which is a distribution agnostic way to

00:13:52,709 --> 00:13:58,500
install software there's also work going

00:13:56,220 --> 00:14:00,420
on on a feedback server where you can

00:13:58,500 --> 00:14:03,240
where users can write the software and

00:14:00,420 --> 00:14:05,670
review it but this is very early work

00:14:03,240 --> 00:14:08,820
there are some communication going on

00:14:05,670 --> 00:14:11,700
with new with the people who are trying

00:14:08,820 --> 00:14:13,860
to take well working on the new open

00:14:11,700 --> 00:14:18,350
collaboration service versification to

00:14:13,860 --> 00:14:20,310
get this into inter upstream later so

00:14:18,350 --> 00:14:22,560
important for the abbien

00:14:20,310 --> 00:14:24,329
how does it look like you can find all

00:14:22,560 --> 00:14:27,540
the generator services on upstream

00:14:24,329 --> 00:14:29,580
debian org when you find an overview of

00:14:27,540 --> 00:14:31,709
how much metadata we extract

00:14:29,580 --> 00:14:34,050
and how much metadata we do not extract

00:14:31,709 --> 00:14:36,480
but could probably get right now it's

00:14:34,050 --> 00:14:38,940
about 15,000 different software

00:14:36,480 --> 00:14:40,470
components but there are a lot more and

00:14:38,940 --> 00:14:43,709
there are a few issues to be fixed in

00:14:40,470 --> 00:14:45,660
order to make it - in order to make the

00:14:43,709 --> 00:14:47,339
data extraction work flawlessly there

00:14:45,660 --> 00:14:49,380
are still a few bugs in the metadata

00:14:47,339 --> 00:14:51,720
generator which is the reason why I did

00:14:49,380 --> 00:14:54,329
not announce it publicly on the Debian

00:14:51,720 --> 00:14:58,260
devil announce mailing list but as soon

00:14:54,329 --> 00:15:00,000
as as apt is able to download the data I

00:14:58,260 --> 00:15:04,440
will do an official now it's made of it

00:15:00,000 --> 00:15:07,380
but the service will show you just like

00:15:04,440 --> 00:15:09,660
lint Ian or why your application was not

00:15:07,380 --> 00:15:12,540
included into the metadata which is I

00:15:09,660 --> 00:15:15,480
would say in 70% of all cases missing

00:15:12,540 --> 00:15:17,430
icons because for some reason the icons

00:15:15,480 --> 00:15:20,160
could not be found in the archive or are

00:15:17,430 --> 00:15:23,279
only available as xpm images which we

00:15:20,160 --> 00:15:25,470
cannot reasonably ship on modern surface

00:15:23,279 --> 00:15:29,180
centers

00:15:25,470 --> 00:15:32,279
it also shows information about the

00:15:29,180 --> 00:15:35,760
extracted metadata this is the DEF 11

00:15:32,279 --> 00:15:37,560
Djamel file and well the general

00:15:35,760 --> 00:15:39,660
incarnation of the of the upstream

00:15:37,560 --> 00:15:41,640
metadata and yeah it will show you what

00:15:39,660 --> 00:15:44,040
them generated actually extracted for

00:15:41,640 --> 00:15:46,380
which package and for which component ID

00:15:44,040 --> 00:15:49,380
and it also shows which I could have

00:15:46,380 --> 00:15:52,079
found for it because sometimes sometimes

00:15:49,380 --> 00:15:55,140
genome applications gets due to various

00:15:52,079 --> 00:15:58,829
reasons a KDE icon and we still are

00:15:55,140 --> 00:16:01,470
working on solving that so this is what

00:15:58,829 --> 00:16:03,029
the users will see its genome software

00:16:01,470 --> 00:16:05,370
if you look carefully you will see that

00:16:03,029 --> 00:16:08,700
they screen shots originated from fedora

00:16:05,370 --> 00:16:11,430
but it looks pretty much the same on on

00:16:08,700 --> 00:16:13,290
Debian if you have the data installed

00:16:11,430 --> 00:16:15,630
and you will have a multiple screen

00:16:13,290 --> 00:16:16,829
shows even with captions then you have

00:16:15,630 --> 00:16:19,100
long descriptions whether it's

00:16:16,829 --> 00:16:22,430
translated to the users native language

00:16:19,100 --> 00:16:25,860
some details like licenses used how much

00:16:22,430 --> 00:16:27,660
space at work in zoom the categories

00:16:25,860 --> 00:16:29,040
which it is in and also add-ons to

00:16:27,660 --> 00:16:32,060
install in order to enhance this

00:16:29,040 --> 00:16:36,360
application even also with user friendly

00:16:32,060 --> 00:16:38,370
yeah user friendly descriptions also the

00:16:36,360 --> 00:16:39,060
software center can is able to handle

00:16:38,370 --> 00:16:40,740
codecs

00:16:39,060 --> 00:16:42,900
automatically in case they are missing

00:16:40,740 --> 00:16:46,529
it can install them using the provides

00:16:42,900 --> 00:16:48,060
and it's even able to install input

00:16:46,529 --> 00:16:52,080
methods in case they are missing and

00:16:48,060 --> 00:16:55,110
funds so yeah this is it about the

00:16:52,080 --> 00:16:57,120
presentation issue of our software so

00:16:55,110 --> 00:17:00,150
now moving on to the distribution issue

00:16:57,120 --> 00:17:04,230
which is covered by a write different by

00:17:00,150 --> 00:17:07,949
other projects just remember why we will

00:17:04,230 --> 00:17:09,390
want this it's mainly to obtain new

00:17:07,949 --> 00:17:11,130
software versions which are not yet in

00:17:09,390 --> 00:17:13,680
the archive without having to upgrade

00:17:11,130 --> 00:17:17,699
the whole distribution and to obtain new

00:17:13,680 --> 00:17:19,800
releases of software which is in the

00:17:17,699 --> 00:17:21,780
repositories but we want a new version

00:17:19,800 --> 00:17:25,709
this happens quite often with web

00:17:21,780 --> 00:17:27,209
applications but I mainly talk when I

00:17:25,709 --> 00:17:28,770
talk about applications I mainly think

00:17:27,209 --> 00:17:32,400
about desktop applications although all

00:17:28,770 --> 00:17:34,110
those both methods outlines online tears

00:17:32,400 --> 00:17:36,210
it also work theoretically with web

00:17:34,110 --> 00:17:39,270
applications although I think nobody

00:17:36,210 --> 00:17:41,640
tested it yet so if you will do this you

00:17:39,270 --> 00:17:43,200
might immediately think well we have a

00:17:41,640 --> 00:17:45,300
solution for this already it's called

00:17:43,200 --> 00:17:48,150
PPA personal package archive or

00:17:45,300 --> 00:17:49,770
repository because even if you're not

00:17:48,150 --> 00:17:51,330
associated with Debian you are able to

00:17:49,770 --> 00:17:54,020
create your own repository build your

00:17:51,330 --> 00:17:57,200
software there and provided to the users

00:17:54,020 --> 00:18:00,360
however there are several issues with

00:17:57,200 --> 00:18:02,580
with PPA is mainly they are highly

00:18:00,360 --> 00:18:05,580
insecure because a during installation

00:18:02,580 --> 00:18:07,380
time already you are giving root access

00:18:05,580 --> 00:18:08,700
to a foreign entity on your machine

00:18:07,380 --> 00:18:13,740
which is like the worst possible

00:18:08,700 --> 00:18:16,590
scenario security wise also which is an

00:18:13,740 --> 00:18:18,270
asset and another issue those additional

00:18:16,590 --> 00:18:20,130
packages might break distribution

00:18:18,270 --> 00:18:21,929
upgrades because when we design your

00:18:20,130 --> 00:18:24,600
system at evian we cannot account for

00:18:21,929 --> 00:18:26,309
every possible third party package this

00:18:24,600 --> 00:18:28,050
might land and the repositories and

00:18:26,309 --> 00:18:31,590
where the user might not uninstall it

00:18:28,050 --> 00:18:33,450
before a dystopic rating so we might get

00:18:31,590 --> 00:18:36,809
back reports about something blocking

00:18:33,450 --> 00:18:38,970
upgrades which is not ideal and which

00:18:36,809 --> 00:18:42,030
happens quite often since one who has

00:18:38,970 --> 00:18:43,710
PPA so evil I think in every release you

00:18:42,030 --> 00:18:45,960
will find back reports of users not

00:18:43,710 --> 00:18:48,179
uninstalling the PPA is properly or

00:18:45,960 --> 00:18:51,120
having something breaking upgrades

00:18:48,179 --> 00:18:54,600
because some third party developer was

00:18:51,120 --> 00:18:56,030
not careful enough or yeah

00:18:54,600 --> 00:18:57,770
packaging at

00:18:56,030 --> 00:19:01,520
the guntur debian did not account for

00:18:57,770 --> 00:19:03,170
the third-party stuff hmm also another

00:19:01,520 --> 00:19:05,260
issue is that PPS are obviously

00:19:03,170 --> 00:19:07,370
distribution specific many third-party

00:19:05,260 --> 00:19:09,740
applications are now packaged for a bun

00:19:07,370 --> 00:19:11,660
- but not for other distributions which

00:19:09,740 --> 00:19:13,820
is kind of unfair not even Debian has

00:19:11,660 --> 00:19:16,400
access to a twenty ppas they sometimes

00:19:13,820 --> 00:19:20,900
work there is sometimes don't and this

00:19:16,400 --> 00:19:24,140
greatly limits the the usefulness of the

00:19:20,900 --> 00:19:26,030
PPS and also shifts the focus of the our

00:19:24,140 --> 00:19:27,680
users more to bun two because that's

00:19:26,030 --> 00:19:29,930
where the software is easily available

00:19:27,680 --> 00:19:32,060
where on Debian you only get the stuff

00:19:29,930 --> 00:19:37,040
which is packaged by us and distribution

00:19:32,060 --> 00:19:39,920
repositories there the Debian package

00:19:37,040 --> 00:19:41,840
repositories soon but they those will

00:19:39,920 --> 00:19:44,690
only be available for Debian developers

00:19:41,840 --> 00:19:47,330
for obvious reasons mainly to solve the

00:19:44,690 --> 00:19:49,250
first problem so it's not a full

00:19:47,330 --> 00:19:52,940
solution to the problem because we are

00:19:49,250 --> 00:19:54,770
only few and upstreams want to ship the

00:19:52,940 --> 00:19:58,250
stuff basically on their own and do not

00:19:54,770 --> 00:19:59,810
rely on a packager to do it also PPS are

00:19:58,250 --> 00:20:02,630
quite an overkill if you just want to

00:19:59,810 --> 00:20:05,330
distribute an application so in order to

00:20:02,630 --> 00:20:07,310
fix this workaround this depending on

00:20:05,330 --> 00:20:09,280
how you look at it several projects have

00:20:07,310 --> 00:20:12,740
been involved one of which is limba

00:20:09,280 --> 00:20:15,670
software I develop which is a successor

00:20:12,740 --> 00:20:18,140
to two other previous projects which

00:20:15,670 --> 00:20:20,000
mainly fails because the underlying

00:20:18,140 --> 00:20:23,120
stock was not ready for it and they also

00:20:20,000 --> 00:20:25,250
were basically just a proof-of-concept

00:20:23,120 --> 00:20:27,590
and experimental projects however limba

00:20:25,250 --> 00:20:29,960
is something I'm pretty sure will stick

00:20:27,590 --> 00:20:33,290
around so one of the key concepts of

00:20:29,960 --> 00:20:35,450
limba is to split the distribution into

00:20:33,290 --> 00:20:37,700
an operating system part a runtime part

00:20:35,450 --> 00:20:39,080
and an application layer the operating

00:20:37,700 --> 00:20:41,150
system is all the thing you would expect

00:20:39,080 --> 00:20:42,830
to be in an operating system like the

00:20:41,150 --> 00:20:46,220
kernel whoops sorry

00:20:42,830 --> 00:20:48,500
XOR wayland system d post audio message

00:20:46,220 --> 00:20:50,090
a bus etc one thing which these

00:20:48,500 --> 00:20:53,120
components have in common is that they

00:20:50,090 --> 00:20:55,250
have stable api's or our deepest demons

00:20:53,120 --> 00:20:58,300
which can be interfaced to stable device

00:20:55,250 --> 00:21:01,070
interfaces the runtime however is

00:20:58,300 --> 00:21:03,290
something like toolkits or shared

00:21:01,070 --> 00:21:05,690
libraries which after changing ABI and

00:21:03,290 --> 00:21:07,730
which might be available in multiple

00:21:05,690 --> 00:21:09,710
versions in order to make the

00:21:07,730 --> 00:21:12,350
applications run because some

00:21:09,710 --> 00:21:16,039
might be linked against against varying

00:21:12,350 --> 00:21:20,270
versions of off a component they needs

00:21:16,039 --> 00:21:26,510
like FF mpg or our different versions of

00:21:20,270 --> 00:21:28,340
of GT K so this part is handled by the

00:21:26,510 --> 00:21:29,929
distribution itself while the runtime

00:21:28,340 --> 00:21:32,380
bits and the application bits are

00:21:29,929 --> 00:21:35,570
handled by the limbo installation system

00:21:32,380 --> 00:21:37,789
one key element of limbo is the

00:21:35,570 --> 00:21:40,039
so-called bundles and those bundles will

00:21:37,789 --> 00:21:42,710
ship the runtime parts and the

00:21:40,039 --> 00:21:44,510
applications a bundle is basically just

00:21:42,710 --> 00:21:47,210
the table all containing upstream

00:21:44,510 --> 00:21:49,429
metadata dependency information for

00:21:47,210 --> 00:21:52,130
other vendors this text depends on

00:21:49,429 --> 00:21:54,169
signatures and payloads data which is

00:21:52,130 --> 00:21:57,409
just a file system tree containing

00:21:54,169 --> 00:22:00,620
binaries and and libraries and all the

00:21:57,409 --> 00:22:03,350
stuff you are you know already those

00:22:00,620 --> 00:22:06,250
bundles can ship both components making

00:22:03,350 --> 00:22:11,480
up the runtime and components making up

00:22:06,250 --> 00:22:13,520
applications so it basically looks like

00:22:11,480 --> 00:22:16,039
this we have a bundle for everything and

00:22:13,520 --> 00:22:18,770
a bundle for the application in this

00:22:16,039 --> 00:22:22,370
case we have for example Clementine as

00:22:18,770 --> 00:22:25,070
an app which depends on cute 5 GUI acute

00:22:22,370 --> 00:22:27,020
5 gstreamer and whatever all those other

00:22:25,070 --> 00:22:29,690
runtime bits which are shipped also as

00:22:27,020 --> 00:22:32,059
limber packages and we have underlying

00:22:29,690 --> 00:22:36,649
the OS which is debian fedora or any

00:22:32,059 --> 00:22:38,870
other distribution yeah those those

00:22:36,649 --> 00:22:40,789
components are shipped by the respective

00:22:38,870 --> 00:22:42,799
upstream project for example in this

00:22:40,789 --> 00:22:45,399
case the cute stuff would be shipped by

00:22:42,799 --> 00:22:47,179
the cute project while the Clementine

00:22:45,399 --> 00:22:51,649
bundle would be shipped by the

00:22:47,179 --> 00:22:52,940
Clementine project so if you don't have

00:22:51,649 --> 00:22:54,500
all these different components the

00:22:52,940 --> 00:22:57,710
question is how we put it together and

00:22:54,500 --> 00:22:59,390
to form one one thing and without

00:22:57,710 --> 00:23:01,159
needing the applications to be

00:22:59,390 --> 00:23:05,330
relocatable in order to find their

00:23:01,159 --> 00:23:08,750
dependencies the answer is relatively

00:23:05,330 --> 00:23:10,279
simple it is using overlay FS to overlay

00:23:08,750 --> 00:23:14,059
all these different bundles and the

00:23:10,279 --> 00:23:16,309
application into one into one new file

00:23:14,059 --> 00:23:18,710
system overlay FS in case you don't know

00:23:16,309 --> 00:23:21,320
is a virtual file system which is able

00:23:18,710 --> 00:23:22,880
to overlay existing file systems into

00:23:21,320 --> 00:23:25,190
one new file system

00:23:22,880 --> 00:23:29,030
and we Neven create a private mount

00:23:25,190 --> 00:23:31,160
point and for the application and run

00:23:29,030 --> 00:23:33,350
the application from that so each each

00:23:31,160 --> 00:23:35,090
app will get its own mount point with a

00:23:33,350 --> 00:23:36,350
be able to find its resources and will

00:23:35,090 --> 00:23:38,600
be able to interact with the operating

00:23:36,350 --> 00:23:40,400
system we also do some other newer

00:23:38,600 --> 00:23:42,500
kernel features to contain the

00:23:40,400 --> 00:23:45,920
application a bit and to make it easier

00:23:42,500 --> 00:23:49,270
to handle so with all those different

00:23:45,920 --> 00:23:52,450
bundles now and application bundles and

00:23:49,270 --> 00:23:55,070
they are all those things you might

00:23:52,450 --> 00:23:58,610
think that it's well be confusing for

00:23:55,070 --> 00:24:01,760
the users to get all this stuff but it

00:23:58,610 --> 00:24:04,220
actually is quite simple if these ones

00:24:01,760 --> 00:24:06,500
who get a limber bundle they are the

00:24:04,220 --> 00:24:08,480
first place to go might be upstream to

00:24:06,500 --> 00:24:12,410
get the bundle from there and install it

00:24:08,480 --> 00:24:13,790
into the stable system but those limo

00:24:12,410 --> 00:24:18,110
banners can also be combined in

00:24:13,790 --> 00:24:20,810
repositories and and which has been

00:24:18,110 --> 00:24:22,790
integrated into any upstream compatible

00:24:20,810 --> 00:24:25,760
GUI tool because if you remember every

00:24:22,790 --> 00:24:27,800
upstream component contains every absent

00:24:25,760 --> 00:24:29,930
component every limber bundle contains

00:24:27,800 --> 00:24:32,390
an upstream metadata file which

00:24:29,930 --> 00:24:36,440
describes a unique ID for this specific

00:24:32,390 --> 00:24:39,320
software component and which makes it

00:24:36,440 --> 00:24:42,470
makes it possible to also extract this

00:24:39,320 --> 00:24:45,710
data and create compile a metadata file

00:24:42,470 --> 00:24:47,510
for it which can then be fed into into

00:24:45,710 --> 00:24:50,690
the software centers in order to make

00:24:47,510 --> 00:24:52,250
the limber Banda software available just

00:24:50,690 --> 00:24:54,320
along the stuff which is already in the

00:24:52,250 --> 00:24:56,330
distribution so the integration is

00:24:54,320 --> 00:24:58,370
really nice and kinome software already

00:24:56,330 --> 00:25:00,080
contains experimental support for limba

00:24:58,370 --> 00:25:02,240
fine styling and removing the Magnum

00:25:00,080 --> 00:25:05,780
Andals in case you have added a

00:25:02,240 --> 00:25:07,420
repository mmm so since this bundles can

00:25:05,780 --> 00:25:12,350
be installed in a conflict-free way

00:25:07,420 --> 00:25:15,230
there's no no issues with dependencies

00:25:12,350 --> 00:25:17,450
satisfication so dependencies are always

00:25:15,230 --> 00:25:19,670
satisfied and all this stuff happens

00:25:17,450 --> 00:25:22,130
transparently so the user does not be to

00:25:19,670 --> 00:25:24,080
care about it so although it's it's it

00:25:22,130 --> 00:25:28,400
might sound complex for the user it's

00:25:24,080 --> 00:25:31,430
really simple one thing which I think

00:25:28,400 --> 00:25:33,260
might evolve is the so called limbo hub

00:25:31,430 --> 00:25:35,090
which is a web application which is able

00:25:33,260 --> 00:25:37,100
to take limo packages and create a

00:25:35,090 --> 00:25:38,960
repository out of it

00:25:37,100 --> 00:25:40,700
the main idea is that upstreams create

00:25:38,960 --> 00:25:43,309
their suffer and then submit it to a

00:25:40,700 --> 00:25:46,940
central repository where some QA can be

00:25:43,309 --> 00:25:49,880
done on it like using the api

00:25:46,940 --> 00:25:51,830
compatibility checker to check if they

00:25:49,880 --> 00:25:54,260
broke avi and then reject the package in

00:25:51,830 --> 00:25:56,480
case they did it or to do additional Qi

00:25:54,260 --> 00:26:00,409
which the Lim package generator does not

00:25:56,480 --> 00:26:04,039
do on its own so yeah this is a one

00:26:00,409 --> 00:26:06,320
thing which which must evolve in case we

00:26:04,039 --> 00:26:09,140
are going down the limbo road just to

00:26:06,320 --> 00:26:12,740
coordinate the efforts on of up streams

00:26:09,140 --> 00:26:14,659
to ship their software to their users so

00:26:12,740 --> 00:26:16,549
the strength of number the conflict

00:26:14,659 --> 00:26:19,029
reinstallation of software that you can

00:26:16,549 --> 00:26:21,500
share a lot of resources via overlay FS

00:26:19,029 --> 00:26:24,529
that tests on safety checks for a bi

00:26:21,500 --> 00:26:27,529
compatibility but a VI issue is also a

00:26:24,529 --> 00:26:30,100
weakness of the limbo concept because up

00:26:27,529 --> 00:26:32,570
streams need to care to declare

00:26:30,100 --> 00:26:34,520
correctly if they when they break ABI

00:26:32,570 --> 00:26:36,529
and when they don't because if they do

00:26:34,520 --> 00:26:39,140
not do that there's a risk of breakage

00:26:36,529 --> 00:26:41,899
and in the limbo system it also does

00:26:39,140 --> 00:26:43,880
atomic updates which means that if you

00:26:41,899 --> 00:26:46,039
run an application like Firefox and then

00:26:43,880 --> 00:26:49,330
it gets updated while running the

00:26:46,039 --> 00:26:52,940
Firefox was still see all the resources

00:26:49,330 --> 00:26:55,190
available when it started and not will

00:26:52,940 --> 00:26:57,230
not use the new Firefox files and get

00:26:55,190 --> 00:26:59,510
confused by the new stuff there which is

00:26:57,230 --> 00:27:01,070
the really issue really there same with

00:26:59,510 --> 00:27:02,779
LibreOffice and which is one of the

00:27:01,070 --> 00:27:04,820
reasons why the chrome project started

00:27:02,779 --> 00:27:06,860
to do this offline update stuff where

00:27:04,820 --> 00:27:09,669
they reboot twice in order to install

00:27:06,860 --> 00:27:12,320
updates to ensure that the system is not

00:27:09,669 --> 00:27:14,690
it's not already still using software

00:27:12,320 --> 00:27:17,659
which is which is are currently updated

00:27:14,690 --> 00:27:19,549
so and this is also a huge issue for the

00:27:17,659 --> 00:27:22,990
chromium project where they go through

00:27:19,549 --> 00:27:26,360
its extreme lengths to to avoid issues

00:27:22,990 --> 00:27:28,880
arising from suffer from chromium being

00:27:26,360 --> 00:27:30,409
updated while it is running it also has

00:27:28,880 --> 00:27:32,149
this tight upstream integration which

00:27:30,409 --> 00:27:34,970
has some nice side effects for example

00:27:32,149 --> 00:27:37,100
due to the unique identifier which is in

00:27:34,970 --> 00:27:39,320
every software component it is easily

00:27:37,100 --> 00:27:41,980
possible to map the install software

00:27:39,320 --> 00:27:44,480
against a database of CV CDE

00:27:41,980 --> 00:27:45,710
vulnerabilities for example to see if

00:27:44,480 --> 00:27:47,840
the staff which is currently installed

00:27:45,710 --> 00:27:49,700
in the system is vulnerable this is of

00:27:47,840 --> 00:27:50,480
course not interesting to the user we

00:27:49,700 --> 00:27:53,390
just should

00:27:50,480 --> 00:27:56,299
sure that there are no security arrows

00:27:53,390 --> 00:27:58,160
but it's quite nice in case you're

00:27:56,299 --> 00:28:01,100
administering the machine and want to

00:27:58,160 --> 00:28:03,500
check if everything is saying still so

00:28:01,100 --> 00:28:06,020
this is about limber but there's also a

00:28:03,500 --> 00:28:08,240
second project being developed with us

00:28:06,020 --> 00:28:09,770
solving the same issue but using a

00:28:08,240 --> 00:28:12,559
slightly different approach which I also

00:28:09,770 --> 00:28:15,500
want to talk about it is called xdg up

00:28:12,559 --> 00:28:19,480
and mainly developed by Alexander Larsen

00:28:15,500 --> 00:28:23,179
of Red Hat and genome who was working on

00:28:19,480 --> 00:28:24,710
stuff like this for a while and yeah xyg

00:28:23,179 --> 00:28:27,290
up started to take off after Leonard

00:28:24,710 --> 00:28:29,150
patterning wrote this blog post on how

00:28:27,290 --> 00:28:32,750
we put together Linux distributions

00:28:29,150 --> 00:28:36,140
where he outlined using better EFS to to

00:28:32,750 --> 00:28:41,000
ship containers for applications and

00:28:36,140 --> 00:28:45,320
stuff like that so XG up is is inspired

00:28:41,000 --> 00:28:48,080
by that and it's able to fulfill the

00:28:45,320 --> 00:28:50,030
requirements outlined by Leonard so but

00:28:48,080 --> 00:28:51,740
it's it's not learn just not involved so

00:28:50,030 --> 00:28:53,990
it's a project of like mainly Alexander

00:28:51,740 --> 00:28:55,640
Larsen and many other people and

00:28:53,990 --> 00:28:57,799
currently developed like gnome but I

00:28:55,640 --> 00:29:01,299
recently moved it to the free dance of

00:28:57,799 --> 00:29:04,520
infrastructure so the main difference

00:29:01,299 --> 00:29:06,860
between Linda and xyg app is on the

00:29:04,520 --> 00:29:09,230
runtime part because our next 2g up

00:29:06,860 --> 00:29:10,549
every thing the runtime and the

00:29:09,230 --> 00:29:14,450
application are always three

00:29:10,549 --> 00:29:16,540
repositories OS 3 is in case you do not

00:29:14,450 --> 00:29:19,490
did not have experience with it yet is

00:29:16,540 --> 00:29:22,730
basically good for a binary file trees

00:29:19,490 --> 00:29:26,570
it means that you have a file tree and

00:29:22,730 --> 00:29:29,090
you can you can commit to it to this

00:29:26,570 --> 00:29:31,280
operating system tree and to switch back

00:29:29,090 --> 00:29:35,000
to any point in time so it's you can see

00:29:31,280 --> 00:29:37,280
it as a snapshotting service and it also

00:29:35,000 --> 00:29:40,850
has it always on repository format where

00:29:37,280 --> 00:29:43,309
you can pull stuff from so you can get

00:29:40,850 --> 00:29:45,559
you can get files and trees just like

00:29:43,309 --> 00:29:48,380
it's and it's optimized for for binary

00:29:45,559 --> 00:29:52,400
files and not for for text files like it

00:29:48,380 --> 00:29:53,660
is so the runtime that X first of all X

00:29:52,400 --> 00:29:55,700
G of also makes a distinction between

00:29:53,660 --> 00:29:58,520
the OS the runtime at the application

00:29:55,700 --> 00:30:02,390
but the runtime is an OS tree repository

00:29:58,520 --> 00:30:04,400
and the repository is built by KDE York

00:30:02,390 --> 00:30:06,410
gnome or any other large

00:30:04,400 --> 00:30:08,780
large entity and contains all the

00:30:06,410 --> 00:30:11,060
dependencies a software could need in

00:30:08,780 --> 00:30:14,240
order to run an application could

00:30:11,060 --> 00:30:17,480
meteorite run be more precise and this

00:30:14,240 --> 00:30:22,760
means that gnome well for its runtime

00:30:17,480 --> 00:30:25,340
and SDK add things like gtk or any other

00:30:22,760 --> 00:30:29,300
kinome component which is useful like ad

00:30:25,340 --> 00:30:31,700
will obviously add the frameworks files

00:30:29,300 --> 00:30:35,270
for it and anything I can normal KDE

00:30:31,700 --> 00:30:37,670
application needs to work properly they

00:30:35,270 --> 00:30:40,850
also ship together with the runtime and

00:30:37,670 --> 00:30:42,770
SDK which is the runtime plus of the

00:30:40,850 --> 00:30:43,940
development headers so you are building

00:30:42,770 --> 00:30:47,030
in case you're building an application

00:30:43,940 --> 00:30:49,670
and the xtg up system you're building

00:30:47,030 --> 00:30:52,970
and explicitly for a specific runtime

00:30:49,670 --> 00:30:55,040
with a specific SDK so if you are an

00:30:52,970 --> 00:30:57,260
application developer you decide I want

00:30:55,040 --> 00:31:01,340
to target the ignore me point 18

00:30:57,260 --> 00:31:02,930
platform so I used the 3.18 SDK and a

00:31:01,340 --> 00:31:07,190
three point eight and target there's

00:31:02,930 --> 00:31:08,750
3.18 runtime with it so this also means

00:31:07,190 --> 00:31:10,970
that the user needs self all the

00:31:08,750 --> 00:31:12,860
runtimes around which are we quiet for

00:31:10,970 --> 00:31:15,350
to run the application the application

00:31:12,860 --> 00:31:18,350
itself is also nor is tree repository

00:31:15,350 --> 00:31:20,690
depending on a specific runtime and they

00:31:18,350 --> 00:31:24,260
are mounted together in its hour in

00:31:20,690 --> 00:31:26,540
their own yeah in their in their own

00:31:24,260 --> 00:31:28,490
file system again just like bloom but

00:31:26,540 --> 00:31:33,290
similar it's a limbo does but without

00:31:28,490 --> 00:31:36,440
you can see an overlay of s yeah another

00:31:33,290 --> 00:31:38,150
speciality of XG up is the sandboxing

00:31:36,440 --> 00:31:40,970
feature which is in very early

00:31:38,150 --> 00:31:43,730
development you can still test it with

00:31:40,970 --> 00:31:48,350
some games right now the main reason why

00:31:43,730 --> 00:31:50,240
we won the sandbox is this we want to

00:31:48,350 --> 00:31:52,910
protect our users from malicious or

00:31:50,240 --> 00:31:55,310
third-party applications which could

00:31:52,910 --> 00:32:00,500
access their data or start the webcam

00:31:55,310 --> 00:32:02,360
make invade their privacy and yeah do

00:32:00,500 --> 00:32:04,430
all those bad things so we want to

00:32:02,360 --> 00:32:06,770
protect the user against that by adding

00:32:04,430 --> 00:32:10,510
a permission system and by adding a

00:32:06,770 --> 00:32:12,590
sandbox so this is something xgf

00:32:10,510 --> 00:32:14,600
implements and there's some discussion

00:32:12,590 --> 00:32:16,999
going on if it should be mandatory for

00:32:14,600 --> 00:32:18,469
XG of applications or if

00:32:16,999 --> 00:32:21,499
applications should be able to run

00:32:18,469 --> 00:32:23,209
without sandbox but so far at least as

00:32:21,499 --> 00:32:25,459
far as I know there's no big decision

00:32:23,209 --> 00:32:27,589
been made yet maybe it will be a policy

00:32:25,459 --> 00:32:29,989
of the of the desktop environment or

00:32:27,589 --> 00:32:33,469
distribution so if you want to next get

00:32:29,989 --> 00:32:36,229
an X to G up application in case you're

00:32:33,469 --> 00:32:41,809
a developer you get this this run time

00:32:36,229 --> 00:32:44,539
or or and our SDK and those things are I

00:32:41,809 --> 00:32:47,659
said always three repositories built via

00:32:44,539 --> 00:32:49,549
the Yocto project your project is as an

00:32:47,659 --> 00:32:51,739
effort by the Linux Foundation to

00:32:49,549 --> 00:32:54,019
automatically build Linux distributions

00:32:51,739 --> 00:32:55,639
for embedded systems and it fits pretty

00:32:54,019 --> 00:32:59,869
well with the use case of building these

00:32:55,639 --> 00:33:02,149
larger these larger runtimes and SDKs so

00:32:59,869 --> 00:33:04,429
gnome already ships one and four one for

00:33:02,149 --> 00:33:05,899
Katie is in progress right now but I'm

00:33:04,429 --> 00:33:09,319
not sure when it will be ready because

00:33:05,899 --> 00:33:11,719
there are a few issues with it so and

00:33:09,319 --> 00:33:14,119
the applications then as I said are

00:33:11,719 --> 00:33:18,769
built against we're using a specific SDK

00:33:14,119 --> 00:33:21,259
against a specific runtime the strengths

00:33:18,769 --> 00:33:22,749
of XG up are just like limba the

00:33:21,259 --> 00:33:24,799
conflict-free installation of software

00:33:22,749 --> 00:33:32,389
atomic updates whoops

00:33:24,799 --> 00:33:34,279
but yeah sorry but also a ability to

00:33:32,389 --> 00:33:36,409
roll back the installations any point in

00:33:34,279 --> 00:33:38,869
time using the or three repository so

00:33:36,409 --> 00:33:40,489
just like with kit you can jump back and

00:33:38,869 --> 00:33:42,949
forth in the history of the

00:33:40,489 --> 00:33:46,099
installations of the software by by

00:33:42,949 --> 00:33:47,719
switching all his three hats you also

00:33:46,099 --> 00:33:50,089
have a stable and defined runtime and

00:33:47,719 --> 00:33:53,899
sdk which means that the risk of a b e

00:33:50,089 --> 00:33:56,149
ABI breaks is almost zero since the

00:33:53,899 --> 00:33:58,189
upstream as long as you trust norm to

00:33:56,149 --> 00:34:00,529
not break the API or to not break the

00:33:58,189 --> 00:34:02,389
runtime api but this is something which

00:34:00,529 --> 00:34:05,089
is checked by the larger entities and

00:34:02,389 --> 00:34:08,029
they are not too many parties involved

00:34:05,089 --> 00:34:11,659
in creating the runtime so the risk of

00:34:08,029 --> 00:34:15,490
something something yeah something

00:34:11,659 --> 00:34:17,240
problematic happened in ABI y is pretty

00:34:15,490 --> 00:34:20,059
pretty small

00:34:17,240 --> 00:34:22,429
it also has n box unboxing features

00:34:20,059 --> 00:34:25,759
already built in although they are not

00:34:22,429 --> 00:34:27,559
very usable and we are currently waiting

00:34:25,759 --> 00:34:30,470
for Wayland Katie was and toolkit

00:34:27,559 --> 00:34:33,260
integration to make it actually work so

00:34:30,470 --> 00:34:35,810
this might take might take a while until

00:34:33,260 --> 00:34:37,669
we have working in sandbox because there

00:34:35,810 --> 00:34:42,889
are also a few other other issues which

00:34:37,669 --> 00:34:45,050
could easily fill another talk so okay

00:34:42,889 --> 00:34:47,720
so the good and the bad things about

00:34:45,050 --> 00:34:50,149
those solutions that Limbaugh has this

00:34:47,720 --> 00:34:54,020
dynamic runtimes and high amount of

00:34:50,149 --> 00:34:56,659
flexibility but at the cost of having

00:34:54,020 --> 00:34:59,869
software authors which need to care

00:34:56,659 --> 00:35:02,150
about AVI stability which is not sure if

00:34:59,869 --> 00:35:04,250
it there's no certainty that this will

00:35:02,150 --> 00:35:06,800
work but I have faith in in our up

00:35:04,250 --> 00:35:09,079
streams that they can care about ABS

00:35:06,800 --> 00:35:13,760
ability which will also benefit assess

00:35:09,079 --> 00:35:17,240
distribution so this requires a bit more

00:35:13,760 --> 00:35:19,339
testing well you actually sufferers can

00:35:17,240 --> 00:35:21,410
break avi but then they need to declare

00:35:19,339 --> 00:35:23,359
that they broke it but yet this

00:35:21,410 --> 00:35:25,960
definitely requires more testing and

00:35:23,359 --> 00:35:29,060
there's always a risk of breaking things

00:35:25,960 --> 00:35:31,790
but on the other hand and their software

00:35:29,060 --> 00:35:33,829
is shared between there's high one

00:35:31,790 --> 00:35:37,040
shared software and the updates can

00:35:33,829 --> 00:35:39,140
reach which user really quickly so in

00:35:37,040 --> 00:35:41,060
case the library vendor gets a new

00:35:39,140 --> 00:35:43,339
security update outage will reach the

00:35:41,060 --> 00:35:45,470
users almost immediately because we do

00:35:43,339 --> 00:35:47,270
not need to integrate it into its

00:35:45,470 --> 00:35:49,310
runtime or to update all the

00:35:47,270 --> 00:35:51,980
applications depending on it so we can

00:35:49,310 --> 00:35:55,359
just ship it unless it breaks avi so

00:35:51,980 --> 00:35:58,609
extra gif has a static one times with

00:35:55,359 --> 00:36:00,980
we're includes this API stability

00:35:58,609 --> 00:36:03,500
guarantee and a very very low risk of

00:36:00,980 --> 00:36:05,000
breaking things but it also means that

00:36:03,500 --> 00:36:07,040
in case there's something not present in

00:36:05,000 --> 00:36:08,900
the runtime the application authors need

00:36:07,040 --> 00:36:10,579
to statically link against it or bundle

00:36:08,900 --> 00:36:13,460
it with this so in case there's a

00:36:10,579 --> 00:36:16,430
security issue in the library they which

00:36:13,460 --> 00:36:18,680
was not in the in the runtime then we

00:36:16,430 --> 00:36:21,290
need to then we need to get every

00:36:18,680 --> 00:36:24,079
upstream to rebuild their software with

00:36:21,290 --> 00:36:25,640
this new fixed library which might take

00:36:24,079 --> 00:36:27,050
some time and there's some duplication

00:36:25,640 --> 00:36:29,960
in case you have multiple runtimes

00:36:27,050 --> 00:36:32,170
available and potential security risks

00:36:29,960 --> 00:36:34,520
in case you do not have the sandbox

00:36:32,170 --> 00:36:38,180
solving we're working around some of

00:36:34,520 --> 00:36:40,640
them so what does this actually mean for

00:36:38,180 --> 00:36:43,540
Debian or Linux distributions in general

00:36:40,640 --> 00:36:46,690
first going back to upstream apps

00:36:43,540 --> 00:36:49,210
Jim is really nothing you need to think

00:36:46,690 --> 00:36:51,550
about a lot because it's no change in

00:36:49,210 --> 00:36:53,710
any paradigm and it just enhances the

00:36:51,550 --> 00:36:56,890
usefulness of the repositories which we

00:36:53,710 --> 00:36:59,140
already have and offers some new some

00:36:56,890 --> 00:37:01,210
nice new features like being able for

00:36:59,140 --> 00:37:03,310
third party for third-party developers

00:37:01,210 --> 00:37:05,470
or upstream developers to interface with

00:37:03,310 --> 00:37:09,310
a great thing we have which is the the

00:37:05,470 --> 00:37:12,490
software repositories so this is I think

00:37:09,310 --> 00:37:14,410
really not controversial the limb bar

00:37:12,490 --> 00:37:15,700
next to G up stuff and we just really

00:37:14,410 --> 00:37:18,520
something which is important to me is

00:37:15,700 --> 00:37:20,950
not something which will replace the

00:37:18,520 --> 00:37:23,470
distributions all the ppas because we

00:37:20,950 --> 00:37:26,470
will still need ppi so it's switch

00:37:23,470 --> 00:37:27,910
system components or two to update

00:37:26,470 --> 00:37:30,250
system components in case someone wants

00:37:27,910 --> 00:37:32,770
a new system D a PPA is the way to go

00:37:30,250 --> 00:37:34,720
because this is not always components

00:37:32,770 --> 00:37:36,730
and not something you will ever be able

00:37:34,720 --> 00:37:40,660
to ship with lumber and XE Jia because

00:37:36,730 --> 00:37:42,250
it's really stripped down so they those

00:37:40,660 --> 00:37:44,080
solutions complement what we already

00:37:42,250 --> 00:37:47,590
have they complement the repositories

00:37:44,080 --> 00:37:49,810
and they complement the PPAs but what's

00:37:47,590 --> 00:37:52,000
another thing what we should maybe do is

00:37:49,810 --> 00:37:54,400
to focus on the OS part of the

00:37:52,000 --> 00:37:55,870
distribution and not that much on

00:37:54,400 --> 00:37:57,610
shipping applications stripping

00:37:55,870 --> 00:37:59,590
applications are still important because

00:37:57,610 --> 00:38:01,930
maybe some enterprise vendors are

00:37:59,590 --> 00:38:03,820
already happy with what's in Debian and

00:38:01,930 --> 00:38:06,580
then it makes sense to shift

00:38:03,820 --> 00:38:08,230
applications a repository to have sure

00:38:06,580 --> 00:38:11,560
make sure that it's trusted and tested

00:38:08,230 --> 00:38:13,780
on Debian but they are the main priority

00:38:11,560 --> 00:38:16,480
of us as distributors should be the US

00:38:13,780 --> 00:38:18,400
and not shipping each and every software

00:38:16,480 --> 00:38:21,490
component on the planet in our

00:38:18,400 --> 00:38:23,470
repositories and also important in case

00:38:21,490 --> 00:38:25,840
the limba and XG up things which are

00:38:23,470 --> 00:38:27,490
still experimental take off is that we

00:38:25,840 --> 00:38:29,590
need to get to say in what's included in

00:38:27,490 --> 00:38:31,570
Suffern Center applications created a

00:38:29,590 --> 00:38:33,880
valid trust path from our distribution

00:38:31,570 --> 00:38:36,490
to those services and maybe endorse one

00:38:33,880 --> 00:38:39,940
which for example is offering only free

00:38:36,490 --> 00:38:41,620
software and say yeah this is something

00:38:39,940 --> 00:38:43,810
which you can use with Debian and which

00:38:41,620 --> 00:38:46,330
integrates well and ensure that it works

00:38:43,810 --> 00:38:48,760
well with our distribution so users do

00:38:46,330 --> 00:38:50,860
not which are attempting to use it can

00:38:48,760 --> 00:38:53,350
use it it's still an option nothing

00:38:50,860 --> 00:38:55,540
which will be mandatory or well some

00:38:53,350 --> 00:38:57,040
preferred way to get stuff well we

00:38:55,540 --> 00:38:57,250
should also not reject this new routine

00:38:57,040 --> 00:38:59,590
all

00:38:57,250 --> 00:39:01,300
because they will happen since users are

00:38:59,590 --> 00:39:04,990
very excited to have this new

00:39:01,300 --> 00:39:06,400
opportunity so in case you want to want

00:39:04,990 --> 00:39:09,099
to read more there are a few links like

00:39:06,400 --> 00:39:11,830
liner throat rings blog post and lwn

00:39:09,099 --> 00:39:14,320
articles on luminix the GF and yeah the

00:39:11,830 --> 00:39:16,390
project pages and also the upstream

00:39:14,320 --> 00:39:18,550
Debian org to see if your package

00:39:16,390 --> 00:39:22,150
contains metadata which has already been

00:39:18,550 --> 00:39:24,609
included in the main upstream data so

00:39:22,150 --> 00:39:43,510
that's it with the talk and do you have

00:39:24,609 --> 00:39:45,609
questions what makes you confident the

00:39:43,510 --> 00:39:47,800
desktop file names are a suitable way of

00:39:45,609 --> 00:39:49,869
universally and uniquely identifying

00:39:47,800 --> 00:39:54,190
package names I'm thinking of things

00:39:49,869 --> 00:39:55,960
like Epiphany desktop or um there has

00:39:54,190 --> 00:39:57,490
been some package called jitan the

00:39:55,960 --> 00:40:01,750
debian repositories for some time and

00:39:57,490 --> 00:40:03,490
that's only within Debian if there's

00:40:01,750 --> 00:40:05,320
something which is only in Debian then

00:40:03,490 --> 00:40:08,830
you will only have it in Debian of

00:40:05,320 --> 00:40:11,950
course but the deso file name is is

00:40:08,830 --> 00:40:16,030
unique among every among distributions

00:40:11,950 --> 00:40:17,560
because they are well know if you have a

00:40:16,030 --> 00:40:19,450
desktop file and you have a file

00:40:17,560 --> 00:40:21,099
conflict between there's the files then

00:40:19,450 --> 00:40:24,070
you the upstream project has already

00:40:21,099 --> 00:40:25,720
solved it there are no no desktop files

00:40:24,070 --> 00:40:27,760
with the same name but to having

00:40:25,720 --> 00:40:30,940
different projects and it will be soft

00:40:27,760 --> 00:40:33,099
even more well it will be even even more

00:40:30,940 --> 00:40:35,200
unique in future by switching to the new

00:40:33,099 --> 00:40:37,240
diva's activatable applications and

00:40:35,200 --> 00:40:39,460
using the reverse URL scheme for the

00:40:37,240 --> 00:40:43,990
Esther fellows we are now have or KDE

00:40:39,460 --> 00:40:46,089
dot Kate desktop so with that it's you

00:40:43,990 --> 00:40:51,430
can safely say it's a unique name and

00:40:46,089 --> 00:40:53,670
universal name for an application two

00:40:51,430 --> 00:40:53,670
more questions

00:40:56,580 --> 00:41:03,580
so you know this brave new world how

00:41:01,930 --> 00:41:05,230
many copies that for example the

00:41:03,580 --> 00:41:06,640
peculiar breeze

00:41:05,230 --> 00:41:10,720
I never huge they're going to have

00:41:06,640 --> 00:41:12,520
installed or how many copies of gtk that

00:41:10,720 --> 00:41:15,570
depends on what your application depends

00:41:12,520 --> 00:41:20,140
on and the Exedy up model you will have

00:41:15,570 --> 00:41:22,180
well half as many runtimes installed as

00:41:20,140 --> 00:41:23,830
applications are needing them so if you

00:41:22,180 --> 00:41:25,900
have three applications each term

00:41:23,830 --> 00:41:28,440
needing a different runtime then you

00:41:25,900 --> 00:41:32,880
will have three copies of everything on

00:41:28,440 --> 00:41:36,490
the limbo approach if you if you have

00:41:32,880 --> 00:41:38,230
three things depending on where three

00:41:36,490 --> 00:41:40,000
different versions of cute but the other

00:41:38,230 --> 00:41:41,380
stuff is saying it's the same then you

00:41:40,000 --> 00:41:43,780
will have three copies of cute but the

00:41:41,380 --> 00:41:47,860
other stuff will still be shared but

00:41:43,780 --> 00:41:51,310
yeah the repository services are mainly

00:41:47,860 --> 00:41:54,910
there also to have apply some force to

00:41:51,310 --> 00:41:57,070
up streams to drop outdated outdated

00:41:54,910 --> 00:41:59,290
dependencies faster and update their

00:41:57,070 --> 00:42:01,780
stuff because we are if we are in

00:41:59,290 --> 00:42:04,120
control of the application repository

00:42:01,780 --> 00:42:05,770
service we can still throw out that

00:42:04,120 --> 00:42:07,960
stuff which is not updating its

00:42:05,770 --> 00:42:10,480
dependencies always just having security

00:42:07,960 --> 00:42:12,580
issues so the one who is controlling the

00:42:10,480 --> 00:42:16,450
repository service is the one who can

00:42:12,580 --> 00:42:18,760
dictate upstreams what's to do so I hope

00:42:16,450 --> 00:42:20,380
this were mitigated but yeah the issue

00:42:18,760 --> 00:42:28,810
is there that you will have duplicate

00:42:20,380 --> 00:42:30,820
itself any final question I have a

00:42:28,810 --> 00:42:34,180
question about dynamic linking because

00:42:30,820 --> 00:42:38,250
in limba for example it seems that if

00:42:34,180 --> 00:42:41,890
you let upstream do it all it's kind of

00:42:38,250 --> 00:42:45,330
scary that they will just I don't know

00:42:41,890 --> 00:42:48,330
just go by without dynamic linking and

00:42:45,330 --> 00:42:50,610
making bundles and I'm not kidding about

00:42:48,330 --> 00:42:53,860
security at all maybe they are not even

00:42:50,610 --> 00:42:57,640
they don't have the knowledge to do it

00:42:53,860 --> 00:43:01,690
right so how is gonna be that mitigated

00:42:57,640 --> 00:43:05,050
and the idea is to do lots of rigorous

00:43:01,690 --> 00:43:08,530
checking of of the resulting package so

00:43:05,050 --> 00:43:11,140
you will currently already the

00:43:08,530 --> 00:43:13,810
package can generate algorithm a bundle

00:43:11,140 --> 00:43:17,050
generator just applying some checks for

00:43:13,810 --> 00:43:18,790
sanity of the upstream things and will

00:43:17,050 --> 00:43:20,950
reject to create a bundle in case

00:43:18,790 --> 00:43:22,300
there's something wrong so there absent

00:43:20,950 --> 00:43:23,890
will just not be able to create

00:43:22,300 --> 00:43:26,920
something invalid or something stupid

00:43:23,890 --> 00:43:30,490
and by applying more of those technical

00:43:26,920 --> 00:43:32,920
things to and lint tools in order to get

00:43:30,490 --> 00:43:35,020
it saying I think we can can work around

00:43:32,920 --> 00:43:36,940
this problem and also on the software

00:43:35,020 --> 00:43:39,820
store side and the repository service

00:43:36,940 --> 00:43:41,170
side we can also do additional QA to get

00:43:39,820 --> 00:43:44,650
up streams in the right direction and

00:43:41,170 --> 00:43:48,190
teach them how to do it properly so this

00:43:44,650 --> 00:43:50,820
is how it does should be mitigated ok

00:43:48,190 --> 00:43:50,820
thank you very much

00:43:50,950 --> 00:43:58,590

YouTube URL: https://www.youtube.com/watch?v=5Kc7LGe3h0A


