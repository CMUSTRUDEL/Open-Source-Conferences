Title: GnuPG in Debian report
Publication date: 2017-12-03
Playlist: DebConf 15
Description: 
	by Daniel Kahn Gillmor

At: DebConf15
https://summit.debconf.org/debconf15/meeting/195/gnupg-in-debian-report/
https://debconf15.debconf.org/

Big changes are afoot in the world of OpenPGP and GnuPG as well.

The Debian GnuPG packaging team will present some of the changes we have in store, what they might mean for other parts of the infrastructure, and how our operating system can make use of the new features.

Room: Berlin/London
Scheduled start: 2015-08-16 15:30:00
Captions: 
	00:00:00,000 --> 00:00:07,980
all right so thank you thank you

00:00:04,470 --> 00:00:10,110
everyone for coming so this is this is a

00:00:07,980 --> 00:00:12,540
talk from the new PG the package can you

00:00:10,110 --> 00:00:16,139
PG mayn't team the Debian PG packaging

00:00:12,540 --> 00:00:17,279
team I'm DK G I'm Eric Dorland and there

00:00:16,139 --> 00:00:19,890
are many other folks who have been

00:00:17,279 --> 00:00:22,680
working on PG over the years and are

00:00:19,890 --> 00:00:24,000
currently working also on go PG so we're

00:00:22,680 --> 00:00:25,740
going to give it a little report back

00:00:24,000 --> 00:00:27,779
about where we are with canoe PG and

00:00:25,740 --> 00:00:33,030
debian and what we have planned

00:00:27,779 --> 00:00:34,559
and maybe my mouse will work yeah so

00:00:33,030 --> 00:00:36,719
there's been lots of people who've been

00:00:34,559 --> 00:00:39,149
working on it we want to just say just

00:00:36,719 --> 00:00:41,250
to be clear there this has always been a

00:00:39,149 --> 00:00:42,629
big team effort and continues to be a

00:00:41,250 --> 00:00:44,700
team effort so thank you to everybody

00:00:42,629 --> 00:00:46,170
who has contributed there's lots more

00:00:44,700 --> 00:00:47,610
people that's what that dot-dot-dot is

00:00:46,170 --> 00:00:50,160
it probably includes you if you've

00:00:47,610 --> 00:00:52,489
reported bugs or complained about the

00:00:50,160 --> 00:00:54,719
way things work or made new suggestions

00:00:52,489 --> 00:00:56,160
but I mean Daniels actually done an

00:00:54,719 --> 00:00:57,420
incredible job this year is really

00:00:56,160 --> 00:00:58,739
shepherded the project I think he

00:00:57,420 --> 00:01:05,850
deserves a huge round of applause right

00:00:58,739 --> 00:01:08,369
now thanks so so since last year we've

00:01:05,850 --> 00:01:10,560
gotten we've gotten everything moved

00:01:08,369 --> 00:01:12,360
over to get for packaging if folks just

00:01:10,560 --> 00:01:13,979
saw my previous discussion that was one

00:01:12,360 --> 00:01:15,630
of the things that makes life easier for

00:01:13,979 --> 00:01:17,970
me as a packager so that was a selfish

00:01:15,630 --> 00:01:19,500
move on my part to push it I hope it's

00:01:17,970 --> 00:01:21,270
useful and I hope other people feel more

00:01:19,500 --> 00:01:23,729
inclined to jump in if they have things

00:01:21,270 --> 00:01:26,520
they can contribute the team itself has

00:01:23,729 --> 00:01:29,970
adopted group eg to live ask you on pin

00:01:26,520 --> 00:01:31,619
entry GP GME so a bunch of the packages

00:01:29,970 --> 00:01:34,409
that are sort of related to GPG and in

00:01:31,619 --> 00:01:37,250
the GPG ecosystem are all under the

00:01:34,409 --> 00:01:40,110
package group eg mayn't umbrella now

00:01:37,250 --> 00:01:42,060
also since last year canoe PG has now

00:01:40,110 --> 00:01:44,670
reproducibly built under the

00:01:42,060 --> 00:01:47,549
reproducible builds thing so so that is

00:01:44,670 --> 00:01:49,079
awesome many many thanks to the folks

00:01:47,549 --> 00:01:51,210
who've done a lot of work to make

00:01:49,079 --> 00:01:54,630
reproducible Debian something that we

00:01:51,210 --> 00:01:57,119
are heading towards that much faster

00:01:54,630 --> 00:02:00,210
rate than I expected gooo PG we're happy

00:01:57,119 --> 00:02:01,979
that to be part of that version 2.1 of

00:02:00,210 --> 00:02:04,290
canoe PG has been an experimental for

00:02:01,979 --> 00:02:07,439
many months and it's actually been in

00:02:04,290 --> 00:02:09,649
debbie and unstable for many hours if

00:02:07,439 --> 00:02:09,649
you have

00:02:10,070 --> 00:02:14,730
so we uploaded it before we started

00:02:12,960 --> 00:02:18,660
drinking last night yeah we uploaded

00:02:14,730 --> 00:02:21,540
before drinking so sorry to make your

00:02:18,660 --> 00:02:22,980
slides wrong this afternoon burner cuz

00:02:21,540 --> 00:02:26,370
you said it was in experimental it's now

00:02:22,980 --> 00:02:28,830
also an unstable it is unstable unstable

00:02:26,370 --> 00:02:30,270
is all kinds of unstable right now and

00:02:28,830 --> 00:02:31,830
so we're making it part of that here is

00:02:30,270 --> 00:02:33,960
our chance to break stuff this is the

00:02:31,830 --> 00:02:35,640
beauty of unstable we're at that time in

00:02:33,960 --> 00:02:37,380
the release cycle we want to get more

00:02:35,640 --> 00:02:39,300
eyeballs on it we want to find out what

00:02:37,380 --> 00:02:42,030
problems people have so that we can make

00:02:39,300 --> 00:02:45,330
it work for everybody who is relying on

00:02:42,030 --> 00:02:48,180
Debian stable to be stable so two point

00:02:45,330 --> 00:02:53,760
one is in unstable we also did a cleanup

00:02:48,180 --> 00:02:55,230
of the of the base install on a minimal

00:02:53,760 --> 00:02:57,210
server where there were some complaints

00:02:55,230 --> 00:02:59,460
I think justifiable complaints that

00:02:57,210 --> 00:03:01,980
things were pulling in by default too

00:02:59,460 --> 00:03:03,480
much too many packages on a minimal

00:03:01,980 --> 00:03:04,830
server install we want those minimal

00:03:03,480 --> 00:03:07,770
Debian installs to be as small as

00:03:04,830 --> 00:03:10,950
possible both for a resource consumption

00:03:07,770 --> 00:03:11,790
and for you know potential bugs we want

00:03:10,950 --> 00:03:13,050
we don't want to pull in all the

00:03:11,790 --> 00:03:15,540
graphical stack just because you want to

00:03:13,050 --> 00:03:18,030
have GPG available and so we've cleaned

00:03:15,540 --> 00:03:20,490
up the default dependency arrangements

00:03:18,030 --> 00:03:24,200
to make server installs minimal we

00:03:20,490 --> 00:03:27,300
missed that for Jesse and that's and

00:03:24,200 --> 00:03:29,190
apologies are due for that some folks

00:03:27,300 --> 00:03:31,230
are pushing that that could be something

00:03:29,190 --> 00:03:34,770
we could do in a in a jesse proposed

00:03:31,230 --> 00:03:38,690
updates the release team has been

00:03:34,770 --> 00:03:41,670
reluctant to take that on mainly because

00:03:38,690 --> 00:03:43,710
there are no strong bugs open about it

00:03:41,670 --> 00:03:45,180
right all of the bugs are like oh man I

00:03:43,710 --> 00:03:46,680
did this install and it pulled in these

00:03:45,180 --> 00:03:50,760
extra packages it's at a release

00:03:46,680 --> 00:03:53,310
critical bug and so so the release team

00:03:50,760 --> 00:03:55,350
is justifiably concerned about trying to

00:03:53,310 --> 00:03:57,300
make a big change in the dependency

00:03:55,350 --> 00:03:59,250
ordering to be clear there's a

00:03:57,300 --> 00:04:01,050
workaround if you have a minimal install

00:03:59,250 --> 00:04:03,630
and you're like I really wanted to have

00:04:01,050 --> 00:04:04,830
the GPG two packages in there but the

00:04:03,630 --> 00:04:07,290
trouble is they pull in all this extra

00:04:04,830 --> 00:04:10,050
stuff the workaround is very easy you

00:04:07,290 --> 00:04:12,660
just install pin entry - curses instead

00:04:10,050 --> 00:04:14,100
of it installing pin entry because the

00:04:12,660 --> 00:04:16,049
default pin entry will be a graphical

00:04:14,100 --> 00:04:17,910
one that's what pulls in the graphical

00:04:16,049 --> 00:04:19,140
libraries so if you do have a minimal

00:04:17,910 --> 00:04:21,270
install and you're worried that it's too

00:04:19,140 --> 00:04:22,740
bloated because of your GPG - dependency

00:04:21,270 --> 00:04:24,449
please go ahead

00:04:22,740 --> 00:04:27,300
install pin entry curses and then clean

00:04:24,449 --> 00:04:28,229
out the graphical stuff if you really

00:04:27,300 --> 00:04:30,750
think that it needs to be done and

00:04:28,229 --> 00:04:32,580
Jessie open up a bug and elevated

00:04:30,750 --> 00:04:34,229
severity and explain why the severity is

00:04:32,580 --> 00:04:36,690
elevated and that'll give us the the

00:04:34,229 --> 00:04:38,250
recourse to go to the release team and

00:04:36,690 --> 00:04:39,599
start talking through what we need to do

00:04:38,250 --> 00:04:41,220
to make that happen in a Jessie proposed

00:04:39,599 --> 00:04:42,569
update I'm not convinced that that's the

00:04:41,220 --> 00:04:44,340
best use of our time right now but if it

00:04:42,569 --> 00:04:47,669
really bugs you let's figure out how to

00:04:44,340 --> 00:04:50,970
make it work so this is the big news

00:04:47,669 --> 00:04:52,259
right we really want new PG 2.1 we want

00:04:50,970 --> 00:04:53,550
it for a lot of reasons and we've run it

00:04:52,259 --> 00:04:56,819
for Debian in particular

00:04:53,550 --> 00:05:00,720
Debian relies heavily on new PG for

00:04:56,819 --> 00:05:04,530
things like verifying our software we

00:05:00,720 --> 00:05:06,090
want it because the we have updated key

00:05:04,530 --> 00:05:09,240
storage mechanisms which should give us

00:05:06,090 --> 00:05:10,889
some faster access to keys we want it

00:05:09,240 --> 00:05:13,289
because it'll provides us with elliptic

00:05:10,889 --> 00:05:17,069
curve cryptography stronger cryptography

00:05:13,289 --> 00:05:19,110
for less compute power we want it for

00:05:17,069 --> 00:05:22,050
the demonised processes and isolation

00:05:19,110 --> 00:05:24,360
which have potential to help people keep

00:05:22,050 --> 00:05:26,159
their secret key materials safer and we

00:05:24,360 --> 00:05:28,380
want it because we want to stop shipping

00:05:26,159 --> 00:05:30,270
stuff that people will have the old

00:05:28,380 --> 00:05:32,550
broken things available to them by

00:05:30,270 --> 00:05:34,680
default so this is a little bit

00:05:32,550 --> 00:05:36,539
controversial because if anybody needs

00:05:34,680 --> 00:05:38,610
the old broken stuff to work it's

00:05:36,539 --> 00:05:41,280
probably a Debian developer who's hooked

00:05:38,610 --> 00:05:44,460
into some kind of email system that has

00:05:41,280 --> 00:05:46,800
their old md5 signed key that simply

00:05:44,460 --> 00:05:50,569
cannot change and they really need some

00:05:46,800 --> 00:05:52,590
kind of old broken thing to work however

00:05:50,569 --> 00:05:54,719
that doesn't mean that that's what we

00:05:52,590 --> 00:05:56,940
should be supporting by default for

00:05:54,719 --> 00:05:59,069
everybody who's using Debian it's a

00:05:56,940 --> 00:06:01,139
mistake for us to offer tools that say

00:05:59,069 --> 00:06:02,729
hey and by the way this comes with this

00:06:01,139 --> 00:06:05,849
really cool knife that has blades on

00:06:02,729 --> 00:06:07,139
both sides for regular use if you want

00:06:05,849 --> 00:06:08,639
the knife with blades on both sides you

00:06:07,139 --> 00:06:10,830
really need to do something special to

00:06:08,639 --> 00:06:12,509
get access to it so one of the reasons I

00:06:10,830 --> 00:06:16,169
personally want to see two point one in

00:06:12,509 --> 00:06:18,120
Debian and move the old statistic we can

00:06:16,169 --> 00:06:19,469
move the old stuff out of the way the

00:06:18,120 --> 00:06:20,669
older crypto really is not strong

00:06:19,469 --> 00:06:24,569
anymore and we need to make sure we can

00:06:20,669 --> 00:06:27,530
move away from it so a brief slide about

00:06:24,569 --> 00:06:27,530
elliptic curve Krypton

00:06:32,639 --> 00:06:37,050
looked at curve crypto so it's a new set

00:06:34,620 --> 00:06:40,259
of algorithms in the same way that RSA

00:06:37,050 --> 00:06:42,210
is different from DSA it's a it's a

00:06:40,259 --> 00:06:44,099
completely different set of math that's

00:06:42,210 --> 00:06:46,590
used and there are different parameter

00:06:44,099 --> 00:06:53,069
choices you can make for elliptic curve

00:06:46,590 --> 00:06:54,180
keys spooky so there are different

00:06:53,069 --> 00:06:55,440
parameter choices you can make for

00:06:54,180 --> 00:06:57,720
elliptic curve keys there are different

00:06:55,440 --> 00:07:01,250
kinds and as I mentioned in his talk

00:06:57,720 --> 00:07:03,810
earlier today there are curves from NIST

00:07:01,250 --> 00:07:05,940
that are well defined everyone

00:07:03,810 --> 00:07:07,409
understands but they come from NIST and

00:07:05,940 --> 00:07:09,569
there's a little bit of dubiousness

00:07:07,409 --> 00:07:12,210
about their origin I haven't heard any

00:07:09,569 --> 00:07:13,740
strong cryptographic explanation that

00:07:12,210 --> 00:07:16,620
they're backdoored in the way that some

00:07:13,740 --> 00:07:17,969
standards that came from NIST were but

00:07:16,620 --> 00:07:19,050
nonetheless there are some open

00:07:17,969 --> 00:07:20,580
questions about the way they were

00:07:19,050 --> 00:07:22,680
generated and we would like to not rely

00:07:20,580 --> 00:07:26,340
on them they're also harder to implement

00:07:22,680 --> 00:07:28,830
and slightly slower and more prone to

00:07:26,340 --> 00:07:30,060
mistakes than some of the newer kinds of

00:07:28,830 --> 00:07:32,460
elliptic curves that are being published

00:07:30,060 --> 00:07:34,590
and so thanks to knee base on who's back

00:07:32,460 --> 00:07:36,210
there we actually have this two five

00:07:34,590 --> 00:07:37,560
five one nine and curve two five five

00:07:36,210 --> 00:07:39,659
one nine which is a different set of

00:07:37,560 --> 00:07:43,259
elliptic curve parameters that will be

00:07:39,659 --> 00:07:46,770
available to us in new PG 2.1 and we may

00:07:43,259 --> 00:07:48,270
even get another another curve that's

00:07:46,770 --> 00:07:52,229
coming from the same process that's sort

00:07:48,270 --> 00:07:55,319
of settling on the two 5519 process so

00:07:52,229 --> 00:07:57,750
how do we deploy a new algorithm in a

00:07:55,319 --> 00:07:59,310
way that's useful so the first thing is

00:07:57,750 --> 00:08:02,870
that we really need to get a widely

00:07:59,310 --> 00:08:05,610
deployed base that can do the public key

00:08:02,870 --> 00:08:08,279
operations with the new algorithm before

00:08:05,610 --> 00:08:09,840
we start using them right if I if I say

00:08:08,279 --> 00:08:11,460
hey you can encrypt a message to me and

00:08:09,840 --> 00:08:13,889
here's my key and it's an algorithm that

00:08:11,460 --> 00:08:16,020
you just don't have access to then you

00:08:13,889 --> 00:08:17,159
can't use it and similarly if I sign

00:08:16,020 --> 00:08:18,210
something with my key that's an

00:08:17,159 --> 00:08:20,039
algorithm that you've never heard of

00:08:18,210 --> 00:08:22,529
before you can't verify my signature so

00:08:20,039 --> 00:08:25,020
those things are effectively useless so

00:08:22,529 --> 00:08:26,610
we care more about getting the public

00:08:25,020 --> 00:08:29,129
key side of the algorithms deployed

00:08:26,610 --> 00:08:31,349
first and then later we'll make sure

00:08:29,129 --> 00:08:32,909
that people can start to deploy the

00:08:31,349 --> 00:08:35,250
secret key side of things and there will

00:08:32,909 --> 00:08:36,630
be some you know people who like to play

00:08:35,250 --> 00:08:39,479
on the bleeding edge who will deploy the

00:08:36,630 --> 00:08:41,370
secret key side of things earlier but

00:08:39,479 --> 00:08:43,349
the secret key side in generating these

00:08:41,370 --> 00:08:45,690
keys is going to be hidden for the

00:08:43,349 --> 00:08:48,000
moment behind it an expert flag in the

00:08:45,690 --> 00:08:49,800
GPG interface so that means that if we

00:08:48,000 --> 00:08:50,870
can get to point one deployed and we can

00:08:49,800 --> 00:08:53,300
verify these signals

00:08:50,870 --> 00:08:55,550
and we get a wide base of people who can

00:08:53,300 --> 00:08:56,960
handle the crypto then we can start

00:08:55,550 --> 00:08:58,730
encouraging people to consider switching

00:08:56,960 --> 00:09:00,620
to it but we I don't think we're under

00:08:58,730 --> 00:09:02,360
any expectation that people will all

00:09:00,620 --> 00:09:04,550
switch over to ECC as soon as they have

00:09:02,360 --> 00:09:05,630
a copy of 2.1 available we just want you

00:09:04,550 --> 00:09:07,250
to be able to use it when you're

00:09:05,630 --> 00:09:10,670
communicating with other people who

00:09:07,250 --> 00:09:13,190
happen to use those keys so by the way

00:09:10,670 --> 00:09:15,440
if folks have questions or concerns

00:09:13,190 --> 00:09:19,190
about any of the topics here give a

00:09:15,440 --> 00:09:20,360
holler yeah should be mics around yep so

00:09:19,190 --> 00:09:21,320
the two point one transition how's that

00:09:20,360 --> 00:09:24,260
going to work

00:09:21,320 --> 00:09:27,650
2.0 is going to go away two point one

00:09:24,260 --> 00:09:29,450
has already replaced 2.0 in unstable and

00:09:27,650 --> 00:09:32,240
if we can get to point one to the point

00:09:29,450 --> 00:09:34,250
of stable ish this enough in unstable

00:09:32,240 --> 00:09:36,350
then 2.0 will also go away in testing

00:09:34,250 --> 00:09:38,930
it's not Co installable with two point

00:09:36,350 --> 00:09:41,720
one and one point four we're gonna move

00:09:38,930 --> 00:09:44,780
to becoming canoe PG one and the binary

00:09:41,720 --> 00:09:49,010
will be user pin GP g1 and the binary

00:09:44,780 --> 00:09:50,840
for GP g2 will be user pin GPG so most

00:09:49,010 --> 00:09:52,250
people won't have GP g1 installed as i

00:09:50,840 --> 00:09:53,630
said there are some folks who are going

00:09:52,250 --> 00:09:55,430
to need it and they're going to need to

00:09:53,630 --> 00:09:57,920
figure out how to get that working and

00:09:55,430 --> 00:09:59,300
we will support the software but they're

00:09:57,920 --> 00:10:00,230
going to need to explicitly installed on

00:09:59,300 --> 00:10:01,550
their systems we're not going to have it

00:10:00,230 --> 00:10:04,700
available for people to cut themselves

00:10:01,550 --> 00:10:06,050
with by default so why the hard cut over

00:10:04,700 --> 00:10:11,360
some people might want to do Etsy

00:10:06,050 --> 00:10:12,800
alternatives instead we as a team don't

00:10:11,360 --> 00:10:13,580
really want to deal with that many

00:10:12,800 --> 00:10:15,920
moving parts

00:10:13,580 --> 00:10:17,420
we have enough bug reports to deal with

00:10:15,920 --> 00:10:18,860
and we have enough things to get settled

00:10:17,420 --> 00:10:20,900
we would like to focus our efforts on

00:10:18,860 --> 00:10:22,730
the 2.1 stream make sure that we can

00:10:20,900 --> 00:10:25,450
support upstream which is also doing an

00:10:22,730 --> 00:10:28,010
excellent job of focusing on the 2.1

00:10:25,450 --> 00:10:29,960
development path and it creates an

00:10:28,010 --> 00:10:31,760
additional layer possibly additional

00:10:29,960 --> 00:10:33,620
round trips for bug reports oh well what

00:10:31,760 --> 00:10:36,110
do you have for Etsy alternatives for

00:10:33,620 --> 00:10:37,670
GPG we want to make sure we've got

00:10:36,110 --> 00:10:39,230
modern crypto available to everyone by

00:10:37,670 --> 00:10:40,430
default we want to discourage older

00:10:39,230 --> 00:10:42,200
crypto and want to just make sure that

00:10:40,430 --> 00:10:44,030
we're streamlined and focused so that's

00:10:42,200 --> 00:10:45,200
why a hard cut over and we're not going

00:10:44,030 --> 00:10:46,700
to be going with that see alternatives

00:10:45,200 --> 00:10:48,380
approach unless someone comes up with a

00:10:46,700 --> 00:10:51,470
really good argument for why we should I

00:10:48,380 --> 00:10:53,540
also don't think it's very it's a bit

00:10:51,470 --> 00:10:56,870
disingenuous at this point we're 2.1 and

00:10:53,540 --> 00:10:59,330
1.4 are different enough that an

00:10:56,870 --> 00:11:00,740
alternative is kind of lying yep

00:10:59,330 --> 00:11:01,880
we don't really provide the same it

00:11:00,740 --> 00:11:04,070
they're starting to not provide the same

00:11:01,880 --> 00:11:06,420
interface they don't support the same

00:11:04,070 --> 00:11:08,220
algorithms and there's lots of new

00:11:06,420 --> 00:11:11,640
features in 2.1 that just don't work

00:11:08,220 --> 00:11:13,500
with 1.4 yeah so we're gonna do the

00:11:11,640 --> 00:11:17,550
cutover and experimental first we'll

00:11:13,500 --> 00:11:20,610
continue packaging good new PG - as you

00:11:17,550 --> 00:11:22,350
know 2.1 as good a PG - in unstable but

00:11:20,610 --> 00:11:25,320
we will experiment with a transition

00:11:22,350 --> 00:11:27,870
with uploads of glue PG and glue PG -

00:11:25,320 --> 00:11:30,560
into experimental that shift which one

00:11:27,870 --> 00:11:32,910
is responsible for the glue PG package

00:11:30,560 --> 00:11:36,720
will mail Debian developer that's

00:11:32,910 --> 00:11:39,660
available so that you yes you can try

00:11:36,720 --> 00:11:42,030
out with experimental on your systems

00:11:39,660 --> 00:11:44,390
and let us know how we broke everything

00:11:42,030 --> 00:11:46,850
and deleted all of your personal files

00:11:44,390 --> 00:11:49,890
so that we don't do that to our users

00:11:46,850 --> 00:11:52,590
and we're thinking through how to do

00:11:49,890 --> 00:11:54,780
this with mailing to all the reverse

00:11:52,590 --> 00:11:56,040
dependencies just as a heads up I'm not

00:11:54,780 --> 00:11:57,330
sure whether that's the best thing if

00:11:56,040 --> 00:11:59,910
folks have suggestions about how to do

00:11:57,330 --> 00:12:01,950
that I'd be happy to hear them you could

00:11:59,910 --> 00:12:03,990
bring them to the canoe PG mate mailing

00:12:01,950 --> 00:12:05,220
list and I mean I think we should

00:12:03,990 --> 00:12:07,200
mention - we're gonna try to be working

00:12:05,220 --> 00:12:09,240
on this during deb comp this week so we

00:12:07,200 --> 00:12:10,800
may actually have something to look at

00:12:09,240 --> 00:12:14,880
by the end of dip Kampf

00:12:10,800 --> 00:12:16,410
no promises yep so one of the issues

00:12:14,880 --> 00:12:18,390
about the transition is that the you

00:12:16,410 --> 00:12:21,030
Deb's the Debian installer uses these

00:12:18,390 --> 00:12:23,220
you Deb's mini micro Deb's I guess is

00:12:21,030 --> 00:12:25,830
the way you could pronounce it and at

00:12:23,220 --> 00:12:32,100
the very least it needs GP GV to verify

00:12:25,830 --> 00:12:33,600
the packages that it downloads so GP GV

00:12:32,100 --> 00:12:34,740
is also going to transit the you Deb is

00:12:33,600 --> 00:12:37,110
going to transition over to the ganoub

00:12:34,740 --> 00:12:38,130
PG g PG v we've already had some

00:12:37,110 --> 00:12:39,840
discussions with the Debian installer

00:12:38,130 --> 00:12:42,150
folks and some discussions with upstream

00:12:39,840 --> 00:12:44,640
Thank You Verner to try to make to try

00:12:42,150 --> 00:12:46,980
to streamline that process and similarly

00:12:44,640 --> 00:12:49,770
there's a there's a special weirdly

00:12:46,980 --> 00:12:53,190
architecture independent win32 you Deb

00:12:49,770 --> 00:12:54,930
to help the windows-based installer

00:12:53,190 --> 00:12:56,400
verify things and that's also going to

00:12:54,930 --> 00:12:59,550
probably move to the community to

00:12:56,400 --> 00:13:02,310
packages we currently have a good new PG

00:12:59,550 --> 00:13:04,320
- you deb package which used to be

00:13:02,310 --> 00:13:06,150
depended on by

00:13:04,320 --> 00:13:08,190
part man crypto for people who are

00:13:06,150 --> 00:13:10,650
setting up encrypted disks part man

00:13:08,190 --> 00:13:13,170
crypto no longer depends on it so we're

00:13:10,650 --> 00:13:15,600
probably gonna make it go away if you

00:13:13,170 --> 00:13:18,319
know that you're using new pgu dev for

00:13:15,600 --> 00:13:23,850
your Debian installer work

00:13:18,319 --> 00:13:26,399
let us know I did a search of the of the

00:13:23,850 --> 00:13:28,499
Debian archive via code search Debian

00:13:26,399 --> 00:13:29,850
net many many thanks to the folks who

00:13:28,499 --> 00:13:31,860
are maintaining code search at Debian

00:13:29,850 --> 00:13:35,160
net and the only place this showed up

00:13:31,860 --> 00:13:36,809
was that we were at all concerned about

00:13:35,160 --> 00:13:38,699
was part man crypto and it's no longer

00:13:36,809 --> 00:13:41,279
used there so if you know of anybody

00:13:38,699 --> 00:13:44,160
that wants to use canoe pgu dev during

00:13:41,279 --> 00:13:48,870
the Installer give a holler because it's

00:13:44,160 --> 00:13:50,670
probably gonna go away in the group ug

00:13:48,870 --> 00:13:53,129
ecosystem there's the pin entry tools

00:13:50,670 --> 00:13:55,620
which is how GPG actually interacts with

00:13:53,129 --> 00:13:57,089
the user so upstream has made a number

00:13:55,620 --> 00:13:59,970
of choices recently to make that

00:13:57,089 --> 00:14:01,949
streamlined and more sort of graphically

00:13:59,970 --> 00:14:03,930
in line with existing user interface

00:14:01,949 --> 00:14:06,839
toolkits I think those changes are

00:14:03,930 --> 00:14:08,699
really awesome there's a gnome 3 work

00:14:06,839 --> 00:14:11,759
there's QT work that's moving I think

00:14:08,699 --> 00:14:13,350
from four to five one of the potentially

00:14:11,759 --> 00:14:14,819
scary changes upstream is that this

00:14:13,350 --> 00:14:17,100
means probably one of the things about

00:14:14,819 --> 00:14:18,809
pin entry is that it used to do very it

00:14:17,100 --> 00:14:20,360
was very careful about locking memory so

00:14:18,809 --> 00:14:22,439
that the memory wouldn't be swapped

00:14:20,360 --> 00:14:23,879
which means so that the password you

00:14:22,439 --> 00:14:28,589
typed into the pin entry wouldn't be

00:14:23,879 --> 00:14:30,540
written to disk by accident upstream is

00:14:28,589 --> 00:14:31,559
kind of moving away from that and one of

00:14:30,540 --> 00:14:36,689
the reasons they're moving away from

00:14:31,559 --> 00:14:38,550
that I think is because the it meant

00:14:36,689 --> 00:14:40,319
basically maintaining all your own user

00:14:38,550 --> 00:14:42,660
interface tools which meant that

00:14:40,319 --> 00:14:44,129
whatever user interface there was didn't

00:14:42,660 --> 00:14:45,720
integrate with whatever people's user

00:14:44,129 --> 00:14:47,579
experience was and part of the move

00:14:45,720 --> 00:14:50,339
towards making this stuff usable is

00:14:47,579 --> 00:14:51,779
making it fit in your environment so the

00:14:50,339 --> 00:14:53,759
move away from let's maintain our own

00:14:51,779 --> 00:14:56,279
sort of variant stack of QT and our

00:14:53,759 --> 00:14:57,389
variant sack of GT K so that we can

00:14:56,279 --> 00:15:00,179
build the stuff and make sure that the

00:14:57,389 --> 00:15:03,329
memory never gets locked as is is kind

00:15:00,179 --> 00:15:05,699
of that justification is going out so

00:15:03,329 --> 00:15:07,649
yes your password might get swapped to

00:15:05,699 --> 00:15:08,639
disk as a result of this change on the

00:15:07,649 --> 00:15:10,559
other hand if you're using a modern

00:15:08,639 --> 00:15:12,629
system and it's a laptop you probably

00:15:10,559 --> 00:15:13,709
hibernate your laptop and even locked

00:15:12,629 --> 00:15:16,499
memory gets

00:15:13,709 --> 00:15:18,240
hibernated to disk so the protections

00:15:16,499 --> 00:15:20,550
against locked memory are not as good as

00:15:18,240 --> 00:15:22,079
they used to be either so I think this

00:15:20,550 --> 00:15:23,759
is a move in the right direction it's a

00:15:22,079 --> 00:15:25,679
move towards usability there's a

00:15:23,759 --> 00:15:28,139
particular case where maybe it's a

00:15:25,679 --> 00:15:29,819
slight move away from security but I

00:15:28,139 --> 00:15:30,960
actually think getting more people using

00:15:29,819 --> 00:15:33,380
it will be

00:15:30,960 --> 00:15:37,950
help to security overall compared to

00:15:33,380 --> 00:15:39,780
less people using it I'll repeat out

00:15:37,950 --> 00:15:43,920
I'll I'll repeat them our did the

00:15:39,780 --> 00:15:45,420
question if a mic doesn't the question

00:15:43,920 --> 00:15:51,840
was does it also count for pin entry

00:15:45,420 --> 00:15:56,400
curses I'm looking to Verner to see me

00:15:51,840 --> 00:16:01,160
shrugging ya pendant recursos may also

00:15:56,400 --> 00:16:04,230
be making the same set of tress yeah so

00:16:01,160 --> 00:16:04,650
so that anyway it may also be pendant

00:16:04,230 --> 00:16:06,330
recursos

00:16:04,650 --> 00:16:08,280
if you can think of ways that we can fix

00:16:06,330 --> 00:16:09,390
that with pin entry curses or improve

00:16:08,280 --> 00:16:12,920
that that would be great

00:16:09,390 --> 00:16:12,920
here's a microphone Vernor thinking

00:16:20,210 --> 00:16:26,100
there would be an easy solution and just

00:16:23,100 --> 00:16:27,630
have an encrypted swap space haven't

00:16:26,100 --> 00:16:30,240
encrypted swap space right that's much

00:16:27,630 --> 00:16:32,430
much easier and we could throw our way

00:16:30,240 --> 00:16:35,930
all the other thing and it's it's just

00:16:32,430 --> 00:16:39,540
easier and of course something which

00:16:35,930 --> 00:16:41,700
triggers clearing the memory and I'm

00:16:39,540 --> 00:16:44,640
hibernation I press the packaging our

00:16:41,700 --> 00:16:47,700
administration think so but I wrote for

00:16:44,640 --> 00:16:49,080
for that that encrypted small space

00:16:47,700 --> 00:16:51,060
would be the default of the systems

00:16:49,080 --> 00:16:54,300
because I I don't think that it's any

00:16:51,060 --> 00:16:55,740
performance issue then anyway yep spy is

00:16:54,300 --> 00:16:57,270
encrypted suppose place to default at

00:16:55,740 --> 00:16:59,760
the end I don't know I probably should

00:16:57,270 --> 00:17:01,820
be the day open is the address over some

00:16:59,760 --> 00:17:04,320
can someone file that bug right now

00:17:01,820 --> 00:17:05,670
seriously like these are the kinds of

00:17:04,320 --> 00:17:07,980
things that we can do as an operating

00:17:05,670 --> 00:17:10,200
system that no individual upstream can

00:17:07,980 --> 00:17:12,330
do and it would be better for all of our

00:17:10,200 --> 00:17:13,589
users so we should make encrypted swap

00:17:12,330 --> 00:17:17,209
the default and it would remove some of

00:17:13,589 --> 00:17:17,209
this concern thank you

00:17:20,030 --> 00:17:23,689
well in my understanding is that

00:17:22,040 --> 00:17:25,459
encrypted swap by default would require

00:17:23,689 --> 00:17:26,720
Luke's or some type of encryption then

00:17:25,459 --> 00:17:29,180
you'd have to have a password you'd

00:17:26,720 --> 00:17:30,800
enter I think it's is that not the case

00:17:29,180 --> 00:17:32,000
no there are techniques to do it without

00:17:30,800 --> 00:17:33,770
that where you written where you

00:17:32,000 --> 00:17:42,140
randomized the encryption key for your

00:17:33,770 --> 00:17:44,090
swap at each boot yeah so there are

00:17:42,140 --> 00:17:45,650
trade-offs and we need to but as it as

00:17:44,090 --> 00:17:47,060
an operating system we can figure out

00:17:45,650 --> 00:17:48,620
how to do those trade-offs to protect

00:17:47,060 --> 00:17:50,390
the largest number of people right now

00:17:48,620 --> 00:17:52,970
we're probably not doing our best job at

00:17:50,390 --> 00:17:54,080
that and maybe that's a separate session

00:17:52,970 --> 00:17:57,020
we can have about how do we deal with

00:17:54,080 --> 00:18:00,890
this kind of question you know encrypted

00:17:57,020 --> 00:18:01,970
swap but not this is not new PG but that

00:18:00,890 --> 00:18:03,620
like but this is the sort of thing that

00:18:01,970 --> 00:18:05,000
I really want Debian to do because we

00:18:03,620 --> 00:18:07,250
are the only folks in a position to do

00:18:05,000 --> 00:18:11,030
this right this is not something that

00:18:07,250 --> 00:18:13,040
anyone upstream can do for us so we may

00:18:11,030 --> 00:18:14,840
also diverge in goop sorry back to the

00:18:13,040 --> 00:18:16,460
new PG from from the encrypted swap

00:18:14,840 --> 00:18:20,090
questions we may diverge from upstream

00:18:16,460 --> 00:18:21,980
somewhat in the Debian packaging we're

00:18:20,090 --> 00:18:23,360
not interested in doing wild divergence

00:18:21,980 --> 00:18:24,680
we want to minimize the deltas that

00:18:23,360 --> 00:18:26,420
we're possible but there are a lot of

00:18:24,680 --> 00:18:27,920
guides out there that are sort of fiddly

00:18:26,420 --> 00:18:30,410
guys that say you got to do this thing

00:18:27,920 --> 00:18:32,330
and change this config and remember make

00:18:30,410 --> 00:18:33,710
sure this config is there and some of

00:18:32,330 --> 00:18:34,940
those guys are more sensible than others

00:18:33,710 --> 00:18:36,830
and what we would like to do is to

00:18:34,940 --> 00:18:38,360
reduce the size of those guides to the

00:18:36,830 --> 00:18:41,680
point where if possible the guide says

00:18:38,360 --> 00:18:44,180
just use an up-to-date can your PG and

00:18:41,680 --> 00:18:47,600
so the way we may diverge from those is

00:18:44,180 --> 00:18:49,460
to potentially fit change with some to

00:18:47,600 --> 00:18:51,500
change some defaults to try to make them

00:18:49,460 --> 00:18:54,140
more secure so the guides have less to

00:18:51,500 --> 00:18:56,900
say and if we're gonna do that probably

00:18:54,140 --> 00:18:58,760
in unstable and therefore maybe testing

00:18:56,900 --> 00:19:00,410
and if we get reports of

00:18:58,760 --> 00:19:02,750
interoperability failures from folks in

00:19:00,410 --> 00:19:04,970
unstable and testing we may revert those

00:19:02,750 --> 00:19:06,530
changes before they hit stable but we

00:19:04,970 --> 00:19:08,780
have an opportunity to try to encourage

00:19:06,530 --> 00:19:10,460
people to use stronger defaults without

00:19:08,780 --> 00:19:11,600
asking them to go fiddle with their text

00:19:10,460 --> 00:19:13,310
files because that's something that

00:19:11,600 --> 00:19:16,160
people don't do unless their mega nerds

00:19:13,310 --> 00:19:17,540
we want this to work for everybody so

00:19:16,160 --> 00:19:18,620
we're gonna we're gonna adjust it some

00:19:17,540 --> 00:19:19,970
we're going to look for interoperability

00:19:18,620 --> 00:19:21,440
problems and we're gonna try to get some

00:19:19,970 --> 00:19:23,540
of these changes back upstream if we can

00:19:21,440 --> 00:19:25,840
another example of some Linux specific

00:19:23,540 --> 00:19:29,300
hardening one change that we made

00:19:25,840 --> 00:19:31,400
recently is to go ahead and avoid the

00:19:29,300 --> 00:19:34,100
ability to dump the memory of the new PG

00:19:31,400 --> 00:19:35,720
process the Age of Heroes

00:19:34,100 --> 00:19:39,050
yeah sorry the agent process thank you

00:19:35,720 --> 00:19:42,080
via via P trace and that's something

00:19:39,050 --> 00:19:43,400
that upstream is unwilling to do because

00:19:42,080 --> 00:19:44,990
there are other ways that those

00:19:43,400 --> 00:19:46,940
processes can be attacked which is

00:19:44,990 --> 00:19:49,130
definitely the case but here's a

00:19:46,940 --> 00:19:51,620
particular attack we can mitigate it so

00:19:49,130 --> 00:19:54,230
we're experimenting with mitigating it

00:19:51,620 --> 00:19:55,940
right now in Debian unstable if it turns

00:19:54,230 --> 00:19:57,950
out to cause too many problems we can

00:19:55,940 --> 00:19:58,820
also revert that as well but so these

00:19:57,950 --> 00:20:00,230
are a couple places where we might

00:19:58,820 --> 00:20:01,730
diverge from upstream hopefully our

00:20:00,230 --> 00:20:03,530
experiences in Debian can inform

00:20:01,730 --> 00:20:04,790
upstream and help them decide whether

00:20:03,530 --> 00:20:06,650
they want to take those changes or not

00:20:04,790 --> 00:20:08,840
if we can get them back upstream I would

00:20:06,650 --> 00:20:10,310
love it if it turns out that we diverge

00:20:08,840 --> 00:20:12,910
a little bit I also have no problem with

00:20:10,310 --> 00:20:15,320
that we want to minimize our divergence

00:20:12,910 --> 00:20:17,660
so desktop integration is one of the

00:20:15,320 --> 00:20:20,300
ongoing pieces of work Vernor mentioned

00:20:17,660 --> 00:20:22,880
to push towards usability as a usability

00:20:20,300 --> 00:20:25,700
as a security feature feature for the

00:20:22,880 --> 00:20:27,260
future of GPG and desktop integration is

00:20:25,700 --> 00:20:30,200
a big part of that the work on pin entry

00:20:27,260 --> 00:20:31,520
has been a big part of that and we had

00:20:30,200 --> 00:20:34,790
this conflict for a long time between

00:20:31,520 --> 00:20:36,770
genome and group PG about who gets to

00:20:34,790 --> 00:20:38,240
provide the canoe PG agent interface and

00:20:36,770 --> 00:20:39,800
what is a proper good new PG agent

00:20:38,240 --> 00:20:41,810
interface and how can we evolve the goo

00:20:39,800 --> 00:20:43,460
PG agent interface if different

00:20:41,810 --> 00:20:45,830
implementations are supporting different

00:20:43,460 --> 00:20:48,380
feature sets there's a sense that it was

00:20:45,830 --> 00:20:50,360
being hijacked and that fight is over

00:20:48,380 --> 00:20:51,830
I'm really pleased to announce that the

00:20:50,360 --> 00:20:56,120
fight is over things are better for

00:20:51,830 --> 00:20:57,710
everyone now a bunch of folks the folks

00:20:56,120 --> 00:20:59,840
who are up here is a mix of people from

00:20:57,710 --> 00:21:01,670
different teams from genome and new PG

00:20:59,840 --> 00:21:02,720
who managed to resolve this in a way

00:21:01,670 --> 00:21:04,670
that I think is going to be better for

00:21:02,720 --> 00:21:08,390
everyone going forward it's going to be

00:21:04,670 --> 00:21:10,190
more usable and more secure so in light

00:21:08,390 --> 00:21:12,020
of that kind of improvement I'd like to

00:21:10,190 --> 00:21:12,800
ask if people have ideas about how we

00:21:12,020 --> 00:21:15,650
can do better

00:21:12,800 --> 00:21:16,910
desktop integration better still to

00:21:15,650 --> 00:21:18,440
suggest those changes and if there's

00:21:16,910 --> 00:21:20,780
ways that we can do that within Debian

00:21:18,440 --> 00:21:22,880
where we have you know we can act as the

00:21:20,780 --> 00:21:24,260
social glue between projects and we can

00:21:22,880 --> 00:21:25,850
say look here's how the negotiations

00:21:24,260 --> 00:21:28,910
work we should be able to solve this

00:21:25,850 --> 00:21:30,530
stuff within Debian integration is what

00:21:28,910 --> 00:21:31,730
we're doing as a distro so let's do that

00:21:30,530 --> 00:21:33,920
and let's improve it and make it better

00:21:31,730 --> 00:21:37,340
if you have ideas for how to do better

00:21:33,920 --> 00:21:40,250
integration let us know possible future

00:21:37,340 --> 00:21:42,560
ideas better testing Auto packaged test

00:21:40,250 --> 00:21:44,030
is pretty cool there's a proposal for

00:21:42,560 --> 00:21:45,650
doing a little bit of that we'd like to

00:21:44,030 --> 00:21:47,390
do a lot more of that if folks don't

00:21:45,650 --> 00:21:48,800
know about Auto packaged tests check it

00:21:47,390 --> 00:21:52,160
it's a way that once your package has

00:21:48,800 --> 00:21:54,260
been built it's like a test suite for

00:21:52,160 --> 00:21:55,850
the built package as opposed to a test

00:21:54,260 --> 00:21:57,620
suite while you're building it so you

00:21:55,850 --> 00:21:59,090
can actually stick lair I want an

00:21:57,620 --> 00:22:00,980
environment that has the following other

00:21:59,090 --> 00:22:02,750
packages installed and I want to execute

00:22:00,980 --> 00:22:05,720
this stuff and the output and the return

00:22:02,750 --> 00:22:07,190
code should look like this so you can

00:22:05,720 --> 00:22:08,870
actually test your system in an

00:22:07,190 --> 00:22:10,070
integrated way with other pieces of the

00:22:08,870 --> 00:22:11,420
software you can system and then you can

00:22:10,070 --> 00:22:12,790
get reports that say hey this thing

00:22:11,420 --> 00:22:15,290
broke so we'd like to do some of that

00:22:12,790 --> 00:22:16,760
we'd like to find ways to streamline the

00:22:15,290 --> 00:22:18,560
user experience for what we know to be

00:22:16,760 --> 00:22:21,020
some best practices like the use of

00:22:18,560 --> 00:22:23,530
smart cards and like the use of offline

00:22:21,020 --> 00:22:25,760
master keys currently it's a little bit

00:22:23,530 --> 00:22:26,990
fancy to get that done and if we can

00:22:25,760 --> 00:22:28,190
find a way to streamline that that

00:22:26,990 --> 00:22:29,690
doesn't cause additional support

00:22:28,190 --> 00:22:32,480
headaches down the line we'd like to do

00:22:29,690 --> 00:22:34,250
that if anybody here is working on one

00:22:32,480 --> 00:22:37,550
of the language teams like Ruby or

00:22:34,250 --> 00:22:39,500
Python or Perl or there's lots of others

00:22:37,550 --> 00:22:42,710
and forgive me if I've forgotten your

00:22:39,500 --> 00:22:44,510
favorite one but we had jpg has

00:22:42,710 --> 00:22:46,760
programmatic interfaces like ask yuan

00:22:44,510 --> 00:22:49,280
and GP GME and we'd like to make sure

00:22:46,760 --> 00:22:51,020
that those are well maintained and well

00:22:49,280 --> 00:22:52,400
supported so if we can work with the

00:22:51,020 --> 00:22:55,880
language binding teens we would like to

00:22:52,400 --> 00:22:57,350
do that also a user interface and user

00:22:55,880 --> 00:22:59,360
experience review even though the

00:22:57,350 --> 00:23:01,070
usability is security argument is pretty

00:22:59,360 --> 00:23:03,350
strong let's make sure that this thing

00:23:01,070 --> 00:23:04,880
is usable let's figure out how to do

00:23:03,350 --> 00:23:06,890
that without breaking existing tools

00:23:04,880 --> 00:23:08,450
that rely on it and if there are other

00:23:06,890 --> 00:23:10,490
graphical user interfaces that relate to

00:23:08,450 --> 00:23:13,220
keyring management or to encryption or

00:23:10,490 --> 00:23:15,170
decryption support if we can help with

00:23:13,220 --> 00:23:19,280
that as the good EPG packaging team we'd

00:23:15,170 --> 00:23:21,350
like to do that so just a call for

00:23:19,280 --> 00:23:23,090
contributions if you've got ideas from

00:23:21,350 --> 00:23:24,400
this talk if you've got ideas before the

00:23:23,090 --> 00:23:27,230
stock that you've been scared to voice

00:23:24,400 --> 00:23:28,940
we're friendly we don't bite we would

00:23:27,230 --> 00:23:30,560
love your help we would love your

00:23:28,940 --> 00:23:32,540
suggestions even if it's a bug report

00:23:30,560 --> 00:23:34,520
that says this is broken for me and you

00:23:32,540 --> 00:23:35,570
can tell us here's why it's broken we

00:23:34,520 --> 00:23:37,430
want to know that that'll make it better

00:23:35,570 --> 00:23:38,540
for everybody so any contributions you

00:23:37,430 --> 00:23:42,290
have for improvements are totally

00:23:38,540 --> 00:23:43,730
welcome do you folks have questions this

00:23:42,290 --> 00:23:45,800
is how you can get in touch with us we

00:23:43,730 --> 00:23:46,400
got a mailing list we've got an IRC

00:23:45,800 --> 00:23:49,660
Channel

00:23:46,400 --> 00:23:49,660
there's a wiki page with some details

00:23:49,960 --> 00:23:59,270
Zoey Meegan I remember there was an

00:23:53,300 --> 00:24:00,950
issue with apt and gbg 2.1 when being

00:23:59,270 --> 00:24:03,530
installed together

00:24:00,950 --> 00:24:05,590
not being able to verify things anymore

00:24:03,530 --> 00:24:11,450
yep so I thought already about that

00:24:05,590 --> 00:24:13,430
David Kay I'll say we worked on thanks

00:24:11,450 --> 00:24:14,540
so so we worked on that together we

00:24:13,430 --> 00:24:15,950
talked through what was needed to be

00:24:14,540 --> 00:24:18,410
done and I think it's an end it is

00:24:15,950 --> 00:24:19,880
resolved so that with that that kind of

00:24:18,410 --> 00:24:21,380
interaction was awesome by the way thank

00:24:19,880 --> 00:24:22,400
you for bringing it to our attention and

00:24:21,380 --> 00:24:28,280
I'm glad that we could have the

00:24:22,400 --> 00:24:35,110
conversation that we did so question

00:24:28,280 --> 00:24:40,340
from Enrico I have a bunch okay

00:24:35,110 --> 00:24:45,260
one is auditing we currently I currently

00:24:40,340 --> 00:24:50,090
have no way to get an audit log of every

00:24:45,260 --> 00:24:52,340
time my keys used in Debian it would be

00:24:50,090 --> 00:24:54,590
inter I would like to have it because

00:24:52,340 --> 00:24:56,630
that would allow me to spot replay

00:24:54,590 --> 00:24:58,970
attacks or whatever mikey has been

00:24:56,630 --> 00:25:01,340
compromised my bank does send me an

00:24:58,970 --> 00:25:05,510
email every time I log into the home

00:25:01,340 --> 00:25:08,300
banking and I some time ago toyed with a

00:25:05,510 --> 00:25:11,960
thingy that generated an RSS feed of

00:25:08,300 --> 00:25:16,070
every time my key was something that was

00:25:11,960 --> 00:25:21,770
signed with my key was like taken into

00:25:16,070 --> 00:25:24,700
the archive for example or it could be

00:25:21,770 --> 00:25:29,450
so it could be like package uploads

00:25:24,700 --> 00:25:35,510
requests to DB Debian org for changing

00:25:29,450 --> 00:25:38,090
my credentials or things that be nice to

00:25:35,510 --> 00:25:40,640
have it wasn't easy but I'd like to

00:25:38,090 --> 00:25:43,340
discuss it and that's one and another

00:25:40,640 --> 00:25:48,320
one is we currently require two

00:25:43,340 --> 00:25:52,550
signatures on a key for one and another

00:25:48,320 --> 00:25:55,490
trust path to the key to the web core of

00:25:52,550 --> 00:25:59,600
the web of trust to accept a developer

00:25:55,490 --> 00:26:02,120
and we are talking about tofu I'd like

00:25:59,600 --> 00:26:05,530
to have a conversation about possibly

00:26:02,120 --> 00:26:08,530
with you other damn keyring mind you

00:26:05,530 --> 00:26:08,530
about

00:26:08,760 --> 00:26:17,550
do things change in Debian with regards

00:26:14,460 --> 00:26:20,760
to that it could be we won the key that

00:26:17,550 --> 00:26:22,230
has enough of a reputation attached to

00:26:20,760 --> 00:26:24,840
it

00:26:22,230 --> 00:26:29,190
that it wouldn't have been easy to

00:26:24,840 --> 00:26:31,410
create for example okay so these are

00:26:29,190 --> 00:26:34,020
both great ideas and I'm not sure that

00:26:31,410 --> 00:26:37,020
they relate specifically to the new PG

00:26:34,020 --> 00:26:39,030
packaging team you might be where's my

00:26:37,020 --> 00:26:43,440
packaging team and not my keyring main

00:26:39,030 --> 00:26:45,000
team had so but but I don't want that

00:26:43,440 --> 00:26:48,230
head that's your head I definitely don't

00:26:45,000 --> 00:26:48,230
want to be responsible for odd man

00:26:48,320 --> 00:26:56,610
nobody use by Debian rather than no no

00:26:54,750 --> 00:26:57,750
that but those are both good ideas and

00:26:56,610 --> 00:26:59,700
if there's ways that we can support that

00:26:57,750 --> 00:27:01,170
I would I would like to we should

00:26:59,700 --> 00:27:02,580
definitely talk about this tofu their

00:27:01,170 --> 00:27:04,470
relationship between tofu and the web of

00:27:02,580 --> 00:27:05,010
trust I think that the tofu proposals in

00:27:04,470 --> 00:27:07,620
group eg

00:27:05,010 --> 00:27:10,020
are not at all intended to make the web

00:27:07,620 --> 00:27:12,960
of trust impossible to use the goal is

00:27:10,020 --> 00:27:14,400
to make it so let me actually explain a

00:27:12,960 --> 00:27:16,710
little bit about my relationship with

00:27:14,400 --> 00:27:18,600
tofu and qpg I actually have a workflow

00:27:16,710 --> 00:27:20,580
with a set of really hacky scripts that

00:27:18,600 --> 00:27:22,980
implements tofu for me and I've been

00:27:20,580 --> 00:27:25,560
using it for two years or three years

00:27:22,980 --> 00:27:28,230
now where when I email with somebody and

00:27:25,560 --> 00:27:30,990
I think that's their key I convince

00:27:28,230 --> 00:27:32,490
group eg locally that their key is vat

00:27:30,990 --> 00:27:34,290
that that key is valid in a way that the

00:27:32,490 --> 00:27:35,550
new PG won't tell other people that I

00:27:34,290 --> 00:27:36,630
think that that's their key because I

00:27:35,550 --> 00:27:38,100
don't want to announce it to everybody

00:27:36,630 --> 00:27:39,680
else but I want it to be true for myself

00:27:38,100 --> 00:27:44,940
that this is the key that they're using

00:27:39,680 --> 00:27:46,950
so so I don't think that the move to

00:27:44,940 --> 00:27:49,470
tofu in upstream is it going to make it

00:27:46,950 --> 00:27:50,760
harder for us to do the kind of web of

00:27:49,470 --> 00:27:53,730
trust connections that we're currently

00:27:50,760 --> 00:27:54,660
doing within Debian and I don't think I

00:27:53,730 --> 00:27:56,430
don't think they're going to get in the

00:27:54,660 --> 00:27:57,570
way our conflict at all if anything it

00:27:56,430 --> 00:27:59,700
may make it easier to have those

00:27:57,570 --> 00:28:03,970
connections made without making it less

00:27:59,700 --> 00:28:08,420
secure too many negatives

00:28:03,970 --> 00:28:10,370
so this this renaming of GPG to to just

00:28:08,420 --> 00:28:12,380
GPG is this something that's also being

00:28:10,370 --> 00:28:14,120
done upstream or being coordinated with

00:28:12,380 --> 00:28:16,340
other distros we've been shipping a

00:28:14,120 --> 00:28:18,650
patch for years that renames been user

00:28:16,340 --> 00:28:22,130
Bennigan's EPG user been GPG to user

00:28:18,650 --> 00:28:23,750
been GPG to so this is actually bringing

00:28:22,130 --> 00:28:25,820
it in line with upstream that's right

00:28:23,750 --> 00:28:28,430
okay and there are other distros that

00:28:25,820 --> 00:28:32,810
have shipped user bin GPG as a good new

00:28:28,430 --> 00:28:33,860
PG to in two point something for for

00:28:32,810 --> 00:28:36,290
quite a long time now

00:28:33,860 --> 00:28:38,630
okay yeah I think Fedora has been on 2.0

00:28:36,290 --> 00:28:45,200
for at least a little while yeah okay

00:28:38,630 --> 00:28:48,050
that's awesome yeah can we please have

00:28:45,200 --> 00:28:51,110
back pots instead of required to run

00:28:48,050 --> 00:28:53,840
unstable can you have back ports instead

00:28:51,110 --> 00:28:58,910
of being required to run unstable back

00:28:53,840 --> 00:29:00,500
ports apply it back ports policy is we

00:28:58,910 --> 00:29:03,710
may not put things in back ports unless

00:29:00,500 --> 00:29:05,300
they're in testing I do not plan to ask

00:29:03,710 --> 00:29:07,070
for an exception to back ports policy

00:29:05,300 --> 00:29:08,960
which is or if your concern is that you

00:29:07,070 --> 00:29:10,820
want it in a back port help us fix the

00:29:08,960 --> 00:29:13,270
bugs that keep it out of testing okay

00:29:10,820 --> 00:29:22,460
and then we can talk about back ports I

00:29:13,270 --> 00:29:24,080
think I think noodles had a this is sort

00:29:22,460 --> 00:29:27,410
of a bigger point but I think back ports

00:29:24,080 --> 00:29:30,560
are very important because 2.1 adds a

00:29:27,410 --> 00:29:33,260
bunch of things that 1.4 and 2.0 we're

00:29:30,560 --> 00:29:35,660
currently mangling in debian and that's

00:29:33,260 --> 00:29:37,760
causing us with our keyring me and hat

00:29:35,660 --> 00:29:40,070
so on problems so if there was a

00:29:37,760 --> 00:29:41,090
commitment by the team to maintain a

00:29:40,070 --> 00:29:43,820
byte port I think they'll be very

00:29:41,090 --> 00:29:45,620
helpful okay and if you need mom par to

00:29:43,820 --> 00:29:47,540
do that then I'm happy to be called into

00:29:45,620 --> 00:29:51,290
helping not happen because I'm writing

00:29:47,540 --> 00:29:53,180
that down right now I don't think

00:29:51,290 --> 00:29:54,770
anyone's against the back board yeah but

00:29:53,180 --> 00:29:56,810
we do want to make sure that that it's

00:29:54,770 --> 00:29:58,370
it's good enough to meet the quality of

00:29:56,810 --> 00:30:00,350
the back there's an obvious need to do

00:29:58,370 --> 00:30:01,730
security commitment to back ports and I

00:30:00,350 --> 00:30:02,990
understand that that's a lot of work

00:30:01,730 --> 00:30:04,610
that has to be signed up to otherwise

00:30:02,990 --> 00:30:07,070
there's absolutely no point putting it

00:30:04,610 --> 00:30:08,780
in but I think that will be very useful

00:30:07,070 --> 00:30:11,450
in terms of getting access to things

00:30:08,780 --> 00:30:13,010
like ECC out into the wider world at

00:30:11,450 --> 00:30:14,240
least for people to play with Brett and

00:30:13,010 --> 00:30:15,650
there may be parts of the Debian

00:30:14,240 --> 00:30:16,930
infrastructure that want to run stable

00:30:15,650 --> 00:30:18,670
plus back ports

00:30:16,930 --> 00:30:21,430
that we would like to be able to accept

00:30:18,670 --> 00:30:28,390
ECC signatures on for example so yes I

00:30:21,430 --> 00:30:30,580
agree thank you for offering that one

00:30:28,390 --> 00:30:34,600
more question about the arduous support

00:30:30,580 --> 00:30:37,030
I make use of tokens for gbg keys and

00:30:34,600 --> 00:30:39,340
the support right now it's a bit let's

00:30:37,030 --> 00:30:41,350
say messy in the sense that you'd have

00:30:39,340 --> 00:30:44,620
you should be providing you dev rules

00:30:41,350 --> 00:30:46,180
right now is no bg1 I think so if I have

00:30:44,620 --> 00:30:48,730
only group eg - I don't have the rules

00:30:46,180 --> 00:30:50,680
for that and now that your transition

00:30:48,730 --> 00:30:52,750
have your really transition why is not

00:30:50,680 --> 00:30:54,850
upstream keeping the list of that stuff

00:30:52,750 --> 00:30:56,740
so I have to go and ask every supporter

00:30:54,850 --> 00:31:00,010
every provider of a token like please go

00:30:56,740 --> 00:31:02,440
and tell them - to also add your rule

00:31:00,010 --> 00:31:05,500
your ID that's the first one and the

00:31:02,440 --> 00:31:08,530
second one is like a sea demon the agent

00:31:05,500 --> 00:31:10,900
for the harder stuff and the PCSC daemon

00:31:08,530 --> 00:31:13,540
which is the system-wide demon they

00:31:10,900 --> 00:31:16,300
always like fight between them they are

00:31:13,540 --> 00:31:19,060
a bit racy right now it's better I mean

00:31:16,300 --> 00:31:21,220
I'm not having problem the ID but in the

00:31:19,060 --> 00:31:22,750
past it was a bit messy now I don't know

00:31:21,220 --> 00:31:26,260
where this support is going if they are

00:31:22,750 --> 00:31:28,420
merging it a plan to reuse the same kind

00:31:26,260 --> 00:31:38,410
of code or whatever so that would be my

00:31:28,420 --> 00:31:43,930
question so the even better I I maintain

00:31:38,410 --> 00:31:47,800
them in upstream so perhaps if you have

00:31:43,930 --> 00:31:50,830
encounter some program that's because of

00:31:47,800 --> 00:31:54,940
my badness perhaps and but these days

00:31:50,830 --> 00:31:59,680
the C demo in upstream is has the

00:31:54,940 --> 00:32:02,650
capability to handle more leaders I mean

00:31:59,680 --> 00:32:08,350
that it supports more leaders so we

00:32:02,650 --> 00:32:13,300
don't need PC demo anymore for most of

00:32:08,350 --> 00:32:15,580
cases yes my point was also bit as a

00:32:13,300 --> 00:32:19,240
distribution user because I have not

00:32:15,580 --> 00:32:21,490
only gbg key also keys for pkcs 11 or

00:32:19,240 --> 00:32:24,730
whatever other secret key that are

00:32:21,490 --> 00:32:26,620
tokens so I start diving like demons for

00:32:24,730 --> 00:32:29,410
ending multiple stuff and then I have to

00:32:26,620 --> 00:32:30,290
configure a sea demon to just take care

00:32:29,410 --> 00:32:31,970
of the GPS

00:32:30,290 --> 00:32:34,550
talking and not the other cards is like

00:32:31,970 --> 00:32:36,290
my setup is a bit messy right now so

00:32:34,550 --> 00:32:38,060
you're basically saying you've got so my

00:32:36,290 --> 00:32:40,340
question is like what do you plan to do

00:32:38,060 --> 00:32:43,130
as a distribution like do you want to

00:32:40,340 --> 00:32:45,590
set up a policy like because I know that

00:32:43,130 --> 00:32:46,550
the seiderman could use PCSD but it

00:32:45,590 --> 00:32:48,830
doesn't by default

00:32:46,550 --> 00:32:51,920
something like that so it's like we want

00:32:48,830 --> 00:32:54,170
to unify the ending of all the tokens

00:32:51,920 --> 00:32:57,260
cryptography cryptography tokens that

00:32:54,170 --> 00:33:00,080
exist in PCSD and then use the other

00:32:57,260 --> 00:33:02,030
helpers on top of PCs do do we want to

00:33:00,080 --> 00:33:04,880
keep them split or whatever that was

00:33:02,030 --> 00:33:06,560
like my question so I don't have a good

00:33:04,880 --> 00:33:08,240
instinct on that and I my workflow

00:33:06,560 --> 00:33:10,610
doesn't include those tokens but I'm

00:33:08,240 --> 00:33:14,600
very interested in the question I think

00:33:10,610 --> 00:33:18,260
Nico has had a talk last session about

00:33:14,600 --> 00:33:19,610
the idea of a unified crypto I was there

00:33:18,260 --> 00:33:21,860
it was something completely different

00:33:19,610 --> 00:33:23,900
was more about ending which kind of

00:33:21,860 --> 00:33:25,880
algorithm and rules every library should

00:33:23,900 --> 00:33:28,790
support so it sounds like you might have

00:33:25,880 --> 00:33:30,740
instincts about how we about ways that

00:33:28,790 --> 00:33:32,810
might work or that work for you or work

00:33:30,740 --> 00:33:35,300
better for you if there are things that

00:33:32,810 --> 00:33:37,990
we can be doing better in terms of as a

00:33:35,300 --> 00:33:40,190
distro accumulating you dev rules

00:33:37,990 --> 00:33:42,470
figuring out ownership of certain kinds

00:33:40,190 --> 00:33:44,810
of devices that would actually work

00:33:42,470 --> 00:33:45,980
across multiple platypus ystem x' i

00:33:44,810 --> 00:33:48,320
agree with you that's something that

00:33:45,980 --> 00:33:50,330
debian is is in a position to do

00:33:48,320 --> 00:33:52,070
I'd be I'm willing to work with you on

00:33:50,330 --> 00:33:53,870
trying to figure out how to fix that and

00:33:52,070 --> 00:33:54,920
that probably will mean bug reports

00:33:53,870 --> 00:33:56,960
against multiple packages

00:33:54,920 --> 00:33:58,670
I also took a note of your question

00:33:56,960 --> 00:34:00,620
about the you dev rules within GPG

00:33:58,670 --> 00:34:02,690
itself and yes those will be moving to

00:34:00,620 --> 00:34:04,250
the package that provides user bin GPG

00:34:02,690 --> 00:34:06,170
we can talk about that improv a little

00:34:04,250 --> 00:34:07,910
but my question was more like am I the

00:34:06,170 --> 00:34:10,220
only one that is I mean these issues I

00:34:07,910 --> 00:34:12,260
mean I have multiple keys because I work

00:34:10,220 --> 00:34:13,700
in a hostile environment sometimes and I

00:34:12,260 --> 00:34:16,669
mean the only one that is having these

00:34:13,700 --> 00:34:18,889
issues that was strange for me when I

00:34:16,669 --> 00:34:20,419
was eating these boxes was like when you

00:34:18,889 --> 00:34:22,370
are the first doing something and my

00:34:20,419 --> 00:34:25,070
body's having the same issues like yeah

00:34:22,370 --> 00:34:26,300
strange Thanks it sounds like you're the

00:34:25,070 --> 00:34:28,929
first person in this room with those

00:34:26,300 --> 00:34:28,929
issues yeah

00:34:34,149 --> 00:34:43,700
five five years ago I encounter similar

00:34:38,720 --> 00:34:50,090
issues and my answer is my own project

00:34:43,700 --> 00:34:52,220
that is gonna talk so I recommend the

00:34:50,090 --> 00:35:00,740
nuke token for your project for you I

00:34:52,220 --> 00:35:02,720
use so do we have more questions there's

00:35:00,740 --> 00:35:05,210
about seven minutes left

00:35:02,720 --> 00:35:06,920
but if we wanted five minutes left but

00:35:05,210 --> 00:35:10,600
if we if we get five extra minutes out

00:35:06,920 --> 00:35:10,600
of the day there's one in the back there

00:35:13,690 --> 00:35:21,110
this one is not strictly related to

00:35:16,670 --> 00:35:23,960
Debian but to upstream no PG it could be

00:35:21,110 --> 00:35:26,600
easier to implement the best practices I

00:35:23,960 --> 00:35:30,260
mean it's highly troublesome to generate

00:35:26,600 --> 00:35:32,120
a master master key without the

00:35:30,260 --> 00:35:37,910
encrypted part you have to do so many

00:35:32,120 --> 00:35:41,960
steps if you just write key missing the

00:35:37,910 --> 00:35:43,640
thing the primary portion to a file and

00:35:41,960 --> 00:35:45,200
the completely to another file when you

00:35:43,640 --> 00:35:47,450
generate a secret key it would be much

00:35:45,200 --> 00:35:50,150
easier than you just store away during

00:35:47,450 --> 00:35:52,760
the complete key and you already have

00:35:50,150 --> 00:35:55,280
one that's missing the circuit part so

00:35:52,760 --> 00:35:58,370
you can use that as you are well

00:35:55,280 --> 00:36:02,390
protected but still daily use keys that

00:35:58,370 --> 00:36:04,700
it cannot sign other keys but yes yes so

00:36:02,390 --> 00:36:06,440
it would be easier I agree that could be

00:36:04,700 --> 00:36:07,700
easier and I don't know whether that's

00:36:06,440 --> 00:36:09,680
actually something specifically for

00:36:07,700 --> 00:36:11,120
upstream if we can find specific things

00:36:09,680 --> 00:36:12,740
that we could fix with an upstream that

00:36:11,120 --> 00:36:13,700
would be great but I put this up here as

00:36:12,740 --> 00:36:15,230
possible futures

00:36:13,700 --> 00:36:17,840
you know streamlining known best

00:36:15,230 --> 00:36:19,280
practices offline primary keys I mean I

00:36:17,840 --> 00:36:20,720
fully agree with you this is an

00:36:19,280 --> 00:36:22,310
important thing to work on to make it

00:36:20,720 --> 00:36:22,760
easier for people to do than the current

00:36:22,310 --> 00:36:26,480
dance

00:36:22,760 --> 00:36:28,550
yes about about the ECC we should have a

00:36:26,480 --> 00:36:32,900
guide for Debian people trying to use

00:36:28,550 --> 00:36:35,870
ECC keys because you actually have to

00:36:32,900 --> 00:36:39,320
read that safe so it curves dot crypto

00:36:35,870 --> 00:36:40,820
to actually know what the problem I mean

00:36:39,320 --> 00:36:44,460
sometimes they are too hard to implement

00:36:40,820 --> 00:36:47,370
so you should select cube

00:36:44,460 --> 00:36:49,740
because it's easier to not make deadly

00:36:47,370 --> 00:36:52,770
mistakes in code than the nice tune in T

00:36:49,740 --> 00:36:54,840
n is T ones and they are actually I

00:36:52,770 --> 00:36:58,260
think they are more vulnerable to some

00:36:54,840 --> 00:37:00,000
attacks than cube so with my keyring

00:36:58,260 --> 00:37:03,000
mate hat on I think we don't want to

00:37:00,000 --> 00:37:04,290
encourage anyone to switch right now I

00:37:03,000 --> 00:37:06,570
think we want to make sure that this

00:37:04,290 --> 00:37:10,140
software is deployed so we can deal with

00:37:06,570 --> 00:37:13,470
these it's not just to have the software

00:37:10,140 --> 00:37:15,690
that can handle that but before we tell

00:37:13,470 --> 00:37:20,010
people that well you can try now we

00:37:15,690 --> 00:37:22,350
should have a simple guide if the

00:37:20,010 --> 00:37:27,210
defaults are not already G to us that

00:37:22,350 --> 00:37:28,530
that teach people a bit about what are

00:37:27,210 --> 00:37:36,570
the differences between the several

00:37:28,530 --> 00:37:40,560
curves available in simple terms just to

00:37:36,570 --> 00:37:42,840
reiterate the keyring main point we're a

00:37:40,560 --> 00:37:45,030
long way of being able to accept DCC

00:37:42,840 --> 00:37:48,030
keys in the Debian keyring and then to

00:37:45,030 --> 00:37:50,190
work reliably every single piece of the

00:37:48,030 --> 00:37:52,080
Debian infrastructure to talk to a GP GK

00:37:50,190 --> 00:37:53,670
that you expect to work on will have to

00:37:52,080 --> 00:37:55,980
have 2.1 installed

00:37:53,670 --> 00:37:58,380
it's not even in testing that alone

00:37:55,980 --> 00:38:00,360
stable at the moment so I would imagine

00:37:58,380 --> 00:38:02,070
were at least two impossibly four years

00:38:00,360 --> 00:38:03,630
off those being widely supported in

00:38:02,070 --> 00:38:05,400
Debian that doesn't mean that we

00:38:03,630 --> 00:38:07,350
shouldn't look at how we can get them in

00:38:05,400 --> 00:38:10,140
the hands of developers and I'm glad to

00:38:07,350 --> 00:38:12,330
see that 2.1 has head unstable which it

00:38:10,140 --> 00:38:15,750
hadn't last time I looked I checked

00:38:12,330 --> 00:38:17,550
before heckling you so yeah absolutely

00:38:15,750 --> 00:38:19,110
play with it but don't expect it to work

00:38:17,550 --> 00:38:21,030
on the Debian infrastructures being a

00:38:19,110 --> 00:38:22,530
thing you can use for at least two years

00:38:21,030 --> 00:38:23,730
and I would say potentially up to four

00:38:22,530 --> 00:38:25,500
years because of the number of systems

00:38:23,730 --> 00:38:26,910
that it will be required to understand

00:38:25,500 --> 00:38:29,130
them right which is why we're switching

00:38:26,910 --> 00:38:30,900
now so that we can have it in two years

00:38:29,130 --> 00:38:32,850
or four years instead of in six years or

00:38:30,900 --> 00:38:34,470
eight years in two years we should

00:38:32,850 --> 00:38:37,350
probably have a lot more knowledge about

00:38:34,470 --> 00:38:39,810
which right you're right and at that

00:38:37,350 --> 00:38:41,370
point hopefully the defaults when we do

00:38:39,810 --> 00:38:42,750
get that when it's time to turn those

00:38:41,370 --> 00:38:45,240
things on then the default should be

00:38:42,750 --> 00:38:47,550
simple and we shouldn't need too much I

00:38:45,240 --> 00:38:51,870
mean documentation is great for those

00:38:47,550 --> 00:38:53,520
people who read it but hopefully the

00:38:51,870 --> 00:38:54,960
simple key generation steps will just do

00:38:53,520 --> 00:38:56,730
the right thing and make a strong key

00:38:54,960 --> 00:38:57,870
for people to use once once we're ready

00:38:56,730 --> 00:39:01,110
for people to start

00:38:57,870 --> 00:39:10,470
okay thank you Thanks what did you wanna

00:39:01,110 --> 00:39:13,230
say to me well actually with the offline

00:39:10,470 --> 00:39:15,840
primary key our with 2.1 it's really

00:39:13,230 --> 00:39:18,450
really simple to do that are you use - -

00:39:15,840 --> 00:39:20,490
key grip of the listing to see the key

00:39:18,450 --> 00:39:23,580
grip of the key and then you go and

00:39:20,490 --> 00:39:25,950
delete deprive the private finder

00:39:23,580 --> 00:39:27,630
private and the privateers we won

00:39:25,950 --> 00:39:29,700
Fink's directory there's a file with

00:39:27,630 --> 00:39:33,480
this key grep dot dot key you just

00:39:29,700 --> 00:39:35,670
delete this one and it isn't off lankey

00:39:33,480 --> 00:39:38,700
of course you should have on your secure

00:39:35,670 --> 00:39:40,590
laptop you should have a copy of it so

00:39:38,700 --> 00:39:42,330
you can still use it but it's it's

00:39:40,590 --> 00:39:44,790
really really easy just if it's not

00:39:42,330 --> 00:39:47,700
there it's an offline key that's how it

00:39:44,790 --> 00:39:50,190
works cool all right so thank you

00:39:47,700 --> 00:39:53,280
everyone for coming and I hope to see

00:39:50,190 --> 00:39:56,280
you on the mailing list

00:39:53,280 --> 00:39:58,110
IRC get in touch with us let us know

00:39:56,280 --> 00:40:01,730
what we can do and of course in the BTS

00:39:58,110 --> 00:40:01,730
I'll see you there thanks

00:40:05,170 --> 00:40:07,230

YouTube URL: https://www.youtube.com/watch?v=OsKzIjlbN0s


