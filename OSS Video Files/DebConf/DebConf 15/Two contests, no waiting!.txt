Title: Two contests, no waiting!
Publication date: 2017-12-03
Playlist: DebConf 15
Description: 
	by Jon 'maddog' Hall

At: DebConf15
https://summit.debconf.org/debconf15/meeting/326/two-contests-no-waiting/
https://debconf15.debconf.org/

This talk will discuss two contests with two issues.
First contest: Inveneo, LeMaker and ARM have sponsored a contest to develop a
solar-powered, highly available, scalable, passively cooled "Micro Data Center"
for developing countries.  The first part of the contest was to develop a
design for the hardware that would use up to 15 ARM-based Single Board
Computers (SBCs) and up to ten SSDs with a 16-port Gbit data switch that could
be powered by a Solar Panel or other 12 volt supply.  Over fifty entries were
submitted to a contest ending June 10th, with the results being announced July
20th.  Some number of the winning Micro Data Center designs will be built by a
company called ProCase.

Then a second part of the contest will be to create and configure the software
to run these data centers in a secure, highly available, easily updated
fashion.

The speaker would like the Debian community, spear-headed by Debian developers
at Debconf, to create such a package of software.

Second Contest: Linaro, a non-profit organization trying to help companies put
GNU/Linux on their ARM processors and SoCs, has noticed about 1400 programs in
GNU/Linux that still have assembly language in them.  This assembly language
has often been there a long time, and may (in the days of multi-core,
multi-pipelined, multi-level cache) cause the programs to run slower and less
efficiently, not faster.

Examples of these performance and efficiency issues will be briefly given in
the talks.

Linaro has designed a contest to port these 1400 programs to ARM-64, and at the
same time test to see if the programs efficiency can be improved by recoding
the assembly language sections.

These contests will be discussed in the talk, perhaps with workshops set up to
help address them at Debconf.

Room: Heidelberg
Scheduled start: 2015-08-17 10:00:00
Captions: 
	00:00:00,060 --> 00:00:08,790
so now here's John Mehta halt no need to

00:00:03,870 --> 00:00:17,520
announce him almost no waiting please

00:00:08,790 --> 00:00:22,500
give a warm applause I will explain the

00:00:17,520 --> 00:00:24,449
almost in the course of the talk but it

00:00:22,500 --> 00:00:27,029
was a slight change that happened it

00:00:24,449 --> 00:00:29,849
recently first of all for the people

00:00:27,029 --> 00:00:32,250
that do not know me I was inspired

00:00:29,849 --> 00:00:34,790
yesterday by Bedales talk where he

00:00:32,250 --> 00:00:38,129
explained his history with Debian and

00:00:34,790 --> 00:00:40,980
although I haven't had quite as tight a

00:00:38,129 --> 00:00:43,500
history with Debian I have had a history

00:00:40,980 --> 00:00:47,640
in computer science and particularly

00:00:43,500 --> 00:00:51,660
with Linux since 1994 I've been a large

00:00:47,640 --> 00:00:54,239
number of different jobs a lot of people

00:00:51,660 --> 00:00:56,190
think of me is this kind of a marketing

00:00:54,239 --> 00:00:59,690
somewhat technical guy who goes around

00:00:56,190 --> 00:01:04,080
giving away free software ohoho

00:00:59,690 --> 00:01:06,390
but at one time I was a programmer and I

00:01:04,080 --> 00:01:08,700
did teach operating system design and

00:01:06,390 --> 00:01:11,700
compiler design when it was teaching in

00:01:08,700 --> 00:01:16,920
university so I do have a technical side

00:01:11,700 --> 00:01:18,840
to me also in 1994 I saw leanest

00:01:16,920 --> 00:01:21,900
Torvalds for the first time and saw

00:01:18,840 --> 00:01:24,360
Linux for the first time and working at

00:01:21,900 --> 00:01:27,689
Digital Equipment Corporation trying to

00:01:24,360 --> 00:01:32,189
promote the Alpha system I saw this as a

00:01:27,689 --> 00:01:35,640
perfect target to do computer science

00:01:32,189 --> 00:01:37,740
research the ability to distribute the

00:01:35,640 --> 00:01:39,990
code freely after you've done the

00:01:37,740 --> 00:01:43,770
research and particularly in large

00:01:39,990 --> 00:01:45,930
address spaces which the Alpha had I saw

00:01:43,770 --> 00:01:48,420
this as a perfect thing and later on I

00:01:45,930 --> 00:01:50,850
saw it not just as an educational and

00:01:48,420 --> 00:01:54,090
research vehicle or a technological

00:01:50,850 --> 00:01:58,229
thing for computer geeks but I saw it as

00:01:54,090 --> 00:02:01,140
a commercially valuable system and so in

00:01:58,229 --> 00:02:02,820
1995 I became the executive director of

00:02:01,140 --> 00:02:05,070
a small organization called Linux

00:02:02,820 --> 00:02:07,619
International which is made up of some

00:02:05,070 --> 00:02:10,860
very small fledgling companies that were

00:02:07,619 --> 00:02:13,520
trying to promote Linux and at that time

00:02:10,860 --> 00:02:15,290
we developed the Linux Marc Institute

00:02:13,520 --> 00:02:17,300
to protect the Linux trademark so that

00:02:15,290 --> 00:02:21,050
anybody could use it for any legitimate

00:02:17,300 --> 00:02:23,330
purpose we created helped to create the

00:02:21,050 --> 00:02:27,410
linux professional institute for doing

00:02:23,330 --> 00:02:30,410
certification that is distribution

00:02:27,410 --> 00:02:32,330
neutral and we created the linux

00:02:30,410 --> 00:02:35,450
standard base project which continues

00:02:32,330 --> 00:02:37,520
today and then i've spent the last 20

00:02:35,450 --> 00:02:41,690
years trying to promote linux worldwide

00:02:37,520 --> 00:02:44,780
to companies to universities to

00:02:41,690 --> 00:02:46,520
government's so that's a little bit

00:02:44,780 --> 00:02:49,430
about me

00:02:46,520 --> 00:02:52,660
who is our mandolin Aero most of you

00:02:49,430 --> 00:02:56,590
know that arm is in a corporation that

00:02:52,660 --> 00:03:00,260
develops a architecture for CPUs GPUs

00:02:56,590 --> 00:03:02,150
and other types of processing units they

00:03:00,260 --> 00:03:04,010
designed the architecture and licensed

00:03:02,150 --> 00:03:06,440
about the companies like Broadcom

00:03:04,010 --> 00:03:09,320
Samsung and others to could actually

00:03:06,440 --> 00:03:12,340
create the chips on like Intel and AMD

00:03:09,320 --> 00:03:17,030
who both create the architecture and

00:03:12,340 --> 00:03:18,980
manufacture the chips a few years ago

00:03:17,030 --> 00:03:20,840
what was happening was all these

00:03:18,980 --> 00:03:24,070
companies producing these chips for

00:03:20,840 --> 00:03:27,350
hiring say 50 engineers apiece and

00:03:24,070 --> 00:03:29,660
trying to port Linux on to their chips

00:03:27,350 --> 00:03:33,260
and on to their system on a chip sesor

00:03:29,660 --> 00:03:35,150
sees all the types of ports and then all

00:03:33,260 --> 00:03:37,670
of them would be sending a patch to

00:03:35,150 --> 00:03:39,650
Lina's Torvalds to say holiness here's a

00:03:37,670 --> 00:03:41,030
patch with a kernel that handles the

00:03:39,650 --> 00:03:43,010
memory management system in ARM

00:03:41,030 --> 00:03:45,950
architecture and leanness would end up

00:03:43,010 --> 00:03:47,450
with 50 patches all purporting to do the

00:03:45,950 --> 00:03:49,640
same thing and of course having

00:03:47,450 --> 00:03:51,620
different code in them and he was

00:03:49,640 --> 00:03:55,280
getting fairly exasperated with this and

00:03:51,620 --> 00:03:57,650
so a friend of mine David rustling who

00:03:55,280 --> 00:04:01,250
actually wrote the first bootloader for

00:03:57,650 --> 00:04:05,030
alpha Linux called me lo was a fellow at

00:04:01,250 --> 00:04:08,209
arm and he decided to start an

00:04:05,030 --> 00:04:11,060
organization called llanera which has

00:04:08,209 --> 00:04:13,160
the idea of cooperation of all these

00:04:11,060 --> 00:04:15,860
companies coming together and saying

00:04:13,160 --> 00:04:18,919
let's collaborate on this let's all pour

00:04:15,860 --> 00:04:21,410
resources together and you have two

00:04:18,919 --> 00:04:23,390
engineers that you assigned to us along

00:04:21,410 --> 00:04:25,790
with some money and we will create the

00:04:23,390 --> 00:04:27,270
patches that will go to leanness and so

00:04:25,790 --> 00:04:32,190
doughiness gets one

00:04:27,270 --> 00:04:34,620
pache coming to him from Ladera and we

00:04:32,190 --> 00:04:37,819
work with more than just the colonel we

00:04:34,620 --> 00:04:40,979
also work on tool chains and testing

00:04:37,819 --> 00:04:46,889
mechanisms and various other things in

00:04:40,979 --> 00:04:48,419
the arm ecosystem now most of the people

00:04:46,889 --> 00:04:50,849
in the room I mean if you haven't heard

00:04:48,419 --> 00:04:57,449
of it I'll ask the question who has not

00:04:50,849 --> 00:04:59,639
heard of the Raspberry Pi okay now the

00:04:57,449 --> 00:05:01,590
reason the Raspberry Pi was created was

00:04:59,639 --> 00:05:03,930
because professors at the University of

00:05:01,590 --> 00:05:06,840
Cambridge were a little bit concerned

00:05:03,930 --> 00:05:09,120
that students coming into the university

00:05:06,840 --> 00:05:11,990
actually knew less about how computers

00:05:09,120 --> 00:05:14,699
worked than students of twenty years ago

00:05:11,990 --> 00:05:16,470
because the students of today coming

00:05:14,699 --> 00:05:18,719
into the university they get a laptop

00:05:16,470 --> 00:05:22,050
bought for them or maybe they buy it

00:05:18,719 --> 00:05:24,000
themselves and on the laptop it says you

00:05:22,050 --> 00:05:27,300
open this things up and you void your

00:05:24,000 --> 00:05:29,610
warranty well of course we don't want to

00:05:27,300 --> 00:05:32,789
do that because of its thing breaks our

00:05:29,610 --> 00:05:34,949
warranty is voided so you never open

00:05:32,789 --> 00:05:36,780
that up and then you go and you you get

00:05:34,949 --> 00:05:38,430
a game at your local store you pull it

00:05:36,780 --> 00:05:40,560
down off the web or you pirate from your

00:05:38,430 --> 00:05:42,930
favorite friend or whatever and you put

00:05:40,560 --> 00:05:45,240
that on your computer and you don't have

00:05:42,930 --> 00:05:48,000
to compile it you don't have to debug it

00:05:45,240 --> 00:05:51,389
you know this is this is not like it was

00:05:48,000 --> 00:05:55,289
20 25 years ago when you had a Commodore

00:05:51,389 --> 00:05:57,210
64 and you copied the program from the

00:05:55,289 --> 00:05:58,770
bulletin board over the net and you

00:05:57,210 --> 00:06:00,990
typed it in you've got these things

00:05:58,770 --> 00:06:03,300
called syntax errors and you've got

00:06:00,990 --> 00:06:07,380
these things like buffer overflows and

00:06:03,300 --> 00:06:09,810
all sorts of weird nasty stuff and you

00:06:07,380 --> 00:06:12,029
had to figure it out and so the

00:06:09,810 --> 00:06:14,250
professors were really really upset

00:06:12,029 --> 00:06:16,650
about this and they decided to create a

00:06:14,250 --> 00:06:19,529
computer that purposely did not come in

00:06:16,650 --> 00:06:22,259
a case purposely was small enough to fit

00:06:19,529 --> 00:06:24,900
in a students pocket purposely was cheap

00:06:22,259 --> 00:06:27,569
enough that if you blew it up it wasn't

00:06:24,900 --> 00:06:29,699
the end of the world and they stuck

00:06:27,569 --> 00:06:33,240
these things on their magical things

00:06:29,699 --> 00:06:35,310
called GPIO pins general purpose input

00:06:33,240 --> 00:06:37,409
output that you could then you know

00:06:35,310 --> 00:06:38,729
cause these pins to put out signals and

00:06:37,409 --> 00:06:40,870
then all of a sudden there are these

00:06:38,729 --> 00:06:42,730
prototyping boards

00:06:40,870 --> 00:06:44,680
that people could start designing things

00:06:42,730 --> 00:06:46,390
and then there was a website that shared

00:06:44,680 --> 00:06:47,860
the designs with different people and

00:06:46,390 --> 00:06:50,770
the source code was published does this

00:06:47,860 --> 00:06:51,340
sound familiar to you this is like we

00:06:50,770 --> 00:06:54,970
did it

00:06:51,340 --> 00:06:56,620
25 years ago only back in those days the

00:06:54,970 --> 00:06:59,440
computer might cost a little bit more

00:06:56,620 --> 00:07:02,080
and the circuit board being fairly

00:06:59,440 --> 00:07:04,750
expensive I still remember the day when

00:07:02,080 --> 00:07:09,550
transistor a single transistor cost a

00:07:04,750 --> 00:07:12,970
dollar 25 and the Raspberry Pi was only

00:07:09,550 --> 00:07:15,490
three watts of power so this of course

00:07:12,970 --> 00:07:17,950
and when they started they thought

00:07:15,490 --> 00:07:20,380
they'd only need a thousand of them and

00:07:17,950 --> 00:07:22,750
then they updated it to it to ten

00:07:20,380 --> 00:07:24,580
thousand and then but in time they took

00:07:22,750 --> 00:07:27,010
the first order it was a hundred

00:07:24,580 --> 00:07:30,520
thousand systems and in the first year

00:07:27,010 --> 00:07:33,610
they manufactured a million and this

00:07:30,520 --> 00:07:37,570
year they're looking at five million so

00:07:33,610 --> 00:07:39,810
it's been a little bit of a success now

00:07:37,570 --> 00:07:42,670
it off of course sponsored some clones

00:07:39,810 --> 00:07:44,590
along came some companies over in China

00:07:42,670 --> 00:07:47,500
says hey we can create the banana pie

00:07:44,590 --> 00:07:50,290
okay and we're gonna make a little bit

00:07:47,500 --> 00:07:51,760
better dual-core arm now this is a

00:07:50,290 --> 00:07:53,440
little bit more interesting from a

00:07:51,760 --> 00:07:55,060
computer science standpoint because if

00:07:53,440 --> 00:07:57,520
you're putting an operating system on

00:07:55,060 --> 00:07:59,110
there of course having dual cores means

00:07:57,520 --> 00:08:01,180
that you can actually have one CPU

00:07:59,110 --> 00:08:02,560
interrupting the other and you can trace

00:08:01,180 --> 00:08:05,320
conditions and all sorts of other

00:08:02,560 --> 00:08:09,070
interesting things it had a gigabyte of

00:08:05,320 --> 00:08:11,080
RAM it had a SATA connector which is

00:08:09,070 --> 00:08:13,810
really nice because it gave some decent

00:08:11,080 --> 00:08:16,660
input/output and it had Gigabit Ethernet

00:08:13,810 --> 00:08:20,350
versus a business of Raspberry Pi only

00:08:16,660 --> 00:08:23,980
having 10 100 megabit per second

00:08:20,350 --> 00:08:26,310
Ethernet slightly more power but hey it

00:08:23,980 --> 00:08:28,840
only costs a couple dollars more and

00:08:26,310 --> 00:08:30,760
then of course the Raspberry Pi people

00:08:28,840 --> 00:08:34,030
came back with an even better Raspberry

00:08:30,760 --> 00:08:37,150
Pi 4 cores now we're really beginning

00:08:34,030 --> 00:08:41,800
interesting unfortunately only gigabyte

00:08:37,150 --> 00:08:44,110
of ram and and no input/output device

00:08:41,800 --> 00:08:47,950
and still kind of working off of the USB

00:08:44,110 --> 00:08:50,010
2.0 bus so then we came out with into

00:08:47,950 --> 00:08:53,950
banana Pro

00:08:50,010 --> 00:08:55,570
you know which which had if gradual

00:08:53,950 --> 00:08:58,240
improvement but when you actually take a

00:08:55,570 --> 00:09:00,970
look out on the internet you find all

00:08:58,240 --> 00:09:03,100
these tiny little computers and they all

00:09:00,970 --> 00:09:05,740
are very interesting in one way or the

00:09:03,100 --> 00:09:07,930
other and and even you even have some

00:09:05,740 --> 00:09:09,940
Intel interesting computers like the

00:09:07,930 --> 00:09:11,190
Galileo over there I'm not afraid to

00:09:09,940 --> 00:09:15,250
mention it there it is

00:09:11,190 --> 00:09:18,280
you know but you know all computers that

00:09:15,250 --> 00:09:21,400
people can touch and put our favorite

00:09:18,280 --> 00:09:24,730
operating systems on and then you have

00:09:21,400 --> 00:09:28,000
things like the adaptive --is parallel

00:09:24,730 --> 00:09:30,070
board which not only has a two core arm9

00:09:28,000 --> 00:09:33,610
processor but also has a field

00:09:30,070 --> 00:09:35,800
programmable gate array now we've known

00:09:33,610 --> 00:09:37,630
how to build these for a long long

00:09:35,800 --> 00:09:39,340
period of time a very long period of

00:09:37,630 --> 00:09:41,740
time it's just that they probably would

00:09:39,340 --> 00:09:44,230
take up this entire room to build what's

00:09:41,740 --> 00:09:46,780
there with that chip right now and would

00:09:44,230 --> 00:09:49,410
cost many thousands of dollars when you

00:09:46,780 --> 00:09:51,880
could buy this chip for much lower price

00:09:49,410 --> 00:09:54,460
it has some digital signal processing

00:09:51,880 --> 00:10:00,010
chips on it and on this particular board

00:09:54,460 --> 00:10:02,530
it even has a 16 core or 64 core CPU

00:10:00,010 --> 00:10:05,470
where each core has 32 kilobytes of

00:10:02,530 --> 00:10:08,320
memory that's associated only with that

00:10:05,470 --> 00:10:11,200
core so you can load your programs and

00:10:08,320 --> 00:10:13,840
your data into that core and work on

00:10:11,200 --> 00:10:17,050
them in parallel and people go Oh bad

00:10:13,840 --> 00:10:19,420
dog 32k of memory what can you do in

00:10:17,050 --> 00:10:21,370
that let me tell you something I

00:10:19,420 --> 00:10:23,800
programmed for the first ten years of my

00:10:21,370 --> 00:10:27,340
life and had less than 32 kilobytes of

00:10:23,800 --> 00:10:31,270
memory on my computer system okay and if

00:10:27,340 --> 00:10:33,340
you remember CPM used to work in 64 K of

00:10:31,270 --> 00:10:35,020
memory that had the operating system in

00:10:33,340 --> 00:10:38,560
it and a whole bunch of other stuff and

00:10:35,020 --> 00:10:42,370
we got along fine and it only uses five

00:10:38,560 --> 00:10:44,200
watts of power I will point out that for

00:10:42,370 --> 00:10:47,230
long a certain number of months this was

00:10:44,200 --> 00:10:50,740
the fastest was power efficient Bitcoin

00:10:47,230 --> 00:10:53,980
mining CPU on the market

00:10:50,740 --> 00:10:57,759
and is the latest in my little rain of

00:10:53,980 --> 00:10:59,410
computers the BBC's micro bed the BBC

00:10:57,759 --> 00:11:02,860
the British Broadcasting Company has

00:10:59,410 --> 00:11:05,230
gone in with some other corporations to

00:11:02,860 --> 00:11:07,600
create a tiny little computer system

00:11:05,230 --> 00:11:10,629
that they want to make cheap enough to

00:11:07,600 --> 00:11:12,910
actually hand out for free to every 7

00:11:10,629 --> 00:11:15,399
every 7th grade students in the entire

00:11:12,910 --> 00:11:17,110
United Kingdom and they're going to be

00:11:15,399 --> 00:11:19,660
working this into their programs so

00:11:17,110 --> 00:11:22,420
doctor who will be having a bike repair

00:11:19,660 --> 00:11:23,559
and you know an east side street or

00:11:22,420 --> 00:11:25,720
whatever they call it will be having

00:11:23,559 --> 00:11:28,139
micro bits worked into the programming

00:11:25,720 --> 00:11:31,720
to interest the students in in

00:11:28,139 --> 00:11:33,999
programming that so besides all that why

00:11:31,720 --> 00:11:36,069
am i showing you all of this it's

00:11:33,999 --> 00:11:38,619
because of things like this this is my

00:11:36,069 --> 00:11:42,850
latest little hobby I wanted to put

00:11:38,619 --> 00:11:45,610
together a nice little effect Beowulf

00:11:42,850 --> 00:11:50,259
computer system and mating it out of

00:11:45,610 --> 00:11:51,160
banana furrows and and it worked very

00:11:50,259 --> 00:11:54,339
well

00:11:51,160 --> 00:11:57,069
I had altogether six gigabytes of RAM

00:11:54,339 --> 00:12:00,819
and six HDMI ports so I could have a

00:11:57,069 --> 00:12:03,730
decent number of screens and six SATA

00:12:00,819 --> 00:12:05,199
ports although I only used it to so if

00:12:03,730 --> 00:12:07,240
you notice there's two levels to this

00:12:05,199 --> 00:12:09,129
there's a bottom level and on the very

00:12:07,240 --> 00:12:12,100
bottom level it has an eight port

00:12:09,129 --> 00:12:14,800
gigabit switch the next level up has two

00:12:12,100 --> 00:12:18,249
one terabyte disk drives taken out of a

00:12:14,800 --> 00:12:21,309
notebook and and above that the the

00:12:18,249 --> 00:12:24,370
bottom two banana PI's are for

00:12:21,309 --> 00:12:27,040
controlling those two disks and then up

00:12:24,370 --> 00:12:30,429
above that or just see it affects CPU

00:12:27,040 --> 00:12:34,240
units and the whole thing uses including

00:12:30,429 --> 00:12:35,860
the switch 70 watts of power but the

00:12:34,240 --> 00:12:37,839
biggest thing for me was the fact that

00:12:35,860 --> 00:12:40,449
it actually fit in a standard sized

00:12:37,839 --> 00:12:42,429
briefcase and so I can take this Dean

00:12:40,449 --> 00:12:44,199
inside briefcase around the universities

00:12:42,429 --> 00:12:46,720
and stuff like that in a small amount of

00:12:44,199 --> 00:12:50,199
time put it together so that I can

00:12:46,720 --> 00:12:52,240
demonstrate various things to them now

00:12:50,199 --> 00:12:53,649
what type of various things can I show

00:12:52,240 --> 00:12:57,069
well I can show high-performance

00:12:53,649 --> 00:12:58,870
computing using open MP MPI you know a

00:12:57,069 --> 00:13:01,120
variety of other different types of free

00:12:58,870 --> 00:13:03,930
software I can also set it up as a

00:13:01,120 --> 00:13:07,260
highly available system doing mirror

00:13:03,930 --> 00:13:09,000
dis and be able to show heartbeats and

00:13:07,260 --> 00:13:11,910
be able to show the fact failover and

00:13:09,000 --> 00:13:15,120
that type of thing I can use it to do

00:13:11,910 --> 00:13:16,860
heterogeneous computing I could put part

00:13:15,120 --> 00:13:21,450
me for saying this other operating

00:13:16,860 --> 00:13:24,779
systems on there such as BSD or the herd

00:13:21,450 --> 00:13:26,190
or or no and sup and and and and and

00:13:24,779 --> 00:13:27,660
I've been told that in the future

00:13:26,190 --> 00:13:30,149
sometime I might even be able to put

00:13:27,660 --> 00:13:32,160
Windows 10 on one of those systems and

00:13:30,149 --> 00:13:34,890
be able to show heterogeneous computing

00:13:32,160 --> 00:13:37,830
with that likewise we could do

00:13:34,890 --> 00:13:39,690
heterogeneous systems administration on

00:13:37,830 --> 00:13:41,760
there now I know that we can do this

00:13:39,690 --> 00:13:44,700
very simply by using virtual machines

00:13:41,760 --> 00:13:46,589
and things like that but you know it

00:13:44,700 --> 00:13:48,839
isn't as exciting as when you can

00:13:46,589 --> 00:13:51,300
actually see the lights blinking and and

00:13:48,839 --> 00:13:53,550
he--and and and not hear the disk moving

00:13:51,300 --> 00:13:56,130
and stuff there's the type of stuff and

00:13:53,550 --> 00:13:59,490
I wanted to be very so I wanted to be

00:13:56,130 --> 00:14:01,890
very modular and as time goes on as I

00:13:59,490 --> 00:14:04,950
get find more and less expensive and

00:14:01,890 --> 00:14:08,220
more powerful CPUs I can unplug some and

00:14:04,950 --> 00:14:09,959
put some more in there now this is the

00:14:08,220 --> 00:14:11,580
first version of this is the first

00:14:09,959 --> 00:14:13,529
prototype and I made it out of things

00:14:11,580 --> 00:14:15,150
like flexi glass which is very expensive

00:14:13,529 --> 00:14:17,700
and stuff and so I want to go back

00:14:15,150 --> 00:14:20,010
through now and and substitute other

00:14:17,700 --> 00:14:21,570
materials with the drawings of where you

00:14:20,010 --> 00:14:25,200
drill the holes and everything else and

00:14:21,570 --> 00:14:29,100
and reduce the cost so it should be able

00:14:25,200 --> 00:14:31,440
to get down to less than $400 maybe even

00:14:29,100 --> 00:14:35,370
less than $300 and actually have more

00:14:31,440 --> 00:14:38,010
powerful processors up the stack when I

00:14:35,370 --> 00:14:41,640
say more powerful processors I'm talking

00:14:38,010 --> 00:14:45,570
about things like this this is a little

00:14:41,640 --> 00:14:48,089
this is an 8 core ARM 64 chip inside of

00:14:45,570 --> 00:14:50,730
here with a gigabyte of memory and this

00:14:48,089 --> 00:14:53,640
particular system costs about 100 US

00:14:50,730 --> 00:14:59,029
dollars and we'll talk more about this

00:14:53,640 --> 00:15:01,829
later on so contest number one is

00:14:59,029 --> 00:15:03,270
sponsored by actually three different

00:15:01,829 --> 00:15:06,209
companies one of which is called

00:15:03,270 --> 00:15:09,540
inventio in-video is a con is a

00:15:06,209 --> 00:15:12,240
nonprofit organization in San Francisco

00:15:09,540 --> 00:15:14,790
I first met them at one of the first

00:15:12,240 --> 00:15:16,990
Linux worlds in Moscone Center in San

00:15:14,790 --> 00:15:20,670
Francisco many years ago

00:15:16,990 --> 00:15:24,490
they are in the business of bringing

00:15:20,670 --> 00:15:25,899
electronics to places where electronics

00:15:24,490 --> 00:15:28,240
probably shouldn't even be or that

00:15:25,899 --> 00:15:31,540
shouldn't be but couldn't normally be

00:15:28,240 --> 00:15:34,209
because there's no electricity there no

00:15:31,540 --> 00:15:37,270
electricity no telephone no nothing and

00:15:34,209 --> 00:15:39,730
they bring telephony and electronics to

00:15:37,270 --> 00:15:41,290
these places they have satellite links

00:15:39,730 --> 00:15:45,130
to reach up to a satellite for the

00:15:41,290 --> 00:15:47,080
communications and they have some method

00:15:45,130 --> 00:15:49,690
of creating electricity whether it be a

00:15:47,080 --> 00:15:52,690
solar panel a wood or wheel or in this

00:15:49,690 --> 00:15:54,610
particular case a bicycle with an

00:15:52,690 --> 00:15:57,250
alternator on the back of the bicycle

00:15:54,610 --> 00:15:59,589
charging batteries interesting side

00:15:57,250 --> 00:16:02,200
story on this they would go into these

00:15:59,589 --> 00:16:04,180
villages in Africa and they would say

00:16:02,200 --> 00:16:06,459
okay here's the system what type of

00:16:04,180 --> 00:16:09,459
power source do you want a solar cell or

00:16:06,459 --> 00:16:11,740
a bicycle and the village chiefs would

00:16:09,459 --> 00:16:15,520
look at them and say we want the bicycle

00:16:11,740 --> 00:16:16,930
and Vinnie why the solar panels so easy

00:16:15,520 --> 00:16:19,870
it's just you got plenty of sunshine

00:16:16,930 --> 00:16:22,600
they say yes but when the solar panel

00:16:19,870 --> 00:16:25,630
breaks it's a long way to get one and

00:16:22,600 --> 00:16:28,240
number two it costs a lot of money which

00:16:25,630 --> 00:16:31,690
we don't have but we have lots of broken

00:16:28,240 --> 00:16:34,690
but trucks and lots of broken bicycles

00:16:31,690 --> 00:16:36,850
and so we can take that an alternator

00:16:34,690 --> 00:16:39,670
out of the broken truck and we can fix

00:16:36,850 --> 00:16:43,390
the broken bicycle to peddle but most

00:16:39,670 --> 00:16:47,290
importantly the bicycle creates a job

00:16:43,390 --> 00:16:49,270
for somebody pedaling it it shows a

00:16:47,290 --> 00:16:52,149
slight difference between their thought

00:16:49,270 --> 00:16:56,980
processes and Western thought processes

00:16:52,149 --> 00:16:58,720
and and some of these emerging I don't

00:16:56,980 --> 00:16:59,770
like the word third-world country so I

00:16:58,720 --> 00:17:02,410
don't like that phrase at all so I

00:16:59,770 --> 00:17:04,059
usually say emerging economies but in

00:17:02,410 --> 00:17:06,939
this case I will use third-world

00:17:04,059 --> 00:17:08,770
countries because another place they are

00:17:06,939 --> 00:17:11,040
very good it's like in disaster areas

00:17:08,770 --> 00:17:13,929
like New Orleans after Katrina

00:17:11,040 --> 00:17:16,089
third-world country fly in there

00:17:13,929 --> 00:17:18,370
telephony systems and created telephony

00:17:16,089 --> 00:17:20,170
system in cases of disaster and that's

00:17:18,370 --> 00:17:21,520
what a venir does and if you have if

00:17:20,170 --> 00:17:23,610
you're not familiar with them ger their

00:17:21,520 --> 00:17:26,559
website they've done some amazing stuff

00:17:23,610 --> 00:17:29,050
so they had this idea the besides for

00:17:26,559 --> 00:17:30,640
link being telephony systems in if they

00:17:29,050 --> 00:17:33,520
could bring in

00:17:30,640 --> 00:17:38,260
Micro data center that could run off a

00:17:33,520 --> 00:17:42,040
solar power and make it so efficient and

00:17:38,260 --> 00:17:45,400
so dependable that these people could

00:17:42,040 --> 00:17:48,970
now have greater communication and

00:17:45,400 --> 00:17:50,680
greater capability to run stuff so they

00:17:48,970 --> 00:17:53,140
create this contest to decide what they

00:17:50,680 --> 00:17:57,370
called the micro data center using up to

00:17:53,140 --> 00:18:02,200
15 small arm boards hooked together they

00:17:57,370 --> 00:18:07,600
have a 16 port gigabit switch and their

00:18:02,200 --> 00:18:10,450
10 SSD drives to hold data and then able

00:18:07,600 --> 00:18:13,030
to run off of either 12 or 24 volt solar

00:18:10,450 --> 00:18:15,550
panel being plugged into them they want

00:18:13,030 --> 00:18:17,980
to have a UPS built into the system in

00:18:15,550 --> 00:18:19,870
case the solar panel plug came unplugged

00:18:17,980 --> 00:18:22,780
or something like that the system itself

00:18:19,870 --> 00:18:25,330
would still be alive that the SSDs would

00:18:22,780 --> 00:18:27,100
have a chance to shut down normally they

00:18:25,330 --> 00:18:29,380
needed to have it passively cooled

00:18:27,100 --> 00:18:31,420
because as you know the fan is the first

00:18:29,380 --> 00:18:34,750
thing to go and particularly in a

00:18:31,420 --> 00:18:37,630
saltwater environment and they want it

00:18:34,750 --> 00:18:40,360
to be portable and manufacturable to

00:18:37,630 --> 00:18:42,070
have it at the lowest possible cost they

00:18:40,360 --> 00:18:44,110
want to have a Faraday cage because a

00:18:42,070 --> 00:18:47,020
lot of times these are used in telephony

00:18:44,110 --> 00:18:48,640
situation and telephone standards say

00:18:47,020 --> 00:18:52,180
you need to have stuff in Faraday cages

00:18:48,640 --> 00:18:55,900
and in their specifications they said we

00:18:52,180 --> 00:18:58,390
wanted to run a lamp stack now I looked

00:18:55,900 --> 00:19:00,940
at the lamp stack and thing from a

00:18:58,390 --> 00:19:02,290
computer science perspective I said what

00:19:00,940 --> 00:19:05,560
do you mean by that they didn't really

00:19:02,290 --> 00:19:07,830
have any good answer at a time it'll get

00:19:05,560 --> 00:19:10,270
a little bit more into that later on

00:19:07,830 --> 00:19:12,160
they separated the contest into two

00:19:10,270 --> 00:19:15,370
parts part one was developing the

00:19:12,160 --> 00:19:17,740
hardware and they they said you have to

00:19:15,370 --> 00:19:20,200
be teams of three to seven people we

00:19:17,740 --> 00:19:22,480
don't want individuals doing this but

00:19:20,200 --> 00:19:25,600
three to seven people in the team the

00:19:22,480 --> 00:19:29,410
prize was ten thousand US dollars for

00:19:25,600 --> 00:19:31,120
first prize and the sacrifice was up to

00:19:29,410 --> 00:19:34,540
seven for the seven people in the team

00:19:31,120 --> 00:19:36,730
Nexus 7 tablets now part of the

00:19:34,540 --> 00:19:39,550
specification was that everything which

00:19:36,730 --> 00:19:43,290
you donated everything which you had in

00:19:39,550 --> 00:19:46,170
your design had to be open

00:19:43,290 --> 00:19:48,240
so that they were free and anybody was

00:19:46,170 --> 00:19:49,950
free to take any of the designs and

00:19:48,240 --> 00:19:54,870
combine any of the components together

00:19:49,950 --> 00:19:57,180
into an overall uber design you can sign

00:19:54,870 --> 00:19:57,750
up this part of the contest is already

00:19:57,180 --> 00:20:00,180
over

00:19:57,750 --> 00:20:01,650
they haven't actually announced the they

00:20:00,180 --> 00:20:03,030
have announced the winner but they

00:20:01,650 --> 00:20:06,000
haven't actually put up the

00:20:03,030 --> 00:20:07,890
specifications for the winning prize

00:20:06,000 --> 00:20:11,040
we're expecting that to happen any

00:20:07,890 --> 00:20:14,040
moment I with a couple of other people

00:20:11,040 --> 00:20:17,490
did make an input to this we called it

00:20:14,040 --> 00:20:23,370
the pirata entry and we estimate its

00:20:17,490 --> 00:20:26,700
cost at $2,600 complete ups systems

00:20:23,370 --> 00:20:28,620
everything estimate and we think we

00:20:26,700 --> 00:20:32,730
could bring that down in manufacturing

00:20:28,620 --> 00:20:34,710
cost as far as the design of the box we

00:20:32,730 --> 00:20:38,340
had it designed to be very compact to

00:20:34,710 --> 00:20:41,600
fit in an overhead airplane cab dead you

00:20:38,340 --> 00:20:44,130
could carry it on as over as luggage and

00:20:41,600 --> 00:20:46,650
it was completely redundant the only

00:20:44,130 --> 00:20:49,980
thing that did fail that was singular to

00:20:46,650 --> 00:20:51,660
fail was the switch and because the

00:20:49,980 --> 00:20:54,270
manufacturer said there was typically a

00:20:51,660 --> 00:20:58,230
75 year mean time between failure and a

00:20:54,270 --> 00:21:00,510
switch we felt that that was okay we did

00:20:58,230 --> 00:21:02,790
have failover with Sadek between all the

00:21:00,510 --> 00:21:06,030
boards and we thought it was very good

00:21:02,790 --> 00:21:08,490
we placed nine I have the 50 different

00:21:06,030 --> 00:21:12,060
entries so I'm weeding to see what the

00:21:08,490 --> 00:21:14,310
upper eight entries look like so this is

00:21:12,060 --> 00:21:18,390
the next step for the contest and this

00:21:14,310 --> 00:21:19,890
is where debian comes in I'm coming here

00:21:18,390 --> 00:21:21,690
to tell you about this because I think

00:21:19,890 --> 00:21:23,670
that the people in this room and the

00:21:21,690 --> 00:21:26,340
people watching this video are probably

00:21:23,670 --> 00:21:28,650
the best people in the world to design

00:21:26,340 --> 00:21:32,460
the levels of software that would go

00:21:28,650 --> 00:21:34,530
into this system and you know we haven't

00:21:32,460 --> 00:21:36,960
they haven't defined what their needs

00:21:34,530 --> 00:21:39,330
are yet but I have to find a small list

00:21:36,960 --> 00:21:41,760
that I think should be they're easy to

00:21:39,330 --> 00:21:43,590
install and is to talk right after this

00:21:41,760 --> 00:21:45,600
that I'm going to hold round four that I

00:21:43,590 --> 00:21:47,760
think will help them with that almost

00:21:45,600 --> 00:21:49,830
easy to imagine notice I didn't say easy

00:21:47,760 --> 00:21:52,320
to manage because as we all know no

00:21:49,830 --> 00:21:54,090
software is easy to manage but if we can

00:21:52,320 --> 00:21:55,860
make it almost easy to manage that would

00:21:54,090 --> 00:21:57,299
be good because a lot of these units are

00:21:55,860 --> 00:21:59,309
going into places where they

00:21:57,299 --> 00:22:02,399
we don't have a lot of experience with

00:21:59,309 --> 00:22:04,190
computer science make it scalable so you

00:22:02,399 --> 00:22:07,499
can start off with maybe two or three

00:22:04,190 --> 00:22:10,139
processing units or your disk units and

00:22:07,499 --> 00:22:14,059
then go up from there high availability

00:22:10,139 --> 00:22:15,989
of course isn't is assisting and stable

00:22:14,059 --> 00:22:17,700
but we don't know

00:22:15,989 --> 00:22:19,679
and they haven't defined yet where we

00:22:17,700 --> 00:22:22,019
should think of this as a cloud type of

00:22:19,679 --> 00:22:24,929
device perhaps a local cloud device with

00:22:22,019 --> 00:22:26,669
you no further storage in some other

00:22:24,929 --> 00:22:28,499
clouds some other one is kind of a

00:22:26,669 --> 00:22:30,869
mirror site where I should be a

00:22:28,499 --> 00:22:32,249
client-server type of relationship or a

00:22:30,869 --> 00:22:33,769
high-performance computing type of

00:22:32,249 --> 00:22:36,690
relationship I don't know

00:22:33,769 --> 00:22:39,749
so for the people in the room you can

00:22:36,690 --> 00:22:42,210
start thinking about this and as they

00:22:39,749 --> 00:22:44,669
announce the contest you're welcome to

00:22:42,210 --> 00:22:46,559
join it and I think that we might be

00:22:44,669 --> 00:22:51,450
able to have a very good solution coming

00:22:46,559 --> 00:22:53,279
out with Debian that's the basis so that

00:22:51,450 --> 00:22:55,950
was the first contest and now I'm going

00:22:53,279 --> 00:22:59,899
to talk about a second contest yet

00:22:55,950 --> 00:23:02,850
another computer contest good new Linux

00:22:59,899 --> 00:23:06,899
if you think about it it's kind of like

00:23:02,850 --> 00:23:09,619
45 years old this started with Ken and

00:23:06,899 --> 00:23:13,230
Dennis sitting down at their pdp-7 and

00:23:09,619 --> 00:23:16,019
writing all of the kernel in machine

00:23:13,230 --> 00:23:18,179
language and in fact the entire

00:23:16,019 --> 00:23:21,179
operating system was written in machine

00:23:18,179 --> 00:23:23,820
language C hadn't been invented yet and

00:23:21,179 --> 00:23:25,799
then when a pdp-7 kind of ran out of

00:23:23,820 --> 00:23:28,440
steam in address space they bought a

00:23:25,799 --> 00:23:31,980
pdp-11 and wrote the entire kernel in

00:23:28,440 --> 00:23:34,350
machine language and after the second

00:23:31,980 --> 00:23:37,169
time Dennis said that's it I'm not doing

00:23:34,350 --> 00:23:39,529
this again and he invented C and then

00:23:37,169 --> 00:23:42,119
they wrote the entire kernel again in C

00:23:39,529 --> 00:23:43,769
and he said that's the last time we'll

00:23:42,119 --> 00:23:46,889
have to do that then they went over to

00:23:43,769 --> 00:23:48,090
an eight inner date at 8:32 and all of a

00:23:46,889 --> 00:23:49,529
sudden they realized oh this is a

00:23:48,090 --> 00:23:53,279
different architecture so we have to

00:23:49,529 --> 00:23:58,379
write the kernel again and you know the

00:23:53,279 --> 00:24:00,269
history but back in those times 64 K of

00:23:58,379 --> 00:24:04,139
memory was gigantic

00:24:00,269 --> 00:24:06,359
and therefore the program's a lot of the

00:24:04,139 --> 00:24:08,190
programs are written using dataflow type

00:24:06,359 --> 00:24:10,110
of techniques and things like that so

00:24:08,190 --> 00:24:11,640
the program and the memory

00:24:10,110 --> 00:24:14,790
and the operating system could fit into

00:24:11,640 --> 00:24:19,470
a certain type of space but things have

00:24:14,790 --> 00:24:23,610
changed no longer is memory $128,000 for

00:24:19,470 --> 00:24:27,780
64k as i one time paid but is now more

00:24:23,610 --> 00:24:30,929
like $10 for gigabyte or less that's not

00:24:27,780 --> 00:24:34,470
to excuse bloated code because as we all

00:24:30,929 --> 00:24:36,809
know the cool the cache of the cpu is

00:24:34,470 --> 00:24:39,570
still tends to be rather small if it's

00:24:36,809 --> 00:24:42,030
there at all but you know then there's

00:24:39,570 --> 00:24:46,710
multiple levels of cache that's also

00:24:42,030 --> 00:24:48,660
thing CPUs are multi-core and even then

00:24:46,710 --> 00:24:51,799
we may have multiple CPUs that are

00:24:48,660 --> 00:24:54,750
multi-core on the same board and

00:24:51,799 --> 00:24:57,660
algorithms have changed and become more

00:24:54,750 --> 00:25:00,000
prevalent and algorithms have become

00:24:57,660 --> 00:25:04,590
more acceptable because the memory sizes

00:25:00,000 --> 00:25:08,160
become larger back in the day pipelining

00:25:04,590 --> 00:25:11,460
was something you did in plumbing not in

00:25:08,160 --> 00:25:12,840
electronics and cache was something that

00:25:11,460 --> 00:25:16,140
you put in your pocket on your way to

00:25:12,840 --> 00:25:18,600
the bank okay but both of these things

00:25:16,140 --> 00:25:20,520
are now prevalent simply because he

00:25:18,600 --> 00:25:22,970
electronics had become cheap enough to

00:25:20,520 --> 00:25:25,740
allow them to become prevalent I

00:25:22,970 --> 00:25:28,710
remember when the new compilers produce

00:25:25,740 --> 00:25:32,490
code that was 30% less efficient than

00:25:28,710 --> 00:25:35,130
commercial compilers and today a lot of

00:25:32,490 --> 00:25:37,470
the canoe compilers are toe-to-toe with

00:25:35,130 --> 00:25:40,860
commercial compilers in terms of

00:25:37,470 --> 00:25:45,330
efficiency and and we also have other

00:25:40,860 --> 00:25:49,160
free compilers available so and the need

00:25:45,330 --> 00:25:52,080
for assembly language has decreased and

00:25:49,160 --> 00:25:54,049
sometimes it's actually detrimental to

00:25:52,080 --> 00:25:56,669
have assembly language in your code

00:25:54,049 --> 00:25:58,890
particularly inline assembly language

00:25:56,669 --> 00:26:00,540
that throws off the optimization

00:25:58,890 --> 00:26:05,250
techniques that the compiler has been

00:26:00,540 --> 00:26:07,950
generating up until that point so we're

00:26:05,250 --> 00:26:10,169
announcing the mad dog and Linares canoe

00:26:07,950 --> 00:26:13,260
linux optimization program now I don't

00:26:10,169 --> 00:26:15,929
have any type of fancy name for that

00:26:13,260 --> 00:26:19,559
other than that but what we did in fact

00:26:15,929 --> 00:26:23,410
Steve sitting here in the front row went

00:26:19,559 --> 00:26:26,220
through the code in Debian and

00:26:23,410 --> 00:26:30,730
in fedora and found out that there were

00:26:26,220 --> 00:26:32,560
1400 different modules in there that had

00:26:30,730 --> 00:26:34,060
arms that each you big code in it or

00:26:32,560 --> 00:26:37,360
assembly language code in it and

00:26:34,060 --> 00:26:41,620
therefore were not portable to arm 64

00:26:37,360 --> 00:26:44,680
and that of course is a problem because

00:26:41,620 --> 00:26:47,700
I'm going to bring out their arm 64 chip

00:26:44,680 --> 00:26:51,490
said and they wanted to be able to have

00:26:47,700 --> 00:26:54,240
Linux running on it but I just came

00:26:51,490 --> 00:26:57,400
along and looked at this I said you know

00:26:54,240 --> 00:26:59,830
there's also an issue of performance on

00:26:57,400 --> 00:27:01,690
this and maybe we should be looking at

00:26:59,830 --> 00:27:05,170
these pieces of code and not just

00:27:01,690 --> 00:27:08,680
porting them but also spending some time

00:27:05,170 --> 00:27:11,380
to do some optimization and so the goals

00:27:08,680 --> 00:27:14,010
of the contests are number one to make

00:27:11,380 --> 00:27:18,340
sure that all these modules do work on

00:27:14,010 --> 00:27:20,020
64-bit arm compile and test them

00:27:18,340 --> 00:27:24,250
sometimes it's just a matter of testing

00:27:20,020 --> 00:27:27,550
them now the Debian has a an actual

00:27:24,250 --> 00:27:30,580
distribution Jessie that that formally

00:27:27,550 --> 00:27:33,790
supports arm 64 it may be that people

00:27:30,580 --> 00:27:37,570
can just take and test the code check it

00:27:33,790 --> 00:27:40,030
off and say yes it works or we find that

00:27:37,570 --> 00:27:42,940
it doesn't work then the people have to

00:27:40,030 --> 00:27:44,350
go upstream to the upstream people that

00:27:42,940 --> 00:27:47,230
haven't you know where it has it gotten

00:27:44,350 --> 00:27:49,150
into the package yet and say does are

00:27:47,230 --> 00:27:50,890
you working on this and if not if that

00:27:49,150 --> 00:27:53,350
doesn't work well then they would put a

00:27:50,890 --> 00:27:55,840
bug entry into the bug tracking system

00:27:53,350 --> 00:27:59,830
of the project and say your code needs

00:27:55,840 --> 00:28:02,260
to work on arm 64 and then they can go

00:27:59,830 --> 00:28:05,310
in and perhaps do to work themselves and

00:28:02,260 --> 00:28:08,440
submit the patch the upstream developers

00:28:05,310 --> 00:28:11,530
but besides all of that to take a look

00:28:08,440 --> 00:28:14,620
at some of these packages and say can I

00:28:11,530 --> 00:28:17,740
improve the performance of them can I

00:28:14,620 --> 00:28:21,670
spend some time in the interesting thing

00:28:17,740 --> 00:28:24,520
too is the performance is not just in

00:28:21,670 --> 00:28:27,610
the speed of the application we'll get

00:28:24,520 --> 00:28:29,290
to that in a moment and then to take all

00:28:27,610 --> 00:28:32,530
the information that we learn from these

00:28:29,290 --> 00:28:34,830
performance improvements and try and

00:28:32,530 --> 00:28:37,870
create a course where we could teach

00:28:34,830 --> 00:28:41,059
performance program

00:28:37,870 --> 00:28:43,400
now what did I mean by that well in the

00:28:41,059 --> 00:28:45,700
old days performance was you plugged

00:28:43,400 --> 00:28:49,909
your computer system into the wall and

00:28:45,700 --> 00:28:53,179
how fast is your program run and today

00:28:49,909 --> 00:28:56,419
performance is measured by in some cases

00:28:53,179 --> 00:28:58,789
how long does my battery last and it's

00:28:56,419 --> 00:29:01,820
not just about phones but it's things

00:28:58,789 --> 00:29:05,270
like if your Google and you have a

00:29:01,820 --> 00:29:08,000
server farm does this mean that you can

00:29:05,270 --> 00:29:11,210
only buy you only have to buy 9000

00:29:08,000 --> 00:29:14,150
servers instead of 10,000 servers that

00:29:11,210 --> 00:29:16,220
you only use 900 megawatts of

00:29:14,150 --> 00:29:19,880
electricity instead of a gigawatt of

00:29:16,220 --> 00:29:23,780
electricity that's what performance and

00:29:19,880 --> 00:29:25,460
efficiency means today and so the

00:29:23,780 --> 00:29:27,620
categories of performance that we would

00:29:25,460 --> 00:29:30,470
like to measure our memory utilization

00:29:27,620 --> 00:29:32,419
you may be going still going into an

00:29:30,470 --> 00:29:35,059
embedded system where you don't have 16

00:29:32,419 --> 00:29:37,700
gigabytes of RAM or 32 gigabytes of RAM

00:29:35,059 --> 00:29:42,950
but instead you have half a gigabyte of

00:29:37,700 --> 00:29:45,590
RAM or less cache utilization a friend

00:29:42,950 --> 00:29:47,600
of mine named David Moss Berger Tang did

00:29:45,590 --> 00:29:51,230
an experiment with the alpha processor

00:29:47,600 --> 00:29:52,990
he took two large arrays and multiplied

00:29:51,230 --> 00:29:54,770
them together uses the same

00:29:52,990 --> 00:29:58,880
multiplication techniques you would

00:29:54,770 --> 00:30:01,669
learned in algebra he then inverted the

00:29:58,880 --> 00:30:04,130
second array did the multiplication and

00:30:01,669 --> 00:30:07,309
inverted the answer which gave you the

00:30:04,130 --> 00:30:10,490
same result but because the second array

00:30:07,309 --> 00:30:13,700
was inverted it meant that every single

00:30:10,490 --> 00:30:17,330
access of the data tended to access it

00:30:13,700 --> 00:30:21,370
in cash the first method meant that

00:30:17,330 --> 00:30:24,320
almost every access was a cache miss and

00:30:21,370 --> 00:30:28,820
therefore the second technique ran 40

00:30:24,320 --> 00:30:31,460
times faster than the first one or

00:30:28,820 --> 00:30:34,520
looking at it another way it operated in

00:30:31,460 --> 00:30:38,900
140th of the time now these were very

00:30:34,520 --> 00:30:44,270
large arrays obviously but he dealt with

00:30:38,900 --> 00:30:47,120
very large problems so and another thing

00:30:44,270 --> 00:30:49,700
that Steve found was that a lot of

00:30:47,120 --> 00:30:52,600
different places the same code

00:30:49,700 --> 00:30:55,130
have been cut and pasted or copied and

00:30:52,600 --> 00:30:57,409
maybe this is something that we should

00:30:55,130 --> 00:31:00,409
go back into the compilers to say let's

00:30:57,409 --> 00:31:02,750
create a compiler intrinsic so that

00:31:00,409 --> 00:31:05,870
instead of cutting and pasting this code

00:31:02,750 --> 00:31:08,210
when there is an improvement we make an

00:31:05,870 --> 00:31:10,700
improvement to the compiler and it

00:31:08,210 --> 00:31:13,639
improves every place on the next

00:31:10,700 --> 00:31:16,700
compilation and there may be more

00:31:13,639 --> 00:31:21,409
categories of performance that we can be

00:31:16,700 --> 00:31:24,169
looking at so we have some suggested

00:31:21,409 --> 00:31:26,899
prizes for this they're not huge prizes

00:31:24,169 --> 00:31:30,740
like a notebook from HP or something

00:31:26,899 --> 00:31:32,330
like that but when you when you sign up

00:31:30,740 --> 00:31:35,149
for the contest when you go to the

00:31:32,330 --> 00:31:40,070
Linares site and you sign up and you do

00:31:35,149 --> 00:31:43,779
one port or you test one program and say

00:31:40,070 --> 00:31:48,320
yes this works then you get a fantastic

00:31:43,779 --> 00:31:50,750
Glen Aero golf shirt and you also get 20

00:31:48,320 --> 00:31:54,110
points and I'll talk more about the 20

00:31:50,750 --> 00:31:56,480
points later on the next thing you get

00:31:54,110 --> 00:31:59,840
is you get your name entered into a

00:31:56,480 --> 00:32:02,929
contest and that contest is for you to

00:31:59,840 --> 00:32:07,519
win a free all-expense-paid trip to

00:32:02,929 --> 00:32:10,250
connect now what is connect Connect is a

00:32:07,519 --> 00:32:12,409
meeting held twice a year where all of

00:32:10,250 --> 00:32:14,330
the llanera engineers come to this

00:32:12,409 --> 00:32:17,330
meeting from all over the world from all

00:32:14,330 --> 00:32:19,970
of Linares companies member companies

00:32:17,330 --> 00:32:22,399
and they talk about the projects they're

00:32:19,970 --> 00:32:26,929
working on face to face it's like a Deb

00:32:22,399 --> 00:32:33,080
calm but we hold it in a really nice

00:32:26,929 --> 00:32:35,990
hotel with really good food and a lot of

00:32:33,080 --> 00:32:38,870
beer and I think you could look at both

00:32:35,990 --> 00:32:42,529
Steve and myself and realize that we

00:32:38,870 --> 00:32:46,309
like good food and good beer okay and we

00:32:42,529 --> 00:32:48,500
typically have nice events to go to for

00:32:46,309 --> 00:32:51,980
example one year we had it in Dublin and

00:32:48,500 --> 00:32:54,850
we went to the Guinness brewery for a

00:32:51,980 --> 00:32:54,850
long time

00:32:54,960 --> 00:33:01,110
and one year it was held in Hong Kong

00:32:57,600 --> 00:33:03,810
and we you know it's very very nice city

00:33:01,110 --> 00:33:06,390
and we have these you know day trips and

00:33:03,810 --> 00:33:08,610
stuff this year coming up is one in

00:33:06,390 --> 00:33:10,830
Burlington California a lot of people go

00:33:08,610 --> 00:33:12,840
oh it's just probably today but we're

00:33:10,830 --> 00:33:14,550
gonna go to the computer museum and have

00:33:12,840 --> 00:33:18,780
a nice reception there as far as the

00:33:14,550 --> 00:33:21,570
narrows fifth anniversary the one after

00:33:18,780 --> 00:33:23,280
that is going to be in Bangkok now for

00:33:21,570 --> 00:33:25,110
those of you who live in Bangkok maybe

00:33:23,280 --> 00:33:26,670
that's not such a great trip but you

00:33:25,110 --> 00:33:29,120
know you might be able to come to you

00:33:26,670 --> 00:33:32,370
the USA or Europe in a future connect

00:33:29,120 --> 00:33:34,200
you would get the ability to come to

00:33:32,370 --> 00:33:36,560
connect to spend a week there talking

00:33:34,200 --> 00:33:42,120
with the engineers and things like that

00:33:36,560 --> 00:33:44,160
now the final thing oh and so if that's

00:33:42,120 --> 00:33:47,010
if you do one port you get your name put

00:33:44,160 --> 00:33:49,860
into the pool you do two ports you get

00:33:47,010 --> 00:33:51,450
your name put in twice three ports you

00:33:49,860 --> 00:33:56,340
get your name but it's so if you put ten

00:33:51,450 --> 00:33:59,400
ports in you have a 1 and 140 chance of

00:33:56,340 --> 00:34:02,160
going to connect still doesn't sound

00:33:59,400 --> 00:34:05,700
like that great of a deal but your name

00:34:02,160 --> 00:34:09,750
stays in the pool and we do that connect

00:34:05,700 --> 00:34:12,030
we do that drawing twice a year so if

00:34:09,750 --> 00:34:13,170
the contest goes for four years I'll get

00:34:12,030 --> 00:34:18,120
at the moment it's the length of the

00:34:13,170 --> 00:34:22,440
contest then you have four times that

00:34:18,120 --> 00:34:26,130
you know 10 ports so 40 chances out of

00:34:22,440 --> 00:34:27,060
1,400 to go to connect so amounts up

00:34:26,130 --> 00:34:30,810
it's better than being struck by

00:34:27,060 --> 00:34:33,390
lightning or winning the lottery finally

00:34:30,810 --> 00:34:37,320
you get an accumulation of 20 points

00:34:33,390 --> 00:34:39,030
towards a goal and part of that goal is

00:34:37,320 --> 00:34:41,460
to win one of these little arm

00:34:39,030 --> 00:34:44,480
development systems from a from a

00:34:41,460 --> 00:34:47,720
program we call the 96 board's program

00:34:44,480 --> 00:34:51,210
Allen arrow notice that a lot of the

00:34:47,720 --> 00:34:53,700
64-bit ARM chips came aboard so were

00:34:51,210 --> 00:34:57,870
relatively expensive for developers to

00:34:53,700 --> 00:35:00,000
get some boards may cost $600 in this

00:34:57,870 --> 00:35:00,750
kind of you know out of this realm for

00:35:00,000 --> 00:35:04,410
hobbyist

00:35:00,750 --> 00:35:06,090
but they came up with a program to make

00:35:04,410 --> 00:35:08,760
a bunch of serious little boys and this

00:35:06,090 --> 00:35:11,070
is one of them they're all the same

00:35:08,760 --> 00:35:12,630
sighs and they all have the connectors

00:35:11,070 --> 00:35:14,610
in about the same place they all have

00:35:12,630 --> 00:35:16,760
the same type of mounting holes and he

00:35:14,610 --> 00:35:21,390
gives a space in the middle of the board

00:35:16,760 --> 00:35:24,570
for our four Linares customers to be

00:35:21,390 --> 00:35:27,210
able to put this system on a chips so

00:35:24,570 --> 00:35:29,730
that they can then innovate with these

00:35:27,210 --> 00:35:33,720
and hand them out the developers at a

00:35:29,730 --> 00:35:35,670
relatively low price as I said the goal

00:35:33,720 --> 00:35:37,560
for this type of a board which we call

00:35:35,670 --> 00:35:39,210
the consumer a developer board is that

00:35:37,560 --> 00:35:41,600
it would cost less than a hundred

00:35:39,210 --> 00:35:45,600
dollars for either a 64-bit or 32-bit

00:35:41,600 --> 00:35:47,790
system we have another size board which

00:35:45,600 --> 00:35:49,590
is more stuff on it called the

00:35:47,790 --> 00:35:52,530
enterprise board which is more for

00:35:49,590 --> 00:35:54,390
servers and things like routers and

00:35:52,530 --> 00:35:57,840
things like that though it has a goal of

00:35:54,390 --> 00:36:00,450
having it under 300 US dollars but it

00:35:57,840 --> 00:36:03,720
would have more memory more controllers

00:36:00,450 --> 00:36:05,220
things like that now the side effects of

00:36:03,720 --> 00:36:08,430
the oh or it should go back to this for

00:36:05,220 --> 00:36:11,130
a moment each one of these boards is

00:36:08,430 --> 00:36:12,810
going to have a certain cost but every

00:36:11,130 --> 00:36:16,140
time you do a port or you do a

00:36:12,810 --> 00:36:18,240
performance enhancement you'll get $20

00:36:16,140 --> 00:36:22,320
towards the cost of buying one of these

00:36:18,240 --> 00:36:25,170
boards and so if you do five ports you

00:36:22,320 --> 00:36:27,000
will get the choice of choosing one of

00:36:25,170 --> 00:36:29,400
these two boards the bottom board is one

00:36:27,000 --> 00:36:35,070
from Broadcom which has a Snapdragon

00:36:29,400 --> 00:36:37,110
chip on it it's also a 64-bit chip so

00:36:35,070 --> 00:36:39,180
you get a chance of choosing one of the

00:36:37,110 --> 00:36:41,040
boards and it'll be more boards later on

00:36:39,180 --> 00:36:44,580
you'll be able to assign your points to

00:36:41,040 --> 00:36:46,500
whatever board you want now the side

00:36:44,580 --> 00:36:49,370
effects of all of this is that you learn

00:36:46,500 --> 00:36:51,840
a really cool assembly language or not

00:36:49,370 --> 00:36:54,000
you really don't have to learn arm9

00:36:51,840 --> 00:36:56,160
assembly language if what you do is you

00:36:54,000 --> 00:36:58,920
eliminate the assembly language which is

00:36:56,160 --> 00:37:01,020
in the code if you say I'm going to do

00:36:58,920 --> 00:37:03,300
this only with an upper level language

00:37:01,020 --> 00:37:06,210
I'm going to let the compiler do this

00:37:03,300 --> 00:37:08,970
work and you eliminate the assembly

00:37:06,210 --> 00:37:12,800
language then you really don't have to

00:37:08,970 --> 00:37:15,930
learn the assembly language of arm 64

00:37:12,800 --> 00:37:18,990
you'll learn some maybe learn some code

00:37:15,930 --> 00:37:20,760
analysis techniques I'm sure a lot of

00:37:18,990 --> 00:37:22,289
people in the room already know these

00:37:20,760 --> 00:37:23,729
type of things but

00:37:22,289 --> 00:37:26,729
again a lot of this is aimed towards

00:37:23,729 --> 00:37:29,069
University students and we hope that

00:37:26,729 --> 00:37:31,650
college professors and we have had

00:37:29,069 --> 00:37:33,869
college professors actually use this

00:37:31,650 --> 00:37:36,299
program to teach the students

00:37:33,869 --> 00:37:37,579
programming efficiency and assembly

00:37:36,299 --> 00:37:40,439
language and computer architecture

00:37:37,579 --> 00:37:44,249
trying to make these programs be more

00:37:40,439 --> 00:37:48,419
efficient if what you're doing is what

00:37:44,249 --> 00:37:52,529
to fast if what you're doing is how do

00:37:48,419 --> 00:37:54,479
they do that sorry about that if what

00:37:52,529 --> 00:37:58,079
you're doing is just the assembly

00:37:54,479 --> 00:38:00,660
language port then our needs of this are

00:37:58,079 --> 00:38:02,130
very simple is that you tell us what you

00:38:00,660 --> 00:38:04,619
did to create the passage Jewess

00:38:02,130 --> 00:38:06,329
eliminate the assembly language what

00:38:04,619 --> 00:38:09,359
versions of the compiler know West is

00:38:06,329 --> 00:38:10,619
used for testing things like that if

00:38:09,359 --> 00:38:12,239
you're doing performance we're going to

00:38:10,619 --> 00:38:14,400
ask you to give us a little bit more

00:38:12,239 --> 00:38:16,469
information what was the performance of

00:38:14,400 --> 00:38:18,419
the application ahead of time how did

00:38:16,469 --> 00:38:20,130
you do the testing and was the

00:38:18,419 --> 00:38:23,069
performance levels of the application

00:38:20,130 --> 00:38:26,269
afterwards and there's yet another prize

00:38:23,069 --> 00:38:28,769
for the best performance in any given

00:38:26,269 --> 00:38:32,549
connected segment the person who gets

00:38:28,769 --> 00:38:35,880
the best performance ratio increase will

00:38:32,549 --> 00:38:40,049
automatically get a trip to connect we

00:38:35,880 --> 00:38:44,309
would ask that you automatic induct

00:38:40,049 --> 00:38:46,140
engineers as the work you did we have

00:38:44,309 --> 00:38:49,890
lots of resources and we keep building

00:38:46,140 --> 00:38:51,779
on different books on different pilers

00:38:49,890 --> 00:38:54,119
and the way they work and optimization

00:38:51,779 --> 00:38:57,390
techniques an arm assembly language and

00:38:54,119 --> 00:38:59,939
a timeframe of this is immediately it's

00:38:57,390 --> 00:39:03,630
actually been going on for about a year

00:38:59,939 --> 00:39:07,439
now and we're looking for a university

00:39:03,630 --> 00:39:10,259
to be a home to this course that we feed

00:39:07,439 --> 00:39:11,819
this information to them and they build

00:39:10,259 --> 00:39:14,459
up this course and then make the course

00:39:11,819 --> 00:39:17,759
open to other universities to share the

00:39:14,459 --> 00:39:20,009
information so what should you do now go

00:39:17,759 --> 00:39:23,459
to the site performance that'll narrow

00:39:20,009 --> 00:39:25,529
dot-org you can read the information

00:39:23,459 --> 00:39:29,519
about the contest if you decide to

00:39:25,529 --> 00:39:31,380
participate you can then log in and type

00:39:29,519 --> 00:39:34,510
in some information which we only need

00:39:31,380 --> 00:39:39,820
to be able to ship you your t-shirts and

00:39:34,510 --> 00:39:42,280
and systems and stuff like that choose

00:39:39,820 --> 00:39:44,859
one of the modules to work one now once

00:39:42,280 --> 00:39:47,380
you've chosen that module it belongs to

00:39:44,859 --> 00:39:49,390
you nobody else can choose that module

00:39:47,380 --> 00:39:50,440
you choose the module belongs to you you

00:39:49,390 --> 00:39:53,980
start working on it

00:39:50,440 --> 00:39:56,080
if you finish porting you go back to the

00:39:53,980 --> 00:39:57,850
site you marked it as ported if you

00:39:56,080 --> 00:39:59,590
decide to increase the performance you

00:39:57,850 --> 00:40:01,450
go back to the site choose it for

00:39:59,590 --> 00:40:05,020
performance improvement market has

00:40:01,450 --> 00:40:07,570
improved if you decide no I don't have

00:40:05,020 --> 00:40:09,820
time for this then fine go back to the

00:40:07,570 --> 00:40:13,900
site release the module so somebody else

00:40:09,820 --> 00:40:16,600
can get it that's perfectly okay because

00:40:13,900 --> 00:40:18,580
it's only recently that these boards

00:40:16,600 --> 00:40:21,970
have become available we've been

00:40:18,580 --> 00:40:24,460
advocating to people use QEMU to do the

00:40:21,970 --> 00:40:27,130
porting it's obviously a little bit

00:40:24,460 --> 00:40:30,940
harder to use QEMU to do performance

00:40:27,130 --> 00:40:33,490
work however since we're also advocating

00:40:30,940 --> 00:40:35,920
getting rid of the assembly language you

00:40:33,490 --> 00:40:39,100
could do the performance work on almost

00:40:35,920 --> 00:40:42,160
any other matching type of hardware such

00:40:39,100 --> 00:40:44,590
as Intel 64 and if you get the

00:40:42,160 --> 00:40:49,000
performance out of that we can apply

00:40:44,590 --> 00:40:51,100
that to arm 64 and then you pick the

00:40:49,000 --> 00:40:53,050
module to investigate reporting your

00:40:51,100 --> 00:40:55,450
performance with that it's the end of my

00:40:53,050 --> 00:40:57,040
talk if you have any questions I'll be

00:40:55,450 --> 00:40:58,990
around for the rest of the week I am

00:40:57,040 --> 00:41:01,990
leaving on Friday to go to a different

00:40:58,990 --> 00:41:04,300
conference but there's my email address

00:41:01,990 --> 00:41:06,650
and there's the address of the site

00:41:04,300 --> 00:41:15,770
again thank you very much

00:41:06,650 --> 00:41:18,180
[Applause]

00:41:15,770 --> 00:41:24,150
do we have any questions right now I may

00:41:18,180 --> 00:41:26,510
have a minute or two okay

00:41:24,150 --> 00:41:26,510
thank you

00:41:26,530 --> 00:41:34,049

YouTube URL: https://www.youtube.com/watch?v=UuSptRnCg-Q


