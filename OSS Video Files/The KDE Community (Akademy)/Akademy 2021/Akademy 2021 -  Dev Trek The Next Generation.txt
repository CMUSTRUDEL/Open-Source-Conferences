Title: Akademy 2021 -  Dev Trek The Next Generation
Publication date: 2021-06-28
Playlist: Akademy 2021
Description: 
	By Igor Ljubuncic
Snaps, the final frontier. These are the voyages of the OSS Snapcraft. Its mission: to help developers create applications easily, to simplify distribution and packaging, to improve security and updates, to boldly run where no one has run before.

Self-container applications, with reliable updates and behavior across a wide range of distributions, a friendly store, tons of users. We'd like to invite you to a presentation about snaps, the new software packaging mechanism, designed to make life easier, both for developers and users. In this session, we will show you the nuts and bolts of snaps, the snapcraft command-line tool, the surrounding ecosystem, and take you on a journey of discovery and productivity.

Engage.
Captions: 
	00:00:01,140 --> 00:00:08,620
[Music]

00:00:10,320 --> 00:00:16,080
hello everyone i hope you're enjoying

00:00:13,040 --> 00:00:17,760
academy and i'd like to entertain you

00:00:16,080 --> 00:00:19,279
for the coming 40 minutes

00:00:17,760 --> 00:00:20,960
and hopefully you will also learn

00:00:19,279 --> 00:00:22,960
something new and useful

00:00:20,960 --> 00:00:24,160
for your professional work like to talk

00:00:22,960 --> 00:00:26,880
to you about snaps

00:00:24,160 --> 00:00:27,920
a uh packaging mechanism and a hot new

00:00:26,880 --> 00:00:32,399
thing

00:00:27,920 --> 00:00:33,760
in the linux world well reasonably

00:00:32,399 --> 00:00:35,920
i hope you appreciate the first slide

00:00:33,760 --> 00:00:35,920
though

00:00:36,719 --> 00:00:40,879
okay a bit about myself i'm a developer

00:00:39,680 --> 00:00:43,120
advocate

00:00:40,879 --> 00:00:45,200
at canonical i work on the snap slash

00:00:43,120 --> 00:00:47,760
snapcraft advocacy team

00:00:45,200 --> 00:00:48,239
um my job is to bridge the relation

00:00:47,760 --> 00:00:50,480
between

00:00:48,239 --> 00:00:52,160
developers outside of canonical and

00:00:50,480 --> 00:00:55,440
within canonical to make sure that

00:00:52,160 --> 00:00:58,079
together we can have a better

00:00:55,440 --> 00:00:59,359
development developer experience on all

00:00:58,079 --> 00:01:01,199
levels

00:00:59,359 --> 00:01:03,120
your ideas and ideas that we have in

00:01:01,199 --> 00:01:05,439
canonical make sure that

00:01:03,120 --> 00:01:06,799
everyone gets the best experience i'm a

00:01:05,439 --> 00:01:09,439
physicist by vocation

00:01:06,799 --> 00:01:11,280
but linux is has been my passion hobby

00:01:09,439 --> 00:01:12,960
for the last 15-20 years

00:01:11,280 --> 00:01:14,880
and i made it into a career at some

00:01:12,960 --> 00:01:16,880
point i like to write books

00:01:14,880 --> 00:01:18,000
and in free time and especially when

00:01:16,880 --> 00:01:21,119
there's no corona

00:01:18,000 --> 00:01:23,360
i like to go to uh racetrack days around

00:01:21,119 --> 00:01:27,439
the world

00:01:23,360 --> 00:01:28,159
so next slide okay today i want to talk

00:01:27,439 --> 00:01:29,759
to you about

00:01:28,159 --> 00:01:31,520
snaps and tell you a little bit more

00:01:29,759 --> 00:01:34,880
about what they are

00:01:31,520 --> 00:01:36,320
what they do what they're good for and

00:01:34,880 --> 00:01:38,159
how you can apply them in your

00:01:36,320 --> 00:01:40,000
day-to-day development work

00:01:38,159 --> 00:01:41,680
if you're packaging applications if

00:01:40,000 --> 00:01:44,079
you're a user of different

00:01:41,680 --> 00:01:44,960
applications where snaps can fit in that

00:01:44,079 --> 00:01:46,479
picture

00:01:44,960 --> 00:01:48,799
i'll give you an overview of the

00:01:46,479 --> 00:01:50,640
architecture of the syntax

00:01:48,799 --> 00:01:51,840
and how you can publish snaps in the

00:01:50,640 --> 00:01:54,240
snapstore

00:01:51,840 --> 00:01:56,240
this will be a very quick overview so

00:01:54,240 --> 00:01:57,439
some things or topics may look a bit

00:01:56,240 --> 00:01:59,920
weird or

00:01:57,439 --> 00:02:01,520
not deep enough don't worry if you have

00:01:59,920 --> 00:02:03,360
any questions you can reach out to me by

00:02:01,520 --> 00:02:04,159
email which will be on the last slide of

00:02:03,360 --> 00:02:06,719
this

00:02:04,159 --> 00:02:09,440
presentation and we can follow up with

00:02:06,719 --> 00:02:11,280
any questions you have

00:02:09,440 --> 00:02:12,800
i can't see you and i can hear your

00:02:11,280 --> 00:02:13,920
feedback at the moment but

00:02:12,800 --> 00:02:15,680
i hope you will appreciate the

00:02:13,920 --> 00:02:16,000
occasional like joke here and there on

00:02:15,680 --> 00:02:19,520
this

00:02:16,000 --> 00:02:23,440
in that slide so let's start with

00:02:19,520 --> 00:02:27,200
the definition what are snaps

00:02:23,440 --> 00:02:29,520
snaps are self-contained applications

00:02:27,200 --> 00:02:31,760
archives applications packaged in with

00:02:29,520 --> 00:02:34,000
the with the idea to be secure

00:02:31,760 --> 00:02:36,239
and portable if you're familiar with

00:02:34,000 --> 00:02:38,400
linux and you've used linux and

00:02:36,239 --> 00:02:40,080
deployed software in linux you then know

00:02:38,400 --> 00:02:42,080
that it's not always

00:02:40,080 --> 00:02:43,200
trivial there's a relatively low

00:02:42,080 --> 00:02:44,640
portability of

00:02:43,200 --> 00:02:46,400
applications between different

00:02:44,640 --> 00:02:47,840
distributions and even distribution

00:02:46,400 --> 00:02:51,120
releases

00:02:47,840 --> 00:02:53,519
and to solve that problem snaps come in

00:02:51,120 --> 00:02:54,480
with a mechanism of self self

00:02:53,519 --> 00:02:57,280
containment

00:02:54,480 --> 00:02:57,680
meaning the application and the relevant

00:02:57,280 --> 00:02:59,760
uh

00:02:57,680 --> 00:03:01,760
dependencies are all bundled in one

00:02:59,760 --> 00:03:02,879
archive and you can deploy them on any

00:03:01,760 --> 00:03:05,519
system that supports

00:03:02,879 --> 00:03:06,640
snaps or the snapd service if you will

00:03:05,519 --> 00:03:08,159
and if it runs

00:03:06,640 --> 00:03:09,840
then it should run reliably even

00:03:08,159 --> 00:03:12,080
consistently on all those

00:03:09,840 --> 00:03:13,440
different distributions today the list

00:03:12,080 --> 00:03:15,440
runs more than

00:03:13,440 --> 00:03:18,800
more than 40 different distributions

00:03:15,440 --> 00:03:21,840
ubuntu family debian fedora rel sles

00:03:18,800 --> 00:03:25,920
manjaro arch and so forth

00:03:21,840 --> 00:03:28,000
and then beyond that apart from the

00:03:25,920 --> 00:03:29,360
runtime there's also the packaging of

00:03:28,000 --> 00:03:32,560
applications

00:03:29,360 --> 00:03:34,480
again here idea is to provide a useful

00:03:32,560 --> 00:03:36,080
practical and a relatively simple

00:03:34,480 --> 00:03:36,959
mechanism for people to publish their

00:03:36,080 --> 00:03:39,840
snaps

00:03:36,959 --> 00:03:41,360
and finally their security which is also

00:03:39,840 --> 00:03:42,879
important go side by side with

00:03:41,360 --> 00:03:46,400
functionality

00:03:42,879 --> 00:03:46,959
and one of the advantages is of snaps is

00:03:46,400 --> 00:03:50,159
that

00:03:46,959 --> 00:03:51,280
there are atomic reliable transactional

00:03:50,159 --> 00:03:53,120
updates provided

00:03:51,280 --> 00:03:54,799
with with the with with the packaging

00:03:53,120 --> 00:03:57,200
mechanism side by side

00:03:54,799 --> 00:03:58,239
so that end users will always have the

00:03:57,200 --> 00:04:00,959
latest and greatest

00:03:58,239 --> 00:04:01,599
uh available to them for use we'll touch

00:04:00,959 --> 00:04:04,560
about this

00:04:01,599 --> 00:04:04,560
a little bit later on

00:04:04,959 --> 00:04:08,640
going back to the traditional linux

00:04:06,720 --> 00:04:11,680
software delivery mechanisms

00:04:08,640 --> 00:04:14,319
uh if it's not all

00:04:11,680 --> 00:04:15,280
it's not always been an easy easy story

00:04:14,319 --> 00:04:18,400
going back the last

00:04:15,280 --> 00:04:20,320
20 25 years if you want to package and

00:04:18,400 --> 00:04:21,280
publish your application across multiple

00:04:20,320 --> 00:04:23,680
distributions

00:04:21,280 --> 00:04:26,160
you do need some familiarity of linux

00:04:23,680 --> 00:04:27,840
internals and how things work

00:04:26,160 --> 00:04:30,240
it the simple reality is that the

00:04:27,840 --> 00:04:30,960
application space and the system space

00:04:30,240 --> 00:04:33,440
are not

00:04:30,960 --> 00:04:36,000
uh easily decoupled there's some level

00:04:33,440 --> 00:04:39,280
of intermixing interdependency

00:04:36,000 --> 00:04:39,840
and this has been known by different

00:04:39,280 --> 00:04:43,040
names

00:04:39,840 --> 00:04:44,639
dependency hell library hell shared

00:04:43,040 --> 00:04:47,440
object hell dll

00:04:44,639 --> 00:04:49,040
however you like it and the thing is you

00:04:47,440 --> 00:04:50,400
package your application and then if

00:04:49,040 --> 00:04:52,800
something changes one of the

00:04:50,400 --> 00:04:53,919
dependencies underneath things can

00:04:52,800 --> 00:04:56,320
become complicated

00:04:53,919 --> 00:04:58,240
applications may break and you also

00:04:56,320 --> 00:04:59,360
don't necessarily have portability going

00:04:58,240 --> 00:05:02,639
from one distro

00:04:59,360 --> 00:05:04,240
to the other the fragmentation and the

00:05:02,639 --> 00:05:04,960
non-transactional nation of this

00:05:04,240 --> 00:05:06,720
packaging

00:05:04,960 --> 00:05:11,840
can create problems for software

00:05:06,720 --> 00:05:11,840
developers and publishers

00:05:12,000 --> 00:05:15,520
but then the fact that there is a

00:05:14,160 --> 00:05:17,680
problem with one

00:05:15,520 --> 00:05:18,720
doesn't mean that automatically a

00:05:17,680 --> 00:05:21,360
different solution

00:05:18,720 --> 00:05:24,080
is the right solution so in this regard

00:05:21,360 --> 00:05:25,919
i'm not here to tell you that snaps are

00:05:24,080 --> 00:05:27,600
the solution to all linux application

00:05:25,919 --> 00:05:30,720
problems and that this

00:05:27,600 --> 00:05:32,479
is the best the ultimate packaging

00:05:30,720 --> 00:05:34,639
mechanism for all purposes

00:05:32,479 --> 00:05:35,520
that would be incorrect and misleading

00:05:34,639 --> 00:05:38,320
snaps have

00:05:35,520 --> 00:05:39,440
quite a few merits and useful functions

00:05:38,320 --> 00:05:41,840
in a variety of

00:05:39,440 --> 00:05:42,720
domains but there will also be use cases

00:05:41,840 --> 00:05:45,199
where snaps

00:05:42,720 --> 00:05:46,560
are not the best thing so in the next

00:05:45,199 --> 00:05:48,160
few slides i'd like to show you

00:05:46,560 --> 00:05:50,000
what they can offer you and then from

00:05:48,160 --> 00:05:51,120
there you can deduce whether they fit

00:05:50,000 --> 00:05:53,360
your use case

00:05:51,120 --> 00:05:54,479
and frankly the answer might be that in

00:05:53,360 --> 00:05:56,800
some situations

00:05:54,479 --> 00:05:59,600
snap may not snaps may not be the best

00:05:56,800 --> 00:06:02,240
solution for you guys

00:05:59,600 --> 00:06:02,720
okay so the first thing is the discovery

00:06:02,240 --> 00:06:06,160
um

00:06:02,720 --> 00:06:09,360
there's the snapstore which hosts um

00:06:06,160 --> 00:06:10,880
sorry thousands of snaps including some

00:06:09,360 --> 00:06:14,080
really big name publishers

00:06:10,880 --> 00:06:16,880
popular open source software some games

00:06:14,080 --> 00:06:18,160
uh wine based applications which means

00:06:16,880 --> 00:06:21,120
windows software

00:06:18,160 --> 00:06:23,039
and a whole a whole lot more the snap

00:06:21,120 --> 00:06:26,400
store and snaps are available

00:06:23,039 --> 00:06:29,039
for any any ubuntu this any ubuntu

00:06:26,400 --> 00:06:32,080
release from 1404 onwards

00:06:29,039 --> 00:06:34,960
and 40 plus other distributions all

00:06:32,080 --> 00:06:37,840
software is welcome in the store and

00:06:34,960 --> 00:06:39,120
it's a portal or if you will your

00:06:37,840 --> 00:06:41,600
one-stop shop

00:06:39,120 --> 00:06:43,759
to all things snaps you can go there

00:06:41,600 --> 00:06:45,360
search for snaps browse categories

00:06:43,759 --> 00:06:47,440
uh figure out if there's something you

00:06:45,360 --> 00:06:48,160
like just explore and discover new

00:06:47,440 --> 00:06:49,599
software

00:06:48,160 --> 00:06:52,080
or just install something that you

00:06:49,599 --> 00:06:52,080
require

00:06:52,240 --> 00:06:56,720
then the installations are supposed to

00:06:54,240 --> 00:06:57,199
be simple basically one click or one

00:06:56,720 --> 00:07:00,240
liner

00:06:57,199 --> 00:07:02,400
one command line and and that's it

00:07:00,240 --> 00:07:04,080
and you should have consistent behavior

00:07:02,400 --> 00:07:06,160
across multiple distributions

00:07:04,080 --> 00:07:08,000
that's one of the core premises so if it

00:07:06,160 --> 00:07:10,400
runs well on fedora it should also run

00:07:08,000 --> 00:07:11,759
well on ubuntu and vice versa

00:07:10,400 --> 00:07:13,680
because everything is bundled and

00:07:11,759 --> 00:07:16,479
packaged as a single archive

00:07:13,680 --> 00:07:16,880
you should have fewer moving parts which

00:07:16,479 --> 00:07:19,199
means

00:07:16,880 --> 00:07:20,560
fewer opportunities for errors mistakes

00:07:19,199 --> 00:07:23,840
and problems

00:07:20,560 --> 00:07:23,840
in the software life cycle

00:07:25,199 --> 00:07:29,280
there's another element here which would

00:07:27,120 --> 00:07:30,479
be which is quite useful for developers

00:07:29,280 --> 00:07:33,919
and publisher and that's

00:07:30,479 --> 00:07:36,240
analytics the

00:07:33,919 --> 00:07:38,880
snapstore page for every snap that

00:07:36,240 --> 00:07:40,639
exists in the store has a metrics tab

00:07:38,880 --> 00:07:42,080
that allows publishers and their

00:07:40,639 --> 00:07:43,599
collaborators to see

00:07:42,080 --> 00:07:45,360
how their snaps are behaving and

00:07:43,599 --> 00:07:48,000
trending over the last

00:07:45,360 --> 00:07:48,720
uh x period which could be as little as

00:07:48,000 --> 00:07:50,639
one month

00:07:48,720 --> 00:07:51,919
all the way up to five years and then

00:07:50,639 --> 00:07:54,000
you can see uh

00:07:51,919 --> 00:07:55,599
how the snaps trend across multiple

00:07:54,000 --> 00:07:57,759
distributions

00:07:55,599 --> 00:07:58,720
across multiple release channels

00:07:57,759 --> 00:08:01,280
different versions

00:07:58,720 --> 00:08:02,400
of your application and you can also

00:08:01,280 --> 00:08:05,120
correlate to say

00:08:02,400 --> 00:08:06,960
social media campaigns specific

00:08:05,120 --> 00:08:10,240
activities related to your

00:08:06,960 --> 00:08:12,960
code and so forth this visibility is

00:08:10,240 --> 00:08:14,639
another layer of functionality that's

00:08:12,960 --> 00:08:16,639
not traditionally available

00:08:14,639 --> 00:08:17,759
in linux because when you distribute

00:08:16,639 --> 00:08:20,160
through the

00:08:17,759 --> 00:08:21,039
distro channels each distribution does

00:08:20,160 --> 00:08:22,960
its own thing

00:08:21,039 --> 00:08:24,800
so you may not necessarily know how how

00:08:22,960 --> 00:08:27,199
the aggregate numbers are

00:08:24,800 --> 00:08:28,160
and how the applications is behaving

00:08:27,199 --> 00:08:30,400
which can

00:08:28,160 --> 00:08:31,840
in some way maybe hamper your decisions

00:08:30,400 --> 00:08:33,120
on how to distribute software

00:08:31,840 --> 00:08:34,959
of course if you don't care about us

00:08:33,120 --> 00:08:36,399
it's perfectly fine but if you do then

00:08:34,959 --> 00:08:40,159
you do have this ability

00:08:36,399 --> 00:08:42,560
available to you

00:08:40,159 --> 00:08:44,159
life cycle it's another important thing

00:08:42,560 --> 00:08:45,680
it's quite a bit of an overhead

00:08:44,159 --> 00:08:48,160
once you've released your application

00:08:45,680 --> 00:08:50,160
your real job actually just begins

00:08:48,160 --> 00:08:52,480
the initial release is only the starting

00:08:50,160 --> 00:08:54,560
point and from there that point on you

00:08:52,480 --> 00:08:56,320
have to take care of bugs and issues and

00:08:54,560 --> 00:08:59,360
security vulnerabilities

00:08:56,320 --> 00:09:02,320
new major releases testing and so forth

00:08:59,360 --> 00:09:03,279
so on two levels one snap uh allow

00:09:02,320 --> 00:09:05,600
publishers

00:09:03,279 --> 00:09:07,680
to release updates instantly to their

00:09:05,600 --> 00:09:10,399
users

00:09:07,680 --> 00:09:10,959
a client system that runs snapd will by

00:09:10,399 --> 00:09:13,279
default

00:09:10,959 --> 00:09:14,880
contact the store four times a day and

00:09:13,279 --> 00:09:17,040
if there's an update available

00:09:14,880 --> 00:09:18,560
it will pull that update install it in a

00:09:17,040 --> 00:09:21,440
safe transactional manner

00:09:18,560 --> 00:09:22,399
roll back if that update is unsuccessful

00:09:21,440 --> 00:09:25,200
and provide

00:09:22,399 --> 00:09:26,160
security to the end user and also the

00:09:25,200 --> 00:09:29,600
reliability of

00:09:26,160 --> 00:09:31,760
delivery to the publisher

00:09:29,600 --> 00:09:35,040
the updates are cryptographically signed

00:09:31,760 --> 00:09:37,600
to reduce the chance of tempering

00:09:35,040 --> 00:09:38,560
snaps should work even if your system

00:09:37,600 --> 00:09:41,040
stops receiving

00:09:38,560 --> 00:09:42,880
updates so because snaps are decoupled

00:09:41,040 --> 00:09:44,800
from the underlying operating system

00:09:42,880 --> 00:09:46,320
they have their own management mechanism

00:09:44,800 --> 00:09:47,040
which means applications are fully

00:09:46,320 --> 00:09:49,040
up-to-date

00:09:47,040 --> 00:09:51,040
your system might not be but you don't

00:09:49,040 --> 00:09:54,080
really care because the applications are

00:09:51,040 --> 00:09:56,640
the internet-facing side of things where

00:09:54,080 --> 00:10:00,080
you need to put most of the focus

00:09:56,640 --> 00:10:02,640
um finally you can also publish snaps in

00:10:00,080 --> 00:10:04,959
different channels going from edge all

00:10:02,640 --> 00:10:06,480
the way to stable or full levels

00:10:04,959 --> 00:10:08,720
and that allows you also to

00:10:06,480 --> 00:10:09,519
differentiate different versions or

00:10:08,720 --> 00:10:12,720
different

00:10:09,519 --> 00:10:15,200
uh revisions of your software and

00:10:12,720 --> 00:10:16,560
allow for additional testing and provide

00:10:15,200 --> 00:10:20,240
additional flexibility

00:10:16,560 --> 00:10:20,240
and functionality to your users

00:10:21,200 --> 00:10:24,320
okay so this is kind of like a little

00:10:23,200 --> 00:10:26,560
promotional

00:10:24,320 --> 00:10:28,959
piece now let's go a little bit into the

00:10:26,560 --> 00:10:32,079
mechanics of how things are

00:10:28,959 --> 00:10:34,560
snaps have uh the snap ecosystem

00:10:32,079 --> 00:10:35,360
if you will has four major components

00:10:34,560 --> 00:10:37,839
there's the

00:10:35,360 --> 00:10:39,600
store that we mentioned earlier then

00:10:37,839 --> 00:10:42,320
there is the snapd service

00:10:39,600 --> 00:10:43,839
which runs on on a system and provides

00:10:42,320 --> 00:10:45,600
the interface to the store

00:10:43,839 --> 00:10:47,120
there's the user space component of the

00:10:45,600 --> 00:10:49,120
service called snap

00:10:47,120 --> 00:10:50,240
and finally for developers there's the

00:10:49,120 --> 00:10:52,720
snapcraft

00:10:50,240 --> 00:10:55,920
command line tool which allows you to

00:10:52,720 --> 00:10:58,560
package and publish your snaps

00:10:55,920 --> 00:10:59,120
this is where things become quite

00:10:58,560 --> 00:11:02,000
interesting

00:10:59,120 --> 00:11:03,680
here's just a little graphics for you to

00:11:02,000 --> 00:11:05,760
to enjoy and appreciate

00:11:03,680 --> 00:11:07,600
this uh took a lot of effort creating

00:11:05,760 --> 00:11:12,000
these four um

00:11:07,600 --> 00:11:14,800
boxes and lines so yeah

00:11:12,000 --> 00:11:16,160
so back to the series uh a bit snapcraft

00:11:14,800 --> 00:11:18,720
so it's a command line tool

00:11:16,160 --> 00:11:19,360
and it's actually quite a nifty and

00:11:18,720 --> 00:11:22,079
powerful

00:11:19,360 --> 00:11:22,720
uh utility it's a command line tool

00:11:22,079 --> 00:11:25,440
which means

00:11:22,720 --> 00:11:28,079
all right you you do need to work uh be

00:11:25,440 --> 00:11:31,200
familiar with the command line and be

00:11:28,079 --> 00:11:33,680
comfortable working in that manner

00:11:31,200 --> 00:11:34,800
once you run snapcraft putting aside for

00:11:33,680 --> 00:11:36,720
how the

00:11:34,800 --> 00:11:38,399
the pieces in the middle work your final

00:11:36,720 --> 00:11:41,600
artifact will be a snap

00:11:38,399 --> 00:11:45,360
which is a squash fs file system

00:11:41,600 --> 00:11:48,480
compressed with the dot snap suffix

00:11:45,360 --> 00:11:50,880
inside this archive there will be

00:11:48,480 --> 00:11:52,959
all of the necessary application code

00:11:50,880 --> 00:11:56,320
and library dependencies

00:11:52,959 --> 00:11:58,800
that allow the snap to run independently

00:11:56,320 --> 00:12:00,320
plus of course some declarative metadata

00:11:58,800 --> 00:12:01,360
so that means that let's say that you

00:12:00,320 --> 00:12:03,440
have a browser

00:12:01,360 --> 00:12:05,519
and you want to package that browser as

00:12:03,440 --> 00:12:06,880
a snap then you will also put all the

00:12:05,519 --> 00:12:10,000
different audio libraries

00:12:06,880 --> 00:12:12,800
video libraries codecs um

00:12:10,000 --> 00:12:14,959
and all the other necessary interfaces

00:12:12,800 --> 00:12:17,279
and elements that your browser will need

00:12:14,959 --> 00:12:19,440
so even if they don't exist on on on the

00:12:17,279 --> 00:12:21,440
host they will exist inside a snap and

00:12:19,440 --> 00:12:25,839
provide a functionality

00:12:21,440 --> 00:12:25,839
cryptographic libraries and so forth

00:12:25,920 --> 00:12:32,639
to get to that final artifact the snap

00:12:29,440 --> 00:12:33,519
you need to use snapcraft and how it

00:12:32,639 --> 00:12:36,160
works is

00:12:33,519 --> 00:12:38,399
it basically reads a recipe declared in

00:12:36,160 --> 00:12:41,920
a file called snapcraft.yaml

00:12:38,399 --> 00:12:43,120
in the amble format and if you have done

00:12:41,920 --> 00:12:46,560
any packaging of this

00:12:43,120 --> 00:12:49,120
nature before for instance say rpm

00:12:46,560 --> 00:12:50,480
spec files it is kind of similar the

00:12:49,120 --> 00:12:54,160
recipe declares

00:12:50,480 --> 00:12:55,120
certain informative pieces and then you

00:12:54,160 --> 00:12:56,959
have

00:12:55,120 --> 00:12:58,720
basically like declarative code

00:12:56,959 --> 00:13:01,200
functions which are then

00:12:58,720 --> 00:13:03,680
executed when snapchat runs and builds

00:13:01,200 --> 00:13:03,680
the snap

00:13:04,079 --> 00:13:08,480
what this effectually looks like is

00:13:06,079 --> 00:13:10,240
here's a a rather trivial example of a

00:13:08,480 --> 00:13:11,839
command line utility

00:13:10,240 --> 00:13:13,360
whether it's called weather it's a

00:13:11,839 --> 00:13:14,800
weather weather tool

00:13:13,360 --> 00:13:16,720
and it allows you to check current

00:13:14,800 --> 00:13:18,560
weather for different locations

00:13:16,720 --> 00:13:21,360
that's what the binary does when you run

00:13:18,560 --> 00:13:24,800
it to package that binary

00:13:21,360 --> 00:13:28,320
and create the application snap you have

00:13:24,800 --> 00:13:30,639
these 15 odd lines of code

00:13:28,320 --> 00:13:32,000
in the ammo syntax so basically we have

00:13:30,639 --> 00:13:34,320
some metadata

00:13:32,000 --> 00:13:35,920
then we have the application declaration

00:13:34,320 --> 00:13:37,519
and the bits and pieces components

00:13:35,920 --> 00:13:39,760
declaration which is called parts

00:13:37,519 --> 00:13:41,839
i will go into this in a bit more detail

00:13:39,760 --> 00:13:45,199
in just a few moments

00:13:41,839 --> 00:13:48,399
uh in this particular case this is a

00:13:45,199 --> 00:13:50,320
node.js application and it doesn't have

00:13:48,399 --> 00:13:52,160
that many components and it's not really

00:13:50,320 --> 00:13:54,000
complicated so of course this doesn't

00:13:52,160 --> 00:13:54,959
necessarily reflect how difficult or

00:13:54,000 --> 00:13:57,760
complex things

00:13:54,959 --> 00:13:59,680
will be when you package snaps but it

00:13:57,760 --> 00:14:01,760
actually shows you that this is not

00:13:59,680 --> 00:14:03,040
something completely outlandish and

00:14:01,760 --> 00:14:05,600
completely foreign

00:14:03,040 --> 00:14:06,639
it's just a bit of set of declarative

00:14:05,600 --> 00:14:08,399
instructions

00:14:06,639 --> 00:14:11,920
and you let the tool know what it needs

00:14:08,399 --> 00:14:14,000
to do to package the application

00:14:11,920 --> 00:14:16,079
so in a bit more detail the first part

00:14:14,000 --> 00:14:18,560
of that code that we mentioned earlier

00:14:16,079 --> 00:14:20,320
is metadata you provide information by

00:14:18,560 --> 00:14:21,440
which your application can be searched

00:14:20,320 --> 00:14:24,480
and cataloged

00:14:21,440 --> 00:14:27,760
we have things like name version summary

00:14:24,480 --> 00:14:29,680
and description and there are some

00:14:27,760 --> 00:14:30,639
limits on what you can do and what you

00:14:29,680 --> 00:14:32,480
can use

00:14:30,639 --> 00:14:33,839
it's quite useful to take into account

00:14:32,480 --> 00:14:37,120
specifically that

00:14:33,839 --> 00:14:39,120
version is a string it's not a number so

00:14:37,120 --> 00:14:40,720
there is no semantic meaning to what you

00:14:39,120 --> 00:14:41,440
put into your version your version could

00:14:40,720 --> 00:14:45,040
be

00:14:41,440 --> 00:14:47,519
a number per se but it could also be

00:14:45,040 --> 00:14:49,920
something like igor one eager five

00:14:47,519 --> 00:14:51,920
or whatever you like then there's a

00:14:49,920 --> 00:14:54,480
summary and then description

00:14:51,920 --> 00:14:55,040
you can also use markdown which will be

00:14:54,480 --> 00:14:57,440
parsed

00:14:55,040 --> 00:14:59,120
once you upload your snap to the store

00:14:57,440 --> 00:15:01,519
and shown in the store description

00:14:59,120 --> 00:15:03,760
so you can have additional visual

00:15:01,519 --> 00:15:05,920
elements to appeal to your users

00:15:03,760 --> 00:15:07,920
and provide provide differentiation to

00:15:05,920 --> 00:15:10,560
its functionality as part of that

00:15:07,920 --> 00:15:10,560
description

00:15:11,440 --> 00:15:16,320
the next interesting thing that if you

00:15:14,079 --> 00:15:19,360
remember what we've seen earlier in

00:15:16,320 --> 00:15:22,480
um in in that snippet of code

00:15:19,360 --> 00:15:24,800
is confinement so

00:15:22,480 --> 00:15:26,399
a concept that may not look or sound

00:15:24,800 --> 00:15:28,720
quite familiar from the traditional

00:15:26,399 --> 00:15:31,120
linux packaging world is

00:15:28,720 --> 00:15:32,399
snaps are designed to run isolated and

00:15:31,120 --> 00:15:35,199
this isolation is

00:15:32,399 --> 00:15:36,480
on two levels one code isolation so that

00:15:35,199 --> 00:15:38,560
functionality is

00:15:36,480 --> 00:15:40,399
available and consistent but there's

00:15:38,560 --> 00:15:42,720
also the security element

00:15:40,399 --> 00:15:44,399
snaps are designed to be secure and and

00:15:42,720 --> 00:15:45,759
completely separate from the underlying

00:15:44,399 --> 00:15:48,079
operating system

00:15:45,759 --> 00:15:49,680
and a fully confined snap can't really

00:15:48,079 --> 00:15:52,160
do much you can't

00:15:49,680 --> 00:15:54,480
talk to other snaps it cannot change

00:15:52,160 --> 00:15:57,600
anything on the system underneath

00:15:54,480 --> 00:16:00,639
and it's in that form it's

00:15:57,600 --> 00:16:03,360
kind of useless but

00:16:00,639 --> 00:16:04,480
to make snaps useful there is also a

00:16:03,360 --> 00:16:06,399
concept of something

00:16:04,480 --> 00:16:08,399
something called interfaces you can

00:16:06,399 --> 00:16:11,519
basically punch uh

00:16:08,399 --> 00:16:14,399
little holes in the security confinement

00:16:11,519 --> 00:16:17,040
and allow granular control and granular

00:16:14,399 --> 00:16:19,120
access to specific system resources

00:16:17,040 --> 00:16:20,480
for instance your browser will need

00:16:19,120 --> 00:16:22,720
access to the network

00:16:20,480 --> 00:16:25,199
it will need access to video and audio

00:16:22,720 --> 00:16:26,959
audio resources maybe usb

00:16:25,199 --> 00:16:28,399
but it doesn't necessarily need access

00:16:26,959 --> 00:16:31,279
to sys or

00:16:28,399 --> 00:16:33,920
proc or you don't want to give it access

00:16:31,279 --> 00:16:35,120
to uh to control the network and and so

00:16:33,920 --> 00:16:38,240
forth

00:16:35,120 --> 00:16:41,199
well so we'll see that in a second

00:16:38,240 --> 00:16:43,440
there are three confinement levels uh

00:16:41,199 --> 00:16:46,480
strict which is the default level

00:16:43,440 --> 00:16:47,920
and the preferred level and by default

00:16:46,480 --> 00:16:49,600
you have very little access

00:16:47,920 --> 00:16:52,079
which you can override with the

00:16:49,600 --> 00:16:54,480
interfaces dev mode is

00:16:52,079 --> 00:16:55,680
pretty much like strict however instead

00:16:54,480 --> 00:16:58,639
of hard errors

00:16:55,680 --> 00:17:00,240
you get soft warnings and it's useful

00:16:58,639 --> 00:17:02,639
for developers to figure out

00:17:00,240 --> 00:17:04,959
what kind of interface overrides they

00:17:02,639 --> 00:17:07,520
need to provide to make their snap

00:17:04,959 --> 00:17:09,039
functional once they publish it for real

00:17:07,520 --> 00:17:12,559
so to speak

00:17:09,039 --> 00:17:13,839
and finally classic is a um

00:17:12,559 --> 00:17:15,839
it's a tricky mechanism it's an

00:17:13,839 --> 00:17:18,720
interesting mechanism that

00:17:15,839 --> 00:17:19,520
provides system level privileges to the

00:17:18,720 --> 00:17:21,600
snap

00:17:19,520 --> 00:17:22,640
and it's used as an interim stop gap

00:17:21,600 --> 00:17:25,360
measure

00:17:22,640 --> 00:17:26,720
for any application that cannot be

00:17:25,360 --> 00:17:29,679
currently packaged as

00:17:26,720 --> 00:17:30,559
strict but may be packaged like that in

00:17:29,679 --> 00:17:32,880
the future

00:17:30,559 --> 00:17:34,160
or for applications that need uh

00:17:32,880 --> 00:17:38,559
arbitrary access to

00:17:34,160 --> 00:17:40,480
locations and binaries like say ides

00:17:38,559 --> 00:17:42,160
in in that way you can also have a snap

00:17:40,480 --> 00:17:44,799
that pretty much does anything

00:17:42,160 --> 00:17:47,520
like a classic normal standard linux

00:17:44,799 --> 00:17:50,400
application that's the last confinement

00:17:47,520 --> 00:17:52,960
for the weather example we had a strict

00:17:50,400 --> 00:17:55,600
confinement

00:17:52,960 --> 00:17:56,240
the isolation pretty much works like

00:17:55,600 --> 00:18:00,080
this

00:17:56,240 --> 00:18:02,000
each snap has its own private space the

00:18:00,080 --> 00:18:02,799
snaps are mounted as read-only file

00:18:02,000 --> 00:18:05,679
systems

00:18:02,799 --> 00:18:07,039
with a separate private writable area so

00:18:05,679 --> 00:18:10,160
there's persistence across

00:18:07,039 --> 00:18:12,559
runs uh confinement is

00:18:10,160 --> 00:18:14,080
provided between snaps and the

00:18:12,559 --> 00:18:17,280
underlying system with multiple

00:18:14,080 --> 00:18:20,160
levels there's c groups there's sec comp

00:18:17,280 --> 00:18:22,080
there are up armor rules you can read

00:18:20,160 --> 00:18:24,880
more about this if you're interested

00:18:22,080 --> 00:18:26,640
in the snap the documentation or you can

00:18:24,880 --> 00:18:27,280
contact me and i can give you a much

00:18:26,640 --> 00:18:30,320
longer

00:18:27,280 --> 00:18:31,840
and interesting overview or

00:18:30,320 --> 00:18:33,760
given that you have my name from this

00:18:31,840 --> 00:18:34,320
presentation just go on to the snapchat

00:18:33,760 --> 00:18:35,919
blog

00:18:34,320 --> 00:18:37,760
and have a read in the last couple of

00:18:35,919 --> 00:18:42,320
months a few interesting articles on

00:18:37,760 --> 00:18:44,160
these different topics another

00:18:42,320 --> 00:18:45,840
interesting and useful concept that you

00:18:44,160 --> 00:18:46,799
wouldn't have encountered in the classic

00:18:45,840 --> 00:18:50,080
linux world

00:18:46,799 --> 00:18:53,200
is bass bass is a

00:18:50,080 --> 00:18:55,200
uh well

00:18:53,200 --> 00:18:56,799
the best way to describe it is snaps

00:18:55,200 --> 00:18:58,880
need a root file system to run

00:18:56,799 --> 00:19:00,240
but they don't actually see the the real

00:18:58,880 --> 00:19:02,000
root file system on your

00:19:00,240 --> 00:19:03,360
on your host they're strictly confined

00:19:02,000 --> 00:19:06,480
and isolated

00:19:03,360 --> 00:19:07,600
so to have something to to act as a as a

00:19:06,480 --> 00:19:09,360
root file system

00:19:07,600 --> 00:19:10,720
there's the concept of base it's a

00:19:09,360 --> 00:19:12,640
special kind of snap

00:19:10,720 --> 00:19:14,400
which contains a minimal set of runtime

00:19:12,640 --> 00:19:17,919
libraries to allow the

00:19:14,400 --> 00:19:21,280
snaps to run on top of them and usually

00:19:17,919 --> 00:19:22,080
bases are matched to an ubuntu lts

00:19:21,280 --> 00:19:25,440
release

00:19:22,080 --> 00:19:28,720
so for instance core 18 a base

00:19:25,440 --> 00:19:32,240
is an ubuntu 1804 lts

00:19:28,720 --> 00:19:33,679
uh set of libraries that allows snaps

00:19:32,240 --> 00:19:36,080
then to run and think that they're

00:19:33,679 --> 00:19:38,000
running on top of ubuntu 1804

00:19:36,080 --> 00:19:40,240
so even if you run on fedora say or

00:19:38,000 --> 00:19:43,600
sleds your snaps will still

00:19:40,240 --> 00:19:45,600
interface and interact with the core 18

00:19:43,600 --> 00:19:48,400
or core 20 for that matter

00:19:45,600 --> 00:19:49,280
and be able to use the library's uh

00:19:48,400 --> 00:19:51,120
matching

00:19:49,280 --> 00:19:52,640
that base however there's nothing that

00:19:51,120 --> 00:19:54,080
stops um

00:19:52,640 --> 00:19:55,280
anyone from developing their own base

00:19:54,080 --> 00:19:56,880
you can have a fedora base there's a

00:19:55,280 --> 00:19:59,440
fruit of concept available

00:19:56,880 --> 00:20:00,000
as a github project uh and we actually

00:19:59,440 --> 00:20:01,840
welcome

00:20:00,000 --> 00:20:03,919
and invite other people to if they want

00:20:01,840 --> 00:20:07,280
to develop their own bases if they feel

00:20:03,919 --> 00:20:09,919
there's a need for that

00:20:07,280 --> 00:20:10,720
build definition is the last part of of

00:20:09,919 --> 00:20:12,640
the yaml

00:20:10,720 --> 00:20:13,840
and it contains two parts there's the

00:20:12,640 --> 00:20:16,559
application definition

00:20:13,840 --> 00:20:18,559
where we declare the application and the

00:20:16,559 --> 00:20:21,280
interface overrides with the crea

00:20:18,559 --> 00:20:21,919
that's done by the keyword plugs which

00:20:21,280 --> 00:20:24,799
then says

00:20:21,919 --> 00:20:26,000
this application needs to plug in to the

00:20:24,799 --> 00:20:28,400
network interface

00:20:26,000 --> 00:20:29,840
and or other interfaces and then it will

00:20:28,400 --> 00:20:32,720
have relevant

00:20:29,840 --> 00:20:33,200
access and functionality and the parts

00:20:32,720 --> 00:20:35,440
is

00:20:33,200 --> 00:20:36,400
the component where we declare the

00:20:35,440 --> 00:20:38,159
sources

00:20:36,400 --> 00:20:40,640
from which the application will be

00:20:38,159 --> 00:20:43,600
assembled this could be

00:20:40,640 --> 00:20:44,559
github repos this could be local files

00:20:43,600 --> 00:20:47,760
zip files

00:20:44,559 --> 00:20:49,840
the debian packages ppas and so forth

00:20:47,760 --> 00:20:52,799
you have a really wide

00:20:49,840 --> 00:20:53,679
variety of available sources and then

00:20:52,799 --> 00:20:56,640
available

00:20:53,679 --> 00:20:57,440
language plugins like go nodes auto

00:20:56,640 --> 00:21:00,320
parts

00:20:57,440 --> 00:21:02,159
and so forth which allow you which help

00:21:00,320 --> 00:21:04,320
you and simplify the

00:21:02,159 --> 00:21:05,919
the the packaging process so if you're

00:21:04,320 --> 00:21:08,000
not 100 sure

00:21:05,919 --> 00:21:08,960
how to do some things with plugins you

00:21:08,000 --> 00:21:10,880
can actually

00:21:08,960 --> 00:21:13,360
abstractize lots of the common bits and

00:21:10,880 --> 00:21:17,120
pieces and just override the

00:21:13,360 --> 00:21:19,039
the things that you need

00:21:17,120 --> 00:21:21,840
so basically here's a slide that pretty

00:21:19,039 --> 00:21:23,280
much repeats what i just said

00:21:21,840 --> 00:21:25,120
you need to pay attention to how you

00:21:23,280 --> 00:21:26,720
declare your application and what name

00:21:25,120 --> 00:21:29,520
you give it

00:21:26,720 --> 00:21:30,640
usually those match but if your snap

00:21:29,520 --> 00:21:33,360
contains

00:21:30,640 --> 00:21:34,000
more than one application then you will

00:21:33,360 --> 00:21:36,640
have to give

00:21:34,000 --> 00:21:37,600
different names of course the command

00:21:36,640 --> 00:21:39,440
will be

00:21:37,600 --> 00:21:41,679
the command keyword will point to the

00:21:39,440 --> 00:21:45,840
path for the executable

00:21:41,679 --> 00:21:45,840
inside the snap

00:21:46,080 --> 00:21:52,159
parts again in this specific case

00:21:49,679 --> 00:21:52,799
like i said sources needed to assemble

00:21:52,159 --> 00:21:55,520
the app

00:21:52,799 --> 00:21:56,799
you can override specific source tags

00:21:55,520 --> 00:21:59,120
under version control

00:21:56,799 --> 00:22:00,159
you can point to different urls where

00:21:59,120 --> 00:22:02,400
the parts

00:22:00,159 --> 00:22:04,960
will be found those parts can also be

00:22:02,400 --> 00:22:06,480
local they don't have to be online

00:22:04,960 --> 00:22:08,320
and if you're building a closed source

00:22:06,480 --> 00:22:10,480
application then logically

00:22:08,320 --> 00:22:11,360
you will not provide the sources and

00:22:10,480 --> 00:22:15,039
they will not be

00:22:11,360 --> 00:22:15,039
available for anyone than yourself

00:22:15,840 --> 00:22:19,440
snapcraft has lots of commands it's a

00:22:18,400 --> 00:22:22,080
complicated and

00:22:19,440 --> 00:22:22,559
very useful tool so when you want to

00:22:22,080 --> 00:22:26,000
build

00:22:22,559 --> 00:22:28,000
you just run snapcraft but then if you

00:22:26,000 --> 00:22:29,840
have built and something doesn't look

00:22:28,000 --> 00:22:30,240
right you can clean specific parts in

00:22:29,840 --> 00:22:32,880
the

00:22:30,240 --> 00:22:33,440
in the life cycle uh you can initialize

00:22:32,880 --> 00:22:35,760
the work

00:22:33,440 --> 00:22:37,200
project you can then uh push a snap to

00:22:35,760 --> 00:22:40,320
the store register

00:22:37,200 --> 00:22:41,600
a snap name and so forth there's a

00:22:40,320 --> 00:22:43,360
really a lot that

00:22:41,600 --> 00:22:45,679
i can't possibly cover in this

00:22:43,360 --> 00:22:47,120
presentation so again please feel free

00:22:45,679 --> 00:22:49,360
to contact me and

00:22:47,120 --> 00:22:50,400
i can i will gladly guide you through

00:22:49,360 --> 00:22:54,159
some of the more

00:22:50,400 --> 00:22:57,200
complicated steps

00:22:54,159 --> 00:22:57,520
the idea of snapcraft is also to help

00:22:57,200 --> 00:22:59,440
you

00:22:57,520 --> 00:23:02,000
isolate your work from the underlying

00:22:59,440 --> 00:23:04,240
system so when you run snapcraft

00:23:02,000 --> 00:23:05,360
it will not run on your host it will

00:23:04,240 --> 00:23:07,520
spawn a

00:23:05,360 --> 00:23:09,200
virtualized or containerized build

00:23:07,520 --> 00:23:11,520
environment

00:23:09,200 --> 00:23:13,120
it has two backends it has multi-pass

00:23:11,520 --> 00:23:15,280
which creates virtual machines

00:23:13,120 --> 00:23:16,159
and it has lxd which creates lightweight

00:23:15,280 --> 00:23:18,320
containers

00:23:16,159 --> 00:23:19,360
so you can run snapchat with either of

00:23:18,320 --> 00:23:21,760
these two

00:23:19,360 --> 00:23:22,400
and inside the container which will

00:23:21,760 --> 00:23:24,799
match

00:23:22,400 --> 00:23:26,960
your build declaration all the packages

00:23:24,799 --> 00:23:29,039
will be downloaded assembled and built

00:23:26,960 --> 00:23:30,960
you will not be polluting or changing

00:23:29,039 --> 00:23:32,960
your underlying host this way

00:23:30,960 --> 00:23:34,400
that's quite useful because if you pull

00:23:32,960 --> 00:23:37,200
some libraries that

00:23:34,400 --> 00:23:38,159
would conflict in real life with your

00:23:37,200 --> 00:23:40,799
underlying host

00:23:38,159 --> 00:23:42,720
system that will not happen you will not

00:23:40,799 --> 00:23:44,480
cobble or destroy anything

00:23:42,720 --> 00:23:46,400
all of this happens in an ephemeral

00:23:44,480 --> 00:23:48,159
destroyable build environment once

00:23:46,400 --> 00:23:48,799
you're done you can delete the container

00:23:48,159 --> 00:23:51,840
and

00:23:48,799 --> 00:23:54,320
no harm done

00:23:51,840 --> 00:23:55,120
once the snap is created and this can

00:23:54,320 --> 00:23:58,400
sometimes take

00:23:55,120 --> 00:23:59,840
a few takes because you may have errors

00:23:58,400 --> 00:24:01,440
you may not have necessarily declared

00:23:59,840 --> 00:24:03,440
all the relevant information

00:24:01,440 --> 00:24:05,200
you may miss a library or two needed for

00:24:03,440 --> 00:24:07,360
the application and so forth

00:24:05,200 --> 00:24:09,440
but in the end if you're successful

00:24:07,360 --> 00:24:13,600
there will be a snap in the work

00:24:09,440 --> 00:24:13,600
directory and the snap will have a

00:24:13,679 --> 00:24:20,159
name dot snap will have

00:24:16,799 --> 00:24:20,880
name dot snap suffix now once you have

00:24:20,159 --> 00:24:22,640
the snap

00:24:20,880 --> 00:24:24,400
you can actually inspect what's inside

00:24:22,640 --> 00:24:27,120
it so what you can do

00:24:24,400 --> 00:24:28,480
is unsquash the files uh the file system

00:24:27,120 --> 00:24:31,600
you cannot squash the snap

00:24:28,480 --> 00:24:33,600
and then look inside it and you will see

00:24:31,600 --> 00:24:35,679
that it will have a structure that is

00:24:33,600 --> 00:24:37,279
very similar to a linux system

00:24:35,679 --> 00:24:38,799
there will be whole bunch of different

00:24:37,279 --> 00:24:42,080
libraries like uh

00:24:38,799 --> 00:24:44,799
sorry directories like bin lib user

00:24:42,080 --> 00:24:45,200
user lab and so forth it will mimic in a

00:24:44,799 --> 00:24:47,919
way

00:24:45,200 --> 00:24:48,720
the normal limit structure except these

00:24:47,919 --> 00:24:51,520
libraries

00:24:48,720 --> 00:24:52,640
and the components inside these live

00:24:51,520 --> 00:24:56,720
directories

00:24:52,640 --> 00:25:00,400
will run on top of the base that we

00:24:56,720 --> 00:25:01,039
mentioned earlier this way you can also

00:25:00,400 --> 00:25:03,679
see

00:25:01,039 --> 00:25:04,559
how snapcraft works and what it does in

00:25:03,679 --> 00:25:06,480
the end

00:25:04,559 --> 00:25:09,120
it can look a bit complicated but then

00:25:06,480 --> 00:25:12,840
once you go in into the details

00:25:09,120 --> 00:25:14,080
it's kind of self-explanatory in some

00:25:12,840 --> 00:25:17,200
way

00:25:14,080 --> 00:25:18,080
to understand um the file format and

00:25:17,200 --> 00:25:21,360
what's happening

00:25:18,080 --> 00:25:22,000
inside you you can think of if you've

00:25:21,360 --> 00:25:24,559
ever

00:25:22,000 --> 00:25:26,559
run your own application with your own

00:25:24,559 --> 00:25:30,640
library overrides with ld

00:25:26,559 --> 00:25:32,799
library path and so you the application

00:25:30,640 --> 00:25:34,480
components will all be relative to

00:25:32,799 --> 00:25:36,640
what's inside the snap

00:25:34,480 --> 00:25:37,840
and there's a whole bunch of dollar snap

00:25:36,640 --> 00:25:40,320
environment variables

00:25:37,840 --> 00:25:41,840
that reflect these different locations

00:25:40,320 --> 00:25:42,480
for instance dollar snap is the

00:25:41,840 --> 00:25:45,600
read-only

00:25:42,480 --> 00:25:48,480
installation path then dollar snap data

00:25:45,600 --> 00:25:49,440
is the writable path that resides under

00:25:48,480 --> 00:25:51,360
var

00:25:49,440 --> 00:25:52,480
but then you reflect it with the

00:25:51,360 --> 00:25:56,080
environment variable

00:25:52,480 --> 00:25:58,720
inside your snap rather than a

00:25:56,080 --> 00:26:00,000
an external pad that you cannot access

00:25:58,720 --> 00:26:02,400
directly

00:26:00,000 --> 00:26:04,159
again it's not trivial we can talk about

00:26:02,400 --> 00:26:06,320
it separately if you're interested in

00:26:04,159 --> 00:26:08,400
more details

00:26:06,320 --> 00:26:10,320
publishing a snap that's your next step

00:26:08,400 --> 00:26:12,080
you need to register for a dev developer

00:26:10,320 --> 00:26:14,240
account in the snapstore

00:26:12,080 --> 00:26:16,240
then you need to register your app name

00:26:14,240 --> 00:26:18,640
ideally it will not conflict with an

00:26:16,240 --> 00:26:20,960
existing one or try to

00:26:18,640 --> 00:26:21,919
mimic too closely a popular well-known

00:26:20,960 --> 00:26:25,039
application

00:26:21,919 --> 00:26:27,600
for whatever reason and once

00:26:25,039 --> 00:26:28,320
you do that you can push the snap to the

00:26:27,600 --> 00:26:30,640
store

00:26:28,320 --> 00:26:32,960
and ideally it will pass all the checks

00:26:30,640 --> 00:26:35,440
and be published and available to your

00:26:32,960 --> 00:26:36,240
end users you can do this on the command

00:26:35,440 --> 00:26:39,039
line

00:26:36,240 --> 00:26:39,919
with snapcraft login and then snapcraft

00:26:39,039 --> 00:26:42,320
push

00:26:39,919 --> 00:26:44,240
you should push uh to a non-stable

00:26:42,320 --> 00:26:46,559
channel by default

00:26:44,240 --> 00:26:48,000
because you can't really be sure that

00:26:46,559 --> 00:26:49,520
everything is perfect and you should

00:26:48,000 --> 00:26:51,440
allow for some testing

00:26:49,520 --> 00:26:53,840
ideally a lot of testing by your end

00:26:51,440 --> 00:26:53,840
users

00:26:54,240 --> 00:26:57,520
you have again a lot of flexibility here

00:26:56,960 --> 00:27:00,440
because

00:26:57,520 --> 00:27:02,240
uh snapstore channels offer you a

00:27:00,440 --> 00:27:05,600
multi-dimensional

00:27:02,240 --> 00:27:07,360
flexibility you can use tracks

00:27:05,600 --> 00:27:10,559
to trade off between stability and new

00:27:07,360 --> 00:27:13,120
features you can have something like a

00:27:10,559 --> 00:27:14,159
track number four and then legacy or

00:27:13,120 --> 00:27:16,080
whatever

00:27:14,159 --> 00:27:18,000
risk channels that we mentioned earlier

00:27:16,080 --> 00:27:20,960
you can have uh beta you can have

00:27:18,000 --> 00:27:21,360
edge candidates stable and you can even

00:27:20,960 --> 00:27:24,000
create

00:27:21,360 --> 00:27:26,159
optional branches for temporary releases

00:27:24,000 --> 00:27:27,600
and bug fixing for your team

00:27:26,159 --> 00:27:29,760
so you could have something that goes

00:27:27,600 --> 00:27:34,559
into edge but that will be called

00:27:29,760 --> 00:27:36,720
fix number 73.

00:27:34,559 --> 00:27:38,559
examples for different tracks which you

00:27:36,720 --> 00:27:40,640
can use long-term support

00:27:38,559 --> 00:27:43,279
major minor releases however you feel

00:27:40,640 --> 00:27:43,279
like about it

00:27:43,440 --> 00:27:48,399
risks as mentioned before

00:27:46,480 --> 00:27:49,679
this is the most important aspect in the

00:27:48,399 --> 00:27:52,559
sense of um

00:27:49,679 --> 00:27:54,320
quality control uh you have the stable

00:27:52,559 --> 00:27:57,440
channel you can reference it in

00:27:54,320 --> 00:27:59,440
multiple ways similarly candidate that

00:27:57,440 --> 00:28:02,080
beta and edge

00:27:59,440 --> 00:28:03,600
your end users have the option to switch

00:28:02,080 --> 00:28:04,399
between different channels so if they

00:28:03,600 --> 00:28:06,320
install a snap

00:28:04,399 --> 00:28:09,120
by default it will be from the stable

00:28:06,320 --> 00:28:11,200
channel but then you could go oh i i

00:28:09,120 --> 00:28:14,399
will i want to refresh my snap

00:28:11,200 --> 00:28:16,080
from candidates or from edge and use and

00:28:14,399 --> 00:28:18,320
try a different version

00:28:16,080 --> 00:28:19,520
another advantage that snaps have is

00:28:18,320 --> 00:28:22,240
that you can have

00:28:19,520 --> 00:28:24,320
parallel installs of the same snap so

00:28:22,240 --> 00:28:26,240
for instance you can have ocular

00:28:24,320 --> 00:28:29,120
ocular one ocular two okay three or

00:28:26,240 --> 00:28:30,720
killer four it will all be ocular snap

00:28:29,120 --> 00:28:32,080
but then each one can reference a

00:28:30,720 --> 00:28:33,679
different channel you have edge you can

00:28:32,080 --> 00:28:35,440
have candidate beta stable

00:28:33,679 --> 00:28:36,960
compare different major versions try

00:28:35,440 --> 00:28:39,200
different versions see how things work

00:28:36,960 --> 00:28:41,840
out

00:28:39,200 --> 00:28:42,240
um so like i said when you upload to the

00:28:41,840 --> 00:28:45,360
store

00:28:42,240 --> 00:28:46,159
don't use table right away start with

00:28:45,360 --> 00:28:49,200
something

00:28:46,159 --> 00:28:50,880
less stable

00:28:49,200 --> 00:28:52,399
there will be an automate automatic

00:28:50,880 --> 00:28:55,679
check of your snap

00:28:52,399 --> 00:28:57,360
and if it fails for security reasons

00:28:55,679 --> 00:28:59,120
then there will be a manual review by

00:28:57,360 --> 00:29:01,760
the store team

00:28:59,120 --> 00:29:03,120
your snap once lands finally and is

00:29:01,760 --> 00:29:03,840
available to end users should be

00:29:03,120 --> 00:29:06,000
appealing

00:29:03,840 --> 00:29:07,520
so you should make sure that your users

00:29:06,000 --> 00:29:09,360
can

00:29:07,520 --> 00:29:11,360
will want to install your snap so you

00:29:09,360 --> 00:29:14,000
should provide screenshots

00:29:11,360 --> 00:29:14,880
videos descriptions and so forth you

00:29:14,000 --> 00:29:17,600
have quite a bit of

00:29:14,880 --> 00:29:18,720
flexibility here as well um the

00:29:17,600 --> 00:29:21,360
snapstore

00:29:18,720 --> 00:29:22,240
is well it's it's in the name it's a

00:29:21,360 --> 00:29:24,480
store

00:29:22,240 --> 00:29:26,559
so you should make sure that when people

00:29:24,480 --> 00:29:27,840
search for applications and want to

00:29:26,559 --> 00:29:30,559
install something

00:29:27,840 --> 00:29:32,480
yours will draw the eye and provide

00:29:30,559 --> 00:29:36,960
maximum useful information

00:29:32,480 --> 00:29:39,840
to people considering your tools

00:29:36,960 --> 00:29:41,360
this was quick i know and uh there are

00:29:39,840 --> 00:29:44,559
probably a lot of questions

00:29:41,360 --> 00:29:46,159
so we have about 10 minutes uh i'll try

00:29:44,559 --> 00:29:48,960
to answer as much as i can

00:29:46,159 --> 00:29:49,600
i i think the organizers will paste the

00:29:48,960 --> 00:29:52,720
questions

00:29:49,600 --> 00:29:53,760
in the notes uh in big blue button where

00:29:52,720 --> 00:29:56,799
i am

00:29:53,760 --> 00:29:58,240
and i'll answer as much as i can just to

00:29:56,799 --> 00:30:01,760
move on to the next slide

00:29:58,240 --> 00:30:02,880
and here's my email so any questions you

00:30:01,760 --> 00:30:06,159
have on this topic

00:30:02,880 --> 00:30:07,760
complaints if you didn't like this

00:30:06,159 --> 00:30:09,520
anything you would like to know i'll be

00:30:07,760 --> 00:30:11,039
more than glad to help point you to the

00:30:09,520 --> 00:30:12,960
right sources

00:30:11,039 --> 00:30:16,720
get you in touch with the right people

00:30:12,960 --> 00:30:16,720
even organize a workshop if you want

00:30:17,120 --> 00:30:25,440
so go ahead again

00:30:22,000 --> 00:30:26,559
thank you um yeah we have a few

00:30:25,440 --> 00:30:29,120
questions

00:30:26,559 --> 00:30:30,880
so nate is asking what do you see as

00:30:29,120 --> 00:30:33,840
snap's main advantage

00:30:30,880 --> 00:30:33,840
over flat pack

00:30:34,159 --> 00:30:39,760
okay um i love the question

00:30:37,360 --> 00:30:41,279
but i don't know i knew you would no but

00:30:39,760 --> 00:30:44,080
i'm not going to answer it because

00:30:41,279 --> 00:30:45,760
it will not be fair of me first uh

00:30:44,080 --> 00:30:46,240
because i work for canonical i'm biased

00:30:45,760 --> 00:30:48,880
right

00:30:46,240 --> 00:30:52,000
so my answer is not valid i'm not going

00:30:48,880 --> 00:30:54,480
to um talk trash about the competition

00:30:52,000 --> 00:30:55,440
i'll give you a more political answer

00:30:54,480 --> 00:30:58,799
choose the best

00:30:55,440 --> 00:31:01,519
software for your needs install snaps

00:30:58,799 --> 00:31:02,640
install flat pack compare them and see

00:31:01,519 --> 00:31:05,519
what they give you

00:31:02,640 --> 00:31:06,080
because uh the answer is always in the

00:31:05,519 --> 00:31:09,120
end

00:31:06,080 --> 00:31:12,080
use case in the end functionality maybe

00:31:09,120 --> 00:31:13,600
for 400 000 people one will provide the

00:31:12,080 --> 00:31:15,840
best results ever

00:31:13,600 --> 00:31:17,200
but for yourself that's not relevant

00:31:15,840 --> 00:31:18,000
because you don't care about that you

00:31:17,200 --> 00:31:21,360
care about something

00:31:18,000 --> 00:31:23,360
else so um

00:31:21,360 --> 00:31:24,559
that's that's my political answer i'm

00:31:23,360 --> 00:31:27,840
sorry yeah

00:31:24,559 --> 00:31:30,880
thank you um next question

00:31:27,840 --> 00:31:32,799
uh thiaro asks can i build snaps from

00:31:30,880 --> 00:31:34,880
any disk drawer other than ubuntu

00:31:32,799 --> 00:31:37,120
or do i need to be on ubuntu develop

00:31:34,880 --> 00:31:37,120
them

00:31:38,960 --> 00:31:43,200
you uh you need to ins to have snapcraft

00:31:42,559 --> 00:31:45,360
installed

00:31:43,200 --> 00:31:48,720
on your system if it it's actually a

00:31:45,360 --> 00:31:48,720
good question i didn't think about it

00:31:48,960 --> 00:31:51,840
it's a good question

00:31:53,440 --> 00:31:57,120
i'm not sure i haven't tried it i think

00:31:56,720 --> 00:32:00,480
that

00:31:57,120 --> 00:32:02,480
um if snapchat runs on your distro

00:32:00,480 --> 00:32:04,640
then go for it you will need the the

00:32:02,480 --> 00:32:06,720
back end you will need multi-pass or lxd

00:32:04,640 --> 00:32:08,559
to create a virtualized environment from

00:32:06,720 --> 00:32:09,679
that point on once that's bootstrapped

00:32:08,559 --> 00:32:11,519
should be fine

00:32:09,679 --> 00:32:13,840
but it's actually a good point i haven't

00:32:11,519 --> 00:32:16,080
tried it

00:32:13,840 --> 00:32:18,559
have to come back to thiago with this

00:32:16,080 --> 00:32:18,559
reply

00:32:18,880 --> 00:32:26,320
yes okay then next question

00:32:22,880 --> 00:32:28,399
how can or can snapcraft help simplify

00:32:26,320 --> 00:32:32,000
building with dependencies from

00:32:28,399 --> 00:32:33,360
npm pip ruby gems and other dev package

00:32:32,000 --> 00:32:36,799
managers

00:32:33,360 --> 00:32:38,320
okay so uh snapcraft actually has

00:32:36,799 --> 00:32:40,840
plugins for these languages

00:32:38,320 --> 00:32:42,480
there is an npm plugin there's a ruby

00:32:40,840 --> 00:32:46,080
plugin and

00:32:42,480 --> 00:32:47,679
they can help you define

00:32:46,080 --> 00:32:49,760
bootstrap and grab the relevant

00:32:47,679 --> 00:32:51,760
resources pull them into your snap and

00:32:49,760 --> 00:32:55,120
then assemble your application

00:32:51,760 --> 00:32:58,880
electron builder also can build snaps

00:32:55,120 --> 00:33:01,440
as as an artifact now

00:32:58,880 --> 00:33:02,559
this is a very generic reply the

00:33:01,440 --> 00:33:05,120
question is

00:33:02,559 --> 00:33:06,240
what is the specific use case uh that

00:33:05,120 --> 00:33:09,200
you have in mind

00:33:06,240 --> 00:33:10,720
and maybe then we can go into details

00:33:09,200 --> 00:33:12,480
and understand exactly

00:33:10,720 --> 00:33:14,559
what you need to do but if you say have

00:33:12,480 --> 00:33:17,360
a ruby based application or you have a

00:33:14,559 --> 00:33:20,320
go based or an npm based application

00:33:17,360 --> 00:33:21,919
you can do it with uh with snapcraft use

00:33:20,320 --> 00:33:25,039
the plugin

00:33:21,919 --> 00:33:26,320
plugins get the necessary modules get

00:33:25,039 --> 00:33:29,519
the necessary packages

00:33:26,320 --> 00:33:32,159
assembled and and packaged and

00:33:29,519 --> 00:33:33,440
you can also provide overrides to the

00:33:32,159 --> 00:33:35,840
build definition

00:33:33,440 --> 00:33:36,480
if there are specific instructions that

00:33:35,840 --> 00:33:41,039
are not

00:33:36,480 --> 00:33:41,039
available in what the plugins do

00:33:41,120 --> 00:33:45,200
if you go to the snapstore you will see

00:33:42,960 --> 00:33:47,840
there is a lot of different applications

00:33:45,200 --> 00:33:49,519
created in different uh development

00:33:47,840 --> 00:33:52,880
languages the

00:33:49,519 --> 00:33:56,080
development frameworks and lots of them

00:33:52,880 --> 00:33:56,080
use these different plugins

00:33:56,480 --> 00:34:00,080
okay thank you um that's it for the

00:33:59,279 --> 00:34:03,120
questions

00:34:00,080 --> 00:34:05,120
um okay already yeah

00:34:03,120 --> 00:34:07,120
and so maybe there's some more

00:34:05,120 --> 00:34:11,679
discussion happening in the um

00:34:07,120 --> 00:34:14,960
talk chat room i don't know okay

00:34:11,679 --> 00:34:17,599
okay so for now um thank you igor

00:34:14,960 --> 00:34:18,560
again okay should i hang around for

00:34:17,599 --> 00:34:23,200
another five minutes

00:34:18,560 --> 00:34:26,000
or drop early um i guess you can drop

00:34:23,200 --> 00:34:27,919
no okay well then i'll just a couple of

00:34:26,000 --> 00:34:30,480
closing boards thank you for listening

00:34:27,919 --> 00:34:31,520
if you were listening i hope you found

00:34:30,480 --> 00:34:33,280
this useful

00:34:31,520 --> 00:34:34,560
interesting and maybe ever so slightly

00:34:33,280 --> 00:34:36,320
entertaining

00:34:34,560 --> 00:34:37,599
thank you for the organizers for the

00:34:36,320 --> 00:34:48,079
opportunity to speak

00:34:37,599 --> 00:34:50,159
and see you around folks thank you

00:34:48,079 --> 00:34:50,159

YouTube URL: https://www.youtube.com/watch?v=Ps_V5tdC6-E


