Title: Akademy 2021 - Plasma internals - The Next few Years
Publication date: 2021-06-29
Playlist: Akademy 2021
Description: 
	By Marco Martin
Work is starting on Kde Frameworks 6 and the Qt6 transition.
The architecture of the Plasma Shell was born in the early Qt4 era, built on top of different technologies.
The Qt4 to Qt5 transition brought for us an important technology change: Qt Quick: Plasma was redesigned to use that as its first class citizen for the GUI.
While this new port to Qt6 doesn't pose a technology change as big as the Qt4 to Qt5 port, gives us the opportunity to exploit the lessons learned in the Plasma 5 lifetime, and the possibility to refactor and simplify things in order to offer a leaner and more robust experience for users and developers alike.
The talk will briefly cover the development history of the Plasma shell in the past and will cover the current plans of architectural and API changes that will happen in Plasma 6.
Captions: 
	00:00:01,110 --> 00:00:08,580
[Music]

00:00:10,480 --> 00:00:14,639
okay

00:00:11,280 --> 00:00:17,680
hello everybody i am

00:00:14,639 --> 00:00:20,960
i am marco martin and uh

00:00:17,680 --> 00:00:24,640
um i've been a contributor of

00:00:20,960 --> 00:00:27,840
kde uh since

00:00:24,640 --> 00:00:31,359
pretty much a decade um

00:00:27,840 --> 00:00:34,399
have i've been almost

00:00:31,359 --> 00:00:36,320
always working mostly on plasma so

00:00:34,399 --> 00:00:39,760
that's that's exactly what i will

00:00:36,320 --> 00:00:40,800
talk about uh today uh nowadays i'm

00:00:39,760 --> 00:00:45,760
working for

00:00:40,800 --> 00:00:49,200
for blue systems and i am

00:00:45,760 --> 00:00:52,960
i am still uh uh dedicating

00:00:49,200 --> 00:00:56,399
a lot of my time but free and work work

00:00:52,960 --> 00:01:00,079
uh on improving uh

00:00:56,399 --> 00:01:03,359
the plasma experience uh so

00:01:00,079 --> 00:01:04,559
uh this talk uh even if it's about

00:01:03,359 --> 00:01:08,000
plasma will

00:01:04,559 --> 00:01:11,360
not really uh be

00:01:08,000 --> 00:01:14,479
that much about pretty pretty

00:01:11,360 --> 00:01:18,799
pictures but

00:01:14,479 --> 00:01:22,799
i'll go a bit more

00:01:18,799 --> 00:01:26,320
in depth on on the internals

00:01:22,799 --> 00:01:27,119
how plasma used to work how plasma works

00:01:26,320 --> 00:01:31,840
now

00:01:27,119 --> 00:01:36,079
and how can we make it work

00:01:31,840 --> 00:01:40,240
in the future as

00:01:36,079 --> 00:01:43,920
we are starting to to do some work

00:01:40,240 --> 00:01:46,960
and still gathering idea for

00:01:43,920 --> 00:01:50,479
what we can what we can and want to do

00:01:46,960 --> 00:01:57,600
for tf6 and plasma 6.

00:01:50,479 --> 00:02:01,119
um so how plasma began plasma began

00:01:57,600 --> 00:02:04,960
uh in the early days of

00:02:01,119 --> 00:02:08,479
uh kd3 to the kd4 transition in those

00:02:04,960 --> 00:02:11,680
very interesting times so

00:02:08,479 --> 00:02:14,959
the first public release was

00:02:11,680 --> 00:02:18,160
with kd 4.0 that's

00:02:14,959 --> 00:02:23,440
how it used to look uh

00:02:18,160 --> 00:02:26,560
it changed a lot luckily also um

00:02:23,440 --> 00:02:30,480
since then on the surface but many

00:02:26,560 --> 00:02:33,599
of the internal concepts are

00:02:30,480 --> 00:02:37,760
still pretty similar and

00:02:33,599 --> 00:02:41,519
very valid today

00:02:37,760 --> 00:02:43,280
so this first part would be kind of a

00:02:41,519 --> 00:02:47,280
repetition

00:02:43,280 --> 00:02:51,040
uh with the training by

00:02:47,280 --> 00:02:55,040
uh caving on friday but

00:02:51,040 --> 00:02:58,400
we'll we'll refresh it a bit

00:02:55,040 --> 00:03:01,920
and then go on

00:02:58,400 --> 00:03:01,920
what we can do for the future

00:03:02,319 --> 00:03:08,720
so in the early

00:03:05,440 --> 00:03:12,560
uh kd4 times uh

00:03:08,720 --> 00:03:16,000
plasma was old built around

00:03:12,560 --> 00:03:19,120
a framework from cute which

00:03:16,000 --> 00:03:20,879
was called was called the q graphics

00:03:19,120 --> 00:03:24,319
view

00:03:20,879 --> 00:03:28,239
it was an early attempt of going

00:03:24,319 --> 00:03:28,239
over the limitations of

00:03:28,879 --> 00:03:37,360
of the q widgets

00:03:32,640 --> 00:03:37,360
api uh it

00:03:37,519 --> 00:03:44,319
wasn't completely successful

00:03:40,560 --> 00:03:46,640
uh because it was still very much

00:03:44,319 --> 00:03:47,760
software rendering based and cue painter

00:03:46,640 --> 00:03:50,799
based

00:03:47,760 --> 00:03:54,400
but for sure it

00:03:50,799 --> 00:03:54,400
did teach many lessons

00:03:56,400 --> 00:04:05,040
it's we in plasma 5 we ported it

00:04:01,200 --> 00:04:08,799
almost completely out of

00:04:05,040 --> 00:04:10,000
of queue graphics view there are still

00:04:08,799 --> 00:04:13,599
some

00:04:10,000 --> 00:04:18,799
external applications that still do some

00:04:13,599 --> 00:04:18,799
use of it like the dolphin icon view

00:04:19,919 --> 00:04:28,080
so uh how how you used to work

00:04:23,759 --> 00:04:30,880
there was a

00:04:28,080 --> 00:04:31,520
central class called the corona that i

00:04:30,880 --> 00:04:34,639
guarantee

00:04:31,520 --> 00:04:36,800
back in the in those times corona was a

00:04:34,639 --> 00:04:39,600
completely innocent name

00:04:36,800 --> 00:04:40,560
uh even though they nowadays is it it

00:04:39,600 --> 00:04:42,479
probably

00:04:40,560 --> 00:04:44,960
really needs a new name for obvious

00:04:42,479 --> 00:04:49,520
reasons

00:04:44,960 --> 00:04:52,400
it was the reason was

00:04:49,520 --> 00:04:52,800
with the corona of the sun which is

00:04:52,400 --> 00:04:56,560
where

00:04:52,800 --> 00:04:59,840
plasma lives uh that

00:04:56,560 --> 00:05:02,720
was a subclass of a q

00:04:59,840 --> 00:05:02,720
graphic scene

00:05:02,960 --> 00:05:06,320
so the corona

00:05:06,639 --> 00:05:13,919
was what contained every single

00:05:10,080 --> 00:05:17,039
graphical element that you've seen

00:05:13,919 --> 00:05:21,440
in in

00:05:17,039 --> 00:05:25,840
in the plasma desktop and plasma panels

00:05:21,440 --> 00:05:30,000
as as the first level

00:05:25,840 --> 00:05:33,600
this corona contained objects called

00:05:30,000 --> 00:05:37,520
the containments that could have

00:05:33,600 --> 00:05:40,960
as many as as as we wanted

00:05:37,520 --> 00:05:44,160
they could be desktop

00:05:40,960 --> 00:05:47,840
containment so your best wallpaper

00:05:44,160 --> 00:05:50,479
with icons on desktop widgets

00:05:47,840 --> 00:05:50,479
and whatnot

00:05:50,960 --> 00:05:56,000
one for each screen and one for each

00:05:53,440 --> 00:05:58,479
activity

00:05:56,000 --> 00:05:59,039
and it also contained uh the several

00:05:58,479 --> 00:06:02,880
panels

00:05:59,039 --> 00:06:06,960
all of them were uh where containment

00:06:02,880 --> 00:06:10,720
the containment was as a subclass

00:06:06,960 --> 00:06:15,039
and still is a subclass of uh

00:06:10,720 --> 00:06:18,080
applet which

00:06:15,039 --> 00:06:21,840
at those time it was a subclass of q

00:06:18,080 --> 00:06:21,840
graphics widgets so

00:06:22,720 --> 00:06:30,560
applet was both the center of the logic

00:06:26,880 --> 00:06:34,720
of the plasmoid and of the

00:06:30,560 --> 00:06:37,759
graphical representation um

00:06:34,720 --> 00:06:41,600
a containment as the name suggests

00:06:37,759 --> 00:06:44,000
it um it could

00:06:41,600 --> 00:06:44,960
instantiate inside of it inside of it

00:06:44,000 --> 00:06:47,120
many

00:06:44,960 --> 00:06:49,440
many applets so it could it could

00:06:47,120 --> 00:06:50,800
contain the desktop could contain many

00:06:49,440 --> 00:06:53,199
widgets

00:06:50,800 --> 00:06:54,400
and the panel could contain many

00:06:53,199 --> 00:06:57,440
components as well

00:06:54,400 --> 00:07:00,000
your your start menu

00:06:57,440 --> 00:07:03,840
uh the task the task manager this is a

00:07:00,000 --> 00:07:03,840
try and whatnot

00:07:06,240 --> 00:07:12,880
a plasmoid usually was

00:07:09,919 --> 00:07:13,759
a c plus plus plugin which extended so

00:07:12,880 --> 00:07:17,199
subclasses

00:07:13,759 --> 00:07:20,880
either applied or containment

00:07:17,199 --> 00:07:24,639
later we built several bindings

00:07:20,880 --> 00:07:27,360
of different languages we had javascript

00:07:24,639 --> 00:07:29,120
that way before qml what it was still

00:07:27,360 --> 00:07:30,560
not a thing so it was javascript but

00:07:29,120 --> 00:07:33,120
very

00:07:30,560 --> 00:07:33,840
imperative based and we had piton and

00:07:33,120 --> 00:07:37,360
root b

00:07:33,840 --> 00:07:41,280
and just in the last in the last years

00:07:37,360 --> 00:07:44,639
of kd4 we introduced the cumulb binding

00:07:41,280 --> 00:07:48,160
that later in plasma 5 it

00:07:44,639 --> 00:07:51,520
grown up and he eaten eaten up

00:07:48,160 --> 00:07:51,520
everything else because

00:07:51,840 --> 00:07:59,039
we were

00:07:55,039 --> 00:08:02,319
pretty fed up to to to um

00:07:59,039 --> 00:08:06,720
to be sincere with the q graphic scene

00:08:02,319 --> 00:08:07,360
uh so uh qml was also q graphic scene

00:08:06,720 --> 00:08:10,960
based

00:08:07,360 --> 00:08:14,080
in q84 in kit5 it introduced its

00:08:10,960 --> 00:08:15,039
it's new rendering engine uh the human

00:08:14,080 --> 00:08:19,280
scene graph

00:08:15,039 --> 00:08:22,560
and we wanted we wanted to go there

00:08:19,280 --> 00:08:26,639
uh also because with

00:08:22,560 --> 00:08:28,639
uh with this completely software-based

00:08:26,639 --> 00:08:32,479
rendering that there were

00:08:28,639 --> 00:08:35,120
significant performance reasons uh

00:08:32,479 --> 00:08:37,200
limitations like resizing a very big

00:08:35,120 --> 00:08:40,479
airplane

00:08:37,200 --> 00:08:43,839
sometimes it went down to

00:08:40,479 --> 00:08:47,200
four or five frames per second which was

00:08:43,839 --> 00:08:50,399
really not acceptable so we

00:08:47,200 --> 00:08:51,360
we very enthusiastically uh jumped on

00:08:50,399 --> 00:08:55,839
the qml

00:08:51,360 --> 00:08:55,839
bandwagon on

00:08:56,080 --> 00:09:03,040
or as a nice side effect

00:08:59,519 --> 00:09:07,120
uh the triad of

00:09:03,040 --> 00:09:11,120
the the main

00:09:07,120 --> 00:09:11,120
classes in plasma became

00:09:11,360 --> 00:09:14,720
migrated from being also graphics

00:09:14,080 --> 00:09:17,760
objects

00:09:14,720 --> 00:09:18,800
to being pure key objects so pure purely

00:09:17,760 --> 00:09:22,000
logic

00:09:18,800 --> 00:09:25,680
without a particular representation

00:09:22,000 --> 00:09:29,120
attached which is nice as a downside

00:09:25,680 --> 00:09:29,920
we lost pretty much all the bindings

00:09:29,120 --> 00:09:33,839
that were

00:09:29,920 --> 00:09:37,120
not qml but

00:09:33,839 --> 00:09:41,519
but we uh

00:09:37,120 --> 00:09:44,880
we still had all the the the complete

00:09:41,519 --> 00:09:49,120
language band binding infrastructure

00:09:44,880 --> 00:09:52,399
uh that we had even if even if it

00:09:49,120 --> 00:09:54,160
can have one and only one and also

00:09:52,399 --> 00:09:55,920
also those bindings were c plus plus

00:09:54,160 --> 00:09:58,880
plugins so

00:09:55,920 --> 00:10:00,480
uh in plasma 5 we have exactly one

00:09:58,880 --> 00:10:04,640
plugin

00:10:00,480 --> 00:10:08,240
for for bindings uh that is the qml one

00:10:04,640 --> 00:10:11,920
which is mandatory to use so it doesn't

00:10:08,240 --> 00:10:12,800
really make much sense that it's uh that

00:10:11,920 --> 00:10:16,480
it's a plugin

00:10:12,800 --> 00:10:18,560
so this thing and these

00:10:16,480 --> 00:10:20,880
this component is something is something

00:10:18,560 --> 00:10:24,880
that we probably can do without

00:10:20,880 --> 00:10:27,920
and we can simplify

00:10:24,880 --> 00:10:31,360
uh so

00:10:27,920 --> 00:10:34,959
um are we happy

00:10:31,360 --> 00:10:38,320
in plasma framework as is now

00:10:34,959 --> 00:10:42,399
we all know that it's it's way too big

00:10:38,320 --> 00:10:44,880
it has way too many dependencies

00:10:42,399 --> 00:10:46,959
and it offers function some

00:10:44,880 --> 00:10:48,399
functionalities that are still needed

00:10:46,959 --> 00:10:51,760
some functionalities that

00:10:48,399 --> 00:10:57,120
are that are

00:10:51,760 --> 00:11:00,399
pretty okay uh some functionality that

00:10:57,120 --> 00:11:04,160
are not really needed anymore

00:11:00,399 --> 00:11:07,920
the kind of different

00:11:04,160 --> 00:11:11,360
paradigm that that developed

00:11:07,920 --> 00:11:14,560
over time by by

00:11:11,360 --> 00:11:17,680
development kml based ui

00:11:14,560 --> 00:11:19,360
made some some of that framework

00:11:17,680 --> 00:11:22,800
redundant

00:11:19,360 --> 00:11:25,519
so the part of of layout loading with

00:11:22,800 --> 00:11:26,240
corona contaminated applet is fine there

00:11:25,519 --> 00:11:28,320
are some

00:11:26,240 --> 00:11:30,560
important things to change there but

00:11:28,320 --> 00:11:30,560
it's

00:11:30,640 --> 00:11:37,760
more or less good to go i think

00:11:34,640 --> 00:11:41,120
um well the the big

00:11:37,760 --> 00:11:43,279
the big the big thing is uh

00:11:41,120 --> 00:11:45,279
containment how it manages screen

00:11:43,279 --> 00:11:46,800
ownership it does have problem with

00:11:45,279 --> 00:11:49,920
multi-screen

00:11:46,800 --> 00:11:53,680
this will need will need a bit more

00:11:49,920 --> 00:11:57,519
thinking about some pieces

00:11:53,680 --> 00:12:00,800
can be i think in kf6

00:11:57,519 --> 00:12:03,839
they really should become their

00:12:00,800 --> 00:12:07,360
their own framework uh

00:12:03,839 --> 00:12:11,839
one example is

00:12:07,360 --> 00:12:11,839
all the svg infrastructure

00:12:13,240 --> 00:12:20,240
[Music]

00:12:15,519 --> 00:12:23,440
so to do basically exactly like we did

00:12:20,240 --> 00:12:24,639
back in the day with the k package which

00:12:23,440 --> 00:12:28,800
was

00:12:24,639 --> 00:12:32,880
used to be a part of plasma framework

00:12:28,800 --> 00:12:37,600
svg is based on top of qt svg so

00:12:32,880 --> 00:12:39,279
it is still kind of limited to tiny svg

00:12:37,600 --> 00:12:41,600
but

00:12:39,279 --> 00:12:42,399
it's for what it has to do it's it's

00:12:41,600 --> 00:12:47,200
fine

00:12:42,399 --> 00:12:50,240
um a library that loads

00:12:47,200 --> 00:12:52,160
basic shapes is is

00:12:50,240 --> 00:12:53,519
something that it they did that it's

00:12:52,160 --> 00:12:57,120
always okay

00:12:53,519 --> 00:13:00,639
uh but on top of cute svg it has

00:12:57,120 --> 00:13:04,320
pretty nice features uh one of it

00:13:00,639 --> 00:13:06,639
is uh discussion so uh by by profiling

00:13:04,320 --> 00:13:06,639
things

00:13:07,120 --> 00:13:15,360
we discovered that that the the

00:13:11,600 --> 00:13:18,320
the biggest part of startup time while

00:13:15,360 --> 00:13:18,320
loading svg

00:13:19,440 --> 00:13:24,079
is uh the actual instantiation and

00:13:22,399 --> 00:13:28,840
parsing of the svg file

00:13:24,079 --> 00:13:29,920
clearly uh so it does um

00:13:28,840 --> 00:13:33,519
[Music]

00:13:29,920 --> 00:13:33,519
it it does uh

00:13:33,600 --> 00:13:40,959
on disk caching of the rendered pixmaps

00:13:37,839 --> 00:13:41,279
which can improve startup time of almost

00:13:40,959 --> 00:13:44,560
an

00:13:41,279 --> 00:13:44,560
order of magnitude

00:13:44,639 --> 00:13:50,000
in in the instantiation time of that

00:13:47,120 --> 00:13:50,000
particular thing

00:13:52,079 --> 00:13:55,360
also also another another thing that

00:13:54,800 --> 00:13:59,199
it's

00:13:55,360 --> 00:14:02,560
pretty nice in the plasma svg support

00:13:59,199 --> 00:14:06,000
is a is a basic stylesheet support

00:14:02,560 --> 00:14:10,000
uh so we can recolor some

00:14:06,000 --> 00:14:13,440
elements in the svg uh according to

00:14:10,000 --> 00:14:16,639
uh the system colors

00:14:13,440 --> 00:14:19,120
so it's uh it's

00:14:16,639 --> 00:14:20,320
very convenient for instance if you have

00:14:19,120 --> 00:14:23,839
a monochromatic

00:14:20,320 --> 00:14:27,360
team uh like most of the actions

00:14:23,839 --> 00:14:30,880
in the in the breeze icon team are

00:14:27,360 --> 00:14:33,920
you can recolor them for

00:14:30,880 --> 00:14:35,600
different color scheme without having to

00:14:33,920 --> 00:14:39,040
have

00:14:35,600 --> 00:14:42,079
a duplicate theme just for four

00:14:39,040 --> 00:14:45,600
different color schemes at least one for

00:14:42,079 --> 00:14:46,399
for light schemes and one for dark

00:14:45,600 --> 00:14:49,120
schemes

00:14:46,399 --> 00:14:51,040
you can you can just recolor the same

00:14:49,120 --> 00:14:58,079
stuff

00:14:51,040 --> 00:15:01,839
and also you can do pieces of the ui

00:14:58,079 --> 00:15:04,639
pieces of the ui uh in svg

00:15:01,839 --> 00:15:05,360
with those pieces that follow button

00:15:04,639 --> 00:15:09,360
colors

00:15:05,360 --> 00:15:12,800
and whatnot we also have frame svg

00:15:09,360 --> 00:15:16,160
which is uh also pretty useful is they

00:15:12,800 --> 00:15:19,519
is the classical nine patches image

00:15:16,160 --> 00:15:20,800
i used to do a style decorated render

00:15:19,519 --> 00:15:25,360
rectangles that

00:15:20,800 --> 00:15:25,360
you can scale without the corners

00:15:25,760 --> 00:15:32,320
being horribly deformed uh on the

00:15:29,839 --> 00:15:32,320
on the

00:15:33,120 --> 00:15:38,399
uh qml bindings it has also some uh

00:15:36,399 --> 00:15:40,079
basic support for hardware acceleration

00:15:38,399 --> 00:15:43,600
so resizing them

00:15:40,079 --> 00:15:44,560
is very fast but we still all still have

00:15:43,600 --> 00:15:47,759
a

00:15:44,560 --> 00:15:51,040
complete q painter api so

00:15:47,759 --> 00:15:55,759
it could be it could be well used

00:15:51,040 --> 00:16:00,639
uh both in key widget space

00:15:55,759 --> 00:16:03,920
applications and qml applications

00:16:00,639 --> 00:16:07,360
if at least if we if we get it

00:16:03,920 --> 00:16:10,480
on a low tier enough

00:16:07,360 --> 00:16:13,920
the only concern for the tier

00:16:10,480 --> 00:16:15,519
is the use of kpix map cache that rises

00:16:13,920 --> 00:16:19,920
a bit but

00:16:15,519 --> 00:16:23,120
that shouldn't be bad another big part

00:16:19,920 --> 00:16:24,079
in plasma framework is data engines data

00:16:23,120 --> 00:16:26,959
engines

00:16:24,079 --> 00:16:31,120
uh is is one of the things that were

00:16:26,959 --> 00:16:31,120
that were a really good idea at the time

00:16:31,440 --> 00:16:39,680
they are a mechanism

00:16:35,040 --> 00:16:39,680
for having a

00:16:39,920 --> 00:16:47,279
plugin based logic based

00:16:43,279 --> 00:16:51,600
upon data extraction

00:16:47,279 --> 00:16:55,360
and and write operation

00:16:51,600 --> 00:16:58,480
with a with a job api uh they were

00:16:55,360 --> 00:17:03,920
thought mostly for

00:16:58,480 --> 00:17:07,520
the early imperative javascript bindings

00:17:03,920 --> 00:17:11,280
so also to give them to

00:17:07,520 --> 00:17:12,400
to give those javascript bindings a kind

00:17:11,280 --> 00:17:15,839
of

00:17:12,400 --> 00:17:18,799
web feeling based api

00:17:15,839 --> 00:17:20,079
at some point we also had support for

00:17:18,799 --> 00:17:23,679
remote data engines

00:17:20,079 --> 00:17:25,039
so you could have a plasma running on a

00:17:23,679 --> 00:17:28,000
machine

00:17:25,039 --> 00:17:28,799
fetching data from a different machine

00:17:28,000 --> 00:17:31,840
it was

00:17:28,799 --> 00:17:35,840
it was a cool idea but never really

00:17:31,840 --> 00:17:36,480
executed to the end an idea that in my

00:17:35,840 --> 00:17:40,480
opinion

00:17:36,480 --> 00:17:43,840
in other places is still is still worth

00:17:40,480 --> 00:17:46,480
to explore um

00:17:43,840 --> 00:17:47,440
also with the help of kde connect i

00:17:46,480 --> 00:17:50,720
guess

00:17:47,440 --> 00:17:54,640
but not with this api uh also

00:17:50,720 --> 00:17:58,240
also that api

00:17:54,640 --> 00:18:01,760
was really subject of

00:17:58,240 --> 00:18:02,880
made it too easy to to do spaghetti code

00:18:01,760 --> 00:18:05,600
implementations

00:18:02,880 --> 00:18:06,960
so most of the data engines

00:18:05,600 --> 00:18:10,000
implementation are

00:18:06,960 --> 00:18:14,000
really not pretty to look at

00:18:10,000 --> 00:18:16,559
so it's something that we will probably

00:18:14,000 --> 00:18:16,559
retire

00:18:17,520 --> 00:18:24,320
i already tried and did

00:18:20,640 --> 00:18:27,679
a a standalone

00:18:24,320 --> 00:18:28,880
data engine library which could be used

00:18:27,679 --> 00:18:32,480
in plasma 6

00:18:28,880 --> 00:18:36,080
just as a porting aid could

00:18:32,480 --> 00:18:42,240
live in more space with the name

00:18:36,080 --> 00:18:44,960
plasma 5 support and

00:18:42,240 --> 00:18:44,960
and uh

00:18:45,919 --> 00:18:53,760
on for acumen plasmoid is

00:18:49,600 --> 00:18:58,880
much easier and much more elegant

00:18:53,760 --> 00:18:58,880
to instead binding a q object with

00:18:59,520 --> 00:19:03,840
with properties signals slots and what

00:19:02,880 --> 00:19:07,039
not

00:19:03,840 --> 00:19:10,480
just just to pay attention

00:19:07,039 --> 00:19:14,799
of not doing big things

00:19:10,480 --> 00:19:17,520
sync operations in the in the slots

00:19:14,799 --> 00:19:18,320
as the data engines were very explicit

00:19:17,520 --> 00:19:22,880
of

00:19:18,320 --> 00:19:22,880
in them being very async

00:19:23,440 --> 00:19:30,000
but but in general uh

00:19:26,960 --> 00:19:33,200
is something that teaches

00:19:30,000 --> 00:19:37,200
it did teach us many things but

00:19:33,200 --> 00:19:42,080
we probably not need that

00:19:37,200 --> 00:19:46,160
uh anymore part uh which is uh

00:19:42,080 --> 00:19:49,200
which is mostly okay until

00:19:46,160 --> 00:19:52,400
the the step of the binding

00:19:49,200 --> 00:19:53,840
is the la the layout loading so how how

00:19:52,400 --> 00:19:57,919
does it work

00:19:53,840 --> 00:19:58,640
at the moment the whole layout for the

00:19:57,919 --> 00:20:02,880
desktop

00:19:58,640 --> 00:20:02,880
is serialized in

00:20:04,159 --> 00:20:11,600
a configuration file the applets

00:20:07,760 --> 00:20:11,600
applets rc configuration file

00:20:11,840 --> 00:20:20,480
the corona reads that

00:20:16,080 --> 00:20:23,039
and from the top

00:20:20,480 --> 00:20:23,520
config group called containments it

00:20:23,039 --> 00:20:28,640
reads

00:20:23,520 --> 00:20:28,640
all the subgroups each of the subgroups

00:20:29,039 --> 00:20:32,000
that is

00:20:32,880 --> 00:20:36,400
that is in the name of in the structure

00:20:35,200 --> 00:20:39,600
of a number so

00:20:36,400 --> 00:20:39,600
you have like uh

00:20:40,320 --> 00:20:43,200
containments

00:20:43,679 --> 00:20:46,400
like one

00:20:47,360 --> 00:20:52,559
each group with with this structure

00:20:50,400 --> 00:20:55,360
will uh will represent a different

00:20:52,559 --> 00:20:58,240
containment so corona will instantiate

00:20:55,360 --> 00:21:00,480
a containment instance for each one of

00:20:58,240 --> 00:21:00,480
them

00:21:01,039 --> 00:21:05,200
doesn't matter if they are desktops or

00:21:03,360 --> 00:21:08,880
if they are panels

00:21:05,200 --> 00:21:13,039
uh then each one of the containments um

00:21:08,880 --> 00:21:17,919
restore its own config and then

00:21:13,039 --> 00:21:21,679
and then looks in its applet applets

00:21:17,919 --> 00:21:25,120
config group so under it it will be

00:21:21,679 --> 00:21:28,000
an an applet config group and then

00:21:25,120 --> 00:21:29,679
numbers again so uh for each one of

00:21:28,000 --> 00:21:33,280
those subgroups

00:21:29,679 --> 00:21:36,720
it will instantiate a new applet which

00:21:33,280 --> 00:21:40,000
will have the containment as its parent

00:21:36,720 --> 00:21:40,850
in the key object sense and then the

00:21:40,000 --> 00:21:43,120
applet will

00:21:40,850 --> 00:21:46,720
[Applause]

00:21:43,120 --> 00:21:50,159
will restore its configuration

00:21:46,720 --> 00:21:52,559
and um

00:21:50,159 --> 00:21:53,280
and this is the part to to slightly

00:21:52,559 --> 00:21:56,799
modify

00:21:53,280 --> 00:22:01,919
in my opinion uh at this moment

00:21:56,799 --> 00:22:05,280
it loads the qmls crypting plugin

00:22:01,919 --> 00:22:08,559
which then loads the qml

00:22:05,280 --> 00:22:12,000
and creates an object

00:22:08,559 --> 00:22:14,640
of a class called the applet interface

00:22:12,000 --> 00:22:15,440
which is a q quick item and is the

00:22:14,640 --> 00:22:19,039
parent

00:22:15,440 --> 00:22:20,640
of the uh of the

00:22:19,039 --> 00:22:22,480
actual representation that it's

00:22:20,640 --> 00:22:24,960
contained uh in the

00:22:22,480 --> 00:22:27,840
in the actual plasma qml a plate

00:22:24,960 --> 00:22:31,360
interface is uh

00:22:27,840 --> 00:22:34,799
is a pretty much a wrapper of uh

00:22:31,360 --> 00:22:36,159
most of the applet uh and containment

00:22:34,799 --> 00:22:39,919
api

00:22:36,159 --> 00:22:43,760
uh so it's it's kind of redundant but

00:22:39,919 --> 00:22:47,360
is the thing that

00:22:43,760 --> 00:22:50,000
again gets registered as a context

00:22:47,360 --> 00:22:50,000
property

00:22:50,480 --> 00:22:57,840
as a context property

00:22:54,320 --> 00:22:58,640
incumble in the in the camera root

00:22:57,840 --> 00:23:01,919
context

00:22:58,640 --> 00:23:05,679
of that that

00:23:01,919 --> 00:23:08,000
applet as that plasmoid object

00:23:05,679 --> 00:23:09,679
which you can see it used all over the

00:23:08,000 --> 00:23:12,960
place in most

00:23:09,679 --> 00:23:16,559
plasmod's implementations

00:23:12,960 --> 00:23:18,640
you can access plasmoid.form factor

00:23:16,559 --> 00:23:22,559
to see if you are in a panel or a

00:23:18,640 --> 00:23:24,799
desktop you can access plasmoid.config

00:23:22,559 --> 00:23:27,360
to read and write the configuration and

00:23:24,799 --> 00:23:27,360
so on

00:23:30,159 --> 00:23:35,760
another uh part which i think

00:23:33,600 --> 00:23:37,520
it's pretty good and i will just improve

00:23:35,760 --> 00:23:41,840
on that is the concept of the

00:23:37,520 --> 00:23:45,760
shell packages those are

00:23:41,840 --> 00:23:49,440
also a collection of qml files

00:23:45,760 --> 00:23:53,120
distributed in a k package

00:23:49,440 --> 00:23:55,360
structure they are used

00:23:53,120 --> 00:23:55,360
to

00:23:56,240 --> 00:24:00,240
to customize a bit the behavior of the

00:23:59,360 --> 00:24:03,520
main windows

00:24:00,240 --> 00:24:06,799
so uh

00:24:03,520 --> 00:24:07,520
mostly the panel window uh the desktop

00:24:06,799 --> 00:24:10,559
window

00:24:07,520 --> 00:24:13,360
and uh the configuration dialogs

00:24:10,559 --> 00:24:13,760
and things like the widget explorer the

00:24:13,360 --> 00:24:17,520
uh

00:24:13,760 --> 00:24:23,120
activities which are and what not they

00:24:17,520 --> 00:24:26,559
they were born in very late in the kd4

00:24:23,120 --> 00:24:29,760
life cycle for plasma active where

00:24:26,559 --> 00:24:33,120
we needed to have a plasma shell

00:24:29,760 --> 00:24:34,400
much more mobile optimized and the main

00:24:33,120 --> 00:24:37,919
desktop shell had

00:24:34,400 --> 00:24:41,120
a lot of keywidget based ui for

00:24:37,919 --> 00:24:44,720
for those kind of things so we

00:24:41,120 --> 00:24:48,159
we added the possibility of

00:24:44,720 --> 00:24:51,760
of redefining all of that in

00:24:48,159 --> 00:24:55,440
in qml and

00:24:51,760 --> 00:24:59,440
nowadays is used in the plasma desktop

00:24:55,440 --> 00:25:03,760
has as its own plasma mobile

00:24:59,440 --> 00:25:06,640
as its own and also plasma big screen

00:25:03,760 --> 00:25:07,039
which both are based on a base package

00:25:06,640 --> 00:25:10,480
called

00:25:07,039 --> 00:25:14,080
plasma nano which it's more its

00:25:10,480 --> 00:25:16,640
biggest target is mostly just to be

00:25:14,080 --> 00:25:16,640
minimal

00:25:17,600 --> 00:25:24,720
i will later talk a bit about

00:25:20,960 --> 00:25:28,960
just a detail how i would make them

00:25:24,720 --> 00:25:31,360
slightly better then

00:25:28,960 --> 00:25:32,559
uh here those are the script engines uh

00:25:31,360 --> 00:25:36,880
the other part

00:25:32,559 --> 00:25:36,880
that i would like to eliminate so um

00:25:37,919 --> 00:25:46,559
right now we have

00:25:41,200 --> 00:25:46,559
the appletscript class in plasma

00:25:46,720 --> 00:25:54,080
in plasma framework that that then gets

00:25:49,960 --> 00:25:54,080
re-implemented by plugins

00:25:54,720 --> 00:25:58,240
and by c plus plus plugin in the only

00:25:56,960 --> 00:26:01,679
plugin that we have

00:25:58,240 --> 00:26:04,799
is uh the qml script engine

00:26:01,679 --> 00:26:08,840
that then reimplements its

00:26:04,799 --> 00:26:10,180
own almost complete applet api

00:26:08,840 --> 00:26:12,559
wrapper

00:26:10,180 --> 00:26:16,080
[Applause]

00:26:12,559 --> 00:26:19,200
we should probably eliminate them

00:26:16,080 --> 00:26:21,919
even if i would like to

00:26:19,200 --> 00:26:23,360
eventually get back the point on the

00:26:21,919 --> 00:26:27,200
python bindings

00:26:23,360 --> 00:26:30,080
but i don't think with this api

00:26:27,200 --> 00:26:31,600
it should probably just have the

00:26:30,080 --> 00:26:34,640
possibility of

00:26:31,600 --> 00:26:35,200
shipping python files in the packages i

00:26:34,640 --> 00:26:38,320
guess

00:26:35,200 --> 00:26:41,600
and then he found

00:26:38,320 --> 00:26:44,720
the executed and the python file

00:26:41,600 --> 00:26:46,559
can do a qml register type for instance

00:26:44,720 --> 00:26:50,480
or

00:26:46,559 --> 00:26:50,480
whatever needs to be discussed

00:26:50,840 --> 00:26:57,360
um i did

00:26:53,679 --> 00:27:01,600
a very small prototype for now

00:26:57,360 --> 00:27:01,600
um but

00:27:01,760 --> 00:27:05,200
it's it's already pretty useful to uh to

00:27:04,720 --> 00:27:08,799
clear

00:27:05,200 --> 00:27:10,159
our ideas at the moment is the plasma

00:27:08,799 --> 00:27:13,600
framework fork

00:27:10,159 --> 00:27:16,880
which lives in my personal

00:27:13,600 --> 00:27:21,840
area on event

00:27:16,880 --> 00:27:21,840
everything that does at the moment is

00:27:22,000 --> 00:27:29,039
uh is just loading a single view

00:27:26,159 --> 00:27:29,919
uh with a single containment with a

00:27:29,039 --> 00:27:33,440
single applet

00:27:29,919 --> 00:27:36,480
in but

00:27:33,440 --> 00:27:41,840
it does have most

00:27:36,480 --> 00:27:41,840
of the required things in place

00:27:43,200 --> 00:27:46,880
just just just not all the polish just

00:27:46,159 --> 00:27:49,600
not

00:27:46,880 --> 00:27:51,840
all the things to be able to manage

00:27:49,600 --> 00:27:55,200
multi-screen and whatnot

00:27:51,840 --> 00:27:59,679
that will needed to be

00:27:55,200 --> 00:28:03,279
to be taught but

00:27:59,679 --> 00:28:05,520
with these with that uh uh

00:28:03,279 --> 00:28:06,960
with that prototype and with that

00:28:05,520 --> 00:28:10,000
refactor that i'm uh

00:28:06,960 --> 00:28:10,720
subject that i'm proposing uh should be

00:28:10,000 --> 00:28:15,200
possible

00:28:10,720 --> 00:28:18,880
also to um

00:28:15,200 --> 00:28:18,880
to to lower

00:28:18,960 --> 00:28:25,679
lower the tier also of the the

00:28:22,320 --> 00:28:29,679
the frame more significantly i

00:28:25,679 --> 00:28:30,159
still didn't fully get rid of kxml we

00:28:29,679 --> 00:28:33,600
use

00:28:30,159 --> 00:28:36,720
but i think that should also be possible

00:28:33,600 --> 00:28:40,880
then whether whether it's

00:28:36,720 --> 00:28:44,320
the result we live in

00:28:40,880 --> 00:28:48,399
in frameworks or in workspace

00:28:44,320 --> 00:28:51,760
it should be much more easy to maintain

00:28:48,399 --> 00:28:55,200
anyways so

00:28:51,760 --> 00:28:58,240
uh to recap uh

00:28:55,200 --> 00:29:01,520
we will have one one for from

00:28:58,240 --> 00:29:02,480
from the dd current code of plasma

00:29:01,520 --> 00:29:05,600
framework

00:29:02,480 --> 00:29:07,039
adding one framework which is uh the svg

00:29:05,600 --> 00:29:10,159
stuff

00:29:07,039 --> 00:29:11,039
uh plasma framework will begin will

00:29:10,159 --> 00:29:16,559
become

00:29:11,039 --> 00:29:16,559
basically a corona

00:29:17,039 --> 00:29:26,720
containment the

00:29:20,159 --> 00:29:29,840
holy trinity and applets

00:29:26,720 --> 00:29:33,600
and not and not much more

00:29:29,840 --> 00:29:37,039
uh though that and the basic

00:29:33,600 --> 00:29:40,880
uh loading loading of of

00:29:37,039 --> 00:29:44,080
qml stuff also living there

00:29:40,880 --> 00:29:48,480
and and data

00:29:44,080 --> 00:29:52,399
engines uh that engines die

00:29:48,480 --> 00:29:55,679
all these script engine stuff die uh

00:29:52,399 --> 00:29:59,440
other things uh like

00:29:55,679 --> 00:30:03,440
the uh context

00:29:59,440 --> 00:30:07,600
the context menu plugins uh those

00:30:03,440 --> 00:30:11,120
can also probably live elsewhere

00:30:07,600 --> 00:30:13,360
just just in

00:30:11,120 --> 00:30:15,919
the final plasma shell implementation

00:30:13,360 --> 00:30:15,919
probably

00:30:17,679 --> 00:30:24,799
so the life cycle will would

00:30:21,039 --> 00:30:24,799
not change significantly

00:30:28,799 --> 00:30:34,000
the part that corona parses

00:30:31,840 --> 00:30:35,760
up letter c and then creates the

00:30:34,000 --> 00:30:36,399
containments and then creates the

00:30:35,760 --> 00:30:39,039
applets

00:30:36,399 --> 00:30:40,960
and then contain and create the applets

00:30:39,039 --> 00:30:43,919
from the config file that

00:30:40,960 --> 00:30:43,919
would not change

00:30:44,240 --> 00:30:49,840
the way on how

00:30:47,520 --> 00:30:52,080
containments are assigned to screens

00:30:49,840 --> 00:30:55,679
that needs a bit more discussion

00:30:52,080 --> 00:30:55,679
so i'm not sure yet

00:30:57,760 --> 00:31:02,720
what what will change is that the view

00:31:02,840 --> 00:31:09,440
um when

00:31:06,080 --> 00:31:10,240
it it gets a containment uh it will

00:31:09,440 --> 00:31:13,440
ensure

00:31:10,240 --> 00:31:18,559
that the qml part of the containment

00:31:13,440 --> 00:31:22,080
is instantiated um

00:31:18,559 --> 00:31:24,159
and and then it will

00:31:22,080 --> 00:31:26,000
it will display it as the is the main

00:31:24,159 --> 00:31:30,000
thing of the view

00:31:26,000 --> 00:31:33,279
uh the containment

00:31:30,000 --> 00:31:34,399
uh will then instantiate the human part

00:31:33,279 --> 00:31:39,120
of

00:31:34,399 --> 00:31:41,519
any applet uh not not directly

00:31:39,120 --> 00:31:42,320
not directly and not from the c plus

00:31:41,519 --> 00:31:46,000
plus part

00:31:42,320 --> 00:31:49,600
but from the qml part uh so

00:31:46,000 --> 00:31:50,080
only each applet pointer uh arriving

00:31:49,600 --> 00:31:52,720
even

00:31:50,080 --> 00:31:53,840
just created or or just created because

00:31:52,720 --> 00:31:57,440
it was

00:31:53,840 --> 00:31:59,350
it was uh uh restored for the

00:31:57,440 --> 00:32:01,039
configuration

00:31:59,350 --> 00:32:03,519
[Applause]

00:32:01,039 --> 00:32:04,399
it creates an instance of applet

00:32:03,519 --> 00:32:07,519
container

00:32:04,399 --> 00:32:11,760
which which points to an applet

00:32:07,519 --> 00:32:14,960
and then applet container would create

00:32:11,760 --> 00:32:17,519
a dql part there will not

00:32:14,960 --> 00:32:18,880
be any more applied interface but will

00:32:17,519 --> 00:32:22,640
still have plasmoid

00:32:18,880 --> 00:32:23,760
in some form but should be better that

00:32:22,640 --> 00:32:29,840
plasmoid

00:32:23,760 --> 00:32:29,840
is just a pointer to applet directly

00:32:32,240 --> 00:32:38,320
so on the on the applet side so on the

00:32:35,360 --> 00:32:40,159
plasmoid developer side the structure

00:32:38,320 --> 00:32:43,200
the same

00:32:40,159 --> 00:32:44,880
all the human files in a k package i

00:32:43,200 --> 00:32:48,320
think that i would like

00:32:44,880 --> 00:32:53,200
is uh to force the

00:32:48,320 --> 00:32:56,399
root objects of the qml scene

00:32:53,200 --> 00:32:59,039
to be a particular class like usually in

00:32:56,399 --> 00:33:03,120
quick controls in kirigami applications

00:32:59,039 --> 00:33:03,120
you have to have an application window

00:33:05,200 --> 00:33:12,240
and i would like to have

00:33:09,519 --> 00:33:15,039
to to have plasma it's need to be an

00:33:12,240 --> 00:33:16,960
instance of plasmoid representation

00:33:15,039 --> 00:33:18,399
which in my prototype at the moment is a

00:33:16,960 --> 00:33:21,039
key object

00:33:18,399 --> 00:33:22,399
uh that just provides two properties

00:33:21,039 --> 00:33:27,279
compare representation of

00:33:22,399 --> 00:33:31,440
representation which are qml components

00:33:27,279 --> 00:33:31,440
that gets created only on demand

00:33:34,159 --> 00:33:37,679
the plasmod object that becomes the

00:33:36,159 --> 00:33:40,799
applet

00:33:37,679 --> 00:33:42,000
i would probably prefer it to be an

00:33:40,799 --> 00:33:45,039
attached property

00:33:42,000 --> 00:33:48,240
instead of a contact property which

00:33:45,039 --> 00:33:48,240
are kind of evil

00:33:50,559 --> 00:33:57,519
this is a example code

00:33:54,399 --> 00:34:00,000
already kind of functional uh

00:33:57,519 --> 00:34:01,120
so you have as root applet

00:34:00,000 --> 00:34:05,200
representation

00:34:01,120 --> 00:34:07,919
and then you can

00:34:05,200 --> 00:34:08,480
specify a compact representation as it's

00:34:07,919 --> 00:34:10,280
today

00:34:08,480 --> 00:34:12,399
this con compact and full

00:34:10,280 --> 00:34:16,000
representations

00:34:12,399 --> 00:34:18,480
they already uh they already exist

00:34:16,000 --> 00:34:21,119
and as is today compact representation

00:34:18,480 --> 00:34:22,320
99.9 percent of the times you don't need

00:34:21,119 --> 00:34:25,599
that

00:34:22,320 --> 00:34:28,000
uh it will just be by default that

00:34:25,599 --> 00:34:29,919
icon that is defined in the shell

00:34:28,000 --> 00:34:32,960
package

00:34:29,919 --> 00:34:36,399
or you could set it explicitly

00:34:32,960 --> 00:34:36,879
as null null to say that you don't want

00:34:36,399 --> 00:34:40,800
it

00:34:36,879 --> 00:34:44,399
your your plasma it's always

00:34:40,800 --> 00:34:44,800
it's always expanded like the taskbar

00:34:44,399 --> 00:34:47,599
that

00:34:44,800 --> 00:34:48,639
you don't want to uh to do that in a

00:34:47,599 --> 00:34:51,760
pop-up

00:34:48,639 --> 00:34:52,720
the full representation at the moment in

00:34:51,760 --> 00:34:57,919
plasma 5

00:34:52,720 --> 00:34:57,919
is optional uh in plasma 6 would be

00:35:01,599 --> 00:35:08,720
in um 6 would be mandatory as the

00:35:04,720 --> 00:35:08,720
root element is not a is not uh

00:35:09,680 --> 00:35:16,800
is not an arbitrary item anymore and

00:35:13,200 --> 00:35:17,599
from anywhere you could you could access

00:35:16,800 --> 00:35:20,320
plasmod

00:35:17,599 --> 00:35:21,440
in this way uh plasmaport coordinate

00:35:20,320 --> 00:35:24,960
plasmoid in

00:35:21,440 --> 00:35:27,280
any place of the human code

00:35:24,960 --> 00:35:28,400
from any file that you call it it will

00:35:27,280 --> 00:35:32,400
always

00:35:28,400 --> 00:35:35,599
return the same applet pointer

00:35:32,400 --> 00:35:38,320
uh as i said i would like to have a

00:35:35,599 --> 00:35:39,119
shell packages slightly more powerful i

00:35:38,320 --> 00:35:42,640
did not

00:35:39,119 --> 00:35:46,240
do experiments on that yet

00:35:42,640 --> 00:35:48,800
but uh at the moment the way they

00:35:46,240 --> 00:35:51,280
uh personalize like the panel window or

00:35:48,800 --> 00:35:54,400
the conversion dialog or the desktop

00:35:51,280 --> 00:35:57,119
they define the root elements

00:35:54,400 --> 00:35:58,960
of those windows what i would like to

00:35:57,119 --> 00:36:02,079
change is

00:35:58,960 --> 00:36:02,640
then to be able to define the window

00:36:02,079 --> 00:36:06,640
itself

00:36:02,640 --> 00:36:09,920
so the shell package would contain

00:36:06,640 --> 00:36:12,800
a panel.qml like now but

00:36:09,920 --> 00:36:13,359
instead of having an item as a root

00:36:12,800 --> 00:36:17,200
would have

00:36:13,359 --> 00:36:21,040
the panel view itself so on different

00:36:17,200 --> 00:36:23,839
on different shells you could have

00:36:21,040 --> 00:36:24,839
much more customized types of views that

00:36:23,839 --> 00:36:27,520
you may

00:36:24,839 --> 00:36:30,160
need in

00:36:27,520 --> 00:36:30,560
more embedded situations maybe maybe you

00:36:30,160 --> 00:36:33,839
want

00:36:30,560 --> 00:36:36,400
panels to not even be a view but

00:36:33,839 --> 00:36:36,960
but be in the same view of the desktop

00:36:36,400 --> 00:36:41,359
or

00:36:36,960 --> 00:36:44,640
stuff like that it as as a wild idea

00:36:41,359 --> 00:36:49,119
uh this kind of stuff so uh

00:36:44,640 --> 00:36:53,200
pluggable view types could also help

00:36:49,119 --> 00:36:55,599
if at some point we decide to integrate

00:36:53,200 --> 00:36:58,640
more with latte dock so

00:36:55,599 --> 00:37:03,200
latte dock is its own shell because in

00:36:58,640 --> 00:37:06,400
it needs its own panel view with

00:37:03,200 --> 00:37:09,280
with very custom features

00:37:06,400 --> 00:37:10,480
so they could do that and we could even

00:37:09,280 --> 00:37:13,680
even load everything

00:37:10,480 --> 00:37:16,960
in the same plasma process uh and

00:37:13,680 --> 00:37:20,480
having their own custom view uh

00:37:16,960 --> 00:37:22,640
just loaded as our panel uh

00:37:20,480 --> 00:37:24,240
but still is still still just a wild

00:37:22,640 --> 00:37:27,599
idea

00:37:24,240 --> 00:37:30,720
uh if anything of everything

00:37:27,599 --> 00:37:34,400
of that will be actually done uh for now

00:37:30,720 --> 00:37:39,599
our uh is just a very early prototype

00:37:34,400 --> 00:37:39,599
and also mostly my ramblings so

00:37:40,240 --> 00:37:44,880
last the the the parent mount objective

00:37:44,079 --> 00:37:47,680
of course

00:37:44,880 --> 00:37:47,680
is to

00:37:48,000 --> 00:37:55,359
to have the least possible

00:37:51,680 --> 00:37:57,760
disruption and regressions for the user

00:37:55,359 --> 00:37:58,640
but we need to talk more about it and we

00:37:57,760 --> 00:38:01,760
will have a

00:37:58,640 --> 00:38:04,960
a very long buff on wednesday on

00:38:01,760 --> 00:38:06,640
all things plasma so if you would like

00:38:04,960 --> 00:38:09,839
to discuss about that

00:38:06,640 --> 00:38:11,920
just come there or find us in the usual

00:38:09,839 --> 00:38:15,200
channels

00:38:11,920 --> 00:38:16,000
and uh thank you very much i don't know

00:38:15,200 --> 00:38:20,000
if there is

00:38:16,000 --> 00:38:24,079
any time for questions or not but

00:38:20,000 --> 00:38:24,079
please do yes thanks

00:38:24,800 --> 00:38:32,000
um that's two minutes left so maybe one

00:38:28,960 --> 00:38:34,640
quick question okay

00:38:32,000 --> 00:38:36,079
by mate what do you envision for our

00:38:34,640 --> 00:38:39,520
long-term

00:38:36,079 --> 00:38:42,720
steaming story so he's eager about

00:38:39,520 --> 00:38:45,839
uh svg based steaming okay from

00:38:42,720 --> 00:38:48,880
our long-term team i do

00:38:45,839 --> 00:38:52,079
i do think the teams

00:38:48,880 --> 00:38:55,839
exactly as now uh

00:38:52,079 --> 00:39:00,160
need to be supported pretty much

00:38:55,839 --> 00:39:03,839
from the time for the time being

00:39:00,160 --> 00:39:07,359
because we have a lot of third-party

00:39:03,839 --> 00:39:09,440
uh teams from the store so

00:39:07,359 --> 00:39:10,800
that that should that should stay

00:39:09,440 --> 00:39:13,359
supported uh

00:39:10,800 --> 00:39:15,359
weather is the main thing probably in

00:39:13,359 --> 00:39:19,680
the early plasma 6 days

00:39:15,359 --> 00:39:23,200
it will be what

00:39:19,680 --> 00:39:26,560
what i would ask santa about a

00:39:23,200 --> 00:39:27,040
timing engine would be something a bit

00:39:26,560 --> 00:39:30,079
more

00:39:27,040 --> 00:39:32,400
probably css based which

00:39:30,079 --> 00:39:34,960
can be used by plasma shell can be used

00:39:32,400 --> 00:39:38,960
by applications both key widgets and

00:39:34,960 --> 00:39:42,960
and qml applications uh maybe also still

00:39:38,960 --> 00:39:46,960
making use optional use of plasma svg

00:39:42,960 --> 00:39:51,440
svgs as one of the main of the many

00:39:46,960 --> 00:39:53,040
possibilities that that css api would

00:39:51,440 --> 00:39:56,480
give

00:39:53,040 --> 00:39:59,440
but but in the end some

00:39:56,480 --> 00:40:01,680
something something more unified even if

00:39:59,440 --> 00:40:04,640
in the end the user could still

00:40:01,680 --> 00:40:06,400
choose i want my panels to look

00:40:04,640 --> 00:40:08,960
completely different

00:40:06,400 --> 00:40:10,800
uh okay but yeah that that would be a

00:40:08,960 --> 00:40:14,079
lot of work and and

00:40:10,800 --> 00:40:16,319
still needs to be well thought about

00:40:14,079 --> 00:40:17,440
okay i guess uh all other questions can

00:40:16,319 --> 00:40:21,839
be uh

00:40:17,440 --> 00:40:24,880
talked about in the boss meeting okay

00:40:21,839 --> 00:40:27,200
thank you very much everyone yeah thanks

00:40:24,880 --> 00:40:27,200
michael

00:40:29,079 --> 00:40:32,079

YouTube URL: https://www.youtube.com/watch?v=1KgPuH4E6ks


