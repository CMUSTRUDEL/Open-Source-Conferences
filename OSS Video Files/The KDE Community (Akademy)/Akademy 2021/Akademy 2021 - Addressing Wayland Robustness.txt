Title: Akademy 2021 - Addressing Wayland Robustness
Publication date: 2021-06-30
Playlist: Akademy 2021
Description: 
	By David Edmundson
Plasma hasn't been one of the first desktops to transition to wayland, which still gives us the opportunity to make the best transition.

One of the biggest issues that face wayland adoption is stability, if a client crashes, you just reopen it. If kwin wayland crashes, we lose everything. This is true across all desktops.

This talk showcases work across multiple libraries and toolkits to tackle this at the root with a method of "compositor handoffs" allowing clients to safely securely and seamlessly reconnect to a relaunched wayland compositor. This not only tackles the issue of robustness but also opens up a whole avenue of new opportunities that were previously impossible.

We will look at the work done and the upcoming steps remaining for this to reach all end users.
Captions: 
	00:00:01,130 --> 00:00:08,600
[Music]

00:00:11,120 --> 00:00:13,759
hello

00:00:11,840 --> 00:00:16,240
and welcome to my talk addressing

00:00:13,759 --> 00:00:18,800
weyland robotness

00:00:16,240 --> 00:00:20,080
my name is david edmondson i'm employed

00:00:18,800 --> 00:00:23,680
by blue systems

00:00:20,080 --> 00:00:25,920
i've been working on plasma for over

00:00:23,680 --> 00:00:27,439
10 years and over the last few years

00:00:25,920 --> 00:00:29,119
i've been trying to get more involved in

00:00:27,439 --> 00:00:32,239
their whaling ecosystem

00:00:29,119 --> 00:00:34,640
just through plasma and for our entire

00:00:32,239 --> 00:00:37,680
stack elsewhere

00:00:34,640 --> 00:00:39,440
so weyland weyland is one of the biggest

00:00:37,680 --> 00:00:42,559
transitions we faced

00:00:39,440 --> 00:00:43,200
as the linux desktop it's a lot of

00:00:42,559 --> 00:00:46,320
changes

00:00:43,200 --> 00:00:47,600
in lots of different areas and it's

00:00:46,320 --> 00:00:49,600
important that we do

00:00:47,600 --> 00:00:51,680
a good job it's not important we do it

00:00:49,600 --> 00:00:54,879
quickly it's important that we do it

00:00:51,680 --> 00:00:56,800
very well so

00:00:54,879 --> 00:00:59,039
what's the current state of robustness

00:00:56,800 --> 00:01:01,520
and what do i mean by robustness

00:00:59,039 --> 00:01:02,079
so by robustness i mean being able to

00:01:01,520 --> 00:01:04,479
handle

00:01:02,079 --> 00:01:07,519
others so i'm going to cut across to a

00:01:04,479 --> 00:01:07,519
video of what we see

00:01:10,840 --> 00:01:13,840
currently

00:01:15,439 --> 00:01:21,280
so here's my laptop i'm running

00:01:18,799 --> 00:01:22,880
running compositor got a text editor

00:01:21,280 --> 00:01:25,040
going i spent ages

00:01:22,880 --> 00:01:26,720
writing a document and we're going to

00:01:25,040 --> 00:01:30,320
mimic what would happen

00:01:26,720 --> 00:01:30,320
if a compositor were to crash

00:01:32,079 --> 00:01:35,360
pretty underwhelming not only has my

00:01:34,079 --> 00:01:36,880
text editor been closed

00:01:35,360 --> 00:01:38,960
it's been killed because it switched

00:01:36,880 --> 00:01:42,799
back to login manager so

00:01:38,960 --> 00:01:44,720
all my content has been lost

00:01:42,799 --> 00:01:46,320
as you can see that was somewhat

00:01:44,720 --> 00:01:48,159
underwhelming

00:01:46,320 --> 00:01:49,360
we don't see the same thing if pulse

00:01:48,159 --> 00:01:51,520
audio crashes

00:01:49,360 --> 00:01:53,360
and whenever we're doing any application

00:01:51,520 --> 00:01:54,399
development inside plasma we try and

00:01:53,360 --> 00:01:56,320
build in a sense of

00:01:54,399 --> 00:01:57,680
robustness of handling these errors if

00:01:56,320 --> 00:01:59,439
power devil crashes

00:01:57,680 --> 00:02:02,159
plus michelle just reconnects if and

00:01:59,439 --> 00:02:04,079
when it comes back

00:02:02,159 --> 00:02:06,079
so now we're going to see what happens

00:02:04,079 --> 00:02:06,840
on my laptop with a heavily patched

00:02:06,079 --> 00:02:09,840
stack

00:02:06,840 --> 00:02:12,239
throughout let's

00:02:09,840 --> 00:02:13,760
reproduce that scenario but on my patch

00:02:12,239 --> 00:02:16,080
plasma session

00:02:13,760 --> 00:02:16,879
so i have k develop open which is an

00:02:16,080 --> 00:02:19,760
absolutely

00:02:16,879 --> 00:02:22,080
massive monolithic q widget application

00:02:19,760 --> 00:02:24,000
and i've got my text editor

00:02:22,080 --> 00:02:26,160
i've got some unsaved changes to mimic

00:02:24,000 --> 00:02:27,920
what a programmer is doing all day

00:02:26,160 --> 00:02:29,599
i've got a system settings open which is

00:02:27,920 --> 00:02:33,200
in queue quick

00:02:29,599 --> 00:02:35,040
with multiple surfaces involved and

00:02:33,200 --> 00:02:38,239
i've opened this to mimic what our users

00:02:35,040 --> 00:02:40,480
apparently spend all day adjusting

00:02:38,239 --> 00:02:41,680
and i've got supertax card open to mimic

00:02:40,480 --> 00:02:44,319
what project managers

00:02:41,680 --> 00:02:45,920
spend or where they're doing so now

00:02:44,319 --> 00:02:46,879
let's reproduce that same crash that we

00:02:45,920 --> 00:02:49,280
had before

00:02:46,879 --> 00:02:52,239
we're going to pretend that quinn had an

00:02:49,280 --> 00:02:52,239
accidental crash

00:02:54,000 --> 00:02:57,040
and as you can see everything has

00:02:55,840 --> 00:02:59,200
restored

00:02:57,040 --> 00:03:01,760
was about to restore come on plasma oh

00:02:59,200 --> 00:03:01,760
yeah sir

00:03:02,159 --> 00:03:06,159
and everything has restored exactly as

00:03:04,239 --> 00:03:07,440
it was before with absolutely no data

00:03:06,159 --> 00:03:10,159
loss whatsoever

00:03:07,440 --> 00:03:11,440
my unsafe changes are still here you can

00:03:10,159 --> 00:03:13,440
still see my characters

00:03:11,440 --> 00:03:14,640
spinning around and see if the tax cut i

00:03:13,440 --> 00:03:19,840
could be playing a level

00:03:14,640 --> 00:03:19,840
and not even lose first place

00:03:20,800 --> 00:03:24,159
so what did we just see we saw that when

00:03:23,599 --> 00:03:27,280
quinn was

00:03:24,159 --> 00:03:28,959
induced quite aggressively into a crash

00:03:27,280 --> 00:03:30,799
that everything was able to resume

00:03:28,959 --> 00:03:32,640
exactly where it left off

00:03:30,799 --> 00:03:34,319
if i left the audio running you would

00:03:32,640 --> 00:03:36,080
have heard that super touch card

00:03:34,319 --> 00:03:38,000
never skipped a single beat in its

00:03:36,080 --> 00:03:40,400
little daunty jingle

00:03:38,000 --> 00:03:41,120
we we saw all my unsafe changes in k

00:03:40,400 --> 00:03:43,599
develop

00:03:41,120 --> 00:03:45,120
were exactly where i left them even to a

00:03:43,599 --> 00:03:47,200
point of the cursed position

00:03:45,120 --> 00:03:49,280
because from a client point of view

00:03:47,200 --> 00:03:50,720
nothing really happened

00:03:49,280 --> 00:03:54,400
it was from the small internal

00:03:50,720 --> 00:03:57,040
reconnections but that's it

00:03:54,400 --> 00:03:57,599
and it's worth me mentioning that i

00:03:57,040 --> 00:03:59,840
didn't

00:03:57,599 --> 00:04:01,680
touch any of the code in k develop or

00:03:59,840 --> 00:04:04,159
super tax card or console

00:04:01,680 --> 00:04:05,200
of any of your client applications we

00:04:04,159 --> 00:04:09,439
only touched

00:04:05,200 --> 00:04:09,439
toolkits and like a shared library code

00:04:10,400 --> 00:04:14,480
so i want to step back onto what

00:04:12,480 --> 00:04:15,920
problems is dissolving

00:04:14,480 --> 00:04:17,840
because that's going to help explain

00:04:15,920 --> 00:04:22,400
some of the design decisions

00:04:17,840 --> 00:04:23,759
later so the obvious one crash handling

00:04:22,400 --> 00:04:25,600
and i do like the fact that this

00:04:23,759 --> 00:04:27,759
person's first response into nearly

00:04:25,600 --> 00:04:28,960
dying was to upload a picture to

00:04:27,759 --> 00:04:30,880
wikimedia

00:04:28,960 --> 00:04:32,080
under a shared license that's very

00:04:30,880 --> 00:04:35,120
committed

00:04:32,080 --> 00:04:35,520
so crap handling it's the most obvious

00:04:35,120 --> 00:04:38,080
most

00:04:35,520 --> 00:04:39,280
user-facing part that we're going to see

00:04:38,080 --> 00:04:41,919
fairly

00:04:39,280 --> 00:04:43,520
early on and i do want to stress this

00:04:41,919 --> 00:04:44,720
isn't a quinn problem

00:04:43,520 --> 00:04:47,120
i'm not going to claim any other

00:04:44,720 --> 00:04:50,880
compositors are better or worse

00:04:47,120 --> 00:04:53,440
only that they all crash in a screenshot

00:04:50,880 --> 00:04:56,320
you can see some screenshots from

00:04:53,440 --> 00:04:57,520
um ubuntu's automatic crash reporting

00:04:56,320 --> 00:05:00,240
website

00:04:57,520 --> 00:05:01,360
and there's queen on the left and mata

00:05:00,240 --> 00:05:03,919
and sway

00:05:01,360 --> 00:05:05,039
and you can't read out the text here but

00:05:03,919 --> 00:05:06,960
each row

00:05:05,039 --> 00:05:08,840
represents a completely different unique

00:05:06,960 --> 00:05:12,400
batteries

00:05:08,840 --> 00:05:14,000
so everything crashes and this goes on

00:05:12,400 --> 00:05:15,759
for pages and pages we've just got the

00:05:14,000 --> 00:05:18,560
first screenshot in here

00:05:15,759 --> 00:05:19,759
because that's the reality of software

00:05:18,560 --> 00:05:23,120
particularly for something

00:05:19,759 --> 00:05:26,000
as difficult as a compositor so

00:05:23,120 --> 00:05:27,840
how did x11 solve it there's two very

00:05:26,000 --> 00:05:30,960
important parts

00:05:27,840 --> 00:05:32,800
firstly it never really did i'm of an

00:05:30,960 --> 00:05:35,520
era where i remember

00:05:32,800 --> 00:05:37,440
x11 crashing quite regularly to point

00:05:35,520 --> 00:05:39,759
that it even shipped by default

00:05:37,440 --> 00:05:41,280
with a shortcut to restart it because it

00:05:39,759 --> 00:05:43,360
locked up

00:05:41,280 --> 00:05:44,960
relatively often often enough that it

00:05:43,360 --> 00:05:48,400
decided a quick shortcut was

00:05:44,960 --> 00:05:50,720
warranted and

00:05:48,400 --> 00:05:52,160
ultimately this has gone away but only

00:05:50,720 --> 00:05:53,520
because they've been feature frozen for

00:05:52,160 --> 00:05:55,280
10 years

00:05:53,520 --> 00:05:57,120
and weyland is not in a position where

00:05:55,280 --> 00:05:59,440
we can be feature frozen

00:05:57,120 --> 00:06:01,680
partly because respects are still being

00:05:59,440 --> 00:06:04,000
added to reach future parity

00:06:01,680 --> 00:06:05,600
partly because a lot of people are

00:06:04,000 --> 00:06:07,600
seeing the fact that

00:06:05,600 --> 00:06:09,120
the stacks open for changes again and

00:06:07,600 --> 00:06:11,039
there's a lot of pent-up ideas and

00:06:09,120 --> 00:06:14,240
experimentation that people have

00:06:11,039 --> 00:06:15,759
that people want him to push so

00:06:14,240 --> 00:06:18,400
we're not going to be able to be feature

00:06:15,759 --> 00:06:21,440
frozen for a while

00:06:18,400 --> 00:06:23,280
also x11 was able to do quite a good job

00:06:21,440 --> 00:06:26,240
of delegating responsibility

00:06:23,280 --> 00:06:28,880
to other processes mostly because it had

00:06:26,240 --> 00:06:31,600
a somewhat lacking security model

00:06:28,880 --> 00:06:33,520
and what we're seeing is because we're

00:06:31,600 --> 00:06:36,080
trying to introduce a security model

00:06:33,520 --> 00:06:36,960
the compositive process is adopting more

00:06:36,080 --> 00:06:40,560
and more

00:06:36,960 --> 00:06:43,440
work more and more responsibilities and

00:06:40,560 --> 00:06:44,800
it's adopting it's touching so many

00:06:43,440 --> 00:06:46,720
different libraries

00:06:44,800 --> 00:06:48,160
so many different ways of doing things

00:06:46,720 --> 00:06:49,680
to reach the same results

00:06:48,160 --> 00:06:52,000
and i don't think this is necessarily a

00:06:49,680 --> 00:06:55,120
bad thing but it is

00:06:52,000 --> 00:06:58,000
resulting in quite large applications to

00:06:55,120 --> 00:07:01,280
make a functional compositor that we

00:06:58,000 --> 00:07:04,479
that you need to run a desktop

00:07:01,280 --> 00:07:05,840
also inside quinn and i'm sure it's true

00:07:04,479 --> 00:07:08,160
of your compositors

00:07:05,840 --> 00:07:09,360
we have end user styling we have end

00:07:08,160 --> 00:07:12,080
user scripts

00:07:09,360 --> 00:07:14,160
we have themes and all of this concept

00:07:12,080 --> 00:07:16,479
of plugins and interaction and

00:07:14,160 --> 00:07:17,919
certainly graphical drawing especially

00:07:16,479 --> 00:07:20,880
on opengl

00:07:17,919 --> 00:07:23,840
you get problems we can never just hope

00:07:20,880 --> 00:07:23,840
that it all goes away

00:07:24,000 --> 00:07:27,280
but it's not just crashes i don't want

00:07:25,759 --> 00:07:28,479
to stress that

00:07:27,280 --> 00:07:30,880
that might have been one of the

00:07:28,479 --> 00:07:34,319
motivations is certainly not

00:07:30,880 --> 00:07:36,560
it alone so your developer experience

00:07:34,319 --> 00:07:37,599
is also quite frustrating and my

00:07:36,560 --> 00:07:39,759
personal queen

00:07:37,599 --> 00:07:41,360
never crashes because if it did i would

00:07:39,759 --> 00:07:44,720
have been able to reproduce it

00:07:41,360 --> 00:07:46,479
i would have been able to fix it so

00:07:44,720 --> 00:07:47,840
generally speaking people ask me about

00:07:46,479 --> 00:07:48,960
some bug that's been introduced in

00:07:47,840 --> 00:07:51,199
master

00:07:48,960 --> 00:07:52,319
and i won't be able to reproduce it

00:07:51,199 --> 00:07:54,960
we're getting those like

00:07:52,319 --> 00:07:56,160
awkward states and if you've got an

00:07:54,960 --> 00:07:59,120
uptime of several months

00:07:56,160 --> 00:08:01,440
i'm not dog fooding what we're releasing

00:07:59,120 --> 00:08:03,840
it becomes very problematic

00:08:01,440 --> 00:08:05,440
and the whole testing developer

00:08:03,840 --> 00:08:08,479
experience is

00:08:05,440 --> 00:08:10,000
quite messy because i can run things in

00:08:08,479 --> 00:08:13,199
a nested session i can run

00:08:10,000 --> 00:08:15,280
to things against tests but nothing has

00:08:13,199 --> 00:08:17,840
quite the same experiences to

00:08:15,280 --> 00:08:21,440
actually have it on your desktop as

00:08:17,840 --> 00:08:21,440
something you're working against

00:08:22,560 --> 00:08:26,800
another quite interesting feature is the

00:08:24,400 --> 00:08:29,120
idea of composite to handoffs

00:08:26,800 --> 00:08:30,400
and what do i mean by that being able to

00:08:29,120 --> 00:08:33,760
start an application on

00:08:30,400 --> 00:08:36,080
wavepipe which is like sshx being as

00:08:33,760 --> 00:08:38,159
forward something to a remote server and

00:08:36,080 --> 00:08:41,279
then move it to your local session

00:08:38,159 --> 00:08:42,560
or vice versa or perform a multi-head

00:08:41,279 --> 00:08:44,399
setup where you have

00:08:42,560 --> 00:08:46,000
different compositors on different

00:08:44,399 --> 00:08:47,760
screens

00:08:46,000 --> 00:08:49,519
and being able to then move apps between

00:08:47,760 --> 00:08:51,600
them and this would get us to an

00:08:49,519 --> 00:08:53,120
incredibly improved state compared to

00:08:51,600 --> 00:08:55,040
what we see on x11

00:08:53,120 --> 00:08:57,440
it's an opportunity to do something

00:08:55,040 --> 00:08:57,440
better

00:08:58,399 --> 00:09:02,240
another interesting feature is unlocks

00:09:00,880 --> 00:09:03,200
i'm not going to claim it solves

00:09:02,240 --> 00:09:05,760
completely but

00:09:03,200 --> 00:09:06,560
unlocks is checkpoint restore in user

00:09:05,760 --> 00:09:10,080
space

00:09:06,560 --> 00:09:12,399
catch your name catchy logo so creo

00:09:10,080 --> 00:09:14,800
what is it it allows us to take a

00:09:12,399 --> 00:09:17,600
process of bundle of processes

00:09:14,800 --> 00:09:20,320
and just freeze it to disk so it's like

00:09:17,600 --> 00:09:22,880
closing a laptop lid but on a per

00:09:20,320 --> 00:09:24,000
application basis so if we end up memory

00:09:22,880 --> 00:09:26,640
constrained

00:09:24,000 --> 00:09:28,480
or if you want to send something to a

00:09:26,640 --> 00:09:30,880
developer to debug

00:09:28,480 --> 00:09:32,000
or just move things between machines

00:09:30,880 --> 00:09:36,399
potentially

00:09:32,000 --> 00:09:38,800
we've got a lot of opportunity here but

00:09:36,399 --> 00:09:40,480
your website makes it sound amazing

00:09:38,800 --> 00:09:43,519
until you read this slide

00:09:40,480 --> 00:09:44,720
where it says on the korea website in

00:09:43,519 --> 00:09:47,519
quite big writing

00:09:44,720 --> 00:09:49,440
it doesn't work for x11 because of the

00:09:47,519 --> 00:09:51,440
very nature of x11

00:09:49,440 --> 00:09:52,560
and all the reason it doesn't work again

00:09:51,440 --> 00:09:54,560
x11

00:09:52,560 --> 00:09:56,000
won't work with weyland realway wayland

00:09:54,560 --> 00:09:59,760
is currently written

00:09:56,000 --> 00:10:02,880
with my changes we unlock his problem

00:09:59,760 --> 00:10:04,640
and then hopefully we might see this

00:10:02,880 --> 00:10:05,920
on the desktop or potentially on plasma

00:10:04,640 --> 00:10:08,079
mobile where mem

00:10:05,920 --> 00:10:10,959
memory is even more constrained it could

00:10:08,079 --> 00:10:10,959
be very exciting

00:10:11,680 --> 00:10:15,519
so how have we done this

00:10:15,839 --> 00:10:20,320
so your first step was to have a way of

00:10:18,720 --> 00:10:23,120
keeping a session alive

00:10:20,320 --> 00:10:24,399
when quinn crashes if we go through the

00:10:23,120 --> 00:10:27,120
naive approach

00:10:24,399 --> 00:10:29,839
if quinn crashes and plasma shell and

00:10:27,120 --> 00:10:31,600
everything crashes at the same time

00:10:29,839 --> 00:10:33,440
if all of the crash handlers kick in at

00:10:31,600 --> 00:10:34,720
once everything becomes a very racy

00:10:33,440 --> 00:10:37,040
experience

00:10:34,720 --> 00:10:38,959
plus michelle can try and start before

00:10:37,040 --> 00:10:40,880
quinn has reconnect recreated

00:10:38,959 --> 00:10:42,160
our weyland zero socket that it's trying

00:10:40,880 --> 00:10:43,519
to connect to

00:10:42,160 --> 00:10:45,200
and then we're in a very sticky

00:10:43,519 --> 00:10:47,680
situation

00:10:45,200 --> 00:10:48,800
we also introduced potential security

00:10:47,680 --> 00:10:50,800
hole

00:10:48,800 --> 00:10:52,399
if quinn goes down some other road

00:10:50,800 --> 00:10:55,279
compositors come in

00:10:52,399 --> 00:10:56,720
create a socket on the same name and

00:10:55,279 --> 00:10:58,000
then all the other clients will try and

00:10:56,720 --> 00:11:00,640
reconnect

00:10:58,000 --> 00:11:03,200
but to his other road process and we

00:11:00,640 --> 00:11:06,160
don't want that

00:11:03,200 --> 00:11:06,959
so we make the railing socket on your

00:11:06,160 --> 00:11:08,640
file system

00:11:06,959 --> 00:11:10,800
it's not really on disk we're on the

00:11:08,640 --> 00:11:12,480
file system your whale industrial file

00:11:10,800 --> 00:11:15,040
socket file

00:11:12,480 --> 00:11:16,399
we keep that alive it's owned by a

00:11:15,040 --> 00:11:18,240
helper process

00:11:16,399 --> 00:11:19,680
which starts up the four quint it

00:11:18,240 --> 00:11:21,440
creates a socket on disk

00:11:19,680 --> 00:11:22,720
sets a bunch of environment variables

00:11:21,440 --> 00:11:25,120
and then

00:11:22,720 --> 00:11:26,880
spawns quinn with access to your file

00:11:25,120 --> 00:11:29,279
descriptor

00:11:26,880 --> 00:11:30,399
if when it crashes the socket remains

00:11:29,279 --> 00:11:33,360
it's only cleaned up

00:11:30,399 --> 00:11:35,040
when everything exits gratefully if a

00:11:33,360 --> 00:11:36,320
client tries to connect before quinn is

00:11:35,040 --> 00:11:38,720
started

00:11:36,320 --> 00:11:40,079
the client will just pause during that

00:11:38,720 --> 00:11:41,519
initial socket connection

00:11:40,079 --> 00:11:43,519
waiting for quinn to accept that

00:11:41,519 --> 00:11:46,480
connection and create a new file

00:11:43,519 --> 00:11:46,480
description between them

00:11:46,640 --> 00:11:51,920
this is completely race-free potentially

00:11:49,920 --> 00:11:53,519
even improved startup speed because now

00:11:51,920 --> 00:11:55,920
we're able to start quinn

00:11:53,519 --> 00:11:56,720
and start plasma shell at the same time

00:11:55,920 --> 00:11:58,240
and

00:11:56,720 --> 00:12:00,160
there's no race between them plasma

00:11:58,240 --> 00:12:00,880
shell can do all of this linking can do

00:12:00,160 --> 00:12:03,600
all of this

00:12:00,880 --> 00:12:06,560
heavy loading and only block at the

00:12:03,600 --> 00:12:09,519
point where it actually needs to block

00:12:06,560 --> 00:12:10,000
so a lot of potential here it's very

00:12:09,519 --> 00:12:12,480
similar

00:12:10,000 --> 00:12:13,680
to systemd socket activation if you're

00:12:12,480 --> 00:12:17,519
familiar with that

00:12:13,680 --> 00:12:20,560
except we did it ourselves locally for

00:12:17,519 --> 00:12:22,560
various reasons everything remains

00:12:20,560 --> 00:12:23,120
secure you can't just replace this file

00:12:22,560 --> 00:12:24,959
from

00:12:23,120 --> 00:12:28,000
another process you'd have to be able to

00:12:24,959 --> 00:12:30,320
mangle with the helper

00:12:28,000 --> 00:12:32,560
even the lock screen is secure if quinn

00:12:30,320 --> 00:12:34,399
crashes while the screen is locked

00:12:32,560 --> 00:12:36,240
when queen restores it checks the

00:12:34,399 --> 00:12:38,560
current state in log in d which has a

00:12:36,240 --> 00:12:39,519
boolean cash over this session is locked

00:12:38,560 --> 00:12:42,240
or not

00:12:39,519 --> 00:12:43,040
and the first frame queen would render

00:12:42,240 --> 00:12:46,079
after this

00:12:43,040 --> 00:12:46,079
is a lock screen again

00:12:47,360 --> 00:12:51,040
and importantly for clients we can

00:12:49,360 --> 00:12:51,680
distinguish when crashing from when

00:12:51,040 --> 00:12:54,880
closing

00:12:51,680 --> 00:12:55,839
if the connection goes down but the file

00:12:54,880 --> 00:12:58,639
remains on

00:12:55,839 --> 00:12:59,120
on the file system then we know coins

00:12:58,639 --> 00:13:02,240
crashed

00:12:59,120 --> 00:13:04,160
but we can reconnect if the file

00:13:02,240 --> 00:13:05,360
connection goes down and the file

00:13:04,160 --> 00:13:07,120
doesn't exist

00:13:05,360 --> 00:13:10,000
we know queen's exited we should just

00:13:07,120 --> 00:13:10,000
exit basically

00:13:10,320 --> 00:13:14,079
so all of this has matched all of that

00:13:12,800 --> 00:13:19,120
part has landed in

00:13:14,079 --> 00:13:21,440
plasma 5.21 and maybe even earlier

00:13:19,120 --> 00:13:22,240
and you're probably running it now and

00:13:21,440 --> 00:13:23,920
the experience

00:13:22,240 --> 00:13:26,079
i think is better than what we had

00:13:23,920 --> 00:13:28,959
before if you log in

00:13:26,079 --> 00:13:30,880
get a crash you will now see your screen

00:13:28,959 --> 00:13:33,200
flooded with dr conkey dialogue

00:13:30,880 --> 00:13:34,480
saying it's been an issue my client has

00:13:33,200 --> 00:13:37,440
closed

00:13:34,480 --> 00:13:39,040
but the desktop comes back your panel

00:13:37,440 --> 00:13:40,959
comes back you can then just re-launch

00:13:39,040 --> 00:13:45,199
everything

00:13:40,959 --> 00:13:48,160
good but nowhere near good enough

00:13:45,199 --> 00:13:51,360
so your next step slightly harder step

00:13:48,160 --> 00:13:51,360
making the client survive

00:13:51,760 --> 00:13:57,120
so i need to explain how weyland works

00:13:53,600 --> 00:13:59,680
in an incredibly oversimplified way

00:13:57,120 --> 00:14:00,240
two processors just scream data at each

00:13:59,680 --> 00:14:02,480
other

00:14:00,240 --> 00:14:05,920
and both sides keep a cache of what the

00:14:02,480 --> 00:14:05,920
other person thinks the state is

00:14:06,079 --> 00:14:11,920
there's no call and response it's always

00:14:08,399 --> 00:14:11,920
just streams of information

00:14:14,639 --> 00:14:17,839
so this is why we can't just keep a

00:14:16,240 --> 00:14:20,480
socket alive

00:14:17,839 --> 00:14:22,000
we have to after we reconnect we have to

00:14:20,480 --> 00:14:24,399
resend the data

00:14:22,000 --> 00:14:26,000
because otherwise if client just keeps

00:14:24,399 --> 00:14:27,920
the connection on live and then says

00:14:26,000 --> 00:14:29,279
please attach buffer number six to

00:14:27,920 --> 00:14:31,839
surface number three

00:14:29,279 --> 00:14:33,199
a compositor will respond with what a

00:14:31,839 --> 00:14:35,279
nerf is buffer six

00:14:33,199 --> 00:14:36,399
and then just kill the client which

00:14:35,279 --> 00:14:39,120
wouldn't really be

00:14:36,399 --> 00:14:40,160
what we want so we need to resend

00:14:39,120 --> 00:14:42,160
everything

00:14:40,160 --> 00:14:43,440
the other important thing to know about

00:14:42,160 --> 00:14:44,720
weyland is

00:14:43,440 --> 00:14:46,560
everything that they think of this

00:14:44,720 --> 00:14:48,959
because they're just screaming data at

00:14:46,560 --> 00:14:48,959
each other

00:14:49,680 --> 00:14:53,279
the compositor always has a final say if

00:14:52,160 --> 00:14:56,160
a client says

00:14:53,279 --> 00:14:57,199
i would like to grab this at some point

00:14:56,160 --> 00:15:01,920
the compositor

00:14:57,199 --> 00:15:03,440
can just turn around and say no go away

00:15:01,920 --> 00:15:06,000
and because of this the clients are able

00:15:03,440 --> 00:15:08,639
to have to have code to react to this

00:15:06,000 --> 00:15:10,079
which makes doing a reconnection a lot

00:15:08,639 --> 00:15:13,199
easier we can just assume

00:15:10,079 --> 00:15:16,320
that the composite everything and just

00:15:13,199 --> 00:15:16,320
re-request everything

00:15:16,480 --> 00:15:19,760
and most importantly all memory

00:15:18,959 --> 00:15:21,920
allocations

00:15:19,760 --> 00:15:22,800
are in the client if i want to send a

00:15:21,920 --> 00:15:24,959
buffer

00:15:22,800 --> 00:15:26,240
load of con a picture of contents to

00:15:24,959 --> 00:15:28,880
your compositor

00:15:26,240 --> 00:15:30,800
i create a space and shared memory i

00:15:28,880 --> 00:15:33,440
create a file descriptor pointing to

00:15:30,800 --> 00:15:35,279
space and shadow memory and as a client

00:15:33,440 --> 00:15:37,360
i send that file descriptor to your

00:15:35,279 --> 00:15:40,399
compositor

00:15:37,360 --> 00:15:40,880
and the compositor is not creating any

00:15:40,399 --> 00:15:43,920
space

00:15:40,880 --> 00:15:44,720
if the compositor goes down the clients

00:15:43,920 --> 00:15:48,079
can still read

00:15:44,720 --> 00:15:48,079
everything that they had before

00:15:48,480 --> 00:15:52,160
and i think this is one of the easier

00:15:51,040 --> 00:15:55,120
big reasons why

00:15:52,160 --> 00:15:55,360
this wasn't possible in x11 if you try

00:15:55,120 --> 00:15:57,279
to

00:15:55,360 --> 00:15:58,639
introduce this in x11 you would have so

00:15:57,279 --> 00:16:00,560
many cases where you're trying to

00:15:58,639 --> 00:16:03,680
perform a round trip or you're

00:16:00,560 --> 00:16:05,839
accessing some data you've asked x11 to

00:16:03,680 --> 00:16:09,600
hold some structures it has

00:16:05,839 --> 00:16:11,600
it just wouldn't work

00:16:09,600 --> 00:16:12,639
but here the client had that has

00:16:11,600 --> 00:16:15,519
everything the client

00:16:12,639 --> 00:16:17,440
has all of your memory out locations and

00:16:15,519 --> 00:16:19,040
it has all of the data that it wants to

00:16:17,440 --> 00:16:21,600
send it's sent at once

00:16:19,040 --> 00:16:24,000
it can send it again i mean for right

00:16:21,600 --> 00:16:27,360
academy i'll talk about cute first

00:16:24,000 --> 00:16:28,800
so you have your q window object it has

00:16:27,360 --> 00:16:31,040
a window title

00:16:28,800 --> 00:16:32,480
inside a cute window object in fact we

00:16:31,040 --> 00:16:34,240
create all of this

00:16:32,480 --> 00:16:35,680
inside q window before we create the q

00:16:34,240 --> 00:16:37,920
platform window

00:16:35,680 --> 00:16:39,920
all of this is cached in the client we

00:16:37,920 --> 00:16:43,519
have all of this information

00:16:39,920 --> 00:16:46,560
so all we need to do is send it again

00:16:43,519 --> 00:16:50,320
so apache cute and

00:16:46,560 --> 00:16:52,079
i made it do this when we detect the

00:16:50,320 --> 00:16:55,360
connection has gone

00:16:52,079 --> 00:16:56,800
we send everything again everything

00:16:55,360 --> 00:16:59,279
comes back

00:16:56,800 --> 00:17:02,480
so let's look a bit more in detail at

00:16:59,279 --> 00:17:02,480
what was actually needed

00:17:03,040 --> 00:17:08,959
from acute point of view we had to

00:17:06,160 --> 00:17:09,679
handle it as though every screen every

00:17:08,959 --> 00:17:12,559
monitor

00:17:09,679 --> 00:17:14,799
has been disconnected and reconnected we

00:17:12,559 --> 00:17:17,760
have to pretend that every input device

00:17:14,799 --> 00:17:20,959
has been disconnected and reconnected

00:17:17,760 --> 00:17:23,439
but we had code to do all of this anyway

00:17:20,959 --> 00:17:24,480
because screens changing at runtime is

00:17:23,439 --> 00:17:26,559
something that happens

00:17:24,480 --> 00:17:28,319
input devices changing at runtime is

00:17:26,559 --> 00:17:30,080
something that happens anyway

00:17:28,319 --> 00:17:32,640
so we had all of this code we just had

00:17:30,080 --> 00:17:34,480
to trigger it

00:17:32,640 --> 00:17:37,039
we have to recreate your window buffers

00:17:34,480 --> 00:17:39,440
so your your content

00:17:37,039 --> 00:17:41,039
and you have to do this from a client

00:17:39,440 --> 00:17:42,640
point of view at one time anyway every

00:17:41,039 --> 00:17:44,320
time you resize a window

00:17:42,640 --> 00:17:46,320
you have to create a new buffer of the

00:17:44,320 --> 00:17:48,880
new size you have to be able to draw

00:17:46,320 --> 00:17:51,039
all of the contents in and you were

00:17:48,880 --> 00:17:52,559
always able to resize a window so

00:17:51,039 --> 00:17:56,160
we have all of these code paths

00:17:52,559 --> 00:17:56,160
available we just need to trigger them

00:17:56,559 --> 00:18:02,240
and lastly we need to reset the shell so

00:17:59,440 --> 00:18:04,720
what the compositor thinks a window is

00:18:02,240 --> 00:18:06,400
and q actually has code for this already

00:18:04,720 --> 00:18:08,480
simply because qt api

00:18:06,400 --> 00:18:10,320
allows you to change between a pop-up

00:18:08,480 --> 00:18:12,559
and the top level at runtime

00:18:10,320 --> 00:18:14,720
so we had to have code to tear down a

00:18:12,559 --> 00:18:15,360
window and recreate it so we had all of

00:18:14,720 --> 00:18:18,799
that code

00:18:15,360 --> 00:18:21,440
existing now this a lot of other glue

00:18:18,799 --> 00:18:22,559
a lot of smaller things that i haven't

00:18:21,440 --> 00:18:25,840
mentioned

00:18:22,559 --> 00:18:27,200
but in general i was just accessing code

00:18:25,840 --> 00:18:30,640
that already existed

00:18:27,200 --> 00:18:31,840
and trying to trigger it there is one

00:18:30,640 --> 00:18:33,919
exception

00:18:31,840 --> 00:18:35,520
opengl and this is one with bigger

00:18:33,919 --> 00:18:38,720
challenges

00:18:35,520 --> 00:18:42,240
the way this works is when we use a

00:18:38,720 --> 00:18:45,520
new library like messer we pass

00:18:42,240 --> 00:18:49,120
a point to the underlying whalen

00:18:45,520 --> 00:18:51,200
library objects cswl display objects

00:18:49,120 --> 00:18:53,679
really low level code we pass in these

00:18:51,200 --> 00:18:54,160
structures and opengl is making low

00:18:53,679 --> 00:18:57,360
level

00:18:54,160 --> 00:18:59,760
railing calls using this library so

00:18:57,360 --> 00:19:02,480
we need to open geo out of messer we

00:18:59,760 --> 00:19:06,559
need message to stay in sync

00:19:02,480 --> 00:19:10,000
so i patch open your apache messer

00:19:06,559 --> 00:19:13,200
and fix everything

00:19:10,000 --> 00:19:16,320
this wasn't quite as bad as i

00:19:13,200 --> 00:19:17,520
initially imagined so we were able to

00:19:16,320 --> 00:19:18,480
keep your client connection to your

00:19:17,520 --> 00:19:20,400
render device

00:19:18,480 --> 00:19:21,679
to your graphic card completely

00:19:20,400 --> 00:19:24,240
untouched

00:19:21,679 --> 00:19:25,200
we've the client at some point gets

00:19:24,240 --> 00:19:26,880
authenticated

00:19:25,200 --> 00:19:29,919
it gets told or you're allowed to upload

00:19:26,880 --> 00:19:32,000
textures you're allowed to do drawing

00:19:29,919 --> 00:19:33,360
and once that's happened once we don't

00:19:32,000 --> 00:19:36,640
need to do that again even if the

00:19:33,360 --> 00:19:38,559
compositor goes down and comes back up

00:19:36,640 --> 00:19:40,160
so your geo context remains intact and

00:19:38,559 --> 00:19:41,520
everything all the textures inverted

00:19:40,160 --> 00:19:44,799
buffers you've uploaded

00:19:41,520 --> 00:19:45,919
are all absolutely there the only thing

00:19:44,799 --> 00:19:48,880
we need to do

00:19:45,919 --> 00:19:50,320
is reset all your egl surfaces which we

00:19:48,880 --> 00:19:52,400
asked the client to do

00:19:50,320 --> 00:19:54,080
and let's also had to reset a load of

00:19:52,400 --> 00:19:56,960
internal railing objects

00:19:54,080 --> 00:19:58,640
a couple of factories and globals this

00:19:56,960 --> 00:20:00,240
was quite invasive we had to change liv

00:19:58,640 --> 00:20:01,600
whaler to do that we had to introduce a

00:20:00,240 --> 00:20:04,320
new signal to say

00:20:01,600 --> 00:20:06,480
i've been reconnected keep using the

00:20:04,320 --> 00:20:09,200
existing pointer i gave you earlier

00:20:06,480 --> 00:20:11,679
but you're going to need to do some

00:20:09,200 --> 00:20:11,679
adjustments

00:20:13,120 --> 00:20:17,600
so having done cute i wanted to try a

00:20:16,000 --> 00:20:20,400
couple of other toolkits

00:20:17,600 --> 00:20:20,960
because trying a few other toolkits

00:20:20,400 --> 00:20:23,280
helped

00:20:20,960 --> 00:20:24,240
shape what i did in libwayland and what

00:20:23,280 --> 00:20:26,480
i didn't mess up

00:20:24,240 --> 00:20:27,760
just to make sure the changes there are

00:20:26,480 --> 00:20:30,480
versatile and work

00:20:27,760 --> 00:20:31,200
for things other than just cute

00:20:30,480 --> 00:20:32,720
obviously

00:20:31,200 --> 00:20:34,240
on that academy i'm going to say

00:20:32,720 --> 00:20:36,559
everybody should be using cute because

00:20:34,240 --> 00:20:39,600
it's amazing

00:20:36,559 --> 00:20:41,760
but other toolkits do exist so

00:20:39,600 --> 00:20:44,400
sdl that's what supertax card was

00:20:41,760 --> 00:20:48,640
written in and you saw that in the video

00:20:44,400 --> 00:20:52,559
i patched it and the changes

00:20:48,640 --> 00:20:56,240
were relatively small it was around 75

00:20:52,559 --> 00:20:58,559
new lines to do everything

00:20:56,240 --> 00:20:59,840
and once we've done that we didn't have

00:20:58,559 --> 00:21:03,600
to change any of the

00:20:59,840 --> 00:21:06,400
sdl using clients at all just 75 lines

00:21:03,600 --> 00:21:10,240
inside sdl code itself

00:21:06,400 --> 00:21:11,440
and that's relatively manageable

00:21:10,240 --> 00:21:13,120
all of these changes were quite

00:21:11,440 --> 00:21:13,840
difficult i'll be honest this took me

00:21:13,120 --> 00:21:16,480
actually

00:21:13,840 --> 00:21:18,799
ages quite embarrassingly long for what

00:21:16,480 --> 00:21:22,159
amounted to be 75 lines

00:21:18,799 --> 00:21:25,679
but it's quite manageable

00:21:22,159 --> 00:21:30,720
x wayland a parish excitland

00:21:25,679 --> 00:21:33,360
there's a theme coming so x-rayland

00:21:30,720 --> 00:21:35,039
x-ray link is a full x server that then

00:21:33,360 --> 00:21:38,320
has a weight and connection

00:21:35,039 --> 00:21:41,679
for passing the surfaces and buffers

00:21:38,320 --> 00:21:44,880
and passing input events to your clients

00:21:41,679 --> 00:21:46,000
but x server itself is a cache of client

00:21:44,880 --> 00:21:48,720
state

00:21:46,000 --> 00:21:50,640
so all we have to do is send all of our

00:21:48,720 --> 00:21:53,039
information again

00:21:50,640 --> 00:21:54,880
and the x whaling changes themselves

00:21:53,039 --> 00:21:57,679
were relatively straightforward

00:21:54,880 --> 00:21:58,480
they're quite small just resending

00:21:57,679 --> 00:22:01,120
everything

00:21:58,480 --> 00:22:02,400
and again i was mostly reusing existing

00:22:01,120 --> 00:22:06,320
code to handle

00:22:02,400 --> 00:22:10,880
resending a surface or window

00:22:06,320 --> 00:22:10,880
resetting input devices and such

00:22:11,039 --> 00:22:15,280
but what was a challenge here is the

00:22:13,760 --> 00:22:18,480
compositor is also making

00:22:15,280 --> 00:22:20,799
potentially blocking calls into x11

00:22:18,480 --> 00:22:22,000
quinn can handle x-whale and crashing so

00:22:20,799 --> 00:22:23,360
we've got a bit of a chicken and egg

00:22:22,000 --> 00:22:26,159
situation

00:22:23,360 --> 00:22:27,360
all your boiler plates around launching

00:22:26,159 --> 00:22:30,880
and managing

00:22:27,360 --> 00:22:34,080
required a bit of work but

00:22:30,880 --> 00:22:35,360
we were able to fix it um

00:22:34,080 --> 00:22:37,520
the diploma is going to be a bit hard

00:22:35,360 --> 00:22:39,520
because we had to make some changes to

00:22:37,520 --> 00:22:40,960
x-rayland but

00:22:39,520 --> 00:22:43,440
right a lot of change to explain then

00:22:40,960 --> 00:22:47,039
how it interacts with the compositor but

00:22:43,440 --> 00:22:47,039
the important part is it works

00:22:47,440 --> 00:22:53,360
firefox now this is quite interesting

00:22:51,600 --> 00:22:55,280
obviously it's been a theme so far so

00:22:53,360 --> 00:22:58,480
your next slide

00:22:55,280 --> 00:22:59,360
i didn't patch firefox but i was able to

00:22:58,480 --> 00:23:02,640
create something

00:22:59,360 --> 00:23:02,960
that worked quite successfully i changed

00:23:02,640 --> 00:23:06,880
the

00:23:02,960 --> 00:23:09,280
desktop file to be while to run firefox

00:23:06,880 --> 00:23:10,880
obviously because i'm a professional i

00:23:09,280 --> 00:23:12,000
checked to exit code and did something

00:23:10,880 --> 00:23:13,760
slightly better

00:23:12,000 --> 00:23:15,120
but effectively this is what i was

00:23:13,760 --> 00:23:17,520
running

00:23:15,120 --> 00:23:20,000
and i did this because firefox already

00:23:17,520 --> 00:23:22,640
has amazing crash handling support

00:23:20,000 --> 00:23:23,440
it can handle restoring everything you

00:23:22,640 --> 00:23:24,960
have to press a

00:23:23,440 --> 00:23:27,280
button in the dialog but then you get

00:23:24,960 --> 00:23:29,440
all of your windows back

00:23:27,280 --> 00:23:31,200
so it's got all of this code available

00:23:29,440 --> 00:23:33,440
and firefox does some

00:23:31,200 --> 00:23:35,200
very quirky things with weyland so it

00:23:33,440 --> 00:23:36,559
potentially would be quite hard for them

00:23:35,200 --> 00:23:39,280
to gain this

00:23:36,559 --> 00:23:41,279
research support so i've included this

00:23:39,280 --> 00:23:43,039
slide to show we don't necessarily

00:23:41,279 --> 00:23:44,880
need to have a one-size-fits-all

00:23:43,039 --> 00:23:46,720
strategy

00:23:44,880 --> 00:23:49,440
for cute it makes sense that the talker

00:23:46,720 --> 00:23:51,679
handles everything and resets everything

00:23:49,440 --> 00:23:53,600
for something like wl paste a small

00:23:51,679 --> 00:23:54,400
command line tool to paste clipboard

00:23:53,600 --> 00:23:57,200
contents

00:23:54,400 --> 00:23:58,880
your best thing is probably just to exit

00:23:57,200 --> 00:24:00,320
we don't need to have one size fits all

00:23:58,880 --> 00:24:01,600
the strategy with the socket

00:24:00,320 --> 00:24:03,679
allows for a couple of different

00:24:01,600 --> 00:24:05,679
techniques and i think

00:24:03,679 --> 00:24:07,600
a slightly better version of this might

00:24:05,679 --> 00:24:09,440
be a way forward for firefox

00:24:07,600 --> 00:24:12,000
maybe not maybe i should have the full

00:24:09,440 --> 00:24:15,279
reset support

00:24:12,000 --> 00:24:17,200
and plasma shell plasma

00:24:15,279 --> 00:24:19,039
is kind of unique when it comes to

00:24:17,200 --> 00:24:20,720
weyland because not only do we have the

00:24:19,039 --> 00:24:22,000
commonwealth protocols that every other

00:24:20,720 --> 00:24:25,360
application uses

00:24:22,000 --> 00:24:27,600
it has a load of really bespoke code for

00:24:25,360 --> 00:24:29,679
getting information about other windows

00:24:27,600 --> 00:24:32,320
settings on windows positions

00:24:29,679 --> 00:24:33,679
there's a lot more protocols and a lot

00:24:32,320 --> 00:24:35,279
more wailing code

00:24:33,679 --> 00:24:36,960
and i could have added research support

00:24:35,279 --> 00:24:40,320
here or

00:24:36,960 --> 00:24:43,360
i can just let plasma shell quit and

00:24:40,320 --> 00:24:45,200
just bring it back using a crash handler

00:24:43,360 --> 00:24:46,960
and we can still save everything first

00:24:45,200 --> 00:24:49,279
there's not any risk of data loss

00:24:46,960 --> 00:24:52,799
because you don't really interact with

00:24:49,279 --> 00:24:54,159
plasma shell very much so

00:24:52,799 --> 00:24:57,200
potentially that's a way forward for

00:24:54,159 --> 00:24:57,200
plasma shell as well

00:24:57,919 --> 00:25:01,440
but what's the worst case scenario well

00:24:59,919 --> 00:25:05,200
i have an unsupported client

00:25:01,440 --> 00:25:08,559
uh i haven't mentioned chromium yet um

00:25:05,200 --> 00:25:10,320
a big monolith application or some

00:25:08,559 --> 00:25:11,760
unsupported case what's the absolute

00:25:10,320 --> 00:25:13,279
worst thing that could happen

00:25:11,760 --> 00:25:15,279
if it did some quirky code maybe if it

00:25:13,279 --> 00:25:15,840
does a round trip but making a blocking

00:25:15,279 --> 00:25:17,440
call

00:25:15,840 --> 00:25:19,520
that i said is one of those cases where

00:25:17,440 --> 00:25:23,039
we could fail

00:25:19,520 --> 00:25:26,240
well the worst case is the client closes

00:25:23,039 --> 00:25:27,520
which is what happens now nothing we

00:25:26,240 --> 00:25:28,159
introduce potentially makes the

00:25:27,520 --> 00:25:31,200
situation

00:25:28,159 --> 00:25:31,840
worse clients can opt into this and we

00:25:31,200 --> 00:25:34,559
can get a

00:25:31,840 --> 00:25:36,559
brilliant user experience if clients

00:25:34,559 --> 00:25:39,200
don't opt into this

00:25:36,559 --> 00:25:40,720
nothing gets worse in the current state

00:25:39,200 --> 00:25:41,200
obviously we should still try and make

00:25:40,720 --> 00:25:43,600
sure

00:25:41,200 --> 00:25:45,440
quinn doesn't crash that's always a goal

00:25:43,600 --> 00:25:48,240
but

00:25:45,440 --> 00:25:51,200
we have a backup fallback is that

00:25:48,240 --> 00:25:51,200
nothing gets worse

00:25:51,360 --> 00:25:54,480
so to wrap this up

00:25:54,960 --> 00:25:59,200
it definitely works this is more

00:25:57,520 --> 00:26:01,840
interesting concept

00:25:59,200 --> 00:26:02,640
this isn't quite deployable at that

00:26:01,840 --> 00:26:07,600
level

00:26:02,640 --> 00:26:07,600
but things work really quite well

00:26:07,679 --> 00:26:11,919
and i want to stress that no changes

00:26:09,200 --> 00:26:14,080
were made to your client applications

00:26:11,919 --> 00:26:15,760
okay develop you saw it earlier it was

00:26:14,080 --> 00:26:17,520
just absolutely stock

00:26:15,760 --> 00:26:19,440
not even any recompilations we just

00:26:17,520 --> 00:26:23,600
changed the toolkits

00:26:19,440 --> 00:26:25,919
job done just dropping in new libraries

00:26:23,600 --> 00:26:28,159
the changes are complicated they are

00:26:25,919 --> 00:26:30,320
invasive they're in difficult paths

00:26:28,159 --> 00:26:31,200
but ultimately they're not too big i

00:26:30,320 --> 00:26:33,679
mean that sdl

00:26:31,200 --> 00:26:36,240
patch is manageable you could review it

00:26:33,679 --> 00:26:36,240
in an hour

00:26:37,120 --> 00:26:44,080
hopefully this is something we can do

00:26:40,240 --> 00:26:47,120
moving forward so what's next

00:26:44,080 --> 00:26:49,120
next what's left to do well we need to

00:26:47,120 --> 00:26:51,360
start off streaming your chord changes

00:26:49,120 --> 00:26:52,799
which i've been putting off because it's

00:26:51,360 --> 00:26:54,640
scary

00:26:52,799 --> 00:26:56,799
and partly because i wanted to build up

00:26:54,640 --> 00:26:58,400
this repertoire of some toolkits that

00:26:56,799 --> 00:27:01,520
have been ported

00:26:58,400 --> 00:27:03,360
just so i can make a case of

00:27:01,520 --> 00:27:04,840
these library changes definitely work

00:27:03,360 --> 00:27:07,360
and they work in this variety of

00:27:04,840 --> 00:27:09,360
situations

00:27:07,360 --> 00:27:10,480
um i mentioned of patch messer in the

00:27:09,360 --> 00:27:12,960
open jail paths

00:27:10,480 --> 00:27:14,960
i didn't practice vulcan paths inferior

00:27:12,960 --> 00:27:16,080
should be exactly the same with a very

00:27:14,960 --> 00:27:18,840
similar idea

00:27:16,080 --> 00:27:20,399
we just need to actually make those

00:27:18,840 --> 00:27:22,080
changes

00:27:20,399 --> 00:27:24,640
um there's a few paths and plasma

00:27:22,080 --> 00:27:25,120
integration where we need to follow up

00:27:24,640 --> 00:27:26,960
on

00:27:25,120 --> 00:27:29,120
effectively anything that does low level

00:27:26,960 --> 00:27:29,919
wailing code we have to treat it as

00:27:29,120 --> 00:27:32,159
though

00:27:29,919 --> 00:27:34,640
the compositor took away a global and

00:27:32,159 --> 00:27:36,720
that the global has come back but

00:27:34,640 --> 00:27:37,840
a certain interface has been removed and

00:27:36,720 --> 00:27:40,000
come back

00:27:37,840 --> 00:27:41,600
and in theory clients should be handling

00:27:40,000 --> 00:27:44,960
all of this already

00:27:41,600 --> 00:27:47,200
in practice they're not one thing i hope

00:27:44,960 --> 00:27:49,440
to do in q6 is hook up some

00:27:47,200 --> 00:27:51,039
very generic signals into cubewell and

00:27:49,440 --> 00:27:54,320
client extension that i mentioned

00:27:51,039 --> 00:27:55,919
yesterday so that it treats it exactly

00:27:54,320 --> 00:27:56,960
the same as a compulsive removing

00:27:55,919 --> 00:28:00,000
extension

00:27:56,960 --> 00:28:02,399
or a crash has just happened and then

00:28:00,000 --> 00:28:03,919
you have an opportunity to reconnect

00:28:02,399 --> 00:28:06,240
with the same code path

00:28:03,919 --> 00:28:08,320
inside your client so we need to follow

00:28:06,240 --> 00:28:10,240
up inside plasma integration in a few

00:28:08,320 --> 00:28:12,399
places

00:28:10,240 --> 00:28:14,159
and obviously there are other toolkits

00:28:12,399 --> 00:28:16,640
out there gtk

00:28:14,159 --> 00:28:19,440
wine is quite a big toolkit that we want

00:28:16,640 --> 00:28:22,480
to have native support for

00:28:19,440 --> 00:28:23,279
but hopefully they'll get jealous of

00:28:22,480 --> 00:28:25,520
what we're doing

00:28:23,279 --> 00:28:26,399
inside the cute space and implement

00:28:25,520 --> 00:28:28,240
these changes

00:28:26,399 --> 00:28:29,600
i have been speaking to one of the gtk

00:28:28,240 --> 00:28:33,840
developers who seems

00:28:29,600 --> 00:28:33,840
on board with this as an approach

00:28:34,640 --> 00:28:38,399
and there are a lot of edge cases

00:28:37,200 --> 00:28:41,679
potentially

00:28:38,399 --> 00:28:44,159
i mean only way we'll find these is for

00:28:41,679 --> 00:28:45,279
extensive testing but i'm sure educators

00:28:44,159 --> 00:28:47,520
will come up

00:28:45,279 --> 00:28:48,320
i've been running the cute restarting on

00:28:47,520 --> 00:28:51,360
my laptop

00:28:48,320 --> 00:28:54,320
since around february

00:28:51,360 --> 00:28:55,440
and things are working generally just

00:28:54,320 --> 00:28:57,679
fine

00:28:55,440 --> 00:28:58,640
but there have been some nuances at one

00:28:57,679 --> 00:29:00,640
point k screen

00:28:58,640 --> 00:29:02,159
didn't work properly that's fixed now

00:29:00,640 --> 00:29:04,559
but i'm sure we'll find others as we

00:29:02,159 --> 00:29:06,720
continue

00:29:04,559 --> 00:29:08,720
when will i say yes so i've mentioned

00:29:06,720 --> 00:29:11,200
there are some cute sex changes

00:29:08,720 --> 00:29:12,640
and implicitly that automatically makes

00:29:11,200 --> 00:29:15,679
it

00:29:12,640 --> 00:29:18,720
a while so 18 months from now

00:29:15,679 --> 00:29:21,279
but potentially it means when we start

00:29:18,720 --> 00:29:23,039
moving everyone to wayland by default we

00:29:21,279 --> 00:29:26,399
will have all of this in place

00:29:23,039 --> 00:29:27,760
so it's going to be a while especially

00:29:26,399 --> 00:29:28,640
as there are underlying changes that

00:29:27,760 --> 00:29:32,080
need to happen

00:29:28,640 --> 00:29:33,760
throughout the stack a new api which has

00:29:32,080 --> 00:29:34,480
to land before these toolkits can make

00:29:33,760 --> 00:29:36,080
use of it

00:29:34,480 --> 00:29:37,600
which is always a frustrating chicken

00:29:36,080 --> 00:29:41,039
and egg problem

00:29:37,600 --> 00:29:43,679
but we'll see what happens

00:29:41,039 --> 00:29:44,320
can i run this today well as i mentioned

00:29:43,679 --> 00:29:46,799
before

00:29:44,320 --> 00:29:48,320
there are a lot of patches needed from

00:29:46,799 --> 00:29:50,960
libwaylon to method to

00:29:48,320 --> 00:29:52,960
all of these toolkits but it is doable

00:29:50,960 --> 00:29:54,640
i'm not going to read out urls but

00:29:52,960 --> 00:29:56,320
if you look for my relevant blog post

00:29:54,640 --> 00:29:59,039
with the same title

00:29:56,320 --> 00:30:00,960
you will see a set of links to all of my

00:29:59,039 --> 00:30:09,840
patches

00:30:00,960 --> 00:30:09,840
so any questions

00:30:12,399 --> 00:30:18,480
and here we are

00:30:15,760 --> 00:30:20,000
yeah i've had a quick change of clothes

00:30:18,480 --> 00:30:23,840
and now

00:30:20,000 --> 00:30:23,840
yep here to answer questions

00:30:24,080 --> 00:30:27,760
oh luigi's gone oh my goodness i've

00:30:25,840 --> 00:30:31,520
killed luigi

00:30:27,760 --> 00:30:31,520
unfortunately mario and lady have many

00:30:34,840 --> 00:30:51,840
lives

00:30:37,520 --> 00:30:51,840
luigi i can't hear you

00:30:54,320 --> 00:30:57,840
while i wait for that kai sent me a

00:30:56,399 --> 00:31:01,360
message and asked me to

00:30:57,840 --> 00:31:03,840
just prove that q creator works so

00:31:01,360 --> 00:31:06,320
cute later i'm gonna do a live demo

00:31:03,840 --> 00:31:09,519
queen wayland replace

00:31:06,320 --> 00:31:11,860
oh will it work it does

00:31:09,519 --> 00:31:14,640
cute creator oh

00:31:11,860 --> 00:31:16,880
[Music]

00:31:14,640 --> 00:31:18,159
right oh i'll read some questions myself

00:31:16,880 --> 00:31:20,080
uh kai

00:31:18,159 --> 00:31:21,840
says you mentioned custom whaling

00:31:20,080 --> 00:31:23,679
protocols in plasma shell will this

00:31:21,840 --> 00:31:24,559
affect any time it uses custom wording

00:31:23,679 --> 00:31:27,440
code

00:31:24,559 --> 00:31:28,880
yes if you use custom world code there

00:31:27,440 --> 00:31:29,840
are changes that are going to need to

00:31:28,880 --> 00:31:33,360
happen

00:31:29,840 --> 00:31:35,519
i'm hoping we can abstract this so

00:31:33,360 --> 00:31:37,519
yeah powerful our global has been

00:31:35,519 --> 00:31:40,480
removed and

00:31:37,519 --> 00:31:42,399
things have been reset it's the same and

00:31:40,480 --> 00:31:43,760
then

00:31:42,399 --> 00:31:47,679
from your client point of view you just

00:31:43,760 --> 00:31:50,559
have to implement one thing

00:31:47,679 --> 00:31:51,760
uh niko asked how does gtk behave well

00:31:50,559 --> 00:31:54,480
right now

00:31:51,760 --> 00:31:55,039
it will just close like it's doing now

00:31:54,480 --> 00:31:57,919
which

00:31:55,039 --> 00:31:59,919
as i said it's no worse i think

00:31:57,919 --> 00:32:01,600
ultimately we are going to have to

00:31:59,919 --> 00:32:05,440
convince people

00:32:01,600 --> 00:32:06,240
we've done this demo we want you guys to

00:32:05,440 --> 00:32:10,640
be involved

00:32:06,240 --> 00:32:10,640
and then introduce us into cute

00:32:11,760 --> 00:32:17,120
luigi did you want to say something uh

00:32:15,120 --> 00:32:18,399
yes i guess you can hear me now

00:32:17,120 --> 00:32:22,320
hopefully

00:32:18,399 --> 00:32:25,360
sir it's a talk about

00:32:22,320 --> 00:32:29,840
restarting and not restarting so i guess

00:32:25,360 --> 00:32:29,840
it's appropriate

00:32:36,640 --> 00:32:41,279
okay so we have the other from nate are

00:32:39,760 --> 00:32:42,159
there merge requests for these changes

00:32:41,279 --> 00:32:45,760
that we can follow

00:32:42,159 --> 00:32:48,320
i guess you have not started yet also i

00:32:45,760 --> 00:32:49,200
i i have branches that are pushed if you

00:32:48,320 --> 00:32:51,440
can find them

00:32:49,200 --> 00:32:52,720
in woman liberal and woman messer and

00:32:51,440 --> 00:32:54,880
personal forks

00:32:52,720 --> 00:32:56,720
i haven't turned these these branches

00:32:54,880 --> 00:32:58,000
into mud requests

00:32:56,720 --> 00:33:00,080
partly because they're just trying to do

00:32:58,000 --> 00:33:02,240
clean up at the time uh cute railing

00:33:00,080 --> 00:33:05,279
you'll find my falcon invent somewhere

00:33:02,240 --> 00:33:06,960
but it's full of some q debug noise so

00:33:05,279 --> 00:33:08,799
is it it's just a little bit of cleanup

00:33:06,960 --> 00:33:11,600
to do to get it

00:33:08,799 --> 00:33:13,360
to a less embarrassing state i hope to

00:33:11,600 --> 00:33:15,519
do all of that before academy

00:33:13,360 --> 00:33:17,279
that was clearly a plan when the call

00:33:15,519 --> 00:33:19,519
for papers came about

00:33:17,279 --> 00:33:21,440
but that's not how things work in

00:33:19,519 --> 00:33:23,919
reality

00:33:21,440 --> 00:33:25,679
oh well no problem it there will be

00:33:23,919 --> 00:33:26,559
there will be time and it's good to hear

00:33:25,679 --> 00:33:28,480
that other

00:33:26,559 --> 00:33:30,240
the other toolkits are at least

00:33:28,480 --> 00:33:33,440
partially on board with this because

00:33:30,240 --> 00:33:35,600
otherwise it will be kind of um yeah

00:33:33,440 --> 00:33:36,480
not complete but it's ready it's really

00:33:35,600 --> 00:33:38,880
good

00:33:36,480 --> 00:33:40,480
um there is another question what will

00:33:38,880 --> 00:33:42,880
be a potential timeline

00:33:40,480 --> 00:33:45,200
for this work to be merged well it's

00:33:42,880 --> 00:33:48,720
connected to the previous one

00:33:45,200 --> 00:33:51,039
yeah so especially as i said we've got

00:33:48,720 --> 00:33:53,039
if we've got a cute sex alliance and

00:33:51,039 --> 00:33:54,960
some minimum time frame on it it's going

00:33:53,039 --> 00:33:57,919
to be at least

00:33:54,960 --> 00:33:59,360
a long time but i think i think that we

00:33:57,919 --> 00:34:02,320
can still have this happen

00:33:59,360 --> 00:34:03,840
before plasma moves to raylan by default

00:34:02,320 --> 00:34:06,559
i think

00:34:03,840 --> 00:34:08,960
doing a timeline based on that semantic

00:34:06,559 --> 00:34:10,639
level of the full wii mover default for

00:34:08,960 --> 00:34:13,599
our users

00:34:10,639 --> 00:34:13,599
that seems doable

00:34:14,159 --> 00:34:18,079
that's good uh there is another question

00:34:17,280 --> 00:34:20,879
from kai

00:34:18,079 --> 00:34:21,679
i think that's yeah okay you recon we

00:34:20,879 --> 00:34:24,000
can make sure

00:34:21,679 --> 00:34:26,240
wine's relatively fresh new wayland

00:34:24,000 --> 00:34:27,839
support effort can already cater for

00:34:26,240 --> 00:34:31,280
this

00:34:27,839 --> 00:34:32,960
sure why not i mean because i mean

00:34:31,280 --> 00:34:35,119
relatively speaking you're only going to

00:34:32,960 --> 00:34:36,480
be using a small subset of avalon

00:34:35,119 --> 00:34:39,119
protocols

00:34:36,480 --> 00:34:41,280
it'll be similar to adding something i

00:34:39,119 --> 00:34:43,839
said sdl 100 lines

00:34:41,280 --> 00:34:44,960
i think i said it was 75 lines it's

00:34:43,839 --> 00:34:48,000
going to be

00:34:44,960 --> 00:34:50,000
similar for um

00:34:48,000 --> 00:34:52,159
for this it might be more i'm not going

00:34:50,000 --> 00:34:53,679
to claim how many lines of code

00:34:52,159 --> 00:34:54,800
something i haven't looked at is going

00:34:53,679 --> 00:34:57,040
to be

00:34:54,800 --> 00:34:59,040
but it should be manageable it should be

00:34:57,040 --> 00:35:02,720
exact same

00:34:59,040 --> 00:35:04,400
approach amount of same workload

00:35:02,720 --> 00:35:07,839
i like how you both you're in matching

00:35:04,400 --> 00:35:11,200
t-shirt tips oh it's the academy t-shirt

00:35:07,839 --> 00:35:13,280
i'll explain it yeah i

00:35:11,200 --> 00:35:14,720
i have a i have a question for you david

00:35:13,280 --> 00:35:18,000
as well yes

00:35:14,720 --> 00:35:20,160
i've been advertising our pop quiz

00:35:18,000 --> 00:35:21,920
and asking people to send photos all

00:35:20,160 --> 00:35:24,640
this event have you done it at least

00:35:21,920 --> 00:35:24,640
once yourself

00:35:26,000 --> 00:35:31,280
you'll see which desk of mine there'll

00:35:27,599 --> 00:35:32,880
be me in a way

00:35:31,280 --> 00:35:35,200
okay we are having this pub quiz

00:35:32,880 --> 00:35:37,280
together we are the hosts of that

00:35:35,200 --> 00:35:39,680
maybe you can use this location to

00:35:37,280 --> 00:35:42,240
advertise it at least once

00:35:39,680 --> 00:35:42,880
yes there will be a pop quiz thursday at

00:35:42,240 --> 00:35:46,480
some point

00:35:42,880 --> 00:35:46,480
in your time zone look it up

00:35:48,320 --> 00:35:51,520
uh i couldn't ask for a better

00:35:50,000 --> 00:35:53,520
advertisement

00:35:51,520 --> 00:35:56,960
but you could you wouldn't have got one

00:35:53,520 --> 00:35:56,960
that was literally me trying

00:35:57,359 --> 00:36:02,640
okay um some helpful person just put a

00:36:00,960 --> 00:36:04,400
link in it oh it's you

00:36:02,640 --> 00:36:05,680
uh some help first put a link in the

00:36:04,400 --> 00:36:09,920
chat

00:36:05,680 --> 00:36:12,400
yep uh okay are we done with questions

00:36:09,920 --> 00:36:13,760
did you find any any other there are no

00:36:12,400 --> 00:36:16,880
other questions

00:36:13,760 --> 00:36:17,359
it seems yep so i guess we're done with

00:36:16,880 --> 00:36:21,280
this

00:36:17,359 --> 00:36:23,359
thanks again david and we can restart in

00:36:21,280 --> 00:36:25,040
three minutes i think three and half

00:36:23,359 --> 00:36:28,240
something like that pretty good

00:36:25,040 --> 00:36:30,640
nice yeah

00:36:28,240 --> 00:36:31,599
and in in those three minutes we'll be

00:36:30,640 --> 00:36:34,160
hearing from

00:36:31,599 --> 00:36:34,800
bjorn about how we can solve the

00:36:34,160 --> 00:36:41,839
personal

00:36:34,800 --> 00:36:41,839
data problem see you in a few minutes

00:36:43,440 --> 00:36:45,520

YouTube URL: https://www.youtube.com/watch?v=SNKzVYUEr7k


