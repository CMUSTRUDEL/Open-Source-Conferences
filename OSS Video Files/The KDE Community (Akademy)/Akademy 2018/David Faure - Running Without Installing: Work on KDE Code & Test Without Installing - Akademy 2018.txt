Title: David Faure - Running Without Installing: Work on KDE Code & Test Without Installing - Akademy 2018
Publication date: 2018-09-05
Playlist: Akademy 2018
Description: 
	Being able to run applications and unittests without installing them makes it easier for developers to contribute to one piece of the puzzle (e.g. to test changes on top of a stable system without the risk of messing it up).

It also shortens the change/compile/test development cycle by removing the install step from it.

This work was triggered by the presentation and discussion at last year's Akademy, "Looking at the Application Developer Story / Making it easy for contributors to get started". In this year's presentation, we'll present the results of that work. First, the current state of this feature for the KF5 frameworks themselves, and then teaching application and library developers what they need to do to make it possible to run applications and unittests without installing them first.

Come to learn or discuss about this challenge :-)

Speaker: David Faure
Captions: 
	00:00:07,740 --> 00:00:13,000
so welcome to the afternoon session I

00:00:11,559 --> 00:00:16,170
think I

00:00:13,000 --> 00:00:19,480
to talk much about our present data

00:00:16,170 --> 00:00:22,000
David should be known almost everyone in

00:00:19,480 --> 00:00:23,290
the community if you have not been

00:00:22,000 --> 00:00:25,599
living below us though

00:00:23,290 --> 00:00:28,240
Stone Sanger and today he will talk

00:00:25,599 --> 00:00:31,359
about how to run KDE applications and

00:00:28,240 --> 00:00:36,340
how to debug them without installing

00:00:31,359 --> 00:00:39,730
them completely so you can faster faster

00:00:36,340 --> 00:00:41,580
development processes right exactly this

00:00:39,730 --> 00:00:43,900
is actually a follow-up from the

00:00:41,580 --> 00:00:45,940
position from last year where we were

00:00:43,900 --> 00:00:49,420
thinking about how to make things easier

00:00:45,940 --> 00:00:52,000
for new developers and and one of the

00:00:49,420 --> 00:00:54,670
things that came up as a sort of a

00:00:52,000 --> 00:00:56,739
prerequisite for other things like Cohen

00:00:54,670 --> 00:00:59,289
on integration and what whatever next

00:00:56,739 --> 00:01:02,739
step we might want to take is to make it

00:00:59,289 --> 00:01:05,740
easier for for developers to be able to

00:01:02,739 --> 00:01:07,720
work on something without messing up the

00:01:05,740 --> 00:01:19,479
system without installing into the

00:01:07,720 --> 00:01:22,560
system so ok that doesn't work it's not

00:01:19,479 --> 00:01:27,909
what I see on this screen hold on

00:01:22,560 --> 00:01:30,159
interesting right so why do we want to

00:01:27,909 --> 00:01:31,509
do that make install is fast right we

00:01:30,159 --> 00:01:33,400
have speed up everything in small

00:01:31,509 --> 00:01:35,619
modules so that we can work on smaller

00:01:33,400 --> 00:01:39,130
things compared to when it used to be KD

00:01:35,619 --> 00:01:41,619
Lipski dBase big modules so now that is

00:01:39,130 --> 00:01:43,869
yes making make install is quite fast

00:01:41,619 --> 00:01:46,420
but not only applies if you are

00:01:43,869 --> 00:01:48,610
installing into a system we have built

00:01:46,420 --> 00:01:52,450
yourself in the first place for instance

00:01:48,610 --> 00:01:54,070
using key resource build or craft it

00:01:52,450 --> 00:01:56,079
doesn't really help people who want to

00:01:54,070 --> 00:01:58,810
develop based on destroy packages

00:01:56,079 --> 00:02:00,700
because then either you need to install

00:01:58,810 --> 00:02:03,040
as routes into your system or you need

00:02:00,700 --> 00:02:05,020
to set up like all layers you know will

00:02:03,040 --> 00:02:06,790
you set up ten environment variables to

00:02:05,020 --> 00:02:10,060
point to different installation prefix

00:02:06,790 --> 00:02:12,250
on top of your system packages and that

00:02:10,060 --> 00:02:15,430
works but it's more subtle than we would

00:02:12,250 --> 00:02:18,400
want for newcomers also a lot of the

00:02:15,430 --> 00:02:20,500
scripts out there or the IES they don't

00:02:18,400 --> 00:02:22,209
one has this notion that you need to

00:02:20,500 --> 00:02:25,160
install before you can run which F just

00:02:22,209 --> 00:02:27,170
builds all of the IDS except

00:02:25,160 --> 00:02:31,670
whoo well it had to because of the Qt

00:02:27,170 --> 00:02:33,410
community but other ideas they are they

00:02:31,670 --> 00:02:36,470
are built around the principle that you

00:02:33,410 --> 00:02:43,630
will build and run it's not built

00:02:36,470 --> 00:02:47,780
install and run for mobile it is yes

00:02:43,630 --> 00:02:49,700
Astro but if you use if you are doing

00:02:47,780 --> 00:02:51,380
that on the host then whether you're

00:02:49,700 --> 00:02:53,510
using kid creator or Visual Studio

00:02:51,380 --> 00:02:55,580
they don't have this installed step in

00:02:53,510 --> 00:02:57,380
between you could set it up of course

00:02:55,580 --> 00:02:59,270
but what we're trying to get to you is

00:02:57,380 --> 00:03:02,060
to somewhere where we don't have to set

00:02:59,270 --> 00:03:04,370
up anything out of the ordinary I've

00:03:02,060 --> 00:03:06,890
also seen people who fear messing up

00:03:04,370 --> 00:03:08,930
their working system I will pass that

00:03:06,890 --> 00:03:11,660
fear 20 years ago but some people still

00:03:08,930 --> 00:03:13,640
want to you know install into the system

00:03:11,660 --> 00:03:15,020
and then of course the other thing is if

00:03:13,640 --> 00:03:17,120
you're going if you're going to replace

00:03:15,020 --> 00:03:19,130
some of your system components with your

00:03:17,120 --> 00:03:21,410
own you might be missing whichever

00:03:19,130 --> 00:03:23,600
adjustments the distribution has done to

00:03:21,410 --> 00:03:25,460
these components it could be

00:03:23,600 --> 00:03:26,870
distribution specific patches it could

00:03:25,460 --> 00:03:29,650
be different directories it could be

00:03:26,870 --> 00:03:32,770
anything that is not vanilla upstream

00:03:29,650 --> 00:03:32,770
kiddie stuff

00:03:32,860 --> 00:03:40,370
so this whole idea of being able to run

00:03:38,120 --> 00:03:43,220
the tests and possibly applications

00:03:40,370 --> 00:03:45,440
without installing it's an effort that I

00:03:43,220 --> 00:03:48,230
started a year ago and the status is

00:03:45,440 --> 00:03:50,840
that even the CI does it nowadays for

00:03:48,230 --> 00:03:54,200
frameworks but not for the rest of the

00:03:50,840 --> 00:03:57,950
KDE products right but for frameworks

00:03:54,200 --> 00:03:59,750
that is actually set up and it's the

00:03:57,950 --> 00:04:02,060
reason why not everything is as clean as

00:03:59,750 --> 00:04:03,410
it used to be because as we are going to

00:04:02,060 --> 00:04:10,790
see there are still a few things that

00:04:03,410 --> 00:04:12,530
need work but a lot of it works so the

00:04:10,790 --> 00:04:14,239
way I see that is you know this is my

00:04:12,530 --> 00:04:17,000
architecture diagram it couldn't be any

00:04:14,239 --> 00:04:19,489
simpler you were working on one module

00:04:17,000 --> 00:04:22,310
whatever that means right a library a

00:04:19,489 --> 00:04:24,710
framework an application whatever that's

00:04:22,310 --> 00:04:26,600
my pet thingy and then you want

00:04:24,710 --> 00:04:29,570
everything else to come from the working

00:04:26,600 --> 00:04:31,700
system so usually what is in Thresh us

00:04:29,570 --> 00:04:34,850
are this includes everything else right

00:04:31,700 --> 00:04:36,140
the mine pipes cute your frameworks

00:04:34,850 --> 00:04:37,740
plasma applications and all of that

00:04:36,140 --> 00:04:39,420
right that's first

00:04:37,740 --> 00:04:41,490
the scenarios that we want to make work

00:04:39,420 --> 00:04:43,470
and that's the goal here one issue

00:04:41,490 --> 00:04:46,170
that's going to come up a few times is

00:04:43,470 --> 00:04:48,960
the duplication the files that I'm

00:04:46,170 --> 00:04:52,440
working on in my module at there also

00:04:48,960 --> 00:04:53,700
exist in the system and I don't want to

00:04:52,440 --> 00:04:56,760
pick those that I want to pick those

00:04:53,700 --> 00:04:58,830
from my build directory and of course if

00:04:56,760 --> 00:05:00,990
it's the exact same copy of the same

00:04:58,830 --> 00:05:03,090
file then I don't really care I it works

00:05:00,990 --> 00:05:04,710
right but whenever I'm working on a

00:05:03,090 --> 00:05:06,210
change then I want to make sure that

00:05:04,710 --> 00:05:09,360
it's my version that's gonna be picked

00:05:06,210 --> 00:05:12,240
up not the one from the system so we are

00:05:09,360 --> 00:05:14,010
going to see a few ways to try and while

00:05:12,240 --> 00:05:17,430
make sure that the stuff from the system

00:05:14,010 --> 00:05:20,280
isn't picked up but this at the same

00:05:17,430 --> 00:05:21,390
time any dependency that I use I want

00:05:20,280 --> 00:05:23,130
that to come from the system

00:05:21,390 --> 00:05:24,300
I want the mime type from the system I

00:05:23,130 --> 00:05:26,220
want cute on the system I want

00:05:24,300 --> 00:05:28,350
frameworks from the system so it's a

00:05:26,220 --> 00:05:30,630
little bit difficult to say I want parts

00:05:28,350 --> 00:05:34,110
of this but not all of it and that does

00:05:30,630 --> 00:05:36,960
where it gets a bit tricky what I didn't

00:05:34,110 --> 00:05:39,840
draw here is the situation on the CI the

00:05:36,960 --> 00:05:42,960
CI is a lot better for this because

00:05:39,840 --> 00:05:45,060
basically it sets up a system over there

00:05:42,960 --> 00:05:47,310
which is exactly the dependencies of the

00:05:45,060 --> 00:05:48,150
thing that's being built and tested and

00:05:47,310 --> 00:05:50,850
nothing else

00:05:48,150 --> 00:05:53,220
which means we can use all of the system

00:05:50,850 --> 00:05:55,260
there it has exactly what we need it

00:05:53,220 --> 00:05:57,120
doesn't have any duplication from what

00:05:55,260 --> 00:05:59,460
we are currently building so it's the

00:05:57,120 --> 00:06:03,150
best environment possible so ideally

00:05:59,460 --> 00:06:05,970
when you as a you know you're not a new

00:06:03,150 --> 00:06:07,590
come a newcomer to the community you

00:06:05,970 --> 00:06:09,660
want to make your application or your

00:06:07,590 --> 00:06:12,930
module work with this so you can go to

00:06:09,660 --> 00:06:15,390
some extra effort to make sure that this

00:06:12,930 --> 00:06:18,030
works ideally we would set up something

00:06:15,390 --> 00:06:20,040
exactly like the CI but that's more work

00:06:18,030 --> 00:06:22,920
than you would normally do but just to

00:06:20,040 --> 00:06:25,950
put it out there ideally that's what we

00:06:22,920 --> 00:06:28,110
would want to do in practice we don't go

00:06:25,950 --> 00:06:30,630
that far we simply make it work for us

00:06:28,110 --> 00:06:35,340
and then push and see if it works on the

00:06:30,630 --> 00:06:37,230
CI one issue there is okay how do I make

00:06:35,340 --> 00:06:41,610
sure that I don't pick up anything from

00:06:37,230 --> 00:06:43,800
/usr one very very brute force idea is

00:06:41,610 --> 00:06:45,710
to say let me get this directory

00:06:43,800 --> 00:06:48,000
completely out of what I'm testing

00:06:45,710 --> 00:06:49,890
obviously that's not gonna work on very

00:06:48,000 --> 00:06:50,999
high level applications that use a lot

00:06:49,890 --> 00:06:52,289
of stuff but

00:06:50,999 --> 00:06:53,969
when I'm working on the frameworks

00:06:52,289 --> 00:06:56,939
themselves this can be a valid approach

00:06:53,969 --> 00:06:58,709
if I spent a few days now I'm working on

00:06:56,939 --> 00:07:01,019
case service it doesn't depend on that

00:06:58,709 --> 00:07:02,759
much else I can tell it ok forget about

00:07:01,019 --> 00:07:06,029
specializing I did they get this

00:07:02,759 --> 00:07:09,299
completely out of existed at ideas small

00:07:06,029 --> 00:07:11,219
technical note about that if you don't

00:07:09,299 --> 00:07:13,199
set exited at ideas then it will point

00:07:11,219 --> 00:07:15,599
to slash USR so basically you want to

00:07:13,199 --> 00:07:17,579
set it to something so that it doesn't

00:07:15,599 --> 00:07:19,679
look there so one of the things I've

00:07:17,579 --> 00:07:21,869
been trying is set it to foo write

00:07:19,679 --> 00:07:24,989
something that does not exist meaning

00:07:21,869 --> 00:07:27,959
there is nothing to be found using xyg

00:07:24,989 --> 00:07:29,159
data dance if you do that what it works

00:07:27,959 --> 00:07:30,599
right nothing from the system is

00:07:29,159 --> 00:07:33,419
preventing you but you're missing a lot

00:07:30,599 --> 00:07:35,279
of stuff and I was seeing failures due

00:07:33,419 --> 00:07:37,939
to my tabs being missing

00:07:35,279 --> 00:07:40,259
so a quick hike for that let's make a

00:07:37,939 --> 00:07:42,569
temporary prefix copy the mime types

00:07:40,259 --> 00:07:44,579
into it point there and then at least I

00:07:42,569 --> 00:07:46,439
have my mind pipes and this idea could

00:07:44,579 --> 00:07:48,569
be extended to anything else right if

00:07:46,439 --> 00:07:50,339
you if your tests fail because you need

00:07:48,569 --> 00:07:52,379
an icon theme you could copy it over

00:07:50,339 --> 00:07:53,909
there or anything else in it of course

00:07:52,379 --> 00:07:55,919
when you get to the point you might have

00:07:53,909 --> 00:07:57,269
40 different dependencies and so on you

00:07:55,919 --> 00:07:58,050
don't want to do that it's going to be

00:07:57,269 --> 00:08:00,389
too much trouble

00:07:58,050 --> 00:08:02,999
but for just a few data files that was a

00:08:00,389 --> 00:08:07,979
quick hack that allowing me to do more

00:08:02,999 --> 00:08:10,860
further right so this is just an ID for

00:08:07,979 --> 00:08:12,569
testing locally and trying to reproduce

00:08:10,860 --> 00:08:14,489
the failures that you might see on CI

00:08:12,569 --> 00:08:16,289
right I'm not saying that you should set

00:08:14,489 --> 00:08:18,269
up the full CI for yourself that's too

00:08:16,289 --> 00:08:20,279
much work but this is the way I found

00:08:18,269 --> 00:08:22,259
that to make it possible to at least

00:08:20,279 --> 00:08:27,119
reproduce some of the failures that I

00:08:22,259 --> 00:08:30,599
was saying okay now let's move into a

00:08:27,119 --> 00:08:33,269
whole section about what works how is it

00:08:30,599 --> 00:08:36,209
possible for me to run a binary from the

00:08:33,269 --> 00:08:38,759
build directory and if that binary uses

00:08:36,209 --> 00:08:40,649
a shared library which also come from

00:08:38,759 --> 00:08:42,779
the bill directory I want these to be

00:08:40,649 --> 00:08:45,029
picked up not the Sham libraries from

00:08:42,779 --> 00:08:47,339
the system right you don't need to do

00:08:45,029 --> 00:08:48,000
anything for that to happen see Meg does

00:08:47,339 --> 00:08:50,850
it for you

00:08:48,000 --> 00:08:52,709
the way that Simek works at least the

00:08:50,850 --> 00:08:56,430
way we set it up any in extra Civic

00:08:52,709 --> 00:08:59,370
modules is that it will compile into the

00:08:56,430 --> 00:09:01,319
binaries the path to the build directory

00:08:59,370 --> 00:09:02,590
and when we say compiling path it's

00:09:01,319 --> 00:09:04,779
actually called the run

00:09:02,590 --> 00:09:07,540
if you use the objdump commands you can

00:09:04,779 --> 00:09:09,550
actually see the run path that has been

00:09:07,540 --> 00:09:11,830
built into the executable and you can

00:09:09,550 --> 00:09:13,960
see that it will point to your build

00:09:11,830 --> 00:09:16,300
directory basically in the case of ki o

00:09:13,960 --> 00:09:18,610
it would be carrion slash bin when all

00:09:16,300 --> 00:09:20,710
of the lips actually go to that's one of

00:09:18,610 --> 00:09:22,180
the changes that I made a year ago to

00:09:20,710 --> 00:09:24,460
make sure that everything goes into this

00:09:22,180 --> 00:09:25,690
bin directory yes it looks a little bit

00:09:24,460 --> 00:09:28,150
like Windows we don't really care

00:09:25,690 --> 00:09:31,810
everything is in there the executables

00:09:28,150 --> 00:09:34,089
the libraries it's all there and the run

00:09:31,810 --> 00:09:36,070
path actually points to that and the

00:09:34,089 --> 00:09:38,410
simit magic makes it so that when you

00:09:36,070 --> 00:09:41,380
actually do make install it will patch

00:09:38,410 --> 00:09:43,420
the binary to put the correct run pass

00:09:41,380 --> 00:09:45,100
into it basically only points to the

00:09:43,420 --> 00:09:48,370
installation prefix and get rid of the

00:09:45,100 --> 00:09:50,830
Builder from there that's very nice

00:09:48,370 --> 00:09:52,690
magic we get from scenic what's

00:09:50,830 --> 00:09:54,310
interesting about that is it works out

00:09:52,690 --> 00:09:56,440
of the box you don't need to do anything

00:09:54,310 --> 00:09:58,570
but you should do one thing you can mess

00:09:56,440 --> 00:10:01,089
it up if you export only library path

00:09:58,570 --> 00:10:04,080
this would take precedence and then it

00:10:01,089 --> 00:10:04,080
doesn't actually work anymore

00:10:06,040 --> 00:10:12,130
that might not even be true anymore that

00:10:08,650 --> 00:10:13,870
was true with our path let me get it

00:10:12,130 --> 00:10:15,820
straight again rent path

00:10:13,870 --> 00:10:17,680
well that's correct rent path actually

00:10:15,820 --> 00:10:19,839
has less priority than LD library path

00:10:17,680 --> 00:10:22,600
so if you said that environment viable

00:10:19,839 --> 00:10:24,700
and you make it point to you know your

00:10:22,600 --> 00:10:25,870
system Lib directory or wherever you

00:10:24,700 --> 00:10:28,150
install your k/d stuff

00:10:25,870 --> 00:10:29,680
it won't work anymore so basically on my

00:10:28,150 --> 00:10:32,680
system I killed LD library path

00:10:29,680 --> 00:10:35,350
completely and it's usually not needed

00:10:32,680 --> 00:10:37,300
because any well-behaved application

00:10:35,350 --> 00:10:40,380
will have a run path pointing to its

00:10:37,300 --> 00:10:40,380
installation prefix

00:10:44,210 --> 00:10:50,460
it is a common practice on Simic see

00:10:47,910 --> 00:10:52,710
make actually has a few settings for run

00:10:50,460 --> 00:10:54,900
path and we just enable the setting that

00:10:52,710 --> 00:10:57,150
says please point to the Builder and add

00:10:54,900 --> 00:11:02,520
ad that install install time it is a

00:10:57,150 --> 00:11:09,240
c-major feature we just enable it is it

00:11:02,520 --> 00:11:10,620
even better alright yeah yeah I'm

00:11:09,240 --> 00:11:11,700
surprised I thought you had enabled ooh

00:11:10,620 --> 00:11:14,550
that might have changed over the

00:11:11,700 --> 00:11:17,250
versions or something but yeah yeah it's

00:11:14,550 --> 00:11:20,060
not a kiddie specific it's just exactly

00:11:17,250 --> 00:11:20,060
what we need for this

00:11:20,870 --> 00:11:28,170
okay so share libraries they are found a

00:11:23,850 --> 00:11:30,810
problem the next problem is how do you

00:11:28,170 --> 00:11:32,510
find the helper binaries if you have

00:11:30,810 --> 00:11:37,260
you're running one test and it has to

00:11:32,510 --> 00:11:39,810
start some other binary what we do is

00:11:37,260 --> 00:11:41,970
that in extras make module we set things

00:11:39,810 --> 00:11:42,540
up so that everything ends up in the bin

00:11:41,970 --> 00:11:45,540
directory

00:11:42,540 --> 00:11:48,270
that's all tables or libraries and also

00:11:45,540 --> 00:11:51,240
all plugins which are built by this

00:11:48,270 --> 00:11:53,670
module we put everything together but we

00:11:51,240 --> 00:11:57,210
still have to find it there so how do we

00:11:53,670 --> 00:11:58,920
make it find an executable there you

00:11:57,210 --> 00:12:02,010
might have to adjust the code this time

00:11:58,920 --> 00:12:04,140
to actually look up in the directory of

00:12:02,010 --> 00:12:05,520
the application that's trivial you can

00:12:04,140 --> 00:12:07,560
use to kyouko application application

00:12:05,520 --> 00:12:09,690
there path which is you know the

00:12:07,560 --> 00:12:12,780
directory from which the exact table is

00:12:09,690 --> 00:12:16,590
running and you can use that as the

00:12:12,780 --> 00:12:17,880
first directory you look into and if you

00:12:16,590 --> 00:12:19,680
don't find anything there and then you

00:12:17,880 --> 00:12:25,710
can use whatever you would do normally

00:12:19,680 --> 00:12:28,010
to find your executable okay that's

00:12:25,710 --> 00:12:30,840
that's not rocket science but it's still

00:12:28,010 --> 00:12:33,930
well as the simple recipe I found to

00:12:30,840 --> 00:12:36,780
make this work yeah at runtime it might

00:12:33,930 --> 00:12:41,280
do one more look at them they did three

00:12:36,780 --> 00:12:43,800
not that big of a problem right and I

00:12:41,280 --> 00:12:46,830
didn't say much about plugins plugins

00:12:43,800 --> 00:12:48,690
the so we want them in the bin directory

00:12:46,830 --> 00:12:53,010
as well so that we know where to look

00:12:48,690 --> 00:12:53,460
them up and this function from kiko

00:12:53,010 --> 00:12:56,680
add-ins

00:12:53,460 --> 00:12:58,930
actually installs the plugins

00:12:56,680 --> 00:13:00,940
in the bin directory with the same

00:12:58,930 --> 00:13:03,580
directory structure as you would have in

00:13:00,940 --> 00:13:06,520
the final system so if it's okay I will

00:13:03,580 --> 00:13:09,640
slave then it would go into /k v /k io

00:13:06,520 --> 00:13:10,720
as a sub dia of the plug-in path so

00:13:09,640 --> 00:13:14,710
that's what will happen in the bill

00:13:10,720 --> 00:13:16,390
there and the EC make the the ECM test

00:13:14,710 --> 00:13:18,370
macros will actually set up the cute

00:13:16,390 --> 00:13:20,350
plugin path so that they they are being

00:13:18,370 --> 00:13:27,760
found there so this also works out of

00:13:20,350 --> 00:13:29,440
the box from ECM data files is also

00:13:27,760 --> 00:13:31,900
something we had a problem with we

00:13:29,440 --> 00:13:34,330
install files into the system and then

00:13:31,900 --> 00:13:36,370
we need them when running and there is a

00:13:34,330 --> 00:13:38,620
easy solution for that from cute it's

00:13:36,370 --> 00:13:41,590
the resource system where we can simply

00:13:38,620 --> 00:13:43,540
compile these files into the executable

00:13:41,590 --> 00:13:46,060
that's easy enough we do that for

00:13:43,540 --> 00:13:48,070
instance with XML GUI if you compile

00:13:46,060 --> 00:13:50,230
them into a good resource which can be

00:13:48,070 --> 00:13:53,200
part of your target could be a library

00:13:50,230 --> 00:13:54,850
or a binary then it will be found I even

00:13:53,200 --> 00:13:57,400
wrote a pro script or made the porting

00:13:54,850 --> 00:13:59,200
to that you can do the same with any

00:13:57,400 --> 00:14:01,690
other data file that you might need

00:13:59,200 --> 00:14:04,480
except if it needs to be translated then

00:14:01,690 --> 00:14:06,310
becomes a bit of a problem unless you

00:14:04,480 --> 00:14:08,320
pull the translations into it regularly

00:14:06,310 --> 00:14:12,790
right but we don't have really something

00:14:08,320 --> 00:14:13,990
out of the box for this ok I'll move on

00:14:12,790 --> 00:14:16,410
this was the easy part

00:14:13,990 --> 00:14:18,730
now an interesting case is clear egami

00:14:16,410 --> 00:14:20,410
this is actually the one slide where I

00:14:18,730 --> 00:14:22,780
didn't implement that other people did

00:14:20,410 --> 00:14:26,020
so thank you to the kirigami people

00:14:22,780 --> 00:14:28,300
problem they had is they are writing a

00:14:26,020 --> 00:14:30,460
bunch of qml files and then they have

00:14:28,300 --> 00:14:33,130
unit tests so actually load these

00:14:30,460 --> 00:14:34,630
components and check whatever right so

00:14:33,130 --> 00:14:37,450
if you want that to work without

00:14:34,630 --> 00:14:39,880
installing them they still need to have

00:14:37,450 --> 00:14:42,760
the proper directory structure like all

00:14:39,880 --> 00:14:44,250
KD kirigami - whatever right because

00:14:42,760 --> 00:14:47,230
that's the way that it should look like

00:14:44,250 --> 00:14:50,080
the first thing we tried was to set this

00:14:47,230 --> 00:14:52,180
up as is in the source directory for

00:14:50,080 --> 00:14:55,300
some reason that didn't work and so

00:14:52,180 --> 00:14:57,340
instead what we do is add C make time we

00:14:55,300 --> 00:14:59,860
copy all of that into the build

00:14:57,340 --> 00:15:01,630
directory with the right structure it I

00:14:59,860 --> 00:15:02,920
think it makes it easier to have some

00:15:01,630 --> 00:15:05,140
controls all the way to your sources

00:15:02,920 --> 00:15:07,630
like look like and then you can decide

00:15:05,140 --> 00:15:09,130
how they should look into the bill

00:15:07,630 --> 00:15:10,120
directory and then we simply need to

00:15:09,130 --> 00:15:13,149
point to that

00:15:10,120 --> 00:15:15,730
directory from the tests so that's done

00:15:13,149 --> 00:15:16,749
with a bunch of very awkward see make

00:15:15,730 --> 00:15:18,879
commands if you've never seen those

00:15:16,749 --> 00:15:21,009
before but it's actually quite simple we

00:15:18,879 --> 00:15:23,079
say there is a new target I'll call it

00:15:21,009 --> 00:15:25,329
copy it could be anything right target

00:15:23,079 --> 00:15:27,040
as in a make target you could say make a

00:15:25,329 --> 00:15:29,740
copy and it would actually do this right

00:15:27,040 --> 00:15:32,040
it's a make it on yet then we say okay

00:15:29,740 --> 00:15:33,970
what happens when we want to actually

00:15:32,040 --> 00:15:39,399
implement that what happens when I do

00:15:33,970 --> 00:15:41,499
make copy then it has to we use one of

00:15:39,399 --> 00:15:43,749
the see make sub commands in this case

00:15:41,499 --> 00:15:46,240
copy directory can do the same with

00:15:43,749 --> 00:15:49,259
files to say copy this source directory

00:15:46,240 --> 00:15:52,959
into the binary so the build directory

00:15:49,259 --> 00:15:55,540
with that layout over there and then we

00:15:52,959 --> 00:15:57,759
say this this target I don't want the

00:15:55,540 --> 00:16:00,009
developer to have to take to type make a

00:15:57,759 --> 00:16:03,220
copy right instead of that I will tell

00:16:00,009 --> 00:16:05,050
you one of my existing targets like here

00:16:03,220 --> 00:16:06,850
we get me plug in or whatever depends on

00:16:05,050 --> 00:16:10,689
copy so whenever this has to be built

00:16:06,850 --> 00:16:12,970
this copying will happen and that makes

00:16:10,689 --> 00:16:14,850
it kind of it wasn't out of the box we

00:16:12,970 --> 00:16:17,439
put everything into the bill directory

00:16:14,850 --> 00:16:19,449
with the right layout and then we

00:16:17,439 --> 00:16:22,149
provide the QM LDR file as part of that

00:16:19,449 --> 00:16:25,870
which is the entry point for loading

00:16:22,149 --> 00:16:28,329
these current files so that works quite

00:16:25,870 --> 00:16:30,730
nicely and I've been applying the same

00:16:28,329 --> 00:16:35,170
over case for visitors will see in a

00:16:30,730 --> 00:16:36,519
minute any questions no that's good

00:16:35,170 --> 00:16:43,420
because I don't know anything about UML

00:16:36,519 --> 00:16:47,170
anyway right so one of the problems here

00:16:43,420 --> 00:16:51,879
is these files that are being found in

00:16:47,170 --> 00:16:53,410
/usr as I said and if if it works for

00:16:51,879 --> 00:16:55,269
you on your system because it picks up

00:16:53,410 --> 00:16:57,249
the files from stash you guys are like

00:16:55,269 --> 00:16:59,499
in this example service time definition

00:16:57,249 --> 00:17:01,179
takes up files then the tests will

00:16:59,499 --> 00:17:03,819
actually work for you because it will

00:17:01,179 --> 00:17:06,039
find the file but then you push all that

00:17:03,819 --> 00:17:07,839
we see I and it fails on CI because it

00:17:06,039 --> 00:17:10,240
does not find the file right because it

00:17:07,839 --> 00:17:12,939
doesn't have these things installed so

00:17:10,240 --> 00:17:15,760
as I mentioned you can try to replicate

00:17:12,939 --> 00:17:17,679
that with giving it we are ready to exit

00:17:15,760 --> 00:17:19,750
that idea and then you see something

00:17:17,679 --> 00:17:21,760
like couldn't find service type

00:17:19,750 --> 00:17:22,610
application and that's something that

00:17:21,760 --> 00:17:25,939
has

00:17:22,610 --> 00:17:28,069
made me stuck for a while I stopped this

00:17:25,939 --> 00:17:29,929
a year ago and then kind of stopped and

00:17:28,069 --> 00:17:30,799
when writing this presentation I thought

00:17:29,929 --> 00:17:32,269
haha

00:17:30,799 --> 00:17:34,159
I know what I can do I can apply the

00:17:32,269 --> 00:17:36,380
kirigami solution to this and that's

00:17:34,159 --> 00:17:39,529
what I did yesterday basically doing

00:17:36,380 --> 00:17:41,480
exactly the same from the module that

00:17:39,529 --> 00:17:44,750
actually defines this service type and

00:17:41,480 --> 00:17:46,909
that needs it at run time we can simply

00:17:44,750 --> 00:17:49,429
copy it into the build there under the

00:17:46,909 --> 00:17:52,039
right directory structure point xdg that

00:17:49,429 --> 00:17:53,899
ideals to that place and then KC okay

00:17:52,039 --> 00:17:55,970
we'll find it and it will be able to use

00:17:53,899 --> 00:17:57,860
it so it's exactly the same solution

00:17:55,970 --> 00:17:59,570
with the same type of cement commands

00:17:57,860 --> 00:18:00,200
and I did the same increase service and

00:17:59,570 --> 00:18:02,299
care runner

00:18:00,200 --> 00:18:06,019
so yes bit of deputation maybe we need

00:18:02,299 --> 00:18:08,470
some TM macro for this and it actually

00:18:06,019 --> 00:18:11,450
works out of the box as an added bonus

00:18:08,470 --> 00:18:13,039
instead of calling this you know in the

00:18:11,450 --> 00:18:15,710
bin directory usually it would be called

00:18:13,039 --> 00:18:17,929
share play service types v for instance

00:18:15,710 --> 00:18:20,210
instead of calling each share if we call

00:18:17,929 --> 00:18:23,059
it data and it was on Windows as well

00:18:20,210 --> 00:18:25,580
because Q standard paths on Windows we

00:18:23,059 --> 00:18:28,340
look for data files under the data

00:18:25,580 --> 00:18:32,299
center III in the current directory so

00:18:28,340 --> 00:18:34,130
basically by having Big Data K service

00:18:32,299 --> 00:18:37,190
times 5 we have something that works on

00:18:34,130 --> 00:18:38,899
both systems on UNIX systems because we

00:18:37,190 --> 00:18:41,240
said there the environment variable and

00:18:38,899 --> 00:18:43,220
on Windows it works because it's there

00:18:41,240 --> 00:18:44,960
in it's called data right it doesn't use

00:18:43,220 --> 00:18:52,279
exceed anything else but it just was out

00:18:44,960 --> 00:18:59,600
of the box yeah yeah on this you can ask

00:18:52,279 --> 00:19:05,539
me questions I know a lot about this so

00:18:59,600 --> 00:19:06,679
that was about making yeah well there is

00:19:05,539 --> 00:19:08,419
a lot that could be said about KC

00:19:06,679 --> 00:19:12,679
cocaine the way it works but anyway and

00:19:08,419 --> 00:19:15,049
this is slightly different nowadays for

00:19:12,679 --> 00:19:17,210
plugins we tend to not use the Excel

00:19:15,049 --> 00:19:19,070
files as much it's not yet completely

00:19:17,210 --> 00:19:22,639
duplicated but a lot of the work that

00:19:19,070 --> 00:19:24,860
went into describing plugins with Jason

00:19:22,639 --> 00:19:27,919
and building the Jason into the plug-in

00:19:24,860 --> 00:19:31,039
itself like you does means that we don't

00:19:27,919 --> 00:19:32,809
really need the trader mechanism anymore

00:19:31,039 --> 00:19:34,510
but we haven't completely moved away

00:19:32,809 --> 00:19:37,540
from it that's why it had to work

00:19:34,510 --> 00:19:39,750
so one of the API is that we have with

00:19:37,540 --> 00:19:42,520
Kerrigan metadata which is all about

00:19:39,750 --> 00:19:45,580
loading JSON files to find out more

00:19:42,520 --> 00:19:47,350
about a plugin it turns out that this

00:19:45,580 --> 00:19:49,809
code still needs to know that service

00:19:47,350 --> 00:19:52,299
types to get to the type of the

00:19:49,809 --> 00:19:54,190
properties and that's something that's

00:19:52,299 --> 00:19:57,100
defined indexed on files and I found out

00:19:54,190 --> 00:19:59,410
that this can be made to work simply by

00:19:57,100 --> 00:20:02,320
adding support for acute resources to

00:19:59,410 --> 00:20:04,809
that so instead of a full path to an

00:20:02,320 --> 00:20:06,850
external file we simply put the service

00:20:04,809 --> 00:20:08,380
timed excel file in the resource and we

00:20:06,850 --> 00:20:10,480
give that to keeper agreement another it

00:20:08,380 --> 00:20:13,540
has its own passer and own cache for

00:20:10,480 --> 00:20:16,720
that and that's I think that work was

00:20:13,540 --> 00:20:18,070
done by CMS and that means it works out

00:20:16,720 --> 00:20:23,980
of the box as well so that's an easy

00:20:18,070 --> 00:20:25,990
migration for these kind of forums so I

00:20:23,980 --> 00:20:28,750
went through all of the modules in C I

00:20:25,990 --> 00:20:31,320
try to fix as many as possible and yeah

00:20:28,750 --> 00:20:34,179
I'm happy to have my people in the room

00:20:31,320 --> 00:20:36,580
guys I would like you to look at your CI

00:20:34,179 --> 00:20:38,169
it's quite broken I don't even know you

00:20:36,580 --> 00:20:40,390
know I might be responsible for some of

00:20:38,169 --> 00:20:44,230
that if some of it fails because it

00:20:40,390 --> 00:20:46,240
comes in instant files but I don't know

00:20:44,230 --> 00:20:48,309
these these failures are not anything I

00:20:46,240 --> 00:20:49,900
can recognize I did fix a few things

00:20:48,309 --> 00:20:52,510
where it was looking for a service type

00:20:49,900 --> 00:20:56,320
texture file so now that's found but I

00:20:52,510 --> 00:20:59,260
don't know too many failures in too many

00:20:56,320 --> 00:21:03,850
unrelated things so yeah that's kind of

00:20:59,260 --> 00:21:04,600
the moss module on Linux right now yeah

00:21:03,850 --> 00:21:08,440
shame on you

00:21:04,600 --> 00:21:11,020
just what you say okay so now moving on

00:21:08,440 --> 00:21:13,150
to outside of frameworks right my my

00:21:11,020 --> 00:21:14,890
work is to look at frameworks but I

00:21:13,150 --> 00:21:17,290
would like other people to look at

00:21:14,890 --> 00:21:19,210
everything else and to make it possible

00:21:17,290 --> 00:21:21,520
to work on your module without

00:21:19,210 --> 00:21:24,790
installing it so you should test this

00:21:21,520 --> 00:21:26,350
and fix it what this means is either if

00:21:24,790 --> 00:21:28,809
you believe in yourself you can do make

00:21:26,350 --> 00:21:31,240
and install so that you remove it from

00:21:28,809 --> 00:21:32,140
the system and then try to run the tests

00:21:31,240 --> 00:21:34,330
and see what happens

00:21:32,140 --> 00:21:35,679
right that's the easy if you're using PD

00:21:34,330 --> 00:21:38,440
source build for instance to build

00:21:35,679 --> 00:21:41,410
everything just remove your module from

00:21:38,440 --> 00:21:44,100
the installed there and see what happens

00:21:41,410 --> 00:21:46,690
otherwise you can use the exit ideals

00:21:44,100 --> 00:21:48,400
hack to try that and then you

00:21:46,690 --> 00:21:51,460
run your tests and see what happens and

00:21:48,400 --> 00:21:54,580
try to fix that when we're at the point

00:21:51,460 --> 00:21:57,610
where for instance all of plasma or all

00:21:54,580 --> 00:21:59,620
of KD applications seem to work with

00:21:57,610 --> 00:22:02,110
this setup then we can actually toggle

00:21:59,620 --> 00:22:04,090
the CI to not install before the test

00:22:02,110 --> 00:22:05,320
like we did in frameworks that would

00:22:04,090 --> 00:22:07,810
really like to get there but that

00:22:05,320 --> 00:22:11,380
requires everyone to help you with that

00:22:07,810 --> 00:22:13,150
and even if it works for you locally

00:22:11,380 --> 00:22:15,130
somehow you should check that it's not

00:22:13,150 --> 00:22:18,010
picking up installed files so if you

00:22:15,130 --> 00:22:20,350
have doubts you know users trace a debug

00:22:18,010 --> 00:22:23,800
information make sure that it just

00:22:20,350 --> 00:22:32,700
doesn't work by chance and you'll get

00:22:23,800 --> 00:22:32,700
more contributors maybe ok any questions

00:22:36,510 --> 00:22:46,330
what about files you install for other

00:22:39,640 --> 00:22:49,450
apps like ACM plugins or dolphin plugins

00:22:46,330 --> 00:22:52,680
or whatever I mean you still need to set

00:22:49,450 --> 00:22:55,210
up environment variables for those right

00:22:52,680 --> 00:22:57,820
yes if you're working on the repository

00:22:55,210 --> 00:23:01,330
that only contains a dolphin plug-in

00:22:57,820 --> 00:23:03,610
then what you will have to do and that's

00:23:01,330 --> 00:23:05,830
indeed not working out of the box is to

00:23:03,610 --> 00:23:07,810
point kid plug-in path through that to

00:23:05,830 --> 00:23:11,080
the base beyond your plugin so that it's

00:23:07,810 --> 00:23:13,270
actually found there what's interesting

00:23:11,080 --> 00:23:14,680
in here is that my approach until now

00:23:13,270 --> 00:23:16,960
was to make sure the unit tests work

00:23:14,680 --> 00:23:19,240
because in frameworks mostly what I have

00:23:16,960 --> 00:23:21,670
is unit tests but when you start moving

00:23:19,240 --> 00:23:22,480
into more of a development setup where

00:23:21,670 --> 00:23:25,030
you are working on an application

00:23:22,480 --> 00:23:26,530
application should work a plug-in that's

00:23:25,030 --> 00:23:28,420
a good points people need to say that

00:23:26,530 --> 00:23:30,760
one environment variable which is

00:23:28,420 --> 00:23:33,160
already better than 10 right to point

00:23:30,760 --> 00:23:34,630
there and then stop loafing again and it

00:23:33,160 --> 00:23:36,430
will be kept there pregnant and that's

00:23:34,630 --> 00:23:38,650
something that I guess it's mostly

00:23:36,430 --> 00:23:42,400
documentation maybe we could make like

00:23:38,650 --> 00:23:44,230
so see make with generate like a shell

00:23:42,400 --> 00:23:47,830
script that you can flourish or

00:23:44,230 --> 00:23:50,770
something you know could be yeah the

00:23:47,830 --> 00:23:53,860
form is it's dependent on the type of

00:23:50,770 --> 00:23:55,240
plug-in right because if you want your

00:23:53,860 --> 00:23:56,500
transcript you actually have nothing

00:23:55,240 --> 00:23:58,029
then it's going to be different if

00:23:56,500 --> 00:24:03,159
you're working on the plasma up later

00:23:58,029 --> 00:24:11,830
KLA or that's possibly be too specific

00:24:03,159 --> 00:24:13,989
for is here yeah we could put them up on

00:24:11,830 --> 00:24:17,320
a wiki page people download the one

00:24:13,989 --> 00:24:19,840
script they need right one thing I'm

00:24:17,320 --> 00:24:22,599
wondering is that with this the

00:24:19,840 --> 00:24:24,820
developers have to take care of two ways

00:24:22,599 --> 00:24:28,239
that your applications are going to run

00:24:24,820 --> 00:24:30,609
like an installed and installed is it

00:24:28,239 --> 00:24:35,219
not going to make build system more

00:24:30,609 --> 00:24:39,159
complicated rather what about

00:24:35,219 --> 00:24:42,099
simplifying the way to make install to a

00:24:39,159 --> 00:24:46,419
separate layer and only have to worry

00:24:42,099 --> 00:24:49,839
about the making store working well was

00:24:46,419 --> 00:24:52,469
it really like and so I think it's a

00:24:49,839 --> 00:24:54,849
different use case we could work on

00:24:52,469 --> 00:24:57,789
making a you know setting up a new layer

00:24:54,849 --> 00:24:59,830
easier but still something that would

00:24:57,789 --> 00:25:01,719
get in the way of using an IDE and I

00:24:59,830 --> 00:25:04,089
press run and it's not running my tests

00:25:01,719 --> 00:25:05,559
right that's that intermediate step you

00:25:04,089 --> 00:25:07,179
would have to configure in the IDE

00:25:05,559 --> 00:25:10,149
whereas with this you don't really have

00:25:07,179 --> 00:25:13,589
to and I as you can see I tried here to

00:25:10,149 --> 00:25:16,629
make it so that in most of the cases for

00:25:13,589 --> 00:25:18,789
the frameworks have to provide the right

00:25:16,629 --> 00:25:20,200
tools but if you're working on an

00:25:18,789 --> 00:25:20,619
application you shouldn't have to do

00:25:20,200 --> 00:25:23,109
anything

00:25:20,619 --> 00:25:25,210
if you make a simple app or even a

00:25:23,109 --> 00:25:29,379
complex application using the frameworks

00:25:25,210 --> 00:25:31,210
I you know the libraries will be picked

00:25:29,379 --> 00:25:33,070
up the units will be picked up

00:25:31,210 --> 00:25:35,379
everything will work out out of the box

00:25:33,070 --> 00:25:37,450
now you don't really need to do the you

00:25:35,379 --> 00:25:39,629
know an extra effort as a developer you

00:25:37,450 --> 00:25:42,099
only do that if you start to think about

00:25:39,629 --> 00:25:43,210
separate repos with plugins and all of

00:25:42,099 --> 00:25:45,099
this kind of things but if you're

00:25:43,210 --> 00:25:47,080
working on an application it will work

00:25:45,099 --> 00:25:49,119
without being installed which i think is

00:25:47,080 --> 00:25:52,450
the main purpose yeah yeah that's nice

00:25:49,119 --> 00:25:56,440
but then for example own data files have

00:25:52,450 --> 00:25:58,179
to be bundled into the binary using QT

00:25:56,440 --> 00:26:00,940
resources which means like if you are

00:25:58,179 --> 00:26:02,469
working on data files for example

00:26:00,940 --> 00:26:04,749
because you are not install something

00:26:02,469 --> 00:26:07,179
like that then you need to relink your

00:26:04,749 --> 00:26:09,039
application every time to test it as

00:26:07,179 --> 00:26:10,140
opposed to having a Megan solve it will

00:26:09,039 --> 00:26:12,630
just copy it

00:26:10,140 --> 00:26:14,610
right fine that's true but nowadays when

00:26:12,630 --> 00:26:16,740
I think when people write applications

00:26:14,610 --> 00:26:18,630
and then they think one day I might want

00:26:16,740 --> 00:26:20,070
to deploy that to windows and Android

00:26:18,630 --> 00:26:21,870
and all of that then actually having

00:26:20,070 --> 00:26:24,000
your data files in the resource makes

00:26:21,870 --> 00:26:26,220
the deployment easier down the line

00:26:24,000 --> 00:26:28,710
right so it's a bit of a trade-off but I

00:26:26,220 --> 00:26:30,480
think it pays because I think we see

00:26:28,710 --> 00:26:32,580
less and less separate files being

00:26:30,480 --> 00:26:35,610
installed in the resource system being

00:26:32,580 --> 00:26:37,560
used more and more but of course you

00:26:35,610 --> 00:26:39,000
could still have like if you have

00:26:37,560 --> 00:26:40,410
artists who complained about it you

00:26:39,000 --> 00:26:45,900
would make it an option and whatever

00:26:40,410 --> 00:26:49,460
yeah so I wanted to remark that with

00:26:45,900 --> 00:26:53,460
this feature that takes in the current

00:26:49,460 --> 00:26:56,340
energy directory for the for the files

00:26:53,460 --> 00:26:58,380
to execute at least at least once in

00:26:56,340 --> 00:27:01,770
Fedora we've run into a problem where

00:26:58,380 --> 00:27:04,830
then it would for some banner that is

00:27:01,770 --> 00:27:07,260
normally in the lip x'q there it would

00:27:04,830 --> 00:27:09,180
be looking for it in user pin and then

00:27:07,260 --> 00:27:11,910
it would be running a different binary I

00:27:09,180 --> 00:27:15,300
think it was a kiddie four or even a KD

00:27:11,910 --> 00:27:19,770
free one instead of the one that it was

00:27:15,300 --> 00:27:21,990
supposed to run and then so you have to

00:27:19,770 --> 00:27:23,400
be careful when when you run things from

00:27:21,990 --> 00:27:28,560
early basic there that you should

00:27:23,400 --> 00:27:30,780
exclude the user pin founder when you

00:27:28,560 --> 00:27:33,750
check try to check the current directory

00:27:30,780 --> 00:27:35,310
because there there can be all things or

00:27:33,750 --> 00:27:37,440
things which just happen to have the

00:27:35,310 --> 00:27:39,360
same name and user pin is never the

00:27:37,440 --> 00:27:40,920
right place to run when it's something

00:27:39,360 --> 00:27:42,600
that should be in the live x'q there

00:27:40,920 --> 00:27:45,540
yeah that's a good point it makes me

00:27:42,600 --> 00:27:47,760
wonder if we could easily sort detect I

00:27:45,540 --> 00:27:49,710
am running from the Builder instead of

00:27:47,760 --> 00:27:52,590
from an install there but we don't

00:27:49,710 --> 00:27:54,060
really have eristic for this so what

00:27:52,590 --> 00:27:55,890
you're suggesting is to be kind of how

00:27:54,060 --> 00:27:58,620
code is this user beam then skip the

00:27:55,890 --> 00:28:05,150
first check which doesn't seem recorrect

00:27:58,620 --> 00:28:05,150
right I'm wondering how to do that test

00:28:08,480 --> 00:28:23,290
I wouldn't even know how to get started

00:28:21,770 --> 00:28:28,210
with that right

00:28:23,290 --> 00:28:28,210
signing Linux binaries I don't know

00:28:44,120 --> 00:28:48,900
yeah kind of hoping that we don't get

00:28:46,950 --> 00:28:51,420
into the situation anymore because we

00:28:48,900 --> 00:28:53,400
have moved away from you to be noticed

00:28:51,420 --> 00:28:58,680
if that was kind of person dependence

00:28:53,400 --> 00:29:00,740
but yeah might still happen one last

00:28:58,680 --> 00:29:04,350
question

00:29:00,740 --> 00:29:08,940
thanks David for your talk a question of

00:29:04,350 --> 00:29:12,960
- do you see any future opportunity that

00:29:08,940 --> 00:29:16,650
a certain program application can tell

00:29:12,960 --> 00:29:19,740
you what is touching which configuration

00:29:16,650 --> 00:29:22,650
it needs which data it accesses so that

00:29:19,740 --> 00:29:26,190
you cannot debugging quite more simple

00:29:22,650 --> 00:29:29,970
or even transfer these resources to

00:29:26,190 --> 00:29:32,130
other computers users yeah we don't

00:29:29,970 --> 00:29:33,990
really have anything for that there is

00:29:32,130 --> 00:29:37,380
the very low-level tools like s trace

00:29:33,990 --> 00:29:40,590
but then yes we'll look at you know sham

00:29:37,380 --> 00:29:43,440
libraries in system and whatever so on

00:29:40,590 --> 00:29:46,230
top of that it would have to be tracing

00:29:43,440 --> 00:29:50,640
in Q which is actually work from that

00:29:46,230 --> 00:29:52,860
because if you want to get a bug fixed

00:29:50,640 --> 00:29:54,900
first you have to understand we have to

00:29:52,860 --> 00:29:58,350
look for resources start of what went

00:29:54,900 --> 00:30:00,960
wrong what was accessed and until now at

00:29:58,350 --> 00:30:04,410
least for me it's poor guessing to come

00:30:00,960 --> 00:30:06,150
to the point well as I said with this

00:30:04,410 --> 00:30:08,640
trace you don't really have to guess you

00:30:06,150 --> 00:30:10,950
just have to use it wisely and go

00:30:08,640 --> 00:30:12,330
through it I'm hoping that this is the

00:30:10,950 --> 00:30:15,210
kind of thing that choice points in

00:30:12,330 --> 00:30:17,700
acute will actually help us with you

00:30:15,210 --> 00:30:19,680
could in able the queue file choice

00:30:17,700 --> 00:30:21,120
point and get the list of files that are

00:30:19,680 --> 00:30:23,130
being accessed through a queue file and

00:30:21,120 --> 00:30:27,480
that could help a bit by being sort of

00:30:23,130 --> 00:30:29,340
one level higher than astrays don't know

00:30:27,480 --> 00:30:31,260
if that would help you perhaps we need

00:30:29,340 --> 00:30:33,840
discuss nature private thanks for this

00:30:31,260 --> 00:30:37,070
explanation ok thank you everyone thank

00:30:33,840 --> 00:30:37,070

YouTube URL: https://www.youtube.com/watch?v=6gg5l38CghE


