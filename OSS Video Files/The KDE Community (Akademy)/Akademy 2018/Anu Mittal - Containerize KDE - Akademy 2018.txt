Title: Anu Mittal - Containerize KDE - Akademy 2018
Publication date: 2018-09-05
Playlist: Akademy 2018
Description: 
	The talk will begin with a general introduction to Containerization technologies and why we need it.
Followed by how we have used Docker to setup KDE neon and how we can use flatpak to setup desktop applications.

Setting up a development environment for a software can be time-consuming and at times a bit confusing
There are many libraries and packages that need to be installed and which might also cause conflict with the existing system packages. There are various ways to containerize an application, we will discuss two major approaches - Docker and Flatpak.

Docker helps a developer by setting up a sandboxed development environment in a container which can be used for debugging, testing or developing a new feature. You can run multiple such environments parallelly e.g. stable & development environment. Flatpak provides a sandbox environment in which users can run applications in isolation from the rest of the system.

We will see a live example of both of these technologies, how they differ from each other and when one is preferred over the other.

Speaker: Anu Mittal
Captions: 
	00:00:10,610 --> 00:00:13,269
hello

00:00:14,200 --> 00:00:21,400
okay the next talk is held by Alma

00:00:18,070 --> 00:00:23,950
Mattel she's an open source and suggest

00:00:21,400 --> 00:00:26,170
working for a start-up in India and

00:00:23,950 --> 00:00:28,980
involves KD since 2014

00:00:26,170 --> 00:00:31,060
and today she will talk about how

00:00:28,980 --> 00:00:36,489
containerization and sandboxing can help

00:00:31,060 --> 00:00:39,879
this thank you for yeah so uh I would

00:00:36,489 --> 00:00:45,150
like to ask everybody how many of you

00:00:39,879 --> 00:00:47,970
know about containerization okay about

00:00:45,150 --> 00:00:52,620
virtual machines

00:00:47,970 --> 00:00:55,449
perfect yeah so let us start what

00:00:52,620 --> 00:00:58,690
introducing myself I started

00:00:55,449 --> 00:01:01,239
contributing KD as a season of KD

00:00:58,690 --> 00:01:04,960
student in 2014 what an opportunity to

00:01:01,239 --> 00:01:06,850
do this G saga in 2016 and currently

00:01:04,960 --> 00:01:09,880
working and somato an Indian startup

00:01:06,850 --> 00:01:13,119
company so what are you going to cover

00:01:09,880 --> 00:01:15,670
in this complete presentation one why

00:01:13,119 --> 00:01:18,869
should we contain your eyes things this

00:01:15,670 --> 00:01:21,820
office that we've been what is

00:01:18,869 --> 00:01:24,159
containerization how can we containerize

00:01:21,820 --> 00:01:26,740
our software's and what are the

00:01:24,159 --> 00:01:31,000
different ways through which we can you

00:01:26,740 --> 00:01:34,750
know build those images and all so the

00:01:31,000 --> 00:01:36,820
first thing is why as you know with each

00:01:34,750 --> 00:01:39,820
development phase you have different

00:01:36,820 --> 00:01:41,679
tasks to do and the timelines and

00:01:39,820 --> 00:01:43,240
deadlines are such that we have to you

00:01:41,679 --> 00:01:45,820
know mess around sometimes and you're

00:01:43,240 --> 00:01:47,859
not sure about if we can do the complete

00:01:45,820 --> 00:01:51,850
staging process the production or

00:01:47,859 --> 00:01:53,109
setting tests and everything so for to

00:01:51,850 --> 00:01:55,859
come up with the piece of a

00:01:53,109 --> 00:01:58,869
fast-changing technology landscape it's

00:01:55,859 --> 00:02:02,710
important that we turn our face towards

00:01:58,869 --> 00:02:06,359
the containerization before we used to

00:02:02,710 --> 00:02:09,759
have a whole big bunch of packages and

00:02:06,359 --> 00:02:12,069
have only one software that could do all

00:02:09,759 --> 00:02:15,010
our tasks together but now with the

00:02:12,069 --> 00:02:18,190
introduction of micro services we bring

00:02:15,010 --> 00:02:21,160
down our office into small tasks for

00:02:18,190 --> 00:02:24,280
example if I am working for a restaurant

00:02:21,160 --> 00:02:26,050
api's I want something to tell me what

00:02:24,280 --> 00:02:28,840
are the menus for the restaurant

00:02:26,050 --> 00:02:31,300
or similarly different tasks I break my

00:02:28,840 --> 00:02:33,850
complete regimen in a small test so now

00:02:31,300 --> 00:02:36,970
this require you breaking down of a

00:02:33,850 --> 00:02:39,400
software into smaller requires setting

00:02:36,970 --> 00:02:41,440
them a multiple test for each of those

00:02:39,400 --> 00:02:43,390
case before we were testing only for one

00:02:41,440 --> 00:02:45,340
complete project now because we have

00:02:43,390 --> 00:02:47,920
divided into several parts you have to

00:02:45,340 --> 00:02:49,510
take care of all the dependencies and

00:02:47,920 --> 00:02:52,630
libraries that are using the micro

00:02:49,510 --> 00:02:57,550
services so it amplifies our requirement

00:02:52,630 --> 00:03:01,180
of the work we do so why should we know

00:02:57,550 --> 00:03:04,000
about containerization why so the main

00:03:01,180 --> 00:03:06,490
reason is its useful in every field that

00:03:04,000 --> 00:03:10,780
you work with for developers it's easy

00:03:06,490 --> 00:03:13,480
that you it's easy to get started with

00:03:10,780 --> 00:03:16,060
any project that you want to work on you

00:03:13,480 --> 00:03:16,870
have a single link to it will discuss

00:03:16,060 --> 00:03:18,580
more about it

00:03:16,870 --> 00:03:22,120
the link is known as image of the

00:03:18,580 --> 00:03:24,100
country images so it's just that image

00:03:22,120 --> 00:03:26,080
that link a way that you can download

00:03:24,100 --> 00:03:28,210
the software you can explore around in

00:03:26,080 --> 00:03:29,950
those stuff you can do versioning in it

00:03:28,210 --> 00:03:32,770
and lot of many things that we are going

00:03:29,950 --> 00:03:36,670
to cover later on next for IT operations

00:03:32,770 --> 00:03:38,950
for example if I have done my setup in

00:03:36,670 --> 00:03:42,550
my laptop I give it to the production I

00:03:38,950 --> 00:03:44,440
asked him now it's upon you it's you

00:03:42,550 --> 00:03:47,050
know give it to everybody to experiment

00:03:44,440 --> 00:03:48,790
so what happens you see it works on my

00:03:47,050 --> 00:03:50,650
computer but I am not sure what is

00:03:48,790 --> 00:03:52,720
missing in yours or the person have to

00:03:50,650 --> 00:03:56,320
manually see what are the dependencies

00:03:52,720 --> 00:03:59,860
what are the settings in my system right

00:03:56,320 --> 00:04:02,350
now and it was a lot of work for them

00:03:59,860 --> 00:04:05,560
but then by using the images that we

00:04:02,350 --> 00:04:08,140
create that is created by the developer

00:04:05,560 --> 00:04:10,060
the ID person doesn't have to work about

00:04:08,140 --> 00:04:13,480
the dependencies that this software

00:04:10,060 --> 00:04:17,109
requires it's it's a simple for him and

00:04:13,480 --> 00:04:19,060
so just you know run the image in a

00:04:17,109 --> 00:04:21,970
container and do perform all the

00:04:19,060 --> 00:04:24,580
operation that they have to also the

00:04:21,970 --> 00:04:26,560
last thing is about the business that we

00:04:24,580 --> 00:04:30,250
get from the software that were working

00:04:26,560 --> 00:04:32,470
how to analyze what was the past version

00:04:30,250 --> 00:04:35,080
so success what could be added in the

00:04:32,470 --> 00:04:38,460
future and stuff so through continued

00:04:35,080 --> 00:04:38,460
ization it's very easy to

00:04:39,240 --> 00:04:44,789
aversion eyes your docum so fair and to

00:04:42,750 --> 00:04:48,210
know what was the level of success of

00:04:44,789 --> 00:04:51,660
each of the version so it saves you from

00:04:48,210 --> 00:04:53,490
this thing but now my it's running on my

00:04:51,660 --> 00:04:55,710
computer I don't know what what else is

00:04:53,490 --> 00:04:58,740
missing on somebody else's laptop so you

00:04:55,710 --> 00:05:02,130
can just be spared from such situation

00:04:58,740 --> 00:05:05,880
when you use containers Nexus what do

00:05:02,130 --> 00:05:08,610
you mean by containerization continue

00:05:05,880 --> 00:05:11,840
ization provide helps you create deploy

00:05:08,610 --> 00:05:14,099
and join your application using a

00:05:11,840 --> 00:05:15,900
continuous so as I do there is this

00:05:14,099 --> 00:05:20,599
image link and there is this container

00:05:15,900 --> 00:05:24,210
on which we run these images so you can

00:05:20,599 --> 00:05:25,860
really do whatever work you want to do

00:05:24,210 --> 00:05:27,660
whether you just want to run it on a

00:05:25,860 --> 00:05:31,650
staging level but whether you want to

00:05:27,660 --> 00:05:33,810
run it on for production level stage so

00:05:31,650 --> 00:05:35,820
it's easy to mock your environment and

00:05:33,810 --> 00:05:39,990
change settings according to the things

00:05:35,820 --> 00:05:43,110
that you want to do so let's talk about

00:05:39,990 --> 00:05:44,550
what is an image and container these are

00:05:43,110 --> 00:05:46,430
the two basic terms that you should be

00:05:44,550 --> 00:05:49,770
knowing when you start learning about

00:05:46,430 --> 00:05:53,130
continuation so image is a package or a

00:05:49,770 --> 00:05:55,469
bundle of all these things for example

00:05:53,130 --> 00:05:58,380
it includes your cone your runtime

00:05:55,469 --> 00:06:01,229
settings the libraries environment

00:05:58,380 --> 00:06:04,110
variables configuration file which we

00:06:01,229 --> 00:06:10,139
can see it's like manifest file and data

00:06:04,110 --> 00:06:13,440
if needed so and when this image gets in

00:06:10,139 --> 00:06:16,919
memory for exams into a runtime in sense

00:06:13,440 --> 00:06:19,259
it makes the container so container is

00:06:16,919 --> 00:06:21,150
nothing without an image we can

00:06:19,259 --> 00:06:24,240
understand it better by taking an

00:06:21,150 --> 00:06:26,520
example of a class and an object what do

00:06:24,240 --> 00:06:30,030
we see classes class has all the

00:06:26,520 --> 00:06:32,130
function and method that define itself

00:06:30,030 --> 00:06:34,590
but it has no meaning until angles we

00:06:32,130 --> 00:06:37,289
create an object and initialize it it

00:06:34,590 --> 00:06:40,229
doesn't work at all so similar is a

00:06:37,289 --> 00:06:42,479
container container is your class for

00:06:40,229 --> 00:06:46,199
continue to run you need images which is

00:06:42,479 --> 00:06:49,229
which acts like your objects yeah so

00:06:46,199 --> 00:06:51,570
what is continued ization in containers

00:06:49,229 --> 00:06:53,360
in short we can say provides you an

00:06:51,570 --> 00:07:03,530
isolated environment

00:06:53,360 --> 00:07:05,810
for if suppose yeah so if you need some

00:07:03,530 --> 00:07:08,240
sort of binaries and libraries for a

00:07:05,810 --> 00:07:12,110
process a and different set of libraries

00:07:08,240 --> 00:07:13,969
for said B it gives you a gives your

00:07:12,110 --> 00:07:16,819
package a or feeling that it is the only

00:07:13,969 --> 00:07:18,199
thing running and it has all the version

00:07:16,819 --> 00:07:21,460
that it means for example if you need a

00:07:18,199 --> 00:07:24,409
Python three for one process a and

00:07:21,460 --> 00:07:27,440
Python 3.1 or some other version for any

00:07:24,409 --> 00:07:30,800
process B then presses is running it

00:07:27,440 --> 00:07:32,629
gets a sandbox environment in which it

00:07:30,800 --> 00:07:34,219
it is not affected well what other

00:07:32,629 --> 00:07:38,690
threads are going on what are the

00:07:34,219 --> 00:07:40,789
processor going on in the system so this

00:07:38,690 --> 00:07:44,539
is how container looks like you

00:07:40,789 --> 00:07:47,930
everything is hosted on your actual host

00:07:44,539 --> 00:07:50,240
OS we have a container rail for example

00:07:47,930 --> 00:07:54,050
in docker we the container engine is

00:07:50,240 --> 00:07:57,699
your daughter itself and this container

00:07:54,050 --> 00:08:01,069
helps your applications to get its own

00:07:57,699 --> 00:08:05,270
isolated OS sort of thing it is actually

00:08:01,069 --> 00:08:06,889
running on your host a host OS but it

00:08:05,270 --> 00:08:10,009
gives the feeling that it has its own

00:08:06,889 --> 00:08:11,810
virtual thing so now we see what is the

00:08:10,009 --> 00:08:15,349
difference between a virtual machine and

00:08:11,810 --> 00:08:18,080
a container so that does understand this

00:08:15,349 --> 00:08:21,259
things a simple example the container is

00:08:18,080 --> 00:08:23,599
running on you're running the process on

00:08:21,259 --> 00:08:25,219
your host words but in a virtual

00:08:23,599 --> 00:08:28,419
environment oh sorry in a sandbox

00:08:25,219 --> 00:08:32,449
environment it doesn't have to have any

00:08:28,419 --> 00:08:36,199
external hardware support for example in

00:08:32,449 --> 00:08:38,719
a VM we need a hypervisor so what it

00:08:36,199 --> 00:08:41,419
does is it it Maps your host words into

00:08:38,719 --> 00:08:45,410
some small chunks and each of the

00:08:41,419 --> 00:08:48,230
process has its own guest OS and upon

00:08:45,410 --> 00:08:49,760
which it runs all the dependencies where

00:08:48,230 --> 00:08:53,180
this container is very lightweight

00:08:49,760 --> 00:08:55,100
because it doesn't have to you know

00:08:53,180 --> 00:08:57,320
divide your actual OS into multiple

00:08:55,100 --> 00:09:01,940
parts and you can run thousands of it

00:08:57,320 --> 00:09:05,660
together also one thing that it works on

00:09:01,940 --> 00:09:06,230
is known as G G groups what is G group

00:09:05,660 --> 00:09:09,320
it gives

00:09:06,230 --> 00:09:11,570
isolation process isolation network

00:09:09,320 --> 00:09:14,690
isolation or some different side which

00:09:11,570 --> 00:09:17,600
are going to cover it later on so how

00:09:14,690 --> 00:09:19,460
does this isolation happens first you

00:09:17,600 --> 00:09:21,760
would we can understand it through an

00:09:19,460 --> 00:09:24,670
example of a Linux kernel

00:09:21,760 --> 00:09:28,070
initially when we started set up a

00:09:24,670 --> 00:09:30,890
system it has only one process ID which

00:09:28,070 --> 00:09:33,170
knows what further it has to start so

00:09:30,890 --> 00:09:36,110
that your complete system is working so

00:09:33,170 --> 00:09:39,970
it's a three sort of structure where

00:09:36,110 --> 00:09:41,930
your one process ID gives you no

00:09:39,970 --> 00:09:43,550
initialization to the other two times

00:09:41,930 --> 00:09:46,610
for example time process to end

00:09:43,550 --> 00:09:49,490
processes this is a theory of processes

00:09:46,610 --> 00:09:52,280
the trends in your kernel so if suppose

00:09:49,490 --> 00:09:54,380
are later on I want a container I want

00:09:52,280 --> 00:09:57,350
to run my project in a different

00:09:54,380 --> 00:10:00,560
environment itself what I do I create a

00:09:57,350 --> 00:10:02,810
small child PID for myself now it has

00:10:00,560 --> 00:10:06,590
its own process IDs 1 2 & 3

00:10:02,810 --> 00:10:09,710
but as it is sharing its Shane o/s with

00:10:06,590 --> 00:10:14,060
my actual system the OS also have the 8

00:10:09,710 --> 00:10:16,430
9 and 10 added along with it so for the

00:10:14,060 --> 00:10:19,400
child it feels like if I only have 3

00:10:16,430 --> 00:10:21,110
processes in but the come the system

00:10:19,400 --> 00:10:22,430
knows that there are all together time

00:10:21,110 --> 00:10:25,160
processes that are running in your

00:10:22,430 --> 00:10:28,970
system so you know similar is the case

00:10:25,160 --> 00:10:32,780
with a file of isolation when any child

00:10:28,970 --> 00:10:35,300
a file is added to your system it

00:10:32,780 --> 00:10:37,310
creates a virtual disk for it but it

00:10:35,300 --> 00:10:38,870
won't be marked with your actual hardest

00:10:37,310 --> 00:10:43,280
and tinglin unless you mount your

00:10:38,870 --> 00:10:48,070
virtual child of process or your file to

00:10:43,280 --> 00:10:50,300
the actual global mount namespace and

00:10:48,070 --> 00:10:52,400
also same is the case for the network

00:10:50,300 --> 00:10:54,410
isolation for example if you if you you

00:10:52,400 --> 00:10:56,240
have to process which has different eyes

00:10:54,410 --> 00:10:59,540
or network interfaces

00:10:56,240 --> 00:11:01,250
it would create its own small subclasses

00:10:59,540 --> 00:11:03,350
I will give it the feeling that it it is

00:11:01,250 --> 00:11:06,260
isolated from the rest of the process

00:11:03,350 --> 00:11:08,410
that is running on your lab so what are

00:11:06,260 --> 00:11:12,200
the various ways of doing this

00:11:08,410 --> 00:11:16,580
containerization one is darker and the

00:11:12,200 --> 00:11:17,390
other one is flat back Vivat covers some

00:11:16,580 --> 00:11:19,820
of the instruct

00:11:17,390 --> 00:11:21,350
since how we can get started with docker

00:11:19,820 --> 00:11:23,390
and flight pack and later on we will

00:11:21,350 --> 00:11:26,620
continue with the demonstration of

00:11:23,390 --> 00:11:29,810
seeing how KD has you know wantonly

00:11:26,620 --> 00:11:32,150
started working using docker for Annie

00:11:29,810 --> 00:11:34,580
on KD I know and flight bank we have

00:11:32,150 --> 00:11:37,580
some application for example or ocular

00:11:34,580 --> 00:11:40,190
and stuff so we ran it run in the demo

00:11:37,580 --> 00:11:45,380
and show you this so what are the steps

00:11:40,190 --> 00:11:47,720
for installing it so this is the steps

00:11:45,380 --> 00:11:50,990
that you can follow to install docker or

00:11:47,720 --> 00:11:53,230
c ii that is the community edition you

00:11:50,990 --> 00:11:55,520
simply have to do apt-get update

00:11:53,230 --> 00:11:58,880
followed by three other commands that

00:11:55,520 --> 00:12:03,200
are you know global file same for every

00:11:58,880 --> 00:12:05,300
you setup of linux so after that once

00:12:03,200 --> 00:12:08,720
you are ready with the docker you have

00:12:05,300 --> 00:12:10,910
to setup the repositories that you will

00:12:08,720 --> 00:12:14,120
be needed for examine a simple hello

00:12:10,910 --> 00:12:16,430
world file you just have to do i

00:12:14,120 --> 00:12:19,760
installed okay i see then you have to

00:12:16,430 --> 00:12:21,320
run docker run the file name it can be

00:12:19,760 --> 00:12:23,570
any file name that you wanna run this is

00:12:21,320 --> 00:12:25,700
this this simple command and you will be

00:12:23,570 --> 00:12:28,250
getting a different container with the

00:12:25,700 --> 00:12:30,830
image that you wanted to populate in it

00:12:28,250 --> 00:12:35,960
so hello world here is an image for

00:12:30,830 --> 00:12:38,420
example so along with this apart from

00:12:35,960 --> 00:12:40,460
this thing when as a developer when I'm

00:12:38,420 --> 00:12:42,530
ready with my image if suppose I've

00:12:40,460 --> 00:12:45,290
created my software it's enough

00:12:42,530 --> 00:12:47,840
shippable format I'll create a manifest

00:12:45,290 --> 00:12:51,140
of it which will which is known as an

00:12:47,840 --> 00:12:52,610
image it will have every single thing

00:12:51,140 --> 00:12:54,500
that we mentioned about that image

00:12:52,610 --> 00:12:56,390
should have it will have the code it

00:12:54,500 --> 00:12:59,150
will have what all the dependent runtime

00:12:56,390 --> 00:13:02,030
dependencies we need and stuff so now

00:12:59,150 --> 00:13:04,370
how do we do it for example in gate we

00:13:02,030 --> 00:13:06,200
have this github maybe push I good and

00:13:04,370 --> 00:13:08,270
if anybody can fall Kate and can clone

00:13:06,200 --> 00:13:11,180
it and stuff similarly for docker we

00:13:08,270 --> 00:13:14,090
have a docker hub so all around the

00:13:11,180 --> 00:13:16,340
globe anybody who is you know working on

00:13:14,090 --> 00:13:20,330
any stuff can upload an image link for

00:13:16,340 --> 00:13:20,780
it you just have to get the just have to

00:13:20,330 --> 00:13:26,180
type

00:13:20,780 --> 00:13:27,350
docker run that image name now what is

00:13:26,180 --> 00:13:30,620
flight pack

00:13:27,350 --> 00:13:33,170
a flag bike is tied to Linux I would say

00:13:30,620 --> 00:13:35,900
for example you can install a software's

00:13:33,170 --> 00:13:37,940
that are not you know easily available

00:13:35,900 --> 00:13:40,970
for your Linux and my own because there

00:13:37,940 --> 00:13:43,790
are different domains we would say that

00:13:40,970 --> 00:13:46,610
we have going to we have different

00:13:43,790 --> 00:13:50,450
distributions like Ubuntu Ubuntu and

00:13:46,610 --> 00:13:53,570
Florida Florida and stuff so what we can

00:13:50,450 --> 00:13:55,970
do is we can use flight pack was a flat

00:13:53,570 --> 00:13:58,390
pack for such cases it focuses on

00:13:55,970 --> 00:14:00,770
building sandbox for your application of

00:13:58,390 --> 00:14:02,600
desktop applications whatever you want

00:14:00,770 --> 00:14:05,630
to have so we're going to see this with

00:14:02,600 --> 00:14:07,610
example now what are the steps to set up

00:14:05,630 --> 00:14:09,920
your flight pack it is very similar to

00:14:07,610 --> 00:14:14,510
that we have a repository we just have

00:14:09,920 --> 00:14:18,110
to install it and afterwards it similar

00:14:14,510 --> 00:14:21,170
to the github so where do the docker hub

00:14:18,110 --> 00:14:24,440
we have a flight back home waving upload

00:14:21,170 --> 00:14:27,530
all our images or the package IDs so in

00:14:24,440 --> 00:14:29,360
flat 5 we have this package IDs not

00:14:27,530 --> 00:14:32,510
exactly for the same image in it is

00:14:29,360 --> 00:14:36,050
known as a flat pack IDs so how is it

00:14:32,510 --> 00:14:40,370
different from Dhakal so docker has its

00:14:36,050 --> 00:14:43,130
it is morally to do providing containers

00:14:40,370 --> 00:14:46,280
to it there is this is for more focused

00:14:43,130 --> 00:14:48,890
on Linux surface that you wanna run so

00:14:46,280 --> 00:14:51,790
now i we have shabam along with us is

00:14:48,890 --> 00:14:55,120
gonna help us running all this

00:14:51,790 --> 00:14:55,120
demonstration for us

00:16:44,670 --> 00:16:55,510
and what are like different stars so in

00:16:53,800 --> 00:16:57,610
this particular case of there are

00:16:55,510 --> 00:16:59,590
official images so for Python there is a

00:16:57,610 --> 00:17:03,670
mark there that this is an official

00:16:59,590 --> 00:17:05,620
image by the distributor which is the

00:17:03,670 --> 00:17:07,209
Python organization over here and then

00:17:05,620 --> 00:17:10,720
you also have the number of stars just

00:17:07,209 --> 00:17:12,699
like github defendable but yes if you

00:17:10,720 --> 00:17:15,819
download an image that you don't trust

00:17:12,699 --> 00:17:17,530
and you give it access to your own like

00:17:15,819 --> 00:17:22,740
mount space which is your own hardest

00:17:17,530 --> 00:17:26,470
then it can do anything that but then

00:17:22,740 --> 00:17:28,690
usually try to not give your like you

00:17:26,470 --> 00:17:30,820
usually try to not volume mount your own

00:17:28,690 --> 00:17:34,330
voice or the only volume mount a

00:17:30,820 --> 00:17:36,070
specific directory so that way it cannot

00:17:34,330 --> 00:17:38,320
access a lot of stuff because it is

00:17:36,070 --> 00:17:40,270
sandbox in an environment so if you

00:17:38,320 --> 00:17:52,060
don't volume mount anything if you don't

00:17:40,270 --> 00:17:56,560
give it access to your so let's see if

00:17:52,060 --> 00:17:59,890
you want to run sorry just a question to

00:17:56,560 --> 00:18:01,780
be complete with the yes you show the

00:17:59,890 --> 00:18:03,790
flat-pack and the talker in contrast to

00:18:01,780 --> 00:18:05,410
virtualization but really have a

00:18:03,790 --> 00:18:07,480
hypervisor you have support by the hard

00:18:05,410 --> 00:18:09,640
way up to get to get if this kind of

00:18:07,480 --> 00:18:11,080
security is the security on docker and

00:18:09,640 --> 00:18:14,850
flat-pack basically

00:18:11,080 --> 00:18:14,850
the security of change fruit in Raymond

00:18:23,909 --> 00:18:29,110
so backpack also provides you a sandbox

00:18:26,889 --> 00:18:32,049
environment and what basically plastic

00:18:29,110 --> 00:18:34,059
does is they are more integrated to

00:18:32,049 --> 00:18:35,590
Linux and they're focused on Linux that

00:18:34,059 --> 00:18:38,259
is what they want to talk that is more

00:18:35,590 --> 00:18:40,869
channelized it is for running API is

00:18:38,259 --> 00:18:42,789
applications anything right server

00:18:40,869 --> 00:18:45,129
related they are more focused on desktop

00:18:42,789 --> 00:18:47,139
environment but flat type provider is

00:18:45,129 --> 00:18:50,019
they provide you like these different

00:18:47,139 --> 00:18:51,580
permissions that in your manifest file

00:18:50,019 --> 00:18:53,919
you can mention that I need access to

00:18:51,580 --> 00:18:56,710
diverse I need access to X 11

00:18:53,919 --> 00:18:58,330
all of these display drivers and before

00:18:56,710 --> 00:18:59,739
installing any Mitch but we ask you

00:18:58,330 --> 00:19:05,289
whether you want to give this permission

00:18:59,739 --> 00:19:06,970
or not so let's say this is the new

00:19:05,289 --> 00:19:09,220
system and I don't have Python installed

00:19:06,970 --> 00:19:11,320
on it and I don't want to set up

00:19:09,220 --> 00:19:13,629
anything related to Python on my system

00:19:11,320 --> 00:19:16,029
right so what doctor provides you is you

00:19:13,629 --> 00:19:18,549
can download an official image you only

00:19:16,029 --> 00:19:20,919
have to download a file and that will

00:19:18,549 --> 00:19:23,859
give you the entire libraries and

00:19:20,919 --> 00:19:26,009
everything else related to it so I can

00:19:23,859 --> 00:19:26,009
do

00:19:41,550 --> 00:19:47,950
so but what this is basically do is it

00:19:45,190 --> 00:19:50,140
will download a image for me or let's

00:19:47,950 --> 00:19:52,030
see they will run one of the images that

00:19:50,140 --> 00:19:54,490
is already downloaded on this particular

00:19:52,030 --> 00:19:56,980
system so in this case I have a image

00:19:54,490 --> 00:20:00,450
first with downloaded so I can do docker

00:19:56,980 --> 00:20:03,280
run - ie - ID is slack but basically

00:20:00,450 --> 00:20:05,620
whatever process I'm gonna run I need it

00:20:03,280 --> 00:20:08,080
to be connected to my t device that's

00:20:05,620 --> 00:20:10,240
about it so then you specify the image

00:20:08,080 --> 00:20:12,790
name which is there and you can specify

00:20:10,240 --> 00:20:17,860
the version or the tag of that image so

00:20:12,790 --> 00:20:20,910
in this case the tag is Vitas so what

00:20:17,860 --> 00:20:23,890
this has done is it has started a shell

00:20:20,910 --> 00:20:26,200
you know sandbox the inner it has

00:20:23,890 --> 00:20:29,140
started a container or using the files

00:20:26,200 --> 00:20:30,220
from that image and it has given me

00:20:29,140 --> 00:20:32,440
shell access to that particular

00:20:30,220 --> 00:20:34,929
container I can do anything in this

00:20:32,440 --> 00:20:36,730
container and when I basically exit from

00:20:34,929 --> 00:20:39,460
this particular container everything

00:20:36,730 --> 00:20:42,160
that I write will be lost unless I have

00:20:39,460 --> 00:20:46,950
mounted my volumes or something so for

00:20:42,160 --> 00:20:46,950
example if I create a file called fubar

00:20:50,640 --> 00:20:55,470
so I have a file in my root namespace

00:21:03,710 --> 00:21:08,900
oh sorry I have created a directory

00:21:05,900 --> 00:21:11,210
called fubar what I'll do is I'll lick

00:21:08,900 --> 00:21:13,580
this particular skill when I start this

00:21:11,210 --> 00:21:16,970
again it'll be a fresh environment so it

00:21:13,580 --> 00:21:21,830
won't have anything like that so let's

00:21:16,970 --> 00:21:26,630
say I try outs with I come find whatever

00:21:21,830 --> 00:21:28,940
I need to compile with it I've used this

00:21:26,630 --> 00:21:31,640
and I'm like I don't like Swift anymore

00:21:28,940 --> 00:21:38,560
so what I can do is I can exit and then

00:21:31,640 --> 00:21:41,420
I can just do docker RM image strip and

00:21:38,560 --> 00:21:43,070
essentially if this image is not running

00:21:41,420 --> 00:21:45,530
any red will say I have successfully

00:21:43,070 --> 00:21:47,360
deleted this particular image I kind of

00:21:45,530 --> 00:21:48,650
Swift it didn't work out for me I have

00:21:47,360 --> 00:21:51,050
deleted that particular language I

00:21:48,650 --> 00:21:52,640
didn't have to install any dependencies

00:21:51,050 --> 00:21:54,980
that related to it or anything related

00:21:52,640 --> 00:22:00,320
to it on my particular system everything

00:21:54,980 --> 00:22:03,470
is gone now so of what what is the

00:22:00,320 --> 00:22:08,180
problem with docker is a docker is not

00:22:03,470 --> 00:22:10,580
focused on the desktop application so

00:22:08,180 --> 00:22:13,190
you have to work around it to make it

00:22:10,580 --> 00:22:15,350
run for desktop application like any KD

00:22:13,190 --> 00:22:21,680
application so there is this project

00:22:15,350 --> 00:22:23,930
called KDE KDE neon so what they're

00:22:21,680 --> 00:22:26,200
trying to do is essentially they've

00:22:23,930 --> 00:22:29,570
created this wrapper around docker and

00:22:26,200 --> 00:22:31,160
the mark all of they do all the heavy

00:22:29,570 --> 00:22:34,630
lifting for you so you have to

00:22:31,160 --> 00:22:38,380
essentially volume mount certain sockets

00:22:34,630 --> 00:22:40,610
so when you run you have to volume mount

00:22:38,380 --> 00:22:42,950
sockets and drivers and all of those

00:22:40,610 --> 00:22:53,870
files it does that automatically for you

00:22:42,950 --> 00:22:57,560
and then you can do neon RB so this is

00:22:53,870 --> 00:23:00,650
the Ruby file you can just press ENTER

00:22:57,560 --> 00:23:02,240
it will download a KD neon image it will

00:23:00,650 --> 00:23:05,300
start running that particular image in

00:23:02,240 --> 00:23:08,150
this case it started a blank window but

00:23:05,300 --> 00:23:10,540
this is running in a container or spawn

00:23:08,150 --> 00:23:10,540
by docker

00:23:13,320 --> 00:23:19,890
oh so flat-pack is slightly different so

00:23:16,700 --> 00:23:22,920
so we had to do all of these setups we

00:23:19,890 --> 00:23:26,310
had to like start another project like a

00:23:22,920 --> 00:23:28,620
de Leon or for sitting up or making

00:23:26,310 --> 00:23:31,200
docket work for us a flat-pack is

00:23:28,620 --> 00:23:32,940
focused on desktop environments so what

00:23:31,200 --> 00:23:41,520
they do is once you have flatback setup

00:23:32,940 --> 00:23:46,860
you can do a flat pack install laptop of

00:23:41,520 --> 00:23:49,470
odd dot KDE dot let's say ocular so this

00:23:46,860 --> 00:23:51,510
is one of the package cover there so

00:23:49,470 --> 00:23:53,220
it's saying it's already installed on my

00:23:51,510 --> 00:23:58,440
particular system what I'm going to do

00:23:53,220 --> 00:24:01,040
is flat pack or on all dot e de dot

00:23:58,440 --> 00:24:01,040
ocular

00:24:10,090 --> 00:24:15,429
so but this is essentially started

00:24:12,249 --> 00:24:19,330
ocular on my system it is running in a

00:24:15,429 --> 00:24:21,399
sandbox environment if I I could try

00:24:19,330 --> 00:24:24,580
like whatever I need to do with it I

00:24:21,399 --> 00:24:26,349
could open files in it so with Akkad you

00:24:24,580 --> 00:24:29,559
have two volume mount your actual hard

00:24:26,349 --> 00:24:31,299
disk right but with clap that you don't

00:24:29,559 --> 00:24:33,099
have to do it so once I click on a

00:24:31,299 --> 00:24:35,889
particular file that is on my original

00:24:33,099 --> 00:24:37,929
Louis it that automatically granted the

00:24:35,889 --> 00:24:40,840
permission to access those files so I

00:24:37,929 --> 00:24:42,519
can open anything from my system so it

00:24:40,840 --> 00:24:45,849
will open although all of those files so

00:24:42,519 --> 00:24:47,619
ocular is working properly now as a user

00:24:45,849 --> 00:24:56,080
I have tried it it didn't work out for

00:24:47,619 --> 00:24:59,339
me so I could just similarly just like I

00:24:56,080 --> 00:25:09,519
removed Pocket image I can also remove

00:24:59,339 --> 00:25:12,879
drastic image so if I say yes it will

00:25:09,519 --> 00:25:16,330
uninstall ocular from my system what

00:25:12,879 --> 00:25:19,419
plactic also provides you is oh so there

00:25:16,330 --> 00:25:24,429
is this different runtimes and SDKs that

00:25:19,419 --> 00:25:28,330
you can have so in this particular case

00:25:24,429 --> 00:25:31,299
I am running a popular that needs KD

00:25:28,330 --> 00:25:33,159
platform version 5.0 element but I am

00:25:31,299 --> 00:25:35,589
also running telegram which needs KD

00:25:33,159 --> 00:25:38,289
platform version 5.9 so I have both of

00:25:35,589 --> 00:25:41,339
those runtimes and both of those SDKs

00:25:38,289 --> 00:25:43,929
installed on my system at the same time

00:25:41,339 --> 00:25:45,460
so this also proved off provides me to

00:25:43,929 --> 00:25:49,299
keep different versions of library

00:25:45,460 --> 00:25:51,249
depending on what I want to run so as a

00:25:49,299 --> 00:25:52,809
developer this can give you that

00:25:51,249 --> 00:25:54,669
particular sandbox environment with

00:25:52,809 --> 00:25:57,489
whatever files you need for your

00:25:54,669 --> 00:26:00,580
application to run then you can create

00:25:57,489 --> 00:26:03,639
this image push this image on flat hub

00:26:00,580 --> 00:26:04,929
or any other like a repository and you

00:26:03,639 --> 00:26:07,719
can share it with the world and they can

00:26:04,929 --> 00:26:11,139
just do black hub run this particular

00:26:07,719 --> 00:26:14,609
package ID that's how it makes life easy

00:26:11,139 --> 00:26:14,609
for developers and for you

00:26:16,520 --> 00:26:25,400
thanks for okay thank you at the end of

00:26:22,340 --> 00:28:05,030
the time we have time for one or two

00:26:25,400 --> 00:28:06,740
questions the thing is this I just

00:28:05,030 --> 00:28:09,880
looked it up because I was asking for

00:28:06,740 --> 00:28:12,679
myself it looks like that pack actually

00:28:09,880 --> 00:28:15,080
has the model is a good model that it

00:28:12,679 --> 00:28:17,630
runs as the user and the user who starts

00:28:15,080 --> 00:28:20,390
TIFF not that tech inherits all its

00:28:17,630 --> 00:28:23,720
permissions to the flat pack this is

00:28:20,390 --> 00:28:25,910
different to Toco Toco has a sandbox

00:28:23,720 --> 00:28:28,190
alarm and it has more isolation but

00:28:25,910 --> 00:28:29,330
within docker typically application

00:28:28,190 --> 00:28:31,820
itself has

00:28:29,330 --> 00:28:34,790
what permissions within the sandbox so

00:28:31,820 --> 00:28:37,100
flat-pack depends on the privilege

00:28:34,790 --> 00:28:39,110
separation in the Karma which knows

00:28:37,100 --> 00:28:41,420
about users but it has if you write as

00:28:39,110 --> 00:28:43,190
your own user it has can I bring you you

00:28:41,420 --> 00:28:44,690
can do yourself and if you run as a

00:28:43,190 --> 00:28:52,670
different user you can't access for

00:28:44,690 --> 00:28:55,600
example x11 anymore no thank you time

00:28:52,670 --> 00:28:55,600
for questions afterwards

00:29:04,320 --> 00:29:06,380

YouTube URL: https://www.youtube.com/watch?v=DuVWaCq_Cz4


