Title: Lightning Talks - QtCon Akademy 2016
Publication date: 2016-09-04
Playlist: QtCon Akademy 2016
Description: 
	QtQuickVcp - Remote UIs for machine tools 
QtQuickVcp is a set of QtQuick modules for rapidly building remote UIs for machine tools.
In combination with the Machinekit Real-Time Linux machine control software, it allows to build custom machine tool Uis for Windows, OSX, Linux, Android and iOS in hours.
The project is open source and hosted on Github: https://github.com/strahlex/QtQuickVcp .   

Presentations in Qml
For making presentations there are two commonly chosen solutions: Powerpoint and LaTeX. Both approaches have shortcomings we learned to deal with. Qml to the rescue! There has been effort to make it easy to create stunning presentations in Qml. In my opinion it has the potential to not only make presentations easier to create, but also to unleash new possibilities. I came to this conclusion after I made the presentation of my master thesis with Qml. In my talk I want to share my experience with you, enable you to quickly get started with presentations in Qml and show briefly what is possible by giving examples.  

Native QML Location API for Web developers 
JavaScript developers are increasingly looking for APIs which allow them to build native apps.  Esri’s QML API allows these developers to use their JavaScript skills to build Location-enabled apps leveraging the capabilities of the device.  This talk highlights the importance of native apps built purely in QML and JavaScript.   

End Users and QML in Rolisteam
Technical challenges is all the reason why some people work on open-source or free softwares. At least, this information is true for Rolisteam and its team. 
Let me tell you all the challenges we have been faced when we wrote the character sheet system in Rolisteam. 
QML has been chosen to carry this feature and the main goal was to let users make their own character sheets. 
Is it possible for end user to write QML code ? Yes, with some tools and a good approach. 
Now, Rolisteam's users are QML (assisted) developers.  

Large Traces in QML Profiler
The QML profiler tracks everything that happens in QML and QtQuick. This leads to an unfortunate correlation between the severity of the problem you're trying to diagnose and the size of the resulting traces. There are some things you can do about this.
Captions: 
	00:00:00,000 --> 00:00:02,060
you

00:00:04,230 --> 00:00:10,089
um hello and welcome to my lightning

00:00:07,360 --> 00:00:14,709
talk about cute quick recipe remote

00:00:10,089 --> 00:00:17,289
using the faces from machine tools my

00:00:14,709 --> 00:00:20,770
talk would be in four parts first I'm

00:00:17,289 --> 00:00:24,940
going to tell you who I am then I'm

00:00:20,770 --> 00:00:27,370
going to talk about that topic the scope

00:00:24,940 --> 00:00:29,710
of the project which is evolves around

00:00:27,370 --> 00:00:31,780
machine kit and open source machine

00:00:29,710 --> 00:00:34,600
control software then i'm going to talk

00:00:31,780 --> 00:00:37,480
that about the user interface the cute

00:00:34,600 --> 00:00:43,059
user interfaces for machine kit and then

00:00:37,480 --> 00:00:46,989
i will present a few applications okay

00:00:43,059 --> 00:00:49,449
my name is Alexander Isla and I'm

00:00:46,989 --> 00:00:53,819
actually an embedded engineer but I'm

00:00:49,449 --> 00:00:56,589
involved I'm involved in cute and

00:00:53,819 --> 00:00:58,989
developing user interfaces with cute

00:00:56,589 --> 00:01:01,690
longer than an MMA bedded engineer

00:00:58,989 --> 00:01:04,860
actually I'm also involved in some open

00:01:01,690 --> 00:01:07,840
source projects since of some years and

00:01:04,860 --> 00:01:10,780
actually got involved into this project

00:01:07,840 --> 00:01:14,710
because I like to play with 3d printers

00:01:10,780 --> 00:01:18,870
and I was very dissatisfied with their

00:01:14,710 --> 00:01:18,870
available using the faces in this area

00:01:20,010 --> 00:01:27,880
so first of all what is machine kit okay

00:01:25,120 --> 00:01:30,780
machine kit is an open-source software

00:01:27,880 --> 00:01:33,790
for controlling machine tools or

00:01:30,780 --> 00:01:36,730
actually a solution for machine control

00:01:33,790 --> 00:01:40,600
applications it can be used for example

00:01:36,730 --> 00:01:42,850
for 3d printers cincy machines but not

00:01:40,600 --> 00:01:45,220
only but also its attendant to be used

00:01:42,850 --> 00:01:49,240
for example for robots quadcopters as

00:01:45,220 --> 00:01:51,940
driving layer the whole idea is that it

00:01:49,240 --> 00:01:53,950
can work on first of embedded and

00:01:51,940 --> 00:01:57,190
embedded devices and better computers

00:01:53,950 --> 00:02:00,640
but also in desktop computers meaning

00:01:57,190 --> 00:02:03,930
Linux and the user interface itself can

00:02:00,640 --> 00:02:08,519
run on desktop computers smartphones and

00:02:03,930 --> 00:02:11,230
tablets and ozone embedded devices and

00:02:08,519 --> 00:02:13,210
why I actually started this project was

00:02:11,230 --> 00:02:16,950
because I was very dissatisfied with

00:02:13,210 --> 00:02:21,370
which which with the available solutions

00:02:16,950 --> 00:02:24,130
machine kit evolved from the Linux in C

00:02:21,370 --> 00:02:29,610
project and for anyone who knows

00:02:24,130 --> 00:02:32,230
linuxcnc maybe anyone here okay one guy

00:02:29,610 --> 00:02:35,370
yeah the available using the face

00:02:32,230 --> 00:02:38,230
solutions are not very sophisticated

00:02:35,370 --> 00:02:42,569
they're basically stuck somewhere in the

00:02:38,230 --> 00:02:45,310
90s with tika inta and all this yeah

00:02:42,569 --> 00:02:47,980
very old-school using the face frame

00:02:45,310 --> 00:02:52,060
backs and so I started actually started

00:02:47,980 --> 00:02:54,610
a cute quick vcp project and one problem

00:02:52,060 --> 00:02:57,340
to solve was actually traditional

00:02:54,610 --> 00:02:59,500
machine control applications or this CNC

00:02:57,340 --> 00:03:02,620
applications I work on one single

00:02:59,500 --> 00:03:04,300
computer but since we're moving to

00:03:02,620 --> 00:03:06,400
embedded systems or single board

00:03:04,300 --> 00:03:09,910
computers we have a problem the

00:03:06,400 --> 00:03:12,760
graphical hardware is usually not strong

00:03:09,910 --> 00:03:15,849
enough to handle good user interfaces

00:03:12,760 --> 00:03:18,040
and therefore the solution was to build

00:03:15,849 --> 00:03:20,980
a distributed system and to actually run

00:03:18,040 --> 00:03:24,700
the graphical user interfaces in on the

00:03:20,980 --> 00:03:28,870
devices we all have use every day for

00:03:24,700 --> 00:03:34,360
example tablets smartphones or or normal

00:03:28,870 --> 00:03:38,020
desktop computers and word to make this

00:03:34,360 --> 00:03:41,020
possible we have developed a middleware

00:03:38,020 --> 00:03:44,260
called machine talk which which uses cmq

00:03:41,020 --> 00:03:48,819
hour in the case of too cute quick vcp

00:03:44,260 --> 00:03:51,130
and set em QT a wraparound zeromq the

00:03:48,819 --> 00:03:56,129
google protocol buffers and multicast

00:03:51,130 --> 00:04:00,550
dns then SSD for service discovery

00:03:56,129 --> 00:04:02,680
machine kit actually is very nice and

00:04:00,550 --> 00:04:07,120
not only for cincy applications because

00:04:02,680 --> 00:04:10,780
it allows to abstract the actual machine

00:04:07,120 --> 00:04:13,810
control configuration basically there

00:04:10,780 --> 00:04:16,900
are components which can be for example

00:04:13,810 --> 00:04:20,980
very simple and logic and component or

00:04:16,900 --> 00:04:23,290
most sophisticated a PID controller

00:04:20,980 --> 00:04:26,170
or even a complete motion control and

00:04:23,290 --> 00:04:29,320
you can clue them together using signals

00:04:26,170 --> 00:04:33,160
and so we can basically create machine

00:04:29,320 --> 00:04:39,580
control systems without even programming

00:04:33,160 --> 00:04:42,460
one line and this is nice everything

00:04:39,580 --> 00:04:45,100
this is very nice but what should we do

00:04:42,460 --> 00:04:48,400
if we fit without nice user interface

00:04:45,100 --> 00:04:51,760
and so for this reason I start the cute

00:04:48,400 --> 00:04:56,490
quick we see p project we see P stands

00:04:51,760 --> 00:04:59,110
for a wittle control panel this is what

00:04:56,490 --> 00:05:01,450
using the faces for machine kit are

00:04:59,110 --> 00:05:04,540
traditionally called and that's where I

00:05:01,450 --> 00:05:06,880
get the name from basically it's a set

00:05:04,540 --> 00:05:10,600
of qml modules which can be used to

00:05:06,880 --> 00:05:12,580
build user interfaces for machine kit to

00:05:10,600 --> 00:05:14,710
be exactly remote user interface its

00:05:12,580 --> 00:05:18,280
meaning they can be run on an Android

00:05:14,710 --> 00:05:20,920
tablet or a desktop computer or even

00:05:18,280 --> 00:05:23,080
when the same device the work we're

00:05:20,920 --> 00:05:25,840
using machine talk that cross-platform

00:05:23,080 --> 00:05:28,020
the work on Android iOS and all the

00:05:25,840 --> 00:05:33,490
desktop platforms of course we're using

00:05:28,020 --> 00:05:35,980
cute and yeah very nice about is the

00:05:33,490 --> 00:05:38,890
idea is that you have that you can

00:05:35,980 --> 00:05:40,810
remotely start new machine control

00:05:38,890 --> 00:05:43,930
instances meaning if you have a single

00:05:40,810 --> 00:05:46,540
computer that can do many things like

00:05:43,930 --> 00:05:48,520
for example can be used for a scene

00:05:46,540 --> 00:05:50,350
cient at the same time used for 3d

00:05:48,520 --> 00:05:53,050
printer or you can switch between them

00:05:50,350 --> 00:05:56,710
and you can start as remotely you can

00:05:53,050 --> 00:05:58,690
remotely deploy one idea was also to

00:05:56,710 --> 00:06:02,470
have a single client for everything so

00:05:58,690 --> 00:06:05,860
as a user you don't have to download 10

00:06:02,470 --> 00:06:08,560
different user interfaces or different

00:06:05,860 --> 00:06:10,450
applications just use multiple user

00:06:08,560 --> 00:06:14,650
interfaces and this is called the

00:06:10,450 --> 00:06:16,630
machine kit client and you can great

00:06:14,650 --> 00:06:19,780
basically can great two types of user

00:06:16,630 --> 00:06:22,420
interfaces one hour dejalo remote user

00:06:19,780 --> 00:06:24,460
interfaces Hollis the configuration

00:06:22,420 --> 00:06:26,860
layer of machine kit and the other ones

00:06:24,460 --> 00:06:28,870
are the application or EMC enhanced

00:06:26,860 --> 00:06:31,180
machine controller using the phases

00:06:28,870 --> 00:06:33,810
which are dedicated to CNC machines 3d

00:06:31,180 --> 00:06:37,410
printers and so on so everything that

00:06:33,810 --> 00:06:41,669
uses this Cartesian driven machines

00:06:37,410 --> 00:06:44,040
basically quick overview of our remote

00:06:41,669 --> 00:06:46,800
components and how they are used inside

00:06:44,040 --> 00:06:51,120
the user interface basically can think

00:06:46,800 --> 00:06:52,940
of how less like an electronic like

00:06:51,120 --> 00:06:55,800
basically electronic components

00:06:52,940 --> 00:06:58,050
connected by signals and you can just

00:06:55,800 --> 00:07:00,800
plug them together and the idea is to

00:06:58,050 --> 00:07:02,669
have one component that basically

00:07:00,800 --> 00:07:04,560
represented also in the user interface

00:07:02,669 --> 00:07:07,440
and in the user interface you can

00:07:04,560 --> 00:07:09,990
connect for example a button a progress

00:07:07,440 --> 00:07:13,010
bar or whatever to this component order

00:07:09,990 --> 00:07:16,440
to a pin of the component and using this

00:07:13,010 --> 00:07:19,490
you can quickly create very

00:07:16,440 --> 00:07:22,350
sophisticated user interfaces for

00:07:19,490 --> 00:07:25,020
applications without thinking a lot

00:07:22,350 --> 00:07:27,660
about the communication and and

00:07:25,020 --> 00:07:30,389
everything that is evolved around isn't

00:07:27,660 --> 00:07:35,690
usually involved in when creating such a

00:07:30,389 --> 00:07:38,880
system yeah how does this work basically

00:07:35,690 --> 00:07:40,470
as I said it does out to discovery it

00:07:38,880 --> 00:07:43,470
does launching and everything so you

00:07:40,470 --> 00:07:46,140
have two components one is a component

00:07:43,470 --> 00:07:48,270
that starts everything or launches using

00:07:46,140 --> 00:07:51,300
the face this is called connection

00:07:48,270 --> 00:07:53,340
window you can have two types of user

00:07:51,300 --> 00:07:56,570
interfaces local user interfaces which

00:07:53,340 --> 00:08:01,050
are locally L available and one that are

00:07:56,570 --> 00:08:04,139
deployed remotely you can have multicast

00:08:01,050 --> 00:08:06,620
DNS discovery or a single cost unique as

00:08:04,139 --> 00:08:12,090
dns where you have to type basically a

00:08:06,620 --> 00:08:18,000
IP address and on the other side you

00:08:12,090 --> 00:08:23,400
have modest loads basically is a normal

00:08:18,000 --> 00:08:26,970
using the face and to create this to

00:08:23,400 --> 00:08:29,729
quickly create these components one hack

00:08:26,970 --> 00:08:35,159
can use either directly use a hard

00:08:29,729 --> 00:08:38,190
remote component component component a

00:08:35,159 --> 00:08:41,010
qml component basically but also you can

00:08:38,190 --> 00:08:44,010
create quickly click together or or

00:08:41,010 --> 00:08:48,010
create using the faces like this which

00:08:44,010 --> 00:08:49,930
is very simple basically it would create

00:08:48,010 --> 00:08:54,640
how the remote control opponent called

00:08:49,930 --> 00:08:58,120
foo and with one pin which is called

00:08:54,640 --> 00:08:59,850
button and you can use this component

00:08:58,120 --> 00:09:03,700
then in your machine configuration

00:08:59,850 --> 00:09:06,130
basically yeah this is only a part of

00:09:03,700 --> 00:09:09,310
the whole cube quick recipe you can also

00:09:06,130 --> 00:09:13,480
use this application components which

00:09:09,310 --> 00:09:15,550
can be used to a show g-code showed 3d

00:09:13,480 --> 00:09:18,400
preview and so on so this is there's a

00:09:15,550 --> 00:09:21,940
lot more involved but that's too much

00:09:18,400 --> 00:09:24,370
for 10 minutes okay and then there is

00:09:21,940 --> 00:09:27,640
the machine kit SDK which is basically a

00:09:24,370 --> 00:09:30,670
set of wizards plugins and templates

00:09:27,640 --> 00:09:34,030
which can be added to cute creator so

00:09:30,670 --> 00:09:36,640
you can quickly start a new project and

00:09:34,030 --> 00:09:40,440
also can use cute quick designer to

00:09:36,640 --> 00:09:40,440
click together using the face basically

00:09:40,800 --> 00:09:46,380
so what are applications first of all I

00:09:43,540 --> 00:09:52,630
created using the face for 3d printers

00:09:46,380 --> 00:09:56,790
yeah it's very to say it's very complete

00:09:52,630 --> 00:09:59,440
so it has a lot of features and yeah

00:09:56,790 --> 00:10:01,630
then there's Cato's which is a

00:09:59,440 --> 00:10:03,700
replacement for the axis using the face

00:10:01,630 --> 00:10:07,200
of Linux in C machine kit it's been

00:10:03,700 --> 00:10:11,320
since email slaves routers typical

00:10:07,200 --> 00:10:13,660
applications of machine kit and our

00:10:11,320 --> 00:10:15,280
application could be first of all I've

00:10:13,660 --> 00:10:19,570
work currently working on a commercial

00:10:15,280 --> 00:10:20,860
cnc user interface and generic machine

00:10:19,570 --> 00:10:23,740
control using the faces small

00:10:20,860 --> 00:10:26,710
applications prototyping testing and so

00:10:23,740 --> 00:10:29,980
on yeah thank you very much for your

00:10:26,710 --> 00:10:31,900
attention here of some fur links first

00:10:29,980 --> 00:10:35,410
of all not block machine khou.com

00:10:31,900 --> 00:10:37,540
machine kit dot IO the Machine get

00:10:35,410 --> 00:10:40,510
project and then the links to the github

00:10:37,540 --> 00:10:42,910
get quick recipe machine kit vagrant to

00:10:40,510 --> 00:10:45,370
get started quickly get started and the

00:10:42,910 --> 00:10:48,360
machine kit SDK okay thank you very much

00:10:45,370 --> 00:10:48,360
thank you

00:10:51,080 --> 00:10:57,570
I'm afraid we don't have time for Q&A so

00:10:54,380 --> 00:11:02,120
just reaching me if you need any if you

00:10:57,570 --> 00:11:02,120
have any question of course next one

00:11:06,320 --> 00:11:21,750
they also we can play hey guys no time

00:11:18,360 --> 00:11:32,190
sorry sorry I I could not take the 3d

00:11:21,750 --> 00:11:34,490
printer on the play don't need this

00:11:32,190 --> 00:11:34,490
paper

00:11:52,060 --> 00:12:16,850
right yes does it work okay okay yes

00:12:04,880 --> 00:12:29,630
good idea yeah what a frustration cute

00:12:16,850 --> 00:12:31,400
male yes it is so yeah double tap and so

00:12:29,630 --> 00:12:33,500
yeah where can I meant to my

00:12:31,400 --> 00:12:36,410
presentation about presentation in qml

00:12:33,500 --> 00:12:38,990
my name is Daniel bula from afar and

00:12:36,410 --> 00:12:41,210
university of applied sciences and I'm

00:12:38,990 --> 00:12:44,690
very interested first if you just his

00:12:41,210 --> 00:12:48,500
presentations in qml already maybe some

00:12:44,690 --> 00:12:51,140
of us oh we oh quite quite some people

00:12:48,500 --> 00:12:54,650
so how did I to come to the topic of

00:12:51,140 --> 00:12:57,230
doing presentations in qml where one and

00:12:54,650 --> 00:13:01,430
a half years ago i did my master degree

00:12:57,230 --> 00:13:03,200
and finished writing on my text and

00:13:01,430 --> 00:13:05,810
lattice and still at two weeks to

00:13:03,200 --> 00:13:08,360
prepare a presentation for my professors

00:13:05,810 --> 00:13:09,920
so for me to question arise which

00:13:08,360 --> 00:13:15,290
technology should i use to do this

00:13:09,920 --> 00:13:17,780
presentation well it was obvious to use

00:13:15,290 --> 00:13:20,480
lattice for this job too because i would

00:13:17,780 --> 00:13:26,720
already met my figures in lattice and my

00:13:20,480 --> 00:13:28,640
my content and but I was quite unhappy

00:13:26,720 --> 00:13:30,710
with this decision because my professor

00:13:28,640 --> 00:13:35,200
is a very visual type of person she

00:13:30,710 --> 00:13:35,200
wants a video in every presentation and

00:13:35,529 --> 00:13:43,810
so I wanted to impress her and it also

00:13:42,189 --> 00:13:48,370
add some slick animations to my

00:13:43,810 --> 00:13:50,980
presentation so I could have done these

00:13:48,370 --> 00:13:54,999
animations in PowerPoint I could have

00:13:50,980 --> 00:13:56,740
use PowerPoint but I wanted to have a

00:13:54,999 --> 00:14:01,079
professional workflow and this and using

00:13:56,740 --> 00:14:01,079
a good learning system for example so

00:14:01,800 --> 00:14:09,639
I've just found qml and yeah that

00:14:07,209 --> 00:14:11,199
started working and so when I'm talking

00:14:09,639 --> 00:14:13,029
about the animations please don't

00:14:11,199 --> 00:14:20,800
understand me wrong I'm not talking

00:14:13,029 --> 00:14:24,779
about animations like this so completely

00:14:20,800 --> 00:14:24,779
overloaded with pointless animations

00:14:25,230 --> 00:14:33,910
yeah with qma so I think that animations

00:14:32,230 --> 00:14:38,230
can also have your audience to

00:14:33,910 --> 00:14:40,449
understand complex topics yeah so how

00:14:38,230 --> 00:14:42,699
can we get started writing presentations

00:14:40,449 --> 00:14:45,939
in qml there is this repository on

00:14:42,699 --> 00:14:49,600
github the link to it is in the end of

00:14:45,939 --> 00:14:52,180
my presentation and what we need to do

00:14:49,600 --> 00:14:55,860
is write a small C++ application which

00:14:52,180 --> 00:14:59,410
basically is forms our cue quick view

00:14:55,860 --> 00:15:01,269
and we also can use this to work you met

00:14:59,410 --> 00:15:03,569
scene which meant to view debugging tool

00:15:01,269 --> 00:15:08,470
but I think it is ok to use it for

00:15:03,569 --> 00:15:11,370
presentations to so what do we get when

00:15:08,470 --> 00:15:15,000
we when we close this repository is

00:15:11,370 --> 00:15:18,819
basically we get two components one

00:15:15,000 --> 00:15:20,679
component is a presentation element

00:15:18,819 --> 00:15:25,319
which cares about going to the next

00:15:20,679 --> 00:15:27,850
slide and go into a preview slide and

00:15:25,319 --> 00:15:29,939
the other component we get is a very

00:15:27,850 --> 00:15:31,929
powerful slide component which has

00:15:29,939 --> 00:15:35,399
implementations for ninety percent of

00:15:31,929 --> 00:15:38,439
all the slides you will ever need so

00:15:35,399 --> 00:15:40,389
what we see here is on a right actually

00:15:38,439 --> 00:15:43,029
the code of this slide in an empty

00:15:40,389 --> 00:15:45,459
presentation but without the code block

00:15:43,029 --> 00:15:47,110
itself because I'm putting the code blog

00:15:45,459 --> 00:15:49,100
and code block would reside an endless

00:15:47,110 --> 00:15:53,850
recursion

00:15:49,100 --> 00:15:55,769
yeah what we see here is that creating

00:15:53,850 --> 00:16:01,019
these bullet points of the slide is

00:15:55,769 --> 00:16:04,860
actually a array of strings and thus

00:16:01,019 --> 00:16:06,269
leading leaving space here indicates

00:16:04,860 --> 00:16:10,260
that this palette points would be nested

00:16:06,269 --> 00:16:12,470
one level in the repository is also a

00:16:10,260 --> 00:16:15,329
great tutorial and lots of examples

00:16:12,470 --> 00:16:18,240
which helps you get in quick getting

00:16:15,329 --> 00:16:22,010
started very quickly in this repository

00:16:18,240 --> 00:16:24,750
is also a small tool called print slides

00:16:22,010 --> 00:16:27,870
which lets you make pdfs out of your

00:16:24,750 --> 00:16:30,149
presentation and this tool is very basic

00:16:27,870 --> 00:16:33,690
what it does is start your presentation

00:16:30,149 --> 00:16:36,540
and actually just make screenshots of

00:16:33,690 --> 00:16:38,640
every slide so very basic but it works

00:16:36,540 --> 00:16:44,640
if you want to make and hand out of your

00:16:38,640 --> 00:16:46,470
presentation so then I brought an

00:16:44,640 --> 00:16:49,170
example of those animations I was

00:16:46,470 --> 00:16:51,510
talking about my master's thesis was

00:16:49,170 --> 00:16:54,329
about rendering three dimensional heat

00:16:51,510 --> 00:16:57,410
maps volumetric heat maps and on the

00:16:54,329 --> 00:17:00,420
right you see the geometry I sent to the

00:16:57,410 --> 00:17:04,439
to the graphics card in the original

00:17:00,420 --> 00:17:10,049
presentation I showed I showed some code

00:17:04,439 --> 00:17:12,600
at this point and then also we can do

00:17:10,049 --> 00:17:14,250
some optimizations to this geometry so

00:17:12,600 --> 00:17:16,880
make it look more like a data point or

00:17:14,250 --> 00:17:19,319
like like a point like a sphere and

00:17:16,880 --> 00:17:21,150
these spheres were then rendered into

00:17:19,319 --> 00:17:23,459
one big a three dimensional texture

00:17:21,150 --> 00:17:25,020
which look like this and we can send

00:17:23,459 --> 00:17:28,799
visualize it with a transfer function

00:17:25,020 --> 00:17:31,980
and it resides in such an image so I

00:17:28,799 --> 00:17:34,049
could have done an innovation like this

00:17:31,980 --> 00:17:37,860
using videos and play and pause a video

00:17:34,049 --> 00:17:40,890
every time but and for this I actually

00:17:37,860 --> 00:17:42,929
could use my application code and put it

00:17:40,890 --> 00:17:45,559
directly into the slide so I basically

00:17:42,929 --> 00:17:50,030
skipped the step of making videos and

00:17:45,559 --> 00:17:53,730
and cut them and could use it directly

00:17:50,030 --> 00:17:55,200
later on I recognized how powerful it is

00:17:53,730 --> 00:17:57,360
to put your application code directly

00:17:55,200 --> 00:17:59,080
into a slide and this is the next use

00:17:57,360 --> 00:18:02,630
case

00:17:59,080 --> 00:18:04,910
you could can put your whole front end

00:18:02,630 --> 00:18:07,309
into your application and just maybe

00:18:04,910 --> 00:18:08,840
discuss it with some state discuss an

00:18:07,309 --> 00:18:12,320
early prototype of your application with

00:18:08,840 --> 00:18:22,970
some stakeholders and it is also

00:18:12,320 --> 00:18:25,010
interactive at this point here and one

00:18:22,970 --> 00:18:27,200
in a few years ago it was also a bit

00:18:25,010 --> 00:18:30,070
hacky to get this 3d content into your

00:18:27,200 --> 00:18:32,630
presentation nowadays we have cute 3d

00:18:30,070 --> 00:18:36,140
which can be instantly integrated into a

00:18:32,630 --> 00:18:37,820
slide easily with this component and for

00:18:36,140 --> 00:18:41,360
one of us who made it to any day

00:18:37,820 --> 00:18:44,600
yesterday oh I know it this component

00:18:41,360 --> 00:18:47,120
registers the input aspect also here and

00:18:44,600 --> 00:18:51,050
this makes the component completely

00:18:47,120 --> 00:18:53,630
interactive inside the presentation so

00:18:51,050 --> 00:18:57,590
this is very fancy and if that is not

00:18:53,630 --> 00:19:02,300
enough we also have charts we can it in

00:18:57,590 --> 00:19:05,140
our presentations since cute 5.7 these

00:19:02,300 --> 00:19:07,880
are available for open source developers

00:19:05,140 --> 00:19:11,270
yeah this is a bar chart and we also

00:19:07,880 --> 00:19:17,120
have a pie chart and it can be animated

00:19:11,270 --> 00:19:19,460
too so have a look yeah and I was very

00:19:17,120 --> 00:19:21,830
surprised when I saw how few lines of

00:19:19,460 --> 00:19:25,850
code are needed to include such an such

00:19:21,830 --> 00:19:29,059
an shot into the dis lights we have the

00:19:25,850 --> 00:19:31,130
chart view here for the way the pie

00:19:29,059 --> 00:19:33,710
chart and insight is the actual pie

00:19:31,130 --> 00:19:36,290
chart the chart view is configured to

00:19:33,710 --> 00:19:39,100
enable all animations and then we see

00:19:36,290 --> 00:19:43,610
down here there is one pie it's lies

00:19:39,100 --> 00:19:46,070
which should which sets is exploded

00:19:43,610 --> 00:19:49,400
property to true when the slides

00:19:46,070 --> 00:19:53,950
proceeds three steps and this is what

00:19:49,400 --> 00:19:53,950
triggered the animation we just stopped

00:19:54,730 --> 00:20:00,920
so the key of being efficient when

00:19:57,320 --> 00:20:03,679
creating qma presentations is using

00:20:00,920 --> 00:20:05,570
components you can creating your own

00:20:03,679 --> 00:20:07,490
components you can reuse very often and

00:20:05,570 --> 00:20:09,630
I found myself very often comparing

00:20:07,490 --> 00:20:12,420
different images of different

00:20:09,630 --> 00:20:16,070
approaches so I came up with this

00:20:12,420 --> 00:20:20,540
component which lets me compare

00:20:16,070 --> 00:20:20,540
different approaches with my audience

00:20:21,230 --> 00:20:27,570
and the other component I edit is this

00:20:25,110 --> 00:20:32,100
progress indicator you hopefully already

00:20:27,570 --> 00:20:36,450
noticed which we know from lattice yeah

00:20:32,100 --> 00:20:39,090
the bottom line is it offers a lot of

00:20:36,450 --> 00:20:43,350
possibilities and the simple things can

00:20:39,090 --> 00:20:45,210
be done the simple and add more complex

00:20:43,350 --> 00:20:47,820
slides also would take of course a lot a

00:20:45,210 --> 00:20:50,370
bit of effort and it looked really nice

00:20:47,820 --> 00:20:52,440
to have more components and also to have

00:20:50,370 --> 00:20:55,770
some more tooling so me as a presenter

00:20:52,440 --> 00:20:58,170
here and I can have a small window with

00:20:55,770 --> 00:21:00,210
with notes maybe but I can't see the

00:20:58,170 --> 00:21:02,220
next slide so for ten minute

00:21:00,210 --> 00:21:03,810
presentation that is ok but there

00:21:02,220 --> 00:21:07,170
wouldn't be a tool to show me the next

00:21:03,810 --> 00:21:09,300
slide here and also i use a smartphone

00:21:07,170 --> 00:21:14,850
as a timer that would be nice to have

00:21:09,300 --> 00:21:17,280
maybe so allocated people here are doing

00:21:14,850 --> 00:21:19,850
I think they're doing their flights very

00:21:17,280 --> 00:21:23,070
often also in qml but they have this

00:21:19,850 --> 00:21:25,350
application called slide viewer and it

00:21:23,070 --> 00:21:28,410
is very it seems to be very powerful so

00:21:25,350 --> 00:21:30,990
maybe enough demand one time this might

00:21:28,410 --> 00:21:34,770
be available to the pub to the public

00:21:30,990 --> 00:21:37,080
maybe but until now we have this cream

00:21:34,770 --> 00:21:40,350
representation system with the link

00:21:37,080 --> 00:21:42,270
shown here and and also my own Fork of

00:21:40,350 --> 00:21:44,370
it which contains these two components I

00:21:42,270 --> 00:21:46,500
talked about and the ability for a slide

00:21:44,370 --> 00:21:49,020
to have multiple states who have these

00:21:46,500 --> 00:21:51,230
animations in so thanks a lot for your

00:21:49,020 --> 00:21:51,230
attention

00:21:56,870 --> 00:22:02,090
thank you very much okay next one

00:23:02,690 --> 00:23:09,390
alright my name is Michael Tim's I'm

00:23:05,550 --> 00:23:12,390
here to talk about a native qml location

00:23:09,390 --> 00:23:16,020
API that we've put together at ESRI

00:23:12,390 --> 00:23:19,250
that's focused on scripters or web

00:23:16,020 --> 00:23:24,450
developers with a JavaScript web

00:23:19,250 --> 00:23:26,910
background I work at ESRI on our product

00:23:24,450 --> 00:23:30,080
that's called the ArcGIS runtime SDK for

00:23:26,910 --> 00:23:33,000
cute and just quickly agenda so we'll go

00:23:30,080 --> 00:23:35,370
just a little bit about why we're doing

00:23:33,000 --> 00:23:36,930
this what we're doing qml a p.i for

00:23:35,370 --> 00:23:41,880
javascript developers i'll show you a

00:23:36,930 --> 00:23:44,100
demo couple demos i'll go over just a

00:23:41,880 --> 00:23:46,830
couple extra AP is that we've had to

00:23:44,100 --> 00:23:50,490
expose to qml because they're not in the

00:23:46,830 --> 00:23:52,860
cute framework to be able to support our

00:23:50,490 --> 00:23:58,080
sdk and then i'll follow it up with a

00:23:52,860 --> 00:24:00,690
with a with a summary okay so qml for

00:23:58,080 --> 00:24:06,150
javascript developers at ESRI well so

00:24:00,690 --> 00:24:10,140
why design a native API and qml for web

00:24:06,150 --> 00:24:12,600
developers that only requires you to

00:24:10,140 --> 00:24:16,080
know some sort of web technology and no

00:24:12,600 --> 00:24:19,790
c++ required at every we've built a

00:24:16,080 --> 00:24:22,860
pretty good foundation on the web

00:24:19,790 --> 00:24:25,770
technology we have a lot of people that

00:24:22,860 --> 00:24:28,560
are attracted to our technology and they

00:24:25,770 --> 00:24:32,390
come with an html5 or a web background

00:24:28,560 --> 00:24:35,550
but the industry you know these these

00:24:32,390 --> 00:24:37,710
organizations want to build apps that

00:24:35,550 --> 00:24:39,480
run on the desktop not only the desktop

00:24:37,710 --> 00:24:41,700
but mobile devices they want to put

00:24:39,480 --> 00:24:43,560
their apps in stores they want to be

00:24:41,700 --> 00:24:46,310
able to bring your own device and have

00:24:43,560 --> 00:24:48,930
the application running on your device

00:24:46,310 --> 00:24:52,230
and that's where we've come in and we've

00:24:48,930 --> 00:24:56,700
built our entire location API and

00:24:52,230 --> 00:24:58,500
exposed it to qml know C++ skills are

00:24:56,700 --> 00:25:00,570
required because you're basically

00:24:58,500 --> 00:25:03,000
programming against our API all

00:25:00,570 --> 00:25:06,149
in qml with javascript business log

00:25:03,000 --> 00:25:08,429
logic will get better performance than

00:25:06,149 --> 00:25:11,130
hybrid or web technologies probably not

00:25:08,429 --> 00:25:16,409
as good as performance of our C++ API

00:25:11,130 --> 00:25:17,850
because we also have a C++ API but you

00:25:16,409 --> 00:25:19,470
know we're going to get some pretty good

00:25:17,850 --> 00:25:23,580
performance and we've been able to prove

00:25:19,470 --> 00:25:25,110
that most of these users have never

00:25:23,580 --> 00:25:27,360
envisioned that they would be able to

00:25:25,110 --> 00:25:29,490
write a mobile app that's that they

00:25:27,360 --> 00:25:33,750
actually wrote for iOS or Android that's

00:25:29,490 --> 00:25:36,000
not running in the web browser these are

00:25:33,750 --> 00:25:38,220
and we've we've gotten a huge amount of

00:25:36,000 --> 00:25:40,350
these developers they're being exposed

00:25:38,220 --> 00:25:43,470
to the cute framework most of them never

00:25:40,350 --> 00:25:45,509
even knew what qml was before but now

00:25:43,470 --> 00:25:50,549
they do and they're you know programming

00:25:45,509 --> 00:25:51,899
against qml and and using javascript so

00:25:50,549 --> 00:25:53,519
just going to step you through a couple

00:25:51,899 --> 00:25:55,860
demos just to kind of give you a feel

00:25:53,519 --> 00:25:59,279
for the API here i have an application

00:25:55,860 --> 00:26:01,950
that when I spin up it's going to bring

00:25:59,279 --> 00:26:04,169
up a world imagery map and I'm going to

00:26:01,950 --> 00:26:08,100
click this button to just zoom to this

00:26:04,169 --> 00:26:09,990
yellow stone spring and nice simple

00:26:08,100 --> 00:26:12,779
little application as long as the

00:26:09,990 --> 00:26:15,090
network comes up and this application

00:26:12,779 --> 00:26:18,809
just real quickly you know zooms in to

00:26:15,090 --> 00:26:21,570
this spring on the screen so let's take

00:26:18,809 --> 00:26:24,059
a look at the code behind how do you do

00:26:21,570 --> 00:26:26,820
this in just qml well we have this API

00:26:24,059 --> 00:26:29,700
where we start out by declaring a map

00:26:26,820 --> 00:26:34,230
view I just blow that up a little bit

00:26:29,700 --> 00:26:36,809
nest a map and that imagery map that you

00:26:34,230 --> 00:26:38,519
saw is our base map and that goes into

00:26:36,809 --> 00:26:42,120
our map you can think of our map is a

00:26:38,519 --> 00:26:44,009
model to our map view and that's really

00:26:42,120 --> 00:26:46,440
all you had to do to really get that map

00:26:44,009 --> 00:26:48,899
up on the screen so then when they start

00:26:46,440 --> 00:26:51,330
wanting to interact and write logic say

00:26:48,899 --> 00:26:54,240
they have this button and on click they

00:26:51,330 --> 00:26:56,879
want to zoom to the spring you can

00:26:54,240 --> 00:26:59,190
declare our different geometry types and

00:26:56,879 --> 00:27:01,830
this is just a point that's with a

00:26:59,190 --> 00:27:05,850
geographic point that's that we can zoom

00:27:01,830 --> 00:27:09,000
to and within this zoom to spring

00:27:05,850 --> 00:27:12,419
function we can dynamically declare our

00:27:09,000 --> 00:27:14,100
types in qml so we'll declare this

00:27:12,419 --> 00:27:16,830
viewpoint center type

00:27:14,100 --> 00:27:19,559
and give it that location on the screen

00:27:16,830 --> 00:27:21,990
and then we just on our views say we

00:27:19,559 --> 00:27:24,809
want to set the viewpoint with four

00:27:21,990 --> 00:27:26,940
seconds so it will take four seconds to

00:27:24,809 --> 00:27:30,960
zoom to that particular location and

00:27:26,940 --> 00:27:33,000
that was all in qml with some JavaScript

00:27:30,960 --> 00:27:34,860
logic and it gets a little bit more

00:27:33,000 --> 00:27:40,799
detailed than that obviously but this is

00:27:34,860 --> 00:27:44,240
just a simple example also available for

00:27:40,799 --> 00:27:47,419
qml JavaScript developers is our 3d

00:27:44,240 --> 00:27:51,210
technology that would be bringing to our

00:27:47,419 --> 00:27:53,549
API as well so will be to cut be able to

00:27:51,210 --> 00:27:56,760
come in here and if the network is being

00:27:53,549 --> 00:27:59,429
nice to me we can come in here and we

00:27:56,760 --> 00:28:01,830
can look at our our scene and we call

00:27:59,429 --> 00:28:03,539
this a scene layer and this is running

00:28:01,830 --> 00:28:05,610
in a scene view it'll take a little

00:28:03,539 --> 00:28:08,010
while to texturize the buildings because

00:28:05,610 --> 00:28:09,450
it you know the network connection but

00:28:08,010 --> 00:28:12,450
you can come in here and you can work in

00:28:09,450 --> 00:28:16,169
3d now running on the desktop running on

00:28:12,450 --> 00:28:20,700
my my native platform and run everything

00:28:16,169 --> 00:28:22,440
in 3d using qml so let's take a look at

00:28:20,700 --> 00:28:25,590
that language I know that didn't load up

00:28:22,440 --> 00:28:27,840
but come by and see me if you want to

00:28:25,590 --> 00:28:30,030
see it a little bit more about 3d but

00:28:27,840 --> 00:28:32,429
this is similar to what we had with the

00:28:30,030 --> 00:28:35,700
2d map instead of a map view we have a

00:28:32,429 --> 00:28:38,669
scene view with a scene same thing the

00:28:35,700 --> 00:28:41,760
basemap imagery with labels was the base

00:28:38,669 --> 00:28:44,190
map we were using we also have in here a

00:28:41,760 --> 00:28:47,669
surface so this is an elevation source

00:28:44,190 --> 00:28:51,450
and this is how we get elevation to our

00:28:47,669 --> 00:28:54,390
3d so we're just hitting our ArcGIS

00:28:51,450 --> 00:28:57,120
backend services to give us elevation

00:28:54,390 --> 00:28:59,190
and then we have this scene layer and

00:28:57,120 --> 00:29:01,830
this is that scene layer of San

00:28:59,190 --> 00:29:04,799
Francisco that we had and we wait for it

00:29:01,830 --> 00:29:06,900
to be loaded before we set the viewpoint

00:29:04,799 --> 00:29:09,150
to be its extent so that's where we got

00:29:06,900 --> 00:29:12,059
the effect where it it loaded up and

00:29:09,150 --> 00:29:13,740
then it zoomed into San Francisco but

00:29:12,059 --> 00:29:16,650
this is all basically just using

00:29:13,740 --> 00:29:21,059
javascript and and you know cute quick

00:29:16,650 --> 00:29:22,890
UML language syntax so this is really

00:29:21,059 --> 00:29:24,820
attractive for our developers to be able

00:29:22,890 --> 00:29:28,310
to write these apps

00:29:24,820 --> 00:29:30,020
just knowing qml and there they become

00:29:28,310 --> 00:29:32,360
you'll be surprised the JavaScript

00:29:30,020 --> 00:29:34,250
developers that come from the web they

00:29:32,360 --> 00:29:36,200
can get up and running with this

00:29:34,250 --> 00:29:38,990
language very very quickly it's it's

00:29:36,200 --> 00:29:40,330
it's been really nice for us to be able

00:29:38,990 --> 00:29:45,440
to have them get up and running with

00:29:40,330 --> 00:29:48,920
superfast so back to the slides just a

00:29:45,440 --> 00:29:50,600
little bit about how some other things

00:29:48,920 --> 00:29:54,980
we'd had to do to be able to support

00:29:50,600 --> 00:30:00,140
what we're doing with our qml API we're

00:29:54,980 --> 00:30:01,340
missing just simple file i/o in qml you

00:30:00,140 --> 00:30:03,500
might be able to get some third-party

00:30:01,340 --> 00:30:05,390
javascript stuff that does it or you

00:30:03,500 --> 00:30:07,580
might be able to work that in but we

00:30:05,390 --> 00:30:10,880
want something that's written in qml so

00:30:07,580 --> 00:30:13,550
they can they can declare a file info

00:30:10,880 --> 00:30:16,190
type and be able to you know copy it

00:30:13,550 --> 00:30:18,710
around or detect if it exists and things

00:30:16,190 --> 00:30:20,690
like that because we're a native API we

00:30:18,710 --> 00:30:22,910
have support for offline everything that

00:30:20,690 --> 00:30:25,130
you just saw will have support to be

00:30:22,910 --> 00:30:28,580
able to run that all offline we can't

00:30:25,130 --> 00:30:30,500
rely on the web all the time same with

00:30:28,580 --> 00:30:32,750
you know net different network API is

00:30:30,500 --> 00:30:35,300
something we've worked on being able to

00:30:32,750 --> 00:30:37,340
you know download these files put them

00:30:35,300 --> 00:30:41,150
to disk on the device so that we can

00:30:37,340 --> 00:30:44,060
access them from the API and we want to

00:30:41,150 --> 00:30:46,340
expose more of these api's from the you

00:30:44,060 --> 00:30:49,640
know your standard cute C++ types and

00:30:46,340 --> 00:30:51,770
and up to qml so that our JavaScript

00:30:49,640 --> 00:30:55,460
community can take advantage of those

00:30:51,770 --> 00:30:59,360
and then we plan on contributing things

00:30:55,460 --> 00:31:01,580
these back to cute if you know if

00:30:59,360 --> 00:31:06,700
necessary if they get if they get

00:31:01,580 --> 00:31:09,080
accepted and that's yeah another story

00:31:06,700 --> 00:31:12,020
that's a little washed out but this is

00:31:09,080 --> 00:31:15,200
just an example of you know our qml file

00:31:12,020 --> 00:31:17,180
info class so you just you declare this

00:31:15,200 --> 00:31:18,920
and register it with qml give it a

00:31:17,180 --> 00:31:22,130
couple properties where you know you

00:31:18,920 --> 00:31:25,490
have the the path specified to the file

00:31:22,130 --> 00:31:27,890
be able to detect if it exists and then

00:31:25,490 --> 00:31:30,200
down at the bottom is just an example of

00:31:27,890 --> 00:31:33,200
how you declare one of these file info

00:31:30,200 --> 00:31:36,200
types to a certain path here I have a

00:31:33,200 --> 00:31:38,490
file geodatabase this is a this is a

00:31:36,200 --> 00:31:41,730
date a sequel aight geo database for

00:31:38,490 --> 00:31:45,000
at that we accept in our API with the

00:31:41,730 --> 00:31:47,340
ArcGIS platform and you can just work

00:31:45,000 --> 00:31:51,960
with you know file i/o operations just

00:31:47,340 --> 00:31:54,360
directly in qml so in summary we want to

00:31:51,960 --> 00:31:56,780
attract a large developer audience from

00:31:54,360 --> 00:32:01,620
the web community and that is happening

00:31:56,780 --> 00:32:05,580
and we're very pleased by that we cannot

00:32:01,620 --> 00:32:08,040
have any C++ required as you all

00:32:05,580 --> 00:32:09,540
probably know because you are cute

00:32:08,040 --> 00:32:12,059
developers that at least there's a

00:32:09,540 --> 00:32:14,280
little bit of C++ there needed to launch

00:32:12,059 --> 00:32:17,550
the application well we just ship a

00:32:14,280 --> 00:32:19,530
template with with our SDK to that has

00:32:17,550 --> 00:32:21,480
that already ready to go for them so

00:32:19,530 --> 00:32:23,070
they don't have to write that they

00:32:21,480 --> 00:32:25,470
should never even have to look at that

00:32:23,070 --> 00:32:30,059
they just need to get up and run in with

00:32:25,470 --> 00:32:31,860
their main qml and go from there it's

00:32:30,059 --> 00:32:33,600
very important for us to handle a

00:32:31,860 --> 00:32:35,880
synchronous processing on our back end

00:32:33,600 --> 00:32:39,270
so we produce the API and we write it

00:32:35,880 --> 00:32:42,809
all in C++ expose it up run the

00:32:39,270 --> 00:32:45,360
synchronous operations in C++ code and

00:32:42,809 --> 00:32:49,590
then notify when those are done back to

00:32:45,360 --> 00:32:51,540
the qml API when they're done so we can

00:32:49,590 --> 00:32:53,850
do all the heavy lifting there shouldn't

00:32:51,540 --> 00:32:56,580
be a lot of business logic that's being

00:32:53,850 --> 00:32:57,929
written in JavaScript against our API we

00:32:56,580 --> 00:33:00,750
want to handle as much of that as

00:32:57,929 --> 00:33:03,840
possible out of the box models to plug

00:33:00,750 --> 00:33:07,710
right into ListView you know qml list

00:33:03,840 --> 00:33:10,530
views path views whatever it may be so

00:33:07,710 --> 00:33:12,570
they can just work directly with with

00:33:10,530 --> 00:33:17,010
some of our data types that we expose

00:33:12,570 --> 00:33:18,750
right out of the qml API if you want to

00:33:17,010 --> 00:33:21,030
get a little bit more info will have the

00:33:18,750 --> 00:33:25,290
programming in the geographic context

00:33:21,030 --> 00:33:27,480
session tomorrow from 145 to 245 in the

00:33:25,290 --> 00:33:29,790
afternoon we'll go a little bit more

00:33:27,480 --> 00:33:33,480
into our SDK well even we'll touch on

00:33:29,790 --> 00:33:36,179
more of our C++ API as well in there and

00:33:33,480 --> 00:33:38,280
then here's some information about a

00:33:36,179 --> 00:33:41,900
little bit more information our website

00:33:38,280 --> 00:33:46,100
developers are just calm / cute and

00:33:41,900 --> 00:33:46,100
that's it for me thank you

00:34:00,259 --> 00:34:14,579
we have one more don't leave yes it's me

00:34:09,299 --> 00:34:18,510
oh but but I said we have only only 11

00:34:14,579 --> 00:34:22,770
more and you don't come up sure but I

00:34:18,510 --> 00:34:25,319
think there's someone after me ok last

00:34:22,770 --> 00:34:30,179
race NSYNC you mad profiler should be

00:34:25,319 --> 00:34:34,079
here right 78 but I don't see it in the

00:34:30,179 --> 00:34:37,379
list I have the vilest don't know why

00:34:34,079 --> 00:34:46,609
you don't see it I think also us on a

00:34:37,379 --> 00:35:03,480
sheet of paper but front is it up yeah

00:34:46,609 --> 00:35:07,049
that's mine ok now we have the talk

00:35:03,480 --> 00:35:10,460
about end users and qml enrollee stream

00:35:07,049 --> 00:35:10,460
I don't know

00:35:34,789 --> 00:35:42,690
okay hi everyone I'm gonna get an egg

00:35:39,779 --> 00:35:52,440
and I'm the lead developer a project

00:35:42,690 --> 00:35:55,349
called release team I don't know or you

00:35:52,440 --> 00:35:58,799
see it your tablet of software to play

00:35:55,349 --> 00:36:03,539
role playing games return in C++ with

00:35:58,799 --> 00:36:05,220
cute under GPL GPL to its referred to

00:36:03,539 --> 00:36:11,819
player from around the world play

00:36:05,220 --> 00:36:16,319
together for the network obviously as

00:36:11,819 --> 00:36:17,700
you may know as you may not to play a

00:36:16,319 --> 00:36:23,760
role playing games you need character

00:36:17,700 --> 00:36:26,369
sheets it's a and we say manager

00:36:23,760 --> 00:36:30,240
managing them it's a little bit a little

00:36:26,369 --> 00:36:31,829
bit difficult firstly because the

00:36:30,240 --> 00:36:34,619
character sheet is gathering on data

00:36:31,829 --> 00:36:36,450
about a character and was that I needs

00:36:34,619 --> 00:36:39,569
to be accessible died of a part of the

00:36:36,450 --> 00:36:43,529
software such as a dice roller for

00:36:39,569 --> 00:36:47,880
example so only each game at its own

00:36:43,529 --> 00:36:54,930
character sheets which requires a high

00:36:47,880 --> 00:36:59,660
level of extra musician and 22 feet

00:36:54,930 --> 00:37:03,599
business there is I think to solution

00:36:59,660 --> 00:37:07,440
first as many of my competitors they

00:37:03,599 --> 00:37:12,210
choose HTML and I don't want to go that

00:37:07,440 --> 00:37:18,680
way because it's to eat and as a whole

00:37:12,210 --> 00:37:18,680
scheme is a cute application Zenon the

00:37:19,819 --> 00:37:31,730
sorry the inspected solution for me was

00:37:27,119 --> 00:37:34,380
a qml I mean it's a great challenge and

00:37:31,730 --> 00:37:36,680
also it's a better way to improve my

00:37:34,380 --> 00:37:40,520
skill in qml

00:37:36,680 --> 00:37:43,790
so let's go with qml but one problem is

00:37:40,520 --> 00:37:47,300
that end users are not qml developers

00:37:43,790 --> 00:37:51,880
and I need volumes users to be able to

00:37:47,300 --> 00:37:51,880
create a character sheets for our games

00:37:52,180 --> 00:37:58,670
so the main challenge become to provide

00:37:56,000 --> 00:38:04,300
an easy way to create character sheets

00:37:58,670 --> 00:38:04,300
and to initiate them on a camel padding

00:38:05,050 --> 00:38:12,440
to do so I create a whole steam

00:38:10,069 --> 00:38:19,220
character sheet editor or just Lee's

00:38:12,440 --> 00:38:22,099
name explain what it does so the first

00:38:19,220 --> 00:38:25,339
features with software is to design the

00:38:22,099 --> 00:38:28,309
user interface basically you drop a

00:38:25,339 --> 00:38:33,020
character sheet background and put field

00:38:28,309 --> 00:38:36,619
at the right place of course field can

00:38:33,020 --> 00:38:39,650
be a few properties can be amend such as

00:38:36,619 --> 00:38:48,740
positioning background color found so on

00:38:39,650 --> 00:38:52,490
and so on then when one set you keep the

00:38:48,740 --> 00:39:01,150
editor can generate the KML code and you

00:38:52,490 --> 00:39:03,440
can enviable to to see the result it's a

00:39:01,150 --> 00:39:06,140
display exactly Atlee will be in Valley

00:39:03,440 --> 00:39:17,839
steam because both software shall same

00:39:06,140 --> 00:39:23,990
code and and also and also the criminal

00:39:17,839 --> 00:39:28,280
code is also displayed it's a it's

00:39:23,990 --> 00:39:34,099
offering a good opportunity to study the

00:39:28,280 --> 00:39:39,200
camel code as I as you can see an some

00:39:34,099 --> 00:39:42,200
field are christum qml items but I

00:39:39,200 --> 00:39:43,390
designed to update data from from my

00:39:42,200 --> 00:39:50,130
model and

00:39:43,390 --> 00:39:50,130
dibby dibby dibby predicted by my model

00:39:54,809 --> 00:40:01,690
okay then when the user are confident

00:39:58,630 --> 00:40:04,450
another can edit the criminal code to

00:40:01,690 --> 00:40:09,309
add some features just like animation

00:40:04,450 --> 00:40:11,980
transition or even behavior if I want if

00:40:09,309 --> 00:40:15,430
they want they can also connect the

00:40:11,980 --> 00:40:18,640
guide a sheet to postgresql database if

00:40:15,430 --> 00:40:22,299
you want I don't know anything possible

00:40:18,640 --> 00:40:28,029
with a KML as the language is become

00:40:22,299 --> 00:40:31,180
bigger and bigger so when all this step

00:40:28,029 --> 00:40:33,250
all done the last one is to lay with it

00:40:31,180 --> 00:40:37,329
so you have to load the character sheet

00:40:33,250 --> 00:40:42,549
into raleigh steam and and let's go so I

00:40:37,329 --> 00:40:46,750
have a little video for you first I will

00:40:42,549 --> 00:40:53,519
start valley stream as a game master

00:40:46,750 --> 00:41:01,480
kind of super user then I start another

00:40:53,519 --> 00:41:04,660
one is new instance as a player I did

00:41:01,480 --> 00:41:10,660
this video yesterday so it's a little

00:41:04,660 --> 00:41:14,859
bit longer then the game master load a

00:41:10,660 --> 00:41:19,000
character sheets database and share one

00:41:14,859 --> 00:41:22,920
character to the player and the player

00:41:19,000 --> 00:41:22,920
gets its character sheet

00:41:28,760 --> 00:41:37,560
and you will see that the player try to

00:41:32,100 --> 00:41:41,820
edit the devel value and and the gem

00:41:37,560 --> 00:41:46,110
gets the edited value of course in I

00:41:41,820 --> 00:41:49,920
will implement permission management to

00:41:46,110 --> 00:41:53,520
prevent chitters and I think it's all

00:41:49,920 --> 00:41:58,410
for me I hope you enjoyed the

00:41:53,520 --> 00:42:00,240
presentation this link can help you if

00:41:58,410 --> 00:42:07,640
you want more details about for the

00:42:00,240 --> 00:42:07,640
scheme and thanks my attention

00:42:15,529 --> 00:42:23,119
okay by the way the presentation was

00:42:17,940 --> 00:42:27,650
also a camel application and you can

00:42:23,119 --> 00:42:32,839
it's free also you can get it on my ETA

00:42:27,650 --> 00:42:32,839
account so next

00:43:18,940 --> 00:44:06,529
and low great this is work nope yeah no

00:43:43,190 --> 00:44:09,130
that's not the intended effect now we

00:44:06,529 --> 00:44:09,130
work before

00:44:43,670 --> 00:44:52,849
okay whatever let's try that this any of

00:44:49,320 --> 00:44:52,849
you know this is where

00:45:17,780 --> 00:45:30,240
well now you can see something that I

00:45:20,190 --> 00:45:32,099
can okay we could try it like this okay

00:45:30,240 --> 00:45:36,330
I'm or famine I've been working on the

00:45:32,099 --> 00:45:39,090
queue my profile since 2013 basically if

00:45:36,330 --> 00:45:43,050
any of you are used to kill my profile a

00:45:39,090 --> 00:45:50,520
it Oh quite a few people now maybe you

00:45:43,050 --> 00:45:52,260
know the effect basically you profile

00:45:50,520 --> 00:45:55,680
and application it generates a lot of

00:45:52,260 --> 00:45:57,720
data and it takes forever to load the

00:45:55,680 --> 00:45:59,460
data it's loading and loading and

00:45:57,720 --> 00:46:02,609
loading and loading and eventually it

00:45:59,460 --> 00:46:04,710
runs out of memory and crashes we don't

00:46:02,609 --> 00:46:07,349
have that much time here so i am going

00:46:04,710 --> 00:46:11,880
to do that exercise right now if I can

00:46:07,349 --> 00:46:14,520
do that actually bluntly yes it's like a

00:46:11,880 --> 00:46:16,849
cat see it's like I can so that's a

00:46:14,520 --> 00:46:19,220
pretty big trace it's like one gigabyte

00:46:16,849 --> 00:46:25,609
and i'm going to start the Lord know

00:46:19,220 --> 00:46:25,609
what I'm talking so what is the problem

00:46:26,690 --> 00:46:31,619
basically you have an application that

00:46:29,030 --> 00:46:34,109
performs badly why is it performing

00:46:31,619 --> 00:46:37,109
badly because it does a lot of things it

00:46:34,109 --> 00:46:39,510
runs about JavaScript functions it

00:46:37,109 --> 00:46:42,780
executes a lot of bindings sets a lot of

00:46:39,510 --> 00:46:45,930
signals around all that stuff that make

00:46:42,780 --> 00:46:47,930
it generate a lot of trace data and that

00:46:45,930 --> 00:46:50,220
trace data has to be stored somewhere

00:46:47,930 --> 00:46:52,950
first in the application where it's

00:46:50,220 --> 00:46:55,380
recorded then it has to be sent over the

00:46:52,950 --> 00:46:57,599
network or over a local socket too cute

00:46:55,380 --> 00:46:59,430
creator man has to be stored again and

00:46:57,599 --> 00:47:02,280
then it has to be uploaded to newark

00:46:59,430 --> 00:47:05,670
transformed form to the graphics card

00:47:02,280 --> 00:47:07,710
and somewhere in the process well that's

00:47:05,670 --> 00:47:12,510
can be pretty heavy on your on your

00:47:07,710 --> 00:47:14,130
memory however obviously those

00:47:12,510 --> 00:47:15,990
applications are the most interesting

00:47:14,130 --> 00:47:18,930
ones profile you actually want to know

00:47:15,990 --> 00:47:21,270
what's going on and there are two ways

00:47:18,930 --> 00:47:24,780
to tackle this first I've done some

00:47:21,270 --> 00:47:25,400
things in queue creator 4.1 and in cute

00:47:24,780 --> 00:47:28,880
00:47:25,400 --> 00:47:31,040
to reduce the memory footprint of those

00:47:28,880 --> 00:47:37,250
things and we're going to see that in a

00:47:31,040 --> 00:47:38,900
minute basically it uses smaller data

00:47:37,250 --> 00:47:40,520
structures for everything it doesn't

00:47:38,900 --> 00:47:46,010
duplicate the file names and the

00:47:40,520 --> 00:47:49,190
function names and so on but only the

00:47:46,010 --> 00:47:52,430
sense of time stamps and they and ID's

00:47:49,190 --> 00:47:54,740
for the functions and stuff like that it

00:47:52,430 --> 00:47:56,960
compresses the timeline when uploading

00:47:54,740 --> 00:48:00,830
to the GPU so if there are too many

00:47:56,960 --> 00:48:03,950
events so they wouldn't fit in the GPU

00:48:00,830 --> 00:48:07,070
memory it basically compresses multiple

00:48:03,950 --> 00:48:12,890
of them into one geometry block that's

00:48:07,070 --> 00:48:16,730
uploaded so let's save some space it

00:48:12,890 --> 00:48:18,890
uses temporary files now to store the

00:48:16,730 --> 00:48:22,610
actual trace data so it doesn't all kept

00:48:18,890 --> 00:48:24,170
the memory in queue creator and you get

00:48:22,610 --> 00:48:25,850
a new data format that's ten times

00:48:24,170 --> 00:48:30,160
smaller because it's binary rather than

00:48:25,850 --> 00:48:34,250
XML so let's see what it's done

00:48:30,160 --> 00:48:36,530
apparently the computers the roddick so

00:48:34,250 --> 00:48:40,070
it has crashed i hope so this is the

00:48:36,530 --> 00:48:42,140
trace it has loaded you can technically

00:48:40,070 --> 00:48:44,900
interact with that but it's kind of

00:48:42,140 --> 00:48:50,120
unpaid this is cute create a four point

00:48:44,900 --> 00:48:52,070
oh so this is before my changes that's

00:48:50,120 --> 00:48:53,450
why it's wet i also have a green one

00:48:52,070 --> 00:48:58,640
that you'll see in a minute that will be

00:48:53,450 --> 00:49:05,330
cute greater 4.1 and we should be able

00:48:58,640 --> 00:49:07,790
to check how much memory it took let's

00:49:05,330 --> 00:49:14,390
make that a big bigger so that I could

00:49:07,790 --> 00:49:17,360
actually see it and let's see how much

00:49:14,390 --> 00:49:21,440
memory cute Creator is actually using at

00:49:17,360 --> 00:49:25,130
the moment so you see those two cue

00:49:21,440 --> 00:49:27,830
creators here in the process list no one

00:49:25,130 --> 00:49:32,000
is four point oh that's apparently

00:49:27,830 --> 00:49:36,310
number 2 for 3 to 4 to 3 and the other

00:49:32,000 --> 00:49:36,310
one is 4.1 we haven't used that wet um

00:49:37,200 --> 00:49:59,319
24 23 huh just now that thing uses about

00:49:54,880 --> 00:50:02,940
10 gigabytes of virtual memory and 8.5

00:49:59,319 --> 00:50:05,890
gigabytes roundabouts are actually

00:50:02,940 --> 00:50:08,559
memory allocated hardware memory

00:50:05,890 --> 00:50:10,960
allocated to that process so that's

00:50:08,559 --> 00:50:14,380
quite heavy i have not got a lot the

00:50:10,960 --> 00:50:21,819
other trace in parallel to that so let's

00:50:14,380 --> 00:50:23,859
close that quickly here but this is to

00:50:21,819 --> 00:50:27,329
create a 4.1 and we are going to do the

00:50:23,859 --> 00:50:34,630
same experiment with this one right

00:50:27,329 --> 00:50:38,020
let's see if i can still do it so with q

00:50:34,630 --> 00:50:41,559
create a 4.1 you know see there's also a

00:50:38,020 --> 00:50:43,829
separate option here I promise you this

00:50:41,559 --> 00:50:47,589
is the same data you could write at home

00:50:43,829 --> 00:50:51,309
and it's a ten times smaller because its

00:50:47,589 --> 00:50:53,650
data a binary data format rather than

00:50:51,309 --> 00:51:00,430
the XML data format and I'm going to

00:50:53,650 --> 00:51:03,609
load that now meanwhile i can tell you

00:51:00,430 --> 00:51:10,450
what you can do to reduce the memory

00:51:03,609 --> 00:51:11,500
footprint of your qml trace first you

00:51:10,450 --> 00:51:15,400
should only record what you're

00:51:11,500 --> 00:51:18,789
interested in I can tell you the most

00:51:15,400 --> 00:51:22,630
expensive thing to record our memory

00:51:18,789 --> 00:51:25,270
usage events qml allocates a lot of

00:51:22,630 --> 00:51:27,849
memory and each and every memory

00:51:25,270 --> 00:51:31,329
allocation is recorded exempt too cute

00:51:27,849 --> 00:51:35,369
creator if you record them if you're not

00:51:31,329 --> 00:51:40,450
interested in that better switch it off

00:51:35,369 --> 00:51:43,210
second every binding and every signal

00:51:40,450 --> 00:51:48,559
handler is also a javascript function

00:51:43,210 --> 00:51:51,199
call so if you are not interested in the

00:51:48,559 --> 00:51:53,779
endings and signal handlers as bindings

00:51:51,199 --> 00:51:55,160
and signal handlers especially you can

00:51:53,779 --> 00:51:57,319
switch that off and just look at the

00:51:55,160 --> 00:52:00,380
JavaScript function course and you will

00:51:57,319 --> 00:52:02,779
see all the stuff too you don't see

00:52:00,380 --> 00:52:06,499
binding loops and you don't necessarily

00:52:02,779 --> 00:52:09,349
see how which signals trigger the

00:52:06,499 --> 00:52:15,609
modulus crib functions but usually you

00:52:09,349 --> 00:52:20,449
see the same thing then since cute 56

00:52:15,609 --> 00:52:25,130
cute can actually periodically flash the

00:52:20,449 --> 00:52:29,109
trace cache so you can specify in queue

00:52:25,130 --> 00:52:34,430
creator I show that in a minute that's

00:52:29,109 --> 00:52:37,009
it should instruct qml to send the trace

00:52:34,430 --> 00:52:40,309
data every substance that's milliseconds

00:52:37,009 --> 00:52:43,489
and clear the cache to make room for new

00:52:40,309 --> 00:52:47,329
trace data that should prevent the

00:52:43,489 --> 00:52:49,009
application to run out of memory however

00:52:47,329 --> 00:52:50,959
that has a cost of course sending the

00:52:49,009 --> 00:52:53,959
trace data takes on time it might

00:52:50,959 --> 00:52:57,709
distort your profile you have to do your

00:52:53,959 --> 00:53:03,140
own experiments with that and finally

00:52:57,709 --> 00:53:07,009
can use binary trace data file format to

00:53:03,140 --> 00:53:12,709
get ten times smaller traces so let's

00:53:07,009 --> 00:53:15,229
see this one has loaded the trace it's

00:53:12,709 --> 00:53:21,259
somewhat faster and somewhat easier to

00:53:15,229 --> 00:53:25,269
use than the other one and let's hope it

00:53:21,259 --> 00:53:38,779
also takes less space so this is some

00:53:25,269 --> 00:53:44,769
2437 huh okay yeah this one our takes

00:53:38,779 --> 00:53:48,499
about 4 gigabytes of virtual memory and

00:53:44,769 --> 00:53:52,519
only about two point three gigabytes are

00:53:48,499 --> 00:53:54,859
actually hardware memory allocated to

00:53:52,519 --> 00:53:57,829
that process so that's our reduction of

00:53:54,859 --> 00:54:01,459
like more than sixty percent something

00:53:57,829 --> 00:54:01,829
like that just between cute waiter for

00:54:01,459 --> 00:54:04,229
point

00:54:01,829 --> 00:54:08,400
thank you create a 4.1 for the same

00:54:04,229 --> 00:54:11,369
trace and i'll show you the respective

00:54:08,400 --> 00:54:14,489
options here so if you want to limit

00:54:11,369 --> 00:54:17,999
what the thing is going to record before

00:54:14,489 --> 00:54:20,849
recording you can switch stuff off in

00:54:17,999 --> 00:54:23,099
this menu here so if i see that right

00:54:20,849 --> 00:54:25,950
does this memory usage and now it's off

00:54:23,099 --> 00:54:29,640
and you won't get this memory you to

00:54:25,950 --> 00:54:31,619
users category then mine that the

00:54:29,640 --> 00:54:33,269
recording button is something else in

00:54:31,619 --> 00:54:35,819
the filter button the further button is

00:54:33,269 --> 00:54:38,069
superior I think you can like filter out

00:54:35,819 --> 00:54:42,690
memory usage and then display it again

00:54:38,069 --> 00:54:45,299
but that doesn't make it disappear the

00:54:42,690 --> 00:54:51,869
flush interval is either in the global

00:54:45,299 --> 00:54:55,410
settings or in the project specific run

00:54:51,869 --> 00:54:58,200
settings and it's this basically you'll

00:54:55,410 --> 00:55:00,869
switch it on you set some interval this

00:54:58,200 --> 00:55:14,719
is one second instead of 25 seconds or

00:55:00,869 --> 00:55:19,940
whatever and there you go okay yeah okay

00:55:14,719 --> 00:55:19,940
thank you and

00:55:22,570 --> 00:55:31,150
we have a party for everyone at

00:55:26,190 --> 00:55:35,400
six-thirty with free beer you can go

00:55:31,150 --> 00:55:35,400

YouTube URL: https://www.youtube.com/watch?v=30PT-gauy0w


