Title: Marta RybczyÅ„ska - What is My Application Really Doing? - QtCon Akademy 2016
Publication date: 2016-09-04
Playlist: QtCon Akademy 2016
Description: 
	Debugging and testing takes much of the development time. There are many tools that help in the process, but you need to know of their existrance and how to use them efficiently. In this presentation I will do an overview of the powerful tools of wireshark, strace, perf and systemtap. Then I will introduce Project Flashlight, an initiative to aggregate results of different debugging and profiling tools and then allow to look for specific events, compare between different program exections and more. All that without getting into pages and pages of log files. In the process we'll do a number of discoveries like: how many sockets does kcalc use? what changes if you run it on a different system?

mrybczyn
Captions: 
	00:00:04,400 --> 00:00:09,990
thank you everyone I hope that everyone

00:00:07,470 --> 00:00:16,980
is able to hear me even people at the

00:00:09,990 --> 00:00:20,029
end great we do have quite many

00:00:16,980 --> 00:00:24,449
applications we are using every day I

00:00:20,029 --> 00:00:26,460
would say that I usually use about 50

00:00:24,449 --> 00:00:32,130
including the ones that are on the phone

00:00:26,460 --> 00:00:35,370
that we always be quite often forget but

00:00:32,130 --> 00:00:38,219
the question is do you really know what

00:00:35,370 --> 00:00:40,890
they are doing what the applications you

00:00:38,219 --> 00:00:43,680
have installed on audiomachine linked

00:00:40,890 --> 00:00:46,379
with hundreds of libraries maybe not

00:00:43,680 --> 00:00:48,300
hundreds but turned everything with a

00:00:46,379 --> 00:00:51,390
program that would i would say it's

00:00:48,300 --> 00:00:54,260
pretty normal do you really know what

00:00:51,390 --> 00:00:59,609
happens when you run your application i

00:00:54,260 --> 00:01:02,100
would say from my experience John with

00:00:59,609 --> 00:01:06,540
the research and development for this

00:01:02,100 --> 00:01:13,020
project that no I would say that you

00:01:06,540 --> 00:01:15,530
don't know but why would you like to

00:01:13,020 --> 00:01:19,049
know what the application is doing I

00:01:15,530 --> 00:01:25,020
will start from asking you a personal

00:01:19,049 --> 00:01:27,750
question how many of you happen to do

00:01:25,020 --> 00:01:32,070
the bagging at least once a week raise

00:01:27,750 --> 00:01:38,340
your hand okay quite many of you how

00:01:32,070 --> 00:01:40,590
many of you do like the bagging okay III

00:01:38,340 --> 00:01:45,380
was expected that there would be less of

00:01:40,590 --> 00:01:48,210
you but great but see I have fun of you

00:01:45,380 --> 00:01:50,939
but because personally I don't like the

00:01:48,210 --> 00:01:55,820
baggie I prefer to add new things to my

00:01:50,939 --> 00:01:59,189
programs junk than to debug them however

00:01:55,820 --> 00:02:02,700
the research shows us the data typical

00:01:59,189 --> 00:02:05,490
developer spends between fifty and

00:02:02,700 --> 00:02:08,369
seventy percent of the time debugging

00:02:05,490 --> 00:02:13,340
the application the debugging in fact

00:02:08,369 --> 00:02:16,280
what they understand is debugging itself

00:02:13,340 --> 00:02:18,230
writing test maintaining code all those

00:02:16,280 --> 00:02:20,900
kinds of activities I guess that with

00:02:18,230 --> 00:02:23,209
your experience with different projects

00:02:20,900 --> 00:02:26,239
you would say that it's mostly true if

00:02:23,209 --> 00:02:33,680
you really count count the hours you

00:02:26,239 --> 00:02:40,510
spend with your project what it means

00:02:33,680 --> 00:02:44,450
that if we try to find out a way to

00:02:40,510 --> 00:02:47,180
limit the time we spent on debugging we

00:02:44,450 --> 00:02:49,310
are going to gain a lot of time to add

00:02:47,180 --> 00:02:52,370
new functionalities to work on other

00:02:49,310 --> 00:02:54,709
things that just a bang and we have as

00:02:52,370 --> 00:03:01,910
its fifty percent of the time we have

00:02:54,709 --> 00:03:05,120
way match to gain that to make the

00:03:01,910 --> 00:03:06,950
things even more complicated I am

00:03:05,120 --> 00:03:08,690
concentrating myself or complicated

00:03:06,950 --> 00:03:11,680
program programs what i mean by

00:03:08,690 --> 00:03:14,690
complicated programs those that

00:03:11,680 --> 00:03:18,290
communicate either with other programs

00:03:14,690 --> 00:03:21,350
running on the same machine those that

00:03:18,290 --> 00:03:24,290
are talking by network that are

00:03:21,350 --> 00:03:29,660
communicating with devices beat in

00:03:24,290 --> 00:03:32,180
embedded in IOT on desktop i would say

00:03:29,660 --> 00:03:34,849
that most applications we write those

00:03:32,180 --> 00:03:38,269
days are those complicated applications

00:03:34,849 --> 00:03:40,880
and we do have interaction of this

00:03:38,269 --> 00:03:43,910
application with the external world and

00:03:40,880 --> 00:03:48,410
the external world is influencing the

00:03:43,910 --> 00:03:50,720
way our application behaves as it's not

00:03:48,410 --> 00:03:58,690
external world by the part of the world

00:03:50,720 --> 00:04:03,019
that we haven't written ourselves as I

00:03:58,690 --> 00:04:06,019
reminder from your classes on software

00:04:03,019 --> 00:04:09,940
quality what we can do to limit the

00:04:06,019 --> 00:04:15,410
bagging they said the process part so

00:04:09,940 --> 00:04:20,510
issue tracking code reviews testing but

00:04:15,410 --> 00:04:23,659
also the party of tools too so you daily

00:04:20,510 --> 00:04:26,539
use of the bugger the traces if you are

00:04:23,659 --> 00:04:26,960
little at the deeper benchmarks if you

00:04:26,539 --> 00:04:29,210
are into

00:04:26,960 --> 00:04:30,919
performance to find out how your

00:04:29,210 --> 00:04:34,190
application behaves with time and with

00:04:30,919 --> 00:04:43,460
your changes and he advanced us that you

00:04:34,190 --> 00:04:50,389
may use tools there are tools for

00:04:43,460 --> 00:04:52,690
different purposes and as as as an as an

00:04:50,389 --> 00:04:55,430
engineer we choose the right tool for

00:04:52,690 --> 00:04:57,979
the right task and i will give you a

00:04:55,430 --> 00:05:00,889
short of a review of the advanced tools

00:04:57,979 --> 00:05:04,930
you can use to debauch a complicated

00:05:00,889 --> 00:05:08,930
application first if i want to

00:05:04,930 --> 00:05:10,880
understand the network connection of my

00:05:08,930 --> 00:05:14,210
application what I use is where shark

00:05:10,880 --> 00:05:16,280
whale shark allows you to see all the

00:05:14,210 --> 00:05:20,389
network packets that are transmitted or

00:05:16,280 --> 00:05:23,240
received from your application the small

00:05:20,389 --> 00:05:25,099
difficulty maybe that to understand the

00:05:23,240 --> 00:05:27,430
results you have to understand the

00:05:25,099 --> 00:05:30,259
network protocols you have to have the

00:05:27,430 --> 00:05:33,710
basic understanding of how the protocols

00:05:30,259 --> 00:05:35,690
behave how the protocol should behave in

00:05:33,710 --> 00:05:41,930
the case of the application and what

00:05:35,690 --> 00:05:45,680
could go wrong so for for many protocols

00:05:41,930 --> 00:05:47,300
you can have you can find the analyzers

00:05:45,680 --> 00:05:49,370
that just dump the data that is being

00:05:47,300 --> 00:05:52,789
transferred but for some more

00:05:49,370 --> 00:05:58,130
complicated cases you will have to go a

00:05:52,789 --> 00:06:02,090
look into the the specification of the

00:05:58,130 --> 00:06:10,009
protocol all have the knowledge from

00:06:02,090 --> 00:06:13,009
other sources if you want to know how

00:06:10,009 --> 00:06:16,669
the application is interacting with the

00:06:13,009 --> 00:06:19,759
Linux kernel in this case what you can

00:06:16,669 --> 00:06:23,360
use is the stress program what it gives

00:06:19,759 --> 00:06:26,150
it gives you all the system calls that

00:06:23,360 --> 00:06:29,419
are being called with the arguments and

00:06:26,150 --> 00:06:32,150
with the results that is very detailed

00:06:29,419 --> 00:06:38,180
this is very detailed information very

00:06:32,150 --> 00:06:40,080
useful the disadvantage first builders

00:06:38,180 --> 00:06:42,750
ventral is the size of the

00:06:40,080 --> 00:06:45,840
out what you get even this is not a

00:06:42,750 --> 00:06:48,240
complete output of LS it just wouldn't

00:06:45,840 --> 00:06:52,289
fit on a slide even of a 10 slides it

00:06:48,240 --> 00:06:55,919
wouldn't fit and you also have to

00:06:52,289 --> 00:06:57,930
understand what is happening with all

00:06:55,919 --> 00:07:01,680
those Cisco's we have to understand what

00:06:57,930 --> 00:07:03,389
they do and why they are called in that

00:07:01,680 --> 00:07:07,860
way understand the parameter they are

00:07:03,389 --> 00:07:11,250
passed understood the returned values if

00:07:07,860 --> 00:07:13,500
you want to know what happens on the

00:07:11,250 --> 00:07:18,150
inside of your application you can use

00:07:13,500 --> 00:07:20,009
perv perv is even more if it's different

00:07:18,150 --> 00:07:24,180
kind of at all but very very powerful

00:07:20,009 --> 00:07:26,849
here you have a an example an example

00:07:24,180 --> 00:07:31,020
output of perv that is recording context

00:07:26,849 --> 00:07:34,349
switches fun application extremely

00:07:31,020 --> 00:07:38,789
useful in many cases I won't be talking

00:07:34,349 --> 00:07:41,400
much about the path because it values a

00:07:38,789 --> 00:07:44,370
separate presentation or maybe a several

00:07:41,400 --> 00:07:47,669
ones in fact this one later today I

00:07:44,370 --> 00:07:50,009
found out in the program so if you

00:07:47,669 --> 00:07:51,719
understood perf you can you can learn

00:07:50,009 --> 00:07:56,879
much about this and about the things

00:07:51,719 --> 00:07:59,219
that path can do for you however I am a

00:07:56,879 --> 00:08:01,199
colonel haka so I know this is cause I

00:07:59,219 --> 00:08:06,229
have networking background so I read the

00:08:01,199 --> 00:08:10,680
heck dams of the network protocols but

00:08:06,229 --> 00:08:14,759
not everyone does and it's not the most

00:08:10,680 --> 00:08:18,960
efficient way to debug a program so I

00:08:14,759 --> 00:08:23,029
started to think how to optimize my time

00:08:18,960 --> 00:08:27,900
and time of other people what we can do

00:08:23,029 --> 00:08:30,409
to use the super advanced tools that can

00:08:27,900 --> 00:08:33,479
give you great results they give you

00:08:30,409 --> 00:08:36,870
enormous amount of information about you

00:08:33,479 --> 00:08:40,560
tools but you have to be able to use

00:08:36,870 --> 00:08:47,670
them so what what we can do and I stir I

00:08:40,560 --> 00:08:51,890
started look into the problem and what I

00:08:47,670 --> 00:08:53,160
fallout that what we really need is a

00:08:51,890 --> 00:08:56,639
layer

00:08:53,160 --> 00:08:59,819
of tools and documentation that will

00:08:56,639 --> 00:09:02,730
take the output of the tools that

00:08:59,819 --> 00:09:05,190
already give us everything and we shall

00:09:02,730 --> 00:09:10,110
we extract and show you just the

00:09:05,190 --> 00:09:13,050
information you need there will be

00:09:10,110 --> 00:09:16,009
probably need of some tutorials on

00:09:13,050 --> 00:09:20,910
application or example applications and

00:09:16,009 --> 00:09:26,660
I I wanted to test if it if if that idea

00:09:20,910 --> 00:09:31,829
is going to work and I and I wrote an

00:09:26,660 --> 00:09:34,050
example first analysis application you

00:09:31,829 --> 00:09:37,589
have you can see two eggs the red one

00:09:34,050 --> 00:09:42,269
and the orange one they look more or

00:09:37,589 --> 00:09:45,449
less the same from the from the external

00:09:42,269 --> 00:09:50,459
just the color is different but you

00:09:45,449 --> 00:09:52,949
don't know what's inside what I'm going

00:09:50,459 --> 00:09:56,100
to tell you tell you hear what i wrote

00:09:52,949 --> 00:09:58,620
is an easy is an app that allows you to

00:09:56,100 --> 00:10:05,759
compare two executions of the same

00:09:58,620 --> 00:10:08,610
program so what can it compare it

00:10:05,759 --> 00:10:11,100
compared accesses to two files the

00:10:08,610 --> 00:10:14,160
network the communication with all other

00:10:11,100 --> 00:10:17,009
services and any other systems call what

00:10:14,160 --> 00:10:21,810
I'm using is the stress the stress

00:10:17,009 --> 00:10:24,810
displays output now why would you do

00:10:21,810 --> 00:10:28,380
want to do that well there are quite

00:10:24,810 --> 00:10:30,750
many reasons you can have an execute you

00:10:28,380 --> 00:10:32,339
can have a non condition when the

00:10:30,750 --> 00:10:33,660
application is behaving correctly and

00:10:32,339 --> 00:10:36,120
non condition when the applications

00:10:33,660 --> 00:10:37,829
behaves in correctly you can have

00:10:36,120 --> 00:10:40,410
different version software installed

00:10:37,829 --> 00:10:42,779
machine that's the reason you may have

00:10:40,410 --> 00:10:46,079
made an upgrade of your system and then

00:10:42,779 --> 00:10:48,480
the application doesn't work anymore you

00:10:46,079 --> 00:10:50,670
have different machines you may want to

00:10:48,480 --> 00:10:52,259
see for performance reasons if you

00:10:50,670 --> 00:10:54,300
change something in the system what

00:10:52,259 --> 00:10:57,629
happens with the application why it

00:10:54,300 --> 00:11:01,319
behaves it something and for follow for

00:10:57,629 --> 00:11:03,689
debugging you dare change it behaves

00:11:01,319 --> 00:11:06,329
differently you want to find out how

00:11:03,689 --> 00:11:10,230
it's interacting with with rivets work

00:11:06,329 --> 00:11:13,980
and finally for security reasons if you

00:11:10,230 --> 00:11:16,739
do have a golden copy of the execution

00:11:13,980 --> 00:11:18,929
trace you may be able to see if there

00:11:16,739 --> 00:11:21,959
has been some malwa instead inside

00:11:18,929 --> 00:11:25,259
inside the verification if the the

00:11:21,959 --> 00:11:35,999
behavior hasn't changed drink in the

00:11:25,259 --> 00:11:40,439
time now I will show you the the user

00:11:35,999 --> 00:11:47,069
interface of a program that you should

00:11:40,439 --> 00:11:49,949
know oh well you the key calc you

00:11:47,069 --> 00:11:56,069
probably have seen on a set up a similar

00:11:49,949 --> 00:12:00,389
program what I did Anna is I started to

00:11:56,069 --> 00:12:04,799
trace what k calc is doing and what we

00:12:00,389 --> 00:12:10,489
do have with two different execution of

00:12:04,799 --> 00:12:13,860
it is that we have a bunch of

00:12:10,489 --> 00:12:17,100
directories it's using the library the

00:12:13,860 --> 00:12:19,439
system cute and KD libraries nothing

00:12:17,100 --> 00:12:24,119
extraordinary we would probably expect

00:12:19,439 --> 00:12:31,649
that it's using it it is opening quite

00:12:24,119 --> 00:12:33,509
many things in TMP and inverter but I

00:12:31,649 --> 00:12:35,459
found out that there is a difference I

00:12:33,509 --> 00:12:38,129
shall I am showing read the difference

00:12:35,459 --> 00:12:40,860
between two executions that one of the

00:12:38,129 --> 00:12:44,189
collection was using the view random and

00:12:40,860 --> 00:12:47,339
the other wasn't that was happening when

00:12:44,189 --> 00:12:50,429
I opened the setting setting window that

00:12:47,339 --> 00:12:53,579
is for some reason by some low-level

00:12:50,429 --> 00:12:58,860
libraries initializing the random number

00:12:53,579 --> 00:13:05,819
generator I wasn't expecting to see that

00:12:58,860 --> 00:13:08,610
in the program but it does it does it we

00:13:05,819 --> 00:13:12,509
have you can see how many configuration

00:13:08,610 --> 00:13:15,059
font files the day cutie is using at

00:13:12,509 --> 00:13:19,139
initialization that was also pretty

00:13:15,059 --> 00:13:20,010
pretty interesting to see I have also

00:13:19,139 --> 00:13:22,230
another trace

00:13:20,010 --> 00:13:24,510
with two different different machines

00:13:22,230 --> 00:13:27,180
when you have a very big difference

00:13:24,510 --> 00:13:30,360
between the two so it was pretty fun to

00:13:27,180 --> 00:13:45,420
just to see what it happens in that

00:13:30,360 --> 00:13:47,970
small application whatever that because

00:13:45,420 --> 00:13:55,170
I've learned a lot by writing this

00:13:47,970 --> 00:13:58,320
program I've seen that there is enormous

00:13:55,170 --> 00:14:01,560
number of accesses to different system

00:13:58,320 --> 00:14:04,850
services from the libraries and for some

00:14:01,560 --> 00:14:08,670
it I wanted to understand why the other

00:14:04,850 --> 00:14:10,890
what do they mean and it took a little a

00:14:08,670 --> 00:14:13,380
little digging around the around the

00:14:10,890 --> 00:14:15,450
place to find out what it is somewhat

00:14:13,380 --> 00:14:20,810
unexpected from the from the first

00:14:15,450 --> 00:14:23,520
besides somewhere quite quite natural

00:14:20,810 --> 00:14:29,160
another interesting thing for me was

00:14:23,520 --> 00:14:31,470
that I wasn't aware that very advanced

00:14:29,160 --> 00:14:33,870
and new system costs in Linux added in

00:14:31,470 --> 00:14:37,980
the last year they really used by real

00:14:33,870 --> 00:14:42,800
applications I knew that those Cisco's

00:14:37,980 --> 00:14:45,780
exist they have been added recently and

00:14:42,800 --> 00:14:49,710
they really get used by the applications

00:14:45,780 --> 00:14:55,830
that that was interesting that means

00:14:49,710 --> 00:14:59,820
that that the new staff is really being

00:14:55,830 --> 00:15:02,250
used and I've seen big differences when

00:14:59,820 --> 00:15:05,430
running those tests on different

00:15:02,250 --> 00:15:08,880
machines even when I was running the

00:15:05,430 --> 00:15:11,010
same test on two different machines that

00:15:08,880 --> 00:15:14,280
were running the same distribution and

00:15:11,010 --> 00:15:18,060
this is more or less the same version of

00:15:14,280 --> 00:15:22,410
the same distribution so those worrying

00:15:18,060 --> 00:15:25,290
just by the this was just linked to that

00:15:22,410 --> 00:15:28,020
the packages installed on the machine

00:15:25,290 --> 00:15:31,230
that's how i started to understanding

00:15:28,020 --> 00:15:33,840
the problems that we often see on the on

00:15:31,230 --> 00:15:34,230
the mailing list and bug report that

00:15:33,840 --> 00:15:36,480
some

00:15:34,230 --> 00:15:39,090
runs an application it doesn't work for

00:15:36,480 --> 00:15:43,230
them on a system that for someone else

00:15:39,090 --> 00:15:46,710
it works it works very well it's just

00:15:43,230 --> 00:15:49,530
that the if you look if you look into

00:15:46,710 --> 00:15:51,480
the library's accessed in the file

00:15:49,530 --> 00:15:56,610
access this is there is a big difference

00:15:51,480 --> 00:15:59,850
in all those two so I've learned a lot I

00:15:56,610 --> 00:16:03,200
may write quite many other tools like

00:15:59,850 --> 00:16:06,000
that because it's pretty interesting I

00:16:03,200 --> 00:16:07,980
would like to have your feedback which

00:16:06,000 --> 00:16:10,700
tools to understand your back

00:16:07,980 --> 00:16:13,170
application better you would like to see

00:16:10,700 --> 00:16:16,020
what do you would like to know more

00:16:13,170 --> 00:16:20,100
about the application send me an email

00:16:16,020 --> 00:16:24,180
later or ask me at the conference I will

00:16:20,100 --> 00:16:26,510
be really glad to hear from you what we

00:16:24,180 --> 00:16:33,690
have real problems with your

00:16:26,510 --> 00:16:38,970
reallocation out for the source code I

00:16:33,690 --> 00:16:41,400
have just managed to push it today by

00:16:38,970 --> 00:16:44,340
removing some big traces that we're in

00:16:41,400 --> 00:16:47,130
my private repo so you can if you want

00:16:44,340 --> 00:16:50,430
to look around you can get it from get

00:16:47,130 --> 00:16:55,020
lab it's is GP a3 add a graphical

00:16:50,430 --> 00:17:00,570
interface written in packet that was

00:16:55,020 --> 00:17:04,800
also interesting to use and you can you

00:17:00,570 --> 00:17:09,410
can reach me by email on other means do

00:17:04,800 --> 00:17:09,410
you have any questions yeah

00:17:26,040 --> 00:17:33,650
okay the question is what is the what is

00:17:30,960 --> 00:17:37,650
the what are the tools that i'm using

00:17:33,650 --> 00:17:40,050
for for this for this development the

00:17:37,650 --> 00:17:44,010
answer is that currently i'm basing

00:17:40,050 --> 00:17:48,240
myself on a stress basically for the for

00:17:44,010 --> 00:17:53,790
the first part i will be as adding a

00:17:48,240 --> 00:17:57,390
perf perform perf measures to in the in

00:17:53,790 --> 00:18:03,300
the in the in the future the future that

00:17:57,390 --> 00:18:09,420
is coming soon what what I'm going

00:18:03,300 --> 00:18:14,340
forward is to have have a goal to have

00:18:09,420 --> 00:18:18,720
done so have a have an idea what I want

00:18:14,340 --> 00:18:20,550
to show and that from that get the get

00:18:18,720 --> 00:18:23,070
the tools I need to and get the

00:18:20,550 --> 00:18:25,860
parameters the options that data I need

00:18:23,070 --> 00:18:28,650
to get from those tools I'm not going to

00:18:25,860 --> 00:18:31,440
pass apart everything that is giving me

00:18:28,650 --> 00:18:33,150
the stress and perf on application

00:18:31,440 --> 00:18:36,270
because the this is going to be

00:18:33,150 --> 00:18:38,670
extremely heavy probably not useful but

00:18:36,270 --> 00:18:41,460
I would rather prefer to have smaller

00:18:38,670 --> 00:18:45,030
tools that we just give you another

00:18:41,460 --> 00:19:07,470
small part of an overview that the

00:18:45,030 --> 00:19:09,960
directed directed Joe yeah okay the

00:19:07,470 --> 00:19:14,130
question is how flexible is the

00:19:09,960 --> 00:19:15,750
algorithm of the comparison at the

00:19:14,130 --> 00:19:19,080
beginning it was it was a proof of

00:19:15,750 --> 00:19:21,210
concept I wanted to go fast so I wrote

00:19:19,080 --> 00:19:23,460
the whole application in Python even

00:19:21,210 --> 00:19:26,930
knowing that all the performance side

00:19:23,460 --> 00:19:32,130
maybe it's not the best best receiver

00:19:26,930 --> 00:19:34,190
what I found out that use I was I

00:19:32,130 --> 00:19:39,970
started using the

00:19:34,190 --> 00:19:43,879
I wrote it a pretty pretty general way

00:19:39,970 --> 00:19:46,450
there are attributes and fields and and

00:19:43,879 --> 00:19:49,309
then they are they assaulted so I'm

00:19:46,450 --> 00:19:52,549
comparing that the two sorted list at

00:19:49,309 --> 00:19:55,509
the end with different attributes it's

00:19:52,549 --> 00:19:59,419
not exactly a diff it's a data structure

00:19:55,509 --> 00:20:02,629
and in fact i found out that even in

00:19:59,419 --> 00:20:05,419
python comparing in that away it's fast

00:20:02,629 --> 00:20:09,830
enough what happened when i when i

00:20:05,419 --> 00:20:13,340
launched the demo it has done the

00:20:09,830 --> 00:20:15,559
comparison online that that wasn't an

00:20:13,340 --> 00:20:19,009
offline comparison i had just the

00:20:15,559 --> 00:20:21,200
complete estres files on my desk but the

00:20:19,009 --> 00:20:24,460
whole processing was done online so it's

00:20:21,200 --> 00:20:29,899
fast enough I told myself that i could

00:20:24,460 --> 00:20:33,590
rewrite the engine later on in see how i

00:20:29,899 --> 00:20:37,700
can try to interact with other engines

00:20:33,590 --> 00:20:40,610
that that other if I if I need that

00:20:37,700 --> 00:20:50,029
currently it's fast enough so that's

00:20:40,610 --> 00:20:53,090
good will it make more sense to add a

00:20:50,029 --> 00:20:55,370
user interface to this program that does

00:20:53,090 --> 00:20:57,110
exactly what you're right- that and

00:20:55,370 --> 00:21:02,450
could then also be beyond that as

00:20:57,110 --> 00:21:07,340
opposed to the website okay the question

00:21:02,450 --> 00:21:12,590
is is it is it a bad way to just add a

00:21:07,340 --> 00:21:15,169
user interface to a straight super as I

00:21:12,590 --> 00:21:17,960
said not both a stress and prof a

00:21:15,169 --> 00:21:20,720
completely open source project they are

00:21:17,960 --> 00:21:26,500
one of the basic tools that you can

00:21:20,720 --> 00:21:30,919
download for your for your system I

00:21:26,500 --> 00:21:33,019
don't know why they're there is no you

00:21:30,919 --> 00:21:35,840
sent of graphical user interface

00:21:33,019 --> 00:21:41,679
post-race I would expect the datos were

00:21:35,840 --> 00:21:47,119
never interested in writing one for path

00:21:41,679 --> 00:21:49,039
there is some kind of graphical user

00:21:47,119 --> 00:21:51,990
interface

00:21:49,039 --> 00:21:55,049
however it's not that easy to write a

00:21:51,990 --> 00:21:57,059
graphical interface for path because of

00:21:55,049 --> 00:22:00,869
the amount of data and the amount of

00:21:57,059 --> 00:22:06,419
confusion figural ability it has it's

00:22:00,869 --> 00:22:09,960
pretty complicated to do it it may be

00:22:06,419 --> 00:22:12,119
one of the of their directions to go

00:22:09,960 --> 00:22:42,929
forward because it would it would be

00:22:12,119 --> 00:22:46,919
nice to have that the question was if I

00:22:42,929 --> 00:22:50,580
have looked into a TT in G yes I did I

00:22:46,919 --> 00:22:52,799
fold them for the reason of time I

00:22:50,580 --> 00:22:55,799
didn't prefer a present you edit eng

00:22:52,799 --> 00:22:58,830
system tab and twenty other tools that

00:22:55,799 --> 00:23:04,590
you can use that would be even more

00:22:58,830 --> 00:23:06,659
complicated to explain what they do the

00:23:04,590 --> 00:23:10,769
problem we have in the linux word for me

00:23:06,659 --> 00:23:14,850
that we have too many great tools we can

00:23:10,769 --> 00:23:17,669
we can get nearly all we want but you

00:23:14,850 --> 00:23:20,369
have to know which tool to use and at

00:23:17,669 --> 00:23:23,970
which time and also it takes time to

00:23:20,369 --> 00:23:26,879
master each of them because they work

00:23:23,970 --> 00:23:28,830
they have their own particularities so

00:23:26,879 --> 00:23:31,529
yes editing genes one of the other

00:23:28,830 --> 00:23:33,690
sources in there because it's also

00:23:31,529 --> 00:23:42,570
giving some other things that may be

00:23:33,690 --> 00:23:46,019
interesting yeah thank you very much

00:23:42,570 --> 00:23:47,620
down and see you see you later the rest

00:23:46,019 --> 00:23:49,680
of the convoy

00:23:47,620 --> 00:23:49,680

YouTube URL: https://www.youtube.com/watch?v=Uu-klWmHrV8


