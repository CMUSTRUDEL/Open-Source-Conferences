Title: Aleix Pol Gonzalez - Getting the Software in Our Users' Hands - QtCon Akademy 2016
Publication date: 2016-09-04
Playlist: QtCon Akademy 2016
Description: 
	KDE has been distributing software for longtime now, this doesn't mean it every process has been ideal. New technologies and practices appear every day and also new requirements: we want to target different kinds of operating systems like Android and OS X as well as to reach the users in both traditional GNU/Linux distributions and fancier systems like Flatpak.
This presentation will look into how it has been done so far and its reasons, and what should we iterate this process to better serve our users.


apol
Captions: 
	00:00:04,960 --> 00:00:09,599
okay next talk

00:00:06,000 --> 00:00:10,240
gonna be uh getting our software on user

00:00:09,599 --> 00:00:14,920
sense

00:00:10,240 --> 00:00:17,440
and uh i'm happy to introduce you alex

00:00:14,920 --> 00:00:20,080
enjoy um

00:00:17,440 --> 00:00:21,119
well good evening thanks for being here

00:00:20,080 --> 00:00:23,039
um

00:00:21,119 --> 00:00:24,640
i'm going to talk about uh getting the

00:00:23,039 --> 00:00:28,800
software in the us's hands

00:00:24,640 --> 00:00:30,480
this talk is going to be a bit about uh

00:00:28,800 --> 00:00:32,000
spelling the obvious because sometimes

00:00:30,480 --> 00:00:33,680
it's needed there's a lot of assumptions

00:00:32,000 --> 00:00:34,719
that we're taking for granted and i

00:00:33,680 --> 00:00:36,399
would like to

00:00:34,719 --> 00:00:38,079
well challenge some of them and some

00:00:36,399 --> 00:00:41,280
other just um

00:00:38,079 --> 00:00:43,920
well discard them uh to get started

00:00:41,280 --> 00:00:44,640
my name is alesh i i work for blue

00:00:43,920 --> 00:00:46,719
systems and

00:00:44,640 --> 00:00:47,920
during the day and during the night i do

00:00:46,719 --> 00:00:51,120
the rest of the things i do

00:00:47,920 --> 00:00:53,440
which is mostly um i'm part of the board

00:00:51,120 --> 00:00:54,480
and i develop in several kdp projects

00:00:53,440 --> 00:00:58,559
like k develop

00:00:54,480 --> 00:01:01,440
and kdew and so on

00:00:58,559 --> 00:01:03,280
also i have a life outside of kde some

00:01:01,440 --> 00:01:07,600
people like to know that

00:01:03,280 --> 00:01:11,200
sorry yeah apparently i have a cat

00:01:07,600 --> 00:01:11,200
i can tell you about him later

00:01:11,680 --> 00:01:15,200
so today um we're talking about we're

00:01:14,400 --> 00:01:19,280
people who make

00:01:15,200 --> 00:01:21,920
uh software who makes applications and

00:01:19,280 --> 00:01:23,119
what does it look like our our work and

00:01:21,920 --> 00:01:25,600
as as kde as

00:01:23,119 --> 00:01:27,360
a as a community what do we do the

00:01:25,600 --> 00:01:31,119
developers in kd what we do

00:01:27,360 --> 00:01:33,280
is uh we push our code to git

00:01:31,119 --> 00:01:35,600
and then there's two kinds of projects

00:01:33,280 --> 00:01:37,439
some of them

00:01:35,600 --> 00:01:40,159
are released through the release theme

00:01:37,439 --> 00:01:42,159
and the magical releases so you just put

00:01:40,159 --> 00:01:44,880
the things in the right branching it and

00:01:42,159 --> 00:01:49,360
they automatically

00:01:44,880 --> 00:01:50,880
appear in in the user system somehow

00:01:49,360 --> 00:01:52,880
there's another kind of projects which

00:01:50,880 --> 00:01:54,159
is the ones that we used to call extra

00:01:52,880 --> 00:01:55,040
gear now we don't really have a good

00:01:54,159 --> 00:01:56,640
name for them

00:01:55,040 --> 00:01:58,079
but basically instead of having a

00:01:56,640 --> 00:02:00,079
release team you

00:01:58,079 --> 00:02:02,399
get the release team hat you put it on

00:02:00,079 --> 00:02:05,600
and then you create a package out of

00:02:02,399 --> 00:02:07,840
the software the the code we have

00:02:05,600 --> 00:02:10,000
engaged and then some other sources such

00:02:07,840 --> 00:02:12,000
as the translations are placed somewhere

00:02:10,000 --> 00:02:14,720
else and then

00:02:12,000 --> 00:02:15,440
the icons can be also in weird places

00:02:14,720 --> 00:02:17,440
and so on

00:02:15,440 --> 00:02:19,599
but essentially what we are doing then

00:02:17,440 --> 00:02:23,200
is is we release tarbles

00:02:19,599 --> 00:02:24,160
turbos are the obvious i was talking

00:02:23,200 --> 00:02:26,400
about

00:02:24,160 --> 00:02:28,400
um they are source code and they are

00:02:26,400 --> 00:02:30,720
useful for not really anybody

00:02:28,400 --> 00:02:32,800
because it's basically redundant with

00:02:30,720 --> 00:02:35,200
the what we're having it

00:02:32,800 --> 00:02:36,080
and it's not something that the user can

00:02:35,200 --> 00:02:38,160
use as

00:02:36,080 --> 00:02:39,120
as is i mean the user definitely he will

00:02:38,160 --> 00:02:41,599
have a compiler

00:02:39,120 --> 00:02:43,120
he will have uh all of the libraries in

00:02:41,599 --> 00:02:43,519
his system and he can compile all of the

00:02:43,120 --> 00:02:46,400
stuff

00:02:43,519 --> 00:02:47,120
but essentially this table is not fun to

00:02:46,400 --> 00:02:48,720
use

00:02:47,120 --> 00:02:51,599
especially taking into account that

00:02:48,720 --> 00:02:54,720
people are used to things being

00:02:51,599 --> 00:02:57,200
reasonably automatic lately and

00:02:54,720 --> 00:02:58,239
and so on nobody wants to spend 20

00:02:57,200 --> 00:03:00,800
minutes or

00:02:58,239 --> 00:03:02,840
even one hour or five hours to compile

00:03:00,800 --> 00:03:06,640
the applications

00:03:02,840 --> 00:03:10,080
so um this has been like that though

00:03:06,640 --> 00:03:11,360
for the last 20 years three server

00:03:10,080 --> 00:03:12,800
projects released herbals and then

00:03:11,360 --> 00:03:15,040
there's

00:03:12,800 --> 00:03:17,519
people from the woods who come and turn

00:03:15,040 --> 00:03:22,319
those into things that can be used by

00:03:17,519 --> 00:03:22,319
by by actual users um

00:03:22,480 --> 00:03:26,239
and this has a certain amount of

00:03:25,280 --> 00:03:28,640
problems

00:03:26,239 --> 00:03:30,159
that i will i will i will enumerate a

00:03:28,640 --> 00:03:32,319
little bit

00:03:30,159 --> 00:03:34,080
to be able to explain my my point of

00:03:32,319 --> 00:03:37,680
view the the first one is that

00:03:34,080 --> 00:03:39,680
um since it's the the

00:03:37,680 --> 00:03:42,159
people from the woods who come and turn

00:03:39,680 --> 00:03:43,280
the the the source code into things that

00:03:42,159 --> 00:03:46,319
people can use

00:03:43,280 --> 00:03:49,760
it's them who decide what versions are

00:03:46,319 --> 00:03:49,760
people allowed to to be using

00:03:50,560 --> 00:03:55,760
and that can be a bad thing it's good

00:03:54,400 --> 00:03:57,360
it's a good thing that there is somebody

00:03:55,760 --> 00:03:58,640
who is thinking about the user and

00:03:57,360 --> 00:04:00,480
deciding what thing

00:03:58,640 --> 00:04:02,319
the people should be doing but on the

00:04:00,480 --> 00:04:05,680
other hand us as developers

00:04:02,319 --> 00:04:07,920
we we we like to think that we work for

00:04:05,680 --> 00:04:09,920
the user and that we work for the people

00:04:07,920 --> 00:04:11,040
and then when we pick something we

00:04:09,920 --> 00:04:14,080
expect it to

00:04:11,040 --> 00:04:16,479
get to the people um

00:04:14,080 --> 00:04:18,639
if the last table version is not on the

00:04:16,479 --> 00:04:20,079
people's and our users computers we get

00:04:18,639 --> 00:04:23,280
frustrated

00:04:20,079 --> 00:04:25,919
uh this leads to a lack of feedback

00:04:23,280 --> 00:04:26,880
the if i talk to somebody who's using an

00:04:25,919 --> 00:04:30,240
lts release

00:04:26,880 --> 00:04:31,680
about k develop he will tell me about

00:04:30,240 --> 00:04:33,680
he will give me feedback about the

00:04:31,680 --> 00:04:36,720
problems he we used to have

00:04:33,680 --> 00:04:37,680
in 2012 or in 2014 but not the problems

00:04:36,720 --> 00:04:42,639
we have now

00:04:37,680 --> 00:04:44,960
so it will be a

00:04:42,639 --> 00:04:46,560
conversation where he will tell me yeah

00:04:44,960 --> 00:04:49,520
we have this problem and then i will say

00:04:46,560 --> 00:04:52,560
yeah i remember we solved it like that

00:04:49,520 --> 00:04:56,000
bad times right and then he will not

00:04:52,560 --> 00:04:57,759
and say yes i use a stable system so

00:04:56,000 --> 00:04:59,280
that's why my system is not working or

00:04:57,759 --> 00:05:02,880
your application is not working

00:04:59,280 --> 00:05:03,600
and the the problem can be extrapolated

00:05:02,880 --> 00:05:05,199
to all of the

00:05:03,600 --> 00:05:07,199
most of the end user applications that

00:05:05,199 --> 00:05:10,479
the the people are using

00:05:07,199 --> 00:05:11,440
because most of the rules that are being

00:05:10,479 --> 00:05:14,080
followed for

00:05:11,440 --> 00:05:15,919
the for deciding which software to bring

00:05:14,080 --> 00:05:17,919
to the user are

00:05:15,919 --> 00:05:18,960
thought for system components such as

00:05:17,919 --> 00:05:22,320
openssl

00:05:18,960 --> 00:05:25,600
or the kernel but not really for

00:05:22,320 --> 00:05:28,560
kde applications or okay develop or

00:05:25,600 --> 00:05:29,039
office suites right but things are like

00:05:28,560 --> 00:05:32,240
they are

00:05:29,039 --> 00:05:33,440
right and then as well in kde we're not

00:05:32,240 --> 00:05:36,639
only about linux

00:05:33,440 --> 00:05:40,800
we try to think about other platforms

00:05:36,639 --> 00:05:43,680
because we think it's important and then

00:05:40,800 --> 00:05:45,039
those minions from the woods like linux

00:05:43,680 --> 00:05:47,120
but apparently they don't like

00:05:45,039 --> 00:05:48,479
compiling things for other uh platforms

00:05:47,120 --> 00:05:50,080
they don't do windows things they don't

00:05:48,479 --> 00:05:50,479
do osx things they don't do android

00:05:50,080 --> 00:05:52,960
things

00:05:50,479 --> 00:05:54,320
which are platforms that we like it or

00:05:52,960 --> 00:05:57,280
not they're very important

00:05:54,320 --> 00:06:00,240
like the people we want to get to are

00:05:57,280 --> 00:06:02,560
often in these platforms and

00:06:00,240 --> 00:06:03,680
and we want to serve these people as

00:06:02,560 --> 00:06:05,680
well

00:06:03,680 --> 00:06:07,039
despite their lack of taste when it

00:06:05,680 --> 00:06:09,520
comes to choosing

00:06:07,039 --> 00:06:11,520
an operating system or a kernel for that

00:06:09,520 --> 00:06:14,240
matter

00:06:11,520 --> 00:06:16,000
so anyway we need to find solutions for

00:06:14,240 --> 00:06:16,639
that problem for the other platforms

00:06:16,000 --> 00:06:18,639
because

00:06:16,639 --> 00:06:20,800
nobody is going to come from elsewhere

00:06:18,639 --> 00:06:23,199
and solve the problem for us

00:06:20,800 --> 00:06:25,120
and in the end we've had to solve the

00:06:23,199 --> 00:06:27,759
problem as well for for

00:06:25,120 --> 00:06:28,880
other cases such as the ci we have an

00:06:27,759 --> 00:06:32,840
immense

00:06:28,880 --> 00:06:35,600
set of of computers in the

00:06:32,840 --> 00:06:37,520
clouds that are already compelling

00:06:35,600 --> 00:06:40,880
everything we're doing and

00:06:37,520 --> 00:06:42,479
in a more very similar way than

00:06:40,880 --> 00:06:44,319
the distributions are compiling the

00:06:42,479 --> 00:06:45,199
things of course there's technical

00:06:44,319 --> 00:06:47,440
differences

00:06:45,199 --> 00:06:48,720
but uh most of them are not very

00:06:47,440 --> 00:06:51,599
interesting

00:06:48,720 --> 00:06:52,560
and in general it always seems a logical

00:06:51,599 --> 00:06:56,560
and a good idea that

00:06:52,560 --> 00:06:58,240
we could be leveraging that um

00:06:56,560 --> 00:06:59,599
but at the moment what we're doing is

00:06:58,240 --> 00:07:03,840
just throwing it away

00:06:59,599 --> 00:07:05,199
and that's what uh if i think about how

00:07:03,840 --> 00:07:07,440
the communication goes

00:07:05,199 --> 00:07:08,240
it it's a bit like this so us as

00:07:07,440 --> 00:07:13,199
developers

00:07:08,240 --> 00:07:15,599
we have some things on git those things

00:07:13,199 --> 00:07:17,360
we get feedback from the ci the ci tells

00:07:15,599 --> 00:07:20,400
us some things about those

00:07:17,360 --> 00:07:22,240
but the things that we know about

00:07:20,400 --> 00:07:24,479
for example that the ci is trying those

00:07:22,240 --> 00:07:26,560
things are discarded because we don't

00:07:24,479 --> 00:07:28,400
nobody cares about what these computers

00:07:26,560 --> 00:07:31,199
are doing right we just cared about

00:07:28,400 --> 00:07:32,000
about the warnings at least nowadays on

00:07:31,199 --> 00:07:35,039
the other hand

00:07:32,000 --> 00:07:37,680
uh like i said that those things we

00:07:35,039 --> 00:07:39,440
have uh on on git the developers puts on

00:07:37,680 --> 00:07:41,360
git

00:07:39,440 --> 00:07:42,720
is a feedback that the distributor gets

00:07:41,360 --> 00:07:45,039
and then the distributor

00:07:42,720 --> 00:07:46,879
pushes the problem the the software to

00:07:45,039 --> 00:07:49,280
the user

00:07:46,879 --> 00:07:50,800
and then the user has something that

00:07:49,280 --> 00:07:54,479
some developers worked on

00:07:50,800 --> 00:07:56,560
in the past by uh random t depending on

00:07:54,479 --> 00:07:58,160
the distribution you use in fact one of

00:07:56,560 --> 00:07:59,599
the big

00:07:58,160 --> 00:08:01,520
decisions you take when you choose a

00:07:59,599 --> 00:08:01,759
distribution or another is whether this

00:08:01,520 --> 00:08:03,919
t

00:08:01,759 --> 00:08:04,800
is going to be bigger or old right like

00:08:03,919 --> 00:08:06,879
the the arch

00:08:04,800 --> 00:08:08,240
linux user will tell you he likes arch

00:08:06,879 --> 00:08:10,319
because he

00:08:08,240 --> 00:08:12,319
really wants to use the last stuff and

00:08:10,319 --> 00:08:13,759
then the deviant person will tell you i

00:08:12,319 --> 00:08:15,360
really like to use old stuff

00:08:13,759 --> 00:08:17,440
it doesn't really work this way but it

00:08:15,360 --> 00:08:19,759
feels that way

00:08:17,440 --> 00:08:20,479
but in general what the the part we're

00:08:19,759 --> 00:08:22,639
interested in

00:08:20,479 --> 00:08:24,400
is the the red line right like all of

00:08:22,639 --> 00:08:26,160
the developers or

00:08:24,400 --> 00:08:28,000
maybe 95 percent of the developers in

00:08:26,160 --> 00:08:29,680
kde are interested in

00:08:28,000 --> 00:08:31,919
in making things for the user making

00:08:29,680 --> 00:08:35,039
sure that the user is is fed

00:08:31,919 --> 00:08:38,000
the best software we can offer him right

00:08:35,039 --> 00:08:39,120
and and when the user gives us feedback

00:08:38,000 --> 00:08:40,159
we don't want the feedback from

00:08:39,120 --> 00:08:42,640
something that we

00:08:40,159 --> 00:08:43,919
already produced in the past but we want

00:08:42,640 --> 00:08:47,120
something that is the freshest

00:08:43,919 --> 00:08:51,200
possible and

00:08:47,120 --> 00:08:53,519
and well as kde and as the people who

00:08:51,200 --> 00:08:56,480
care about about this problem

00:08:53,519 --> 00:08:57,680
it sounds like it should be our duty a

00:08:56,480 --> 00:09:00,720
little bit

00:08:57,680 --> 00:09:03,440
to see how to improve the

00:09:00,720 --> 00:09:04,800
prove it so to spell it a bit the

00:09:03,440 --> 00:09:06,880
problem is that we're not

00:09:04,800 --> 00:09:07,839
being efficient at solving the problems

00:09:06,880 --> 00:09:10,880
of the users

00:09:07,839 --> 00:09:12,959
when the user has the problem is not at

00:09:10,880 --> 00:09:16,160
the moment where we can

00:09:12,959 --> 00:09:16,160
solve it very often

00:09:17,440 --> 00:09:21,360
we have some mechanisms right uh some

00:09:20,320 --> 00:09:23,279
some of the things we

00:09:21,360 --> 00:09:24,640
we try to do is to have a separate

00:09:23,279 --> 00:09:27,440
branch which is

00:09:24,640 --> 00:09:27,440
basically a

00:09:28,080 --> 00:09:31,360
it's basically what the code used to be

00:09:30,320 --> 00:09:34,959
when we release

00:09:31,360 --> 00:09:35,360
that version and we solve things over

00:09:34,959 --> 00:09:37,839
there

00:09:35,360 --> 00:09:38,480
and then release those things from the

00:09:37,839 --> 00:09:40,480
past

00:09:38,480 --> 00:09:42,640
again but that has problems as well

00:09:40,480 --> 00:09:43,680
right it has problems because we have to

00:09:42,640 --> 00:09:45,519
spend time

00:09:43,680 --> 00:09:48,160
uh making sure that some other branch

00:09:45,519 --> 00:09:50,320
which is basically nothing that

00:09:48,160 --> 00:09:51,279
the current development team has in in

00:09:50,320 --> 00:09:54,399
his mindset

00:09:51,279 --> 00:09:56,320
we're we have to care about it and then

00:09:54,399 --> 00:09:57,120
we also have the lts releases which is

00:09:56,320 --> 00:10:00,240
the same

00:09:57,120 --> 00:10:02,240
solution but just at

00:10:00,240 --> 00:10:04,640
it's making the programming a bit a bit

00:10:02,240 --> 00:10:07,120
bigger but

00:10:04,640 --> 00:10:08,720
we still make sure that the people who

00:10:07,120 --> 00:10:09,200
are using things from one year in the

00:10:08,720 --> 00:10:12,800
past

00:10:09,200 --> 00:10:16,399
they are not really miserable which is

00:10:12,800 --> 00:10:17,760
a good thing but it's still not the

00:10:16,399 --> 00:10:20,160
solution so when we

00:10:17,760 --> 00:10:21,760
talk about we want to provide the people

00:10:20,160 --> 00:10:23,680
the best solution the best

00:10:21,760 --> 00:10:24,880
linux operating system that we're

00:10:23,680 --> 00:10:27,920
looking for

00:10:24,880 --> 00:10:30,640
we're not talking about

00:10:27,920 --> 00:10:32,800
having lots of branches and lots of of

00:10:30,640 --> 00:10:35,040
stable releases at least that's

00:10:32,800 --> 00:10:36,240
that's how i see it and i am confident

00:10:35,040 --> 00:10:39,440
that somebody

00:10:36,240 --> 00:10:39,920
should or would have to tell me i'm

00:10:39,440 --> 00:10:42,800
wrong

00:10:39,920 --> 00:10:43,120
um but i don't see that this is going to

00:10:42,800 --> 00:10:45,120
be

00:10:43,120 --> 00:10:47,040
the way that linux is going to become

00:10:45,120 --> 00:10:50,160
stable it's going to become useful

00:10:47,040 --> 00:10:54,640
the the ways i i see linux being

00:10:50,160 --> 00:10:57,040
useful is by making sure that what the

00:10:54,640 --> 00:10:57,920
the community spends their time on is

00:10:57,040 --> 00:11:00,640
the things that

00:10:57,920 --> 00:11:02,240
the the the users can profit and benefit

00:11:00,640 --> 00:11:04,959
from

00:11:02,240 --> 00:11:05,360
so what's that what's the conclusion

00:11:04,959 --> 00:11:06,720
there

00:11:05,360 --> 00:11:08,560
the conclusion there is that everyone is

00:11:06,720 --> 00:11:10,160
sad developers are sad because they

00:11:08,560 --> 00:11:14,240
spend time fixing things

00:11:10,160 --> 00:11:16,000
and the users keep

00:11:14,240 --> 00:11:18,160
being sad because the things that the

00:11:16,000 --> 00:11:20,560
developers

00:11:18,160 --> 00:11:22,240
sadly did wrong they cannot leverage

00:11:20,560 --> 00:11:22,959
them and the distributors are in the

00:11:22,240 --> 00:11:25,600
middle

00:11:22,959 --> 00:11:26,880
so if a user asks the distributor he

00:11:25,600 --> 00:11:28,560
will tell you that the developers are

00:11:26,880 --> 00:11:30,480
doing the the job wrong

00:11:28,560 --> 00:11:32,320
and if the developers uh tell the

00:11:30,480 --> 00:11:33,920
distributors the distributors will say

00:11:32,320 --> 00:11:36,160
well that's our rules

00:11:33,920 --> 00:11:38,320
and and we need to be played by them

00:11:36,160 --> 00:11:39,519
because otherwise the wall is craziness

00:11:38,320 --> 00:11:42,720
which is true

00:11:39,519 --> 00:11:47,040
but then uh well

00:11:42,720 --> 00:11:47,040
compromises i guess i don't know um

00:11:48,399 --> 00:11:54,839
the ci is always sad because it's doing

00:11:51,839 --> 00:11:57,839
so many things and nobody's using them

00:11:54,839 --> 00:11:57,839
right

00:11:58,480 --> 00:12:01,519
so we've been talking about

00:12:00,320 --> 00:12:03,200
distributions

00:12:01,519 --> 00:12:04,800
the new trend nowadays is to talk about

00:12:03,200 --> 00:12:08,160
phoenix bundles

00:12:04,800 --> 00:12:09,360
um i'm going to talk about a little bit

00:12:08,160 --> 00:12:11,120
about the bundle

00:12:09,360 --> 00:12:12,240
bundling systems we have nowadays and

00:12:11,120 --> 00:12:13,200
then i will talk about the other

00:12:12,240 --> 00:12:15,360
platforms

00:12:13,200 --> 00:12:16,800
um i want this second part of the

00:12:15,360 --> 00:12:19,040
presentation to

00:12:16,800 --> 00:12:19,839
provide a bit of perspective on how i

00:12:19,040 --> 00:12:21,760
think we can

00:12:19,839 --> 00:12:23,920
could solve the the problems of outline

00:12:21,760 --> 00:12:25,279
otherwise you would be all sad as well

00:12:23,920 --> 00:12:27,279
when you leave the room and that

00:12:25,279 --> 00:12:29,040
wouldn't be nice

00:12:27,279 --> 00:12:31,120
that's why i also make this bad jokes

00:12:29,040 --> 00:12:33,680
because it's good for the

00:12:31,120 --> 00:12:33,680
for the brain

00:12:34,399 --> 00:12:38,480
so knowing this problem one of the big

00:12:36,639 --> 00:12:41,600
companies in the in the

00:12:38,480 --> 00:12:43,760
ecosystem uh

00:12:41,600 --> 00:12:45,279
i wanted to say redhead but

00:12:43,760 --> 00:12:48,560
theoretically this is a

00:12:45,279 --> 00:12:50,639
gnome idea um i don't know i'm not gonna

00:12:48,560 --> 00:12:53,839
get into politics anymore

00:12:50,639 --> 00:12:56,320
uh it's interesting because they have

00:12:53,839 --> 00:12:57,360
exactly the same problems as us and they

00:12:56,320 --> 00:13:00,160
are trying to solve it

00:12:57,360 --> 00:13:00,880
how are they trying to solve it well

00:13:00,160 --> 00:13:04,560
they

00:13:00,880 --> 00:13:07,279
came up with a format where you can

00:13:04,560 --> 00:13:08,480
compile applications as upstream and

00:13:07,279 --> 00:13:12,560
then you can distribute it

00:13:08,480 --> 00:13:12,560
to everyone who uses linux

00:13:13,519 --> 00:13:17,680
this more or less works the idea how it

00:13:15,519 --> 00:13:19,360
would work on flat pack is that

00:13:17,680 --> 00:13:21,279
when you use an application this

00:13:19,360 --> 00:13:24,560
application would be run

00:13:21,279 --> 00:13:27,760
on a sandbox environment and then every

00:13:24,560 --> 00:13:31,760
organization such as libreoffice

00:13:27,760 --> 00:13:33,279
gnome kde could have a repository or 23

00:13:31,760 --> 00:13:35,120
and then you could get the software from

00:13:33,279 --> 00:13:39,120
it then

00:13:35,120 --> 00:13:41,519
um this is what uh

00:13:39,120 --> 00:13:43,199
so to create those packages they came up

00:13:41,519 --> 00:13:44,160
as well with a format so that you can

00:13:43,199 --> 00:13:47,440
create

00:13:44,160 --> 00:13:48,320
the packages easily they support

00:13:47,440 --> 00:13:51,120
something they call

00:13:48,320 --> 00:13:52,240
platforms so since we don't want to have

00:13:51,120 --> 00:13:55,360
huge packages

00:13:52,240 --> 00:13:58,720
uh they they give you the

00:13:55,360 --> 00:14:00,639
the possibility to create for

00:13:58,720 --> 00:14:01,760
each application one version of what we

00:14:00,639 --> 00:14:05,040
could consider is

00:14:01,760 --> 00:14:08,639
the sdk of the platform

00:14:05,040 --> 00:14:12,720
um we will use that on on

00:14:08,639 --> 00:14:14,720
other platforms like apple or

00:14:12,720 --> 00:14:15,760
windows we have some sdk which is a base

00:14:14,720 --> 00:14:16,880
where you can build all of the

00:14:15,760 --> 00:14:19,120
applications that's

00:14:16,880 --> 00:14:20,560
something that that wouldn't work on on

00:14:19,120 --> 00:14:23,839
linux or at least that's not

00:14:20,560 --> 00:14:25,680
how we work so basically each

00:14:23,839 --> 00:14:27,760
of us can decide to use a platform and

00:14:25,680 --> 00:14:30,800
then live with it

00:14:27,760 --> 00:14:34,000
what i did when i started looking into

00:14:30,800 --> 00:14:35,760
flat pack is create a one a

00:14:34,000 --> 00:14:37,920
big package kind of thing that has all

00:14:35,760 --> 00:14:39,360
of cute it has all of the kd frameworks

00:14:37,920 --> 00:14:41,600
and a couple of components we need to

00:14:39,360 --> 00:14:43,600
integrate properly and then

00:14:41,600 --> 00:14:45,360
go by it so basically you say which is

00:14:43,600 --> 00:14:47,839
the runtime you're using which is the

00:14:45,360 --> 00:14:48,639
sdk thing then the name of the

00:14:47,839 --> 00:14:51,680
application

00:14:48,639 --> 00:14:53,040
this is the things you want the sandbox

00:14:51,680 --> 00:14:54,480
to expose

00:14:53,040 --> 00:14:57,120
and then you list the modules you want

00:14:54,480 --> 00:15:00,720
to have compiled within your your bundle

00:14:57,120 --> 00:15:04,160
um it's interesting to note that

00:15:00,720 --> 00:15:06,000
uh everything that is not part of the

00:15:04,160 --> 00:15:06,720
platform is part of the developer to to

00:15:06,000 --> 00:15:10,000
the site

00:15:06,720 --> 00:15:11,279
uh to bring in uh one of the big

00:15:10,000 --> 00:15:15,839
problems we have nowadays with the

00:15:11,279 --> 00:15:15,839
current model of package systems is that

00:15:15,920 --> 00:15:19,600
when you're developing your application

00:15:17,279 --> 00:15:22,639
you have to you can't assume that

00:15:19,600 --> 00:15:25,839
any of the libraries around you

00:15:22,639 --> 00:15:26,800
is going to be consistent and that's a

00:15:25,839 --> 00:15:28,240
problem because

00:15:26,800 --> 00:15:30,079
some versions will have some problems

00:15:28,240 --> 00:15:30,880
and some other versions will have other

00:15:30,079 --> 00:15:33,120
problems

00:15:30,880 --> 00:15:34,639
the solution is clearly always let's fix

00:15:33,120 --> 00:15:35,839
it let's fix it upstream and make sure

00:15:34,639 --> 00:15:38,839
everything works

00:15:35,839 --> 00:15:41,199
but when we want to provide an auto

00:15:38,839 --> 00:15:43,680
contained um

00:15:41,199 --> 00:15:44,240
solution we often want to be able to say

00:15:43,680 --> 00:15:46,079
well

00:15:44,240 --> 00:15:47,279
that's what what it looks like for me

00:15:46,079 --> 00:15:48,160
and that's what it's going to look like

00:15:47,279 --> 00:15:50,480
for my users

00:15:48,160 --> 00:15:51,600
and it's it's really powerful to be able

00:15:50,480 --> 00:15:54,000
to say

00:15:51,600 --> 00:15:54,880
i've tested that you can use that other

00:15:54,000 --> 00:15:58,079
than i

00:15:54,880 --> 00:16:00,800
tested this code send it to the

00:15:58,079 --> 00:16:02,160
sky and then you will get something that

00:16:00,800 --> 00:16:04,160
is an outcome

00:16:02,160 --> 00:16:05,839
and probably will look similar to what i

00:16:04,160 --> 00:16:07,040
sent but you never know that it's

00:16:05,839 --> 00:16:10,959
exactly the same

00:16:07,040 --> 00:16:12,959
so here uh specifically i i get to say

00:16:10,959 --> 00:16:14,800
which is my application which is uh the

00:16:12,959 --> 00:16:18,000
libraries i depend on

00:16:14,800 --> 00:16:20,000
i can specifically say which are how

00:16:18,000 --> 00:16:21,040
they are compiled so i have full control

00:16:20,000 --> 00:16:24,880
of them

00:16:21,040 --> 00:16:27,920
and and then i get some output that

00:16:24,880 --> 00:16:29,600
is what the user would get

00:16:27,920 --> 00:16:31,279
also it's not really necessary to use

00:16:29,600 --> 00:16:34,480
this format there's

00:16:31,279 --> 00:16:35,199
more ways of getting a package it's just

00:16:34,480 --> 00:16:37,360
convenient

00:16:35,199 --> 00:16:39,199
did you have a question a quick question

00:16:37,360 --> 00:16:43,519
what's the difference between

00:16:39,199 --> 00:16:45,759
sdk uh you know distros have this

00:16:43,519 --> 00:16:47,839
dev package and then the binary package

00:16:45,759 --> 00:16:49,920
for libraries it's more or less the same

00:16:47,839 --> 00:16:51,360
so you don't want to have a huge run

00:16:49,920 --> 00:16:52,800
time uh

00:16:51,360 --> 00:16:54,720
you don't want applications to require a

00:16:52,800 --> 00:16:55,759
huge run time right so some things will

00:16:54,720 --> 00:16:57,680
be stripped out of it

00:16:55,759 --> 00:16:59,360
because are things that they are things

00:16:57,680 --> 00:17:00,320
that you only need for compiling

00:16:59,360 --> 00:17:04,000
applications

00:17:00,320 --> 00:17:07,199
so it's just split

00:17:04,000 --> 00:17:10,240
um then there's snappy which

00:17:07,199 --> 00:17:12,079
is a similar solution also

00:17:10,240 --> 00:17:14,240
to be able to run applications on every

00:17:12,079 --> 00:17:17,120
linux uh by everything

00:17:14,240 --> 00:17:18,000
every linux distribution to some extent

00:17:17,120 --> 00:17:20,400
um

00:17:18,000 --> 00:17:21,679
it's also using some sandboxing and they

00:17:20,400 --> 00:17:25,039
use apartment for

00:17:21,679 --> 00:17:27,520
the sandboxing and instead of having

00:17:25,039 --> 00:17:28,960
this repository for each distribution

00:17:27,520 --> 00:17:33,840
they

00:17:28,960 --> 00:17:33,840
more like plan to provide a huge kind of

00:17:35,039 --> 00:17:39,760
store to to offer all the applications

00:17:38,400 --> 00:17:42,720
where you can list them you can

00:17:39,760 --> 00:17:45,039
have them up there some rating reviews

00:17:42,720 --> 00:17:48,160
and stuff like that

00:17:45,039 --> 00:17:52,320
and they also have their own

00:17:48,160 --> 00:17:56,799
little um format we can look at it

00:17:52,320 --> 00:17:58,840
a bit so that oh of course not

00:17:56,799 --> 00:18:01,840
but let me see if i can get internet

00:17:58,840 --> 00:18:01,840
connection

00:18:10,000 --> 00:18:17,280
cute con 2016

00:18:14,400 --> 00:18:19,120
well it will take a while uh anyway

00:18:17,280 --> 00:18:22,240
maybe it's it makes sense to

00:18:19,120 --> 00:18:22,240
get back to it later

00:18:22,320 --> 00:18:26,960
if i don't have it yet oh i did have it

00:18:25,039 --> 00:18:29,360
so that's that's the example that they

00:18:26,960 --> 00:18:30,480
they suggest so it's obviously the nice

00:18:29,360 --> 00:18:33,120
one

00:18:30,480 --> 00:18:34,720
but it can give you a bit the idea so

00:18:33,120 --> 00:18:40,640
you basically

00:18:34,720 --> 00:18:40,640
sorry yeah it's good idea good thinking

00:18:40,840 --> 00:18:45,679
harold

00:18:42,240 --> 00:18:46,799
this is enough well kind of basically

00:18:45,679 --> 00:18:49,679
here uh

00:18:46,799 --> 00:18:50,080
it's interesting they are using a lot

00:18:49,679 --> 00:18:53,679
more

00:18:50,080 --> 00:18:55,520
the semantics of of

00:18:53,679 --> 00:18:57,520
ubuntu and davian packaging but

00:18:55,520 --> 00:18:59,120
basically you pull the dependencies you

00:18:57,520 --> 00:19:00,480
need as well

00:18:59,120 --> 00:19:02,960
here they're talking about binary

00:19:00,480 --> 00:19:05,440
packages and then you explain a bit how

00:19:02,960 --> 00:19:07,280
you want it to be executed

00:19:05,440 --> 00:19:09,440
since all of those systems need some

00:19:07,280 --> 00:19:12,480
kind of magic to happen

00:19:09,440 --> 00:19:14,240
to to make sure that the applications

00:19:12,480 --> 00:19:16,240
will run properly and we'll know about

00:19:14,240 --> 00:19:18,559
the right environment variables and the

00:19:16,240 --> 00:19:19,919
right what places of the system they

00:19:18,559 --> 00:19:22,000
usually have these

00:19:19,919 --> 00:19:23,200
things here they're talking about the q5

00:19:22,000 --> 00:19:26,880
launch but

00:19:23,200 --> 00:19:26,880
i mean that's what is going on there

00:19:28,480 --> 00:19:33,360
i want to show as well another example

00:19:33,440 --> 00:19:39,520
which is using neon so in kde we have

00:19:37,039 --> 00:19:41,840
the advantage that a lot of things have

00:19:39,520 --> 00:19:44,880
been already been packets for ubuntu

00:19:41,840 --> 00:19:46,880
so this is for an application as well

00:19:44,880 --> 00:19:48,559
so what they're doing here is instead of

00:19:46,880 --> 00:19:49,360
of compiling the application when you

00:19:48,559 --> 00:19:51,679
create the

00:19:49,360 --> 00:19:52,400
the bundle is already pulling the the

00:19:51,679 --> 00:19:54,799
application

00:19:52,400 --> 00:19:57,200
itself and and putting it in the package

00:19:54,799 --> 00:20:00,320
and then it more or less works

00:19:57,200 --> 00:20:01,840
um what i really like about these

00:20:00,320 --> 00:20:03,679
processes and i think it's something we

00:20:01,840 --> 00:20:05,280
should look into is

00:20:03,679 --> 00:20:07,760
to make sure that it's the developers

00:20:05,280 --> 00:20:09,919
that create those packages because it's

00:20:07,760 --> 00:20:13,120
a developer who tests what the

00:20:09,919 --> 00:20:15,120
end user will be using and

00:20:13,120 --> 00:20:16,159
it's not some machine that produces

00:20:15,120 --> 00:20:20,559
something and then

00:20:16,159 --> 00:20:22,240
it goes untested and that could be bad

00:20:20,559 --> 00:20:25,120
i don't really have good solutions for

00:20:22,240 --> 00:20:27,280
that yet because we're not doing it so

00:20:25,120 --> 00:20:29,039
well also if you have questions about

00:20:27,280 --> 00:20:31,360
those you can ask uh

00:20:29,039 --> 00:20:34,080
scarlett and harold they know more about

00:20:31,360 --> 00:20:35,840
it than i do

00:20:34,080 --> 00:20:37,520
and then the the third i wanted to

00:20:35,840 --> 00:20:41,679
mention is app image

00:20:37,520 --> 00:20:43,520
um i've image uh

00:20:41,679 --> 00:20:45,039
the the developer is also here in the

00:20:43,520 --> 00:20:47,360
room so i will be

00:20:45,039 --> 00:20:49,520
a bit careful with what i say i don't

00:20:47,360 --> 00:20:53,120
want any tomatoes

00:20:49,520 --> 00:20:55,120
but the idea a little bit is

00:20:53,120 --> 00:20:57,280
it's a very different approach the other

00:20:55,120 --> 00:20:59,200
two is about providing something part of

00:20:57,280 --> 00:21:00,960
the system that

00:20:59,200 --> 00:21:02,480
will be able to execute applications

00:21:00,960 --> 00:21:06,880
here what we're talking about

00:21:02,480 --> 00:21:08,799
is a system that will

00:21:06,880 --> 00:21:11,520
you download the file you click the file

00:21:08,799 --> 00:21:15,120
and the application is executed

00:21:11,520 --> 00:21:18,400
deal with it so the

00:21:15,120 --> 00:21:21,039
it's relying on how linux works and how

00:21:18,400 --> 00:21:23,600
linux has been working for a long time

00:21:21,039 --> 00:21:25,440
uh so the advantage clearly is that it's

00:21:23,600 --> 00:21:26,640
rather compatible by some definition of

00:21:25,440 --> 00:21:28,559
retro-compatible

00:21:26,640 --> 00:21:29,679
i don't know if it's very easy to be

00:21:28,559 --> 00:21:31,280
able to tell whether

00:21:29,679 --> 00:21:33,280
an application is going to work on any

00:21:31,280 --> 00:21:35,039
system or not it's probably not possible

00:21:33,280 --> 00:21:35,360
but then it's not possible with snappy

00:21:35,039 --> 00:21:37,440
or

00:21:35,360 --> 00:21:39,200
flat pack anyway as well because you

00:21:37,440 --> 00:21:39,919
need to be able to have the the runtime

00:21:39,200 --> 00:21:45,039
on on

00:21:39,919 --> 00:21:46,799
all systems which they want

00:21:45,039 --> 00:21:48,159
the big difference as well is that the

00:21:46,799 --> 00:21:50,559
other two solutions provide

00:21:48,159 --> 00:21:52,720
some boxing solutions which is important

00:21:50,559 --> 00:21:55,760
because here we're talking about

00:21:52,720 --> 00:21:57,760
users installing binaries from random

00:21:55,760 --> 00:22:01,039
places from the interwebs

00:21:57,760 --> 00:22:03,440
so having some kind of security

00:22:01,039 --> 00:22:04,960
is is a good idea app image leaves that

00:22:03,440 --> 00:22:07,679
up to the system

00:22:04,960 --> 00:22:09,360
so well since it's retro compatible it

00:22:07,679 --> 00:22:10,880
means that on the normal systems you

00:22:09,360 --> 00:22:13,039
have nowadays there won't be

00:22:10,880 --> 00:22:15,360
any kind of of security so you will have

00:22:13,039 --> 00:22:16,320
to trust whoever you're downloading it

00:22:15,360 --> 00:22:18,559
from

00:22:16,320 --> 00:22:19,600
um maybe in the in the future this can

00:22:18,559 --> 00:22:21,919
be looked into

00:22:19,600 --> 00:22:22,799
um anyway you can talk about that with

00:22:21,919 --> 00:22:27,440
simon i i

00:22:22,799 --> 00:22:29,760
don't know anything about it um

00:22:27,440 --> 00:22:31,760
yeah we can look at uh the recipe for k

00:22:29,760 --> 00:22:36,080
develop for

00:22:31,760 --> 00:22:40,320
um for app image it's a bit

00:22:36,080 --> 00:22:41,520
a bit uh scary so i will just say

00:22:40,320 --> 00:22:44,080
take into account it's a complex

00:22:41,520 --> 00:22:46,159
application don't

00:22:44,080 --> 00:22:47,679
don't expect something big but it's

00:22:46,159 --> 00:22:49,600
basically a bash script

00:22:47,679 --> 00:22:50,799
so uh i don't know if you saw there was

00:22:49,600 --> 00:22:52,799
a docker thing

00:22:50,799 --> 00:22:55,200
before the idea is that you create a

00:22:52,799 --> 00:22:56,880
docker with a very old linux system such

00:22:55,200 --> 00:23:00,159
as centos 6 i think it's

00:22:56,880 --> 00:23:02,320
they're using and then you compile your

00:23:00,159 --> 00:23:05,360
pool you compile all of the dependencies

00:23:02,320 --> 00:23:09,840
you install them somewhere and then

00:23:05,360 --> 00:23:09,840
out of it you create the the package

00:23:10,559 --> 00:23:13,840
so as you see it's what i was saying

00:23:12,799 --> 00:23:15,520
it's

00:23:13,840 --> 00:23:16,960
the linux we're talking about we're

00:23:15,520 --> 00:23:17,679
talking about things that have been

00:23:16,960 --> 00:23:20,559
possible to do

00:23:17,679 --> 00:23:23,600
on linux since long time it's just we're

00:23:20,559 --> 00:23:26,880
doing it now because now it's trendy and

00:23:23,600 --> 00:23:28,640
10 years ago it wasn't trendy but

00:23:26,880 --> 00:23:30,159
some of these things probably should or

00:23:28,640 --> 00:23:33,600
could have been able to be done

00:23:30,159 --> 00:23:36,400
back then then on android we're doing

00:23:33,600 --> 00:23:36,400
something similar

00:23:37,440 --> 00:23:41,840
android i started working on it with the

00:23:40,799 --> 00:23:44,000
idea that it's

00:23:41,840 --> 00:23:45,360
when you create the when you develop the

00:23:44,000 --> 00:23:47,520
software

00:23:45,360 --> 00:23:49,039
on using the same build system and build

00:23:47,520 --> 00:23:50,720
directory you get to

00:23:49,039 --> 00:23:52,240
generate the apk which is the thing you

00:23:50,720 --> 00:23:55,200
send to the device or

00:23:52,240 --> 00:23:56,400
to the app store so it's part of the

00:23:55,200 --> 00:23:59,440
development process

00:23:56,400 --> 00:24:02,240
um here it's the documentation i

00:23:59,440 --> 00:24:02,960
i don't i don't know of any project that

00:24:02,240 --> 00:24:06,320
has

00:24:02,960 --> 00:24:07,919
has scripted it's obviously possibly

00:24:06,320 --> 00:24:10,000
possible to script you just need to

00:24:07,919 --> 00:24:13,600
script cmake make make install

00:24:10,000 --> 00:24:16,159
and then make create apk this is all the

00:24:13,600 --> 00:24:18,080
documentation we have

00:24:16,159 --> 00:24:19,440
what we tried there is to make sure that

00:24:18,080 --> 00:24:22,640
it's the the same

00:24:19,440 --> 00:24:23,840
development process that you use on on

00:24:22,640 --> 00:24:26,080
on linux

00:24:23,840 --> 00:24:28,240
interestingly it's the opposite way of

00:24:26,080 --> 00:24:30,000
how all of these systems work on on flat

00:24:28,240 --> 00:24:32,640
pack they created their own tooling

00:24:30,000 --> 00:24:33,120
so if you want to develop using flat

00:24:32,640 --> 00:24:35,600
pack

00:24:33,120 --> 00:24:37,440
from your application from k develop

00:24:35,600 --> 00:24:38,960
well what you should end up doing or you

00:24:37,440 --> 00:24:40,880
would end up doing is calling the

00:24:38,960 --> 00:24:42,799
flat pack tools that we'll call the

00:24:40,880 --> 00:24:44,640
source code somewhere

00:24:42,799 --> 00:24:46,960
but you won't be able you won't be

00:24:44,640 --> 00:24:48,400
calling make theoretically

00:24:46,960 --> 00:24:50,159
or you will be calling me through

00:24:48,400 --> 00:24:52,640
flatback so that uh

00:24:50,159 --> 00:24:55,120
things happen on what we're doing on

00:24:52,640 --> 00:24:59,600
android is we're just using normalcmake

00:24:55,120 --> 00:24:59,600
and cross compilation on on android

00:24:59,760 --> 00:25:05,760
os x um the new trendy thing

00:25:03,039 --> 00:25:07,279
on on the kd cross compilation world

00:25:05,760 --> 00:25:08,559
nowadays is to use something we call

00:25:07,279 --> 00:25:12,480
emerge

00:25:08,559 --> 00:25:15,600
this is um this is kate i think

00:25:12,480 --> 00:25:17,120
i'm not seeing it from here yeah so here

00:25:15,600 --> 00:25:18,720
you see there's a weird loop it's

00:25:17,120 --> 00:25:20,640
because they try to compile

00:25:18,720 --> 00:25:22,880
k wright and kate on the on the same

00:25:20,640 --> 00:25:25,440
script but basically what it does is

00:25:22,880 --> 00:25:25,440
um

00:25:26,799 --> 00:25:30,320
that's the icons uh remove the things

00:25:28,880 --> 00:25:33,520
they don't want and then

00:25:30,320 --> 00:25:33,520
they create the dmg

00:25:35,440 --> 00:25:41,520
with the mac deployed cute thing

00:25:38,720 --> 00:25:42,320
um yeah that's only for deploying isn't

00:25:41,520 --> 00:25:45,760
it

00:25:42,320 --> 00:25:48,159
well the there's been this tool for

00:25:45,760 --> 00:25:48,799
and i forgot windows but what i wanted

00:25:48,159 --> 00:25:51,039
to say

00:25:48,799 --> 00:25:52,720
is that on osx on windows we're using

00:25:51,039 --> 00:25:53,840
some tool that was created for the kd

00:25:52,720 --> 00:25:55,440
windows guys

00:25:53,840 --> 00:25:57,039
that basically pulls all of the

00:25:55,440 --> 00:26:00,400
dependencies and

00:25:57,039 --> 00:26:02,480
outputs lots of binaries and from there

00:26:00,400 --> 00:26:06,080
we create the formats that

00:26:02,480 --> 00:26:10,000
are used for on those platforms

00:26:06,080 --> 00:26:12,159
let's say an msi for windows and dmg for

00:26:10,000 --> 00:26:14,720
for for all sex but what we're trying

00:26:12,159 --> 00:26:15,520
here is on on all of those platforms to

00:26:14,720 --> 00:26:17,279
be

00:26:15,520 --> 00:26:18,960
like the most native as possible right

00:26:17,279 --> 00:26:21,360
like to make sure that the

00:26:18,960 --> 00:26:23,039
what the user gets from us is something

00:26:21,360 --> 00:26:24,480
similar that what the user would get

00:26:23,039 --> 00:26:28,480
from another

00:26:24,480 --> 00:26:28,480
normal project in in the platform

00:26:28,559 --> 00:26:33,440
so to sum up

00:26:31,760 --> 00:26:35,279
we have an opportunity to create a

00:26:33,440 --> 00:26:38,960
better flow a better experience

00:26:35,279 --> 00:26:41,200
between what the user has

00:26:38,960 --> 00:26:43,279
with and what the developer is offering

00:26:41,200 --> 00:26:44,080
and what the developer can offer when

00:26:43,279 --> 00:26:46,880
the user

00:26:44,080 --> 00:26:46,880
is not happy

00:26:48,240 --> 00:26:51,600
we don't want to compromise the

00:26:49,279 --> 00:26:54,559
stability actually having

00:26:51,600 --> 00:26:56,799
applications outside of the system

00:26:54,559 --> 00:26:59,279
construction part

00:26:56,799 --> 00:27:01,200
i think that it's a good opportunity for

00:26:59,279 --> 00:27:04,960
so that distributions can

00:27:01,200 --> 00:27:08,240
rely more on lts services and services

00:27:04,960 --> 00:27:10,240
solutions so you won't have to upgrade

00:27:08,240 --> 00:27:10,559
your linux distribution so often as soon

00:27:10,240 --> 00:27:12,400
as

00:27:10,559 --> 00:27:14,159
you can just upgrade the applications

00:27:12,400 --> 00:27:16,880
which is actually what you often

00:27:14,159 --> 00:27:17,279
want to have up to date right that what

00:27:16,880 --> 00:27:19,360
you

00:27:17,279 --> 00:27:20,880
usually interact with it's with with

00:27:19,360 --> 00:27:23,120
kate you want to have all of the

00:27:20,880 --> 00:27:24,559
features on kt on kdevelop you don't

00:27:23,120 --> 00:27:28,399
want to miss out on those

00:27:24,559 --> 00:27:28,880
but one is not often really eager to

00:27:28,399 --> 00:27:32,720
have

00:27:28,880 --> 00:27:35,120
um the last version of network manager

00:27:32,720 --> 00:27:36,880
it can it can happen and on those cases

00:27:35,120 --> 00:27:37,679
you will have all of the linux

00:27:36,880 --> 00:27:40,720
possibilities

00:27:37,679 --> 00:27:43,279
but i think that for a user it will

00:27:40,720 --> 00:27:43,840
the bundling solution makes uh the most

00:27:43,279 --> 00:27:46,880
sense

00:27:43,840 --> 00:27:50,480
when when using an

00:27:46,880 --> 00:27:52,399
lts solution which

00:27:50,480 --> 00:27:53,600
means happy users and happy developers

00:27:52,399 --> 00:27:56,640
because we have this

00:27:53,600 --> 00:27:58,880
uh cycle of feedback solved

00:27:56,640 --> 00:28:00,720
and the the system distributors they can

00:27:58,880 --> 00:28:02,960
focus on making actual

00:28:00,720 --> 00:28:04,559
secure and solid systems and that they

00:28:02,960 --> 00:28:06,080
don't have to be worried about the

00:28:04,559 --> 00:28:07,679
packaging of all the applications which

00:28:06,080 --> 00:28:10,240
i understand it's a problem

00:28:07,679 --> 00:28:12,000
at least to some level right because

00:28:10,240 --> 00:28:12,880
then they need to have these two heads

00:28:12,000 --> 00:28:16,000
like the people

00:28:12,880 --> 00:28:17,679
are asking them for newer releases but

00:28:16,000 --> 00:28:19,360
what their problem usually is is that

00:28:17,679 --> 00:28:23,520
they want to offer really good

00:28:19,360 --> 00:28:27,039
ssl a really good kernel a really good

00:28:23,520 --> 00:28:28,240
base but uh an application doesn't

00:28:27,039 --> 00:28:32,000
applications don't play by the

00:28:28,240 --> 00:28:33,440
same rules then as a as as kde we need

00:28:32,000 --> 00:28:35,679
to also decide a bit

00:28:33,440 --> 00:28:37,760
how we would like to work like is it

00:28:35,679 --> 00:28:41,039
really the the developers who need to be

00:28:37,760 --> 00:28:41,520
providing those packages or should it be

00:28:41,039 --> 00:28:44,720
the

00:28:41,520 --> 00:28:46,159
ci system or the cd so continuous

00:28:44,720 --> 00:28:48,080
distribution system

00:28:46,159 --> 00:28:50,000
or should we the be the release team

00:28:48,080 --> 00:28:51,840
that they're outputting all of that

00:28:50,000 --> 00:28:53,279
i mean everything has ups and downs

00:28:51,840 --> 00:28:56,399
nobody likes to

00:28:53,279 --> 00:28:56,880
have to test a package or nobody likes

00:28:56,399 --> 00:29:00,640
to

00:28:56,880 --> 00:29:02,399
have to well compile something weird but

00:29:00,640 --> 00:29:05,440
then on the other hand

00:29:02,399 --> 00:29:07,520
uh it's it's useful and it it

00:29:05,440 --> 00:29:08,559
will give us the that experience i was

00:29:07,520 --> 00:29:09,919
talking about that

00:29:08,559 --> 00:29:12,720
you're testing the same thing that the

00:29:09,919 --> 00:29:14,240
user is i think it's related to the

00:29:12,720 --> 00:29:16,640
that problem that we want to make sure

00:29:14,240 --> 00:29:19,440
as well that

00:29:16,640 --> 00:29:21,600
those new systems that are starting are

00:29:19,440 --> 00:29:22,080
really part of the development process

00:29:21,600 --> 00:29:25,440
so

00:29:22,080 --> 00:29:28,080
it's not ideal that the developer is

00:29:25,440 --> 00:29:28,960
using for example let's say make make

00:29:28,080 --> 00:29:30,720
install for

00:29:28,960 --> 00:29:32,320
for using his development and then when

00:29:30,720 --> 00:29:34,720
he makes the final version

00:29:32,320 --> 00:29:35,840
he starts using the snappy or flatbug or

00:29:34,720 --> 00:29:37,919
whatever he's using

00:29:35,840 --> 00:29:39,840
i think ideally the developer should be

00:29:37,919 --> 00:29:40,880
compiling every time the the the thing

00:29:39,840 --> 00:29:43,279
that will be

00:29:40,880 --> 00:29:44,399
tested in the end and that will also

00:29:43,279 --> 00:29:46,000
make sure that

00:29:44,399 --> 00:29:47,520
the the thing that has been tested and

00:29:46,000 --> 00:29:48,960
that has been developed on

00:29:47,520 --> 00:29:50,960
is the thing that you're using you don't

00:29:48,960 --> 00:29:53,520
want that on the last step you

00:29:50,960 --> 00:29:54,720
to see that lots of assumptions are

00:29:53,520 --> 00:29:58,240
broken

00:29:54,720 --> 00:30:01,360
and then we need to make sure that we

00:29:58,240 --> 00:30:03,200
don't bite our own hands

00:30:01,360 --> 00:30:05,440
we need to make sure that security isn't

00:30:03,200 --> 00:30:06,720
compromised linux hasn't had lots of

00:30:05,440 --> 00:30:08,960
problems because of

00:30:06,720 --> 00:30:09,840
viruses and one of the big reasons for

00:30:08,960 --> 00:30:11,200
that has been that

00:30:09,840 --> 00:30:13,360
most of the software we've been getting

00:30:11,200 --> 00:30:15,120
is from distributions at least that's my

00:30:13,360 --> 00:30:17,279
impression you can correct me if i

00:30:15,120 --> 00:30:18,720
if you think i'm wrong but that's my

00:30:17,279 --> 00:30:21,760
impression

00:30:18,720 --> 00:30:22,240
uh having things coming from elsewhere

00:30:21,760 --> 00:30:25,120
could be

00:30:22,240 --> 00:30:26,480
a problem uh all of us we've tried if

00:30:25,120 --> 00:30:27,840
you use android you see that

00:30:26,480 --> 00:30:30,720
whenever you want to install something

00:30:27,840 --> 00:30:33,919
that coming from outside they made you

00:30:30,720 --> 00:30:35,840
check out some checkbox that uh

00:30:33,919 --> 00:30:37,360
that is saying basically don't let

00:30:35,840 --> 00:30:38,960
things come from the outside it's not

00:30:37,360 --> 00:30:39,919
that things from the outside are but by

00:30:38,960 --> 00:30:42,320
definition

00:30:39,919 --> 00:30:43,120
but while trusting human nature is not

00:30:42,320 --> 00:30:46,880
also

00:30:43,120 --> 00:30:47,279
ideal on every case we also need to make

00:30:46,880 --> 00:30:50,559
sure

00:30:47,279 --> 00:30:52,559
that adopting these solutions is bad for

00:30:50,559 --> 00:30:53,600
uh when it comes to integrating with the

00:30:52,559 --> 00:30:55,200
system

00:30:53,600 --> 00:30:57,360
being in a sandbox environment is good

00:30:55,200 --> 00:31:01,120
it's great makes everything

00:30:57,360 --> 00:31:03,679
uh more makes everything safer

00:31:01,120 --> 00:31:04,880
but then it it is a barrier of

00:31:03,679 --> 00:31:05,679
communication you have with the whole

00:31:04,880 --> 00:31:08,640
system

00:31:05,679 --> 00:31:11,679
uh it's not by but by definition but it

00:31:08,640 --> 00:31:14,000
will it will pose problems in

00:31:11,679 --> 00:31:14,960
moments and we need to solve them and

00:31:14,000 --> 00:31:17,200
it's good that we

00:31:14,960 --> 00:31:18,559
solve them as early as possible so we

00:31:17,200 --> 00:31:21,440
see them coming

00:31:18,559 --> 00:31:22,480
an example is that it's really common

00:31:21,440 --> 00:31:25,760
nowadays that

00:31:22,480 --> 00:31:27,200
uh applications talk with things in the

00:31:25,760 --> 00:31:30,159
system through debuss

00:31:27,200 --> 00:31:32,000
that doesn't really work by default on

00:31:30,159 --> 00:31:35,600
on any of the sandboxing systems not

00:31:32,000 --> 00:31:38,320
on on flat pack not on snappy

00:31:35,600 --> 00:31:40,720
it's possible to do and uh on the test

00:31:38,320 --> 00:31:42,159
the test we've been doing it's it can be

00:31:40,720 --> 00:31:42,799
done but then it's something you need to

00:31:42,159 --> 00:31:45,039
request

00:31:42,799 --> 00:31:46,320
and it's something that you need to take

00:31:45,039 --> 00:31:49,440
into account

00:31:46,320 --> 00:31:50,399
um that's all and then system resources

00:31:49,440 --> 00:31:52,640
we don't want that

00:31:50,399 --> 00:31:54,399
uh the user by adopting these

00:31:52,640 --> 00:31:56,880
technologies he starts wasting his

00:31:54,399 --> 00:31:59,120
system resources that he has paid for

00:31:56,880 --> 00:32:00,799
when buying his laptop just because

00:31:59,120 --> 00:32:01,600
there's a new fancy technology we don't

00:32:00,799 --> 00:32:03,519
want

00:32:01,600 --> 00:32:06,000
less memory by default we don't want

00:32:03,519 --> 00:32:08,080
less disk space i mean

00:32:06,000 --> 00:32:10,480
we need to make sure that we're doing

00:32:08,080 --> 00:32:12,240
good good use of the resources

00:32:10,480 --> 00:32:13,600
some might be lost but we don't we need

00:32:12,240 --> 00:32:17,039
to make sure we're not

00:32:13,600 --> 00:32:20,080
going back by orders of magnitude that's

00:32:17,039 --> 00:32:22,320
that's my perception

00:32:20,080 --> 00:32:23,360
and now if you have any questions you

00:32:22,320 --> 00:32:28,080
can

00:32:23,360 --> 00:32:29,679
make any questions

00:32:28,080 --> 00:32:31,600
you presented like three different

00:32:29,679 --> 00:32:35,360
solutions right i was

00:32:31,600 --> 00:32:37,440
uh wondering if any of these have um

00:32:35,360 --> 00:32:39,600
have an answer for like optional

00:32:37,440 --> 00:32:41,200
dependencies because traditional

00:32:39,600 --> 00:32:43,440
distributions had like you had k

00:32:41,200 --> 00:32:46,159
developed and you have the php plugin

00:32:43,440 --> 00:32:48,399
which you can install and then you get a

00:32:46,159 --> 00:32:50,799
new feature in k develop

00:32:48,399 --> 00:32:53,360
can you do that with this it's possible

00:32:50,799 --> 00:32:56,559
to do it's not trivial

00:32:53,360 --> 00:32:58,159
so both of them they have on snappy they

00:32:56,559 --> 00:33:02,320
call them

00:32:58,159 --> 00:33:03,279
um interfaces yes on on on flat pack i

00:33:02,320 --> 00:33:05,600
don't remember

00:33:03,279 --> 00:33:05,600
you know

00:33:06,640 --> 00:33:10,320
they don't really have that concept yet

00:33:08,559 --> 00:33:12,240
it's pretty

00:33:10,320 --> 00:33:14,559
yeah well anyway the problem is that you

00:33:12,240 --> 00:33:16,960
need to make sure that the

00:33:14,559 --> 00:33:18,399
the whole build dependency 3 is the same

00:33:16,960 --> 00:33:20,720
right because otherwise people

00:33:18,399 --> 00:33:22,880
i have people things may not work

00:33:20,720 --> 00:33:24,320
together properly and then you would

00:33:22,880 --> 00:33:26,640
have problems and i think that one of

00:33:24,320 --> 00:33:28,720
the interesting parts of this is that

00:33:26,640 --> 00:33:31,200
maybe then it's he develops

00:33:28,720 --> 00:33:33,200
responsibility to offer php in

00:33:31,200 --> 00:33:34,480
in in the bundle i mean it shouldn't be

00:33:33,200 --> 00:33:37,279
that hard right

00:33:34,480 --> 00:33:38,880
um well depends on the case right there

00:33:37,279 --> 00:33:40,000
is this desktop environment i think it's

00:33:38,880 --> 00:33:42,080
called plasma

00:33:40,000 --> 00:33:43,679
which has plugins that are called

00:33:42,080 --> 00:33:45,279
plasmoids and you don't want to install

00:33:43,679 --> 00:33:48,240
them all by default right

00:33:45,279 --> 00:33:49,200
so well another another interesting

00:33:48,240 --> 00:33:51,279
discussion is

00:33:49,200 --> 00:33:53,039
whether it would make sense to have a

00:33:51,279 --> 00:33:54,880
plasma as

00:33:53,039 --> 00:33:56,960
as a process or the plasma shell in a

00:33:54,880 --> 00:33:59,039
bundle right it would have good

00:33:56,960 --> 00:34:00,480
things but then plasma especially it's

00:33:59,039 --> 00:34:01,600
one of those things that connects to

00:34:00,480 --> 00:34:04,960
everything like

00:34:01,600 --> 00:34:06,559
crazy and well i don't know we should

00:34:04,960 --> 00:34:07,360
look into that at least at some point

00:34:06,559 --> 00:34:08,960
maybe

00:34:07,360 --> 00:34:11,119
plasma would also be the thing which

00:34:08,960 --> 00:34:14,560
provides the portable interfaces for

00:34:11,119 --> 00:34:15,280
the actual sandbox application so it

00:34:14,560 --> 00:34:17,599
can't be

00:34:15,280 --> 00:34:20,320
in the sandbox it must be outside

00:34:17,599 --> 00:34:23,280
challenge accepted

00:34:20,320 --> 00:34:23,280
 i said that

00:34:23,520 --> 00:34:25,760
sorry

00:34:32,639 --> 00:34:35,679
i think you need something outside which

00:34:35,280 --> 00:34:37,760
would

00:34:35,679 --> 00:34:39,280
present you a window like for file

00:34:37,760 --> 00:34:41,919
dialogue or something like that

00:34:39,280 --> 00:34:44,240
at least something serious right sorry

00:34:41,919 --> 00:34:47,839
that could be queen as well right

00:34:44,240 --> 00:34:49,760
what queen what is the window manager

00:34:47,839 --> 00:34:51,280
now okay yeah yeah that's that's gonna

00:34:49,760 --> 00:34:54,079
be awesome yeah

00:34:51,280 --> 00:34:55,200
i i doubt quinn we can make it uh a

00:34:54,079 --> 00:34:56,960
bundle

00:34:55,200 --> 00:34:59,599
maybe we can i don't know i mean we

00:34:56,960 --> 00:35:00,400
definitely can we can also have a demon

00:34:59,599 --> 00:35:03,119
right

00:35:00,400 --> 00:35:05,680
it's it's not like we're forced to take

00:35:03,119 --> 00:35:05,680
an approach

00:35:06,000 --> 00:35:09,680
any more questions yeah

00:35:13,359 --> 00:35:18,960
hey i'm simon so i'm the app image guy

00:35:16,480 --> 00:35:20,720
i just wanted to clarify one point about

00:35:18,960 --> 00:35:23,359
app image which is actually

00:35:20,720 --> 00:35:23,760
not so much a system for building what's

00:35:23,359 --> 00:35:27,119
going

00:35:23,760 --> 00:35:29,520
into the image but really a format for

00:35:27,119 --> 00:35:30,160
the image itself so it's it's a bundling

00:35:29,520 --> 00:35:32,800
format

00:35:30,160 --> 00:35:34,560
which doesn't define what you put inside

00:35:32,800 --> 00:35:35,920
which is entirely up to you you can

00:35:34,560 --> 00:35:38,640
think of it as

00:35:35,920 --> 00:35:40,560
basically a disk image that is mounting

00:35:38,640 --> 00:35:42,960
itself when you execute it

00:35:40,560 --> 00:35:44,640
and then executes whatever you put into

00:35:42,960 --> 00:35:47,280
that disk image

00:35:44,640 --> 00:35:50,320
so far the project hasn't been about how

00:35:47,280 --> 00:35:53,440
you create that stuff that goes into it

00:35:50,320 --> 00:35:56,480
so in theory you could use existing

00:35:53,440 --> 00:35:59,520
dab files unpack them put them inside

00:35:56,480 --> 00:36:02,240
or you can go the way shown here that's

00:35:59,520 --> 00:36:03,440
obviously much more work by spinning up

00:36:02,240 --> 00:36:05,599
a centos

00:36:03,440 --> 00:36:06,560
virtual machine and compiling stuff

00:36:05,599 --> 00:36:09,920
there

00:36:06,560 --> 00:36:10,800
so by the way i will be holding a

00:36:09,920 --> 00:36:13,359
lightning talk

00:36:10,800 --> 00:36:15,599
about app image it's actually the very

00:36:13,359 --> 00:36:17,520
last one in the very last room today

00:36:15,599 --> 00:36:20,079
so if you have more questions or would

00:36:17,520 --> 00:36:22,160
like to chat about app image i would be

00:36:20,079 --> 00:36:27,280
happy to see you there

00:36:22,160 --> 00:36:27,280
thank you another key

00:36:28,240 --> 00:36:32,240
so there seems that we are back at

00:36:29,920 --> 00:36:34,160
having two standards

00:36:32,240 --> 00:36:35,359
at least to do the same thing maybe

00:36:34,160 --> 00:36:38,079
three

00:36:35,359 --> 00:36:40,320
if you had to bet money where would you

00:36:38,079 --> 00:36:43,359
bet your money

00:36:40,320 --> 00:36:46,079
i don't want to oh come on

00:36:43,359 --> 00:36:47,359
be very careful i'm not i'm not gonna

00:36:46,079 --> 00:36:48,720
say that

00:36:47,359 --> 00:36:50,720
you can't you'll have to pay for a lot

00:36:48,720 --> 00:36:55,839
of beer you wanna answer and

00:36:50,720 --> 00:36:55,839
it's not gonna be recorded as well

00:36:59,280 --> 00:37:09,839
no more questions anyone else

00:37:02,800 --> 00:37:09,839
no one okay that's you thanks thank you

00:37:22,640 --> 00:37:24,720

YouTube URL: https://www.youtube.com/watch?v=PUuyaIiPhAI


