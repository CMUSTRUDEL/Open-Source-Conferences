Title: Aleix Pol Gonzalez - Accelerating Plasma - Akademy 2019
Publication date: 2020-05-25
Playlist: Akademy 2019
Description: 
	We will explain how we got to a faster starting Plasma session. How we analysed the problems we were facing, how they were understood and finally what changes happened to get to where we are today.
Captions: 
	00:00:00,060 --> 00:00:07,919
so actually I'm not sure if I've talked

00:00:05,850 --> 00:00:11,099
about plasma in the past at least plasma

00:00:07,919 --> 00:00:14,309
specifically but let me introduce myself

00:00:11,099 --> 00:00:16,410
first my name is Alice Paul my

00:00:14,309 --> 00:00:16,980
description is much more different than

00:00:16,410 --> 00:00:19,199
before

00:00:16,980 --> 00:00:21,590
I mean besides organizing sprints I do

00:00:19,199 --> 00:00:24,990
other things with my life

00:00:21,590 --> 00:00:29,429
well that's my email I want the gdb

00:00:24,990 --> 00:00:31,170
board I've been developing KD for over

00:00:29,429 --> 00:00:34,890
ten years I put over ten years here but

00:00:31,170 --> 00:00:36,110
it's actually twelve I'm starting to

00:00:34,890 --> 00:00:39,660
feel old

00:00:36,110 --> 00:00:41,489
we're starting yeah and I'm employed by

00:00:39,660 --> 00:00:43,620
this isn't actually my realization that

00:00:41,489 --> 00:00:46,110
I'm starting to feel old was that not

00:00:43,620 --> 00:00:48,090
only have been for ten years again a

00:00:46,110 --> 00:00:50,789
developer but have been more than half

00:00:48,090 --> 00:00:55,379
working portable systems which is weird

00:00:50,789 --> 00:00:57,570
milestone in my life anyhow I develop

00:00:55,379 --> 00:00:59,910
things and actually the project I'm

00:00:57,570 --> 00:01:01,620
going to talk about it here has been

00:00:59,910 --> 00:01:05,580
something I've been doing for bruising

00:01:01,620 --> 00:01:09,630
systems specifically like I do my own

00:01:05,580 --> 00:01:11,610
time as well yeah alright so I'm gonna

00:01:09,630 --> 00:01:13,530
talk here well first of all I'm gonna

00:01:11,610 --> 00:01:15,869
talk about what I did for blue systems

00:01:13,530 --> 00:01:17,820
but is not only me being working on this

00:01:15,869 --> 00:01:20,159
actually not only in blue systems and

00:01:17,820 --> 00:01:23,490
not only in KDE there's several people

00:01:20,159 --> 00:01:26,509
who have been worried about performance

00:01:23,490 --> 00:01:32,610
in the past it's a recurring subject for

00:01:26,509 --> 00:01:34,740
software engineer I guess and but I'm

00:01:32,610 --> 00:01:36,900
gonna talk about a bit about where we

00:01:34,740 --> 00:01:40,049
come from the tools have been using

00:01:36,900 --> 00:01:44,310
because well talking to you guys about

00:01:40,049 --> 00:01:46,470
success story I mean it's kind of a nice

00:01:44,310 --> 00:01:49,049
heart feeling but it's not that

00:01:46,470 --> 00:01:51,210
interesting maybe so we'll be talking

00:01:49,049 --> 00:01:54,960
about the tools we used in case you want

00:01:51,210 --> 00:01:57,060
to optimize something and we will end up

00:01:54,960 --> 00:02:02,040
talking a bit about the state we're in

00:01:57,060 --> 00:02:05,130
now and where to go from from here for

00:02:02,040 --> 00:02:08,610
me I didn't really look at that's casma

00:02:05,130 --> 00:02:10,440
startup like ever like I said earlier or

00:02:08,610 --> 00:02:11,650
maybe hinted that I wasn't that much of

00:02:10,440 --> 00:02:15,379
a plasma developer

00:02:11,650 --> 00:02:22,099
until well until this thing came into

00:02:15,379 --> 00:02:24,409
the your the official who are of until

00:02:22,099 --> 00:02:26,180
this device came into well I would say

00:02:24,409 --> 00:02:31,430
my hands but actually it would be my

00:02:26,180 --> 00:02:33,860
boss's hands they talked about it before

00:02:31,430 --> 00:02:35,810
on the other talk basically well because

00:02:33,860 --> 00:02:39,010
they're co-workers so they had the same

00:02:35,810 --> 00:02:42,950
problem and also it's a very interesting

00:02:39,010 --> 00:02:46,069
product right like I said it's a very

00:02:42,950 --> 00:02:52,099
cheap laptop and well we do a lot of

00:02:46,069 --> 00:02:55,430
have a lot of laptop users and well in

00:02:52,099 --> 00:02:57,769
general you develop on I mean this

00:02:55,430 --> 00:03:00,920
laptop is probably 2,000 euros

00:02:57,769 --> 00:03:04,129
I cannot extrapolate every experience I

00:03:00,920 --> 00:03:06,049
have with my laptop to what

00:03:04,129 --> 00:03:08,810
well other people other users are gonna

00:03:06,049 --> 00:03:10,790
have right for example I remember I am

00:03:08,810 --> 00:03:12,739
NOT hearing that much anymore but some

00:03:10,790 --> 00:03:14,599
time ago you would get these people

00:03:12,739 --> 00:03:18,169
coming with a spinning disk on their

00:03:14,599 --> 00:03:21,910
system and saying well my something

00:03:18,169 --> 00:03:24,950
takes a really long time to start and

00:03:21,910 --> 00:03:27,319
yeah I mean my laptop cannot reproduce

00:03:24,950 --> 00:03:29,180
that and I wouldn't I don't know get a

00:03:27,319 --> 00:03:31,459
super old computer to maybe that would

00:03:29,180 --> 00:03:35,470
happen the nice thing to do any case the

00:03:31,459 --> 00:03:39,340
big problem with this device was that

00:03:35,470 --> 00:03:41,540
well I Oh was super slow

00:03:39,340 --> 00:03:43,790
actually it was even slower for us

00:03:41,540 --> 00:03:45,919
because since we needed to iterate on

00:03:43,790 --> 00:03:48,560
the device we were testing mostly from

00:03:45,919 --> 00:03:52,280
the SD card which actually wasn't that

00:03:48,560 --> 00:03:53,750
much slower than the internal disk on on

00:03:52,280 --> 00:03:56,599
the device because internal disk of the

00:03:53,750 --> 00:03:59,450
device is also pretty slow but it was

00:03:56,599 --> 00:04:03,639
quite slow super slow definitely much

00:03:59,450 --> 00:04:05,989
slower than any other laptop so the

00:04:03,639 --> 00:04:09,440
multi profiling with it the improvements

00:04:05,989 --> 00:04:11,810
we did probably we're only seen mostly

00:04:09,440 --> 00:04:15,949
on the i/o part actually that other

00:04:11,810 --> 00:04:18,260
laptop it was or is dual core and

00:04:15,949 --> 00:04:22,820
several gigabytes of RAM already so I

00:04:18,260 --> 00:04:24,510
mean it's it's it's decent hardware it

00:04:22,820 --> 00:04:27,330
just took long

00:04:24,510 --> 00:04:31,680
trip to just get things from from from

00:04:27,330 --> 00:04:33,120
the operating system and back right one

00:04:31,680 --> 00:04:35,760
thing for example we started looking at

00:04:33,120 --> 00:04:38,460
ask a package k packets you you will

00:04:35,760 --> 00:04:43,020
know that plasma has been using it's a

00:04:38,460 --> 00:04:46,380
framework that we use for having small

00:04:43,020 --> 00:04:49,350
plugins that people contribute maybe

00:04:46,380 --> 00:04:50,970
like all plasmoid for example come from

00:04:49,350 --> 00:04:53,310
and keep packets but it's not only that

00:04:50,970 --> 00:04:55,200
there's several pieces of our

00:04:53,310 --> 00:04:57,030
architecture that that will be using it

00:04:55,200 --> 00:04:59,580
and for example we found in this case

00:04:57,030 --> 00:05:02,370
that were reading some of the metadata

00:04:59,580 --> 00:05:04,410
files several times and like I said but

00:05:02,370 --> 00:05:06,540
reading from this was super slow so

00:05:04,410 --> 00:05:10,230
while cutting down on that was a huge

00:05:06,540 --> 00:05:12,180
advantage in this laptop or laptop I had

00:05:10,230 --> 00:05:14,400
back then what breathing I mean it

00:05:12,180 --> 00:05:16,800
obviously is lower right but it's very

00:05:14,400 --> 00:05:19,110
different if it's a slowdown of one

00:05:16,800 --> 00:05:21,660
millisecond or 100 milliseconds when

00:05:19,110 --> 00:05:26,190
your laptop is doing things super super

00:05:21,660 --> 00:05:28,320
quickly what we did there was that

00:05:26,190 --> 00:05:31,020
making sure that we don't read too often

00:05:28,320 --> 00:05:32,490
we don't write too often because when

00:05:31,020 --> 00:05:35,760
when we write we have to read again

00:05:32,490 --> 00:05:38,040
because well it's desktop files we have

00:05:35,760 --> 00:05:41,670
another problem with k package which is

00:05:38,040 --> 00:05:43,980
that it doesn't depend on on k config

00:05:41,670 --> 00:05:47,010
because it's a tier 1 package in k

00:05:43,980 --> 00:05:47,490
config we have the good desktop file

00:05:47,010 --> 00:05:51,900
Pazza

00:05:47,490 --> 00:05:54,210
it relies on a path k config plaza we

00:05:51,900 --> 00:05:58,040
have in in another framework which is

00:05:54,210 --> 00:06:01,620
slightly slower so we actually started

00:05:58,040 --> 00:06:03,060
converting these metadata files into

00:06:01,620 --> 00:06:05,490
JSON which is actually what we're using

00:06:03,060 --> 00:06:09,630
for the rest of of kit plugins that we

00:06:05,490 --> 00:06:11,220
have on while all over kitty so we will

00:06:09,630 --> 00:06:13,560
see that if you have k packages we're

00:06:11,220 --> 00:06:15,810
installing right now the desktop files

00:06:13,560 --> 00:06:18,830
and the json files is because it's

00:06:15,810 --> 00:06:21,210
actually because of that and ieave if

00:06:18,830 --> 00:06:24,480
but just make sure that you're

00:06:21,210 --> 00:06:28,890
installing the metadata json file for

00:06:24,480 --> 00:06:30,810
your systems because what it will help a

00:06:28,890 --> 00:06:32,670
lot the loading although it's not

00:06:30,810 --> 00:06:36,459
technically necessary we fall back into

00:06:32,670 --> 00:06:39,559
desktop file if it's not available

00:06:36,459 --> 00:06:43,459
something we also started looking which

00:06:39,559 --> 00:06:47,509
is was a stock ad saki de is a script or

00:06:43,459 --> 00:06:53,629
was a script actually from well back in

00:06:47,509 --> 00:06:55,909
march 99 which is long ago and it grew

00:06:53,629 --> 00:06:58,039
all over the years like slowly but

00:06:55,909 --> 00:07:00,379
surely when when we started looking at

00:06:58,039 --> 00:07:04,909
this it was it wasn't like super old

00:07:00,379 --> 00:07:06,649
only but it also was yeah we somebody

00:07:04,909 --> 00:07:09,379
focused it at some point because we

00:07:06,649 --> 00:07:12,349
started working on Whelan and I mean I

00:07:09,379 --> 00:07:14,779
think if especially in bash was boring

00:07:12,349 --> 00:07:17,809
so it was much easier to duplicate all

00:07:14,779 --> 00:07:21,229
of the code so I mean that's what we end

00:07:17,809 --> 00:07:23,749
up finding here

00:07:21,229 --> 00:07:26,739
I moved something I'm missing something

00:07:23,749 --> 00:07:26,739
in my Speights

00:07:28,569 --> 00:07:39,009
oh it was all right well whatever I had

00:07:39,610 --> 00:07:44,989
yeah

00:07:40,819 --> 00:07:55,189
spoiler alert right all right let me see

00:07:44,989 --> 00:08:01,039
if I can offer sake well I fished

00:07:55,189 --> 00:08:03,259
the the URL where somebody started it in

00:08:01,039 --> 00:08:05,869
in SVN actually I think that it's not

00:08:03,259 --> 00:08:07,610
even the first version it's just the fur

00:08:05,869 --> 00:08:12,709
version I could find because it was

00:08:07,610 --> 00:08:14,809
coming from CVS like even longer ago can

00:08:12,709 --> 00:08:17,169
I add a new tab oh it's in the wrong

00:08:14,809 --> 00:08:17,169
screen

00:08:20,150 --> 00:08:27,270
well this is the first star kadhi I

00:08:23,250 --> 00:08:29,130
could find can you read anything well

00:08:27,270 --> 00:08:31,530
what it was doing back then was doing

00:08:29,130 --> 00:08:35,760
some K control in it starting an audio

00:08:31,530 --> 00:08:37,200
server starting a window managers sound

00:08:35,760 --> 00:08:41,490
WM someone I don't know what would that

00:08:37,200 --> 00:08:42,780
be then it had a sleep and which was for

00:08:41,490 --> 00:08:44,760
it because there's an ampersand in the

00:08:42,780 --> 00:08:47,940
end but it was still sleep and it was

00:08:44,760 --> 00:08:49,890
launching the K FM which was the key

00:08:47,940 --> 00:08:53,190
file manager which is what we used back

00:08:49,890 --> 00:08:55,890
then as a as what we use right now as

00:08:53,190 --> 00:08:58,170
plasma shell and then the K panel which

00:08:55,890 --> 00:09:01,230
was a different process you can see it

00:08:58,170 --> 00:09:03,810
there well that's the script that

00:09:01,230 --> 00:09:08,660
evolved into weird Frankenstein /

00:09:03,810 --> 00:09:16,140
monster over like 20 years essentially

00:09:08,660 --> 00:09:19,380
even even even forked basically there my

00:09:16,140 --> 00:09:23,070
task ended up being when I went back

00:09:19,380 --> 00:09:27,240
when we were doing one when we were

00:09:23,070 --> 00:09:29,670
doing the the pine book was making sure

00:09:27,240 --> 00:09:31,680
that I mean it was a like super long

00:09:29,670 --> 00:09:33,150
script doing a lot of setting a lot of

00:09:31,680 --> 00:09:35,160
environment variables launching

00:09:33,150 --> 00:09:37,470
processes checking the result of the

00:09:35,160 --> 00:09:39,810
launch process obviously like all of

00:09:37,470 --> 00:09:42,090
these calls since its bash it needs to

00:09:39,810 --> 00:09:43,740
like wait for the well first start the

00:09:42,090 --> 00:09:45,780
other process which would one would

00:09:43,740 --> 00:09:48,390
think it's it's fast and actually it's

00:09:45,780 --> 00:09:52,110
fast but I mean it's not as fast as just

00:09:48,390 --> 00:09:54,150
sending something to the processor like

00:09:52,110 --> 00:09:57,240
we do in C++ for example right it needs

00:09:54,150 --> 00:09:59,610
to one load a bunch of libraries and

00:09:57,240 --> 00:10:02,010
make sure that things happen then it was

00:09:59,610 --> 00:10:04,500
doing a lot of that what we did that

00:10:02,010 --> 00:10:06,120
time was add a bunch of ampersands on

00:10:04,500 --> 00:10:07,620
for example on things that we needed to

00:10:06,120 --> 00:10:16,350
make sure that they were launched at

00:10:07,620 --> 00:10:19,680
some point but well not necessarily not

00:10:16,350 --> 00:10:23,690
necessarily we didn't need to know if it

00:10:19,680 --> 00:10:23,690
had succeeded or or so

00:10:27,810 --> 00:10:32,500
then we also looked at clay see I don't

00:10:30,280 --> 00:10:36,550
know if it's tool you've looked at but

00:10:32,500 --> 00:10:38,890
it's super useful to make sure that what

00:10:36,550 --> 00:10:42,100
we're making the best use of cute that

00:10:38,890 --> 00:10:44,890
we want it has a bunch of plugins that

00:10:42,100 --> 00:10:45,730
will check whether what something could

00:10:44,890 --> 00:10:49,960
be done better

00:10:45,730 --> 00:10:52,780
it's a clang plug-in so it uses all of

00:10:49,960 --> 00:10:55,000
the knowledge that clank has about our

00:10:52,780 --> 00:10:58,270
source code which is actually like much

00:10:55,000 --> 00:11:00,190
more than ourselves well it gives you

00:10:58,270 --> 00:11:04,750
some warnings and hints and actually it

00:11:00,190 --> 00:11:07,270
even has some functionality for well

00:11:04,750 --> 00:11:09,400
it's called fixit's which basically

00:11:07,270 --> 00:11:12,100
means that it modifies your code with

00:11:09,400 --> 00:11:14,050
code that is theoretically better and

00:11:12,100 --> 00:11:19,270
then you get to decide if you commit

00:11:14,050 --> 00:11:21,640
that or report a bug we did a bunch of

00:11:19,270 --> 00:11:24,160
improvements there we did a lot of well

00:11:21,640 --> 00:11:29,530
like I was saying before making sure

00:11:24,160 --> 00:11:31,990
that we don't read too many files one

00:11:29,530 --> 00:11:34,120
thing we do which is a which is very

00:11:31,990 --> 00:11:36,310
powerful in KD click config every time

00:11:34,120 --> 00:11:39,520
that you open a config file it will fall

00:11:36,310 --> 00:11:43,300
back to Gd Global's file that may be

00:11:39,520 --> 00:11:44,290
installed by your system provider or by

00:11:43,300 --> 00:11:45,940
yourself

00:11:44,290 --> 00:11:48,340
there are there are some global

00:11:45,940 --> 00:11:51,850
variables that will overwrite the values

00:11:48,340 --> 00:11:53,650
that that the user is getting this makes

00:11:51,850 --> 00:11:55,900
a lot of sense in many cases and it's

00:11:53,650 --> 00:11:58,000
very powerful but there are some other

00:11:55,900 --> 00:12:00,040
cases where we're just using K config to

00:11:58,000 --> 00:12:02,350
read a specific file and we don't need

00:12:00,040 --> 00:12:03,160
to like check Global's or check

00:12:02,350 --> 00:12:04,810
something else

00:12:03,160 --> 00:12:06,640
every time that we load that the KD

00:12:04,810 --> 00:12:09,600
Global's file will have to actually read

00:12:06,640 --> 00:12:11,980
an actual file in the file system and

00:12:09,600 --> 00:12:15,130
what see the valuables put them on a map

00:12:11,980 --> 00:12:18,760
this is not I mean it's cheap but it's

00:12:15,130 --> 00:12:21,190
not for free so if we can say that well

00:12:18,760 --> 00:12:24,820
that was quite useful especially on a

00:12:21,190 --> 00:12:29,080
device where IO and disk IO specifically

00:12:24,820 --> 00:12:30,460
was was low and like I said sync like

00:12:29,080 --> 00:12:35,710
you will imagine there were a lot of

00:12:30,460 --> 00:12:38,710
cases where experiments that say this

00:12:35,710 --> 00:12:41,440
improves a lot but then they did

00:12:38,710 --> 00:12:44,050
end up in production well one thing that

00:12:41,440 --> 00:12:47,530
I tried that actually we never ended up

00:12:44,050 --> 00:12:49,630
merging in the end was having the KD

00:12:47,530 --> 00:12:53,140
Global's file always loaded in the

00:12:49,630 --> 00:12:55,000
background in inkay config and actually

00:12:53,140 --> 00:12:57,100
this had swampland like we could have

00:12:55,000 --> 00:12:58,870
proof that it was better but then we

00:12:57,100 --> 00:13:02,410
would have had to make sure that the

00:12:58,870 --> 00:13:04,690
cast information was up-to-date all the

00:13:02,410 --> 00:13:06,340
time and I mean this had some kind of

00:13:04,690 --> 00:13:08,470
complexity which would have been called

00:13:06,340 --> 00:13:11,140
more code and possibly things not

00:13:08,470 --> 00:13:13,570
working so we didn't go there maybe we

00:13:11,140 --> 00:13:15,010
will want to go there but in general if

00:13:13,570 --> 00:13:18,070
you see this kind of things well

00:13:15,010 --> 00:13:20,470
consider if it's worth it or not and not

00:13:18,070 --> 00:13:25,210
to it another experiment we did was

00:13:20,470 --> 00:13:29,530
actually like like I said or k package

00:13:25,210 --> 00:13:31,510
files so plasmids can are well they're

00:13:29,530 --> 00:13:34,810
essentially a little folder with a bunch

00:13:31,510 --> 00:13:36,370
of files inside and what what you do

00:13:34,810 --> 00:13:38,620
when you're using these formats is

00:13:36,370 --> 00:13:41,170
basically starting to read several files

00:13:38,620 --> 00:13:43,870
that are inside it will have the

00:13:41,170 --> 00:13:47,320
metadata but then usually some qml file

00:13:43,870 --> 00:13:51,040
inside or Chaves create or well whatever

00:13:47,320 --> 00:13:54,160
and something that we found that in this

00:13:51,040 --> 00:13:58,090
specific case improved performance was

00:13:54,160 --> 00:13:59,920
putting those packages in separate RCC

00:13:58,090 --> 00:14:04,540
files for those of you who don't know

00:13:59,920 --> 00:14:07,030
RCC files there cannot like zip file

00:14:04,540 --> 00:14:09,820
that is more or less transfer

00:14:07,030 --> 00:14:12,610
transferable integrated with cute so you

00:14:09,820 --> 00:14:16,360
can tell queue just load these RCC file

00:14:12,610 --> 00:14:17,830
and then use it transparently this was

00:14:16,360 --> 00:14:20,560
an improvement and actually at the

00:14:17,830 --> 00:14:24,070
moment you can tell k package when you

00:14:20,560 --> 00:14:26,740
created to create an RCC file instead of

00:14:24,070 --> 00:14:29,260
just installing all of the files just

00:14:26,740 --> 00:14:33,880
something that you have to opt in on

00:14:29,260 --> 00:14:35,080
because I have the I I think that it had

00:14:33,880 --> 00:14:38,230
some kind of regression on some

00:14:35,080 --> 00:14:42,210
platforms but for example on the on the

00:14:38,230 --> 00:14:42,210
pine book it was definitely better

00:14:42,660 --> 00:14:51,820
this whole pine book thing happened I

00:14:45,880 --> 00:14:54,910
think it was late 2017 maybe 2019

00:14:51,820 --> 00:14:56,640
like I said I'm getting old so what what

00:14:54,910 --> 00:15:02,710
do I know

00:14:56,640 --> 00:15:06,280
but inmate 2019 we had a whole new

00:15:02,710 --> 00:15:08,710
effort into starting improving startup

00:15:06,280 --> 00:15:10,930
for plasma coming from a whole different

00:15:08,710 --> 00:15:14,350
context it wasn't because pine or

00:15:10,930 --> 00:15:17,410
anything like that there's a company

00:15:14,350 --> 00:15:19,060
interested in plasma who said this is

00:15:17,410 --> 00:15:21,700
too slow and I don't like it

00:15:19,060 --> 00:15:23,620
here's money mr. blue systems and mr.

00:15:21,700 --> 00:15:25,960
blue system said yeah sure

00:15:23,620 --> 00:15:29,980
so and since I had been working on it

00:15:25,960 --> 00:15:33,240
kind of what I started working on on on

00:15:29,980 --> 00:15:36,040
start that began but he asked me to and

00:15:33,240 --> 00:15:39,820
well first of all this time what I did

00:15:36,040 --> 00:15:42,460
was create the script if you're curious

00:15:39,820 --> 00:15:45,360
you can take a look at it basically what

00:15:42,460 --> 00:15:47,680
it does is it compels the tool that

00:15:45,360 --> 00:15:49,750
comes from system vehicles in the

00:15:47,680 --> 00:15:54,580
butchart which basically tracks

00:15:49,750 --> 00:15:57,520
all of the while startup Crona gram and

00:15:54,580 --> 00:15:59,290
presents it to you in an SVG file it

00:15:57,520 --> 00:16:03,340
does a couple of other things like

00:15:59,290 --> 00:16:08,230
installing a file that you can use from

00:16:03,340 --> 00:16:10,300
a CDM afterwards that will that will let

00:16:08,230 --> 00:16:12,370
you choose like to start with with this

00:16:10,300 --> 00:16:14,830
thing and it will help you well profile

00:16:12,370 --> 00:16:17,230
the plasma startup it will give you a

00:16:14,830 --> 00:16:22,300
beautiful as we define I will show you

00:16:17,230 --> 00:16:24,610
in a second what it looks like with but

00:16:22,300 --> 00:16:27,520
with how much time it was spend doing

00:16:24,610 --> 00:16:33,180
what and actually yeah we're gonna look

00:16:27,520 --> 00:16:33,180
at the first differences we have there

00:16:33,210 --> 00:16:36,210
here

00:16:37,800 --> 00:16:42,830
here and it's in the wrong screen

00:16:46,310 --> 00:16:48,910
nope

00:16:49,700 --> 00:16:53,260
oh I have three of them

00:17:03,089 --> 00:17:12,250
so actually that one of the first

00:17:10,539 --> 00:17:14,110
interesting things with it I mean the

00:17:12,250 --> 00:17:16,510
script itself was just to see myself

00:17:14,110 --> 00:17:19,150
what it looked like on my laptops but

00:17:16,510 --> 00:17:22,089
well nobody would trust me if I said

00:17:19,150 --> 00:17:30,190
there's improvement in my computer so we

00:17:22,089 --> 00:17:32,409
installed it on neons CI so that well

00:17:30,190 --> 00:17:35,230
whenever there's a new ISO or something

00:17:32,409 --> 00:17:42,150
we would generate one of these graphs

00:17:35,230 --> 00:17:46,870
and well that's from my 8th May if no

00:17:42,150 --> 00:17:50,440
2093 it says over here on the URL it

00:17:46,870 --> 00:17:53,830
says 23 what you can see here for

00:17:50,440 --> 00:17:59,049
example is that for example there's a

00:17:53,830 --> 00:18:01,690
lot of a big spike here most of the CPU

00:17:59,049 --> 00:18:04,090
usage is at the beginning of course and

00:18:01,690 --> 00:18:06,940
actually not at the very beginning like

00:18:04,090 --> 00:18:09,130
there's some kind of idle time that is

00:18:06,940 --> 00:18:11,440
the computer is actually starting to

00:18:09,130 --> 00:18:15,250
well see the light but not really

00:18:11,440 --> 00:18:17,380
anything is happening and here below we

00:18:15,250 --> 00:18:20,770
can see all of the processors for

00:18:17,380 --> 00:18:24,460
example one of the limitations of this

00:18:20,770 --> 00:18:26,919
is the case plus qml is using a spinning

00:18:24,460 --> 00:18:29,860
thing that is not really supported by

00:18:26,919 --> 00:18:32,860
the graphics driver of the VM running on

00:18:29,860 --> 00:18:36,250
the neon CI so basically it's it's

00:18:32,860 --> 00:18:38,530
rendering the spinning thing and well it

00:18:36,250 --> 00:18:41,649
shows a lot of CPU but on any laptop

00:18:38,530 --> 00:18:44,320
running a normal graphics driver you

00:18:41,649 --> 00:18:46,330
won't get so much spinning CPU usage but

00:18:44,320 --> 00:18:51,399
other than that it's it's completely

00:18:46,330 --> 00:18:53,020
quite accurate we also see these weird

00:18:51,399 --> 00:18:57,940
things happening this is coming from

00:18:53,020 --> 00:19:01,510
from Ubuntu somehow but when in general

00:18:57,940 --> 00:19:05,289
the plan was let's see if we can squeeze

00:19:01,510 --> 00:19:13,799
this whole thing a bit into the into the

00:19:05,289 --> 00:19:15,650
start a bit after that we we changed it

00:19:13,799 --> 00:19:17,930
for example you can see

00:19:15,650 --> 00:19:21,680
that these was moved a bit after well

00:19:17,930 --> 00:19:24,890
quite a lot after actually this is the

00:19:21,680 --> 00:19:27,800
discovery at the fire while looking at

00:19:24,890 --> 00:19:29,510
the database to see well if there's

00:19:27,800 --> 00:19:33,860
updates on the system or not for example

00:19:29,510 --> 00:19:36,040
here we moved it a bit later so that it

00:19:33,860 --> 00:19:40,100
wasn't something that that we needed so

00:19:36,040 --> 00:19:47,900
the user can wait to see if they they

00:19:40,100 --> 00:19:50,140
need system updates or or what we can we

00:19:47,900 --> 00:19:53,810
can see that here it's starting a bit

00:19:50,140 --> 00:19:56,600
doing things a bit a bit earlier I will

00:19:53,810 --> 00:20:00,080
show you a bit now well why would that

00:19:56,600 --> 00:20:03,560
was but but in general you can you could

00:20:00,080 --> 00:20:07,330
have seen that having nice tooling it

00:20:03,560 --> 00:20:10,760
gives us some kind of edge on knowing if

00:20:07,330 --> 00:20:13,730
if the improvements we've been working

00:20:10,760 --> 00:20:20,600
on are useful or not or we are wasting

00:20:13,730 --> 00:20:22,730
our time one of the tools we use that

00:20:20,600 --> 00:20:26,120
are most important is divas you will

00:20:22,730 --> 00:20:28,760
hear about it a lot one of the ways of

00:20:26,120 --> 00:20:32,150
seeing in visualizations of the buzz is

00:20:28,760 --> 00:20:34,430
using the bustle tool inserting it in

00:20:32,150 --> 00:20:37,700
your districts a bit complex because it

00:20:34,430 --> 00:20:39,890
will swab it adds but there's a really

00:20:37,700 --> 00:20:43,970
nice flat part that is maintained by the

00:20:39,890 --> 00:20:46,640
by the owner or the maintainer so you

00:20:43,970 --> 00:20:50,030
can just install that basically what it

00:20:46,640 --> 00:20:51,620
gives you is a nice chronograph what is

00:20:50,030 --> 00:20:53,720
not even but yeah it's a chronograph as

00:20:51,620 --> 00:20:55,760
in the time increases vertically but you

00:20:53,720 --> 00:20:58,730
can see how every process talks to each

00:20:55,760 --> 00:21:00,830
other and if there's some processor is

00:20:58,730 --> 00:21:05,690
blocking you will get to see as well

00:21:00,830 --> 00:21:07,990
with the with a little arrows these for

00:21:05,690 --> 00:21:12,610
example showed us how we were doing a

00:21:07,990 --> 00:21:15,230
big load of of network manager calls

00:21:12,610 --> 00:21:18,440
actually at the beginning and first I

00:21:15,230 --> 00:21:20,900
thought all right let's look at plasma

00:21:18,440 --> 00:21:23,600
plasma network manager because it must

00:21:20,900 --> 00:21:26,090
be and then actually it wasn't I

00:21:23,600 --> 00:21:27,049
mean there were some improvements we

00:21:26,090 --> 00:21:29,149
could have

00:21:27,049 --> 00:21:30,460
it there and we could do some more but

00:21:29,149 --> 00:21:33,409
actually there the problem was that

00:21:30,460 --> 00:21:35,029
actually cute on average on the start of

00:21:33,409 --> 00:21:37,190
every application it starts querying

00:21:35,029 --> 00:21:39,559
about all of the different networks that

00:21:37,190 --> 00:21:41,509
are available on the system and actually

00:21:39,559 --> 00:21:44,809
it's it's blocking on on all of them I

00:21:41,509 --> 00:21:46,279
have a tiny patch for your network

00:21:44,809 --> 00:21:48,470
manager so that it doesn't block anymore

00:21:46,279 --> 00:21:50,389
but we will have to look into why is it

00:21:48,470 --> 00:21:52,940
needed to have all of the network

00:21:50,389 --> 00:21:55,369
manager State copied into every every

00:21:52,940 --> 00:21:57,590
cute process in general I mean it's it's

00:21:55,369 --> 00:21:59,960
very nice to be able to see who's asking

00:21:57,590 --> 00:22:03,499
what and and what's happening it's also

00:21:59,960 --> 00:22:06,230
useful for you if you want to like

00:22:03,499 --> 00:22:07,879
improve the battery on your system see

00:22:06,230 --> 00:22:10,190
if the applications are waking up and

00:22:07,879 --> 00:22:12,619
working up other processes to ask for

00:22:10,190 --> 00:22:14,600
things well then you can get to think

00:22:12,619 --> 00:22:17,809
about whether it makes sense or not and

00:22:14,600 --> 00:22:19,759
if it doesn't well fix it right there's

00:22:17,809 --> 00:22:22,429
something really weird maybe somebody

00:22:19,759 --> 00:22:24,830
here knows is that I do have some kind

00:22:22,429 --> 00:22:27,559
of process that keeps asking resolve for

00:22:24,830 --> 00:22:30,080
the hostname of my system it happens

00:22:27,559 --> 00:22:31,909
like every five seconds I mean it's fine

00:22:30,080 --> 00:22:33,889
right like my laptop is not gonna hurt

00:22:31,909 --> 00:22:35,179
because of that but it's it's weird and

00:22:33,889 --> 00:22:37,070
it's annoys me

00:22:35,179 --> 00:22:39,169
I only annoys me because I've seen it on

00:22:37,070 --> 00:22:46,070
the thing if I hadn't seen it I would be

00:22:39,169 --> 00:22:49,519
happy in general also looking at

00:22:46,070 --> 00:22:55,009
whatever is blocking to fix blocking

00:22:49,519 --> 00:22:57,230
calls what I did was using gdb I think a

00:22:55,009 --> 00:22:58,970
breakpoint to the cute find function

00:22:57,230 --> 00:23:01,549
that says let's do a blocking call and

00:22:58,970 --> 00:23:03,259
see why why was blocking and if it's

00:23:01,549 --> 00:23:08,029
possible to remove it then you remove it

00:23:03,259 --> 00:23:09,919
and life is is it's nicer and network

00:23:08,029 --> 00:23:12,139
manager and Lib Nagre manager cute

00:23:09,919 --> 00:23:13,879
actually does a whole lot of blocking

00:23:12,139 --> 00:23:18,499
there but I don't know if it's there's

00:23:13,879 --> 00:23:20,600
much we can do there and grouping we had

00:23:18,499 --> 00:23:24,679
actually carried was he did some

00:23:20,600 --> 00:23:28,519
improvements on while querying API is

00:23:24,679 --> 00:23:30,350
that it's it's not very powerful if you

00:23:28,519 --> 00:23:32,149
have to keep asking things one by one

00:23:30,350 --> 00:23:35,240
you can actually say give me all of

00:23:32,149 --> 00:23:37,519
these objects and and it returns you a

00:23:35,240 --> 00:23:39,590
big XML file that you can just pass at

00:23:37,519 --> 00:23:41,409
once I mean in this case for example

00:23:39,590 --> 00:23:44,600
like

00:23:41,409 --> 00:23:47,059
it's so much more powerful or much much

00:23:44,600 --> 00:23:49,539
faster - as for a lot of stuff and

00:23:47,059 --> 00:23:51,470
processes locally than do about a lot of

00:23:49,539 --> 00:23:53,630
requests to another process right

00:23:51,470 --> 00:23:55,700
because like you will have all of the

00:23:53,630 --> 00:23:58,130
processes swapping back and forth on

00:23:55,700 --> 00:24:03,320
your system and well that's not fun

00:23:58,130 --> 00:24:08,179
definitely not about performing a good

00:24:03,320 --> 00:24:10,460
tool to look at memory is it's massive

00:24:08,179 --> 00:24:12,200
massive is one of the tools by Val

00:24:10,460 --> 00:24:13,970
Greene I'm not gonna show it today but

00:24:12,200 --> 00:24:18,230
it's something you need to keep in mind

00:24:13,970 --> 00:24:20,990
the big reason why is important for

00:24:18,230 --> 00:24:23,090
performance is not that much because you

00:24:20,990 --> 00:24:25,520
want to actually you're have your

00:24:23,090 --> 00:24:26,899
processes not take a lot of memory which

00:24:25,520 --> 00:24:30,350
you actually do like you don't want to

00:24:26,899 --> 00:24:33,710
take all of the system's resources but

00:24:30,350 --> 00:24:37,120
it's also very slow - well allocate

00:24:33,710 --> 00:24:40,970
memory and Andy allocated all the time

00:24:37,120 --> 00:24:42,559
so we need to what use that and make

00:24:40,970 --> 00:24:45,200
sure that you don't do a lot of things

00:24:42,559 --> 00:24:47,500
okay Cass Green is the same but instead

00:24:45,200 --> 00:24:51,320
of using raw grain massive you will use

00:24:47,500 --> 00:24:54,860
massive Val green Cole grinned and it

00:24:51,320 --> 00:24:58,730
gives you well where in the CPU is

00:24:54,860 --> 00:25:00,350
spending the time we need to remember

00:24:58,730 --> 00:25:02,149
when using Val green tools is that it's

00:25:00,350 --> 00:25:07,700
not actually running on our processor

00:25:02,149 --> 00:25:09,890
it's some kind of virtual machine so it

00:25:07,700 --> 00:25:12,080
will not be 100% representative about

00:25:09,890 --> 00:25:15,340
what we're doing but in general it was

00:25:12,080 --> 00:25:19,520
really well another one I really like

00:25:15,340 --> 00:25:21,679
really like this one and massive

00:25:19,520 --> 00:25:23,419
visualizers have been developed by

00:25:21,679 --> 00:25:25,250
million from k-dubb and he's awesome

00:25:23,419 --> 00:25:28,429
he's also a kiddy developer that's why

00:25:25,250 --> 00:25:31,669
I'm praising him hot spot is really cool

00:25:28,429 --> 00:25:35,690
this is hot spot and basically you get

00:25:31,669 --> 00:25:37,850
to look at where in your well you're

00:25:35,690 --> 00:25:40,730
spending time in your process you can

00:25:37,850 --> 00:25:42,649
filter by processes so when I was

00:25:40,730 --> 00:25:44,450
talking about blocking calls

00:25:42,649 --> 00:25:45,830
I mean it's especially bad if you're

00:25:44,450 --> 00:25:50,899
doing blocking calls because it will be

00:25:45,830 --> 00:25:52,269
slow but it's only or it's especially a

00:25:50,899 --> 00:25:54,339
big problem when you're blocking

00:25:52,269 --> 00:25:56,589
on the main thread right so if you're

00:25:54,339 --> 00:25:59,229
actually keep the rest of the system or

00:25:56,589 --> 00:26:01,320
the process from proceeding but if you

00:25:59,229 --> 00:26:05,349
can put it into a separate process it's

00:26:01,320 --> 00:26:07,839
usually nice so but you can see here

00:26:05,349 --> 00:26:10,269
that that's why I took this picture is

00:26:07,839 --> 00:26:13,149
that there's a big chunk over there that

00:26:10,269 --> 00:26:17,080
says read image this is a plasma loading

00:26:13,149 --> 00:26:21,249
the wallpaper and well I looked and it

00:26:17,080 --> 00:26:25,229
was like peak 30% or so of the whole run

00:26:21,249 --> 00:26:29,019
and well it helped me track down about

00:26:25,229 --> 00:26:34,589
in ink it so this is after fixing you

00:26:29,019 --> 00:26:40,929
can see like before after after before a

00:26:34,589 --> 00:26:44,469
little bit slow so well with is actually

00:26:40,929 --> 00:26:51,399
the patch was really simple I can show

00:26:44,469 --> 00:26:54,369
you the but you like but well we didn't

00:26:51,399 --> 00:26:59,289
just improve plasma we did improve all

00:26:54,369 --> 00:27:01,539
of the all of the cute users of PNG

00:26:59,289 --> 00:27:04,329
images right so basically what it was

00:27:01,539 --> 00:27:07,119
doing is it was still loading an image

00:27:04,329 --> 00:27:10,479
that was the same size of my display but

00:27:07,119 --> 00:27:14,099
it was killing it it was scaling it to

00:27:10,479 --> 00:27:19,299
the same size that it was which is

00:27:14,099 --> 00:27:20,799
unnecessary but it was doing it and now

00:27:19,299 --> 00:27:22,690
it's doing it much faster because it's

00:27:20,799 --> 00:27:25,809
just putting the image where it has to

00:27:22,690 --> 00:27:27,909
be and while not processing it brilliant

00:27:25,809 --> 00:27:32,229
another nice tool this one is coming

00:27:27,909 --> 00:27:34,779
from from gnome it's this proof why this

00:27:32,229 --> 00:27:37,389
is interesting is that it doesn't focus

00:27:34,779 --> 00:27:39,729
on one process it will be profiling the

00:27:37,389 --> 00:27:42,429
whole system so for example what I did

00:27:39,729 --> 00:27:46,409
was modify my plasma startup script to

00:27:42,429 --> 00:27:46,409
call these two things which basically is

00:27:46,649 --> 00:27:55,209
start the sis probe and then after 20

00:27:51,219 --> 00:27:56,950
seconds systemd will kill it right so I

00:27:55,209 --> 00:27:59,229
was only concerned about the first into

00:27:56,950 --> 00:28:00,579
a second so I started a process that

00:27:59,229 --> 00:28:03,429
started gathering all of the information

00:28:00,579 --> 00:28:05,070
after 20 seconds I read anything from it

00:28:03,429 --> 00:28:06,960
well I killed it so

00:28:05,070 --> 00:28:11,009
it was saved on the system and then I

00:28:06,960 --> 00:28:16,590
would analyze it qml it's something we

00:28:11,009 --> 00:28:19,620
use a lot we need to remember to only

00:28:16,590 --> 00:28:21,870
initialize the objects when all of the

00:28:19,620 --> 00:28:26,059
properties are said it's not fun that we

00:28:21,870 --> 00:28:28,590
spend all of the all of the time with

00:28:26,059 --> 00:28:31,679
well problem properties changing quickly

00:28:28,590 --> 00:28:34,350
we can delay things using the UML order

00:28:31,679 --> 00:28:36,389
and there's key object tracking I'm

00:28:34,350 --> 00:28:39,090
actually out of time so you can look at

00:28:36,389 --> 00:28:40,649
my block what it's about but if you use

00:28:39,090 --> 00:28:41,149
qml I think that it could be interesting

00:28:40,649 --> 00:28:44,009
for you

00:28:41,149 --> 00:28:46,110
there's API trace which is nice if

00:28:44,009 --> 00:28:48,720
you're using OpenGL you will get to know

00:28:46,110 --> 00:28:51,330
well which open GL calls are being done

00:28:48,720 --> 00:28:52,679
which textures are being uploaded if

00:28:51,330 --> 00:28:54,960
they're too big if there are too many

00:28:52,679 --> 00:28:58,139
anything that can be reduced you will be

00:28:54,960 --> 00:29:00,870
able to see their GP or this is valve

00:28:58,139 --> 00:29:05,659
developed tool that you can use to see

00:29:00,870 --> 00:29:08,429
where actually like every process is

00:29:05,659 --> 00:29:11,149
spending time on and how it relates the

00:29:08,429 --> 00:29:15,629
V blank of your graphics card it's

00:29:11,149 --> 00:29:17,309
pretty cool as well and one of the

00:29:15,629 --> 00:29:19,529
things I did for example was dumping

00:29:17,309 --> 00:29:21,720
that batch script because Bash is not

00:29:19,529 --> 00:29:24,899
how we make things fast we're using C++

00:29:21,720 --> 00:29:27,960
now we're using libraries but if you

00:29:24,899 --> 00:29:29,639
want to hear some stories about that you

00:29:27,960 --> 00:29:32,879
can ask me when I have a beer in my hand

00:29:29,639 --> 00:29:36,529
and I will tell you all about it well we

00:29:32,879 --> 00:29:40,200
port it away from deprecated API is and

00:29:36,529 --> 00:29:41,759
like crazy related things or things that

00:29:40,200 --> 00:29:44,340
you see that they could be done better

00:29:41,759 --> 00:29:46,940
like this ice kind of problem we had

00:29:44,340 --> 00:29:51,360
tens of these I mean it looks absurd but

00:29:46,940 --> 00:29:53,879
whatever and things to do there's plasma

00:29:51,360 --> 00:29:56,429
shell and actually every good process is

00:29:53,879 --> 00:29:59,039
doing fun config loading wrong if we do

00:29:56,429 --> 00:30:02,789
fun config loading right we're gonna

00:29:59,039 --> 00:30:04,320
improve the start of any cute process so

00:30:02,789 --> 00:30:05,610
it's not gonna be only plasma actually

00:30:04,320 --> 00:30:06,720
it will be plasma will be Quinn but it

00:30:05,610 --> 00:30:08,490
will be Kate it would be dolphin it

00:30:06,720 --> 00:30:09,870
would be everything so let me have to

00:30:08,490 --> 00:30:11,669
look into that I started looking into

00:30:09,870 --> 00:30:13,620
that couple of days ago so I didn't fix

00:30:11,669 --> 00:30:15,690
anything there yet actually there was a

00:30:13,620 --> 00:30:17,340
guy who even did his degree thesis on it

00:30:15,690 --> 00:30:20,190
or her bachelor

00:30:17,340 --> 00:30:25,110
and he just didn't contribute it

00:30:20,190 --> 00:30:27,600
upstream which is sad but oh well we're

00:30:25,110 --> 00:30:31,520
doing more things with Waylon better

00:30:27,600 --> 00:30:31,520
tooling with divas would be interesting

00:30:32,950 --> 00:30:48,720
[Applause]

00:30:39,500 --> 00:30:50,430
any questions so about the Divas

00:30:48,720 --> 00:30:53,130
performance stuff there's an environment

00:30:50,430 --> 00:30:55,290
variable called QT was blocking called

00:30:53,130 --> 00:30:57,300
main threat warning milliseconds and if

00:30:55,290 --> 00:30:58,740
you set that to zero you effectively get

00:30:57,300 --> 00:31:00,330
a warning on console every time

00:30:58,740 --> 00:31:01,800
something does of blocking d-bus call

00:31:00,330 --> 00:31:08,340
and then you can just go through all of

00:31:01,800 --> 00:31:17,190
them and fix them right cool any

00:31:08,340 --> 00:31:20,400
questions do you ever changes in QT 6

00:31:17,190 --> 00:31:22,590
regarding qml will they change anything

00:31:20,400 --> 00:31:25,200
for you and starts up everything I've

00:31:22,590 --> 00:31:27,240
been working on has been kids 5 there's

00:31:25,200 --> 00:31:34,140
well there's that change it's already

00:31:27,240 --> 00:31:36,000
actually that one was on 512 513 but in

00:31:34,140 --> 00:31:38,850
general like you should have available

00:31:36,000 --> 00:31:41,610
if you have a nice rolling distro you

00:31:38,850 --> 00:31:43,620
will get it as soon as possible I'm sure

00:31:41,610 --> 00:31:47,010
that the brilliant things are talked

00:31:43,620 --> 00:31:52,200
about will have an impact definitely but

00:31:47,010 --> 00:31:54,740
I didn't look at that okay any more

00:31:52,200 --> 00:31:54,740
questions

00:31:57,970 --> 00:32:07,490
do you have a before-and-after picture

00:32:01,610 --> 00:32:11,840
like time used in booting plasma before

00:32:07,490 --> 00:32:14,540
your changes and after it's it's kind of

00:32:11,840 --> 00:32:16,850
hard to have like we could show the the

00:32:14,540 --> 00:32:18,800
butcher from like yesterday and we'll be

00:32:16,850 --> 00:32:22,580
able to see some differences but

00:32:18,800 --> 00:32:25,220
actually my last improvements have been

00:32:22,580 --> 00:32:27,380
in plasma shell itself and it's actually

00:32:25,220 --> 00:32:30,800
kind of hard when actually plasma shell

00:32:27,380 --> 00:32:34,780
is is loaded but if you want to improve

00:32:30,800 --> 00:32:34,780
you it puts really fast on my laptop

00:32:37,450 --> 00:32:51,859
okay any more question okay thank you

00:32:44,410 --> 00:32:51,859

YouTube URL: https://www.youtube.com/watch?v=mrkpANuQ8fA


