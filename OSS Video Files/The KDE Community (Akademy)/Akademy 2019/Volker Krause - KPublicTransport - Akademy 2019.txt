Title: Volker Krause - KPublicTransport - Akademy 2019
Publication date: 2020-05-25
Playlist: Akademy 2019
Description: 
	Last year KDE Itinerary was presented at Akademy for the first time, striving to build a privacy-protecting alternative to digital travel assistance features. Teaming up with the Open Transport community since then has paved the way for real-time transportation data access. What data is available, how is it used in KDE Itinerary, and what else can we use it for?
Captions: 
	00:00:00,030 --> 00:00:09,269
okay yeah I'll I'm going to show you a

00:00:04,529 --> 00:00:11,639
public transport which is also somewhat

00:00:09,269 --> 00:00:18,680
indirectly an outcome of the privacy

00:00:11,639 --> 00:00:21,210
goal and yeah this kind of started

00:00:18,680 --> 00:00:25,320
shortly after last year's Academy so

00:00:21,210 --> 00:00:29,099
last year I presented kdi January which

00:00:25,320 --> 00:00:31,890
is kind of the the privacy aware and

00:00:29,099 --> 00:00:36,300
privacy protecting variant of things

00:00:31,890 --> 00:00:39,420
like credit or the the Google itinerary

00:00:36,300 --> 00:00:42,329
integration things so and what we had

00:00:39,420 --> 00:00:45,480
last year was an infrastructure to

00:00:42,329 --> 00:00:48,300
extract your personal booking data form

00:00:45,480 --> 00:00:53,180
from incoming emails and add them to a

00:00:48,300 --> 00:00:55,289
timeline and we had integration with

00:00:53,180 --> 00:00:58,469
augmentation of that with static data

00:00:55,289 --> 00:01:00,629
from from the key data so we locations

00:00:58,469 --> 00:01:03,600
of airports and that kind of stuff and

00:01:00,629 --> 00:01:07,350
the thing that was missing last year was

00:01:03,600 --> 00:01:10,380
access to real-time transport data so

00:01:07,350 --> 00:01:14,880
delays and gate changes and that kind of

00:01:10,380 --> 00:01:17,220
stuff and I was somewhat skeptical last

00:01:14,880 --> 00:01:20,670
year if we could get that because that

00:01:17,220 --> 00:01:25,110
is usually data needs to come from the

00:01:20,670 --> 00:01:28,170
operators there's there's usually no

00:01:25,110 --> 00:01:31,049
other way to get like the life positions

00:01:28,170 --> 00:01:35,040
of trains and that kind of level of

00:01:31,049 --> 00:01:38,549
detail of of data you would need for for

00:01:35,040 --> 00:01:42,390
example for delay displacement however

00:01:38,549 --> 00:01:44,579
turns out I was entirely wrong after the

00:01:42,390 --> 00:01:47,479
talk last year I got contacted by a

00:01:44,579 --> 00:01:50,850
bunch of people actually working on this

00:01:47,479 --> 00:01:55,680
and working on this in a free software

00:01:50,850 --> 00:02:00,170
and open data community so I got to

00:01:55,680 --> 00:02:06,180
learn a whole lot a whole new world on

00:02:00,170 --> 00:02:10,380
on things that I had no idea existed and

00:02:06,180 --> 00:02:20,700
some of the the key elements

00:02:10,380 --> 00:02:23,400
is the GTFS data format that is again

00:02:20,700 --> 00:02:25,980
like the itinerary data something that

00:02:23,400 --> 00:02:28,350
Google came up with and then basically

00:02:25,980 --> 00:02:30,930
mandated the public transport operators

00:02:28,350 --> 00:02:33,870
to provide data in that format if they

00:02:30,930 --> 00:02:36,930
wanted to show up on Google Maps and

00:02:33,870 --> 00:02:39,090
that is a very good way to pressure them

00:02:36,930 --> 00:02:43,560
and to motivate them so this is actually

00:02:39,090 --> 00:02:48,540
available from for many operators very

00:02:43,560 --> 00:02:50,760
often and open data licenses and in some

00:02:48,540 --> 00:02:54,390
countries apparently legally mandated to

00:02:50,760 --> 00:02:58,110
be present under open data licenses and

00:02:54,390 --> 00:02:59,970
that exists in two variants the simple

00:02:58,110 --> 00:03:03,570
one is just basically the static

00:02:59,970 --> 00:03:09,000
scheduled data so how a train is planned

00:03:03,570 --> 00:03:10,740
to go and in basically all countries

00:03:09,000 --> 00:03:13,200
apart from switzerland and japan there

00:03:10,740 --> 00:03:17,970
is the real-time version that shows the

00:03:13,200 --> 00:03:22,530
actual state which first there and that

00:03:17,970 --> 00:03:25,350
is a bit more complicated due to the

00:03:22,530 --> 00:03:27,840
amount of data you need to process but

00:03:25,350 --> 00:03:30,630
that comes down to actually the GPS

00:03:27,840 --> 00:03:35,220
positions of yeah all the vehicles in

00:03:30,630 --> 00:03:38,100
the in the fleet of that operator and

00:03:35,220 --> 00:03:41,880
then to use that kind of data

00:03:38,100 --> 00:03:45,540
there are several free software projects

00:03:41,880 --> 00:03:47,490
that ya consume that are created and

00:03:45,540 --> 00:03:50,070
then allow you to run queries on top of

00:03:47,490 --> 00:03:52,640
that like how do I get from A to B or

00:03:50,070 --> 00:03:57,030
what is the delay of that specific train

00:03:52,640 --> 00:03:59,850
and most notably that's Nvidia that's

00:03:57,030 --> 00:04:10,520
the people that contacted us and open

00:03:59,850 --> 00:04:12,900
trip planner right so as I said this is

00:04:10,520 --> 00:04:18,330
basically a free software server-side

00:04:12,900 --> 00:04:21,989
thing where you fit in all the the GTFS

00:04:18,330 --> 00:04:23,680
data you have and then that does only

00:04:21,989 --> 00:04:29,229
like the routing algorithm

00:04:23,680 --> 00:04:33,850
on how to get from A to B and if there's

00:04:29,229 --> 00:04:35,440
a gap in between how can you walk and do

00:04:33,850 --> 00:04:37,720
you want to take your bike to the first

00:04:35,440 --> 00:04:42,789
step and like all those possible

00:04:37,720 --> 00:04:47,410
combinations you you know from from the

00:04:42,789 --> 00:04:51,190
the routing apps and it gives you access

00:04:47,410 --> 00:04:55,410
to the schedules posts for the four

00:04:51,190 --> 00:04:58,690
lines and four stops and it has the

00:04:55,410 --> 00:05:00,789
location search as you type the name of

00:04:58,690 --> 00:05:03,070
a stop writing that can also complete

00:05:00,789 --> 00:05:05,860
that so basically the all the backend

00:05:03,070 --> 00:05:09,430
stuff you expect behind the routing

00:05:05,860 --> 00:05:13,000
application and it of course considers

00:05:09,430 --> 00:05:16,380
disruptions and delays and shows that to

00:05:13,000 --> 00:05:21,400
you or adjusts the routing accordingly

00:05:16,380 --> 00:05:23,380
and yeah you could set that up on on our

00:05:21,400 --> 00:05:27,639
own infrastructure and then just fit in

00:05:23,380 --> 00:05:30,070
all the GTFS data we find or they also

00:05:27,639 --> 00:05:33,940
have a version they host that we are

00:05:30,070 --> 00:05:37,710
allowed to use and they have hundreds of

00:05:33,940 --> 00:05:37,710
feeds from all over the world in there

00:05:37,889 --> 00:05:44,770
so that's the coverage map you see

00:05:42,520 --> 00:05:50,020
there's a strong bias towards Europe and

00:05:44,770 --> 00:05:53,740
the US and unfortunately very little if

00:05:50,020 --> 00:05:58,479
anything at all in in Asia so that's not

00:05:53,740 --> 00:06:04,930
ideal but that's a huge amount of data

00:05:58,479 --> 00:06:07,990
we can can already work with so how do

00:06:04,930 --> 00:06:09,729
we get to that and that's where a public

00:06:07,990 --> 00:06:13,060
transport comes in so that's the

00:06:09,729 --> 00:06:15,370
framework that allows us to interact

00:06:13,060 --> 00:06:17,729
with that kind of data activi it and

00:06:15,370 --> 00:06:22,240
then we present it in a way that we can

00:06:17,729 --> 00:06:27,580
integrate that in in an application it's

00:06:22,240 --> 00:06:32,440
a simple job based query API currently

00:06:27,580 --> 00:06:34,510
supporting location searches departures

00:06:32,440 --> 00:06:36,700
forming arrivals from a given station

00:06:34,510 --> 00:06:40,510
and during

00:06:36,700 --> 00:06:42,520
so how do I get from A to B it's not

00:06:40,510 --> 00:06:46,030
limited to now it's here so it supports

00:06:42,520 --> 00:06:51,160
multiple backends we will see a bit

00:06:46,030 --> 00:06:53,710
about that later and it can pick the

00:06:51,160 --> 00:06:58,090
right back-end based on the locations

00:06:53,710 --> 00:06:59,770
where you are traveling so to get the

00:06:58,090 --> 00:07:04,480
best results and to reduce the amount of

00:06:59,770 --> 00:07:06,360
data we have to send out and that also

00:07:04,480 --> 00:07:08,200
implies we need to be able to merge

00:07:06,360 --> 00:07:11,830
results we get from different backends

00:07:08,200 --> 00:07:13,870
and that is the that's probably where

00:07:11,830 --> 00:07:19,330
most of the code in that framework is

00:07:13,870 --> 00:07:22,060
actually needed for yeah be gunning the

00:07:19,330 --> 00:07:25,960
backends there is obviously the Navi

00:07:22,060 --> 00:07:28,810
tier one which is providing the widest

00:07:25,960 --> 00:07:33,300
coverage at the moment and then we have

00:07:28,810 --> 00:07:37,140
support for three proprietary systems

00:07:33,300 --> 00:07:40,870
some of them are more or less documented

00:07:37,140 --> 00:07:47,710
some of them required a bit of

00:07:40,870 --> 00:07:50,530
creativity and that is mainly necessary

00:07:47,710 --> 00:07:53,200
for some of the German operators to get

00:07:50,530 --> 00:07:55,150
some some data there what we are still

00:07:53,200 --> 00:07:58,960
missing is a back-end for the open trip

00:07:55,150 --> 00:08:02,020
planner system which is has some

00:07:58,960 --> 00:08:06,670
similarities to Nvidia but it has a bit

00:08:02,020 --> 00:08:08,920
of more complicated interface that would

00:08:06,670 --> 00:08:11,050
be necessary to support Norway and

00:08:08,920 --> 00:08:17,530
Finland at least so they are National

00:08:11,050 --> 00:08:19,210
Railway ones on top of that and yeah the

00:08:17,530 --> 00:08:24,010
challenges resulting from supporting

00:08:19,210 --> 00:08:30,040
multiple backends is the merging the

00:08:24,010 --> 00:08:32,380
results and aligning different spellings

00:08:30,040 --> 00:08:40,680
or variations of the same location in a

00:08:32,380 --> 00:08:43,990
way that that it's the same this is the

00:08:40,680 --> 00:08:45,760
coverage areas that we have beyond now

00:08:43,990 --> 00:08:47,769
it's here so that's the mainly

00:08:45,760 --> 00:08:51,309
proprietary backends

00:08:47,769 --> 00:08:55,269
again you see it's strongly biased

00:08:51,309 --> 00:08:59,589
towards Europe and one exception in New

00:08:55,269 --> 00:09:04,420
South Wales I think but unfortunately is

00:08:59,589 --> 00:09:09,189
still a big gap in in Asia and America

00:09:04,420 --> 00:09:13,029
isn't even on the map so they're still

00:09:09,189 --> 00:09:15,279
quite some work necessary to make that a

00:09:13,029 --> 00:09:17,559
bit more logo

00:09:15,279 --> 00:09:20,110
well Greenland is partly covered not

00:09:17,559 --> 00:09:22,839
because we actually cover it but because

00:09:20,110 --> 00:09:29,259
the the simpler you make the geometry

00:09:22,839 --> 00:09:31,209
for the coverage areas the faster it is

00:09:29,259 --> 00:09:34,059
to actually make hit detection on those

00:09:31,209 --> 00:09:36,579
areas work to pick the right packet so

00:09:34,059 --> 00:09:39,459
that's why it's these weird simplified

00:09:36,579 --> 00:09:43,439
shapes and then map projection of course

00:09:39,459 --> 00:09:43,439
that flights spreading out in the north

00:09:43,619 --> 00:09:53,740
yeah a bit more on the result

00:09:46,089 --> 00:09:56,230
aggregation there is I think the biggest

00:09:53,740 --> 00:10:00,879
problem there is unlike with air traffic

00:09:56,230 --> 00:10:08,559
there is no universal identifier for

00:10:00,879 --> 00:10:12,269
locations so every back-end basically

00:10:08,559 --> 00:10:14,679
has their own arbitrary numbering scheme

00:10:12,269 --> 00:10:17,649
and then you have the human readable

00:10:14,679 --> 00:10:19,959
names which might be in different

00:10:17,649 --> 00:10:24,279
languages which might use abbreviations

00:10:19,959 --> 00:10:26,439
for parts like station or Central

00:10:24,279 --> 00:10:28,809
Station which is typically I've really

00:10:26,439 --> 00:10:32,889
abbreviated somehow in in the different

00:10:28,809 --> 00:10:35,470
languages so we need to try to somehow

00:10:32,889 --> 00:10:39,939
normalize all of that and merge it

00:10:35,470 --> 00:10:42,939
together we quite often get geo

00:10:39,939 --> 00:10:45,490
coordinates so that's that's useful but

00:10:42,939 --> 00:10:48,569
it's unfortunately not enough because if

00:10:45,490 --> 00:10:53,110
you look at one of the very large

00:10:48,569 --> 00:10:57,339
central stations they are many hundred

00:10:53,110 --> 00:11:01,120
meters in size on in that area you can

00:10:57,339 --> 00:11:05,350
actually have multiple bus stops so

00:11:01,120 --> 00:11:07,029
I mean geo-coordinates helped to clearly

00:11:05,350 --> 00:11:09,790
distinguish stuff that is not next to

00:11:07,029 --> 00:11:15,760
each other but how exactly do you group

00:11:09,790 --> 00:11:19,930
this together in a in a local area then

00:11:15,760 --> 00:11:22,870
another fun problem is raised with very

00:11:19,930 --> 00:11:26,080
local providers they tend to not at

00:11:22,870 --> 00:11:29,050
their location name or city name to the

00:11:26,080 --> 00:11:33,580
name of their stores so if you search

00:11:29,050 --> 00:11:37,000
for airport you find stops named Airport

00:11:33,580 --> 00:11:39,160
in 15 different cities and in the

00:11:37,000 --> 00:11:42,220
context of that city the stop name

00:11:39,160 --> 00:11:44,230
Airport of course makes sense but if I

00:11:42,220 --> 00:11:47,050
try to find that without having any

00:11:44,230 --> 00:11:52,080
additional information that isn't really

00:11:47,050 --> 00:11:55,779
helpful and then of course there's

00:11:52,080 --> 00:11:57,940
problems with the identification of a

00:11:55,779 --> 00:12:02,470
specific train or specific bus as well

00:11:57,940 --> 00:12:06,100
so they tend to have like a line name

00:12:02,470 --> 00:12:08,260
like m5 here but sometimes they also

00:12:06,100 --> 00:12:12,220
have individual numbers for the

00:12:08,260 --> 00:12:13,870
individual trips on that line and it's

00:12:12,220 --> 00:12:18,190
not always clear which one you get

00:12:13,870 --> 00:12:21,790
and that also again makes it harder to

00:12:18,190 --> 00:12:24,130
properly merge that again spelling

00:12:21,790 --> 00:12:27,480
variants and languages I already

00:12:24,130 --> 00:12:30,250
mentioned that so none of that is

00:12:27,480 --> 00:12:32,400
unsolvable but it requires a lot of

00:12:30,250 --> 00:12:36,270
feedback from people using that

00:12:32,400 --> 00:12:39,180
especially initially on weird results

00:12:36,270 --> 00:12:42,160
that you are getting right and then

00:12:39,180 --> 00:12:46,990
because that this is very local and

00:12:42,160 --> 00:12:49,839
locale dependent so I need specific test

00:12:46,990 --> 00:12:52,990
cases from in this city searching for

00:12:49,839 --> 00:12:56,190
that gives me one sense result so it it

00:12:52,990 --> 00:13:00,810
merges this or it doesn't match that and

00:12:56,190 --> 00:13:00,810
then we can incrementally improve that

00:13:02,400 --> 00:13:08,230
yeah privacy that's of course something

00:13:04,900 --> 00:13:10,620
we we need to look at as that's where

00:13:08,230 --> 00:13:10,620
the whole thing started

00:13:10,800 --> 00:13:15,059
this will require online access because

00:13:14,290 --> 00:13:16,889
we

00:13:15,059 --> 00:13:20,459
on real-time data right so there is

00:13:16,889 --> 00:13:22,739
simply no way around that it's also very

00:13:20,459 --> 00:13:25,049
limited room for for caching the results

00:13:22,739 --> 00:13:27,089
that might work for location searches

00:13:25,049 --> 00:13:33,479
but not for anything else because we

00:13:27,089 --> 00:13:35,279
want to see delays as they occur so

00:13:33,479 --> 00:13:38,519
there is actually network traffic on the

00:13:35,279 --> 00:13:40,529
outside that is observable but at least

00:13:38,519 --> 00:13:43,859
we can control what exactly we send in

00:13:40,529 --> 00:13:47,189
those requests the proprietary apps tend

00:13:43,859 --> 00:13:50,099
to add various unique identifiers or

00:13:47,189 --> 00:13:51,749
cookies and whatnot we can strip all of

00:13:50,099 --> 00:13:54,289
that right and just put in what is at

00:13:51,749 --> 00:13:58,889
the absolute minimum that is necessary

00:13:54,289 --> 00:14:00,869
and I think that's as good as it gets so

00:13:58,889 --> 00:14:03,079
I'd say the next step is just to disable

00:14:00,869 --> 00:14:07,559
that entirely if you are concerned about

00:14:03,079 --> 00:14:09,899
that network traffic there is

00:14:07,559 --> 00:14:12,509
unfortunately a few proprietary backends

00:14:09,899 --> 00:14:15,779
that don't even support transcode

00:14:12,509 --> 00:14:18,329
security so there you request go out

00:14:15,779 --> 00:14:22,069
entirely unencrypted those are off by

00:14:18,329 --> 00:14:25,439
default but if you are living in Austria

00:14:22,069 --> 00:14:27,539
CDI January has a specific setting to

00:14:25,439 --> 00:14:31,409
enable that because otherwise you don't

00:14:27,539 --> 00:14:35,309
get any data so that's a trade off you

00:14:31,409 --> 00:14:38,549
need to and another problem you still

00:14:35,309 --> 00:14:40,109
need to solve is if you search for a

00:14:38,549 --> 00:14:42,449
location by name where we have no

00:14:40,109 --> 00:14:45,029
context on which back-end to pick it

00:14:42,449 --> 00:14:46,739
currently picks all of them and there

00:14:45,029 --> 00:14:49,409
might be backends in there from

00:14:46,739 --> 00:14:51,989
countries that are often provide us that

00:14:49,409 --> 00:14:54,839
you don't trust right so we want some

00:14:51,989 --> 00:14:56,969
form of manual selection I know I'm in

00:14:54,839 --> 00:15:02,429
Italy so there's no point in sending it

00:14:56,969 --> 00:15:07,559
to the UK or wherever so that is

00:15:02,429 --> 00:15:10,559
something we still need to support then

00:15:07,559 --> 00:15:14,039
another topic that isn't all that

00:15:10,559 --> 00:15:19,199
obvious since we are dealing with open

00:15:14,039 --> 00:15:22,019
data just like with free software we

00:15:19,199 --> 00:15:26,879
have to look at license compliance and

00:15:22,019 --> 00:15:28,590
attribution so the data this is based on

00:15:26,879 --> 00:15:30,390
sometimes for example it's lies

00:15:28,590 --> 00:15:34,140
under Creative Commons Attribution

00:15:30,390 --> 00:15:39,150
license which means if we show the data

00:15:34,140 --> 00:15:40,470
we need to properly attribute this now

00:15:39,150 --> 00:15:42,960
since the data comes from various

00:15:40,470 --> 00:15:47,960
sources that us the application also

00:15:42,960 --> 00:15:50,880
might not not even know the framework

00:15:47,960 --> 00:15:53,839
collect all that data aggregates it

00:15:50,880 --> 00:15:57,480
together with the results and gives you

00:15:53,839 --> 00:15:59,810
as the application also all the

00:15:57,480 --> 00:16:02,730
information you actually need to show

00:15:59,810 --> 00:16:05,790
and you can load any about dialog or you

00:16:02,730 --> 00:16:08,160
show it in line next to the results and

00:16:05,790 --> 00:16:11,750
then that hopefully makes it easy to

00:16:08,160 --> 00:16:19,770
comply with the the licenses and

00:16:11,750 --> 00:16:25,650
conditions around that well that's right

00:16:19,770 --> 00:16:28,410
so what currently is supported is the

00:16:25,650 --> 00:16:33,360
absolute bare minimum on data that we

00:16:28,410 --> 00:16:37,010
needed for Qadir January but what we get

00:16:33,360 --> 00:16:41,760
from the backends is actually a lot more

00:16:37,010 --> 00:16:45,660
the typical result size for a journey

00:16:41,760 --> 00:16:49,230
query is easily more than 100 kilobytes

00:16:45,660 --> 00:16:52,730
in Jason and what we currently extract

00:16:49,230 --> 00:16:58,020
is probably less than a kilobyte of that

00:16:52,730 --> 00:17:00,990
so there's things like the entire GPS

00:16:58,020 --> 00:17:03,720
track of the route you are going there

00:17:00,990 --> 00:17:06,120
is tons of options on how you want to do

00:17:03,720 --> 00:17:10,709
the routing so how fast do you work do

00:17:06,120 --> 00:17:13,050
you have a scooter with you or do you

00:17:10,709 --> 00:17:14,790
want to avoid specific terms modes of

00:17:13,050 --> 00:17:19,589
transportation and all of that kind of

00:17:14,790 --> 00:17:23,910
stuff there is a lot more in destruction

00:17:19,589 --> 00:17:26,370
informations there is a lot of

00:17:23,910 --> 00:17:27,929
accessibility information which actually

00:17:26,370 --> 00:17:30,960
could be quite interesting to show that

00:17:27,929 --> 00:17:32,670
in the application or to consider that

00:17:30,960 --> 00:17:38,070
as a as a constraint doing scheduling

00:17:32,670 --> 00:17:40,400
right so doing querying if you if you

00:17:38,070 --> 00:17:42,620
are dependent on

00:17:40,400 --> 00:17:44,030
lifts or something like that right so

00:17:42,620 --> 00:17:47,150
it's good to know where they work and

00:17:44,030 --> 00:17:49,340
where they don't work there is

00:17:47,150 --> 00:17:50,300
information on how full the trains are

00:17:49,340 --> 00:17:54,470
probably or

00:17:50,300 --> 00:17:57,170
expected to be there's the whole area of

00:17:54,470 --> 00:18:01,330
pricing and ticketing which we haven't

00:17:57,170 --> 00:18:04,880
touched at all yet and stuff like the

00:18:01,330 --> 00:18:06,700
estimated co2 usage on that trip in case

00:18:04,880 --> 00:18:13,210
you want to optimize for that so there's

00:18:06,700 --> 00:18:20,390
a huge world that that we haven't even

00:18:13,210 --> 00:18:22,910
started with yet right and then the

00:18:20,390 --> 00:18:25,040
people around for a bit longer

00:18:22,910 --> 00:18:28,670
my vaguely remember that we had

00:18:25,040 --> 00:18:30,770
something like that in a past and yes

00:18:28,670 --> 00:18:37,130
there is the public transport plasmoid

00:18:30,770 --> 00:18:44,380
from the early KT four times that was

00:18:37,130 --> 00:18:47,660
unfortunately discontinued and it wasn't

00:18:44,380 --> 00:18:50,080
it didn't seem useful to revive that

00:18:47,660 --> 00:18:55,010
instead of building something new

00:18:50,080 --> 00:18:56,840
because that was initially based on web

00:18:55,010 --> 00:19:00,050
scraping because that was the only thing

00:18:56,840 --> 00:19:00,920
available at a time so this is like more

00:19:00,050 --> 00:19:06,050
than ten years ago right before

00:19:00,920 --> 00:19:07,970
smartphones nowadays most of the network

00:19:06,050 --> 00:19:10,809
operators have their own apps and that

00:19:07,970 --> 00:19:14,840
kind of forces them to have a much more

00:19:10,809 --> 00:19:19,160
sensible API that Vidan can hookah Kwang

00:19:14,840 --> 00:19:24,320
soo and GTFS was also just starting at a

00:19:19,160 --> 00:19:26,990
time so the the bit of code that existed

00:19:24,320 --> 00:19:29,030
for that was offline processing so you

00:19:26,990 --> 00:19:32,809
basically you download the entire multi

00:19:29,030 --> 00:19:36,860
hundred megabyte GTF file static one and

00:19:32,809 --> 00:19:40,160
do local routing that however isn't

00:19:36,860 --> 00:19:41,540
really feasible on a mobile phone let

00:19:40,160 --> 00:19:44,600
alone if you want to have the real-time

00:19:41,540 --> 00:19:48,650
data because that's a multi megabyte per

00:19:44,600 --> 00:19:51,590
minute protobuf stream from which you

00:19:48,650 --> 00:19:53,630
need one tiny detail but you need to

00:19:51,590 --> 00:19:55,490
basically have two continuous stream

00:19:53,630 --> 00:19:59,690
to update a local state so this isn't

00:19:55,490 --> 00:20:02,870
really feasible on on mobile so there's

00:19:59,690 --> 00:20:06,350
unfortunately very little that can be or

00:20:02,870 --> 00:20:07,750
that could be reused from this just

00:20:06,350 --> 00:20:13,460
because the environment has changed

00:20:07,750 --> 00:20:15,320
quite a bit since then yeah and then I

00:20:13,460 --> 00:20:22,040
have a few pictures on how this is

00:20:15,320 --> 00:20:25,750
actually integrated so this is taken all

00:20:22,040 --> 00:20:30,380
of the details screen and KDE itinerary

00:20:25,750 --> 00:20:34,160
you can see the the delays show being

00:20:30,380 --> 00:20:38,900
showing there and you can see the

00:20:34,160 --> 00:20:41,630
platform changes so it changed on top

00:20:38,900 --> 00:20:45,200
and it got confirmed in the in the lower

00:20:41,630 --> 00:20:48,230
case shown in green so that was the

00:20:45,200 --> 00:20:51,230
first bit we integrated and then the

00:20:48,230 --> 00:20:54,050
more advanced stuff this is the

00:20:51,230 --> 00:20:56,930
alternative connection selector so if

00:20:54,050 --> 00:20:58,760
you missed your connection you can

00:20:56,930 --> 00:21:02,150
basically look up there the next one on

00:20:58,760 --> 00:21:07,610
that trip the red one is cancelled so we

00:21:02,150 --> 00:21:10,120
also detect cancellation status and and

00:21:07,610 --> 00:21:12,170
some some nodes we get from the operator

00:21:10,120 --> 00:21:16,550
and then you can save that and the

00:21:12,170 --> 00:21:18,560
itinerary timeline updates to that the

00:21:16,550 --> 00:21:19,880
new trip while keeping your ticket but

00:21:18,560 --> 00:21:25,780
robbing your seat reservation that

00:21:19,880 --> 00:21:31,670
doesn't make sense anymore and we have

00:21:25,780 --> 00:21:33,140
departure schedules so if you if you

00:21:31,670 --> 00:21:35,450
arrive at the airport and want to check

00:21:33,140 --> 00:21:37,130
if you have to rush to get to the Train

00:21:35,450 --> 00:21:39,830
or if you still have time for coffee

00:21:37,130 --> 00:21:44,180
right that can be useful

00:21:39,830 --> 00:21:48,380
I think this is mainly a stopgap until

00:21:44,180 --> 00:21:50,660
we have proper navigation from say from

00:21:48,380 --> 00:21:53,060
the hotel from getting from the airport

00:21:50,660 --> 00:21:55,100
to the hotel built into itinerary so

00:21:53,060 --> 00:22:01,310
that's one of the next steps coming up

00:21:55,100 --> 00:22:05,350
but until then that is kind of the the

00:22:01,310 --> 00:22:05,350
easiest to implement approximation

00:22:05,650 --> 00:22:12,670
and that is the integration as we have

00:22:08,810 --> 00:22:16,490
it in in itinerary so far but then

00:22:12,670 --> 00:22:21,580
Nico's started a new app Kay trip which

00:22:16,490 --> 00:22:25,310
is basically focused on journey planning

00:22:21,580 --> 00:22:27,680
which is currently I think the second

00:22:25,310 --> 00:22:32,420
user of the Kay public transport

00:22:27,680 --> 00:22:35,090
framework which I think more directly

00:22:32,420 --> 00:22:44,330
exposes what Kay public transport

00:22:35,090 --> 00:22:47,120
actually can do yeah so what is what is

00:22:44,330 --> 00:22:54,080
hopefully showed is that there actually

00:22:47,120 --> 00:22:56,750
is quite some useful and freely

00:22:54,080 --> 00:22:59,810
available data around public

00:22:56,750 --> 00:23:01,400
transportation available to us and we

00:22:59,810 --> 00:23:07,130
now have the infrastructure to easily

00:23:01,400 --> 00:23:11,240
get to that and yeah depending on what

00:23:07,130 --> 00:23:13,460
we actually want to do with it we now

00:23:11,240 --> 00:23:16,400
can step-by-step extend the data model

00:23:13,460 --> 00:23:21,740
and extent the the query API to support

00:23:16,400 --> 00:23:24,680
that since there is so much data I'm

00:23:21,740 --> 00:23:28,070
trying to do that on an as-needed basis

00:23:24,680 --> 00:23:29,980
so whenever there is a specific thing we

00:23:28,070 --> 00:23:32,990
we want to address usually there's the

00:23:29,980 --> 00:23:34,400
corresponding data available and then of

00:23:32,990 --> 00:23:38,030
course there is a lot of stuff that we

00:23:34,400 --> 00:23:40,730
could do with that data beyond what we

00:23:38,030 --> 00:23:43,940
have done so far there's of course the

00:23:40,730 --> 00:23:47,330
integration with my craft as an obvious

00:23:43,940 --> 00:23:49,220
idea right so you can ask my craft for

00:23:47,330 --> 00:23:53,480
when when does my train be for as my

00:23:49,220 --> 00:23:56,680
train have a as a delay or how do I get

00:23:53,480 --> 00:24:03,010
to the University and that kind of stuff

00:23:56,680 --> 00:24:06,230
and something I would like to see is the

00:24:03,010 --> 00:24:08,480
Kennedy commuter counterpart to

00:24:06,230 --> 00:24:11,570
itinerary so for your regular daily

00:24:08,480 --> 00:24:13,670
trips showing you the delays or showing

00:24:11,570 --> 00:24:16,850
you alternative means to get to to work

00:24:13,670 --> 00:24:17,450
to get back home very sort of console so

00:24:16,850 --> 00:24:20,839
a nice

00:24:17,450 --> 00:24:22,969
during work for and I mean bigger

00:24:20,839 --> 00:24:28,159
picture all of this is basically

00:24:22,969 --> 00:24:31,190
building blocks for a larger digital

00:24:28,159 --> 00:24:37,039
assistance system that we hopefully one

00:24:31,190 --> 00:24:39,849
day will have on on plasma MOBA yeah and

00:24:37,039 --> 00:24:39,849
that's it

00:24:44,669 --> 00:24:52,369
that was amazingly on time just like

00:24:47,309 --> 00:24:52,369
public transport ought to be questions

00:24:54,980 --> 00:24:59,850
some providers like in the Netherlands

00:24:57,359 --> 00:25:01,769
they do have fairly extensive or be

00:24:59,850 --> 00:25:04,679
proprietary yet the eyes but they are

00:25:01,769 --> 00:25:08,519
gated behind API tokens how do you deal

00:25:04,679 --> 00:25:11,809
with that or at all we have that problem

00:25:08,519 --> 00:25:15,690
already some of the backends we use

00:25:11,809 --> 00:25:17,100
require API tokens they are checked into

00:25:15,690 --> 00:25:19,289
the source code that seems to be the

00:25:17,100 --> 00:25:21,210
standard everybody is doing it I was

00:25:19,289 --> 00:25:22,590
very reluctant to do that and I talked

00:25:21,210 --> 00:25:24,929
to some of those people and I said

00:25:22,590 --> 00:25:28,200
everybody else is just publicly checking

00:25:24,929 --> 00:25:30,539
in those as well so that's what we do I

00:25:28,200 --> 00:25:32,789
mean for most of them you get the API

00:25:30,539 --> 00:25:35,129
tokens for free so that it's very little

00:25:32,789 --> 00:25:36,629
incentive in stealing them right I mean

00:25:35,129 --> 00:25:41,309
you need to sign up for them but they

00:25:36,629 --> 00:25:44,940
are essentially free so they they are

00:25:41,309 --> 00:25:46,669
sometimes wait limited but those that

00:25:44,940 --> 00:25:50,639
I've seen have great limits that are

00:25:46,669 --> 00:25:52,679
very above being a problematic anyway

00:25:50,639 --> 00:25:56,869
and for now each year we talk to them

00:25:52,679 --> 00:26:00,119
and they actually take if we software

00:25:56,869 --> 00:26:04,169
very favorable the weight non weight

00:26:00,119 --> 00:26:07,470
limited or but well API tokens was very

00:26:04,169 --> 00:26:09,679
high weight limit so that's not a

00:26:07,470 --> 00:26:09,679
problem

00:26:17,549 --> 00:26:23,110
for those sources which either don't

00:26:20,769 --> 00:26:25,779
have an API or have an API that cannot

00:26:23,110 --> 00:26:28,029
use for where every song is web web

00:26:25,779 --> 00:26:31,929
scrapping an option I saw you mention

00:26:28,029 --> 00:26:35,130
was crapping I don't know if yeah I mean

00:26:31,929 --> 00:26:40,389
in in theory you could implement a

00:26:35,130 --> 00:26:43,000
back-end that works via web scraping I'm

00:26:40,389 --> 00:26:45,190
just a bit too lazy to do that but if it

00:26:43,000 --> 00:26:47,340
might indeed be that there is providers

00:26:45,190 --> 00:26:53,399
man we have absolutely no other option

00:26:47,340 --> 00:26:57,610
and yeah I mean the backend API is

00:26:53,399 --> 00:26:59,350
basically just give me the results how

00:26:57,610 --> 00:27:02,710
to get from A to B or something like

00:26:59,350 --> 00:27:05,039
that right and how you do that is up to

00:27:02,710 --> 00:27:07,629
the backend so web scraping would be

00:27:05,039 --> 00:27:10,769
would be ugly but it would be an a

00:27:07,629 --> 00:27:10,769
technical option

00:27:13,380 --> 00:27:18,430
do you think you need an infrastructure

00:27:16,210 --> 00:27:23,790
from server in order to provide the

00:27:18,430 --> 00:27:25,990
answer the mobile phone will require

00:27:23,790 --> 00:27:28,000
yeah I mean this this needs server

00:27:25,990 --> 00:27:30,370
infrastructure but luckily not our

00:27:28,000 --> 00:27:32,380
server infrastructure so we use the

00:27:30,370 --> 00:27:37,180
server infrastructure from Nvidia and

00:27:32,380 --> 00:27:39,070
from the commercial packets so in theory

00:27:37,180 --> 00:27:41,110
we could host the you know it's your

00:27:39,070 --> 00:27:45,720
software ourselves and maintain all the

00:27:41,110 --> 00:27:48,540
data in there ourselves but that would

00:27:45,720 --> 00:27:52,540
there would be very little gain to that

00:27:48,540 --> 00:27:56,740
apart from a lot of work so better share

00:27:52,540 --> 00:27:58,900
that right if you do that

00:27:56,740 --> 00:28:01,680
are you not sharing the information your

00:27:58,900 --> 00:28:04,540
personal information window meet yeah

00:28:01,680 --> 00:28:06,880
well you of course they see the same

00:28:04,540 --> 00:28:11,140
they see the queries you sent there yes

00:28:06,880 --> 00:28:16,320
so they see that somebody is screwing

00:28:11,140 --> 00:28:18,790
how to get from A to B but there is no

00:28:16,320 --> 00:28:20,650
identifying token beyond the IP address

00:28:18,790 --> 00:28:23,800
that would connect us to you

00:28:20,650 --> 00:28:26,260
specifically right it's connected to

00:28:23,800 --> 00:28:32,950
this is coming from the KT library due

00:28:26,260 --> 00:28:34,510
to the API tokens but yeah I mean if we

00:28:32,950 --> 00:28:39,010
would host that ourselves you would

00:28:34,510 --> 00:28:41,140
still share this with KDE maybe you

00:28:39,010 --> 00:28:43,330
trust Katie more than you trust the

00:28:41,140 --> 00:28:46,450
other guys but essentially you are still

00:28:43,330 --> 00:28:48,430
sharing this right self hosting that for

00:28:46,450 --> 00:28:53,260
each individual person I don't think

00:28:48,430 --> 00:28:55,780
that scales because the the GTFS

00:28:53,260 --> 00:28:57,700
real-time protocol is quite heavy that

00:28:55,780 --> 00:29:00,250
might could use multiple megabytes per

00:28:57,700 --> 00:29:03,400
minute updates so if suddenly many

00:29:00,250 --> 00:29:06,280
thousand people draw the data from those

00:29:03,400 --> 00:29:09,070
backends I think we cause a problem

00:29:06,280 --> 00:29:11,320
there right so this stuff is designed to

00:29:09,070 --> 00:29:14,650
be used with very very few servers that

00:29:11,320 --> 00:29:16,570
consume it and I shared I mean yeah

00:29:14,650 --> 00:29:20,830
there is a trade-off we need to do and

00:29:16,570 --> 00:29:24,090
we got to privacy because it it isn't

00:29:20,830 --> 00:29:24,090
doable without online access

00:29:25,000 --> 00:29:30,070
anyone else otherwise let us thankful

00:29:28,220 --> 00:29:34,079
car and

00:29:30,070 --> 00:29:34,079

YouTube URL: https://www.youtube.com/watch?v=7fE7bqf0Jf8


