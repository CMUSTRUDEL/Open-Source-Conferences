Title: Kevin Ottens - Looking at the Application Developer Story - Akademy 2017
Publication date: 2017-11-20
Playlist: Akademy 2017
Description: 
	We love to get new contributors and for that we need top notch technology andWe love to get new contributors and for that we need top notch technology and a very welcoming community. In this talk we propose to look at our Application Developer Story and see what it says on how our technology and community perception.

After years organizing student projects it is time to admit it gets harder to attract them to KDE contribution. Our technology is nice but our applications are developed mostly like our frameworks which makes for a very steep learning curve for wannabe contributors.

Also, the expectations of the hobbyist developer or the student have changed radically in the past years. They are less keen to fiddle with build systems... which doesn't mean they wouldn't have anything interesting to contribute to our applications.

The aim of this talk is to kickstart the discussion in the community on how we could walk toward a unified application developer story. For that we will take a look at the different developer stories we present to potential application contributors and how they fare. We will look at other ecosystems solutions used to address similar issues. Armed with this knowledge, we will present the ideal application developer story we should strive for.

Finally, we will give a few ideas to improve the situation and will push the audience to share more experience and ideas to get closer to the ideal application developer story. a very welcoming community. In this talk we propose to look at our Application Developer Story and see what it says on how our technology and community perception.

After years organizing student projects it is time to admit it gets harder to attract them to KDE contribution. Our technology is nice but our applications are developed mostly like our frameworks which makes for a very steep learning curve for wannabe contributors.

Also, the expectations of the hobbyist developer or the student have changed radically in the past years. They are less keen to fiddle with build systems... which doesn't mean they wouldn't have anything interesting to contribute to our applications.

The aim of this talk is to kickstart the discussion in the community on how we could walk toward a unified application developer story. For that we will take a look at the different developer stories we present to potential application contributors and how they fare. We will look at other ecosystems solutions used to address similar issues. Armed with this knowledge, we will present the ideal application developer story we should strive for.

Finally, we will give a few ideas to improve the situation and will push the audience to share more experience and ideas to get closer to the ideal application developer story.

https://conf.kde.org/en/akademy2017/public/events/372
Captions: 
	00:00:08,950 --> 00:00:15,790
so before the coffee break we have one

00:00:12,950 --> 00:00:15,790
last presentation

00:00:15,940 --> 00:00:21,060
Orton's and David farm

00:00:18,970 --> 00:00:41,140
the topic is looking at that application

00:00:21,060 --> 00:00:43,600
developer story or elitism anyone hello

00:00:41,140 --> 00:00:45,850
everyone we thought it would be a good

00:00:43,600 --> 00:00:48,460
idea to tell you a little bit about some

00:00:45,850 --> 00:00:49,990
ideas we have on how to make it easier

00:00:48,460 --> 00:00:52,300
for contributors to get started

00:00:49,990 --> 00:00:54,220
in other words this is going to be a

00:00:52,300 --> 00:00:56,370
talk about vaporware just IDs right it's

00:00:54,220 --> 00:00:59,200
not like we have something some

00:00:56,370 --> 00:01:01,810
revolution software to present but just

00:00:59,200 --> 00:01:03,640
some brainstorming and the goal of it is

00:01:01,810 --> 00:01:05,770
to get the brainstorming to continue in

00:01:03,640 --> 00:01:07,960
a buff session where you guys can tell

00:01:05,770 --> 00:01:09,549
us what you think actually we have no

00:01:07,960 --> 00:01:14,470
idea what we're talking about we just

00:01:09,549 --> 00:01:16,360
pretend until you're convinced yeah so

00:01:14,470 --> 00:01:18,909
basically the the plan for this talk is

00:01:16,360 --> 00:01:22,289
the sub look at how people get started

00:01:18,909 --> 00:01:25,179
nowadays hacking on kiddie software and

00:01:22,289 --> 00:01:27,219
what would be the ideal developer story

00:01:25,179 --> 00:01:29,560
how we would like it to look like and

00:01:27,219 --> 00:01:31,630
then we'll have a look at the of the

00:01:29,560 --> 00:01:34,119
resistance see how other people solve

00:01:31,630 --> 00:01:38,380
that problem and then what we could do

00:01:34,119 --> 00:01:40,149
about it so one of the solutions if you

00:01:38,380 --> 00:01:42,340
are a new developer and you want to

00:01:40,149 --> 00:01:45,490
start hacking on something from the

00:01:42,340 --> 00:01:48,100
kiddie world would be you use your

00:01:45,490 --> 00:01:50,109
distributions packages so you have to

00:01:48,100 --> 00:01:51,670
figure out what to install right the

00:01:50,109 --> 00:01:54,729
full list of developer kit is you need

00:01:51,670 --> 00:01:57,999
and then clone something compile it and

00:01:54,729 --> 00:02:00,369
install it then you can test your

00:01:57,999 --> 00:02:03,209
changes that kind of works for

00:02:00,369 --> 00:02:05,380
standalone applications by which I mean

00:02:03,209 --> 00:02:07,990
applications that do not require a lot

00:02:05,380 --> 00:02:12,280
of very recent libraries from the rest

00:02:07,990 --> 00:02:13,599
of the KDE software and then if we have

00:02:12,280 --> 00:02:15,940
a look at what queue does that's like

00:02:13,599 --> 00:02:18,069
exactly what they do on the which page

00:02:15,940 --> 00:02:21,340
there is a list of devil packages for

00:02:18,069 --> 00:02:24,280
all sorts of different distributions if

00:02:21,340 --> 00:02:26,830
I may since I work with students as well

00:02:24,280 --> 00:02:28,110
the part installs the right developer

00:02:26,830 --> 00:02:31,580
cages and

00:02:28,110 --> 00:02:34,380
running CMake until it actually pass lah

00:02:31,580 --> 00:02:38,160
but this year the year before took them

00:02:34,380 --> 00:02:39,990
two weeks right because we since we

00:02:38,160 --> 00:02:42,480
don't document that with the values

00:02:39,990 --> 00:02:44,430
disclosed and the values creative names

00:02:42,480 --> 00:02:45,800
for the packages right they had to

00:02:44,430 --> 00:02:51,690
figure out that I would buy themselves

00:02:45,800 --> 00:02:55,560
yep so this is the list of problems

00:02:51,690 --> 00:02:57,810
related to that it is unique suddenly it

00:02:55,560 --> 00:02:59,010
requires an exact list of packages and

00:02:57,810 --> 00:03:01,320
if you think about it there are many

00:02:59,010 --> 00:03:04,080
distros and many applications so if

00:03:01,320 --> 00:03:05,520
every application needs to document the

00:03:04,080 --> 00:03:08,160
list of packages for every distro

00:03:05,520 --> 00:03:11,220
there's a lot of different lists and

00:03:08,160 --> 00:03:12,750
also I was trying that with a friend of

00:03:11,220 --> 00:03:15,140
mine who wanted to start hacking on K

00:03:12,750 --> 00:03:18,690
mail and basically in his distribution

00:03:15,140 --> 00:03:20,610
the pin libraries were too old for even

00:03:18,690 --> 00:03:23,280
the stable branch of K mail because all

00:03:20,610 --> 00:03:24,900
of that sort of moves together so it the

00:03:23,280 --> 00:03:27,060
whole approach does not work if the

00:03:24,900 --> 00:03:28,950
application requires all their lips from

00:03:27,060 --> 00:03:30,900
git as well unless of course your

00:03:28,950 --> 00:03:33,030
distribution is recent enough and that

00:03:30,900 --> 00:03:35,790
would be the case with neon devel or

00:03:33,030 --> 00:03:38,390
with the openSUSE effort called argon or

00:03:35,790 --> 00:03:41,010
Krypton both of which give you also

00:03:38,390 --> 00:03:43,590
basically packages built from git

00:03:41,010 --> 00:03:46,010
so that's one solution obviously the

00:03:43,590 --> 00:03:48,420
problem with that is it requires you to

00:03:46,010 --> 00:03:50,670
well switch to another destroy if that's

00:03:48,420 --> 00:03:52,830
not what you were using or using the

00:03:50,670 --> 00:03:57,840
daka files also as presented earlier

00:03:52,830 --> 00:03:59,370
this afternoon on top of that one of the

00:03:57,840 --> 00:04:01,170
problems with that is that you have to

00:03:59,370 --> 00:04:03,420
install before you can run the

00:04:01,170 --> 00:04:06,720
application and that's something that

00:04:03,420 --> 00:04:08,010
has been so you know the problem with

00:04:06,720 --> 00:04:09,420
that is that you're basically messing up

00:04:08,010 --> 00:04:10,980
your system with something you just

00:04:09,420 --> 00:04:11,790
hacked on and then the day after that

00:04:10,980 --> 00:04:13,380
you have to

00:04:11,790 --> 00:04:16,979
I don't know work on that computer and

00:04:13,380 --> 00:04:18,450
it's broken and it's a problem so we

00:04:16,979 --> 00:04:21,359
would like to make it possible to

00:04:18,450 --> 00:04:23,150
actually run applications you just build

00:04:21,359 --> 00:04:27,900
it without having to install them and

00:04:23,150 --> 00:04:30,210
that is tricky so in some cases either I

00:04:27,900 --> 00:04:32,190
have an intern recently working on some

00:04:30,210 --> 00:04:34,260
KD software what I did for him was to

00:04:32,190 --> 00:04:36,300
simply automate the install step in the

00:04:34,260 --> 00:04:37,770
IDE so when he would do build it was it

00:04:36,300 --> 00:04:39,510
would actually install and run anything

00:04:37,770 --> 00:04:41,969
but that's only possible if you don't

00:04:39,510 --> 00:04:44,789
install as would otherwise and the

00:04:41,969 --> 00:04:46,529
solution we'll be finding ways to run

00:04:44,789 --> 00:04:48,239
apps without installing them and that

00:04:46,529 --> 00:04:51,809
requires making a number of different

00:04:48,239 --> 00:04:53,099
problems one problem is different files

00:04:51,809 --> 00:04:55,829
we want to look up on the file system

00:04:53,099 --> 00:04:59,069
like XML gooey icons all sorts of data

00:04:55,829 --> 00:05:02,549
files that is relatively easy to fix

00:04:59,069 --> 00:05:05,039
using GRC resources the support for that

00:05:02,549 --> 00:05:07,589
has been added already to xml GUI and to

00:05:05,039 --> 00:05:10,079
the icon theme frameworks so that's

00:05:07,589 --> 00:05:11,939
already something that is available and

00:05:10,079 --> 00:05:13,949
a lot of apps should actually be ported

00:05:11,939 --> 00:05:16,079
to having the XML GUI finding the

00:05:13,949 --> 00:05:17,999
resource for instance this also helps

00:05:16,079 --> 00:05:20,969
with deployment on Windows and other

00:05:17,999 --> 00:05:23,279
econo situations for plugins it's a lot

00:05:20,969 --> 00:05:25,110
trickier because if you actually build

00:05:23,279 --> 00:05:26,879
plugins you want them to be looked up in

00:05:25,110 --> 00:05:28,469
the build there and I don't know any

00:05:26,879 --> 00:05:30,719
other solution than setting environment

00:05:28,469 --> 00:05:32,249
variables for that and then if you build

00:05:30,719 --> 00:05:35,399
help your binaries you also need a way

00:05:32,249 --> 00:05:38,039
to find them that requires being done in

00:05:35,399 --> 00:05:39,839
the code I guess and so on it's it's a

00:05:38,039 --> 00:05:41,969
problem that's not fully solved but we

00:05:39,839 --> 00:05:44,819
have made progress compared to well some

00:05:41,969 --> 00:05:46,079
time ago and working with students again

00:05:44,819 --> 00:05:48,599
if you don't solve the particular

00:05:46,079 --> 00:05:50,069
install state at the next five week -

00:05:48,599 --> 00:05:52,110
what I was talking about earlier so

00:05:50,069 --> 00:05:53,939
you're three weeks down before the guy

00:05:52,110 --> 00:05:55,529
can make his first patch right at that

00:05:53,939 --> 00:06:02,039
point he is very much baited to

00:05:55,529 --> 00:06:05,339
contribute so if we forget about all of

00:06:02,039 --> 00:06:06,689
that another solution is or rather to

00:06:05,339 --> 00:06:08,729
solve the problem I was mentioning

00:06:06,689 --> 00:06:10,829
earlier with I want to contribute to KML

00:06:08,729 --> 00:06:13,199
this requires a lot of recent libraries

00:06:10,829 --> 00:06:14,759
one solution could be okay I'm going to

00:06:13,199 --> 00:06:17,309
install the devel packages from the

00:06:14,759 --> 00:06:19,860
distro up to kf5 and then on top of that

00:06:17,309 --> 00:06:22,589
I am going to compile all of PIM or all

00:06:19,860 --> 00:06:24,389
of work space for all of Apps and at

00:06:22,589 --> 00:06:26,249
that point you need a tool to automate

00:06:24,389 --> 00:06:29,249
the compiling of all of that stuff

00:06:26,249 --> 00:06:30,899
one solution is Cadiz sauce builds an

00:06:29,249 --> 00:06:33,779
equivalent solution on windows would be

00:06:30,899 --> 00:06:34,759
Kraft which is the new name for mmm

00:06:33,779 --> 00:06:38,429
sorry

00:06:34,759 --> 00:06:40,439
so that is kind of a solution but of

00:06:38,429 --> 00:06:42,239
course it requires learning that strange

00:06:40,439 --> 00:06:45,659
toolkit is so spilled which does not

00:06:42,239 --> 00:06:47,489
make it easy for new contributors on top

00:06:45,659 --> 00:06:50,039
of that well you get to compile a lot of

00:06:47,489 --> 00:06:51,539
stuff and as I said it's how to get

00:06:50,039 --> 00:06:54,300
started with kiddie sauce build and

00:06:51,539 --> 00:06:55,529
again you have the choice between two

00:06:54,300 --> 00:06:57,449
bad choices either

00:06:55,529 --> 00:06:59,549
to install as route or you start

00:06:57,449 --> 00:07:00,839
installing stuff into different prefix

00:06:59,549 --> 00:07:02,549
and you need to deal with that and make

00:07:00,839 --> 00:07:05,279
sure it's a layer on top of the rest of

00:07:02,549 --> 00:07:11,759
your installation which requires a ton

00:07:05,279 --> 00:07:13,709
of environment Bibles so another

00:07:11,759 --> 00:07:15,359
solution to avoid the whole thing about

00:07:13,709 --> 00:07:17,009
having different layers and installing

00:07:15,359 --> 00:07:19,979
as routes is to just compile the full

00:07:17,009 --> 00:07:22,439
stack as user into a custom prefix using

00:07:19,979 --> 00:07:24,059
key resource build the good thing about

00:07:22,439 --> 00:07:26,729
that is that well you eat your own dog

00:07:24,059 --> 00:07:29,369
food right and you discover bugs before

00:07:26,729 --> 00:07:32,059
anyone else so that's good and bad if

00:07:29,369 --> 00:07:34,139
you use that laptop for work like I do

00:07:32,059 --> 00:07:35,819
but the good thing about that is it

00:07:34,139 --> 00:07:38,129
gives you the ability to debug anything

00:07:35,819 --> 00:07:39,569
in any application if I find anything

00:07:38,129 --> 00:07:41,519
that doesn't want the way I want then I

00:07:39,569 --> 00:07:42,929
would just go into that and it's already

00:07:41,519 --> 00:07:44,969
built on my machine that makes it really

00:07:42,929 --> 00:07:47,129
easy compared to oh wait I need to

00:07:44,969 --> 00:07:48,659
install new stuff and maybe look at this

00:07:47,129 --> 00:07:52,199
bug and forget it

00:07:48,659 --> 00:07:54,509
so that's my solution I forgot to make

00:07:52,199 --> 00:07:57,359
you people raise your hands who is doing

00:07:54,509 --> 00:07:58,949
development of one repo based on destroy

00:07:57,359 --> 00:08:03,319
packages raise your hand if that's where

00:07:58,949 --> 00:08:08,489
you develop ok about 10 people who's

00:08:03,319 --> 00:08:10,079
building the whole set of repos for P

00:08:08,489 --> 00:08:12,329
more apps on what space using chili

00:08:10,079 --> 00:08:15,479
sauce build that's actually a more

00:08:12,329 --> 00:08:18,329
common well almost equivalent and then

00:08:15,479 --> 00:08:21,360
who's building everything using chili

00:08:18,329 --> 00:08:23,549
sauce build nice that's actually the

00:08:21,360 --> 00:08:27,919
majority or more than the other

00:08:23,549 --> 00:08:30,269
solutions cool so obviously you know the

00:08:27,919 --> 00:08:32,250
the problems with that it's an even

00:08:30,269 --> 00:08:36,089
larger computation right you get to

00:08:32,250 --> 00:08:37,919
compile another 400 repos and you need a

00:08:36,089 --> 00:08:39,779
ton of environment variables to start

00:08:37,919 --> 00:08:42,419
with all of that all of this is fine for

00:08:39,779 --> 00:08:43,769
well some of us people but obviously if

00:08:42,419 --> 00:08:48,329
you're a new contributor this is quite

00:08:43,769 --> 00:08:50,910
overwhelming so ideally what we would

00:08:48,329 --> 00:08:53,459
like to make it possible is for people

00:08:50,910 --> 00:08:55,889
to just say okay I'm cloning this repo

00:08:53,459 --> 00:08:58,019
here I want to build it and it should

00:08:55,889 --> 00:09:00,569
work even if you know it has to install

00:08:58,019 --> 00:09:02,579
dependencies first or it should be done

00:09:00,569 --> 00:09:03,990
in an environment where the dependencies

00:09:02,579 --> 00:09:06,149
are there doesn't matter it should just

00:09:03,990 --> 00:09:07,210
work to clone build run the test run the

00:09:06,149 --> 00:09:09,220
application

00:09:07,210 --> 00:09:13,300
that's the kind of the common line story

00:09:09,220 --> 00:09:14,890
or if you if you do that with a any idea

00:09:13,300 --> 00:09:19,090
then you would get clone opening the ID

00:09:14,890 --> 00:09:21,010
and click run and with no install step

00:09:19,090 --> 00:09:25,480
yes as you can see there is no make

00:09:21,010 --> 00:09:27,550
install step in now and this is what

00:09:25,480 --> 00:09:30,490
Kevin is taking over right and so

00:09:27,550 --> 00:09:34,810
recently I've been playing with rust for

00:09:30,490 --> 00:09:38,260
no particular reason just out of

00:09:34,810 --> 00:09:40,120
curiosity and they have this real tool

00:09:38,260 --> 00:09:44,830
that they use for everything which is a

00:09:40,120 --> 00:09:47,950
named cargo and when you develop or want

00:09:44,830 --> 00:09:50,290
to contribute to anything with inside of

00:09:47,950 --> 00:09:53,200
the rustico system that's basically you

00:09:50,290 --> 00:09:54,940
get clone you call cargo build you find

00:09:53,200 --> 00:09:56,800
cargo test run the test and you're on

00:09:54,940 --> 00:10:00,400
cargo on to run the stuff you just got

00:09:56,800 --> 00:10:03,730
right that pretty much what we're after

00:10:00,400 --> 00:10:06,190
right and they have that consistently on

00:10:03,730 --> 00:10:09,040
everything in the ecosystem right so

00:10:06,190 --> 00:10:10,990
that's really something we would like to

00:10:09,040 --> 00:10:15,790
have and we would be happy conky in that

00:10:10,990 --> 00:10:19,660
case okay and so the way it kind of

00:10:15,790 --> 00:10:24,910
works as a developer is you just provide

00:10:19,660 --> 00:10:28,360
a cargo to ml file and it's a very

00:10:24,910 --> 00:10:30,490
simple in alike format you specify the

00:10:28,360 --> 00:10:32,830
name of your package actual version your

00:10:30,490 --> 00:10:35,200
throws okay this kind of method Atta and

00:10:32,830 --> 00:10:37,450
then you just specify the dependencies

00:10:35,200 --> 00:10:41,740
and in which version you want those

00:10:37,450 --> 00:10:43,690
dependencies it's able here I'm using

00:10:41,740 --> 00:10:46,330
equals in that particular example but

00:10:43,690 --> 00:10:49,900
you can say the 0.30

00:10:46,330 --> 00:10:54,270
above right or whatever and then by

00:10:49,900 --> 00:10:58,300
convention if it has an S SE main dot

00:10:54,270 --> 00:11:01,120
ss5 by convention that's an application

00:10:58,300 --> 00:11:03,820
and that's associate file by convention

00:11:01,120 --> 00:11:10,470
that's library of crate that's the name

00:11:03,820 --> 00:11:12,910
they give to this kind of stuff and then

00:11:10,470 --> 00:11:15,490
straight from cargo you can actually

00:11:12,910 --> 00:11:18,550
publish the result of your work so that

00:11:15,490 --> 00:11:20,870
it's easy to find by other developers

00:11:18,550 --> 00:11:23,029
right so basically it's

00:11:20,870 --> 00:11:25,010
fishing mainly the meta-data so while

00:11:23,029 --> 00:11:27,260
the repo is with the author or the

00:11:25,010 --> 00:11:29,839
actual version and so on and so on and

00:11:27,260 --> 00:11:32,060
that's done we've surprised a command

00:11:29,839 --> 00:11:34,040
which is cargo publish right and once

00:11:32,060 --> 00:11:36,980
you've done that any other developer

00:11:34,040 --> 00:11:39,830
using cargo can see you crate right and

00:11:36,980 --> 00:11:41,330
can add it as a dependency and then

00:11:39,830 --> 00:11:46,220
automatically cargo will do this right

00:11:41,330 --> 00:11:48,560
thing right thing for him and by the

00:11:46,220 --> 00:11:50,960
right thing what happens in the cargo

00:11:48,560 --> 00:11:52,570
universe is basically when you have the

00:11:50,960 --> 00:11:55,460
you run dependency as we had before

00:11:52,570 --> 00:11:57,410
basically get clones for you right from

00:11:55,460 --> 00:12:01,220
the right place and build it and link to

00:11:57,410 --> 00:12:03,800
it so that download the source code and

00:12:01,220 --> 00:12:04,690
that builds which is not necessary ideal

00:12:03,800 --> 00:12:08,810
right

00:12:04,690 --> 00:12:11,810
and so that asks the question of is

00:12:08,810 --> 00:12:13,640
there something similar for C++ so I

00:12:11,810 --> 00:12:16,820
didn't quite play with that one but I

00:12:13,640 --> 00:12:19,029
just research and see okay do we have

00:12:16,820 --> 00:12:21,730
something and then turns out that yes

00:12:19,029 --> 00:12:26,300
there was a tool which is named Conan

00:12:21,730 --> 00:12:31,550
which is an equivalent for of cargo but

00:12:26,300 --> 00:12:36,070
for C++ it's many same principles it's

00:12:31,550 --> 00:12:38,600
like me more complicated because C++ and

00:12:36,070 --> 00:12:40,580
one advantage in my opinion it has

00:12:38,600 --> 00:12:43,490
compared to you something like cargo

00:12:40,580 --> 00:12:44,810
that cargo breeds really everything

00:12:43,490 --> 00:12:46,730
right all the dependencies you might

00:12:44,810 --> 00:12:49,700
have or the dependency tree it will get

00:12:46,730 --> 00:12:53,570
everything build it and statically link

00:12:49,700 --> 00:12:55,279
to it right obviously in the C++ world

00:12:53,570 --> 00:12:57,080
we are two stage well that's not

00:12:55,279 --> 00:12:59,209
necessarily what we want we want to do

00:12:57,080 --> 00:13:00,350
some dynamic linking and we don't

00:12:59,209 --> 00:13:02,839
necessarily want to build everything

00:13:00,350 --> 00:13:05,890
under the Sun and so in Conan the guys

00:13:02,839 --> 00:13:08,690
would develop that actually except that

00:13:05,890 --> 00:13:12,950
and there's a mechanism which allows you

00:13:08,690 --> 00:13:17,360
have pre-built binaries for your

00:13:12,950 --> 00:13:19,310
different content packages and if you in

00:13:17,360 --> 00:13:21,760
a situation what the dependencies your

00:13:19,310 --> 00:13:23,990
request is an already known

00:13:21,760 --> 00:13:26,810
configuration for the build then you get

00:13:23,990 --> 00:13:30,770
like that binary instead of building

00:13:26,810 --> 00:13:32,150
thing from scratch so I'm not getting

00:13:30,770 --> 00:13:34,100
into details there but there's

00:13:32,150 --> 00:13:35,750
mechanisms you I could really generate

00:13:34,100 --> 00:13:38,000
for plenty of different configurations

00:13:35,750 --> 00:13:39,650
and publishing that augmenting the

00:13:38,000 --> 00:13:43,550
chances that you don't have to rebuild

00:13:39,650 --> 00:13:46,160
when you eat it and how does it look

00:13:43,550 --> 00:13:48,110
what pretty much you have to produce a

00:13:46,160 --> 00:13:51,080
fire specific and that looks a

00:13:48,110 --> 00:13:54,140
bit like any file and you can specify

00:13:51,080 --> 00:13:57,230
what it requires same thing here you can

00:13:54,140 --> 00:14:00,170
say okay I need to depend on boost an

00:13:57,230 --> 00:14:04,790
exact version our form I need to depend

00:14:00,170 --> 00:14:11,350
on that leap but something above that

00:14:04,790 --> 00:14:11,350
particular version since that's kind of

00:14:11,380 --> 00:14:15,680
recreating the situation where you have

00:14:13,820 --> 00:14:17,330
the guy doing the code and the guy doing

00:14:15,680 --> 00:14:18,860
the current package right

00:14:17,330 --> 00:14:22,029
several people could do the same package

00:14:18,860 --> 00:14:23,960
for two different packages for the same

00:14:22,029 --> 00:14:27,440
dependency so that's why you have this

00:14:23,960 --> 00:14:28,730
at something that's at the user doing

00:14:27,440 --> 00:14:31,850
the particular package who interest

00:14:28,730 --> 00:14:34,610
interest in and the branch of that

00:14:31,850 --> 00:14:38,570
package a package and then Conan as

00:14:34,610 --> 00:14:41,110
generators so that denied files on the

00:14:38,570 --> 00:14:44,180
fly when in downloads and build the

00:14:41,110 --> 00:14:46,250
different dependencies and turns out

00:14:44,180 --> 00:14:50,870
that one of the engine I taught is she

00:14:46,250 --> 00:14:52,880
make right and turns out that there's

00:14:50,870 --> 00:14:55,010
more than that you could target Xcode

00:14:52,880 --> 00:14:58,820
you could target visual studio cue make

00:14:55,010 --> 00:15:01,100
or cubes or scones right so it's already

00:14:58,820 --> 00:15:06,589
supports all of that well I'm not me so

00:15:01,100 --> 00:15:08,300
three of them interestingly that's not

00:15:06,589 --> 00:15:13,490
on the slide but interesting is I also

00:15:08,300 --> 00:15:16,910
have generators for IDs or at least for

00:15:13,490 --> 00:15:19,310
generating config files for to a low

00:15:16,910 --> 00:15:20,959
easy cut compression because then you

00:15:19,310 --> 00:15:23,410
have to find where everything is

00:15:20,959 --> 00:15:26,209
installed you have the proper completion

00:15:23,410 --> 00:15:28,490
so we could imagine having one for

00:15:26,209 --> 00:15:30,560
instance for integrating in K develop

00:15:28,490 --> 00:15:35,150
directly for the ID side or something

00:15:30,560 --> 00:15:38,610
like that and then that ask a question

00:15:35,150 --> 00:15:41,790
okay I'm using Simek and I

00:15:38,610 --> 00:15:43,980
nice I did the fight that I just

00:15:41,790 --> 00:15:45,480
described and how do I make sure that

00:15:43,980 --> 00:15:47,010
when it's built

00:15:45,480 --> 00:15:49,410
I actually pick the dependencies

00:15:47,010 --> 00:15:52,290
confound well you just have to add those

00:15:49,410 --> 00:15:56,519
four lines inside of your cynic file

00:15:52,290 --> 00:16:01,350
okay and basically you're done once you

00:15:56,519 --> 00:16:03,149
have that Conan will do all the work so

00:16:01,350 --> 00:16:05,850
that you have the dependencies in place

00:16:03,149 --> 00:16:08,070
and the Conan basic setup will basically

00:16:05,850 --> 00:16:10,829
add all the flags and society to build

00:16:08,070 --> 00:16:12,029
something and so that it finds when you

00:16:10,829 --> 00:16:13,829
do a fine package that's completely

00:16:12,029 --> 00:16:16,440
transparent right when you do a fine

00:16:13,829 --> 00:16:19,350
package then the fine packet will look

00:16:16,440 --> 00:16:22,500
at the right place okay right places

00:16:19,350 --> 00:16:24,180
actually and so in that case you

00:16:22,500 --> 00:16:26,490
basically end up doing the git clone

00:16:24,180 --> 00:16:28,620
because that see Meg then you create a

00:16:26,490 --> 00:16:31,620
builder act or not I generally prefer to

00:16:28,620 --> 00:16:33,930
do it get in that building actually and

00:16:31,620 --> 00:16:36,240
instead of just running as you make the

00:16:33,930 --> 00:16:37,500
dot you have to run Conan install dot

00:16:36,240 --> 00:16:40,260
dot which does the first phase of

00:16:37,500 --> 00:16:42,839
generating whatever else you make expect

00:16:40,260 --> 00:16:45,029
for for that which is equal on building

00:16:42,839 --> 00:16:46,980
for that he made then you runs 'american

00:16:45,029 --> 00:16:48,680
that we won't find anything from your

00:16:46,980 --> 00:16:51,420
system that will pick inside of your

00:16:48,680 --> 00:16:53,459
conan installed there and then you can

00:16:51,420 --> 00:16:55,760
make your build with CMake and then you

00:16:53,459 --> 00:16:58,170
can run sit tests and run your binary

00:16:55,760 --> 00:17:00,390
while you can run your binary assuming

00:16:58,170 --> 00:17:03,810
that we solve this pesky make install

00:17:00,390 --> 00:17:06,089
problem right but if we serve these

00:17:03,810 --> 00:17:08,040
pesky make install problem we have

00:17:06,089 --> 00:17:09,900
something which is somewhat much more

00:17:08,040 --> 00:17:11,790
compelling than before right you don't

00:17:09,900 --> 00:17:13,290
have at at least you don't have to find

00:17:11,790 --> 00:17:14,569
all the right dependencies and so on

00:17:13,290 --> 00:17:17,160
because that's documented by

00:17:14,569 --> 00:17:19,079
configuration files and code inside of

00:17:17,160 --> 00:17:23,819
your repository so that's even tracked

00:17:19,079 --> 00:17:26,790
in version if we don't solve the make

00:17:23,819 --> 00:17:29,070
install problem then we basically have

00:17:26,790 --> 00:17:31,429
to deal with layers with environments

00:17:29,070 --> 00:17:33,840
and you end up with n plus two layers

00:17:31,429 --> 00:17:37,200
because at runtime that means you would

00:17:33,840 --> 00:17:40,080
have to find whatever you depend on in

00:17:37,200 --> 00:17:41,730
the system and then whatever plugins and

00:17:40,080 --> 00:17:43,559
assets which are in new york on and

00:17:41,730 --> 00:17:45,720
dependencies with and you have n of them

00:17:43,559 --> 00:17:48,140
and then whatever plugins and assets you

00:17:45,720 --> 00:17:50,560
have in your current application ok

00:17:48,140 --> 00:17:54,060
that's a problem you don't

00:17:50,560 --> 00:17:58,180
if the making start problem is solved

00:17:54,060 --> 00:18:00,280
all right and I won't get in details in

00:17:58,180 --> 00:18:02,350
how you publish libraries that you can

00:18:00,280 --> 00:18:04,870
depend on that's slightly more involving

00:18:02,350 --> 00:18:07,420
than with than with cargo in that case

00:18:04,870 --> 00:18:12,400
basically you write a small recipe which

00:18:07,420 --> 00:18:14,110
is Python Street with particular API a

00:18:12,400 --> 00:18:16,330
few interesting things is that it can be

00:18:14,110 --> 00:18:18,760
tested locally before you publish it so

00:18:16,330 --> 00:18:23,080
you can pretend that would be already in

00:18:18,760 --> 00:18:27,370
the conan database of metadata and try

00:18:23,080 --> 00:18:30,070
to build stuff that can be also checked

00:18:27,370 --> 00:18:32,650
on the CI so if you make this kind of

00:18:30,070 --> 00:18:35,350
recipes also tooling in place so that

00:18:32,650 --> 00:18:40,600
you can choose that and then CI picks it

00:18:35,350 --> 00:18:43,210
up and sanity check it and we have

00:18:40,600 --> 00:18:47,440
strong indications that in the case of

00:18:43,210 --> 00:18:49,690
the KD frameworks we could generate

00:18:47,440 --> 00:18:51,640
those recipes in most cases we could

00:18:49,690 --> 00:18:54,040
generate those recipes from the ml face

00:18:51,640 --> 00:18:56,320
that we that we have we might want to

00:18:54,040 --> 00:18:57,880
make them slightly richer to make the

00:18:56,320 --> 00:19:01,990
dependencies more explicit but then we

00:18:57,880 --> 00:19:05,190
could generate that okay if you want to

00:19:01,990 --> 00:19:07,420
know more about what conan so there's

00:19:05,190 --> 00:19:09,370
documentation for the application so

00:19:07,420 --> 00:19:13,060
that you are there for libraries just

00:19:09,370 --> 00:19:15,700
below and so we could imagine a being

00:19:13,060 --> 00:19:19,270
theme for if you want something like all

00:19:15,700 --> 00:19:21,580
of k KD frameworks we can imagine making

00:19:19,270 --> 00:19:23,020
a meta package for that so like the old

00:19:21,580 --> 00:19:26,410
package which would just depend on

00:19:23,020 --> 00:19:29,290
everything or same thing for all apps or

00:19:26,410 --> 00:19:32,950
all pin or we could imagine having a

00:19:29,290 --> 00:19:36,190
much smaller kdss build which would do

00:19:32,950 --> 00:19:39,960
the clone of the leaves of what you need

00:19:36,190 --> 00:19:42,760
and then just run Conan in everything

00:19:39,960 --> 00:19:44,620
okay so the pros and cons of using

00:19:42,760 --> 00:19:46,570
something like Conan well that means

00:19:44,620 --> 00:19:49,180
that we would have clearly locally

00:19:46,570 --> 00:19:53,140
defined dependencies which will never

00:19:49,180 --> 00:19:55,150
add before and that could make the Ewok

00:19:53,140 --> 00:19:56,740
on the CI actually easier right because

00:19:55,150 --> 00:19:58,720
right now we have this kind of situation

00:19:56,740 --> 00:20:01,030
where we build everything together in

00:19:58,720 --> 00:20:03,990
big packages in part because we don't

00:20:01,030 --> 00:20:06,580
quite control the dependencies

00:20:03,990 --> 00:20:08,110
of course it works with transitive

00:20:06,580 --> 00:20:10,450
dependencies I don't need to specify

00:20:08,110 --> 00:20:12,220
everything I depend on just what I

00:20:10,450 --> 00:20:13,720
depend directly and the other ones I

00:20:12,220 --> 00:20:16,180
pulled well that's what you would expect

00:20:13,720 --> 00:20:19,420
from package manager

00:20:16,180 --> 00:20:21,070
and so the cons is why if that

00:20:19,420 --> 00:20:22,570
dependencies as plugins

00:20:21,070 --> 00:20:25,540
well that plugins will end up in some

00:20:22,570 --> 00:20:28,750
folder control by Conan right and so

00:20:25,540 --> 00:20:31,950
that makes it yeah picky - fine the

00:20:28,750 --> 00:20:34,750
other cons is that it doesn't solve

00:20:31,950 --> 00:20:38,350
situations when we have conflicts with

00:20:34,750 --> 00:20:41,710
the currently running runtime right of

00:20:38,350 --> 00:20:44,590
your current workspace like kdd or econo

00:20:41,710 --> 00:20:47,410
D which are when we made that slides we

00:20:44,590 --> 00:20:51,000
try to list a few and then we realize

00:20:47,410 --> 00:20:54,250
that's really easy two main ones right

00:20:51,000 --> 00:20:55,990
so obviously if you have something if

00:20:54,250 --> 00:20:58,750
you're developing something which needs

00:20:55,990 --> 00:21:01,810
to be ran inside of KDE or one of your

00:20:58,750 --> 00:21:04,180
dependencies as that when you might have

00:21:01,810 --> 00:21:08,230
a slight problem there it's not install

00:21:04,180 --> 00:21:10,780
is most common but that happens okay and

00:21:08,230 --> 00:21:12,550
then if you in that last case right and

00:21:10,780 --> 00:21:15,040
you have a problem with run times that's

00:21:12,550 --> 00:21:17,710
when you basically end up having only

00:21:15,040 --> 00:21:19,630
solutions with container so being docker

00:21:17,710 --> 00:21:21,400
approach as we've seen or flat-pack

00:21:19,630 --> 00:21:24,940
approach which are fairly similar in

00:21:21,400 --> 00:21:26,680
some way we pick flat-pack for that

00:21:24,940 --> 00:21:29,890
particular term just because there's

00:21:26,680 --> 00:21:31,270
already integration in Kay develop so

00:21:29,890 --> 00:21:33,870
fat packs for those who don't know

00:21:31,270 --> 00:21:39,670
that's used also by ignore builder and

00:21:33,870 --> 00:21:41,350
by Kay develop since recently so for

00:21:39,670 --> 00:21:43,120
flat pack we would have instead of

00:21:41,350 --> 00:21:45,400
having something fine-grained as we've

00:21:43,120 --> 00:21:47,320
seen before right we don't need to solve

00:21:45,400 --> 00:21:50,470
the dependencies and make them explicit

00:21:47,320 --> 00:21:53,830
and so on so we just create those big

00:21:50,470 --> 00:21:57,730
fat containers so one fourth platform on

00:21:53,830 --> 00:21:59,680
posi sdk and that's where you get all

00:21:57,730 --> 00:22:01,930
your dependencies and then you just

00:21:59,680 --> 00:22:03,930
depend on that right and you run your

00:22:01,930 --> 00:22:06,550
application and our development on that

00:22:03,930 --> 00:22:08,740
you would have so really to use

00:22:06,550 --> 00:22:09,910
containers and we can imagine in the

00:22:08,740 --> 00:22:12,150
case of p.m. which is probably

00:22:09,910 --> 00:22:17,370
complexity wise worst case you know you

00:22:12,150 --> 00:22:17,370
being a team layer on top of that

00:22:18,040 --> 00:22:22,810
just a slight example of the manifest in

00:22:20,680 --> 00:22:24,940
there so that JSON file and then you can

00:22:22,810 --> 00:22:26,500
say okay in that particular SDK layer I

00:22:24,940 --> 00:22:28,540
want to have cake or other ones you can

00:22:26,500 --> 00:22:30,910
specify the flags okay which build

00:22:28,540 --> 00:22:34,560
system you want to use and where to find

00:22:30,910 --> 00:22:37,300
the Sochi is a person and yada yada

00:22:34,560 --> 00:22:40,410
so using flat pack for KDE apps

00:22:37,300 --> 00:22:43,090
how would it look right so if we assume

00:22:40,410 --> 00:22:44,830
that we would have a flat pack manifest

00:22:43,090 --> 00:22:47,710
in all of the project then you could get

00:22:44,830 --> 00:22:49,450
clone and then download the flat pack

00:22:47,710 --> 00:22:52,450
container corresponding to whatever you

00:22:49,450 --> 00:22:54,310
just cloned and build and install the

00:22:52,450 --> 00:22:55,630
application you just clone inside of

00:22:54,310 --> 00:22:57,430
that particular container okay

00:22:55,630 --> 00:23:00,100
the application would already be there

00:22:57,430 --> 00:23:01,810
but if we assume we didn't solve the

00:23:00,100 --> 00:23:03,730
making source an IOU just make

00:23:01,810 --> 00:23:05,980
installing that override that in your

00:23:03,730 --> 00:23:08,140
local container and then you can run the

00:23:05,980 --> 00:23:11,560
container okay so that's the type of

00:23:08,140 --> 00:23:13,540
situation so the pros there that we

00:23:11,560 --> 00:23:15,970
already have the Kay develop integration

00:23:13,540 --> 00:23:19,390
we can add all the dependencies

00:23:15,970 --> 00:23:21,850
pre-built and you can get started with

00:23:19,390 --> 00:23:23,620
one-click if you use K developed if you

00:23:21,850 --> 00:23:26,140
are not using a I develop my know log

00:23:23,620 --> 00:23:28,570
for you right you will have to learn the

00:23:26,140 --> 00:23:32,650
command-line tools or have to make a

00:23:28,570 --> 00:23:34,780
wrapper at that point it's independent

00:23:32,650 --> 00:23:37,330
from the running system okay what about

00:23:34,780 --> 00:23:39,670
this row you have that's fine and then

00:23:37,330 --> 00:23:41,500
it's the solution which actually support

00:23:39,670 --> 00:23:45,520
complex runtimes like for the kedr

00:23:41,500 --> 00:23:49,210
kannada situations now it has problems

00:23:45,520 --> 00:23:51,340
as well why it's linux only right which

00:23:49,210 --> 00:23:53,530
is a bummer because if we want to see

00:23:51,340 --> 00:23:56,350
more for apps on Android if you want to

00:23:53,530 --> 00:24:00,640
see more for apps on Windows well then

00:23:56,350 --> 00:24:02,770
flat pack is no-go ok the other

00:24:00,640 --> 00:24:04,570
disadvantage is that where that's less

00:24:02,770 --> 00:24:06,850
finely grained and something like Conan

00:24:04,570 --> 00:24:09,820
so you can imagine that you will have

00:24:06,850 --> 00:24:13,180
very large payload to download right for

00:24:09,820 --> 00:24:14,320
each of the absolute walk with and also

00:24:13,180 --> 00:24:16,570
flat pack has a very primitive

00:24:14,320 --> 00:24:18,820
dependency system so that's in part why

00:24:16,570 --> 00:24:20,920
we end up with that very fat container

00:24:18,820 --> 00:24:23,470
instead of having plenty of containers

00:24:20,920 --> 00:24:25,440
you can depend on each container can

00:24:23,470 --> 00:24:28,130
depend on only another container

00:24:25,440 --> 00:24:30,590
basically have only linear

00:24:28,130 --> 00:24:32,809
and currently that's tied to the IDE

00:24:30,590 --> 00:24:34,730
which I pointed out and of course

00:24:32,809 --> 00:24:37,070
there's the complexity of the container

00:24:34,730 --> 00:24:39,440
themselves because you're not running

00:24:37,070 --> 00:24:41,960
directly right so if you're not using an

00:24:39,440 --> 00:24:46,789
ID hiding that complexity from you then

00:24:41,960 --> 00:24:50,299
that's not ideal and that leads us to

00:24:46,789 --> 00:24:52,070
the conclusion we want to do that one so

00:24:50,299 --> 00:24:53,659
if we think back about everything we

00:24:52,070 --> 00:24:56,240
just said it seems like the best

00:24:53,659 --> 00:24:58,309
strategy is to first work a bit more on

00:24:56,240 --> 00:24:59,899
this making stall problem making sure

00:24:58,309 --> 00:25:03,950
that we can run apps without installing

00:24:59,899 --> 00:25:05,600
them and then if on top of that we go

00:25:03,950 --> 00:25:07,549
for Conan then we have something that

00:25:05,600 --> 00:25:10,460
takes care of downloading the

00:25:07,549 --> 00:25:12,529
dependencies so that there are recent

00:25:10,460 --> 00:25:15,039
enough and pre-built so it's kind of

00:25:12,529 --> 00:25:17,419
ideal for getting started quickly and

00:25:15,039 --> 00:25:19,460
the only problem with that is the

00:25:17,419 --> 00:25:21,980
interaction with your running workspace

00:25:19,460 --> 00:25:24,110
so the solution for people who want to

00:25:21,980 --> 00:25:26,149
completely separate the two and not mess

00:25:24,110 --> 00:25:29,419
up the running workspace is something

00:25:26,149 --> 00:25:32,360
like a container like fat pack or docker

00:25:29,419 --> 00:25:34,820
for the alternative solution so that's

00:25:32,360 --> 00:25:37,429
what we think would be one way to go one

00:25:34,820 --> 00:25:40,220
reason why we layer it that way that I

00:25:37,429 --> 00:25:42,049
mean Megan study is number one

00:25:40,220 --> 00:25:44,899
troublemaker and everything we do right

00:25:42,049 --> 00:25:48,409
so if we solve that one then suddenly

00:25:44,899 --> 00:25:51,559
for 80% of the applications we do cannon

00:25:48,409 --> 00:25:53,120
is viable okay and that makes it viable

00:25:51,559 --> 00:25:55,220
and that doesn't prevent us to get on

00:25:53,120 --> 00:25:58,370
Windows and so on and then you're left

00:25:55,220 --> 00:26:00,740
with the 20 remaining percent where you

00:25:58,370 --> 00:26:02,840
have to depend on ecology and economy is

00:26:00,740 --> 00:26:05,330
not easy to port yet or these kind of

00:26:02,840 --> 00:26:07,070
situations then in that case flat pack

00:26:05,330 --> 00:26:09,950
becomes the fallback sin are you all

00:26:07,070 --> 00:26:11,750
right but at least we suddenly make much

00:26:09,950 --> 00:26:15,649
better and more compelling application

00:26:11,750 --> 00:26:17,779
developer story for 80% of all apps and

00:26:15,649 --> 00:26:19,909
it also helps for people looking at

00:26:17,779 --> 00:26:23,270
deploying our apps on Windows or even

00:26:19,909 --> 00:26:24,350
OSX because basically an OSX bundle is

00:26:23,270 --> 00:26:26,929
also something that's supposed to be

00:26:24,350 --> 00:26:28,820
self-contained so you want to find

00:26:26,929 --> 00:26:31,010
everything in resources rather than

00:26:28,820 --> 00:26:33,230
somewhere on the file system so it all

00:26:31,010 --> 00:26:36,049
kind of fits together with these kind of

00:26:33,230 --> 00:26:37,240
solutions but plugins are kind of a hard

00:26:36,049 --> 00:26:41,409
problem in there

00:26:37,240 --> 00:26:43,210
more thinking required so for following

00:26:41,409 --> 00:26:46,720
up on that if you want to provide us

00:26:43,210 --> 00:26:49,809
with input we have planned a buff which

00:26:46,720 --> 00:26:51,549
is tomorrow at 10:30 and if you want to

00:26:49,809 --> 00:26:53,440
know more if you want to know more about

00:26:51,549 --> 00:26:55,419
flat pack you can go back in time and

00:26:53,440 --> 00:26:57,279
watch Alex's presentation yesterday or

00:26:55,419 --> 00:27:01,419
you can use the recording which might be

00:26:57,279 --> 00:27:18,850
slightly easier so that's it from us

00:27:01,419 --> 00:27:21,779
do you have any questions one comment

00:27:18,850 --> 00:27:25,390
one question first the comment which is

00:27:21,779 --> 00:27:28,059
happier thing flat pack has no side

00:27:25,390 --> 00:27:29,679
effect which is that is it would be the

00:27:28,059 --> 00:27:32,649
plot it would make deployment really

00:27:29,679 --> 00:27:34,899
easy few days ago I had to write an app

00:27:32,649 --> 00:27:39,070
and I had to package it for a couple of

00:27:34,899 --> 00:27:41,380
distributions I wrote it in there

00:27:39,070 --> 00:27:44,919
something for the packaging it took me

00:27:41,380 --> 00:27:47,320
two days with flat but this was what I

00:27:44,919 --> 00:27:49,000
ended up using uh pretty much it kind of

00:27:47,320 --> 00:27:50,830
similar thing so that's that's a really

00:27:49,000 --> 00:27:55,539
nice side effect because distributing

00:27:50,830 --> 00:27:58,179
our apps right now is question I really

00:27:55,539 --> 00:27:59,529
enjoy your your talk and I had a deja V

00:27:58,179 --> 00:28:02,980
of Ronda

00:27:59,529 --> 00:28:05,679
mm and Link Erin works spring many of

00:28:02,980 --> 00:28:07,510
the things of the problems we all really

00:28:05,679 --> 00:28:10,570
came to those I mean great really

00:28:07,510 --> 00:28:12,880
analyze those problems well nothing

00:28:10,570 --> 00:28:15,730
happened or not not much are you guys

00:28:12,880 --> 00:28:18,520
planning to work on this is in your

00:28:15,730 --> 00:28:20,590
agenda or is more of a let's see what

00:28:18,520 --> 00:28:22,270
happens over I said this talk is

00:28:20,590 --> 00:28:24,130
vaporware we're just trying to get you

00:28:22,270 --> 00:28:27,460
convinced to do something now I think

00:28:24,130 --> 00:28:29,320
it's it's something where if we all

00:28:27,460 --> 00:28:31,750
realize the importance of the making so

00:28:29,320 --> 00:28:33,640
problem then any one of us who hits the

00:28:31,750 --> 00:28:35,620
next problem will say a we've we've

00:28:33,640 --> 00:28:37,720
discussed it is worth solving right and

00:28:35,620 --> 00:28:40,330
that's all it's that actually has

00:28:37,720 --> 00:28:42,159
changed since Rhonda 2011 because

00:28:40,330 --> 00:28:43,809
especially the people working on Windows

00:28:42,159 --> 00:28:45,940
and Mac OS deployment they have already

00:28:43,809 --> 00:28:49,240
made quite some good progress in that

00:28:45,940 --> 00:28:50,130
area and just you know supporting that

00:28:49,240 --> 00:28:52,650
that effort

00:28:50,130 --> 00:28:54,900
possibly even helping with that is I

00:28:52,650 --> 00:28:56,789
think very important way forward so yes

00:28:54,900 --> 00:28:59,520
personally I will be having a look at

00:28:56,789 --> 00:29:01,289
you know more precisely what else has to

00:28:59,520 --> 00:29:05,130
be fixed than maximum duty and so on and

00:29:01,289 --> 00:29:08,669
so on so yeah and that's also in part in

00:29:05,130 --> 00:29:11,160
my opinion to you point out where all

00:29:08,669 --> 00:29:13,470
personal hygiene is not ideal and where

00:29:11,160 --> 00:29:15,440
we stinks right because then when you

00:29:13,470 --> 00:29:18,660
walk on something cannot see and that's

00:29:15,440 --> 00:29:20,580
based on that that's not ideal and I'm

00:29:18,660 --> 00:29:23,250
looking at it right now right and it

00:29:20,580 --> 00:29:26,159
doesn't cost me much to solve that tiny

00:29:23,250 --> 00:29:28,950
bit right now right so it's also to

00:29:26,159 --> 00:29:34,080
raise you one as because then we can

00:29:28,950 --> 00:29:36,330
slowly move there was there a reason why

00:29:34,080 --> 00:29:39,270
you went with flat packs a versus app

00:29:36,330 --> 00:29:41,549
image or snappy for example could you

00:29:39,270 --> 00:29:44,400
did you evaluate those and look at those

00:29:41,549 --> 00:29:46,350
well we can bounce that question back to

00:29:44,400 --> 00:29:48,150
an ish because basically we had to look

00:29:46,350 --> 00:29:49,590
at fat pack because k develop supports

00:29:48,150 --> 00:29:51,120
it and we were looking at the developer

00:29:49,590 --> 00:29:54,090
story so we pick the thing that K

00:29:51,120 --> 00:29:56,299
develop supports so Wi-Fi back that's

00:29:54,090 --> 00:29:56,299
funny

00:30:02,480 --> 00:30:10,289
so yes I've looked into all of them and

00:30:06,860 --> 00:30:12,270
actually like app image wouldn't really

00:30:10,289 --> 00:30:14,010
be a solution in this case because app

00:30:12,270 --> 00:30:17,220
image doesn't really have a concept of

00:30:14,010 --> 00:30:19,380
recipes and while part of what they want

00:30:17,220 --> 00:30:21,450
to do is actually be able to actually

00:30:19,380 --> 00:30:23,429
compare it for in the first time like

00:30:21,450 --> 00:30:25,380
they wouldn't comment current Plus up

00:30:23,429 --> 00:30:29,250
image would be a solution but then it

00:30:25,380 --> 00:30:33,210
needs some kind of integration snap and

00:30:29,250 --> 00:30:35,730
and flat-pack are two formats that we

00:30:33,210 --> 00:30:38,880
were looking into and both of them would

00:30:35,730 --> 00:30:43,289
work the reason why I implemented flat

00:30:38,880 --> 00:30:46,559
pack and not snap is because flat pack

00:30:43,289 --> 00:30:49,049
works on my distro arch linux and snap

00:30:46,559 --> 00:30:52,770
craft which is the tool to build snaps

00:30:49,049 --> 00:30:55,080
doesn't work on on Arch Linux at least I

00:30:52,770 --> 00:30:59,090
don't know how to do that also another

00:30:55,080 --> 00:31:03,100
possibility that we looked into was duck

00:30:59,090 --> 00:31:05,960
Daka can be reasonably easily used to

00:31:03,100 --> 00:31:08,149
well both create well petrol of the

00:31:05,960 --> 00:31:11,389
dependencies and and create the up

00:31:08,149 --> 00:31:14,149
images but then well what they want to

00:31:11,389 --> 00:31:15,710
do here is actually to compile them

00:31:14,149 --> 00:31:17,029
locally so that if they want to modify

00:31:15,710 --> 00:31:19,009
something they can go through the whole

00:31:17,029 --> 00:31:20,990
development process so probably wouldn't

00:31:19,009 --> 00:31:23,360
be the right solution so well flat pack

00:31:20,990 --> 00:31:26,029
at least it's the the thing that at the

00:31:23,360 --> 00:31:29,029
moment we can consider more global at

00:31:26,029 --> 00:31:30,860
least for Linux like they said and from

00:31:29,029 --> 00:31:33,740
my perspective picking warm that's

00:31:30,860 --> 00:31:36,350
really a matter of what is getting

00:31:33,740 --> 00:31:37,789
traction for deploying to users right

00:31:36,350 --> 00:31:39,679
and right now there is a bit of traction

00:31:37,789 --> 00:31:42,889
to try to do that with flat pack and

00:31:39,679 --> 00:31:44,450
since we I mean we're a free software

00:31:42,889 --> 00:31:47,539
community like any other I'd rather

00:31:44,450 --> 00:31:50,119
reuse something which is partly done

00:31:47,539 --> 00:31:52,070
right and just bend it to my will for

00:31:50,119 --> 00:31:55,490
another use case and restart from

00:31:52,070 --> 00:31:57,710
scratch yeah maybe not so much of a

00:31:55,490 --> 00:32:00,110
question more comment so in a cute

00:31:57,710 --> 00:32:02,809
company we have been using Conan a bit

00:32:00,110 --> 00:32:06,200
we're using it for dependency management

00:32:02,809 --> 00:32:07,879
in the CI for WebKit and we had

00:32:06,200 --> 00:32:09,799
interactions with the conan developers

00:32:07,879 --> 00:32:12,320
it's pretty positive

00:32:09,799 --> 00:32:15,740
they are nice it comes with its own set

00:32:12,320 --> 00:32:18,559
of troubles like verification and so on

00:32:15,740 --> 00:32:20,809
but it's trying to be the npm for c++ or

00:32:18,559 --> 00:32:24,440
so on so i personally would really love

00:32:20,809 --> 00:32:26,690
having the frameworks in there and yeah

00:32:24,440 --> 00:32:30,110
cute will be there eventually i think

00:32:26,690 --> 00:32:31,970
and so it's kind of orthogonal so i

00:32:30,110 --> 00:32:34,279
think it's definitely worth pursuing

00:32:31,970 --> 00:32:37,279
also to make visibility of frameworks

00:32:34,279 --> 00:32:40,070
bigger so i really applaud that idea

00:32:37,279 --> 00:32:44,210
yeah because suddenly we would have like

00:32:40,070 --> 00:32:45,889
plenty of companions there's turns of c

00:32:44,210 --> 00:32:50,179
and c++ libraries which have been

00:32:45,889 --> 00:32:54,889
packaged for conan oh one last question

00:32:50,179 --> 00:32:57,080
that actually sounds like a reason to

00:32:54,889 --> 00:32:59,809
publish frameworks over there even if we

00:32:57,080 --> 00:33:02,379
don't use it for ourselves or just for

00:32:59,809 --> 00:33:06,200
the PR part of it and they convenient

00:33:02,379 --> 00:33:08,119
regarding the plugin problem with with

00:33:06,200 --> 00:33:10,789
running from the Bill territory we kinda

00:33:08,119 --> 00:33:12,930
have that solved in camera the trick is

00:33:10,789 --> 00:33:14,820
that the directory needs to

00:33:12,930 --> 00:33:17,040
the exact same layout as the Installer

00:33:14,820 --> 00:33:20,760
directory which is a few lines of see my

00:33:17,040 --> 00:33:23,160
code and Andy we have code that in the

00:33:20,760 --> 00:33:25,470
library doing the plugin loading that

00:33:23,160 --> 00:33:26,970
can localize the absolute path of the

00:33:25,470 --> 00:33:29,730
library itself and then you basically

00:33:26,970 --> 00:33:31,140
just at the from there you know where

00:33:29,730 --> 00:33:34,440
your plugins are based on the relative

00:33:31,140 --> 00:33:36,300
install powers so yeah yes but that's

00:33:34,440 --> 00:33:39,030
the easy case that's the case where you

00:33:36,300 --> 00:33:41,460
are building plug-ins for your own

00:33:39,030 --> 00:33:43,170
application then you control the the

00:33:41,460 --> 00:33:44,430
plug-in loading and you can add extra

00:33:43,170 --> 00:33:46,440
search pads yes

00:33:44,430 --> 00:33:48,780
but what if you're building a cute

00:33:46,440 --> 00:33:51,600
plug-in or a came a plague in or right

00:33:48,780 --> 00:33:53,430
then then you need it loaded by some

00:33:51,600 --> 00:33:55,740
code that you don't control and then

00:33:53,430 --> 00:33:59,190
apart from environment variables I don't

00:33:55,740 --> 00:34:02,750
know any better solution but yes this

00:33:59,190 --> 00:34:02,750
solution is readied for these cases

00:34:03,450 --> 00:34:09,120
thanks Gavin and David and with this we

00:34:06,060 --> 00:34:11,640
end this session and there will be a

00:34:09,120 --> 00:34:14,980
short coffee break after that will start

00:34:11,640 --> 00:34:18,219
at 18 ohm 1755 sorry

00:34:14,980 --> 00:34:18,219

YouTube URL: https://www.youtube.com/watch?v=KtSWSmM8YDg


