Title: Developing for our Users - Aleix Pol Gonzalez
Publication date: 2017-11-20
Playlist: Akademy 2017
Description: 
	In this presentation I'll offer a new point of view for development of regular KDE software based on bundling systems. We'll see what advantages we are going to get if we embrace these technologies from the developer perspective and what impact it's going to have beyond development, by shortening the path between the development, the QA we make and the actual users. It will offer new ways to cater to our users.

We will see how adopting bundling technologies (i.e. Snappy, Flatpak, AppImage) can open many doors on how our users not only use our software but also can be more efficient when contributing back upstream, either by testing new versions, submitting feedback or even modifying the software and getting the contribution into our repositories.

To that end, I'll propose some small changes we can do on our own software development and distribution process in order to enable these benefits to our users, or at least to some of them.

https://conf.kde.org/en/akademy2017/public/events/354
Captions: 
	00:00:07,460 --> 00:00:13,709
so everyone thank you for coming and

00:00:11,900 --> 00:00:14,769
yeah today I'm going to talk about

00:00:13,709 --> 00:00:16,750
developing for

00:00:14,769 --> 00:00:18,970
our users this probably doesn't mean

00:00:16,750 --> 00:00:21,340
much to you I had to use the title I

00:00:18,970 --> 00:00:23,259
never know what what titles to use for

00:00:21,340 --> 00:00:25,960
my presentations it's a bit mystical and

00:00:23,259 --> 00:00:27,460
you're probably wondering but as soon as

00:00:25,960 --> 00:00:30,550
I explained to you who am I

00:00:27,460 --> 00:00:32,379
maybe we'll start understanding I am a

00:00:30,550 --> 00:00:36,370
leash I have been developing in kitty

00:00:32,379 --> 00:00:39,940
for over ten years and well my first two

00:00:36,370 --> 00:00:42,010
projects one was tiny educational

00:00:39,940 --> 00:00:46,360
application called chaos erupted and the

00:00:42,010 --> 00:00:47,829
second one was Kay develop an ID K

00:00:46,360 --> 00:00:50,170
develop wasn't mine but I started

00:00:47,829 --> 00:00:53,350
contributing to it as soon as I started

00:00:50,170 --> 00:00:56,680
doing stuff in Kady and this is related

00:00:53,350 --> 00:00:58,329
because I have been experiencing both

00:00:56,680 --> 00:01:01,450
the little application kind of thing

00:00:58,329 --> 00:01:04,180
where well you're working on your stuff

00:01:01,450 --> 00:01:07,630
and you want to get it to the users and

00:01:04,180 --> 00:01:09,729
while you're not a big big project so I

00:01:07,630 --> 00:01:11,829
beat these throws and operating systems

00:01:09,729 --> 00:01:13,360
were carrying that much about me

00:01:11,829 --> 00:01:15,399
actually they were but I wasn't really

00:01:13,360 --> 00:01:18,009
aware of that at least at that time and

00:01:15,399 --> 00:01:20,079
then on the other side I got to think

00:01:18,009 --> 00:01:23,139
about what are the developers product

00:01:20,079 --> 00:01:26,679
problems and how does one actually

00:01:23,139 --> 00:01:29,490
develop an application and what kind of

00:01:26,679 --> 00:01:32,020
tools would one need to be happy and

00:01:29,490 --> 00:01:35,979
well sometimes I think we managed to

00:01:32,020 --> 00:01:38,590
deliver them and but not always and in

00:01:35,979 --> 00:01:40,509
general as being part of the community

00:01:38,590 --> 00:01:44,109
one thing that you need to think about

00:01:40,509 --> 00:01:45,700
and you keep being reminded of is that

00:01:44,109 --> 00:01:47,950
you need to make it easy to contribute

00:01:45,700 --> 00:01:49,869
right most of the people who work with

00:01:47,950 --> 00:01:51,579
us are not because they have a boss who

00:01:49,869 --> 00:01:53,920
told them you have to work on that

00:01:51,579 --> 00:01:56,020
because it's very important for whoever

00:01:53,920 --> 00:01:57,549
and if you don't do that you're not

00:01:56,020 --> 00:02:00,189
going to be paid right we need to make

00:01:57,549 --> 00:02:04,319
it easy and and and exciting and one

00:02:00,189 --> 00:02:07,959
part about making it is to well have a

00:02:04,319 --> 00:02:09,670
straight and meaningful line between I

00:02:07,959 --> 00:02:13,030
have an idea that I want to implement

00:02:09,670 --> 00:02:15,099
and I can start implementing it without

00:02:13,030 --> 00:02:17,800
having to go through hoops technical

00:02:15,099 --> 00:02:19,739
hoops regarding I don't know you need to

00:02:17,800 --> 00:02:23,740
install dependencies you need to

00:02:19,739 --> 00:02:25,660
recompile the kernel right no not not so

00:02:23,740 --> 00:02:27,970
fun stuff it's something that well the

00:02:25,660 --> 00:02:28,220
whole community has been working on for

00:02:27,970 --> 00:02:30,680
four

00:02:28,220 --> 00:02:32,930
years Katie has been working on it Linux

00:02:30,680 --> 00:02:37,600
has been working on it and actually like

00:02:32,930 --> 00:02:41,060
open-source is thriving on it and well

00:02:37,600 --> 00:02:43,280
now I'm gonna talk to you about how I

00:02:41,060 --> 00:02:47,390
think we could improve it some somehow

00:02:43,280 --> 00:02:49,880
in nkd so today to develop any KD

00:02:47,390 --> 00:02:52,880
application basically one usually needs

00:02:49,880 --> 00:02:55,160
cute which is the biggest framework we

00:02:52,880 --> 00:02:56,900
are based on but then we have a ton of

00:02:55,160 --> 00:02:59,060
frameworks because well over the years

00:02:56,900 --> 00:03:00,980
we started creating them because we

00:02:59,060 --> 00:03:04,220
realized that well cute wasn't offering

00:03:00,980 --> 00:03:06,110
everything we needed so and we had

00:03:04,220 --> 00:03:07,820
shared needs so we started implementing

00:03:06,110 --> 00:03:09,830
them and we put them together into

00:03:07,820 --> 00:03:11,209
frameworks this means that as soon as

00:03:09,830 --> 00:03:14,090
you start developing for an application

00:03:11,209 --> 00:03:16,910
you will realize that it's not just

00:03:14,090 --> 00:03:18,560
about installing the dependencies while

00:03:16,910 --> 00:03:21,530
queued as the dependencies but all of

00:03:18,560 --> 00:03:22,970
the kiddie frameworks which you since

00:03:21,530 --> 00:03:25,760
you're developing as well you will need

00:03:22,970 --> 00:03:27,860
like fairly recent versions of these

00:03:25,760 --> 00:03:30,470
frameworks which are not always part of

00:03:27,860 --> 00:03:32,750
the distribution this also gets more

00:03:30,470 --> 00:03:35,150
complex well as soon as you start stop

00:03:32,750 --> 00:03:37,070
thinking about Linux strictly right like

00:03:35,150 --> 00:03:40,400
if you want to develop let's say key

00:03:37,070 --> 00:03:42,500
algebra for Android or for Windows you

00:03:40,400 --> 00:03:44,720
want to have a nice distribution who is

00:03:42,500 --> 00:03:46,550
doing the work for you you will have to

00:03:44,720 --> 00:03:50,360
go yourself and fish for all of these

00:03:46,550 --> 00:03:52,400
dependencies and and well take whatever

00:03:50,360 --> 00:03:57,470
action you need to take by yourself and

00:03:52,400 --> 00:03:59,870
that's not super fun always but that

00:03:57,470 --> 00:04:01,790
that's the idea you you get started and

00:03:59,870 --> 00:04:04,150
before you can actually start doing your

00:04:01,790 --> 00:04:06,860
development you have to look at the

00:04:04,150 --> 00:04:09,890
weirdly complex dependency tree that you

00:04:06,860 --> 00:04:13,910
need to sort out right before you start

00:04:09,890 --> 00:04:16,400
doing what you actually came to do also

00:04:13,910 --> 00:04:18,140
they're very different Linux is like we

00:04:16,400 --> 00:04:20,180
like to talk about Linux as if it was

00:04:18,140 --> 00:04:23,780
just the one thing or two gnu/linux as

00:04:20,180 --> 00:04:26,120
if it was a the one thing but like if

00:04:23,780 --> 00:04:28,190
you think about it there's like a lot of

00:04:26,120 --> 00:04:32,750
very different things we can think about

00:04:28,190 --> 00:04:35,300
the normal distribution souza and all of

00:04:32,750 --> 00:04:37,390
that but then the the spectrum is much

00:04:35,300 --> 00:04:39,430
wider right like there's very there's

00:04:37,390 --> 00:04:41,680
Yocto for example

00:04:39,430 --> 00:04:44,380
there's Android it can also be

00:04:41,680 --> 00:04:47,199
considered to Linux and it's not always

00:04:44,380 --> 00:04:49,479
trivial to like catered days with with

00:04:47,199 --> 00:04:52,389
one approach at least not so far

00:04:49,479 --> 00:04:54,400
we're let's see if we can improve it and

00:04:52,389 --> 00:04:55,870
then as I was saying there's different

00:04:54,400 --> 00:04:58,449
operating systems one of the things that

00:04:55,870 --> 00:05:01,389
we tell developers when when when they

00:04:58,449 --> 00:05:04,090
work with us is that if you create an

00:05:01,389 --> 00:05:05,970
application that works properly in a KD

00:05:04,090 --> 00:05:09,970
setup and you're not doing crazy things

00:05:05,970 --> 00:05:11,199
very specific to like plasma for example

00:05:09,970 --> 00:05:13,960
you will be able to run these

00:05:11,199 --> 00:05:15,699
applications on on these different

00:05:13,960 --> 00:05:17,860
operating systems which actually makes a

00:05:15,699 --> 00:05:20,560
lot of sense right like there's a lot of

00:05:17,860 --> 00:05:22,180
our user base that sometimes will be on

00:05:20,560 --> 00:05:25,870
Windows sometimes will be on OSX

00:05:22,180 --> 00:05:28,000
sometimes will be on Android and and we

00:05:25,870 --> 00:05:30,880
cannot disregard this is the sea use

00:05:28,000 --> 00:05:35,349
case it's it's part of how this society

00:05:30,880 --> 00:05:37,300
behaves and we need to cater to that and

00:05:35,349 --> 00:05:37,960
we also have a very different form

00:05:37,300 --> 00:05:40,000
factors

00:05:37,960 --> 00:05:42,130
we cannot say our application all will

00:05:40,000 --> 00:05:45,099
only works on desktop unless it's a very

00:05:42,130 --> 00:05:48,729
desktop specific use case our users will

00:05:45,099 --> 00:05:50,860
be well working sometimes and just

00:05:48,729 --> 00:05:54,460
saying to them well you're out of luck

00:05:50,860 --> 00:05:57,039
because you're not sitting in front of a

00:05:54,460 --> 00:06:00,340
big screen and in a laptop computer is

00:05:57,039 --> 00:06:01,560
it's not really an option at least I

00:06:00,340 --> 00:06:08,409
think so

00:06:01,560 --> 00:06:10,419
so we've had solutions for that like for

00:06:08,409 --> 00:06:13,419
example we came up with a KD source

00:06:10,419 --> 00:06:15,280
build tool like many years ago and it's

00:06:13,419 --> 00:06:17,860
actually something that we have very

00:06:15,280 --> 00:06:20,260
properly documented on our wikis about

00:06:17,860 --> 00:06:22,990
and it actually tries to solve all of

00:06:20,260 --> 00:06:25,570
these issues but well it's something

00:06:22,990 --> 00:06:29,440
that we know about because it's part of

00:06:25,570 --> 00:06:32,650
our culture but as an outsider you don't

00:06:29,440 --> 00:06:35,800
want to straightaway have to learn about

00:06:32,650 --> 00:06:37,870
the culture when what you wanted to do

00:06:35,800 --> 00:06:41,320
it was to pick something or to get

00:06:37,870 --> 00:06:43,599
something done right so let's see what

00:06:41,320 --> 00:06:45,340
other people have been doing and

00:06:43,599 --> 00:06:46,889
thinking about when doing these kind of

00:06:45,340 --> 00:06:49,110
things

00:06:46,889 --> 00:06:51,960
the first

00:06:49,110 --> 00:06:53,580
solution that came to my mind when I

00:06:51,960 --> 00:06:56,730
started to think about this was his

00:06:53,580 --> 00:06:59,400
Tucker which is well it's a very

00:06:56,730 --> 00:07:02,400
widespread technology and I think it's

00:06:59,400 --> 00:07:03,990
really cool one one thing very specific

00:07:02,400 --> 00:07:06,389
about docker is that you usually will

00:07:03,990 --> 00:07:10,830
build your images on top of an another

00:07:06,389 --> 00:07:14,940
distro are very which is it's really

00:07:10,830 --> 00:07:16,470
interesting because you as a Linux user

00:07:14,940 --> 00:07:18,330
already you will have some kind of

00:07:16,470 --> 00:07:20,250
knowledge on how the technology works

00:07:18,330 --> 00:07:23,040
and actually all of these knowledge you

00:07:20,250 --> 00:07:26,160
have can be built on top of of docker we

00:07:23,040 --> 00:07:29,280
just need to learn two or three specific

00:07:26,160 --> 00:07:31,530
semantics and how it behaves but if

00:07:29,280 --> 00:07:36,930
you're a hardcore dogged user you will

00:07:31,530 --> 00:07:38,820
be able to use your debian knowledge on

00:07:36,930 --> 00:07:43,470
top of tucker another really interesting

00:07:38,820 --> 00:07:45,240
thing about docker is that most of us as

00:07:43,470 --> 00:07:47,850
developers we use just the one operating

00:07:45,240 --> 00:07:49,770
system because well you don't use two or

00:07:47,850 --> 00:07:54,240
three operating system at the same time

00:07:49,770 --> 00:07:55,560
right on a computer and if you need to

00:07:54,240 --> 00:07:57,630
test something on a different

00:07:55,560 --> 00:08:01,020
distribution it's always a possibility

00:07:57,630 --> 00:08:03,750
to do so on docker one thing quite

00:08:01,020 --> 00:08:06,840
interesting that the neon developers did

00:08:03,750 --> 00:08:11,450
some some years ago or months at least

00:08:06,840 --> 00:08:15,240
was create already pre build images for

00:08:11,450 --> 00:08:17,640
neon images for Tucker so basically you

00:08:15,240 --> 00:08:20,340
can just pull their image and start

00:08:17,640 --> 00:08:23,010
executing whatever it has or create your

00:08:20,340 --> 00:08:24,750
own doctor images based on top of these

00:08:23,010 --> 00:08:28,320
just installing whatever application

00:08:24,750 --> 00:08:30,990
you're looking for these for example as

00:08:28,320 --> 00:08:34,979
a user if you want to test a new version

00:08:30,990 --> 00:08:38,219
of let's say Krita or Kate Kate develop

00:08:34,979 --> 00:08:41,400
or whatever you like you can just use

00:08:38,219 --> 00:08:43,830
that docker image and and pull it that

00:08:41,400 --> 00:08:46,050
said it's not something that we have

00:08:43,830 --> 00:08:48,290
been exploring at least so far I haven't

00:08:46,050 --> 00:08:50,790
and I don't know if somebody else has

00:08:48,290 --> 00:08:52,320
explored it as a solution for actually

00:08:50,790 --> 00:08:55,470
distributing software and recommending

00:08:52,320 --> 00:08:57,390
it to the end user which is actually

00:08:55,470 --> 00:09:00,300
where I'm going like when we're

00:08:57,390 --> 00:09:02,170
developing we want to have our users on

00:09:00,300 --> 00:09:04,180
on a release that is

00:09:02,170 --> 00:09:06,940
maintain by us well what I want is that

00:09:04,180 --> 00:09:09,279
if I one of my users finds an issue in

00:09:06,940 --> 00:09:12,339
my in my software he can tell me I have

00:09:09,279 --> 00:09:14,709
this issue I can say I'm sorry I can fix

00:09:12,339 --> 00:09:15,399
it and then and then say well you're

00:09:14,709 --> 00:09:18,850
welcome

00:09:15,399 --> 00:09:21,670
and he needs to be able to get this new

00:09:18,850 --> 00:09:23,380
this new version of my software with the

00:09:21,670 --> 00:09:26,380
fix but it's not really acceptable is

00:09:23,380 --> 00:09:28,449
that since you got he got this old

00:09:26,380 --> 00:09:30,820
version that is already shipped by

00:09:28,449 --> 00:09:32,529
somewhere someone else well he's out of

00:09:30,820 --> 00:09:35,560
luck and he has to wait for whatever

00:09:32,529 --> 00:09:38,290
upgrade he gets because while these

00:09:35,560 --> 00:09:40,180
harms actually these harms all of us

00:09:38,290 --> 00:09:42,699
right like it turns us because we're not

00:09:40,180 --> 00:09:45,010
able to deliver today I'm the experience

00:09:42,699 --> 00:09:46,839
that we want it harms the user because

00:09:45,010 --> 00:09:49,540
well he has a software that doesn't use

00:09:46,839 --> 00:09:51,910
and it actually harms the distributor

00:09:49,540 --> 00:09:56,199
because well he hasn't happy users

00:09:51,910 --> 00:09:58,209
because of the the policies that are

00:09:56,199 --> 00:10:02,829
there for good reasons but well they're

00:09:58,209 --> 00:10:05,139
not flawless as any policy right then

00:10:02,829 --> 00:10:09,060
during the last few years there's been

00:10:05,139 --> 00:10:11,769
these two technologies that I sometimes

00:10:09,060 --> 00:10:15,100
drop together which are flat back and

00:10:11,769 --> 00:10:18,579
snap the they're basically based on the

00:10:15,100 --> 00:10:20,230
same technology that in the same

00:10:18,579 --> 00:10:25,149
technology that docker is based but

00:10:20,230 --> 00:10:27,010
they're already designed to to

00:10:25,149 --> 00:10:30,190
distribute software to be used exactly

00:10:27,010 --> 00:10:32,529
by end-users flat-pack is more

00:10:30,190 --> 00:10:36,279
specifically made for desktop

00:10:32,529 --> 00:10:39,730
applications snap is more of do whatever

00:10:36,279 --> 00:10:41,610
you want with said thing also a very

00:10:39,730 --> 00:10:46,630
interesting thing is that they have a

00:10:41,610 --> 00:10:49,120
specific security model that that allows

00:10:46,630 --> 00:10:52,569
well since you know that the users will

00:10:49,120 --> 00:10:54,279
be pulling this kind of these

00:10:52,569 --> 00:10:57,100
applications into their system without

00:10:54,279 --> 00:10:59,260
knowing where it's coming from the the

00:10:57,100 --> 00:11:01,360
systems can actually give you some kind

00:10:59,260 --> 00:11:03,250
of information about whether the

00:11:01,360 --> 00:11:06,040
application is going to steal your data

00:11:03,250 --> 00:11:08,079
or not in the end there's going to be

00:11:06,040 --> 00:11:12,130
always like as soon as an application

00:11:08,079 --> 00:11:13,400
asks for a privilege you get to give it

00:11:12,130 --> 00:11:17,630
some credit right

00:11:13,400 --> 00:11:19,670
well still making free software and

00:11:17,630 --> 00:11:22,460
based it on these systems should always

00:11:19,670 --> 00:11:27,140
make the users as well a bit more more

00:11:22,460 --> 00:11:29,089
confident because in the end like what

00:11:27,140 --> 00:11:32,390
we're coming from is that the security

00:11:29,089 --> 00:11:34,880
model we always had was the distro knows

00:11:32,390 --> 00:11:37,279
their and they're very good at it

00:11:34,880 --> 00:11:39,950
which is it's really cool and it's

00:11:37,279 --> 00:11:42,230
possibly the reason why we are not full

00:11:39,950 --> 00:11:44,690
of viruses all over our systems I've

00:11:42,230 --> 00:11:47,330
personally never had a virus on my

00:11:44,690 --> 00:11:51,710
system at least that I know of and and

00:11:47,330 --> 00:11:54,140
the reason is because I've been while

00:11:51,710 --> 00:11:56,330
getting my software from from very good

00:11:54,140 --> 00:11:58,700
distributions over the years whoo well

00:11:56,330 --> 00:12:00,650
actually weren't distributing viruses to

00:11:58,700 --> 00:12:02,089
me but as long as soon as I start

00:12:00,650 --> 00:12:04,460
pulling things from the internet I can

00:12:02,089 --> 00:12:07,130
see how this this could could be a thing

00:12:04,460 --> 00:12:10,580
especially since we're most of us still

00:12:07,130 --> 00:12:13,070
using x11 and while lots of technology

00:12:10,580 --> 00:12:16,460
that aren't are built based basically on

00:12:13,070 --> 00:12:18,470
this premise on that there will actually

00:12:16,460 --> 00:12:23,720
not be any viruses on your system or

00:12:18,470 --> 00:12:25,400
malicious software so as soon as I got

00:12:23,720 --> 00:12:29,560
the realization that there were some

00:12:25,400 --> 00:12:32,390
tools that we could be using better for

00:12:29,560 --> 00:12:35,060
for both distributing our software and

00:12:32,390 --> 00:12:39,020
to actually develop on I thought well

00:12:35,060 --> 00:12:41,029
now it's moment we will take back my mic

00:12:39,020 --> 00:12:42,980
a develop experience and see how we can

00:12:41,029 --> 00:12:46,130
actually put this in practice in a way

00:12:42,980 --> 00:12:53,750
that is actually useful for for our

00:12:46,130 --> 00:13:02,420
users so here's a couple of videos I

00:12:53,750 --> 00:13:05,000
prepared for from my last blog post to

00:13:02,420 --> 00:13:08,390
explain a bit how this technologies

00:13:05,000 --> 00:13:10,459
works this is for example an example for

00:13:08,390 --> 00:13:12,020
for the doctor integration I did so

00:13:10,459 --> 00:13:14,060
basically what happened was that I

00:13:12,020 --> 00:13:15,680
started a Python application that didn't

00:13:14,060 --> 00:13:17,029
have all of the dependencies because

00:13:15,680 --> 00:13:20,270
they were not part of my system

00:13:17,029 --> 00:13:22,300
so I created a docker image and then

00:13:20,270 --> 00:13:26,570
built a system which will have these

00:13:22,300 --> 00:13:29,270
dependencies and then I switch my

00:13:26,570 --> 00:13:31,550
kay develop runtime into the darker one

00:13:29,270 --> 00:13:34,310
and now Kay develop everything it sees

00:13:31,550 --> 00:13:36,110
is what's in that docker all of the

00:13:34,310 --> 00:13:39,350
dependencies that it looks for will be

00:13:36,110 --> 00:13:42,080
in the docker and won't be whatever I

00:13:39,350 --> 00:13:44,480
have on my system right if you think

00:13:42,080 --> 00:13:47,300
about it every software we've been

00:13:44,480 --> 00:13:50,660
developing so far unless you were using

00:13:47,300 --> 00:13:52,940
this technologies for sure or others is

00:13:50,660 --> 00:13:55,610
software that was actually meant to use

00:13:52,940 --> 00:13:58,550
on our computer it was strictly relying

00:13:55,610 --> 00:14:00,440
on the state of our computer to work but

00:13:58,550 --> 00:14:03,110
this system is not the system that our

00:14:00,440 --> 00:14:05,810
users have admittedly it's a very

00:14:03,110 --> 00:14:08,390
similar system but it's not always the

00:14:05,810 --> 00:14:11,420
case and for example docker will give

00:14:08,390 --> 00:14:16,490
you like the security that it's it's

00:14:11,420 --> 00:14:20,450
being done in an in a pristine clean

00:14:16,490 --> 00:14:22,070
system right so well I don't know if you

00:14:20,450 --> 00:14:24,530
realize but basically the end of the

00:14:22,070 --> 00:14:26,000
example well you it pre-rounds the

00:14:24,530 --> 00:14:28,390
application all of the imports are

00:14:26,000 --> 00:14:31,850
resolved because the the docker script

00:14:28,390 --> 00:14:34,250
took care of the author weapon

00:14:31,850 --> 00:14:38,060
dependencies and then when it executed

00:14:34,250 --> 00:14:39,620
it it worked it's not just about being

00:14:38,060 --> 00:14:45,580
able to install the dependencies though

00:14:39,620 --> 00:14:48,200
it's about how me as a new developer I

00:14:45,580 --> 00:14:51,230
didn't have to configure my system in

00:14:48,200 --> 00:14:55,240
very obscure or ways that I didn't

00:14:51,230 --> 00:14:58,190
really understand I just installed

00:14:55,240 --> 00:15:00,740
docker image which is something living

00:14:58,190 --> 00:15:03,380
in my my file system but not really

00:15:00,740 --> 00:15:11,330
compromising it or even making it dirty

00:15:03,380 --> 00:15:14,030
and just developing something on it now

00:15:11,330 --> 00:15:16,130
here's another example as you see it's

00:15:14,030 --> 00:15:18,050
three minutes it's much longer but it's

00:15:16,130 --> 00:15:22,520
essentially doing exactly the same thing

00:15:18,050 --> 00:15:25,700
but with flat-pack right so here it's

00:15:22,520 --> 00:15:27,740
showing an example of arc its first

00:15:25,700 --> 00:15:31,990
leave executed my local arc it's using

00:15:27,740 --> 00:15:35,650
my dependencies on my on my system and

00:15:31,990 --> 00:15:38,350
and since I have already my KD

00:15:35,650 --> 00:15:41,590
frameworks everything built

00:15:38,350 --> 00:15:46,090
I I already had it browning right but

00:15:41,590 --> 00:15:48,190
then I created a new runtime using the

00:15:46,090 --> 00:15:49,600
the flat-pack one and now it's going to

00:15:48,190 --> 00:15:52,360
compile the application using the

00:15:49,600 --> 00:15:55,090
dependencies as specified as as a

00:15:52,360 --> 00:15:58,420
flatback application this takes much

00:15:55,090 --> 00:16:02,620
longer but it is much longer because the

00:15:58,420 --> 00:16:05,200
application is being built by but using

00:16:02,620 --> 00:16:06,880
a C++ compiler and C++ needs to compile

00:16:05,200 --> 00:16:08,590
all of the files it's also a much bigger

00:16:06,880 --> 00:16:12,280
project right but it's not nothing

00:16:08,590 --> 00:16:14,800
really out of the the normal that it's

00:16:12,280 --> 00:16:16,990
it's doing it just recompiling a project

00:16:14,800 --> 00:16:20,020
from scratch against a different set of

00:16:16,990 --> 00:16:21,910
libraries this is especially interesting

00:16:20,020 --> 00:16:24,400
as well because we get to ensure that

00:16:21,910 --> 00:16:26,290
all of the developers will be using the

00:16:24,400 --> 00:16:28,240
same done dependencies and all of the

00:16:26,290 --> 00:16:31,600
users will be using the dependencies

00:16:28,240 --> 00:16:34,150
that we are choosing right so if a user

00:16:31,600 --> 00:16:37,510
has a problem we will be having that

00:16:34,150 --> 00:16:39,700
problem as well so reproducing an issue

00:16:37,510 --> 00:16:42,400
is just something that happens straight

00:16:39,700 --> 00:16:45,100
away also an interesting thing is that

00:16:42,400 --> 00:16:50,500
the resulting binary could be

00:16:45,100 --> 00:16:52,750
potentially created by us so well it's

00:16:50,500 --> 00:16:57,190
something that we can even send to the

00:16:52,750 --> 00:16:59,800
user and actually have him well tested I

00:16:57,190 --> 00:17:02,440
can skip a bit the compilation part but

00:16:59,800 --> 00:17:06,490
basically the conclusion of the video is

00:17:02,440 --> 00:17:10,540
that while the ark also started when it

00:17:06,490 --> 00:17:15,400
was built on by flat-pack and but life

00:17:10,540 --> 00:17:17,770
goes on and this isn't also another

00:17:15,400 --> 00:17:20,940
example I one of the things I wanted to

00:17:17,770 --> 00:17:23,410
do when when working on this was that I

00:17:20,940 --> 00:17:27,640
perceived that if we start pushing

00:17:23,410 --> 00:17:31,030
developers to develop for the plasma

00:17:27,640 --> 00:17:33,220
phone will very soon see that it's it

00:17:31,030 --> 00:17:35,470
becomes quite complex to do the whole I

00:17:33,220 --> 00:17:37,990
develop on my opinon on my on my laptop

00:17:35,470 --> 00:17:40,360
and I actually execute it on my on my

00:17:37,990 --> 00:17:42,520
phone and actually that's what happened

00:17:40,360 --> 00:17:44,380
when we started working on it what we

00:17:42,520 --> 00:17:47,220
did was to actually compile the

00:17:44,380 --> 00:17:51,080
application on the phone and actually

00:17:47,220 --> 00:17:57,190
just display well execute it from there

00:17:51,080 --> 00:17:57,190
so what's happened with the video hello

00:18:02,860 --> 00:18:13,490
for sake does anybody know what

00:18:06,950 --> 00:18:16,370
happened let's try again

00:18:13,490 --> 00:18:18,530
it's a quick video anyway so what what

00:18:16,370 --> 00:18:20,600
this video does is that I am developing

00:18:18,530 --> 00:18:24,680
an application on my laptop I get to

00:18:20,600 --> 00:18:26,060
execute it locally but then at some

00:18:24,680 --> 00:18:29,060
point I want to execute it on another

00:18:26,060 --> 00:18:30,860
device in this case I was using my flip

00:18:29,060 --> 00:18:34,460
book but it could be a plasma phone

00:18:30,860 --> 00:18:36,740
theoretically so while it's just sending

00:18:34,460 --> 00:18:38,600
over the application to the other system

00:18:36,740 --> 00:18:41,560
and then it's executing also on the

00:18:38,600 --> 00:18:46,160
other system and then thumbs up right

00:18:41,560 --> 00:18:47,560
and and and and then by that just

00:18:46,160 --> 00:18:51,890
another example

00:18:47,560 --> 00:18:53,420
so right now the the it's really

00:18:51,890 --> 00:18:55,190
important that we start looking into

00:18:53,420 --> 00:18:57,140
these because these technologies are

00:18:55,190 --> 00:18:59,600
blooming now we need to make sure that

00:18:57,140 --> 00:19:03,290
we can help drive the development of

00:18:59,600 --> 00:19:05,330
these we also what we can start

00:19:03,290 --> 00:19:08,450
leveraging such technologies which is

00:19:05,330 --> 00:19:10,820
brilliant and to do that we need to get

00:19:08,450 --> 00:19:13,400
project maintainers to realize that this

00:19:10,820 --> 00:19:15,290
is a problem and it is actually an

00:19:13,400 --> 00:19:17,300
opportunity right we need to start

00:19:15,290 --> 00:19:18,860
providing recipes to have this

00:19:17,300 --> 00:19:23,690
applications built at the moment we have

00:19:18,860 --> 00:19:25,940
a bunch of recipes for night labels but

00:19:23,690 --> 00:19:27,680
I am NOT going to become responsible for

00:19:25,940 --> 00:19:29,330
making the stable releases for every

00:19:27,680 --> 00:19:31,340
application if an application is

00:19:29,330 --> 00:19:34,760
interested they can do so and I'll be

00:19:31,340 --> 00:19:36,890
happy about it actually I will help you

00:19:34,760 --> 00:19:38,270
guys get onto it but I need project

00:19:36,890 --> 00:19:41,510
maintainers to take responsibility

00:19:38,270 --> 00:19:43,430
though I also want I think it's also

00:19:41,510 --> 00:19:45,230
good that we remind that it's very

00:19:43,430 --> 00:19:48,620
important because it shortens very much

00:19:45,230 --> 00:19:51,980
so the feedback loop between the users

00:19:48,620 --> 00:19:54,260
and in our our state and we also need

00:19:51,980 --> 00:19:56,180
users to demand supported software if

00:19:54,260 --> 00:19:59,630
not it's not acceptable that a user is

00:19:56,180 --> 00:20:00,800
using version of our software that is

00:19:59,630 --> 00:20:02,510
not being maintained if they have a

00:20:00,800 --> 00:20:04,760
problem we won't be able to solve it and

00:20:02,510 --> 00:20:06,140
that's that is a big a big problem it's

00:20:04,760 --> 00:20:10,430
a big problem that we need to solve and

00:20:06,140 --> 00:20:12,530
we need to solve it now and I want you

00:20:10,430 --> 00:20:14,870
guys as users to make it happen you need

00:20:12,530 --> 00:20:17,000
to become annoying you need to say I am

00:20:14,870 --> 00:20:19,010
using this distro and I don't have ways

00:20:17,000 --> 00:20:22,910
to use your supported software if you

00:20:19,010 --> 00:20:25,620
don't listen to me I will call allies

00:20:22,910 --> 00:20:28,320
and throw him at you and

00:20:25,620 --> 00:20:30,450
stupid herbs well don't frown which is

00:20:28,320 --> 00:20:32,309
something that very often happens it's

00:20:30,450 --> 00:20:34,770
something good for the community

00:20:32,309 --> 00:20:37,590
III want to go work together with you

00:20:34,770 --> 00:20:39,390
guys actually some of this work is very

00:20:37,590 --> 00:20:41,640
very similar to the word you guys have

00:20:39,390 --> 00:20:43,680
been doing so far and I think that well

00:20:41,640 --> 00:20:46,620
we can very much use your help

00:20:43,680 --> 00:20:49,050
and otherwise we can very much use your

00:20:46,620 --> 00:20:51,809
collaboration it's something that we'll

00:20:49,050 --> 00:20:54,360
have the whole open source and the next

00:20:51,809 --> 00:20:58,080
community grow and I want to do it

00:20:54,360 --> 00:21:00,240
together so that's what I wanted to say

00:20:58,080 --> 00:21:03,270
if you have any questions you can do it

00:21:00,240 --> 00:21:05,460
now or later in the hallways or whenever

00:21:03,270 --> 00:21:08,429
you want to although if you do it now

00:21:05,460 --> 00:21:17,720
somebody else might hear your answer and

00:21:08,429 --> 00:21:17,720
the answer as well just a plus questions

00:21:18,230 --> 00:21:23,780
there's no questions thank you very much

00:21:21,650 --> 00:21:30,069
thank you Alex

00:21:23,780 --> 00:21:30,069
[Applause]

00:21:30,890 --> 00:21:36,120
so our next speaker is John Baptist

00:21:33,840 --> 00:21:39,059
Martin who is a maintainer of kadian

00:21:36,120 --> 00:21:41,790
life and the topic is going to talk is

00:21:39,059 --> 00:21:44,630
carrying life rewriting the timeline

00:21:41,790 --> 00:21:44,630

YouTube URL: https://www.youtube.com/watch?v=OAGWb62BXUM


