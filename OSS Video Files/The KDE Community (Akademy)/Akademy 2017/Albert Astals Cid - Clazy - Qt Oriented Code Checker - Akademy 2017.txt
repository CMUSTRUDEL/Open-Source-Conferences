Title: Albert Astals Cid - Clazy - Qt Oriented Code Checker - Akademy 2017
Publication date: 2017-11-20
Playlist: Akademy 2017
Description: 
	A quick overview on Clazy, a static code checker for Qt code.

https://conf.kde.org/en/akademy2017/public/events/379
Captions: 
	00:00:08,330 --> 00:00:15,830
look a up a okay so yeah that's me

00:00:13,620 --> 00:00:18,410
my

00:00:15,830 --> 00:00:22,010
short ish basically is saying yeah but

00:00:18,410 --> 00:00:24,680
he said lazy it's a coat checker

00:00:22,010 --> 00:00:26,390
it's a flying plugin it's a crazy

00:00:24,680 --> 00:00:28,250
replacement I don't know if you guys

00:00:26,390 --> 00:00:31,279
remember we had something called crazy

00:00:28,250 --> 00:00:35,710
back then what we still have it it's

00:00:31,279 --> 00:00:37,820
some crazy parallel scripts that try to

00:00:35,710 --> 00:00:41,330
understand the code until you're doing

00:00:37,820 --> 00:00:44,150
things wrong but obviously it doesn't

00:00:41,330 --> 00:00:46,190
really work because you know parallel

00:00:44,150 --> 00:00:47,900
and C++ and whatever

00:00:46,190 --> 00:00:49,120
so using clang as a plugin is much

00:00:47,900 --> 00:00:52,549
better because it can actually

00:00:49,120 --> 00:00:55,489
understand the code it's a heavy project

00:00:52,549 --> 00:00:59,210
so it's hosted on our git repositories

00:00:55,489 --> 00:01:01,460
is mostly done by Sergio Martinez and by

00:00:59,210 --> 00:01:04,100
mostly I mean like 90% of the code

00:01:01,460 --> 00:01:06,920
I checked the code comments yesterday

00:01:04,100 --> 00:01:09,680
and he had like 200 and then the next

00:01:06,920 --> 00:01:12,939
guy had 10 and then I had nine so yeah

00:01:09,680 --> 00:01:16,729
it's basically hidden but whatever so

00:01:12,939 --> 00:01:19,340
what does it take before what the check

00:01:16,729 --> 00:01:23,870
it has like four levels of checks called

00:01:19,340 --> 00:01:26,450
level 0 1 2 and 3 those levels are how

00:01:23,870 --> 00:01:28,820
stable the check is alright so basically

00:01:26,450 --> 00:01:30,170
level 0 is mostly like it's always

00:01:28,820 --> 00:01:33,170
correct what does it tell you to fix

00:01:30,170 --> 00:01:35,810
level 1 is like 99% of the times correct

00:01:33,170 --> 00:01:39,470
and then the others is like you should

00:01:35,810 --> 00:01:41,390
not trust it very much you should trust

00:01:39,470 --> 00:01:43,850
it but just check right not not be blind

00:01:41,390 --> 00:01:46,040
about it it's also magical because

00:01:43,850 --> 00:01:48,650
sometimes it actually knows how to fix

00:01:46,040 --> 00:01:50,450
your code so you it will like rewrite

00:01:48,650 --> 00:01:52,340
your C++ right it's like your code is

00:01:50,450 --> 00:01:53,090
wrong and I fix it is like good I don't

00:01:52,340 --> 00:01:55,159
need to do anything

00:01:53,090 --> 00:01:56,750
I mean sometimes like the compiler could

00:01:55,159 --> 00:01:58,880
do that right like it says you forgot

00:01:56,750 --> 00:02:00,830
that semicolon is I just add it you know

00:01:58,880 --> 00:02:03,050
I mean you should be smart enough to do

00:02:00,830 --> 00:02:06,610
it anyhow so I'm going to do some

00:02:03,050 --> 00:02:09,619
examples no sorry first how to use it

00:02:06,610 --> 00:02:11,599
it's not really very packaged or I

00:02:09,619 --> 00:02:14,599
couldn't actually find any distribution

00:02:11,599 --> 00:02:17,690
that has a package for it so you have to

00:02:14,599 --> 00:02:21,769
compile it sometimes it's a bit tricky

00:02:17,690 --> 00:02:25,100
because distributions package the clang

00:02:21,769 --> 00:02:27,740
and LLVM libraries in a not very good

00:02:25,100 --> 00:02:29,580
way so yeah I mean it works but

00:02:27,740 --> 00:02:32,850
sometimes you have to fiddle with it

00:02:29,580 --> 00:02:35,040
then it's very easy you just tell Simic

00:02:32,850 --> 00:02:36,780
to use lazy as a compiler obviously you

00:02:35,040 --> 00:02:38,790
add it to your path or otherwise you put

00:02:36,780 --> 00:02:42,990
like the whole path letter and it will

00:02:38,790 --> 00:02:45,660
work and then as I said there's those

00:02:42,990 --> 00:02:47,840
levels by default level 0 and level 1

00:02:45,660 --> 00:02:53,750
are enabled so the warnings you will get

00:02:47,840 --> 00:02:56,940
are mostly good if you want to enable

00:02:53,750 --> 00:02:59,190
checks selectively you can either write

00:02:56,940 --> 00:03:01,290
them by name there's a very nice man

00:02:59,190 --> 00:03:03,300
page that explains the names of every

00:03:01,290 --> 00:03:06,120
check so you can use go there and check

00:03:03,300 --> 00:03:09,380
the names or just go by levels so say I

00:03:06,120 --> 00:03:16,920
want level 0 and the check knock um ooh

00:03:09,380 --> 00:03:19,170
yeah examples so it does tell you if you

00:03:16,920 --> 00:03:21,720
are trying to do a new style connect

00:03:19,170 --> 00:03:23,459
with something that isn't actually a

00:03:21,720 --> 00:03:26,030
signal right so you for example you pass

00:03:23,459 --> 00:03:29,130
us is not as the second parameter that

00:03:26,030 --> 00:03:31,440
would compile because you know it's just

00:03:29,130 --> 00:03:34,290
a function that they cure that the

00:03:31,440 --> 00:03:36,300
connect is trying to figure out but then

00:03:34,290 --> 00:03:39,060
when you run it you will never meet a

00:03:36,300 --> 00:03:41,930
slot right because it's not a signal so

00:03:39,060 --> 00:03:45,570
it will fail then it has a few of

00:03:41,930 --> 00:03:48,239
performance thingies so if you do set it

00:03:45,570 --> 00:03:49,769
to least zero and that's low because

00:03:48,239 --> 00:03:51,959
that has to convert the set to a list

00:03:49,769 --> 00:03:54,450
and then you get the first one well you

00:03:51,959 --> 00:03:58,560
could just do set confer stand up Laura

00:03:54,450 --> 00:04:02,820
right it's there's lots of checks that

00:03:58,560 --> 00:04:05,090
are about minor things but when you fix

00:04:02,820 --> 00:04:08,340
all those minor things it really adds up

00:04:05,090 --> 00:04:11,310
it saves for example the cue color one

00:04:08,340 --> 00:04:14,250
right I mean it's not that bad right but

00:04:11,310 --> 00:04:16,680
if you create lots of like that needs to

00:04:14,250 --> 00:04:18,269
create a string like a cap a carpenter

00:04:16,680 --> 00:04:19,739
that will create a string that will

00:04:18,269 --> 00:04:21,390
create the key color and then you have

00:04:19,739 --> 00:04:23,910
to destroy the key string and your

00:04:21,390 --> 00:04:26,580
memory is broken because you allocate it

00:04:23,910 --> 00:04:29,750
like two bytes that are not being able

00:04:26,580 --> 00:04:31,890
to be reused again so sometimes you get

00:04:29,750 --> 00:04:35,610
fragmentation it also burns you about

00:04:31,890 --> 00:04:37,680
you're using genomes the new nice cue

00:04:35,610 --> 00:04:40,289
word is cue animal without this that

00:04:37,680 --> 00:04:42,550
does more magical things so you know use

00:04:40,289 --> 00:04:46,070
that one instead of the other one

00:04:42,550 --> 00:04:48,920
it does tell you not to use queue file

00:04:46,070 --> 00:04:50,900
name exists because there's a queue file

00:04:48,920 --> 00:04:53,270
import see sorry that capital letter is

00:04:50,900 --> 00:04:54,980
messed because I office does alter

00:04:53,270 --> 00:04:56,510
formatting and you know you should use

00:04:54,980 --> 00:05:00,410
the static version which for some reason

00:04:56,510 --> 00:05:03,410
is faster they also weren't like there's

00:05:00,410 --> 00:05:06,890
a news a very nice one it runs you about

00:05:03,410 --> 00:05:10,280
when you have a value that you never use

00:05:06,890 --> 00:05:11,810
and it's a class right the compiler will

00:05:10,280 --> 00:05:13,490
warn you if you have an integer and you

00:05:11,810 --> 00:05:14,930
never use the integer but the compiler

00:05:13,490 --> 00:05:16,160
can't warn you if you have a queue

00:05:14,930 --> 00:05:17,540
string and you never use the key string

00:05:16,160 --> 00:05:20,870
because the compiler doesn't know is

00:05:17,540 --> 00:05:22,970
accused in constructor does magic things

00:05:20,870 --> 00:05:24,530
right but we actually know that the

00:05:22,970 --> 00:05:26,870
queue string constructor and the sector

00:05:24,530 --> 00:05:28,760
don't do anything so if you have cue

00:05:26,870 --> 00:05:33,800
string s and never use the glue string s

00:05:28,760 --> 00:05:35,720
Casey will will warn you about that one

00:05:33,800 --> 00:05:37,880
that's based on a whitelist so it's it's

00:05:35,720 --> 00:05:39,380
not it's not very smart it's just a

00:05:37,880 --> 00:05:42,100
whitelist that goes over the code and

00:05:39,380 --> 00:05:45,680
and checks if you have if you need to

00:05:42,100 --> 00:05:47,960
stop using it or not as before with the

00:05:45,680 --> 00:05:51,350
values so if you do queue that you

00:05:47,960 --> 00:05:53,450
delete all set values that's that's very

00:05:51,350 --> 00:05:55,190
slow because needs to compared they set

00:05:53,450 --> 00:05:57,680
to a list and then delete it

00:05:55,190 --> 00:06:00,860
queue that all knows how to do that with

00:05:57,680 --> 00:06:02,780
a for each so it's faster it will warn

00:06:00,860 --> 00:06:04,460
you if you have classes with queue

00:06:02,780 --> 00:06:05,960
objects that don't have the key object

00:06:04,460 --> 00:06:07,790
macro which also it's interesting

00:06:05,960 --> 00:06:11,900
because you can do all the magic with

00:06:07,790 --> 00:06:13,760
the meta object but not there's a

00:06:11,900 --> 00:06:15,170
never-ending discussion about how evil

00:06:13,760 --> 00:06:16,910
queue list is and you shouldn't be using

00:06:15,170 --> 00:06:18,710
it right so it also warns about it I

00:06:16,910 --> 00:06:20,120
don't know most of the times you don't

00:06:18,710 --> 00:06:25,250
really care but you will get a warning

00:06:20,120 --> 00:06:28,370
and that's it my talk is just this I

00:06:25,250 --> 00:06:30,350
urge you to try it most of the times

00:06:28,370 --> 00:06:33,320
you'll get huge warnings and it's like

00:06:30,350 --> 00:06:36,080
me it's not really that important but if

00:06:33,320 --> 00:06:38,000
you if you go through them slowly it I

00:06:36,080 --> 00:06:40,280
think actually it makes sense to fix

00:06:38,000 --> 00:06:43,310
most of at least d-10 and level-1

00:06:40,280 --> 00:06:49,730
level-2 it's a bit man

00:06:43,310 --> 00:06:52,040
there's also a nice that I didn't add

00:06:49,730 --> 00:06:53,750
here which is the cue string one it

00:06:52,040 --> 00:06:55,240
gives you like this you know like

00:06:53,750 --> 00:06:56,949
there's this cue string

00:06:55,240 --> 00:06:58,539
that those black magic and doesn't do

00:06:56,949 --> 00:07:02,080
allocations when you when you create it

00:06:58,539 --> 00:07:06,729
it will tell you to use it it will try

00:07:02,080 --> 00:07:08,229
to use it we when I was working at

00:07:06,729 --> 00:07:10,120
canonical on the window phone we tried

00:07:08,229 --> 00:07:11,680
that and it really helped with the

00:07:10,120 --> 00:07:13,030
memory fragmentation we were having like

00:07:11,680 --> 00:07:15,490
we were creating lots of strings all the

00:07:13,030 --> 00:07:18,940
time and deleting the cue strings and it

00:07:15,490 --> 00:07:20,819
did really reduce memory usage so give

00:07:18,940 --> 00:07:23,770
it a go maybe it helps your project and

00:07:20,819 --> 00:07:37,389
that's basically it I never got any

00:07:23,770 --> 00:07:40,300
question well on art you can find it in

00:07:37,389 --> 00:07:42,639
the arch user repository ok so it is

00:07:40,300 --> 00:07:46,240
there if you are using art and also if

00:07:42,639 --> 00:07:50,139
you have any Cavey project that uses

00:07:46,240 --> 00:07:53,919
extra Sameach modules when you build if

00:07:50,139 --> 00:07:56,470
you set your compiler to clang you can

00:07:53,919 --> 00:08:00,780
enable an option that is used lazy and

00:07:56,470 --> 00:08:03,190
it does already all the magic for you so

00:08:00,780 --> 00:08:06,909
right didn't we need to do that there's

00:08:03,190 --> 00:08:09,130
another option users you stole it from

00:08:06,909 --> 00:08:12,039
if you're using art it's in five minutes

00:08:09,130 --> 00:08:15,090
you can run it on your project so use

00:08:12,039 --> 00:08:15,090
arch or not

00:08:16,500 --> 00:08:19,589
[Music]

00:08:20,640 --> 00:08:25,540
like I'll repeat the question he asked

00:08:23,620 --> 00:08:29,940
if there is any work to enable it on the

00:08:25,540 --> 00:08:34,270
CIE system I don't know it shouldn't be

00:08:29,940 --> 00:08:38,349
very hard because it's just another

00:08:34,270 --> 00:08:41,020
compiler right do you know why it's not

00:08:38,349 --> 00:08:42,460
packaged for most so I think it's not

00:08:41,020 --> 00:08:46,560
packets because there hasn't been

00:08:42,460 --> 00:08:48,610
actually a release like a tarball

00:08:46,560 --> 00:08:50,800
maybe there is I don't know I think

00:08:48,610 --> 00:08:52,240
there is not so like if you don't give

00:08:50,800 --> 00:08:54,190
people tar balls they usually don't

00:08:52,240 --> 00:08:57,100
package them it's it's it's it's it's a

00:08:54,190 --> 00:08:58,990
reasonable expectation so I had heard

00:08:57,100 --> 00:09:01,660
you know something about doing releases

00:08:58,990 --> 00:09:04,060
oh yeah that I don't know I'm here

00:09:01,660 --> 00:09:07,900
talking about something else I'll talk

00:09:04,060 --> 00:09:10,720
to Sergey uh it should be easily fixable

00:09:07,900 --> 00:09:18,910
if if he hasn't done a release will will

00:09:10,720 --> 00:09:20,770
make the do one question okay then I

00:09:18,910 --> 00:09:22,390
have a questions it's stupid one but

00:09:20,770 --> 00:09:23,800
that's crazy actually compile the code

00:09:22,390 --> 00:09:25,600
after checking it because otherwise CMAC

00:09:23,800 --> 00:09:28,300
would error out with the case you cannot

00:09:25,600 --> 00:09:31,390
actually compile executables if you say

00:09:28,300 --> 00:09:33,610
the cxx compiler is crazy so again so

00:09:31,390 --> 00:09:38,170
does crazy actually compile the code

00:09:33,610 --> 00:09:40,720
after running the checks because it like

00:09:38,170 --> 00:09:43,690
it gives like the the errors are on

00:09:40,720 --> 00:09:45,250
compile time so it's basically a

00:09:43,690 --> 00:09:46,360
compiler right so like as you will get

00:09:45,250 --> 00:09:47,860
the warning yeah

00:09:46,360 --> 00:09:49,090
the compiler will give you a compiler

00:09:47,860 --> 00:09:51,400
warning you'll also get the clacey

00:09:49,090 --> 00:09:53,560
warnings right because if you set the

00:09:51,400 --> 00:09:54,970
cemex exx compiler risk lazy and it

00:09:53,560 --> 00:09:56,470
doesn't actually compile the code at the

00:09:54,970 --> 00:09:59,020
end of it then CMake would complain that

00:09:56,470 --> 00:10:01,000
is it's fine it's it will give you at

00:09:59,020 --> 00:10:06,520
the end you will get a proper binary and

00:10:01,000 --> 00:10:10,300
whatnot okay cool okay then I guess

00:10:06,520 --> 00:10:13,920
that's it thanks Albert great talk

00:10:10,300 --> 00:10:13,920

YouTube URL: https://www.youtube.com/watch?v=UVgUerSaBOs


