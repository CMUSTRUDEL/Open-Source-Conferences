Title: Matthias Klumpp - AppStream and Application Distribution - Akademy 2015
Publication date: 2016-04-02
Playlist: Akademy 2015
Description: 
	AppStream is a Freedesktop specification for describing software components and providing metadata to display applications properly in software centers, such as Muon Discover and GNOME-Software.
This talk explains why we need AppStream metadata and how to make use of it. It also provides a closer look at the current work being done to allow installations of applications independent from the underlying Linux distribution.

AppStream is a metadata-enhancement project for Linux distributions and upstream projects. It allows software projects to provide distributors with machine-readable metadata for the software they develop, which can include long descriptions, links to screenshots and websites associated with the project, etc.
It also allows projects to assign a unique identifier to their software, which allows other software to find it. This means that e.g. an image-viewer can query the distribution package manager to install a missing package needed to support a new image format, without needing to know how the distributor has packaged it.

The first half of the talk will go into detail about why we need AppStream and how it looks like and works.

The second half will give an overview on the current plans to change the way software is distributed on Linux. Traditionally, upstream software is packaged by a downstream Linux distributor and then released as a Linux distribution. Currently, work is going on on solutions to allow projects to distribute their software directly to the end user, as well as for sandboxing the 3rd-party software and isolating it from the rest of the system.
I will give a very brief introduction on the Limba and XdgApp approaches to the software-distribution issue, how the software sandbox is expected to work, and what to take care of to support this new distribution model.

Speaker: Matthias Klumpp
License: Creative Commons Attribution 4.0 International License http://creativecommons.org/licenses/by/4.0/
Akademy 2015: https://akademy.kde.org/2015
KDE: https://www.kde.org/
Donate: https://www.kde.org/donate
Captions: 
	00:00:08,310 --> 00:00:13,620
thank you well welcome to my talk on set

00:00:11,520 --> 00:00:16,260
fair tossed a topic a stream and

00:00:13,620 --> 00:00:17,820
software distribution so let's jump

00:00:16,260 --> 00:00:19,950
right into it what does actually the

00:00:17,820 --> 00:00:22,619
problem we want to solve with the

00:00:19,950 --> 00:00:25,710
upstream project at fidessa the main

00:00:22,619 --> 00:00:28,500
issue is that the software we currently

00:00:25,710 --> 00:00:30,689
display on package managers and well

00:00:28,500 --> 00:00:32,550
these advanced tools we use for package

00:00:30,689 --> 00:00:35,220
management and Linux are displayed as

00:00:32,550 --> 00:00:37,380
packages which sounds weird at first is

00:00:35,220 --> 00:00:39,210
pretty simple because a package is a

00:00:37,380 --> 00:00:41,340
technical item and it's not very

00:00:39,210 --> 00:00:42,810
discoverable for the user for the end

00:00:41,340 --> 00:00:45,300
Everage end user who is a non technical

00:00:42,810 --> 00:00:47,310
person what a package actually means

00:00:45,300 --> 00:00:50,130
they're at least in debian chanced

00:00:47,310 --> 00:00:53,460
packages which are containing developer

00:00:50,130 --> 00:00:55,110
and symbols or documentation or

00:00:53,460 --> 00:00:57,390
something which the users not directly

00:00:55,110 --> 00:01:00,030
interested in because he usually what

00:00:57,390 --> 00:01:02,880
she usually wants to display display

00:01:00,030 --> 00:01:05,700
install an application or something else

00:01:02,880 --> 00:01:08,640
which is more simple to discover for

00:01:05,700 --> 00:01:10,740
from the original technical user and

00:01:08,640 --> 00:01:12,840
other thing is that the applications if

00:01:10,740 --> 00:01:15,030
they are presented as applications are

00:01:12,840 --> 00:01:16,439
not presented were currently this means

00:01:15,030 --> 00:01:18,390
that we have different levels of

00:01:16,439 --> 00:01:20,549
localization of the descriptions of them

00:01:18,390 --> 00:01:22,679
that the quality of screenshots if there

00:01:20,549 --> 00:01:24,869
are any is quite bad because they're

00:01:22,679 --> 00:01:27,539
usually submitted by users and also very

00:01:24,869 --> 00:01:29,520
good of course but yeah generally it's

00:01:27,539 --> 00:01:31,020
not under the control of the application

00:01:29,520 --> 00:01:33,479
author who wants this application

00:01:31,020 --> 00:01:35,369
presented in a way he wants it wants

00:01:33,479 --> 00:01:37,859
others to look at it then they are

00:01:35,369 --> 00:01:39,240
missing URLs and especially lots of

00:01:37,859 --> 00:01:41,069
differences between distributions

00:01:39,240 --> 00:01:43,499
because for each package every

00:01:41,069 --> 00:01:47,039
distributor currently writes its its own

00:01:43,499 --> 00:01:49,289
description of the content so on debian

00:01:47,039 --> 00:01:51,659
we have some some descriptions khadora

00:01:49,289 --> 00:01:54,479
does there does their own and so there's

00:01:51,659 --> 00:01:57,569
no unification that regard and lots of

00:01:54,479 --> 00:01:59,819
duplication and efforts also software

00:01:57,569 --> 00:02:02,880
centers at distribution specific this

00:01:59,819 --> 00:02:05,009
means that an easy to each distribution

00:02:02,880 --> 00:02:08,600
really currently write a new software

00:02:05,009 --> 00:02:11,370
center which which open problems and

00:02:08,600 --> 00:02:12,140
well not perfect integration into the

00:02:11,370 --> 00:02:14,690
deaths of

00:02:12,140 --> 00:02:16,700
so in order to fix this we would need a

00:02:14,690 --> 00:02:18,530
common standard on how we handle

00:02:16,700 --> 00:02:21,170
applications and how we display them in

00:02:18,530 --> 00:02:23,950
order to even make an attempt to create

00:02:21,170 --> 00:02:29,090
a distribution agnostic Software Center

00:02:23,950 --> 00:02:31,250
so the solution is AB stream as soon as

00:02:29,090 --> 00:02:33,050
an XML metadata specification of

00:02:31,250 --> 00:02:35,030
software components and I'm not talking

00:02:33,050 --> 00:02:37,670
just of applications here Suffolk

00:02:35,030 --> 00:02:39,830
components means anything from a generic

00:02:37,670 --> 00:02:41,420
any kind of software software component

00:02:39,830 --> 00:02:43,580
to foreign oil which is something

00:02:41,420 --> 00:02:45,980
currently in development with a firmware

00:02:43,580 --> 00:02:48,110
update tool which also uses upstream to

00:02:45,980 --> 00:02:50,150
desktop applications which is what this

00:02:48,110 --> 00:02:53,630
talk is mainly about to add-ons which

00:02:50,150 --> 00:02:55,220
are extensions to to existing software

00:02:53,630 --> 00:02:57,320
or other components to call these

00:02:55,220 --> 00:02:59,510
simplest methods and even to funds which

00:02:57,320 --> 00:03:02,739
is also feature which is currently in

00:02:59,510 --> 00:03:07,010
development and which gnome already uses

00:03:02,739 --> 00:03:09,380
those metadata files are created by

00:03:07,010 --> 00:03:12,080
upstream projects but just effusions are

00:03:09,380 --> 00:03:13,940
still required to review them and to

00:03:12,080 --> 00:03:16,850
pack them together in order to make it

00:03:13,940 --> 00:03:18,500
possible to ship them to the to the user

00:03:16,850 --> 00:03:20,750
and to display them in the final

00:03:18,500 --> 00:03:23,239
software centers however all the work in

00:03:20,750 --> 00:03:24,980
insurance in translating the data and

00:03:23,239 --> 00:03:26,450
writing the data is done by our stream

00:03:24,980 --> 00:03:28,310
and by the people who know the

00:03:26,450 --> 00:03:32,540
application they want to be presented in

00:03:28,310 --> 00:03:35,450
the downstream Software Center best yeah

00:03:32,540 --> 00:03:38,450
and also the extreme specification

00:03:35,450 --> 00:03:39,860
itself is not complete self or saying

00:03:38,450 --> 00:03:43,519
you don't want to duplicate efforts

00:03:39,860 --> 00:03:45,620
therefore it extends existing metadata

00:03:43,519 --> 00:03:47,480
for example from desktop files this

00:03:45,620 --> 00:03:48,890
means if you have a summary in your

00:03:47,480 --> 00:03:50,540
desktop I already you don't need to

00:03:48,890 --> 00:03:54,320
write a second summary in your app

00:03:50,540 --> 00:03:55,910
stream metadata fire so to get a bit

00:03:54,320 --> 00:03:58,040
more concrete on this how does it look

00:03:55,910 --> 00:04:00,950
I'm sorry yeah and it's insulting to

00:03:58,040 --> 00:04:02,299
users share up data if you want to ship

00:04:00,950 --> 00:04:04,850
it on your application you just need to

00:04:02,299 --> 00:04:06,320
drop the XML India so let's get a bit

00:04:04,850 --> 00:04:08,810
more concrete how does it look like and

00:04:06,320 --> 00:04:10,430
what does it contain for example first

00:04:08,810 --> 00:04:13,609
of all and most importantly every

00:04:10,430 --> 00:04:15,569
upstream upstream upstream XML files

00:04:13,609 --> 00:04:19,979
kind of tricky there

00:04:15,569 --> 00:04:21,509
contains an ID which is in case of in

00:04:19,979 --> 00:04:23,130
case of a desktop application the

00:04:21,509 --> 00:04:26,970
desktop file name of this application

00:04:23,130 --> 00:04:28,919
and this ID makes it makes it possible

00:04:26,970 --> 00:04:30,750
to find an application on any

00:04:28,919 --> 00:04:33,210
distribution out there this means if you

00:04:30,750 --> 00:04:35,250
have an ID you can if you are in any

00:04:33,210 --> 00:04:37,530
distribution get to the package name and

00:04:35,250 --> 00:04:39,900
install it this is especially important

00:04:37,530 --> 00:04:42,509
if you want to install an atom to your

00:04:39,900 --> 00:04:46,050
software which we're just need to query

00:04:42,509 --> 00:04:48,509
the ID of this of this add-on you want

00:04:46,050 --> 00:04:49,979
to install a software and then call the

00:04:48,509 --> 00:04:52,139
distribution package manager to install

00:04:49,979 --> 00:04:54,360
the package which matches which contains

00:04:52,139 --> 00:04:57,300
this software component defined by the

00:04:54,360 --> 00:04:59,849
upstream XML this is this is really nice

00:04:57,300 --> 00:05:01,650
because you then need to want only one

00:04:59,849 --> 00:05:04,080
code path to target or existing

00:05:01,650 --> 00:05:06,539
distributions which might should stream

00:05:04,080 --> 00:05:09,110
data so yeah and this is also used to

00:05:06,539 --> 00:05:14,190
associate the desktop file with the

00:05:09,110 --> 00:05:16,289
updater upstream of data and so it's

00:05:14,190 --> 00:05:18,440
important to keep this in line with what

00:05:16,289 --> 00:05:21,240
adesso fire in case your packaging

00:05:18,440 --> 00:05:25,380
packaging an application which is the

00:05:21,240 --> 00:05:28,130
desktop application then we have a long

00:05:25,380 --> 00:05:31,979
description which is even translatable

00:05:28,130 --> 00:05:34,610
upstream so the effort of translating

00:05:31,979 --> 00:05:36,930
long descriptions of software is not

00:05:34,610 --> 00:05:39,060
it's not redone and every distribution

00:05:36,930 --> 00:05:41,669
anymore but is accentuated once for

00:05:39,060 --> 00:05:44,759
every upstream project and it contains

00:05:41,669 --> 00:05:46,889
lots of other stuff like project things

00:05:44,759 --> 00:05:47,909
to do something you uses my friend

00:05:46,889 --> 00:05:50,340
interesting and browsing your

00:05:47,909 --> 00:05:53,430
application in in a software center like

00:05:50,340 --> 00:05:55,169
noon or a / or genome software for

00:05:53,430 --> 00:05:58,110
example at home page a place where you

00:05:55,169 --> 00:05:59,699
can do point parks or an help URL where

00:05:58,110 --> 00:06:03,030
you can get you some more extensive

00:05:59,699 --> 00:06:04,800
documentation on how on the problems you

00:06:03,030 --> 00:06:07,169
might discover when working with the

00:06:04,800 --> 00:06:08,969
software you also can define your own

00:06:07,169 --> 00:06:12,330
screenshots and multiple of them and

00:06:08,969 --> 00:06:15,240
even with captions so you can display

00:06:12,330 --> 00:06:17,669
your software the way you want it to be

00:06:15,240 --> 00:06:19,990
shown in the software center with your

00:06:17,669 --> 00:06:22,870
own screenshots a set of relying

00:06:19,990 --> 00:06:24,820
user-submitted screeches this is still

00:06:22,870 --> 00:06:26,970
possible though if you don't provide

00:06:24,820 --> 00:06:29,350
screenshots that just see you tonight

00:06:26,970 --> 00:06:31,570
just ship something which was provided

00:06:29,350 --> 00:06:34,990
by users which is what we do at Debian

00:06:31,570 --> 00:06:37,450
for example and there's also an option

00:06:34,990 --> 00:06:39,670
to to add technical items which are

00:06:37,450 --> 00:06:42,970
provided by this component this is

00:06:39,670 --> 00:06:44,920
useful if you want for some command line

00:06:42,970 --> 00:06:46,930
he'll if you are searching for a binary

00:06:44,920 --> 00:06:49,270
and what to know in which emerged

00:06:46,930 --> 00:06:50,980
application it is in there can then this

00:06:49,270 --> 00:06:56,590
information can be used by the system to

00:06:50,980 --> 00:06:58,150
determine I'm yeah which which software

00:06:56,590 --> 00:07:01,090
component needs to be installed in order

00:06:58,150 --> 00:07:03,310
to provide this this yeah this technical

00:07:01,090 --> 00:07:05,260
items this is for example the case with

00:07:03,310 --> 00:07:06,910
mine types if you need to have a new

00:07:05,260 --> 00:07:08,680
file type and don't know which with

00:07:06,910 --> 00:07:10,630
which application means you open it you

00:07:08,680 --> 00:07:12,490
can acquire the upstream metadata and we

00:07:10,630 --> 00:07:15,970
will tell you a list of applications

00:07:12,490 --> 00:07:22,390
that are available which can handle this

00:07:15,970 --> 00:07:25,570
my mind type then this is the upstream

00:07:22,390 --> 00:07:28,510
upstream upstream xxn l sorry is a very

00:07:25,570 --> 00:07:31,750
bad name there there's also distribution

00:07:28,510 --> 00:07:33,040
xml with this basically the component

00:07:31,750 --> 00:07:35,890
method data are described in the

00:07:33,040 --> 00:07:40,120
upstream xml a fuse together in one big

00:07:35,890 --> 00:07:43,570
file this file is jamel file on debian

00:07:40,120 --> 00:07:47,410
because of reasons or xml in any other

00:07:43,570 --> 00:07:50,140
distribution yeah this that is jonathan

00:07:47,410 --> 00:07:53,170
debian has mainly political reasons and

00:07:50,140 --> 00:07:55,470
yeah reasons of specifically to debian

00:07:53,170 --> 00:07:58,810
so i don't need to care about that much

00:07:55,470 --> 00:08:00,340
yeah and this distribution xml file

00:07:58,810 --> 00:08:02,380
makes the data accessible for sofa

00:08:00,340 --> 00:08:04,960
centers and provides head component

00:08:02,380 --> 00:08:07,000
package name mapping which is essential

00:08:04,960 --> 00:08:09,100
in order to fetch data fetch packages

00:08:07,000 --> 00:08:12,490
from the package manager which manages

00:08:09,100 --> 00:08:14,950
component yeah and what distributions

00:08:12,490 --> 00:08:16,450
also do is merging metadata from desks

00:08:14,950 --> 00:08:17,360
of files and other metadata they might

00:08:16,450 --> 00:08:19,939
find

00:08:17,360 --> 00:08:23,900
for your application into that XML so

00:08:19,939 --> 00:08:26,120
everything is available in one file so

00:08:23,900 --> 00:08:28,009
does it look like as a diagram you have

00:08:26,120 --> 00:08:30,770
this compulsory at the distribution

00:08:28,009 --> 00:08:33,529
which has this package for you as an app

00:08:30,770 --> 00:08:35,089
sume your project is packaged containing

00:08:33,529 --> 00:08:37,969
deaths of files and maybe the xml

00:08:35,089 --> 00:08:39,709
metadata what the composer where the

00:08:37,969 --> 00:08:43,969
distributor does is to extract that

00:08:39,709 --> 00:08:47,029
metadata and construct new XML out of it

00:08:43,969 --> 00:08:49,040
and also extract icons which are used to

00:08:47,029 --> 00:08:50,839
display those applications and cash

00:08:49,040 --> 00:08:52,850
screenshots and do a lots of other stuff

00:08:50,839 --> 00:08:54,500
this is the mirror under standard

00:08:52,850 --> 00:08:56,630
distribution mirror and ship to the

00:08:54,500 --> 00:08:59,839
client where this transformed into a

00:08:56,630 --> 00:09:01,760
station database in some cases or just

00:08:59,839 --> 00:09:03,740
just read directly by an upstream

00:09:01,760 --> 00:09:05,440
supporting library then you have his

00:09:03,740 --> 00:09:08,300
office center which takes this

00:09:05,440 --> 00:09:11,149
information and communicates with a

00:09:08,300 --> 00:09:15,519
package manager in this case through the

00:09:11,149 --> 00:09:17,420
full package kit which is a distribution

00:09:15,519 --> 00:09:19,160
independent package management

00:09:17,420 --> 00:09:22,459
abstraction layer which contains back is

00:09:19,160 --> 00:09:24,649
for I think almost all distributions out

00:09:22,459 --> 00:09:26,060
there so it's really a convenient way if

00:09:24,649 --> 00:09:28,880
you want you to start packages in a

00:09:26,060 --> 00:09:30,019
destroy agnostic way and yeah makes it

00:09:28,880 --> 00:09:31,940
possible to install and remove

00:09:30,019 --> 00:09:34,370
applications by that and also pulls in

00:09:31,940 --> 00:09:36,560
some existing metadata in case this for

00:09:34,370 --> 00:09:38,899
example no long description from the ass

00:09:36,560 --> 00:09:41,260
you file we can still fetch the tryst

00:09:38,899 --> 00:09:43,820
description from the package itself

00:09:41,260 --> 00:09:46,519
there's also a feedback sort of a plan

00:09:43,820 --> 00:09:49,820
for ratings and comments from users but

00:09:46,519 --> 00:09:51,949
as I'm no web developer so far they has

00:09:49,820 --> 00:09:54,980
the specification does not contain

00:09:51,949 --> 00:09:57,170
anything about that so in case this will

00:09:54,980 --> 00:09:59,060
happen later I'm happy to add something

00:09:57,170 --> 00:10:01,790
saying to the specification of course

00:09:59,060 --> 00:10:03,890
and if you want to access I assume there

00:10:01,790 --> 00:10:06,019
are different options for you a

00:10:03,890 --> 00:10:07,519
different libraries which I would

00:10:06,019 --> 00:10:10,279
strongly recommend against us to

00:10:07,519 --> 00:10:13,100
implement a parser for this XML or jam

00:10:10,279 --> 00:10:14,920
or by yourself because it can draw a

00:10:13,100 --> 00:10:18,170
pretty big pretty quickly especially

00:10:14,920 --> 00:10:20,959
because you need to support ubuntu and

00:10:18,170 --> 00:10:21,850
debian you need to image across the

00:10:20,959 --> 00:10:24,519
general files

00:10:21,850 --> 00:10:27,459
so there's the bathroom was used sapien

00:10:24,519 --> 00:10:29,920
cash and can also access the eczema and

00:10:27,459 --> 00:10:33,279
jamo direct directly in case you need it

00:10:29,920 --> 00:10:34,959
for some reason saviors of course faster

00:10:33,279 --> 00:10:37,750
than the xml general implementation

00:10:34,959 --> 00:10:40,779
there's absolutely 0 to t which is i

00:10:37,750 --> 00:10:42,910
think most relevant here which uses the

00:10:40,779 --> 00:10:45,579
sapient cash taxes and there's also

00:10:42,910 --> 00:10:48,279
which you might run across the lip

00:10:45,579 --> 00:10:49,720
fstream gel apply redeveloped and mainly

00:10:48,279 --> 00:10:53,829
use they've known but also many other

00:10:49,720 --> 00:10:55,720
projects which does direct eczema and

00:10:53,829 --> 00:10:58,690
jungle parsing and which is the sphere

00:10:55,720 --> 00:11:00,850
thing genome software is based on this

00:10:58,690 --> 00:11:04,959
is written by sheerest used by those two

00:11:00,850 --> 00:11:06,639
are maintained at fidessa yeah and so

00:11:04,959 --> 00:11:08,940
don't be afraid for the next slide

00:11:06,639 --> 00:11:11,290
because there's a gnome screenshot on it

00:11:08,940 --> 00:11:13,269
this is how it looks like in beyond

00:11:11,290 --> 00:11:15,040
software with the long description just

00:11:13,269 --> 00:11:17,170
to get an impression what the final

00:11:15,040 --> 00:11:20,550
rosado's magic paragraph translated

00:11:17,170 --> 00:11:24,490
description much for multiple

00:11:20,550 --> 00:11:28,060
screenshots and there's also a way to

00:11:24,490 --> 00:11:29,709
display the add-ons you can stall very

00:11:28,060 --> 00:11:33,130
user friendly way and licensing

00:11:29,709 --> 00:11:35,019
information and yeah of course some

00:11:33,130 --> 00:11:37,149
technical dates are like catching the

00:11:35,019 --> 00:11:40,630
categories or sources from which

00:11:37,149 --> 00:11:42,399
approach ettore it came mmm also the

00:11:40,630 --> 00:11:46,060
other items i mentioned before like

00:11:42,399 --> 00:11:47,529
input methods or codex or even funds can

00:11:46,060 --> 00:11:50,410
be represented in the surface enter that

00:11:47,529 --> 00:11:52,149
way even with examples for how the font

00:11:50,410 --> 00:11:53,500
might look like which you won't get in a

00:11:52,149 --> 00:11:55,180
package manager where you need to know

00:11:53,500 --> 00:11:58,750
what you're looking for in order to

00:11:55,180 --> 00:12:01,509
install the front so that's it for the

00:11:58,750 --> 00:12:03,579
upstream specification so but there's a

00:12:01,509 --> 00:12:06,040
different issue of this talk is also

00:12:03,579 --> 00:12:09,459
about and that is the big field of

00:12:06,040 --> 00:12:14,769
distributed applications but yeah

00:12:09,459 --> 00:12:17,500
traditionally you i'm just looking at

00:12:14,769 --> 00:12:19,060
the time here traditionally a linux

00:12:17,500 --> 00:12:22,440
distribution is an operating system and

00:12:19,060 --> 00:12:24,990
applications and an operating system is

00:12:22,440 --> 00:12:26,400
to be stable and doesn't shouldn't

00:12:24,990 --> 00:12:29,430
change much because they don't want

00:12:26,400 --> 00:12:31,530
surprises and accidental breakage while

00:12:29,430 --> 00:12:33,660
applications are something different we

00:12:31,530 --> 00:12:36,120
want the latest application the legs and

00:12:33,660 --> 00:12:37,500
greatest and newest application ship to

00:12:36,120 --> 00:12:39,990
your users directly without going

00:12:37,500 --> 00:12:42,240
through distribution packaging currently

00:12:39,990 --> 00:12:43,740
the way is that you has a upstream wise

00:12:42,240 --> 00:12:46,800
software which is fact about district

00:12:43,740 --> 00:12:48,780
packager which at the end goes into a

00:12:46,800 --> 00:12:50,820
distribution and prevents their stable

00:12:48,780 --> 00:12:53,190
software and you can't tell your users

00:12:50,820 --> 00:12:54,330
if you for example get it back yeah fix

00:12:53,190 --> 00:12:55,680
that and the latest release can you

00:12:54,330 --> 00:12:57,510
please write out because users might

00:12:55,680 --> 00:13:00,270
need to upgrade their distribution in

00:12:57,510 --> 00:13:02,250
order to do that or use the PPA and all

00:13:00,270 --> 00:13:04,350
these different entities have different

00:13:02,250 --> 00:13:06,480
motivations and different different

00:13:04,350 --> 00:13:08,790
things they want and all everything is

00:13:06,480 --> 00:13:14,670
saying in that way but yeah this whole

00:13:08,790 --> 00:13:15,990
way of having an upstream which which

00:13:14,670 --> 00:13:17,580
produces software have an effect by a

00:13:15,990 --> 00:13:20,460
package or having a dinner distribution

00:13:17,580 --> 00:13:23,460
is quite takes quite a long time and

00:13:20,460 --> 00:13:25,410
makes trying new applications much

00:13:23,460 --> 00:13:27,120
harder a rolling release distribution is

00:13:25,410 --> 00:13:31,080
of course an option that rolling

00:13:27,120 --> 00:13:33,960
releases at their own issues like you

00:13:31,080 --> 00:13:35,970
had breaking sometimes and usually use

00:13:33,960 --> 00:13:37,380
this one their OS stable and also be

00:13:35,970 --> 00:13:39,900
able to roll back to an older software

00:13:37,380 --> 00:13:42,210
application version in case the new one

00:13:39,900 --> 00:13:48,900
doesn't well doesn't work as they wanted

00:13:42,210 --> 00:13:50,250
to so short why not use PPS ppsx acuity

00:13:48,900 --> 00:13:52,320
risk because they are installed with

00:13:50,250 --> 00:13:54,540
root permission and especially annoying

00:13:52,320 --> 00:13:56,660
for for people who are developing a

00:13:54,540 --> 00:13:59,100
distribution is that some people develop

00:13:56,660 --> 00:14:02,220
PPS which interfere with distribution

00:13:59,100 --> 00:14:03,900
upwards so they are they mess with the

00:14:02,220 --> 00:14:06,240
in the namespace of the normal

00:14:03,900 --> 00:14:07,830
distribution with the packages and if

00:14:06,240 --> 00:14:09,900
the user wants to upgrade for example to

00:14:07,830 --> 00:14:12,810
nearly we're going to release there are

00:14:09,900 --> 00:14:15,330
plenty of plenty of things where can

00:14:12,810 --> 00:14:17,070
wear this outbreak can fail in case some

00:14:15,330 --> 00:14:18,240
key Pierre contains a package which is

00:14:17,070 --> 00:14:21,780
not in line with the distribution

00:14:18,240 --> 00:14:23,510
packaging so a solution to that is

00:14:21,780 --> 00:14:25,910
limber which is a

00:14:23,510 --> 00:14:30,110
software and solution solution I I

00:14:25,910 --> 00:14:32,320
manage a develop which subdivides the

00:14:30,110 --> 00:14:34,400
current listings distribution into

00:14:32,320 --> 00:14:36,950
multiple layers which is the operating

00:14:34,400 --> 00:14:39,440
system layer includes a colonel xorg and

00:14:36,950 --> 00:14:42,350
Wayland d bus system defaults on here

00:14:39,440 --> 00:14:45,410
and all that stuff you would expect in a

00:14:42,350 --> 00:14:48,560
generic desktop linux but not more so

00:14:45,410 --> 00:14:51,650
not for example no toolkits it's just

00:14:48,560 --> 00:14:53,540
the stable interfaces which are not

00:14:51,650 --> 00:14:55,670
expected to change than they are run

00:14:53,540 --> 00:14:57,740
times which consumed which are shared

00:14:55,670 --> 00:15:00,710
between applications which contain all

00:14:57,740 --> 00:15:03,140
the stupid libraries and and different

00:15:00,710 --> 00:15:09,280
pieces when an application needs to in

00:15:03,140 --> 00:15:11,300
order to run the animal itself contains

00:15:09,280 --> 00:15:13,460
produces bundles which are very similar

00:15:11,300 --> 00:15:16,210
to packages which contains said upstream

00:15:13,460 --> 00:15:19,430
metadata dependency information so which

00:15:16,210 --> 00:15:22,310
which grant n components they need a

00:15:19,430 --> 00:15:23,720
signature and payload which is just the

00:15:22,310 --> 00:15:25,640
stuff you would usually ship in a

00:15:23,720 --> 00:15:28,250
package the main difference is that does

00:15:25,640 --> 00:15:30,830
the runtime those bundles are created by

00:15:28,250 --> 00:15:32,570
up streams so in this case in this

00:15:30,830 --> 00:15:34,760
scenario to the cube project would

00:15:32,570 --> 00:15:38,450
provide bundle slim abundance for cute

00:15:34,760 --> 00:15:40,280
cork you do a few i and another stuff

00:15:38,450 --> 00:15:42,050
and us and an upstream application

00:15:40,280 --> 00:15:44,840
developer would also create a binder

00:15:42,050 --> 00:15:46,430
depending on those parts so you know if

00:15:44,840 --> 00:15:48,050
you want a newer version you just need

00:15:46,430 --> 00:15:50,420
to depend on a higher version of that

00:15:48,050 --> 00:15:53,390
you can simply imagine it if you are a

00:15:50,420 --> 00:15:58,010
python developer as a spy pie which is

00:15:53,390 --> 00:16:00,800
not python specific yeah in order to in

00:15:58,010 --> 00:16:03,560
order to make this work limbu uses some

00:16:00,800 --> 00:16:06,290
some new kernel features like shared

00:16:03,560 --> 00:16:09,710
chachere's and recently added overlay FS

00:16:06,290 --> 00:16:11,930
and uses those features to to glue the

00:16:09,710 --> 00:16:14,300
runtime and the application together and

00:16:11,930 --> 00:16:16,580
to remove duplication between layers so

00:16:14,300 --> 00:16:18,050
if you have have one copy of cute

00:16:16,580 --> 00:16:19,790
already which is sufficient you don't

00:16:18,050 --> 00:16:21,440
when you will not get another one

00:16:19,790 --> 00:16:24,080
installed and he will also not to get

00:16:21,440 --> 00:16:26,210
static linkage if you don't explicitly

00:16:24,080 --> 00:16:26,780
do it because it's not either than the

00:16:26,210 --> 00:16:28,280
scenario

00:16:26,780 --> 00:16:31,580
you just need to depend on the only

00:16:28,280 --> 00:16:33,950
difference on a different limber bundle

00:16:31,580 --> 00:16:36,710
with a higher regime so this whole layer

00:16:33,950 --> 00:16:39,140
is glued together by an overlay of s

00:16:36,710 --> 00:16:40,790
mount when running the application it

00:16:39,140 --> 00:16:43,100
will also reserve sandbox in future

00:16:40,790 --> 00:16:46,610
maybe but this is something another

00:16:43,100 --> 00:16:49,160
project is working on this is an

00:16:46,610 --> 00:16:51,050
illustration again pls debian then you

00:16:49,160 --> 00:16:53,240
have this individual components stl for

00:16:51,050 --> 00:16:54,980
example qg stream or whatever library

00:16:53,240 --> 00:16:56,780
you software once and you have your

00:16:54,980 --> 00:16:58,730
application on top of it you're making

00:16:56,780 --> 00:17:00,530
use of those bundles as well as I

00:16:58,730 --> 00:17:02,840
usually created you just need to assume

00:17:00,530 --> 00:17:06,500
metadata and make a few changes on your

00:17:02,840 --> 00:17:09,860
bill system yeah I will go quickly over

00:17:06,500 --> 00:17:13,160
that I think I've said most of it

00:17:09,860 --> 00:17:14,840
already one thing is which is in

00:17:13,160 --> 00:17:17,320
development as limber up as a central

00:17:14,840 --> 00:17:19,820
place to upload your limit bundles to

00:17:17,320 --> 00:17:22,040
but this is because I'm not an app

00:17:19,820 --> 00:17:25,610
developer developing slowly so maybe you

00:17:22,040 --> 00:17:27,170
will hear of it in future and the Alamo

00:17:25,610 --> 00:17:29,090
produces actually metadata which is

00:17:27,170 --> 00:17:30,440
integrated in your Software Center so

00:17:29,090 --> 00:17:32,090
your Software Center will display not

00:17:30,440 --> 00:17:34,610
only a software which is available in

00:17:32,090 --> 00:17:36,500
the in the distribution package manager

00:17:34,610 --> 00:17:38,990
but also which is available in limbo

00:17:36,500 --> 00:17:41,300
package sources and for the user the

00:17:38,990 --> 00:17:43,280
user won't know if it's from the from

00:17:41,300 --> 00:17:45,530
the software of won't notice it was from

00:17:43,280 --> 00:17:47,450
a limber bundle or from the native

00:17:45,530 --> 00:17:49,190
distribution package manager simply

00:17:47,450 --> 00:17:51,770
because it integrates really well into

00:17:49,190 --> 00:17:53,390
the system so there's another solution

00:17:51,770 --> 00:17:56,000
developed by people at Breathitt and

00:17:53,390 --> 00:17:57,440
Alexander's X under Larsen which I will

00:17:56,000 --> 00:17:59,510
just briefly mentioned because there's a

00:17:57,440 --> 00:18:02,000
chart tomorrow about Dylan by Daniel

00:17:59,510 --> 00:18:05,060
Geale who will be going into detail

00:18:02,000 --> 00:18:06,890
about it which sends around nos and a

00:18:05,060 --> 00:18:09,110
static runtime so it's not composed of

00:18:06,890 --> 00:18:12,410
different parts but it's a large piece

00:18:09,110 --> 00:18:15,770
of stuff and yeah this application is

00:18:12,410 --> 00:18:18,920
sandboxed sandbox why simply to protect

00:18:15,770 --> 00:18:21,890
the users privacy and donut make it

00:18:18,920 --> 00:18:23,870
access parts of the system which which

00:18:21,890 --> 00:18:25,280
are not allowed for access this is

00:18:23,870 --> 00:18:27,700
especially important in the mobile space

00:18:25,280 --> 00:18:30,039
of course yeah those

00:18:27,700 --> 00:18:33,340
parts are always truly repositories hmm

00:18:30,039 --> 00:18:37,659
I will just refer to the talk talk

00:18:33,340 --> 00:18:41,350
tomorrow well about that so um simply

00:18:37,659 --> 00:18:43,809
because of time reasons yeah and exergy

00:18:41,350 --> 00:18:47,169
are parts are provided by up streams

00:18:43,809 --> 00:18:49,059
like in limbo but they are built using

00:18:47,169 --> 00:18:51,159
an SDK which is provided by larger

00:18:49,059 --> 00:18:53,260
projects like KDE or genome which

00:18:51,159 --> 00:18:55,510
contains some pre build software pieces

00:18:53,260 --> 00:18:57,250
which the application can make use of if

00:18:55,510 --> 00:18:59,950
it once more it needs to statically

00:18:57,250 --> 00:19:02,230
linked it or included in in its own

00:18:59,950 --> 00:19:06,399
bundle so there's no sharing of those

00:19:02,230 --> 00:19:09,549
resources anymore so comparing those

00:19:06,399 --> 00:19:11,799
solutions Linda is very flexible but it

00:19:09,549 --> 00:19:14,559
also is very susceptible to a bi breaks

00:19:11,799 --> 00:19:19,059
in case some parts Humble Bundle breaks

00:19:14,559 --> 00:19:20,470
a bi you will you are screwed so this is

00:19:19,059 --> 00:19:22,690
needs to be tested by up streams

00:19:20,470 --> 00:19:24,429
themselves they don't have after

00:19:22,690 --> 00:19:26,500
distributors doing the work for them and

00:19:24,429 --> 00:19:28,299
more this can be worked around of course

00:19:26,500 --> 00:19:31,330
by continuous integration solutions and

00:19:28,299 --> 00:19:33,940
and other things too to catch those

00:19:31,330 --> 00:19:35,769
problems but yeah it's it's an inherent

00:19:33,940 --> 00:19:38,049
issue of this approach which is also of

00:19:35,769 --> 00:19:41,380
course limbo does duplicate some things

00:19:38,049 --> 00:19:43,269
it does a good job at avoiding lots of

00:19:41,380 --> 00:19:44,620
duplication but it cannot remove it all

00:19:43,269 --> 00:19:46,809
because the distribution will always

00:19:44,620 --> 00:19:50,679
also ship its own copy of cute for

00:19:46,809 --> 00:19:52,360
example yeah and X jia provides exactly

00:19:50,679 --> 00:19:55,630
that API stability if you build

00:19:52,360 --> 00:19:57,580
something with an ex gfs DK you can be

00:19:55,630 --> 00:20:01,059
certain that it will work with the ex DG

00:19:57,580 --> 00:20:02,860
app runtime and will not change at all

00:20:01,059 --> 00:20:06,159
we'll just maybe receive security

00:20:02,860 --> 00:20:08,169
updates but that's it and so you must

00:20:06,159 --> 00:20:10,149
care if you want another dependency

00:20:08,169 --> 00:20:12,100
which is not in the SDK you need to

00:20:10,149 --> 00:20:14,019
bundle it with your with your

00:20:12,100 --> 00:20:16,360
application and ensure that it stays up

00:20:14,019 --> 00:20:20,080
to date and security issue free on your

00:20:16,360 --> 00:20:22,620
own so that's it and are there any

00:20:20,080 --> 00:20:22,620
questions

00:20:23,309 --> 00:20:42,549
and thank you for your attention of

00:20:25,360 --> 00:20:47,140
course all right so have it right yeah

00:20:42,549 --> 00:20:50,799
and you're suggesting that KD should

00:20:47,140 --> 00:20:54,720
release their own binary then yes not

00:20:50,799 --> 00:20:58,360
put people who ultimate result of it

00:20:54,720 --> 00:21:00,160
that's Katie bills for example of biz

00:20:58,360 --> 00:21:02,620
the framers components as bundles and

00:21:00,160 --> 00:21:04,870
those are then used by upstream projects

00:21:02,620 --> 00:21:06,520
to get their stuff on top of them so que

00:21:04,870 --> 00:21:09,870
de would be responsible for building it

00:21:06,520 --> 00:21:13,510
and not have it done by the distributors

00:21:09,870 --> 00:21:16,929
getting is feasible it will work yeah

00:21:13,510 --> 00:21:19,990
I've tried it works okay so what I did

00:21:16,929 --> 00:21:24,510
fine yeah let's try some ke components

00:21:19,990 --> 00:21:27,250
and it's working quite well as in as in

00:21:24,510 --> 00:21:29,760
socially and generally we will see we

00:21:27,250 --> 00:21:29,760
need to try it

00:21:49,850 --> 00:21:54,420
others dependencies are handled by

00:21:52,800 --> 00:21:56,970
lumber emma has some some nice

00:21:54,420 --> 00:21:59,250
properties like conflict free

00:21:56,970 --> 00:22:00,960
installation of software versions so you

00:21:59,250 --> 00:22:02,670
can install multiple versions of cute on

00:22:00,960 --> 00:22:06,030
the same system and they won't interfere

00:22:02,670 --> 00:22:07,980
they each application due to the kernel

00:22:06,030 --> 00:22:10,590
tricks we'll just see the cute version

00:22:07,980 --> 00:22:12,480
which is legit depends on and which it

00:22:10,590 --> 00:22:14,820
wants to use so and the other versions

00:22:12,480 --> 00:22:16,710
are hidden from it so in order to

00:22:14,820 --> 00:22:19,550
channel dependencies you will just

00:22:16,710 --> 00:22:21,990
declare dependency on the bundle you

00:22:19,550 --> 00:22:23,430
refer which contains for example cute or

00:22:21,990 --> 00:22:26,340
whatever other component you want and

00:22:23,430 --> 00:22:29,990
limo will do the rest for you in case

00:22:26,340 --> 00:22:29,990
the upstream didn't break avi

00:22:42,140 --> 00:22:51,840
he is using application it also lies in

00:22:48,270 --> 00:22:56,840
here about all the cookie bars actually

00:22:51,840 --> 00:23:00,240
ship new he yes in case cute doesn't

00:22:56,840 --> 00:23:02,700
doesn't ship fixed versions on its own

00:23:00,240 --> 00:23:04,980
you would need to do that and maybe

00:23:02,700 --> 00:23:07,050
namespace those cute copies in order to

00:23:04,980 --> 00:23:20,120
buy the Stinger stamp from the upstream

00:23:07,050 --> 00:23:25,500
components that's also feasible in your

00:23:20,120 --> 00:23:29,550
blessing they worked on many factors and

00:23:25,500 --> 00:23:32,760
just to understand better you need to

00:23:29,550 --> 00:23:35,420
develop some speed baby salinas you have

00:23:32,760 --> 00:23:40,590
to reduce the different bottle which

00:23:35,420 --> 00:23:42,950
basis right yes similar to the ones team

00:23:40,590 --> 00:23:45,990
is doing and to some extent it's a

00:23:42,950 --> 00:23:48,510
duplication of work by the district

00:23:45,990 --> 00:23:50,550
packagers but i would i'm careful to say

00:23:48,510 --> 00:23:53,510
that because as a district packager you

00:23:50,550 --> 00:23:56,340
need to care for a lot more things like

00:23:53,510 --> 00:23:58,020
upgrade paths and how everything

00:23:56,340 --> 00:24:00,090
interacts in the system which you don't

00:23:58,020 --> 00:24:01,620
need to do with ember it just did you're

00:24:00,090 --> 00:24:03,780
sure that your application works and

00:24:01,620 --> 00:24:06,870
also limber is not designed to install

00:24:03,780 --> 00:24:09,180
things like core system parts like the

00:24:06,870 --> 00:24:10,950
kernel or system d which is simply can't

00:24:09,180 --> 00:24:13,410
do because of technical limitations it's

00:24:10,950 --> 00:24:15,870
just designed for for applications and

00:24:13,410 --> 00:24:18,930
toolkits and libraries and not for it

00:24:15,870 --> 00:24:22,520
for system parts so to some extent it's

00:24:18,930 --> 00:24:22,520
a duplication but it's not the same

00:24:23,330 --> 00:24:29,130
values

00:24:25,940 --> 00:24:33,620
creative arts instead starting from the

00:24:29,130 --> 00:24:37,500
cesium packages and could be just a

00:24:33,620 --> 00:24:41,310
voluntary already you yeah that would be

00:24:37,500 --> 00:24:43,190
possible I thinks the in the end for

00:24:41,310 --> 00:24:45,560
example in case this takes off

00:24:43,190 --> 00:24:47,640
distributors will ship their own number

00:24:45,560 --> 00:24:50,250
repositories enabled by default which

00:24:47,640 --> 00:24:51,930
they have control over to some extent so

00:24:50,250 --> 00:24:54,000
they can ship on the stable base for

00:24:51,930 --> 00:24:56,910
example updated copies of Kate or

00:24:54,000 --> 00:24:58,560
whatever when you are deke cam or

00:24:56,910 --> 00:25:01,140
whatever application they want to be I

00:24:58,560 --> 00:25:04,440
want a are updated without interfering

00:25:01,140 --> 00:25:08,670
with the usual process of upgrading

00:25:04,440 --> 00:25:14,070
packages in the distribution I was able

00:25:08,670 --> 00:25:18,990
to finish mom they are not regulation

00:25:14,070 --> 00:25:24,420
that is this we thank you for a new

00:25:18,990 --> 00:25:31,820
stable testify distribution and were

00:25:24,420 --> 00:25:31,820
together these latest customer have

00:25:32,540 --> 00:25:41,990
television yeah exactly that's the point

00:25:38,100 --> 00:25:41,990
of it thank you

00:25:49,500 --> 00:25:52,500
ok

00:25:59,620 --> 00:26:01,680

YouTube URL: https://www.youtube.com/watch?v=LGTmeqd_ET8


