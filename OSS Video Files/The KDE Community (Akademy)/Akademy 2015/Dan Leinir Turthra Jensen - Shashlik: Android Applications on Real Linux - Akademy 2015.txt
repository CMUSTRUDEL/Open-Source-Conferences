Title: Dan Leinir Turthra Jensen - Shashlik: Android Applications on Real Linux - Akademy 2015
Publication date: 2016-04-02
Playlist: Akademy 2015
Description: 
	Get an introduction to the technical platform which makes up the Android application launcher Shashlik, and a short description of the how and the why. And, of course, a demo of it, and information on how you can get it yourself and run Android applications on your own system.

Android is, it is generally accepted, a Linux system. Except it is not what most of us recognise as Linux. Yes, it does use the kernel, but the levels above that are very different to what we would recognise. Consequently, running an application built for Android on a more standard type linux, such as those distributed by for example openSUSE, Kubuntu or Netrunner, is not a straight forward proposition, and tends to involve either some proprietary, closed source solution, or a virtual machine, inside which you run Android.

Enter Shashlik, a collection of Android systems and frameworks as minimal as possible, built to run on a standard, modern linux system, using as much of the standard system as possible, and created to be Free/Libre from its inception. Shashlik is built to integrate into your existing system, whether it be a desktop, laptop, tablet or even a plasma based phone or television,

While it is, as with such things, never completed, this presentation marks the first public release that you can grab yourself and play with, and you will see applications running through Shashlik on an entirely normal Plasma desktop.

Speaker: Dan Leinir Turthra Jensen
License: Creative Commons Attribution 4.0 International License http://creativecommons.org/licenses/by/4.0/
Akademy 2015: https://akademy.kde.org/2015
KDE: https://www.kde.org/
Donate: https://www.kde.org/donate
Captions: 
	00:00:35,559 --> 00:00:47,629
right so shush late in the beginning all

00:00:42,620 --> 00:00:49,850
right I'm a bird sometimes right my name

00:00:47,629 --> 00:00:52,729
is Dan Lena the projection and I've been

00:00:49,850 --> 00:00:57,470
with Katie for some time now very nearly

00:00:52,729 --> 00:01:00,500
a decade either a master's of software

00:00:57,470 --> 00:01:06,049
construction with some crazy title that

00:01:00,500 --> 00:01:08,869
didn't fit with my diploma and over the

00:01:06,049 --> 00:01:10,610
time I started my baldwin and KD in the

00:01:08,869 --> 00:01:14,630
Amarok community but since then I've

00:01:10,610 --> 00:01:17,000
been working with allegra and I've been

00:01:14,630 --> 00:01:19,430
working with the gluon team and most

00:01:17,000 --> 00:01:22,219
recently I became an employee of blue

00:01:19,430 --> 00:01:32,090
systems in which capacity I am on this

00:01:22,219 --> 00:01:34,850
stage today so as a base concept of this

00:01:32,090 --> 00:01:37,340
I want to explain why blue systems is

00:01:34,850 --> 00:01:41,030
interested in doing something by

00:01:37,340 --> 00:01:43,189
shashlik so the plasma phone stuff that

00:01:41,030 --> 00:01:45,170
you clean that everybody's been very

00:01:43,189 --> 00:01:48,770
excited about recently it's been all

00:01:45,170 --> 00:01:52,700
about getting our stuff to work on folks

00:01:48,770 --> 00:01:54,920
and getting the sort of their

00:01:52,700 --> 00:01:55,479
convergence is a very nice work these

00:01:54,920 --> 00:01:59,840
days

00:01:55,479 --> 00:02:02,509
so getting our stuff to work on other

00:01:59,840 --> 00:02:06,319
devices is kind of where we want to be

00:02:02,509 --> 00:02:09,649
but obviously the opposite is also true

00:02:06,319 --> 00:02:11,680
so we want to get stuff that currently

00:02:09,649 --> 00:02:13,599
runs on phones or

00:02:11,680 --> 00:02:17,530
these apps that are available there want

00:02:13,599 --> 00:02:20,379
to have that also available on on

00:02:17,530 --> 00:02:26,620
desktops which is the current primary

00:02:20,379 --> 00:02:29,950
goal of shashlik so will eventually run

00:02:26,620 --> 00:02:35,280
on phones but right now that's not it's

00:02:29,950 --> 00:02:39,700
not the prime goal we will get that so

00:02:35,280 --> 00:02:42,730
first of all now Android everyone will

00:02:39,700 --> 00:02:45,099
tell you in particular the Linux

00:02:42,730 --> 00:02:48,609
Foundation will tell you that Linux runs

00:02:45,099 --> 00:02:51,970
on billions of devices out there the

00:02:48,609 --> 00:02:57,030
problem is based on Android which

00:02:51,970 --> 00:02:59,859
technically is Linux not really its

00:02:57,030 --> 00:03:02,260
Linux in the sense that there is a

00:02:59,859 --> 00:03:05,310
kernel but everything from there or not

00:03:02,260 --> 00:03:10,409
is different which is lovely

00:03:05,310 --> 00:03:12,700
you have binder which is an IPC system

00:03:10,409 --> 00:03:15,879
inter-process communication system which

00:03:12,700 --> 00:03:19,959
is developed for meals remember

00:03:15,879 --> 00:03:24,909
correctly which is all very very

00:03:19,959 --> 00:03:27,790
efficient it is not very popular in

00:03:24,909 --> 00:03:29,790
security circles because it's basic year

00:03:27,790 --> 00:03:33,879
side and directly into the kernel

00:03:29,790 --> 00:03:37,930
however it is now available in the

00:03:33,879 --> 00:03:41,799
mainline Linux kernel so we can work

00:03:37,930 --> 00:03:45,810
around that format then you have surface

00:03:41,799 --> 00:03:49,979
flinger which is something of an issue

00:03:45,810 --> 00:03:53,259
in that surface flinger is traditionally

00:03:49,979 --> 00:03:55,299
the way to access the hardware where we

00:03:53,259 --> 00:03:58,030
have other ways of doing that one on

00:03:55,299 --> 00:04:00,329
linux we have something called open

00:03:58,030 --> 00:04:00,329
drivers

00:04:06,310 --> 00:04:12,050
and of course there's the whole way that

00:04:10,160 --> 00:04:16,100
Android applications get run which is

00:04:12,050 --> 00:04:17,840
through the dal'rok runtime or these and

00:04:16,100 --> 00:04:22,580
the new version which will be the

00:04:17,840 --> 00:04:26,720
Android runtime which is something

00:04:22,580 --> 00:04:29,510
called civic basically elected it is you

00:04:26,720 --> 00:04:32,120
have the central virtual machine which

00:04:29,510 --> 00:04:36,800
contains all of the assistant processes

00:04:32,120 --> 00:04:39,590
and then any application will request a

00:04:36,800 --> 00:04:44,260
copy of that one time and then

00:04:39,590 --> 00:04:49,250
application to run inside balancer now

00:04:44,260 --> 00:04:53,270
the problem obviously there are a lot of

00:04:49,250 --> 00:04:57,080
applications out there and we would like

00:04:53,270 --> 00:05:00,950
those on our systems as well that's the

00:04:57,080 --> 00:05:02,780
that's the main issue that I've been

00:05:00,950 --> 00:05:06,440
talking with two people recently and

00:05:02,780 --> 00:05:08,240
they were asking so why why why are you

00:05:06,440 --> 00:05:11,900
doing this why would we want all of

00:05:08,240 --> 00:05:15,800
these apps on our perfectly functional

00:05:11,900 --> 00:05:19,220
linux desktops when we have all of all

00:05:15,800 --> 00:05:22,100
of their content in the room two

00:05:19,220 --> 00:05:25,400
repositories and we have all of the

00:05:22,100 --> 00:05:27,080
applications in openSUSE yes and all of

00:05:25,400 --> 00:05:29,000
these wonderful things the problem is

00:05:27,080 --> 00:05:31,100
they're not the things that a lot of

00:05:29,000 --> 00:05:37,180
people out there want people want candy

00:05:31,100 --> 00:05:40,400
crush that's not being available okay so

00:05:37,180 --> 00:05:43,160
yeah and the problem is being none of

00:05:40,400 --> 00:05:46,850
the ones on Android currently run on a

00:05:43,160 --> 00:05:49,490
normal Linux you've got a couple of

00:05:46,850 --> 00:05:51,110
options for doing that right now oh

00:05:49,490 --> 00:05:53,390
there's the Android emulator itself

00:05:51,110 --> 00:05:55,370
which requires you to install the

00:05:53,390 --> 00:05:57,110
Android SDK and it is terribly awkward

00:05:55,370 --> 00:05:59,600
to get anything to run inside it and

00:05:57,110 --> 00:06:01,760
they're all virtual machines as the ACL

00:05:59,600 --> 00:06:05,710
as well which is also a virtual machine

00:06:01,760 --> 00:06:08,980
and you know they all come with that

00:06:05,710 --> 00:06:11,340
wait that a virtual version comes with

00:06:08,980 --> 00:06:13,620
they are emulating

00:06:11,340 --> 00:06:16,680
and there's a virtual computer running

00:06:13,620 --> 00:06:18,360
inside your computer which given the

00:06:16,680 --> 00:06:20,220
nature of a lot of these applications

00:06:18,360 --> 00:06:27,920
would potentially not need that much of

00:06:20,220 --> 00:06:30,600
an issue but we'd rather awkward to do

00:06:27,920 --> 00:06:33,710
then there's the remote run option which

00:06:30,600 --> 00:06:38,850
is stuff like yeah appetizing and manual

00:06:33,710 --> 00:06:40,470
which is basically you put an apk on

00:06:38,850 --> 00:06:41,010
some server somewhere and they've run it

00:06:40,470 --> 00:06:43,950
for you

00:06:41,010 --> 00:06:48,120
so you know the popular other people's

00:06:43,950 --> 00:06:51,270
computer issues and then you've got web

00:06:48,120 --> 00:06:52,830
browsers that I understand Firefox are

00:06:51,270 --> 00:06:55,340
working on something similar so it will

00:06:52,830 --> 00:06:58,620
run on Firefox OS but there's one that's

00:06:55,340 --> 00:07:02,210
was in the press recently called arc

00:06:58,620 --> 00:07:05,580
which which basically means you wrapped

00:07:02,210 --> 00:07:09,810
Android applications in something which

00:07:05,580 --> 00:07:11,640
makes them run on Chrome but if you

00:07:09,810 --> 00:07:20,000
don't wanna run chrome then you can't

00:07:11,640 --> 00:07:23,430
from that so what we're doing is taking

00:07:20,000 --> 00:07:28,410
the Android stack and removing the base

00:07:23,430 --> 00:07:34,950
of it that make it really awkward to run

00:07:28,410 --> 00:07:39,540
on Linux so we're taking out the opengl

00:07:34,950 --> 00:07:42,690
code there's a lot of weirdness in that

00:07:39,540 --> 00:07:46,080
which means that you can't use the same

00:07:42,690 --> 00:07:54,810
libraries that exist on android on linux

00:07:46,080 --> 00:08:00,300
and yeah but that's why these things

00:07:54,810 --> 00:08:03,980
take time to get what the base concept

00:08:00,300 --> 00:08:07,920
then is that because this is running

00:08:03,980 --> 00:08:10,050
android on a real vendor system not

00:08:07,920 --> 00:08:11,920
inside an emulator and not inside a web

00:08:10,050 --> 00:08:14,650
browser and not one other people's

00:08:11,920 --> 00:08:17,620
or whatever we have the ability to

00:08:14,650 --> 00:08:21,360
really deeply integrate stuff so if

00:08:17,620 --> 00:08:26,320
that's what we want to do as well and

00:08:21,360 --> 00:08:29,380
then of course surface flinger itself is

00:08:26,320 --> 00:08:32,590
there we can't really very nice um you

00:08:29,380 --> 00:08:34,360
get rid of that just because there is

00:08:32,590 --> 00:08:37,210
the possibility of getting rid of

00:08:34,360 --> 00:08:40,690
surface flinger if you only run pure

00:08:37,210 --> 00:08:42,280
Java based applications in android then

00:08:40,690 --> 00:08:44,530
you can do it that's what the people in

00:08:42,280 --> 00:08:52,180
general have done good friends of ours

00:08:44,530 --> 00:08:58,150
well and yeah we yes we work with the

00:08:52,180 --> 00:09:00,450
general people love you guys but surface

00:08:58,150 --> 00:09:06,430
flinger itself is required for getting

00:09:00,450 --> 00:09:08,560
anything that's based the native SDK in

00:09:06,430 --> 00:09:11,200
Android to run because they interface

00:09:08,560 --> 00:09:13,630
directly with the service Picasso

00:09:11,200 --> 00:09:15,760
we need surface flinger and what we've

00:09:13,630 --> 00:09:17,410
done there is that we have ripped out

00:09:15,760 --> 00:09:21,760
all of the hardware abstraction stuff

00:09:17,410 --> 00:09:25,240
and then that hole that was left behind

00:09:21,760 --> 00:09:29,350
was shaped pretty much like Wayland so

00:09:25,240 --> 00:09:33,810
we put wave into that now an interesting

00:09:29,350 --> 00:09:41,980
thing about that is the code that

00:09:33,810 --> 00:09:44,680
existed there the system before people

00:09:41,980 --> 00:09:46,390
have done things with Wayland and

00:09:44,680 --> 00:09:48,240
service bling I'm trying to get the two

00:09:46,390 --> 00:09:50,620
to work together before

00:09:48,240 --> 00:09:54,570
case in point would be the dollar for

00:09:50,620 --> 00:10:00,670
sale for choice is basically doing that

00:09:54,570 --> 00:10:04,480
itself is doing that but what that does

00:10:00,670 --> 00:10:07,450
is is putting Wayland on top of surface

00:10:04,480 --> 00:10:12,250
flinger which then handles the hardware

00:10:07,450 --> 00:10:16,920
base we don't do that we just have to

00:10:12,250 --> 00:10:20,130
have some easier surfaces to paint on

00:10:16,920 --> 00:10:23,490
which we then get out of Wayland

00:10:20,130 --> 00:10:28,950
and what with them it sounds very simple

00:10:23,490 --> 00:10:32,400
it's not unfortunately but yeah that's

00:10:28,950 --> 00:10:35,520
that's their current process and then we

00:10:32,400 --> 00:10:38,460
have currently a small application that

00:10:35,520 --> 00:10:40,160
handles this basically there's a lot of

00:10:38,460 --> 00:10:45,690
services and things that need to run

00:10:40,160 --> 00:10:48,090
this is not a final new I will need to

00:10:45,690 --> 00:10:49,950
speak with a visual designer once we are

00:10:48,090 --> 00:10:54,960
a little bit closer to having something

00:10:49,950 --> 00:11:00,630
that works properly so obviously working

00:10:54,960 --> 00:11:02,820
progress there but the idea is that we

00:11:00,630 --> 00:11:06,870
see that all of that functionality will

00:11:02,820 --> 00:11:10,560
be hidden and the idea is that run run

00:11:06,870 --> 00:11:14,580
an apk button up there he's not a runner

00:11:10,560 --> 00:11:17,790
okay but it's a double click on an apk

00:11:14,580 --> 00:11:22,920
installer launches application shows up

00:11:17,790 --> 00:11:25,440
in your in your menu and so the idea is

00:11:22,920 --> 00:11:29,040
to have Android applications of course

00:11:25,440 --> 00:11:33,660
running as full proper citizens on a

00:11:29,040 --> 00:11:35,370
real normal Linux desktop so yeah that

00:11:33,660 --> 00:11:42,170
will eventually go away for right now is

00:11:35,370 --> 00:11:46,490
he useful little tool so a little demo

00:11:42,170 --> 00:11:46,490
now let's see if I can get mr. wood

00:11:49,139 --> 00:11:52,139
No

00:12:07,970 --> 00:12:22,620
there's that control and there is Weston

00:12:12,569 --> 00:12:26,850
which is a Weyland compositor that runs

00:12:22,620 --> 00:12:30,509
on top of x-rays so for us to do some

00:12:26,850 --> 00:12:36,139
testing on now I click start all

00:12:30,509 --> 00:12:36,139
services and a black screen shows up

00:12:40,040 --> 00:12:47,759
something I told people sometime on

00:12:44,550 --> 00:12:49,829
Friday when we finally had a black

00:12:47,759 --> 00:12:52,110
screen showing up that is the most

00:12:49,829 --> 00:12:54,649
exciting black rectangle I've ever seen

00:12:52,110 --> 00:12:54,649
in my life

00:12:58,670 --> 00:13:03,990
right so all of the output you can see

00:13:01,590 --> 00:13:06,690
in the background here is Android

00:13:03,990 --> 00:13:09,120
running it's dropping identities there's

00:13:06,690 --> 00:13:10,740
no charge for Windows there's no

00:13:09,120 --> 00:13:15,960
application running or so there's no

00:13:10,740 --> 00:13:19,440
input window but that is that isn't

00:13:15,960 --> 00:13:24,060
running Android system or that is

00:13:19,440 --> 00:13:28,860
running Android runtime running on pure

00:13:24,060 --> 00:13:33,960
Linux there is no hacks no changes to

00:13:28,860 --> 00:13:38,640
Linux itself it is just lineage standard

00:13:33,960 --> 00:13:40,740
user space one change would be find up

00:13:38,640 --> 00:13:53,730
but given behind right now in the

00:13:40,740 --> 00:13:56,220
mainline kernel but yes that is putting

00:13:53,730 --> 00:13:58,370
appears interesting is that they might

00:13:56,220 --> 00:13:58,370
get

00:14:03,389 --> 00:14:11,199
yeah on account of this whole Weiland

00:14:07,420 --> 00:14:33,670
thing I'm switching between twins as

00:14:11,199 --> 00:14:37,199
well so I promised someone a

00:14:33,670 --> 00:14:37,199
better had a

00:14:37,350 --> 00:14:45,069
now what's up next

00:14:41,040 --> 00:14:47,410
now other than of course getting some

00:14:45,069 --> 00:14:52,480
solution yeah sorry getting something

00:14:47,410 --> 00:14:55,240
installed and actually having a flappy

00:14:52,480 --> 00:14:58,779
bird clapping on screen and being able

00:14:55,240 --> 00:15:02,410
to play the game and all of the other

00:14:58,779 --> 00:15:05,559
things that you can do with it okay so

00:15:02,410 --> 00:15:06,879
my personal goal for this is something a

00:15:05,559 --> 00:15:11,410
little bit more I guess

00:15:06,879 --> 00:15:15,999
enterprise-e I have I'm afraid not

00:15:11,410 --> 00:15:16,809
a token phone I have a blackberry

00:15:15,999 --> 00:15:19,089
Passport

00:15:16,809 --> 00:15:20,679
it runs bb10 and there is this lovely

00:15:19,089 --> 00:15:25,480
web application that makes it possible

00:15:20,679 --> 00:15:29,079
to mirror your messaging system on there

00:15:25,480 --> 00:15:36,089
on your desktop but that only works on

00:15:29,079 --> 00:15:39,579
Windows on Mac OS and on Android so but

00:15:36,089 --> 00:15:43,600
so once we have applications up and

00:15:39,579 --> 00:15:47,019
running the all of the integration

00:15:43,600 --> 00:15:49,629
begins to become a point so we have all

00:15:47,019 --> 00:15:51,220
of the it's not just frameworks this all

00:15:49,629 --> 00:15:53,799
the other things as well as much as

00:15:51,220 --> 00:15:57,839
possible needs to be done through the

00:15:53,799 --> 00:16:01,709
FBO aspects or all the notifications and

00:15:57,839 --> 00:16:01,709
all of that stuff

00:16:03,529 --> 00:16:09,139
problems that they're probably using in

00:16:07,430 --> 00:16:13,459
Katy libraries to provide the

00:16:09,139 --> 00:16:15,470
functionality yes though it's all stuff

00:16:13,459 --> 00:16:18,680
like notifications and contacts right

00:16:15,470 --> 00:16:20,870
there you've integrated K people into so

00:16:18,680 --> 00:16:25,910
they can the tasks added the task

00:16:20,870 --> 00:16:30,620
manager show the windows in each

00:16:25,910 --> 00:16:32,480
application rather than just have a

00:16:30,620 --> 00:16:37,759
single winner which contains everything

00:16:32,480 --> 00:16:41,649
which is also listings in your K

00:16:37,759 --> 00:16:46,009
manually yeah all of these things that

00:16:41,649 --> 00:16:49,459
may be that will eventually make the

00:16:46,009 --> 00:16:52,129
applications run as full citizens my

00:16:49,459 --> 00:16:54,110
proper full run an application an

00:16:52,129 --> 00:16:57,439
Android application you can only tell

00:16:54,110 --> 00:16:59,269
that there is a difference because it's

00:16:57,439 --> 00:17:02,329
gonna still look like an Android

00:16:59,269 --> 00:17:05,089
application but it will run and it will

00:17:02,329 --> 00:17:09,640
show your content will show itself in

00:17:05,089 --> 00:17:09,640
the taskbar and it's a view through the

00:17:18,760 --> 00:17:29,659
controller is to make it a little bit

00:17:21,890 --> 00:17:33,500
more in essence I guess like the called

00:17:29,659 --> 00:17:36,980
the Settings app on Android it has a lot

00:17:33,500 --> 00:17:38,679
of detailed statistics for each

00:17:36,980 --> 00:17:41,659
application

00:17:38,679 --> 00:17:45,320
we can't really sensibly filter that

00:17:41,659 --> 00:17:47,809
into the existing package managers bugs

00:17:45,320 --> 00:17:50,960
as much as possible we want in there but

00:17:47,809 --> 00:17:52,789
some things we will need to be we'll

00:17:50,960 --> 00:17:56,330
need to have to control that if nothing

00:17:52,789 --> 00:17:59,950
else for debug purposes so yeah you

00:17:56,330 --> 00:18:04,000
can't see that because resolution but

00:17:59,950 --> 00:18:07,389
and then right now

00:18:04,000 --> 00:18:08,860
it's KitKat and we were talking to me we

00:18:07,389 --> 00:18:14,139
wanna upgrade that to Android even when

00:18:08,860 --> 00:18:19,419
that's out and then so on whenever I

00:18:14,139 --> 00:18:22,960
start coming and then people are asking

00:18:19,419 --> 00:18:25,870
oh but where do I get my apks how would

00:18:22,960 --> 00:18:28,690
I you know get all of my applications

00:18:25,870 --> 00:18:30,549
all of these many many thousands of you

00:18:28,690 --> 00:18:33,340
know it's not hundreds of thousands of

00:18:30,549 --> 00:18:35,350
applications that surely you're not

00:18:33,340 --> 00:18:40,899
expecting people to go lifted from

00:18:35,350 --> 00:18:43,840
Playstore or no the idea is to integrate

00:18:40,899 --> 00:18:45,730
again deep integration into the existing

00:18:43,840 --> 00:18:47,139
frameworks that we have we have this

00:18:45,730 --> 00:18:51,389
wonderful little thing called move on

00:18:47,139 --> 00:18:55,059
discover which is a sort of centralized

00:18:51,389 --> 00:18:59,889
application portal for multiple sources

00:18:55,059 --> 00:19:04,570
and it's you know applications and

00:18:59,889 --> 00:19:06,340
content both so if we can but for

00:19:04,570 --> 00:19:07,840
f-droid I don't expect it would be that

00:19:06,340 --> 00:19:10,899
much of an issue because it's all open

00:19:07,840 --> 00:19:12,549
but the other two I can get a little fun

00:19:10,899 --> 00:19:15,039
I know that people have done it for

00:19:12,549 --> 00:19:19,690
Google Play there are there is snappa

00:19:15,039 --> 00:19:22,000
bb10 and there's a google play trying to

00:19:19,690 --> 00:19:25,809
type in for the other as well I think

00:19:22,000 --> 00:19:27,940
the latter one is even open source so it

00:19:25,809 --> 00:19:33,580
should be possible to get at least free

00:19:27,940 --> 00:19:36,100
dance from Amazon no idea I don't

00:19:33,580 --> 00:19:38,460
believe that have an API it is necessary

00:19:36,100 --> 00:19:46,149
they don't play well with others

00:19:38,460 --> 00:19:48,100
even worse than Google but yes the idea

00:19:46,149 --> 00:19:51,190
is to integrate as many of the existing

00:19:48,100 --> 00:19:56,139
stores out there into more discover

00:19:51,190 --> 00:20:00,100
button potentially you know also extreme

00:19:56,139 --> 00:20:05,820
everything to get back to work and then

00:20:00,100 --> 00:20:07,890
obviously bugs bugs any votes and yeah

00:20:05,820 --> 00:20:09,840
once we have

00:20:07,890 --> 00:20:16,770
all of it done that's what they're

00:20:09,840 --> 00:20:17,310
saying so a little bit faster than I

00:20:16,770 --> 00:20:43,850
expected

00:20:17,310 --> 00:20:48,570
questions well in that this is a Linux

00:20:43,850 --> 00:20:51,180
based system and the whole thing where

00:20:48,570 --> 00:20:53,670
you install apps through the Play Store

00:20:51,180 --> 00:20:56,040
the way that you know you can go to the

00:20:53,670 --> 00:20:57,990
web thinker like this on my device so on

00:20:56,040 --> 00:20:59,640
is a little bit different here that

00:20:57,990 --> 00:21:01,800
doesn't quite work like that that

00:20:59,640 --> 00:21:06,930
requires the Google services and that's

00:21:01,800 --> 00:21:20,940
very specific but well technically

00:21:06,930 --> 00:21:23,270
because we get the apk it's not I can

00:21:20,940 --> 00:21:23,270
see it working

00:21:28,809 --> 00:21:34,130
well that would be Mauritania connecting

00:21:31,630 --> 00:21:36,139
but yeah having actually not so fine

00:21:34,130 --> 00:21:55,789
having a schlep integrating with KDE

00:21:36,139 --> 00:21:57,830
connect well the the it does an orcish

00:21:55,789 --> 00:22:03,259
and that would be because I believe it's

00:21:57,830 --> 00:22:06,019
Russian it's right so that there's not

00:22:03,259 --> 00:22:11,120
itself I think no actually the transmit

00:22:06,019 --> 00:22:21,559
name is Turkish I'm told but the picture

00:22:11,120 --> 00:22:25,120
of that picture says it was Russian it's

00:22:21,559 --> 00:22:27,769
a sort of that kind of area it's it's a

00:22:25,120 --> 00:22:32,509
you know it's a it's a shish kebab

00:22:27,769 --> 00:22:35,950
basically does anyone here have a

00:22:32,509 --> 00:22:35,950
cultural connection to

00:23:05,950 --> 00:23:12,169
well yes technically not not from the

00:23:09,129 --> 00:23:14,269
far end if I understood the question

00:23:12,169 --> 00:23:15,829
correctly you will be able to detect

00:23:14,269 --> 00:23:18,289
them inside your application if it's

00:23:15,829 --> 00:23:21,829
running in such dashlet because shashlik

00:23:18,289 --> 00:23:25,309
has you can the same way you would

00:23:21,829 --> 00:23:29,320
detect any Android build on any device

00:23:25,309 --> 00:23:29,320
you can protective is running on

00:23:29,589 --> 00:23:34,579
detective it so you know it cyanogen or

00:23:32,659 --> 00:23:38,629
so on you can that information is

00:23:34,579 --> 00:23:42,589
registered as shashlik and shashlik

00:23:38,629 --> 00:23:46,969
runtime inside the VM so if you request

00:23:42,589 --> 00:23:48,320
the version information from Android it

00:23:46,969 --> 00:23:54,099
will tell you that it's running much

00:23:48,320 --> 00:23:54,099
actually what was the first part

00:24:07,490 --> 00:24:16,050
yes the native stuff yes right so what

00:24:11,670 --> 00:24:20,190
we've discovered is that applications

00:24:16,050 --> 00:24:24,800
which are distributed on the Play Store

00:24:20,190 --> 00:24:28,220
at least will tell you what

00:24:24,800 --> 00:24:31,590
architectures they're available for and

00:24:28,220 --> 00:24:36,020
inside the same apk you have libraries

00:24:31,590 --> 00:24:39,660
for all of the different architectures

00:24:36,020 --> 00:24:43,740
so you know say thank you very ñ flappy

00:24:39,660 --> 00:24:47,850
bird has inside the same apk you have

00:24:43,740 --> 00:24:49,620
libraries for two or three different

00:24:47,850 --> 00:24:56,190
versions of arm you've got mix you've

00:24:49,620 --> 00:24:58,350
got x86 and so on so it's we under

00:24:56,190 --> 00:25:00,420
certain tracks lick is not an emulator

00:24:58,350 --> 00:25:01,170
in the same way that wine is not an

00:25:00,420 --> 00:25:04,320
emulator

00:25:01,170 --> 00:25:09,210
there is no hardware emulation going on

00:25:04,320 --> 00:25:14,760
here it's an API that runs directly on

00:25:09,210 --> 00:25:18,660
top of your local native system so it's

00:25:14,760 --> 00:25:23,840
all if if the application lacks x86

00:25:18,660 --> 00:25:26,580
support it will not run energetic

00:25:23,840 --> 00:25:30,660
technically I guess it would be possible

00:25:26,580 --> 00:25:33,380
to do but it is not really installed at

00:25:30,660 --> 00:25:37,110
the moment at least so yeah

00:25:33,380 --> 00:25:39,200
did it get the proper sort of systematic

00:25:37,110 --> 00:25:39,200
questioning

00:25:54,400 --> 00:26:49,310
we need we need to look at that but now

00:26:36,400 --> 00:26:51,530
it's not out of scope but it is some

00:26:49,310 --> 00:26:57,650
some of the private stuff is Bionic

00:26:51,530 --> 00:26:59,570
we don't have ionic we have oh the

00:26:57,650 --> 00:27:03,430
frameworks stuff yes the frameworks

00:26:59,570 --> 00:27:03,430
private stuff that's all there

00:27:09,320 --> 00:27:15,540
yeah that them actually yes that should

00:27:12,390 --> 00:27:17,070
be possible we will need to look at it

00:27:15,540 --> 00:27:19,950
and I did one other thing that we're

00:27:17,070 --> 00:27:21,890
working on at the moment so yeah but

00:27:19,950 --> 00:27:25,820
yeah

00:27:21,890 --> 00:27:25,820
actually let me just do this

00:27:32,030 --> 00:27:35,300
yes but

00:27:42,730 --> 00:27:46,680
right now okay so that's my phone yeah

00:27:45,040 --> 00:27:51,580
someone's going to ask about some part

00:27:46,680 --> 00:27:53,770
right so running it on plasma phone at

00:27:51,580 --> 00:27:56,860
the moment is a problem because there is

00:27:53,770 --> 00:28:00,520
already a service better because it uses

00:27:56,860 --> 00:28:03,760
the virus which speaks to the hardware

00:28:00,520 --> 00:28:07,420
through sort of sort of kind of services

00:28:03,760 --> 00:28:09,340
again you don't use this thing

00:28:07,420 --> 00:28:11,410
make sure it's there's no surface

00:28:09,340 --> 00:28:27,610
flinger process running on the phone

00:28:11,410 --> 00:28:30,460
today right if we can kill the surface

00:28:27,610 --> 00:28:31,270
flinger on plasma for then yes it will

00:28:30,460 --> 00:28:38,800
be possible

00:28:31,270 --> 00:28:41,350
basically the problem is the two surface

00:28:38,800 --> 00:28:43,600
players will be fighting over who gets

00:28:41,350 --> 00:28:46,240
to speak through binder because it's

00:28:43,600 --> 00:28:51,430
supposed to be essentially you know a

00:28:46,240 --> 00:28:54,220
single type application so but yeah in

00:28:51,430 --> 00:28:56,170
in that case yes if there is no surface

00:28:54,220 --> 00:28:59,350
playing harmful and yes we can do it

00:28:56,170 --> 00:29:02,380
it'll take some time because also right

00:28:59,350 --> 00:29:07,120
now it is an x86 project we will need to

00:29:02,380 --> 00:29:12,460
add the stop to translate to get that to

00:29:07,120 --> 00:29:15,180
work but yeah should be possible see

00:29:12,460 --> 00:29:15,180
those same things

00:29:31,550 --> 00:29:39,150
well right so Catholic is not very

00:29:36,570 --> 00:29:41,580
useful for that sort of spying on

00:29:39,150 --> 00:29:43,500
applications type stuff so I wouldn't

00:29:41,580 --> 00:29:47,190
think that shashlik itself would annoy

00:29:43,500 --> 00:29:49,800
people the Android emulator itself it's

00:29:47,190 --> 00:29:51,330
much more useful for that because it has

00:29:49,800 --> 00:29:53,460
all the debugging tools that are there

00:29:51,330 --> 00:29:56,610
because it's part of the SDK and it's

00:29:53,460 --> 00:30:00,290
supposed to be used for that so yeah I

00:29:56,610 --> 00:30:00,290
wouldn't think that we would have

00:30:10,760 --> 00:30:19,790
look that's the thing because we don't

00:30:16,100 --> 00:30:24,530
use the hardware abstraction stuff we

00:30:19,790 --> 00:30:27,440
are just using sister libraries we're

00:30:24,530 --> 00:30:32,000
using the system egl we're using system

00:30:27,440 --> 00:30:33,650
OpenGL everything runs on Mesa so and

00:30:32,000 --> 00:30:35,270
that's that's really the problem that we

00:30:33,650 --> 00:30:37,700
have reporting we're going to touch on

00:30:35,270 --> 00:30:40,280
all the other providers based things to

00:30:37,700 --> 00:30:43,970
new devices is that essentially you need

00:30:40,280 --> 00:30:45,890
to modify a live virus to work with the

00:30:43,970 --> 00:30:50,510
odd quirks that exist in the various

00:30:45,890 --> 00:30:53,299
drivers and we don't have that what we

00:30:50,510 --> 00:30:55,660
do have though is because it is Android

00:30:53,299 --> 00:30:59,570
there are some very specific

00:30:55,660 --> 00:31:06,440
requirements two versions of specific

00:30:59,570 --> 00:31:09,130
libraries but most of that since and it

00:31:06,440 --> 00:31:12,049
is getting better as Android gets older

00:31:09,130 --> 00:31:22,160
interestingly they also and lots of this

00:31:12,049 --> 00:31:25,400
sort of I have a suspicion that do

00:31:22,160 --> 00:31:27,350
upgrade to Android n some a battle go

00:31:25,400 --> 00:31:31,510
away as well so it's been great support

00:31:27,350 --> 00:31:31,510
a difference yeah

00:31:46,810 --> 00:31:53,450
our modified Linux means you need to

00:31:50,990 --> 00:31:56,980
enable that standard option in your

00:31:53,450 --> 00:32:00,410
channel sorry right now you need finder

00:31:56,980 --> 00:32:01,910
hoping to get rid of damage on point so

00:32:00,410 --> 00:32:03,350
there's a lot of other people they

00:32:01,910 --> 00:32:06,920
actually want to get rid of it in

00:32:03,350 --> 00:32:09,110
Android itself but they looked at Katie

00:32:06,920 --> 00:32:13,760
bus and found out that Katie does is not

00:32:09,110 --> 00:32:16,430
an option so yeah but because of these

00:32:13,760 --> 00:32:20,840
need our requirements are somewhat

00:32:16,430 --> 00:32:25,070
smaller than what they have we not

00:32:20,840 --> 00:32:27,080
contacting the hardware directly there's

00:32:25,070 --> 00:32:31,660
a lot of stuff that we may very well be

00:32:27,080 --> 00:32:35,080
able to get rid of the binder dependency

00:32:31,660 --> 00:32:35,080
but yes right now

00:32:51,260 --> 00:32:53,320

YouTube URL: https://www.youtube.com/watch?v=a4ZaaYy-DbM


