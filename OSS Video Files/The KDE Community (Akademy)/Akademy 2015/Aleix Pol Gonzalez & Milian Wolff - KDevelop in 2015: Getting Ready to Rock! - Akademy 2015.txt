Title: Aleix Pol Gonzalez & Milian Wolff - KDevelop in 2015: Getting Ready to Rock! - Akademy 2015
Publication date: 2016-04-02
Playlist: Akademy 2015
Description: 
	In this presentation we plan to explain what we've been up to since last Akademy, Porting to Qt5/KF5, Clang, a stable QML/JS plugin. This opens many doors I'd like to explore with the audience.

Speakers: Aleix Pol Gonzalez & Milian Wolff
License: Creative Commons Attribution 4.0 International License http://creativecommons.org/licenses/by/4.0/
Akademy 2015: https://akademy.kde.org/2015
KDE: https://www.kde.org/
Donate: https://www.kde.org/donate
Captions: 
	00:00:08,420 --> 00:00:12,580
hello everyone yeah i'm jumping in for a

00:00:11,059 --> 00:00:13,890
leash

00:00:12,580 --> 00:00:16,860
a little lightning talk

00:00:13,890 --> 00:00:19,590
the current status of K develop in 2015

00:00:16,860 --> 00:00:21,030
I kinda miss the deadline for proper

00:00:19,590 --> 00:00:25,430
presentation this year while I was on

00:00:21,030 --> 00:00:30,300
vacation so what I want to talk about

00:00:25,430 --> 00:00:33,990
today is yeah that K develop is still

00:00:30,300 --> 00:00:36,180
alive and kicking quite some people are

00:00:33,990 --> 00:00:37,890
still contributing activity and it's

00:00:36,180 --> 00:00:41,760
actually looking very very good in my

00:00:37,890 --> 00:00:44,880
opinion the framework sport is kind of

00:00:41,760 --> 00:00:47,670
done in a sense that both k def blood

00:00:44,880 --> 00:00:52,079
foam and k developed as well as the call

00:00:47,670 --> 00:00:55,199
plugins like PHP and Python are ported

00:00:52,079 --> 00:00:58,379
and work we're even at the stage where

00:00:55,199 --> 00:01:01,140
the core stuff is got ported away from

00:00:58,379 --> 00:01:03,420
Katie lives for support and in so many

00:01:01,140 --> 00:01:05,880
areas it's simply much better than

00:01:03,420 --> 00:01:09,450
whatever we had before not only because

00:01:05,880 --> 00:01:12,840
of the port but also because we decided

00:01:09,450 --> 00:01:16,400
to strip away code and for example the

00:01:12,840 --> 00:01:19,200
sea make in C++ area we decided to

00:01:16,400 --> 00:01:20,970
simply cut away throw away old code and

00:01:19,200 --> 00:01:23,970
replace it by something new I'll talk

00:01:20,970 --> 00:01:26,070
about that in a bit that also means that

00:01:23,970 --> 00:01:29,040
by throwing away code we obviously

00:01:26,070 --> 00:01:31,590
missed what removed a couple of features

00:01:29,040 --> 00:01:35,880
we do plan to bring them back sooner

00:01:31,590 --> 00:01:37,770
later but IAM on that later see make you

00:01:35,880 --> 00:01:39,869
might have heard that before we decided

00:01:37,770 --> 00:01:42,659
to use upstream instead of writing our

00:01:39,869 --> 00:01:45,030
own see Meg we are engine in the sense

00:01:42,659 --> 00:01:48,750
we are currently waiting with upstream

00:01:45,030 --> 00:01:51,329
on a sense of waiting for them to do the

00:01:48,750 --> 00:01:54,600
work upstream in this case is Steven

00:01:51,329 --> 00:01:57,630
Kelley he's actively refactoring see Meg

00:01:54,600 --> 00:02:01,229
and in the long run we'll hopefully then

00:01:57,630 --> 00:02:05,090
give us something to work with what is

00:02:01,229 --> 00:02:09,090
essentially creating there is a way to

00:02:05,090 --> 00:02:12,170
yeah build some tool that we in or any

00:02:09,090 --> 00:02:14,730
other ID you can then query and use for

00:02:12,170 --> 00:02:17,250
things like code completion help but

00:02:14,730 --> 00:02:19,730
also build Wizards on top to add files

00:02:17,250 --> 00:02:21,930
to a target and these kind of things

00:02:19,730 --> 00:02:24,030
thanks to the work that Alex did by

00:02:21,930 --> 00:02:25,340
removing the old coat and working with

00:02:24,030 --> 00:02:27,769
the upstream

00:02:25,340 --> 00:02:30,590
external binary means that it's

00:02:27,769 --> 00:02:32,239
significantly faster the only thing that

00:02:30,590 --> 00:02:36,140
is actually missing at this point as far

00:02:32,239 --> 00:02:38,239
as I'm aware of are the Wizards like you

00:02:36,140 --> 00:02:41,750
had a new file and it asks you like do

00:02:38,239 --> 00:02:44,150
you want it to a certain text file like

00:02:41,750 --> 00:02:46,129
that's what she make files are so in my

00:02:44,150 --> 00:02:48,890
opinion it's not that big a deal and

00:02:46,129 --> 00:02:50,690
it's certainly worth the reduced

00:02:48,890 --> 00:02:55,400
maintenance costs and improved

00:02:50,690 --> 00:02:58,000
performance on the C++ site we still do

00:02:55,400 --> 00:03:01,489
have our old c++ black in that

00:02:58,000 --> 00:03:03,950
essentially is implementation of parts

00:03:01,489 --> 00:03:07,360
of what also a compiler would need to do

00:03:03,950 --> 00:03:10,849
so pausing tokenizing and then Lex

00:03:07,360 --> 00:03:14,060
analyzing these things to figure out

00:03:10,849 --> 00:03:15,920
template structures and yeah it's still

00:03:14,060 --> 00:03:18,709
more or less in the same stages what you

00:03:15,920 --> 00:03:21,650
know from KD KD for base k develops so

00:03:18,709 --> 00:03:24,379
it still does not support lots of C++ 11

00:03:21,650 --> 00:03:27,410
features or if you throw in standard

00:03:24,379 --> 00:03:29,540
library stuff it simply breaks that's

00:03:27,410 --> 00:03:32,540
because we have concentrated on Calif

00:03:29,540 --> 00:03:37,340
clang instead that's a completely new

00:03:32,540 --> 00:03:40,609
tiny codebase based on the capi that

00:03:37,340 --> 00:03:43,340
clung from the llvm project offers us so

00:03:40,609 --> 00:03:46,359
it's really really awesome in my opinion

00:03:43,340 --> 00:03:49,010
to see that work out it's not only

00:03:46,359 --> 00:03:52,579
supporting the latest and greatest in

00:03:49,010 --> 00:03:54,620
C++ it's also much more stable in a

00:03:52,579 --> 00:03:57,260
sense of if that crashes and yes

00:03:54,620 --> 00:03:59,090
sometimes clang does crash it does not

00:03:57,260 --> 00:04:02,209
take down the whole application because

00:03:59,090 --> 00:04:06,200
it's kind of sandboxed the performance

00:04:02,209 --> 00:04:07,730
is by far not as bad as I feared there

00:04:06,200 --> 00:04:10,099
are some cases where it's currently

00:04:07,730 --> 00:04:12,669
still less performant that well we had

00:04:10,099 --> 00:04:15,590
before but overall especially when you

00:04:12,669 --> 00:04:17,810
analyze a huge project it is much faster

00:04:15,590 --> 00:04:20,989
than what we had before especially on

00:04:17,810 --> 00:04:25,250
modern multi-core machines you hopefully

00:04:20,989 --> 00:04:28,580
use for developing and yet language

00:04:25,250 --> 00:04:30,110
support necessary immensely better some

00:04:28,580 --> 00:04:34,909
features are not yet implemented that

00:04:30,110 --> 00:04:36,590
being worked on so to wait for that we

00:04:34,909 --> 00:04:38,750
still have other languages as i

00:04:36,590 --> 00:04:42,380
mentioned PHP Python

00:04:38,750 --> 00:04:44,650
but also the q mal Ruby CSS stuff is

00:04:42,380 --> 00:04:46,460
still there even though it's not

00:04:44,650 --> 00:04:48,470
officially released we have to do

00:04:46,460 --> 00:04:50,210
something about that but it's all there

00:04:48,470 --> 00:04:53,210
if you need any kind of these languages

00:04:50,210 --> 00:04:56,120
to ask us and we can tell you how to do

00:04:53,210 --> 00:04:58,670
that there's also new people coming into

00:04:56,120 --> 00:05:01,610
the community contributing a go plucking

00:04:58,670 --> 00:05:03,920
and there's someone working on a ross

00:05:01,610 --> 00:05:08,780
clock in 4k text editor which we then

00:05:03,920 --> 00:05:10,430
can also use in kdevelop gdb and has

00:05:08,780 --> 00:05:12,920
been worked on by another new

00:05:10,430 --> 00:05:15,230
contributor and it greatly improved the

00:05:12,920 --> 00:05:16,880
stability of the whole thing there are

00:05:15,230 --> 00:05:18,890
still some issues when you work on

00:05:16,880 --> 00:05:20,720
embedded or across different machines

00:05:18,890 --> 00:05:23,930
and that's definitely something I want

00:05:20,720 --> 00:05:26,300
to work on this week but here they're

00:05:23,930 --> 00:05:28,610
also expect some improvements compared

00:05:26,300 --> 00:05:32,210
to what we have in our latest stable

00:05:28,610 --> 00:05:34,520
release based on Katie for and right now

00:05:32,210 --> 00:05:37,760
we have three google some of course

00:05:34,520 --> 00:05:40,430
students working on kdevelop sadly none

00:05:37,760 --> 00:05:42,320
of them could attend Academy first of

00:05:40,430 --> 00:05:44,650
all we have flash law working on a

00:05:42,320 --> 00:05:51,190
unified checker framework in a sense of

00:05:44,650 --> 00:05:51,190
we had yeah welcome welcome to my world

00:05:51,580 --> 00:05:59,210
that that checker framework essentially

00:05:56,240 --> 00:06:01,610
aggregates problems we find in your code

00:05:59,210 --> 00:06:04,010
from all over like via the language

00:06:01,610 --> 00:06:06,650
analyzer beard external tool like

00:06:04,010 --> 00:06:09,500
valgrind or lintel like crazy and all

00:06:06,650 --> 00:06:13,310
that is now displayed in a central place

00:06:09,500 --> 00:06:16,220
and he's further improving that part and

00:06:13,310 --> 00:06:20,050
magic i hope i pronounced name correctly

00:06:16,220 --> 00:06:24,110
is working on c++ refactoring it's a

00:06:20,050 --> 00:06:26,210
highly how do you say that research and

00:06:24,110 --> 00:06:28,250
development project like we are not yet

00:06:26,210 --> 00:06:31,190
sure where this will go because it's

00:06:28,250 --> 00:06:33,500
based on clang and the C++ API of clang

00:06:31,190 --> 00:06:37,750
which has no stability guarantees

00:06:33,500 --> 00:06:40,520
whatsoever and right now it seems as if

00:06:37,750 --> 00:06:42,610
we can use it in some parts in other

00:06:40,520 --> 00:06:44,990
parts we have to come up with our own

00:06:42,610 --> 00:06:47,120
solutions so it's very interesting work

00:06:44,990 --> 00:06:49,130
I'm very grateful that he's working on

00:06:47,120 --> 00:06:49,930
that because someone needs to play

00:06:49,130 --> 00:06:51,610
around whether to

00:06:49,930 --> 00:06:55,030
see whether it's actually feasible to

00:06:51,610 --> 00:06:59,350
implement proper large-scale refactoring

00:06:55,030 --> 00:07:01,870
based on claim just the site note clang

00:06:59,350 --> 00:07:05,949
always works with translation humans and

00:07:01,870 --> 00:07:09,490
not has no real idea of doing full

00:07:05,949 --> 00:07:12,250
project analysis so that's something we

00:07:09,490 --> 00:07:14,740
have to fill the gap and then last but

00:07:12,250 --> 00:07:17,350
not least we have sagar was doing a

00:07:14,740 --> 00:07:20,350
tremendous job in improving further the

00:07:17,350 --> 00:07:24,460
head of Klunk pluckin picking up where

00:07:20,350 --> 00:07:26,680
Kevin funk left off last year I mean

00:07:24,460 --> 00:07:30,849
Kevin fingers also still contributing of

00:07:26,680 --> 00:07:32,740
course their performance improvements

00:07:30,849 --> 00:07:34,300
adding missing features like in code

00:07:32,740 --> 00:07:36,520
completion these kind of things he's

00:07:34,300 --> 00:07:42,160
working on and I'm advancing quite

00:07:36,520 --> 00:07:44,860
nicely then kind of the pain point we

00:07:42,160 --> 00:07:47,199
have forever and probably will have

00:07:44,860 --> 00:07:50,620
whether i don't know and i hope to get

00:07:47,199 --> 00:07:53,050
feedback from your side as well but

00:07:50,620 --> 00:07:55,030
right now we often hear is that the

00:07:53,050 --> 00:07:57,729
kdevelop UI is too cluttered too

00:07:55,030 --> 00:08:01,479
distracting whatever actually based on

00:07:57,729 --> 00:08:03,599
briefs and modern mk5 it doesn't look

00:08:01,479 --> 00:08:06,940
that bad anymore in my opinion and not

00:08:03,599 --> 00:08:10,000
only that Alex also implemented an

00:08:06,940 --> 00:08:13,169
experimental concentration mode also he

00:08:10,000 --> 00:08:15,520
said it's like a shortcut to hide cruft

00:08:13,169 --> 00:08:19,479
of course you need to know the shortcut

00:08:15,520 --> 00:08:21,250
we are aware that this is a strange way

00:08:19,479 --> 00:08:26,560
of handling this situation but at least

00:08:21,250 --> 00:08:29,259
it is solving a very the problem we have

00:08:26,560 --> 00:08:31,659
we simply did not come up with a proper

00:08:29,259 --> 00:08:34,390
you I that has the functionality we need

00:08:31,659 --> 00:08:37,000
and is not distracting so if you have

00:08:34,390 --> 00:08:40,000
any ideas on that please attend above

00:08:37,000 --> 00:08:43,000
send us emails whatever and right now do

00:08:40,000 --> 00:08:46,000
try the concentration mode it's Finn no

00:08:43,000 --> 00:08:48,160
seeds emitter seed to enable it or

00:08:46,000 --> 00:08:49,680
disable it so it hides the menu bar

00:08:48,160 --> 00:08:52,110
lights the tool view

00:08:49,680 --> 00:08:57,120
jeans but you can still lend them in

00:08:52,110 --> 00:09:00,810
based on shortcuts and as you like so

00:08:57,120 --> 00:09:02,640
yeah kdevelop 50 that o is looking good

00:09:00,810 --> 00:09:05,640
in my opinion so I really want to

00:09:02,640 --> 00:09:08,730
release the first alpha beta or you want

00:09:05,640 --> 00:09:12,330
to call it and this week I think what's

00:09:08,730 --> 00:09:14,190
really missing is proper support 4k text

00:09:12,330 --> 00:09:17,010
editor plugin so we can share even more

00:09:14,190 --> 00:09:18,810
code meaning we can remove stuff on our

00:09:17,010 --> 00:09:21,330
side and blame indicate people's or

00:09:18,810 --> 00:09:25,230
blaming myself as well there and partly

00:09:21,330 --> 00:09:27,089
if something breaks then the big open

00:09:25,230 --> 00:09:30,510
question is do we want to ship something

00:09:27,089 --> 00:09:32,850
with all CPP is still enabled or do we

00:09:30,510 --> 00:09:35,339
want to start from scratch and not from

00:09:32,850 --> 00:09:38,550
scratch but it directly go to Kate of

00:09:35,339 --> 00:09:41,130
clang I actually tend nowadays to do to

00:09:38,550 --> 00:09:45,510
the letter but feedback on that is very

00:09:41,130 --> 00:09:48,209
welcome and yeah with that I come to the

00:09:45,510 --> 00:09:50,310
end do you have any questions and again

00:09:48,209 --> 00:09:53,850
if you have feedback either by email is

00:09:50,310 --> 00:09:56,940
he or the buff on what was it you say I

00:09:53,850 --> 00:10:01,040
think about 30 in that room wherever it

00:09:56,940 --> 00:10:01,040
is so yeah thanks

00:10:05,030 --> 00:10:08,030
what

00:10:19,220 --> 00:10:22,029
nothing

00:10:37,600 --> 00:10:44,810
the cute create a mean yeah I'm sure we

00:10:42,020 --> 00:10:48,020
could copy stuff from their UI some of

00:10:44,810 --> 00:10:49,850
them that art is extremely good and well

00:10:48,020 --> 00:10:55,370
done I completely agree there other

00:10:49,850 --> 00:10:58,670
things you could be done but I actually

00:10:55,370 --> 00:11:00,350
would like to find the proper like have

00:10:58,670 --> 00:11:02,450
someone with an idea and drive us

00:11:00,350 --> 00:11:04,700
forward I don't simply want to play

00:11:02,450 --> 00:11:07,760
catch-up by copying their work even if

00:11:04,700 --> 00:11:10,630
it's very good in many areas but let's

00:11:07,760 --> 00:11:10,630
see how it goes right

00:11:24,880 --> 00:11:39,030
i know but i can tell you i can put it

00:11:34,960 --> 00:11:46,870
in MV key and how to do it for you

00:11:39,030 --> 00:11:49,330
before okay and yes and no because that

00:11:46,870 --> 00:11:51,370
would mean i need to fix cater platform

00:11:49,330 --> 00:11:54,460
to not load both plugins and then both

00:11:51,370 --> 00:12:00,880
try to analyze the C++ code and then

00:11:54,460 --> 00:12:05,640
hell breaks loose so can I have my

00:12:00,880 --> 00:12:08,770
stapler practice so anything else

00:12:05,640 --> 00:12:13,230
there's one more question I think oh no

00:12:08,770 --> 00:12:13,230
I'm over time already I think sorry

00:12:25,329 --> 00:12:27,389

YouTube URL: https://www.youtube.com/watch?v=sXFyf4LYI2k


