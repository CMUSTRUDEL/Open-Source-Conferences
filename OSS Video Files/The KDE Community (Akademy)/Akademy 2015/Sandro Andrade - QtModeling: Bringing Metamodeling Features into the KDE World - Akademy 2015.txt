Title: Sandro Andrade - QtModeling: Bringing Metamodeling Features into the KDE World - Akademy 2015
Publication date: 2016-04-02
Playlist: Akademy 2015
Description: 
	In this talk, Sandro presents the motivation, design goals, and currently supported features of QtModeling - a Qt5 add-on module devoted to bring metamodeling and model-driven features into Qt and KDE applications. He discuss the roles that models and metamodels may play in supporting code generation, automatic detection of architectural erosion, and domain-specific modeling languages. At the end, potential benefits for applications such as QtCreator, Umbrello, and KDevelop are presented.

Models play a prominent role in a number of well-established engineering activities, for example, in mechanical, electrics, and avionics fields. Under this perspective, the use of software models is yet in its infancy in spite of the promising role that models may play in supporting code generation, automatic detection of architectural erosion, and domain-specific modeling languages, just to mention a few.

In this talk, Sandro presents the motivation, the architectural drivers, and currently supported features of QtModeling - a Qt5 add-on module that provides a number of metamodeling and model-driven capabilities to Qt and KDE applications. QtModeling provides the underpinnings required to leverage the programmatic use of MOF (Meta-Object Facility) and UML (Unified Modeling Language) constructs, as well as to support new user-defined modeling languages.

Current features include: serialization of models in XMI format; full access to metaclasses via scripting; basic QML-based concrete syntax (diagrams); and a metamodel-agnostic tool integrating such capabilities (DuSE-MT). At the end of the presentation, Sandro will discuss some potential benefits QtModeling may bring not only to applications such as QtCreator, Umbrello, and KDevelop, but also to commonly adopted KDE development workflows.

Speaker: Sandro Andrade
License: Creative Commons Attribution 4.0 International License http://creativecommons.org/licenses/by/4.0/
Akademy 2015: https://akademy.kde.org/2015
KDE: https://www.kde.org/
Donate: https://www.kde.org/donate
Captions: 
	00:00:08,870 --> 00:00:17,060
so tensed Ellery and welcome and so this

00:00:14,250 --> 00:00:19,619
is me as fellow valid said I'm an

00:00:17,060 --> 00:00:24,119
assistant professor from federal

00:00:19,619 --> 00:00:27,599
institute of technology in brazil i'm

00:00:24,119 --> 00:00:31,589
using cute and KD for a few years

00:00:27,599 --> 00:00:36,690
already and i'm contributing to the

00:00:31,589 --> 00:00:38,700
communities since 2008 and in this

00:00:36,690 --> 00:00:41,250
presentation where i'm gonna i'm going

00:00:38,700 --> 00:00:44,580
to talk about cute model which is

00:00:41,250 --> 00:00:49,350
actually a new cute five atom or a

00:00:44,580 --> 00:00:52,590
module i developed and about i start to

00:00:49,350 --> 00:00:55,970
develop about 28 years ago as part of my

00:00:52,590 --> 00:01:03,000
PhD research carried out at federal

00:00:55,970 --> 00:01:06,500
university of berea also in brazil ok so

00:01:03,000 --> 00:01:10,409
let's get modeling about so then first I

00:01:06,500 --> 00:01:14,249
would like to to talk about what cute

00:01:10,409 --> 00:01:18,149
modern it isn't about I have seen some

00:01:14,249 --> 00:01:21,450
some people having mistaken ideas about

00:01:18,149 --> 00:01:24,270
that as a kind of framework for

00:01:21,450 --> 00:01:26,909
mathematical model that they're so cute

00:01:24,270 --> 00:01:31,200
modeling has nothing to do actually with

00:01:26,909 --> 00:01:35,009
not mathematical model we are interested

00:01:31,200 --> 00:01:39,740
in software mod models and in particular

00:01:35,009 --> 00:01:42,560
in particular for heaven amour amour

00:01:39,740 --> 00:01:46,289
programmatically a way to manipulating

00:01:42,560 --> 00:01:50,009
inquiring software model like this stuff

00:01:46,289 --> 00:01:54,689
in uml diagrams that you should prob

00:01:50,009 --> 00:01:57,030
probably be and use it to so but first

00:01:54,689 --> 00:01:59,579
of all a quick survey how many of you

00:01:57,030 --> 00:02:04,829
have already had any experience that

00:01:59,579 --> 00:02:08,039
with doing MMA admins models before okay

00:02:04,829 --> 00:02:11,860
we're gonna go to persons and I'm enough

00:02:08,039 --> 00:02:15,060
of you have a red-headed experience

00:02:11,860 --> 00:02:18,820
from a developer point of view for

00:02:15,060 --> 00:02:22,990
implementing FML metamodels or writing

00:02:18,820 --> 00:02:28,960
plug-ins for tools ok one person that's

00:02:22,990 --> 00:02:32,260
fine and so yeah we we want to have this

00:02:28,960 --> 00:02:37,060
kind of office stuff working in queues

00:02:32,260 --> 00:02:40,959
and in KD applications so why do we need

00:02:37,060 --> 00:02:44,380
software modules obviously we have the

00:02:40,959 --> 00:02:47,070
more naive motivations for a working leg

00:02:44,380 --> 00:02:50,110
with models like using them for

00:02:47,070 --> 00:02:53,010
documentation for the purposes to

00:02:50,110 --> 00:02:57,100
documenting the main decisions of your

00:02:53,010 --> 00:02:59,800
architecture and let newcomers see this

00:02:57,100 --> 00:03:03,820
documentation in a certain doing that

00:02:59,800 --> 00:03:06,850
cadet contributions but we can also use

00:03:03,820 --> 00:03:10,330
software models for soft code generation

00:03:06,850 --> 00:03:15,730
a generation or for keeping models and

00:03:10,330 --> 00:03:18,459
code in sync and we can I also hate

00:03:15,730 --> 00:03:21,459
using models for representing

00:03:18,459 --> 00:03:26,350
architectures that are recovered from

00:03:21,459 --> 00:03:28,530
existing software or two to verify if

00:03:26,350 --> 00:03:34,170
the implemented a architecture are

00:03:28,530 --> 00:03:40,030
indeed watch the bench and have the

00:03:34,170 --> 00:03:43,060
prescribe it for your penetration and we

00:03:40,030 --> 00:03:45,450
have seen some some works of quality

00:03:43,060 --> 00:03:49,120
assurance and continuous integration

00:03:45,450 --> 00:03:52,269
being done with the support of models

00:03:49,120 --> 00:03:57,250
and that's fine for have some technology

00:03:52,269 --> 00:04:00,340
like dependence and if you work in some

00:03:57,250 --> 00:04:03,540
mission critical systems you may get

00:04:00,340 --> 00:04:06,959
used model models for doing some

00:04:03,540 --> 00:04:10,989
prediction of quality attributes or for

00:04:06,959 --> 00:04:12,270
simulating the benefits of your software

00:04:10,989 --> 00:04:14,700
before you were

00:04:12,270 --> 00:04:18,390
you were jiggling going into coding

00:04:14,700 --> 00:04:20,720
stage and model is the basically tool

00:04:18,390 --> 00:04:24,930
also for creating domain-specific

00:04:20,720 --> 00:04:27,780
language and there's a also more

00:04:24,930 --> 00:04:31,560
advanced that the uses of mod models

00:04:27,780 --> 00:04:35,010
deployed at runtime for supporting for

00:04:31,560 --> 00:04:37,590
example self-adaptive six system so

00:04:35,010 --> 00:04:42,290
models can play quite an interesting

00:04:37,590 --> 00:04:46,230
role also in a software process

00:04:42,290 --> 00:04:50,220
development process but also a human

00:04:46,230 --> 00:04:53,430
time and why do we need to keep a cute

00:04:50,220 --> 00:04:56,610
model during so when I start my PG some

00:04:53,430 --> 00:05:00,450
years ago we basically read this is not

00:04:56,610 --> 00:05:03,840
actually the main term heritage of our

00:05:00,450 --> 00:05:07,710
research but we needed to handle with

00:05:03,840 --> 00:05:12,720
very huge mod models and with many many

00:05:07,710 --> 00:05:15,210
models it simultaneously and we

00:05:12,720 --> 00:05:18,410
basically realized that we had some

00:05:15,210 --> 00:05:21,210
issues in a scalability performanc and

00:05:18,410 --> 00:05:24,380
standard dirty compliance in encourage

00:05:21,210 --> 00:05:27,660
ave available java based implementation

00:05:24,380 --> 00:05:31,620
for supporting a uml like for example

00:05:27,660 --> 00:05:36,270
the eclipse in modern river and there is

00:05:31,620 --> 00:05:40,440
a lack of up-to-date c++ or cute based

00:05:36,270 --> 00:05:45,000
implementation for open and manipulating

00:05:40,440 --> 00:05:48,210
uml model models now okay umbrella is a

00:05:45,000 --> 00:05:52,800
pretty good application but it's still

00:05:48,210 --> 00:05:56,540
using a uml there someone so it likes a

00:05:52,800 --> 00:06:02,280
lot of new features provided by um

00:05:56,540 --> 00:06:04,950
dot-to-dot for or two dot five and we

00:06:02,280 --> 00:06:08,070
could support more modeling features in

00:06:04,950 --> 00:06:11,640
kid creator or k developer if

00:06:08,070 --> 00:06:15,030
you have all the this infrastructure for

00:06:11,640 --> 00:06:18,060
deeming it with models written in C++

00:06:15,030 --> 00:06:21,120
are cute and we could they also have

00:06:18,060 --> 00:06:24,780
more model sensitive process in KD

00:06:21,120 --> 00:06:28,920
working flow using models as I'm very

00:06:24,780 --> 00:06:33,360
centric an important artifact in KD

00:06:28,920 --> 00:06:36,330
projects so this picture shows the

00:06:33,360 --> 00:06:40,440
basically about modeling and metamodel

00:06:36,330 --> 00:06:44,730
when you create this kind of diagram in

00:06:40,440 --> 00:06:47,250
an email UNL to that isn't actually the

00:06:44,730 --> 00:06:51,090
most important thing this is only the

00:06:47,250 --> 00:06:57,080
concrete syntax the model in itself is

00:06:51,090 --> 00:07:02,280
represented as a set of instances of

00:06:57,080 --> 00:07:05,850
medical medical editor glasses / in in

00:07:02,280 --> 00:07:11,130
the language user to create a model so

00:07:05,850 --> 00:07:15,690
actually this class is a indeed an

00:07:11,130 --> 00:07:21,000
instance of an you ml Mehta class which

00:07:15,690 --> 00:07:25,080
is UML class this attribute is actually

00:07:21,000 --> 00:07:30,570
an instance with another UML metaclass

00:07:25,080 --> 00:07:34,160
which is even a proper and so on uml is

00:07:30,570 --> 00:07:40,350
a pretty huge language it comprises a

00:07:34,160 --> 00:07:43,500
about 239 meta classes so Alan a lot of

00:07:40,350 --> 00:07:48,390
crossroads that you can use linear

00:07:43,500 --> 00:07:51,150
models and the UML mayor model is itself

00:07:48,390 --> 00:07:56,880
a model which should be described in

00:07:51,150 --> 00:08:00,630
another language by and by having these

00:07:56,880 --> 00:08:05,020
meta classes as instance of another mera

00:08:00,630 --> 00:08:08,319
mera class and in this case k

00:08:05,020 --> 00:08:12,400
the uml metamodel is described in the

00:08:08,319 --> 00:08:15,069
mouth language which is quite a bit

00:08:12,400 --> 00:08:18,210
interest in stuff because the mouth is

00:08:15,069 --> 00:08:21,310
described in more so it's a kind of

00:08:18,210 --> 00:08:24,039
self-contained language the math class

00:08:21,310 --> 00:08:27,069
is actually an instance of the mouth

00:08:24,039 --> 00:08:30,940
glass so that is the basically stuff you

00:08:27,069 --> 00:08:35,229
can create your own mouth based language

00:08:30,940 --> 00:08:38,979
for your particular domain and so on yes

00:08:35,229 --> 00:08:41,919
we want to have this available as huge

00:08:38,979 --> 00:08:46,329
implemented invitation for creating and

00:08:41,919 --> 00:08:48,640
manipulating and our uranium models by

00:08:46,329 --> 00:08:53,500
using Swedish a poor sleepers presence

00:08:48,640 --> 00:08:58,390
we're okay when we started the design of

00:08:53,500 --> 00:09:02,520
kids Madhuri we had some very particular

00:08:58,390 --> 00:09:05,709
interesting from from the beginning we

00:09:02,520 --> 00:09:09,250
wanted a which should be a hundred

00:09:05,709 --> 00:09:12,760
percent compliant to the OMG standards

00:09:09,250 --> 00:09:15,760
OMG is the object management group which

00:09:12,760 --> 00:09:21,209
is our consortium that maintains and

00:09:15,760 --> 00:09:25,930
evolves the UM model carbon and other

00:09:21,209 --> 00:09:29,800
standards we wanted our implementation

00:09:25,930 --> 00:09:33,760
to be metamodel agnostic so we don't

00:09:29,800 --> 00:09:37,240
want this is specific for a uml way it

00:09:33,760 --> 00:09:40,510
should work and easily and sink

00:09:37,240 --> 00:09:43,410
similarly for any other languages

00:09:40,510 --> 00:09:47,740
including a user definable language and

00:09:43,410 --> 00:09:51,910
it should be perform well for we want to

00:09:47,740 --> 00:09:55,570
deal with large male models and also

00:09:51,910 --> 00:09:58,300
with multiple models simultaneously that

00:09:55,570 --> 00:10:01,360
was some of the requirements of my

00:09:58,300 --> 00:10:04,660
research and models should also be

00:10:01,360 --> 00:10:06,209
easily credit or change change that via

00:10:04,660 --> 00:10:08,240
a script we

00:10:06,209 --> 00:10:13,079
when people to crater there at all

00:10:08,240 --> 00:10:16,949
javascript and 44 during query and

00:10:13,079 --> 00:10:21,059
manipulating this model so how did we

00:10:16,949 --> 00:10:25,740
address this this driver one so

00:10:21,059 --> 00:10:28,949
basically when you go to the OMG FML at

00:10:25,740 --> 00:10:34,679
website you can get from there a very

00:10:28,949 --> 00:10:37,679
big PDF file containing a 800 page which

00:10:34,679 --> 00:10:43,740
is the even L specification but you can

00:10:37,679 --> 00:10:49,499
also get on an XML file which represents

00:10:43,740 --> 00:10:53,809
all the language metaclass as up an XML

00:10:49,499 --> 00:10:58,410
file so what we did we basically use the

00:10:53,809 --> 00:11:02,339
/ template choke each to reach this XML

00:10:58,410 --> 00:11:06,480
and we developer as we develop develop a

00:11:02,339 --> 00:11:09,869
set of templates for having this medical

00:11:06,480 --> 00:11:16,860
classes automatically implemented in in

00:11:09,869 --> 00:11:19,980
C++ in cute so the result is an early

00:11:16,860 --> 00:11:23,970
complete intermediate station of a uml

00:11:19,980 --> 00:11:28,160
in huge and as I said before a uml is a

00:11:23,970 --> 00:11:34,319
very huge language to 139 metaclass and

00:11:28,160 --> 00:11:37,879
luckily we can have a ninety percent of

00:11:34,319 --> 00:11:41,490
those capabilities being automatically

00:11:37,879 --> 00:11:44,610
implemented by using this template the

00:11:41,490 --> 00:11:48,019
remaining ones are a sort of derived

00:11:44,610 --> 00:11:51,809
products than ebay that you may we can

00:11:48,019 --> 00:11:57,869
effectively writing them manual but that

00:11:51,809 --> 00:12:01,619
is actually pretty good and also the UML

00:11:57,869 --> 00:12:04,920
met metamodel has has a lot of drug

00:12:01,619 --> 00:12:07,740
dreaded diamonds we know that this is a

00:12:04,920 --> 00:12:09,910
completely no-go for having any QA

00:12:07,740 --> 00:12:12,910
object based implementation so

00:12:09,910 --> 00:12:18,400
we have we had to taking some actions

00:12:12,910 --> 00:12:21,580
for Jenny with death ok 44 addressing

00:12:18,400 --> 00:12:24,720
the driver chew and we made extensive

00:12:21,580 --> 00:12:27,310
use of kids introspection cuttable

00:12:24,720 --> 00:12:31,330
capabilities for not committing to a

00:12:27,310 --> 00:12:35,110
specific language we didn't want that

00:12:31,330 --> 00:12:39,160
and we'll implement new modeling

00:12:35,110 --> 00:12:44,830
language or like a uml mafi or your

00:12:39,160 --> 00:12:47,470
playdate your arm as a s cute plugins we

00:12:44,830 --> 00:12:50,830
define a new category for you to build

00:12:47,470 --> 00:12:55,420
plugins and that plugins can be

00:12:50,830 --> 00:12:58,090
discovered at runtime and we also

00:12:55,420 --> 00:13:00,610
realized that the cute metal object

00:12:58,090 --> 00:13:04,840
capabilities for dealing it with brokers

00:13:00,610 --> 00:13:07,810
metadata has several limitations we had

00:13:04,840 --> 00:13:11,940
some some troubles for having all the

00:13:07,810 --> 00:13:15,010
UML and capabilities for dinner with

00:13:11,940 --> 00:13:17,650
puppets implemented in cute there is a

00:13:15,010 --> 00:13:20,680
bug that it's actually considered

00:13:17,650 --> 00:13:23,680
considered during how to extend future

00:13:20,680 --> 00:13:28,780
acute a huge for support these new

00:13:23,680 --> 00:13:32,080
features and regarding performance here

00:13:28,780 --> 00:13:35,320
it's actually all right good enough but

00:13:32,080 --> 00:13:39,580
we have some some plans in the roadmap

00:13:35,320 --> 00:13:44,560
its support copy-on-write in our models

00:13:39,580 --> 00:13:47,080
or and reduce the footprint of G arrived

00:13:44,560 --> 00:13:50,890
at Union profits it's a kind of

00:13:47,080 --> 00:13:55,510
immigrant purpose that hacker requires a

00:13:50,890 --> 00:13:58,030
lot of memory to work or vomiting shared

00:13:55,510 --> 00:14:01,810
objects when dealing with multiple

00:13:58,030 --> 00:14:04,570
models at the same time and for

00:14:01,810 --> 00:14:06,720
scripting this was basically by using a

00:14:04,570 --> 00:14:10,439
cutie script code you can

00:14:06,720 --> 00:14:16,230
your models by using javascript or keep

00:14:10,439 --> 00:14:19,970
script so this is our technology stack

00:14:16,230 --> 00:14:23,970
so it was beautiful top of cute five and

00:14:19,970 --> 00:14:26,399
we created a cute modeling at all which

00:14:23,970 --> 00:14:30,500
is responsible for implementing the

00:14:26,399 --> 00:14:34,170
basically xmi serialization and the

00:14:30,500 --> 00:14:38,490
required extensions to acute meta meta

00:14:34,170 --> 00:14:43,639
object systems to support what we merely

00:14:38,490 --> 00:14:46,920
requires and then we have a second a

00:14:43,639 --> 00:14:49,350
multi-module add-on module which is

00:14:46,920 --> 00:14:52,259
keyed modeling widgets which implements

00:14:49,350 --> 00:14:58,170
some new cute models and views for

00:14:52,259 --> 00:15:01,589
showing and displaying objects for in a

00:14:58,170 --> 00:15:04,339
language and we have basically the

00:15:01,589 --> 00:15:09,990
plug-in for a uml and math language

00:15:04,339 --> 00:15:13,139
already implemented and we develop a

00:15:09,990 --> 00:15:18,329
tool that actually began as an example

00:15:13,139 --> 00:15:21,389
of how to use the features and it's it's

00:15:18,329 --> 00:15:27,379
pretty functional I think I have some

00:15:21,389 --> 00:15:27,379
demo choo-choo to do here and

00:15:48,670 --> 00:15:54,110
okay this is the tool isn't it's not

00:15:51,620 --> 00:15:57,649
completely functional yet is like a

00:15:54,110 --> 00:16:01,519
proof of constant concept about how to

00:15:57,649 --> 00:16:06,200
use it so we can see here a set of

00:16:01,519 --> 00:16:08,750
plugins and so you can you can see here

00:16:06,200 --> 00:16:11,540
the plugging at which implements the UML

00:16:08,750 --> 00:16:16,360
matomoto the plug-in which implements

00:16:11,540 --> 00:16:22,480
the dream of Madame loop mode model and

00:16:16,360 --> 00:16:22,480
you can for example okay

00:16:33,769 --> 00:16:35,829
you

00:16:50,519 --> 00:17:05,260
okay I oh yeah we can for example open

00:16:57,310 --> 00:17:08,140
and uml model which here so here you can

00:17:05,260 --> 00:17:11,290
see the abstract representation of the

00:17:08,140 --> 00:17:15,250
uml model it's basically a class diagram

00:17:11,290 --> 00:17:18,459
and you can select any specific model

00:17:15,250 --> 00:17:21,280
elements and you have all the UML

00:17:18,459 --> 00:17:26,589
divided properties available here it's

00:17:21,280 --> 00:17:30,220
taken directed directly from the OMG x

00:17:26,589 --> 00:17:33,130
and ilife file you have you have some

00:17:30,220 --> 00:17:36,190
two chips saying what is that proper

00:17:33,130 --> 00:17:41,170
about that's pretty funny if you want to

00:17:36,190 --> 00:17:44,440
learn more about you uml here you have

00:17:41,170 --> 00:17:47,110
an a judge script called a console where

00:17:44,440 --> 00:17:50,790
you have for example i think i have one

00:17:47,110 --> 00:18:04,169
here to show you and I want you check

00:17:50,790 --> 00:18:04,169
with a now say open I want up

00:18:10,570 --> 00:18:16,659
okay this isn't a word but you can cook

00:18:13,570 --> 00:18:19,690
you can query your models by JavaScript

00:18:16,659 --> 00:18:23,620
for example to see if there is any day

00:18:19,690 --> 00:18:26,320
use of multiple inheritance and check if

00:18:23,620 --> 00:18:33,120
that can be properly implemented in Java

00:18:26,320 --> 00:18:38,500
for example and we develop a sort of

00:18:33,120 --> 00:18:48,419
initial version of supporting concrete

00:18:38,500 --> 00:18:54,159
syntax so we basically have some qml no

00:18:48,419 --> 00:18:57,299
actually it's that one you have some qml

00:18:54,159 --> 00:19:01,330
based implementation for dealing with

00:18:57,299 --> 00:19:05,649
concrete syntax it's pretty good to see

00:19:01,330 --> 00:19:10,049
how Phil qml code you need to have this

00:19:05,649 --> 00:19:10,049
kind of office of working

00:19:21,040 --> 00:19:24,600
yeah it works

00:19:46,000 --> 00:19:50,880
I need to change this rings sorry

00:20:12,860 --> 00:20:17,049
I finish here

00:20:22,070 --> 00:20:28,460
and so what's next we're should trying

00:20:25,490 --> 00:20:30,590
to do our release of it it's being

00:20:28,460 --> 00:20:34,610
developed an upswing with the cute

00:20:30,590 --> 00:20:39,500
community and so the the code is the

00:20:34,610 --> 00:20:41,360
author and we're trying to natural get

00:20:39,500 --> 00:20:45,200
some guys for doing this um basically

00:20:41,360 --> 00:20:49,700
review of the basic architecture and get

00:20:45,200 --> 00:20:53,180
it natural enough for doing a release we

00:20:49,700 --> 00:20:56,810
plan to to do first a cute model release

00:20:53,180 --> 00:20:59,180
then the metamodels then the widgets at

00:20:56,810 --> 00:21:03,050
that chill that can be used in

00:20:59,180 --> 00:21:07,160
applications and like kdevelop kid

00:21:03,050 --> 00:21:10,130
create or something and we still need to

00:21:07,160 --> 00:21:14,770
implement the remaining part of qml base

00:21:10,130 --> 00:21:21,400
you concrete syntax and yes we need you

00:21:14,770 --> 00:21:28,100
contributions are a welcome as usual

00:21:21,400 --> 00:21:30,610
okay that's all thanks am I ever my dad

00:21:28,100 --> 00:21:30,610
my time

00:21:50,039 --> 00:22:07,929
this is and sorry does it rotates on

00:22:03,399 --> 00:22:12,669
whether to move either brothers or no

00:22:07,929 --> 00:22:15,460
yes actually and and the main goal here

00:22:12,669 --> 00:22:19,229
is to issue providing the basic

00:22:15,460 --> 00:22:22,269
infrastructure for G with models a and

00:22:19,229 --> 00:22:25,269
regardless if that is going to be using

00:22:22,269 --> 00:22:29,169
in umbrella or as a plugging in kid

00:22:25,269 --> 00:22:33,099
creator or as uploading kdevelop so and

00:22:29,169 --> 00:22:36,219
we can for example basically I use all

00:22:33,099 --> 00:22:39,249
this ummm implementation again in

00:22:36,219 --> 00:22:43,479
umbrella I actually have no plans for

00:22:39,249 --> 00:22:48,129
for extending for having this tool as a

00:22:43,479 --> 00:22:51,820
new cube at you uml to it starts as a

00:22:48,129 --> 00:22:55,450
proof of concept and I was doing the

00:22:51,820 --> 00:22:57,700
things there but I will be very happy to

00:22:55,450 --> 00:23:01,749
see the umbrella being extended to

00:22:57,700 --> 00:23:17,070
support a uml chu and the the new

00:23:01,749 --> 00:23:17,070
features of the language you guys

00:23:22,350 --> 00:23:30,490
not at yet because i think i wish you

00:23:26,950 --> 00:23:36,850
need to to do some work for having it in

00:23:30,490 --> 00:23:40,780
a stable stable version and but I I had

00:23:36,850 --> 00:23:42,850
some some previous and contact with k

00:23:40,780 --> 00:23:47,800
developer I've already developed some

00:23:42,850 --> 00:23:51,550
plugins for for it I think and having

00:23:47,800 --> 00:23:56,020
things this dawn and working properly it

00:23:51,550 --> 00:24:10,420
would be somehow easy to to have this a

00:23:56,020 --> 00:24:12,610
working engine yeah yeah that's that I

00:24:10,420 --> 00:24:17,410
would be like 10 at one of these goals

00:24:12,610 --> 00:24:20,130
yet to have the chewy in sync models and

00:24:17,410 --> 00:24:20,130
encoding

00:24:39,620 --> 00:24:41,680

YouTube URL: https://www.youtube.com/watch?v=9W4Yj8wONiY


