Title: Akademy 2020 - amyspark - Integrating Hollywood Open Source with KDE Applications
Publication date: 2020-11-27
Playlist: Akademy 2020
Description: 
	My GSoC 2020 project, entitled “Dynamic Fill Layers in Krita using SeExpr”, enables artists to create for the first time procedurally generated content directly within the Krita painting suite. This work is powered by Disney Animation’s open source library, SeExpr.

SeExpr is an embeddable, arithmetic expression language that enables flexible artistic control and customization in creating computer graphics images. Example uses include procedural geometry synthesis, image synthesis, simulation control, crowd animation, and geometry deformation.

This presentation will outline the challenges and pitfalls of integrating a Hollywood studio’s published work with a cross-platform KDE application. Aspects reviewed will include adaptations to the build system, dependency management, platform support, and bug triage and fixing. For users, UI and UX design and implementation will also be addressed.

Layers are one of the core concepts of digital painting. They allow artists to control different parts of their artwork at once. A key feature of them is their ability to be resized, composited, renamed, grouped or deleted independently of the rest of the document.

Patterns and textures are also essential components of an artist’s toolbox, allowing them to represent the intricacies of a physical material. They come in two forms: bitmap textures, which are images contained in e.g. PNG or OpenEXR files, or procedural textures, which are generated on the fly using their mathematical representation.

KDE’s Krita painting suite supports patterns and textures through two types of layers, File and Fill Layers. However, neither of them let artists take advantage of procedurally generated content. My GSoC 2020 project, entitled “Dynamic Fill Layers in Krita using SeExpr”, allows artists to create dynamic content through a new, scriptable Fill Layer. To this effect, I integrated Disney Animation’s SeExpr expression language into Krita.

In this presentation, I will guide the audience through the pitfalls and challenges of integrating this library with the Krita codebase. Developers in the audience will be interested in learning how SeExpr’s build system, platform support, and dependencies were harmonized with Krita’s. The creation of its layer generator, and formal specification of its storage requirements, will also be addressed. Artists will be interested in how SeExpr’s UI and UX was adapted to suit their current workflow, as well as KDE’s accessibility and internationalization requirements.
Captions: 
	00:00:01,140 --> 00:00:08,620
[Music]

00:00:11,120 --> 00:00:14,799
so

00:00:11,679 --> 00:00:16,560
and good afternoon everyone i'm gonna

00:00:14,799 --> 00:00:18,080
phobia i'm speaking to you from

00:00:16,560 --> 00:00:20,320
argentina

00:00:18,080 --> 00:00:21,840
as adam said i usually go by the

00:00:20,320 --> 00:00:24,720
nickname amy spark i'm

00:00:21,840 --> 00:00:25,519
amy spark on github and today i'll be

00:00:24,720 --> 00:00:27,599
talking about

00:00:25,519 --> 00:00:30,080
integrating hollywood open source with

00:00:27,599 --> 00:00:31,920
kde applications

00:00:30,080 --> 00:00:33,360
and this talk will be a bit on the long

00:00:31,920 --> 00:00:35,040
side so please ask

00:00:33,360 --> 00:00:37,200
any questions in the chat and answer

00:00:35,040 --> 00:00:45,440
them at the end of

00:00:37,200 --> 00:00:48,480
this talk

00:00:45,440 --> 00:00:49,760
so for a bit of background who i am i've

00:00:48,480 --> 00:00:52,239
been studying for the masters in

00:00:49,760 --> 00:00:54,960
computer science since 2017

00:00:52,239 --> 00:00:56,239
at the university of in biablanca in

00:00:54,960 --> 00:00:58,640
argentina

00:00:56,239 --> 00:01:00,160
my thesis is in modeling animation and

00:00:58,640 --> 00:01:03,520
rendering of hair and food

00:01:00,160 --> 00:01:05,439
in future animation i got my bachelor's

00:01:03,520 --> 00:01:06,720
in computer science the previous year

00:01:05,439 --> 00:01:08,640
from the same university

00:01:06,720 --> 00:01:11,280
my thesis was in real time inclusion

00:01:08,640 --> 00:01:15,840
countering and declaration

00:01:11,280 --> 00:01:18,479
i got involved in in open source in 2016

00:01:15,840 --> 00:01:20,000
with krita this was because david rayboy

00:01:18,479 --> 00:01:20,799
who is the author of pepper and kara the

00:01:20,000 --> 00:01:22,640
webcomic

00:01:20,799 --> 00:01:24,080
invited me to contribute to the

00:01:22,640 --> 00:01:27,119
interpreting suite

00:01:24,080 --> 00:01:30,320
and that kind of snow well from there

00:01:27,119 --> 00:01:31,400
and i participated with the homebrew

00:01:30,320 --> 00:01:35,040
project between

00:01:31,400 --> 00:01:36,880
2017 and 2020 maintaining mainly the

00:01:35,040 --> 00:01:38,960
task project

00:01:36,880 --> 00:01:40,880
and i participated in google summer call

00:01:38,960 --> 00:01:43,520
2000 2018

00:01:40,880 --> 00:01:44,720
implementing zootopia especially for

00:01:43,520 --> 00:01:46,560
blender

00:01:44,720 --> 00:01:48,720
in this application it is named

00:01:46,560 --> 00:01:50,960
principal hair shader

00:01:48,720 --> 00:01:53,040
and my next participation was in season

00:01:50,960 --> 00:01:55,920
of kde 2019

00:01:53,040 --> 00:01:59,759
fixing circuit support from 14 color

00:01:55,920 --> 00:01:59,759
coding point color based operations

00:02:06,320 --> 00:02:11,760
so what what will this talk be about

00:02:10,000 --> 00:02:14,080
this talk is meant to share with you the

00:02:11,760 --> 00:02:15,200
experiences of working in my gst 2020

00:02:14,080 --> 00:02:16,959
project

00:02:15,200 --> 00:02:18,800
during the past four months i work on

00:02:16,959 --> 00:02:19,120
integrating an open source library from

00:02:18,800 --> 00:02:21,920
this

00:02:19,120 --> 00:02:23,680
animation called cxpro which lets us

00:02:21,920 --> 00:02:26,000
render dynamic structures nucleated like

00:02:23,680 --> 00:02:27,680
the ones shown in the right

00:02:26,000 --> 00:02:29,599
there will be an additional talk in the

00:02:27,680 --> 00:02:30,319
student showcase next week in which i'm

00:02:29,599 --> 00:02:32,720
sharing

00:02:30,319 --> 00:02:34,319
some details on the data side of things

00:02:32,720 --> 00:02:37,360
this stock it will only cover

00:02:34,319 --> 00:02:40,080
cxport and its technical aspects

00:02:37,360 --> 00:02:41,280
the key take that i wanted to take it

00:02:40,080 --> 00:02:42,959
from the stock is that

00:02:41,280 --> 00:02:44,879
code which is production proven

00:02:42,959 --> 00:02:45,680
especially by a big content company like

00:02:44,879 --> 00:02:47,519
disney

00:02:45,680 --> 00:02:49,120
is not necessarily cross-platform like

00:02:47,519 --> 00:02:52,160
we would expect for usage

00:02:49,120 --> 00:02:53,840
here at kde throughout this talk i want

00:02:52,160 --> 00:02:55,440
to show you a selection of pitfalls that

00:02:53,840 --> 00:02:57,519
exist in addition as yet

00:02:55,440 --> 00:02:58,959
code and how these were improved in

00:02:57,519 --> 00:03:00,319
pressure that is currently integrated

00:02:58,959 --> 00:03:02,000
within grita

00:03:00,319 --> 00:03:03,360
this is meant to show you where this

00:03:02,000 --> 00:03:05,519
kind of code

00:03:03,360 --> 00:03:07,280
i mean open source production proven

00:03:05,519 --> 00:03:18,239
authored by big companies

00:03:07,280 --> 00:03:21,760
can break and why that could happen

00:03:18,239 --> 00:03:25,440
so in the next a few minutes i go over

00:03:21,760 --> 00:03:27,519
four key aspects of the expert

00:03:25,440 --> 00:03:29,519
the first is assumption that makes us to

00:03:27,519 --> 00:03:32,560
the underlying platform

00:03:29,519 --> 00:03:33,840
the second is bloat or extra stuff

00:03:32,560 --> 00:03:35,840
the third international

00:03:33,840 --> 00:03:37,760
internationalization efforts

00:03:35,840 --> 00:03:39,519
and the fourth point is framing and i

00:03:37,760 --> 00:03:47,040
close all summer with the summary of my

00:03:39,519 --> 00:03:49,200
efforts throughout the project

00:03:47,040 --> 00:03:50,480
so the first subject of this talk is

00:03:49,200 --> 00:03:53,760
called platform and

00:03:50,480 --> 00:03:53,760
platform assumptions

00:03:55,360 --> 00:03:59,519
by platform assumptions i mean the fact

00:03:57,360 --> 00:04:01,360
that this kind of code runs in common

00:03:59,519 --> 00:04:02,720
platforms this means a software

00:04:01,360 --> 00:04:05,920
configuration that is known

00:04:02,720 --> 00:04:08,480
and reproducible for instance each year

00:04:05,920 --> 00:04:09,760
a committee led by the effects society

00:04:08,480 --> 00:04:11,680
technology committee

00:04:09,760 --> 00:04:13,680
releases a version of what is called the

00:04:11,680 --> 00:04:15,760
bfx reference platform

00:04:13,680 --> 00:04:18,479
this is an specification that sets touch

00:04:15,760 --> 00:04:21,759
impression of components like a compiler

00:04:18,479 --> 00:04:22,320
libraries and sdk versions however we

00:04:21,759 --> 00:04:25,120
use

00:04:22,320 --> 00:04:28,320
kde applications run them on just any

00:04:25,120 --> 00:04:31,280
platform that you can imagine

00:04:28,320 --> 00:04:32,240
this is just an example the localization

00:04:31,280 --> 00:04:34,479
teams running

00:04:32,240 --> 00:04:36,240
translate applications into 17 languages

00:04:34,479 --> 00:04:39,199
and counting

00:04:36,240 --> 00:04:39,759
kde frameworks runs on almost all of the

00:04:39,199 --> 00:04:42,240
desktop

00:04:39,759 --> 00:04:44,000
and mobile operating systems on the face

00:04:42,240 --> 00:04:46,240
of the earth

00:04:44,000 --> 00:04:48,639
neon the distribution of kde supports

00:04:46,240 --> 00:04:51,759
two architectures in 64 bits

00:04:48,639 --> 00:04:54,880
amd and arm

00:04:51,759 --> 00:04:58,240
ubuntu the after distribution supports

00:04:54,880 --> 00:05:02,639
not only 64 bits per source of xftg

00:04:58,240 --> 00:05:05,600
arm a bbc powerpc et cetera et cetera

00:05:02,639 --> 00:05:06,160
and this call example doesn't even cover

00:05:05,600 --> 00:05:08,000
all the

00:05:06,160 --> 00:05:09,520
possible library versions for instance

00:05:08,000 --> 00:05:13,120
qt5

00:05:09,520 --> 00:05:14,960
instruction sets etc etc so the key

00:05:13,120 --> 00:05:20,639
question for working with server

00:05:14,960 --> 00:05:20,639
is does it work in all of these possible

00:05:22,840 --> 00:05:25,840
configurations

00:05:28,479 --> 00:05:34,800
the answer is no this needs to work

00:05:32,240 --> 00:05:35,440
as it was released is neither platform

00:05:34,800 --> 00:05:38,080
nor nor

00:05:35,440 --> 00:05:39,840
architecture independent to begin with

00:05:38,080 --> 00:05:41,840
there is a platform.h

00:05:39,840 --> 00:05:42,880
header where they attempt to punch

00:05:41,840 --> 00:05:45,360
missing defines

00:05:42,880 --> 00:05:46,639
performance specific classic timers and

00:05:45,360 --> 00:05:48,639
spin locks

00:05:46,639 --> 00:05:49,840
but this header assumes that running

00:05:48,639 --> 00:05:51,520
under windows means

00:05:49,840 --> 00:05:53,520
instantly that you are using the visual

00:05:51,520 --> 00:05:55,120
simplest task compiler

00:05:53,520 --> 00:05:57,360
and thus tries to link against the

00:05:55,120 --> 00:05:59,840
windows sdk and visual superclass

00:05:57,360 --> 00:06:01,360
specific libraries this should not

00:05:59,840 --> 00:06:03,360
happen for instance

00:06:01,360 --> 00:06:05,520
krita in windows doesn't use visual

00:06:03,360 --> 00:06:08,000
style tasks but uses mingle

00:06:05,520 --> 00:06:09,440
so it should be able to detect gcc and

00:06:08,000 --> 00:06:12,880
instead use

00:06:09,440 --> 00:06:12,880
apps which are based on unix

00:06:13,199 --> 00:06:20,240
the second point is that cfr if enable

00:06:17,120 --> 00:06:21,280
uses ssc for instructions which is an

00:06:20,240 --> 00:06:24,479
extension to the

00:06:21,280 --> 00:06:24,960
86 instruction set these instructions

00:06:24,479 --> 00:06:28,080
are

00:06:24,960 --> 00:06:30,240
statically compiled which means

00:06:28,080 --> 00:06:31,440
that they are supported by only 98

00:06:30,240 --> 00:06:33,280
percent

00:06:31,440 --> 00:06:34,560
of the hardware server sample according

00:06:33,280 --> 00:06:37,840
to steam at

00:06:34,560 --> 00:06:39,840
as of july 2020 this means that the

00:06:37,840 --> 00:06:41,759
remaining two percent

00:06:39,840 --> 00:06:43,919
which are additional people with other

00:06:41,759 --> 00:06:44,400
hardware for that for some reason cannot

00:06:43,919 --> 00:06:47,440
read

00:06:44,400 --> 00:06:50,800
character as a c4 will break that

00:06:47,440 --> 00:06:52,639
instantly that the kryta for these users

00:06:50,800 --> 00:06:53,840
as i said before they are specified at

00:06:52,639 --> 00:06:57,599
combine time with a

00:06:53,840 --> 00:07:00,479
with a switch flag which means

00:06:57,599 --> 00:07:02,479
that if enabled they will not compile a

00:07:00,479 --> 00:07:05,599
non-intel platform for your

00:07:02,479 --> 00:07:08,639
obvious reasons the worst thing of

00:07:05,599 --> 00:07:09,840
all this it is it is only used in a

00:07:08,639 --> 00:07:12,960
single function

00:07:09,840 --> 00:07:17,840
which is around a grandfather floating

00:07:12,960 --> 00:07:17,840
point numbers

00:07:20,160 --> 00:07:23,599
so this platform header was easily dealt

00:07:22,880 --> 00:07:25,680
with

00:07:23,599 --> 00:07:28,000
it just was a matter of factoring

00:07:25,680 --> 00:07:31,440
operating system specific items into

00:07:28,000 --> 00:07:34,319
our own cdp files i only left opaque

00:07:31,440 --> 00:07:37,680
types and includes in platform.h

00:07:34,319 --> 00:07:38,960
and as for sse4 for the purposes of jsoc

00:07:37,680 --> 00:07:40,560
i left it alone

00:07:38,960 --> 00:07:43,199
this is what here in the behind the c

00:07:40,560 --> 00:07:46,960
make flat i'll show you later if there

00:07:43,199 --> 00:07:46,960
is more to do about it

00:07:52,800 --> 00:07:58,240
going back to our example i mentioned

00:07:54,720 --> 00:08:00,560
that kde supports more than 70 languages

00:07:58,240 --> 00:08:03,199
however this next work does not because

00:08:00,560 --> 00:08:05,039
it is not locally independent

00:08:03,199 --> 00:08:07,280
the definition of locally independent is

00:08:05,039 --> 00:08:09,840
given in the cps path reference

00:08:07,280 --> 00:08:11,840
which says that local is a set of

00:08:09,840 --> 00:08:13,680
features that are culturally specific

00:08:11,840 --> 00:08:15,759
which can be used by programs to be more

00:08:13,680 --> 00:08:18,000
portable internationally

00:08:15,759 --> 00:08:19,680
this in short means among other facets

00:08:18,000 --> 00:08:23,360
number formatting

00:08:19,680 --> 00:08:26,479
currency symbols substance separator

00:08:23,360 --> 00:08:27,599
and decimal point decimal point is key

00:08:26,479 --> 00:08:30,560
here

00:08:27,599 --> 00:08:31,440
because there is quite a big bug and to

00:08:30,560 --> 00:08:34,000
explain it

00:08:31,440 --> 00:08:41,839
we need to jump directly into what we

00:08:34,000 --> 00:08:41,839
call the inauds of c expert

00:08:41,919 --> 00:08:46,640
so this may see expert as a work of

00:08:44,800 --> 00:08:48,399
computer programming is actually two

00:08:46,640 --> 00:08:50,640
libraries in one

00:08:48,399 --> 00:08:52,880
the first is a language parser which is

00:08:50,640 --> 00:08:55,120
based on genius general purpose parser

00:08:52,880 --> 00:08:58,399
generator which is called bison

00:08:55,120 --> 00:08:58,880
and the lexical analyzer flex and the

00:08:58,399 --> 00:09:04,240
second

00:08:58,880 --> 00:09:04,240
is a uh ui toolkit based on qt purchases

00:09:04,959 --> 00:09:08,320
why is local decimal point so important

00:09:07,440 --> 00:09:10,959
here

00:09:08,320 --> 00:09:12,880
because we have a question once an

00:09:10,959 --> 00:09:14,959
expression is parsed

00:09:12,880 --> 00:09:18,000
how does this library figure out the

00:09:14,959 --> 00:09:20,880
value of the number terminals

00:09:18,000 --> 00:09:22,720
this is performed in two and in two

00:09:20,880 --> 00:09:24,880
separate ways

00:09:22,720 --> 00:09:26,720
the first one in the num the number

00:09:24,880 --> 00:09:27,360
terminals are directly passed with a

00:09:26,720 --> 00:09:29,519
film found

00:09:27,360 --> 00:09:31,519
with uh sorry with a c standard function

00:09:29,519 --> 00:09:33,440
called h of

00:09:31,519 --> 00:09:35,040
and the second one is done done in the

00:09:33,440 --> 00:09:37,519
ui library

00:09:35,040 --> 00:09:39,360
commands are parsed used is a function

00:09:37,519 --> 00:09:42,000
called scanner

00:09:39,360 --> 00:09:42,959
these comments are used by the ui to

00:09:42,000 --> 00:09:46,320
tell

00:09:42,959 --> 00:09:49,839
where what uh what range does a

00:09:46,320 --> 00:09:52,320
variable have the key take here

00:09:49,839 --> 00:09:56,080
is that both of these functions rely on

00:09:52,320 --> 00:09:56,080
the current location of the application

00:10:01,120 --> 00:10:08,320
so the c17 standard in this section

00:10:06,920 --> 00:10:12,640
7.11.1.1

00:10:08,320 --> 00:10:15,360
says that the default is a local code c

00:10:12,640 --> 00:10:17,040
but in in applications that support

00:10:15,360 --> 00:10:18,640
different cultures like krita this may

00:10:17,040 --> 00:10:21,760
not be the case

00:10:18,640 --> 00:10:24,240
for instance if you call set local with

00:10:21,760 --> 00:10:25,600
the variable lc numeric or you set lcl

00:10:24,240 --> 00:10:29,120
in your reset profile

00:10:25,600 --> 00:10:32,480
this may not be this may not be true

00:10:29,120 --> 00:10:35,839
here i put you a very little example

00:10:32,480 --> 00:10:40,079
you define a variable called channel

00:10:35,839 --> 00:10:42,240
you give it a value 0.5 or a half

00:10:40,079 --> 00:10:43,839
and you say for the ui that the value

00:10:42,240 --> 00:10:48,959
range is between zero

00:10:43,839 --> 00:10:48,959
zero inclusive to 0.5 inclusive

00:10:49,920 --> 00:10:58,160
so in later how cx purposes this

00:10:54,640 --> 00:11:01,839
what may be the end result the answer is

00:10:58,160 --> 00:11:01,839
it depends on the operating system

00:11:03,600 --> 00:11:08,160
on the left you've got mac os

00:11:06,880 --> 00:11:10,079
when you launch the application by

00:11:08,160 --> 00:11:13,279
double clicking it it starts with

00:11:10,079 --> 00:11:14,000
a clean environment unless the developer

00:11:13,279 --> 00:11:18,000
of the

00:11:14,000 --> 00:11:19,760
user does something weird with startup

00:11:18,000 --> 00:11:22,720
it has a clean local and you get

00:11:19,760 --> 00:11:25,440
expected results

00:11:22,720 --> 00:11:26,959
on the right you have linux in linux

00:11:25,440 --> 00:11:28,640
since all applications incurred the

00:11:26,959 --> 00:11:30,320
silocate from their parent

00:11:28,640 --> 00:11:32,320
which in turn sincerely gets from the

00:11:30,320 --> 00:11:35,279
user profile

00:11:32,320 --> 00:11:35,600
stuff happens the example in the right

00:11:35,279 --> 00:11:38,079
was

00:11:35,600 --> 00:11:40,560
that it was gotten with the located to

00:11:38,079 --> 00:11:40,560
spanish of

00:11:40,839 --> 00:11:44,399
spain

00:11:42,160 --> 00:11:45,760
the key take here is that the parcel is

00:11:44,399 --> 00:11:47,680
incorrectly

00:11:45,760 --> 00:11:57,040
locally independent when it parses its

00:11:47,680 --> 00:12:01,279
own language syntax

00:11:57,040 --> 00:12:03,920
so frequency fixing this issue

00:12:01,279 --> 00:12:05,600
means means sorry making the parser

00:12:03,920 --> 00:12:08,880
local agnostic

00:12:05,600 --> 00:12:10,000
which is not easy because the the system

00:12:08,880 --> 00:12:13,440
that provides no standard

00:12:10,000 --> 00:12:16,480
way yet esd and windows

00:12:13,440 --> 00:12:17,920
have underscore l versions of these

00:12:16,480 --> 00:12:21,200
functions aid of

00:12:17,920 --> 00:12:24,399
strtod et cetera et cetera

00:12:21,200 --> 00:12:27,279
linux and my linux mint both the senior

00:12:24,399 --> 00:12:30,880
g and uc library as well as muscle do

00:12:27,279 --> 00:12:30,880
not provide any of these functions

00:12:31,440 --> 00:12:34,720
we bought an excellent alternative to

00:12:33,680 --> 00:12:38,399
replace this

00:12:34,720 --> 00:12:41,680
which is called std from cars in the

00:12:38,399 --> 00:12:44,800
in the car com header from super 17

00:12:41,680 --> 00:12:48,399
however krita's basement is 11 not

00:12:44,800 --> 00:12:49,680
17 and there is a cross platform

00:12:48,399 --> 00:12:51,760
replacement

00:12:49,680 --> 00:12:52,800
called scn leap from a discussion on

00:12:51,760 --> 00:12:56,320
github

00:12:52,800 --> 00:12:57,760
which works on class plus 11 but however

00:12:56,320 --> 00:12:59,839
it's located support is just a

00:12:57,760 --> 00:13:01,680
placeholder it doesn't have any

00:12:59,839 --> 00:13:05,519
lowercase location support working

00:13:01,680 --> 00:13:07,920
at present so for the purpose of jsoc

00:13:05,519 --> 00:13:09,200
i elected to replace atop with a

00:13:07,920 --> 00:13:12,880
function called click

00:13:09,200 --> 00:13:15,360
crack atop from tiambo

00:13:12,880 --> 00:13:16,399
and as a scanner was simply work around

00:13:15,360 --> 00:13:18,639
but setting

00:13:16,399 --> 00:13:21,839
and resetting the locate before and

00:13:18,639 --> 00:13:21,839
after each call

00:13:22,880 --> 00:13:27,040
this was this is just the first

00:13:25,519 --> 00:13:31,440
objective of our task

00:13:27,040 --> 00:13:31,440
so we'll move to the next

00:13:32,160 --> 00:13:35,839
which are called bloat

00:13:38,560 --> 00:13:42,000
what is meant by bloat in this context i

00:13:41,680 --> 00:13:43,920
mean

00:13:42,000 --> 00:13:45,360
literally anything that a cost

00:13:43,920 --> 00:13:47,839
application like rita

00:13:45,360 --> 00:13:49,519
doesn't need to use or know in order to

00:13:47,839 --> 00:13:52,079
embed cx4

00:13:49,519 --> 00:13:53,279
this me this means unused and

00:13:52,079 --> 00:13:55,199
unnecessary features

00:13:53,279 --> 00:13:57,839
for instant code that is isn't used

00:13:55,199 --> 00:13:58,399
anywhere which it appears for to be for

00:13:57,839 --> 00:14:01,199
disney

00:13:58,399 --> 00:14:02,480
internal tools as well as a plugin

00:14:01,199 --> 00:14:05,120
system

00:14:02,480 --> 00:14:06,959
i also mean enlarged headers for

00:14:05,120 --> 00:14:08,800
instance multiple classes per header

00:14:06,959 --> 00:14:09,839
always as not representing the header

00:14:08,800 --> 00:14:12,639
rancidity

00:14:09,839 --> 00:14:17,839
called separation that is more in the

00:14:12,639 --> 00:14:17,839
next slide

00:14:18,399 --> 00:14:22,880
by blood i also mean qt for support this

00:14:20,959 --> 00:14:24,800
is not not only a problem because it has

00:14:22,880 --> 00:14:27,920
been unsupported and no life since then

00:14:24,800 --> 00:14:29,040
at least 2015 but because it prevents

00:14:27,920 --> 00:14:31,839
stunning uprights

00:14:29,040 --> 00:14:33,519
going to see more later and it also

00:14:31,839 --> 00:14:37,040
brings deprecated dependencies like

00:14:33,519 --> 00:14:39,920
queue up and gl there are also needed

00:14:37,040 --> 00:14:41,920
lead upgrades like find programs for

00:14:39,920 --> 00:14:43,360
bison and flex

00:14:41,920 --> 00:14:44,720
where you can just find package which

00:14:43,360 --> 00:14:47,839
was an initial intention of this name

00:14:44,720 --> 00:14:51,040
but it was never upgraded

00:14:47,839 --> 00:14:51,600
and there is a big need to not blindly

00:14:51,040 --> 00:14:53,360
install

00:14:51,600 --> 00:14:55,680
everything everything at the kitchen

00:14:53,360 --> 00:14:56,240
sink just copying and pasting every

00:14:55,680 --> 00:14:59,920
header

00:14:56,240 --> 00:15:02,480
to user dash include

00:14:59,920 --> 00:15:03,920
and there are no requirements declared

00:15:02,480 --> 00:15:05,839
so there is literally no

00:15:03,920 --> 00:15:07,519
way for you as a developer to know what

00:15:05,839 --> 00:15:10,240
your application would need to link

00:15:07,519 --> 00:15:12,800
against at trying time

00:15:10,240 --> 00:15:14,399
there is a last one which i called my

00:15:12,800 --> 00:15:17,600
favorite because it was

00:15:14,399 --> 00:15:20,480
it cost me a bigger a big headache

00:15:17,600 --> 00:15:22,160
is that mac os and windows nipple

00:15:20,480 --> 00:15:25,760
generated power supplies because neither

00:15:22,160 --> 00:15:28,000
of them bundle bison or flex by default

00:15:25,760 --> 00:15:28,880
but the current tool chain as it was

00:15:28,000 --> 00:15:30,639
shipped by this

00:15:28,880 --> 00:15:32,720
needs the user to manually copy these

00:15:30,639 --> 00:15:40,560
files to the redirection which

00:15:32,720 --> 00:15:42,959
should be done automatically

00:15:40,560 --> 00:15:44,320
as i said before and like the platform

00:15:42,959 --> 00:15:45,600
pitfall like we saw in the previous

00:15:44,320 --> 00:15:48,399
section this can be solved in

00:15:45,600 --> 00:15:51,120
conceptually simple ways

00:15:48,399 --> 00:15:53,519
to begin with we wall of units features

00:15:51,120 --> 00:15:55,920
by putting them behind c matrix

00:15:53,519 --> 00:15:57,920
this was the case of units unused

00:15:55,920 --> 00:16:00,560
digital internal widgets

00:15:57,920 --> 00:16:03,600
like deep water and in curve and an

00:16:00,560 --> 00:16:05,839
entry point called experiment

00:16:03,600 --> 00:16:08,000
and the op and the open and child-based

00:16:05,839 --> 00:16:11,759
widgets i put behind us another flag

00:16:08,000 --> 00:16:14,320
which is called enable opengl dialogues

00:16:11,759 --> 00:16:14,880
this point incidentally help us get rid

00:16:14,320 --> 00:16:16,880
of the

00:16:14,880 --> 00:16:22,160
deprecated link linkage which is

00:16:16,880 --> 00:16:25,040
excellent for building with gt5

00:16:22,160 --> 00:16:26,560
secondly and trading and trading the

00:16:25,040 --> 00:16:28,399
above i refactor which is

00:16:26,560 --> 00:16:32,399
as much as possible to split them into

00:16:28,399 --> 00:16:34,480
header and implementation files

00:16:32,399 --> 00:16:36,079
and finally i imported destination types

00:16:34,480 --> 00:16:39,360
of cement imported toucher

00:16:36,079 --> 00:16:41,759
targets which means that cr

00:16:39,360 --> 00:16:43,279
features are now explicitly selectable

00:16:41,759 --> 00:16:45,199
through the wall effect that i described

00:16:43,279 --> 00:16:48,240
earlier

00:16:45,199 --> 00:16:50,160
everything is can now be target linked

00:16:48,240 --> 00:16:52,000
in the host application which means that

00:16:50,160 --> 00:16:56,399
you no longer have to worry about

00:16:52,000 --> 00:16:56,399
and what targets we need to link against

00:16:57,440 --> 00:17:03,959
this is the end of the second objective

00:17:00,639 --> 00:17:05,679
we move now to the third one

00:17:03,959 --> 00:17:07,520
internationalization which is

00:17:05,679 --> 00:17:10,240
one of the most important features of

00:17:07,520 --> 00:17:10,240
open source

00:17:14,559 --> 00:17:19,760
what is formally internationalization

00:17:17,919 --> 00:17:21,439
the worldwide web consortium colleagues

00:17:19,760 --> 00:17:23,280
and i summarize the design and

00:17:21,439 --> 00:17:25,600
development of an application

00:17:23,280 --> 00:17:26,959
that enables easy localization for

00:17:25,600 --> 00:17:31,679
target audiences

00:17:26,959 --> 00:17:33,919
that vary in culture region or language

00:17:31,679 --> 00:17:35,280
cxpr is an interfacing library through

00:17:33,919 --> 00:17:37,360
its ui toolkit

00:17:35,280 --> 00:17:40,160
so it should be able to support social

00:17:37,360 --> 00:17:42,880
localization when reporting its results

00:17:40,160 --> 00:17:43,679
this means as i said displaying error

00:17:42,880 --> 00:17:47,840
messages

00:17:43,679 --> 00:17:47,840
and ui text

00:17:51,520 --> 00:17:55,360
let's recall again from the first

00:17:53,120 --> 00:17:56,799
section c experts concentrate two

00:17:55,360 --> 00:18:00,320
different libraries

00:17:56,799 --> 00:18:03,360
a language parser and an ui toolkit

00:18:00,320 --> 00:18:05,520
localizing the ui circuit is easy

00:18:03,360 --> 00:18:07,600
between brackets because it was an awful

00:18:05,520 --> 00:18:10,720
lot of work with regular expressions

00:18:07,600 --> 00:18:12,720
however we are saved by qt and

00:18:10,720 --> 00:18:15,360
kde extrace make modules to glue the

00:18:12,720 --> 00:18:18,640
translation files

00:18:15,360 --> 00:18:19,360
but this leaves the parser or revenue

00:18:18,640 --> 00:18:22,799
terms

00:18:19,360 --> 00:18:29,840
how do we localize a library that

00:18:22,799 --> 00:18:29,840
doesn't use qt

00:18:30,720 --> 00:18:34,160
you can achieve this by with two

00:18:32,640 --> 00:18:37,520
alternatives

00:18:34,160 --> 00:18:39,280
the first you can con and update

00:18:37,520 --> 00:18:41,120
one of the qt translation tools by

00:18:39,280 --> 00:18:42,240
defining your your own translation

00:18:41,120 --> 00:18:45,280
macros

00:18:42,240 --> 00:18:47,200
by this you can extract the messages you

00:18:45,280 --> 00:18:50,000
can later apply the translation from the

00:18:47,200 --> 00:18:50,000
toolkit side

00:18:51,760 --> 00:18:58,480
parameters example a given function

00:18:55,120 --> 00:19:00,640
here called a set has no definition

00:18:58,480 --> 00:19:01,919
you can probably interpolate this little

00:19:00,640 --> 00:19:04,480
part in the ui

00:19:01,919 --> 00:19:07,919
but if you're going this path you can go

00:19:04,480 --> 00:19:07,919
i can do something better

00:19:08,559 --> 00:19:12,160
what i choose to do for jsoc was to

00:19:11,280 --> 00:19:15,919
refactor

00:19:12,160 --> 00:19:19,039
the whole library into error codes

00:19:15,919 --> 00:19:21,360
with a parameter payload

00:19:19,039 --> 00:19:22,320
this means that whenever the parser has

00:19:21,360 --> 00:19:26,000
an error

00:19:22,320 --> 00:19:29,039
it emits an error code with a parameter

00:19:26,000 --> 00:19:31,120
payload which is which is later taken by

00:19:29,039 --> 00:19:33,600
the ul toolkit

00:19:31,120 --> 00:19:35,280
since the ul toolkit is translated

00:19:33,600 --> 00:19:36,480
thanks to acuity and extracemeter

00:19:35,280 --> 00:19:38,559
modules

00:19:36,480 --> 00:19:40,720
this means that house hold applications

00:19:38,559 --> 00:19:42,320
are now responsible for performing the

00:19:40,720 --> 00:19:45,280
interpolation of the message with the

00:19:42,320 --> 00:19:45,280
supply payload

00:19:49,919 --> 00:19:53,120
incidentally this internationalization

00:19:52,240 --> 00:19:56,640
effort

00:19:53,120 --> 00:19:56,640
also brings safety improvements

00:19:56,799 --> 00:20:01,919
in the left you can have the you can see

00:19:59,760 --> 00:20:04,000
the code verbatim from the original cs4

00:20:01,919 --> 00:20:05,840
parser

00:20:04,000 --> 00:20:08,159
this is example that applies when there

00:20:05,840 --> 00:20:11,200
is a synthetic syntax error or the

00:20:08,159 --> 00:20:13,520
parcel text and end of expression

00:20:11,200 --> 00:20:14,480
you can see that this is manually

00:20:13,520 --> 00:20:16,640
created

00:20:14,480 --> 00:20:20,159
and then copied using a c function

00:20:16,640 --> 00:20:23,280
called sn printf

00:20:20,159 --> 00:20:25,200
on the right here you can have a look at

00:20:23,280 --> 00:20:27,760
how i did it in my project

00:20:25,200 --> 00:20:29,200
it is vastly simplified with just an

00:20:27,760 --> 00:20:31,919
error code

00:20:29,200 --> 00:20:33,600
and then the your library has the

00:20:31,919 --> 00:20:37,039
responsibility to interpolate it

00:20:33,600 --> 00:20:37,039
using seepless past strings

00:20:41,039 --> 00:20:46,840
we are finally at the last section which

00:20:42,960 --> 00:20:49,840
deals with how cx4 handles

00:20:46,840 --> 00:20:53,120
feminine

00:20:49,840 --> 00:20:53,520
by sami i mean that cs4 should expect

00:20:53,120 --> 00:20:54,960
the

00:20:53,520 --> 00:20:56,720
applications team styling and

00:20:54,960 --> 00:20:59,280
preferences which means

00:20:56,720 --> 00:20:59,840
both the user preferences preferences as

00:20:59,280 --> 00:21:03,039
well

00:20:59,840 --> 00:21:05,039
as the platform conventions in the

00:21:03,039 --> 00:21:08,000
example below you'll see that this

00:21:05,039 --> 00:21:09,760
is did not follow this as the original

00:21:08,000 --> 00:21:10,480
the widget are heavily compressed and do

00:21:09,760 --> 00:21:14,320
not follow

00:21:10,480 --> 00:21:15,919
the non-cos convention

00:21:14,320 --> 00:21:18,480
in the right you can see an alpha

00:21:15,919 --> 00:21:20,240
version of my work also thinking genome

00:21:18,480 --> 00:21:22,240
but you'll see that the controls are now

00:21:20,240 --> 00:21:30,320
much more usable in terms of

00:21:22,240 --> 00:21:32,799
space and visibility

00:21:30,320 --> 00:21:34,480
as demonstrated previously controls were

00:21:32,799 --> 00:21:36,880
completely restyled to

00:21:34,480 --> 00:21:38,480
follow the post application streaming

00:21:36,880 --> 00:21:41,200
this involved decompressing

00:21:38,480 --> 00:21:44,559
all fields or labels or basic web text

00:21:41,200 --> 00:21:47,200
or icons are shown

00:21:44,559 --> 00:21:48,640
also i upgrading buttons and layers to

00:21:47,200 --> 00:21:50,400
modern alternatives

00:21:48,640 --> 00:21:53,039
in particular queue from layout and

00:21:50,400 --> 00:21:56,240
future button

00:21:53,039 --> 00:21:57,360
improving contracts in signals a syntax

00:21:56,240 --> 00:21:58,880
highlighting with a

00:21:57,360 --> 00:22:01,360
big thank you to aleta for her

00:21:58,880 --> 00:22:03,440
suggestions

00:22:01,360 --> 00:22:04,400
and enable color selections for vector

00:22:03,440 --> 00:22:06,720
variables

00:22:04,400 --> 00:22:08,240
this actually was a hidden feature which

00:22:06,720 --> 00:22:10,960
was broken and disney released

00:22:08,240 --> 00:22:12,880
and was uncovered when i did this the

00:22:10,960 --> 00:22:14,480
compression work

00:22:12,880 --> 00:22:16,480
which means there are now two ways to

00:22:14,480 --> 00:22:17,840
specify colors by clicking on the

00:22:16,480 --> 00:22:19,760
variable label

00:22:17,840 --> 00:22:22,000
by moving this little beneath each

00:22:19,760 --> 00:22:25,120
channel's input box

00:22:22,000 --> 00:22:25,440
and finally a fix helps tooltips to make

00:22:25,120 --> 00:22:28,640
him

00:22:25,440 --> 00:22:29,760
fully accessible at this point i'd like

00:22:28,640 --> 00:22:32,640
to publicly

00:22:29,760 --> 00:22:32,880
publicly thank botella vancouver agata

00:22:32,640 --> 00:22:37,039
and

00:22:32,880 --> 00:22:37,039
victory boy for many of these

00:22:38,840 --> 00:22:43,760
improvements

00:22:41,039 --> 00:22:44,320
as you may expect from this kind of of

00:22:43,760 --> 00:22:45,840
work

00:22:44,320 --> 00:22:48,720
these changes uncover additional

00:22:45,840 --> 00:22:52,400
mistakes in the developer side of things

00:22:48,720 --> 00:22:54,720
i fixed two hidden crashes on sea expert

00:22:52,400 --> 00:22:56,159
that were hidden by the original styling

00:22:54,720 --> 00:22:58,720
above the render flow when

00:22:56,159 --> 00:23:00,559
editing color gradients as well as

00:22:58,720 --> 00:23:03,679
initializing memory accesses

00:23:00,559 --> 00:23:04,240
in vector widgets and as a bonus track

00:23:03,679 --> 00:23:07,200
these

00:23:04,240 --> 00:23:08,640
timing changes enable users to use cx4

00:23:07,200 --> 00:23:11,520
widgets directly with

00:23:08,640 --> 00:23:11,520
duty creator

00:23:15,039 --> 00:23:19,919
so for future improvements

00:23:20,400 --> 00:23:23,840
are there any bits that i would like to

00:23:22,159 --> 00:23:27,200
separate after gsoc

00:23:23,840 --> 00:23:29,679
yes a first one

00:23:27,200 --> 00:23:30,240
modernize the code base for to cpl space

00:23:29,679 --> 00:23:32,080
00:23:30,240 --> 00:23:34,240
which brings exercise before safety

00:23:32,080 --> 00:23:37,360
improvements

00:23:34,240 --> 00:23:38,159
i would like to fully replace scan f or

00:23:37,360 --> 00:23:41,200
h off with

00:23:38,159 --> 00:23:45,039
stl alternatives as well as complete the

00:23:41,200 --> 00:23:47,360
cleanup of headers into separate files

00:23:45,039 --> 00:23:49,360
there is a plugin subsystem that i have

00:23:47,360 --> 00:23:51,760
not been able to disable yet

00:23:49,360 --> 00:23:53,440
i would like to do so and also see if i

00:23:51,760 --> 00:23:56,640
can implement this functionality for

00:23:53,440 --> 00:23:56,640
windows in a safe way

00:23:57,360 --> 00:24:00,480
to make is a cmake at the configuration

00:23:59,760 --> 00:24:02,480
step

00:24:00,480 --> 00:24:04,720
how to fix this pre-generated parser

00:24:02,480 --> 00:24:05,679
files because at this point they still

00:24:04,720 --> 00:24:07,840
use the

00:24:05,679 --> 00:24:10,320
the build folder that it was used in

00:24:07,840 --> 00:24:10,320
these days

00:24:10,559 --> 00:24:15,039
and finally research this work would

00:24:13,360 --> 00:24:16,799
could be matched upstream

00:24:15,039 --> 00:24:18,880
which is complicated because of the

00:24:16,799 --> 00:24:19,679
license requirements of the translation

00:24:18,880 --> 00:24:22,080
things

00:24:19,679 --> 00:24:24,880
and also additional fixes are suggested

00:24:22,080 --> 00:24:27,360
by users whenever we release

00:24:24,880 --> 00:24:27,360
krita

00:24:29,279 --> 00:24:36,320
so for a summary

00:24:33,760 --> 00:24:38,720
we covered all problems that i founded

00:24:36,320 --> 00:24:41,760
during the development of this project

00:24:38,720 --> 00:24:42,559
and how cf was converted from production

00:24:41,760 --> 00:24:46,159
to a

00:24:42,559 --> 00:24:48,159
truly platform alternative in case we

00:24:46,159 --> 00:24:49,919
wasn't obvious this version has so many

00:24:48,159 --> 00:24:51,200
improvements that it's not directly

00:24:49,919 --> 00:24:54,000
compatible with the original

00:24:51,200 --> 00:24:56,400
from this new animation and all

00:24:54,000 --> 00:25:00,159
modifications are available at invent

00:24:56,400 --> 00:25:02,720
at inventopke.org graphics that's

00:25:00,159 --> 00:25:02,720
c expo

00:25:07,120 --> 00:25:15,840
this concludes our journey and thank you

00:25:10,960 --> 00:25:15,840

YouTube URL: https://www.youtube.com/watch?v=_m2Zo6gDP6g


