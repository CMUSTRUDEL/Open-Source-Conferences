Title: Akademy 2020 - Richard Moe Gustavsen - Native Desktop: Styling Support for QtQuick Controls 2
Publication date: 2020-11-24
Playlist: Akademy 2020
Description: 
	At The Qt Company we have an ongoing project in the UI team to improve the support for writing desktop applications using QtQuick Controls 2. The long term goal is to bring Controls up to the same level as, or better than, Qt Widgets in terms of available controls, API, and styling. In this talk I will present which ideas we have at The Qt Company in this area for the next few years, and the initial work done for Qt-6.0 to realize it.
Captions: 
	00:00:01,110 --> 00:00:08,589
[Music]

00:00:10,000 --> 00:00:13,360
hello everyone

00:00:11,280 --> 00:00:14,960
thanks for joining this session about

00:00:13,360 --> 00:00:18,720
native desktop styling

00:00:14,960 --> 00:00:21,119
with the kid quick controls2

00:00:18,720 --> 00:00:23,439
in this presentation i will talk about

00:00:21,119 --> 00:00:25,039
our plans

00:00:23,439 --> 00:00:27,039
for the future here at the cute company

00:00:25,039 --> 00:00:29,199
ui team for creating desktop

00:00:27,039 --> 00:00:30,960
applications with compuls2

00:00:29,199 --> 00:00:33,600
and i'll also show what we have done so

00:00:30,960 --> 00:00:35,600
far for the upcoming q6 release

00:00:33,600 --> 00:00:37,920
and i'll even throw in a little demo in

00:00:35,600 --> 00:00:39,840
the end

00:00:37,920 --> 00:00:41,520
and the short summaries that we plan to

00:00:39,840 --> 00:00:42,559
ramp up support for writing desktop

00:00:41,520 --> 00:00:45,840
applications

00:00:42,559 --> 00:00:48,399
with controls2 using both qml and the c

00:00:45,840 --> 00:00:48,399
plus plus

00:00:52,239 --> 00:00:56,480
okay let's take a brief look at the

00:00:54,160 --> 00:00:58,320
current situation

00:00:56,480 --> 00:01:00,160
controls one was our first goal of

00:00:58,320 --> 00:01:02,879
providing a ui framework using

00:01:00,160 --> 00:01:04,080
kml uh all the controls were more or

00:01:02,879 --> 00:01:07,119
less written hundred percent

00:01:04,080 --> 00:01:07,920
in chemo without much c plus plus and at

00:01:07,119 --> 00:01:10,000
that time

00:01:07,920 --> 00:01:11,200
uh camo was pretty new for everyone also

00:01:10,000 --> 00:01:12,479
for us

00:01:11,200 --> 00:01:15,520
which meant that we didn't really know

00:01:12,479 --> 00:01:17,600
what to expect in regards to performance

00:01:15,520 --> 00:01:20,159
so the starting api ended up being quite

00:01:17,600 --> 00:01:21,920
inefficient by design i would say

00:01:20,159 --> 00:01:23,520
it created a lot of key objects and had

00:01:21,920 --> 00:01:26,720
many fat delegates

00:01:23,520 --> 00:01:30,000
that use javascript introspections and

00:01:26,720 --> 00:01:31,360
bindings to style the controls

00:01:30,000 --> 00:01:33,200
on top of this we had a linking

00:01:31,360 --> 00:01:33,759
dependency to widgets to offer native

00:01:33,200 --> 00:01:36,640
styling

00:01:33,759 --> 00:01:38,640
and widget-based dialogues from qml and

00:01:36,640 --> 00:01:39,439
without the camera compiling support we

00:01:38,640 --> 00:01:41,520
had today

00:01:39,439 --> 00:01:43,360
this all ended up as a rather slow and

00:01:41,520 --> 00:01:45,040
messy approach

00:01:43,360 --> 00:01:46,399
and on top of it all it didn't scale

00:01:45,040 --> 00:01:49,360
well when used on

00:01:46,399 --> 00:01:50,399
embedded hardware so at one point we had

00:01:49,360 --> 00:01:54,079
to rethink the

00:01:50,399 --> 00:01:55,280
the whole solution uh in control 2 we

00:01:54,079 --> 00:01:56,640
basically shifted most of the

00:01:55,280 --> 00:02:00,000
implementation from

00:01:56,640 --> 00:02:02,399
qml to c plus plus and we only left the

00:02:00,000 --> 00:02:05,439
delegates to be written in kml

00:02:02,399 --> 00:02:08,800
everything else like api control logic

00:02:05,439 --> 00:02:10,640
event handling and so forth is done in

00:02:08,800 --> 00:02:12,800
close plus

00:02:10,640 --> 00:02:14,319
this reduces memory footprint gives an

00:02:12,800 --> 00:02:17,760
easier code flow

00:02:14,319 --> 00:02:19,360
and will simply execute faster

00:02:17,760 --> 00:02:21,200
we also use file selectors to help

00:02:19,360 --> 00:02:22,800
resolve the style which means that we

00:02:21,200 --> 00:02:24,959
kept off another layer of in direction

00:02:22,800 --> 00:02:27,440
compared to controls one

00:02:24,959 --> 00:02:28,720
and cute sex will further improve on the

00:02:27,440 --> 00:02:30,640
style selection

00:02:28,720 --> 00:02:34,239
logic so that more can be done during

00:02:30,640 --> 00:02:36,080
compile time instead of runtime

00:02:34,239 --> 00:02:37,280
but what has really been missing in

00:02:36,080 --> 00:02:40,480
composting so far

00:02:37,280 --> 00:02:42,400
uh is support for native styling

00:02:40,480 --> 00:02:44,239
uh control c was really written to solve

00:02:42,400 --> 00:02:46,800
the situation on embedded hardware

00:02:44,239 --> 00:02:48,160
and since we have widgets for desktop we

00:02:46,800 --> 00:02:50,080
have sort of accepted the fact that

00:02:48,160 --> 00:02:51,519
controls2 has been a bit behind in that

00:02:50,080 --> 00:02:53,440
area

00:02:51,519 --> 00:02:55,840
i mean in the real world this boils down

00:02:53,440 --> 00:02:59,599
to human available human resources

00:02:55,840 --> 00:03:01,440
and priorities and not like of goodwill

00:02:59,599 --> 00:03:02,879
but now that control strong controls one

00:03:01,440 --> 00:03:05,360
has been deprecated since

00:03:02,879 --> 00:03:06,959
uh cute flat well and will even be

00:03:05,360 --> 00:03:08,239
removed from the base installation with

00:03:06,959 --> 00:03:12,080
q6

00:03:08,239 --> 00:03:12,080
this is no longer really acceptable

00:03:15,360 --> 00:03:18,480
so what we have planned for future is to

00:03:17,599 --> 00:03:22,159
the major

00:03:18,480 --> 00:03:23,599
lift for using controls 2 on the desktop

00:03:22,159 --> 00:03:26,400
first of all we need to offer native

00:03:23,599 --> 00:03:28,560
styles on both macos and windows

00:03:26,400 --> 00:03:31,120
on linux the fusion cell has been

00:03:28,560 --> 00:03:32,720
available for a long time already

00:03:31,120 --> 00:03:34,720
and we know that usually so cute like to

00:03:32,720 --> 00:03:36,560
use c plus plus um

00:03:34,720 --> 00:03:37,840
so in an air filter we also plan to open

00:03:36,560 --> 00:03:39,440
up and make the api

00:03:37,840 --> 00:03:41,440
it's for kid quick and controls to

00:03:39,440 --> 00:03:42,720
public

00:03:41,440 --> 00:03:44,480
we'll make use of the new property

00:03:42,720 --> 00:03:46,080
system in q6 for creating bindings in

00:03:44,480 --> 00:03:48,959
sequel's bus as a part of

00:03:46,080 --> 00:03:49,840
this effort but how the api will end up

00:03:48,959 --> 00:03:52,560
look like is a bit

00:03:49,840 --> 00:03:55,200
early to say but it might mean being

00:03:52,560 --> 00:03:58,799
able to write controls application using

00:03:55,200 --> 00:04:00,080
c plus plus only or at least

00:03:58,799 --> 00:04:02,000
it will give you a proper api to

00:04:00,080 --> 00:04:03,760
interface with the controls from c plus

00:04:02,000 --> 00:04:05,599
plus

00:04:03,760 --> 00:04:07,760
in parallel to this we need to provide

00:04:05,599 --> 00:04:09,760
more desktop centric controls

00:04:07,760 --> 00:04:11,200
not only the ones that we have in

00:04:09,760 --> 00:04:14,000
widgets today

00:04:11,200 --> 00:04:14,879
like uh dock widgets or mdi areas and

00:04:14,000 --> 00:04:17,280
such

00:04:14,879 --> 00:04:20,880
but also native design patterns like you

00:04:17,280 --> 00:04:24,800
combine sign bar and toolbar on mac os

00:04:20,880 --> 00:04:24,800
or the ribbon on windows for example

00:04:24,880 --> 00:04:29,120
and we need native dialogues and menus

00:04:27,600 --> 00:04:29,919
we should do this by using the platform

00:04:29,120 --> 00:04:32,639
theme plugin

00:04:29,919 --> 00:04:34,639
like widgets do today which means that

00:04:32,639 --> 00:04:35,759
if a desktop already has a key platform

00:04:34,639 --> 00:04:37,759
team plugin

00:04:35,759 --> 00:04:40,960
written for widgets it should continue

00:04:37,759 --> 00:04:44,160
to work also for controls

00:04:40,960 --> 00:04:45,680
um so our first big goal is basically to

00:04:44,160 --> 00:04:47,440
let controls become a just as good

00:04:45,680 --> 00:04:50,000
alternative as widgets

00:04:47,440 --> 00:04:57,840
for doing desktop developments and

00:04:50,000 --> 00:04:59,919
hopefully even better with time

00:04:57,840 --> 00:05:01,840
uh but compared to widgets there are a

00:04:59,919 --> 00:05:04,320
lot of things missing in controls

00:05:01,840 --> 00:05:06,080
so i mean we have no illusions that this

00:05:04,320 --> 00:05:07,680
will be done in the day

00:05:06,080 --> 00:05:09,360
with the current staffing this will take

00:05:07,680 --> 00:05:11,120
some years

00:05:09,360 --> 00:05:12,880
but to kick things off for kid six we

00:05:11,120 --> 00:05:13,759
have started by porting the existing

00:05:12,880 --> 00:05:16,479
queue style to

00:05:13,759 --> 00:05:18,800
controls too i will talk a bit more

00:05:16,479 --> 00:05:20,400
about that in the next slides

00:05:18,800 --> 00:05:21,840
they also changed how the application

00:05:20,400 --> 00:05:23,520
style is resolved

00:05:21,840 --> 00:05:25,440
up to now an application would always

00:05:23,520 --> 00:05:26,639
need to specify which style to use

00:05:25,440 --> 00:05:29,520
otherwise you would get the default

00:05:26,639 --> 00:05:31,280
style there are various ways of setting

00:05:29,520 --> 00:05:32,720
the style from using command line

00:05:31,280 --> 00:05:36,479
options

00:05:32,720 --> 00:05:38,960
to using the c plus api but from now on

00:05:36,479 --> 00:05:40,080
if no style is specified we will ask the

00:05:38,960 --> 00:05:42,720
platform team

00:05:40,080 --> 00:05:44,639
which style to use in exactly the same

00:05:42,720 --> 00:05:46,240
fashion that we do with widgets

00:05:44,639 --> 00:05:48,479
so if you're on linux the default

00:05:46,240 --> 00:05:50,840
platform theme will return fusion

00:05:48,479 --> 00:05:52,479
and on windows it will be the windows

00:05:50,840 --> 00:05:53,919
style

00:05:52,479 --> 00:05:55,440
and because the default style will no

00:05:53,919 --> 00:05:57,120
longer be chosen by default with this

00:05:55,440 --> 00:06:01,120
change the default style has also been

00:05:57,120 --> 00:06:01,120
renamed to basic styling q6

00:06:01,520 --> 00:06:05,039
work has also been done for qb6 to let

00:06:03,759 --> 00:06:07,199
us resolve more of the styling

00:06:05,039 --> 00:06:08,720
dependencies during compile time

00:06:07,199 --> 00:06:10,560
for every style you now have the option

00:06:08,720 --> 00:06:12,880
to specify the fallback style when the

00:06:10,560 --> 00:06:14,720
style is built

00:06:12,880 --> 00:06:16,000
mac os style for example has the fusion

00:06:14,720 --> 00:06:18,000
style set as backup

00:06:16,000 --> 00:06:21,280
as fullbacks already and the fusion

00:06:18,000 --> 00:06:23,039
style has the basic stylus pullback

00:06:21,280 --> 00:06:24,560
this way every style has a dependency

00:06:23,039 --> 00:06:26,720
chain that is known already at

00:06:24,560 --> 00:06:35,840
compile time which basically means less

00:06:26,720 --> 00:06:35,840
liquid style assets during runtime

00:06:36,560 --> 00:06:41,199
um to get native styling to controls we

00:06:39,600 --> 00:06:42,880
use q star for drawing

00:06:41,199 --> 00:06:44,639
like several other projects has

00:06:42,880 --> 00:06:48,000
basically done before us even

00:06:44,639 --> 00:06:49,919
around project controls one but where we

00:06:48,000 --> 00:06:51,199
differ now is that instead of sharing q

00:06:49,919 --> 00:06:53,360
style with widgets

00:06:51,199 --> 00:06:55,039
we make an exclusive copy just for

00:06:53,360 --> 00:06:57,440
controls

00:06:55,039 --> 00:06:58,319
and this one might sound uh as some

00:06:57,440 --> 00:06:59,919
would say that

00:06:58,319 --> 00:07:01,520
using just one implementation of your

00:06:59,919 --> 00:07:03,919
style with eastern maintains burden

00:07:01,520 --> 00:07:06,880
between widgets and controls

00:07:03,919 --> 00:07:08,000
but the reason we do this is twofold

00:07:06,880 --> 00:07:10,479
first of all

00:07:08,000 --> 00:07:12,400
we don't want to break widgets and we

00:07:10,479 --> 00:07:14,560
cannot factor q style out of widgets

00:07:12,400 --> 00:07:16,240
without breaking the api

00:07:14,560 --> 00:07:17,680
not only has q style references to

00:07:16,240 --> 00:07:19,680
widgets in the public api

00:07:17,680 --> 00:07:22,479
but it also uses enums and constants

00:07:19,680 --> 00:07:24,479
directly from the widgets themselves

00:07:22,479 --> 00:07:25,520
so if it factored queue style out to for

00:07:24,479 --> 00:07:26,960
example kid gui

00:07:25,520 --> 00:07:28,720
we would break all the existing

00:07:26,960 --> 00:07:31,120
third-party styles out there

00:07:28,720 --> 00:07:33,039
and also risk regressions for our own

00:07:31,120 --> 00:07:34,800
internal styles

00:07:33,039 --> 00:07:36,240
and this would not be very welcome for

00:07:34,800 --> 00:07:39,680
users that value

00:07:36,240 --> 00:07:41,360
acute stability over time

00:07:39,680 --> 00:07:43,039
and the other reason for making copy is

00:07:41,360 --> 00:07:45,840
that we want the freedom to change the

00:07:43,039 --> 00:07:47,199
implementation wherever we see fit

00:07:45,840 --> 00:07:49,199
i mean there are many ways where we can

00:07:47,199 --> 00:07:51,280
optimize the queue style copy

00:07:49,199 --> 00:07:52,639
going forward to better fit the kit big

00:07:51,280 --> 00:07:54,960
scene graph and the chrome close to

00:07:52,639 --> 00:07:56,960
styling api

00:07:54,960 --> 00:07:58,400
and we want to be able to do so without

00:07:56,960 --> 00:08:02,160
being constrained or worried about

00:07:58,400 --> 00:08:02,160
keeping compatibility with widgets

00:08:02,560 --> 00:08:05,759
i would also like to stress that we

00:08:03,840 --> 00:08:08,160
don't necessarily want the native styles

00:08:05,759 --> 00:08:10,160
to look exactly like widgets

00:08:08,160 --> 00:08:12,080
in many cases we would for example use a

00:08:10,160 --> 00:08:14,080
hybrid approach where we use schema to

00:08:12,080 --> 00:08:16,000
add more animations or fading impacts on

00:08:14,080 --> 00:08:18,240
topokey style

00:08:16,000 --> 00:08:19,599
i mean what we really want is for the

00:08:18,240 --> 00:08:20,160
native style to look as native as

00:08:19,599 --> 00:08:27,840
possible

00:08:20,160 --> 00:08:27,840
and not necessarily look like widgets

00:08:28,960 --> 00:08:33,360
so let's take a little look behind the

00:08:31,280 --> 00:08:35,440
scenes at the implementation

00:08:33,360 --> 00:08:36,560
as said we have copied q style into the

00:08:35,440 --> 00:08:39,680
control surface story

00:08:36,560 --> 00:08:41,200
repository as you can see here on the

00:08:39,680 --> 00:08:42,800
right side

00:08:41,200 --> 00:08:44,800
this includes in this first version

00:08:42,800 --> 00:08:47,440
mostly the same hierarchy of classes and

00:08:44,800 --> 00:08:49,279
tools that we have for widgets

00:08:47,440 --> 00:08:50,959
but to avoid the name clash we have

00:08:49,279 --> 00:08:55,920
wrapped it all inside the namespace

00:08:50,959 --> 00:08:55,920
called cute click controls2 or qq c2

00:08:56,000 --> 00:08:59,760
on the left side of the slide we have a

00:08:58,000 --> 00:09:03,040
qmail control

00:08:59,760 --> 00:09:04,800
in this case a combo box all controls

00:09:03,040 --> 00:09:05,120
have a delegate property that takes care

00:09:04,800 --> 00:09:08,399
of

00:09:05,120 --> 00:09:10,320
rendering it and when a native style is

00:09:08,399 --> 00:09:13,600
used it'll get will be an instance of

00:09:10,320 --> 00:09:13,600
a key quick style item

00:09:14,000 --> 00:09:18,480
a style item is simply a subclass of uh

00:09:16,959 --> 00:09:21,040
keypad item

00:09:18,480 --> 00:09:22,640
and that door can draw any primitive

00:09:21,040 --> 00:09:25,120
from cue style onto a texture

00:09:22,640 --> 00:09:25,760
in the scene i mean it can be a combo

00:09:25,120 --> 00:09:28,720
box

00:09:25,760 --> 00:09:31,920
a button background slider handle or in

00:09:28,720 --> 00:09:31,920
this case a combo box

00:09:32,000 --> 00:09:36,000
so let's take a closer look at the style

00:09:34,480 --> 00:09:38,880
i can put a box in the middle here to

00:09:36,000 --> 00:09:40,880
see how animation is actually produced

00:09:38,880 --> 00:09:42,560
first it will get a call to calculate

00:09:40,880 --> 00:09:45,920
geometry

00:09:42,560 --> 00:09:47,600
from cubic star like them style

00:09:45,920 --> 00:09:49,040
in combo box will then use q style to

00:09:47,600 --> 00:09:51,519
character values such as

00:09:49,040 --> 00:09:54,000
the content margins padding and the

00:09:51,519 --> 00:09:56,160
implicit size of the control

00:09:54,000 --> 00:09:58,399
this in return will be used by quickbix

00:09:56,160 --> 00:10:00,560
style item up here

00:09:58,399 --> 00:10:01,839
to create a cue image with a keypainter

00:10:00,560 --> 00:10:06,079
and then call

00:10:01,839 --> 00:10:08,480
paint events paint event will draw the

00:10:06,079 --> 00:10:10,079
control using q style equal to our

00:10:08,480 --> 00:10:11,360
sounding widgets

00:10:10,079 --> 00:10:13,120
and when it's time for kick pick to

00:10:11,360 --> 00:10:14,000
render the combo box the image will be

00:10:13,120 --> 00:10:19,200
converted

00:10:14,000 --> 00:10:22,399
to texture and placed in the scene graph

00:10:19,200 --> 00:10:23,120
um the style item will also get a call

00:10:22,399 --> 00:10:26,800
to

00:10:23,120 --> 00:10:29,360
calculate geometry at startup

00:10:26,800 --> 00:10:32,079
um here we can set up all the necessary

00:10:29,360 --> 00:10:33,519
connections to equal combobox basically

00:10:32,079 --> 00:10:35,279
and this will be used to detect whenever

00:10:33,519 --> 00:10:37,120
something changes like if there's a

00:10:35,279 --> 00:10:38,560
mouse person like on the box

00:10:37,120 --> 00:10:41,440
and that will force the repaint

00:10:38,560 --> 00:10:43,440
basically of the texture

00:10:41,440 --> 00:10:45,120
reset of all this can be seen here at

00:10:43,440 --> 00:10:47,120
the bottom

00:10:45,120 --> 00:10:50,079
note that we only we don't draw the

00:10:47,120 --> 00:10:51,680
contents here we only go the background

00:10:50,079 --> 00:10:54,560
and this is a pattern that we use for

00:10:51,680 --> 00:10:56,399
all controls for several reasons

00:10:54,560 --> 00:10:58,640
uh first of all by not drawing the

00:10:56,399 --> 00:11:00,399
contents we can reuse the same texture

00:10:58,640 --> 00:11:02,000
for all combo boxes

00:11:00,399 --> 00:11:03,519
we just throw one small version of the

00:11:02,000 --> 00:11:04,880
background into what is called a nine

00:11:03,519 --> 00:11:07,279
patch image

00:11:04,880 --> 00:11:08,880
which can be scaled to any size and then

00:11:07,279 --> 00:11:09,519
we can reuse it for all controls at the

00:11:08,880 --> 00:11:13,040
same time

00:11:09,519 --> 00:11:15,120
in the application and secondly we want

00:11:13,040 --> 00:11:16,000
to avoid drawing text using q style and

00:11:15,120 --> 00:11:17,600
keep painter

00:11:16,000 --> 00:11:21,040
since we want all text in the camera

00:11:17,600 --> 00:11:23,279
application to be rendered the same way

00:11:21,040 --> 00:11:26,640
mixing those two can produce an

00:11:23,279 --> 00:11:26,640
inconsistent look basically

00:11:27,200 --> 00:11:30,399
to see how the contents are drawn

00:11:28,560 --> 00:11:31,440
instead we need to take a look at the

00:11:30,399 --> 00:11:34,000
combo box here

00:11:31,440 --> 00:11:34,000
at the left

00:11:37,680 --> 00:11:41,200
this is our qml part of a combo box

00:11:40,240 --> 00:11:44,560
looks like

00:11:41,200 --> 00:11:45,120
on the inside when you add a combo box

00:11:44,560 --> 00:11:47,519
to your

00:11:45,120 --> 00:11:49,279
ui from qml this is the component that

00:11:47,519 --> 00:11:51,440
will be picked up at a native style and

00:11:49,279 --> 00:11:54,480
instantiated

00:11:51,440 --> 00:11:55,120
the cryptic t.combo box on top here is

00:11:54,480 --> 00:11:57,680
the c

00:11:55,120 --> 00:11:59,440
plus base class that contains all the

00:11:57,680 --> 00:12:00,880
event handling and control logic that i

00:11:59,440 --> 00:12:01,839
briefly talked about in the previous

00:12:00,880 --> 00:12:05,680
slide

00:12:01,839 --> 00:12:08,079
which you don't need to worry about now

00:12:05,680 --> 00:12:09,440
what you should focus on are the

00:12:08,079 --> 00:12:10,880
delegates here

00:12:09,440 --> 00:12:14,240
and the common box has to them the

00:12:10,880 --> 00:12:16,160
content item and the background

00:12:14,240 --> 00:12:17,680
the background is here an instance of

00:12:16,160 --> 00:12:19,519
style item perma box

00:12:17,680 --> 00:12:21,839
the one i talked about in the previous

00:12:19,519 --> 00:12:24,240
slide

00:12:21,839 --> 00:12:26,240
the style item combo box is at the end

00:12:24,240 --> 00:12:29,040
of the day a normal kml item that

00:12:26,240 --> 00:12:30,560
happens to draw itself using q style

00:12:29,040 --> 00:12:32,160
and for the other they'll get the

00:12:30,560 --> 00:12:33,440
content item

00:12:32,160 --> 00:12:35,600
we just use the normal text field

00:12:33,440 --> 00:12:37,600
basically

00:12:35,600 --> 00:12:38,639
the implicit size of the content item

00:12:37,600 --> 00:12:40,720
here

00:12:38,639 --> 00:12:42,240
is provided as input to the start in

00:12:40,720 --> 00:12:46,240
combo box

00:12:42,240 --> 00:12:46,240
and it will use this information

00:12:47,279 --> 00:12:51,519
to calculate the implicit size of the

00:12:49,519 --> 00:12:52,720
background taking the content size into

00:12:51,519 --> 00:12:54,079
account

00:12:52,720 --> 00:12:55,760
it doesn't draw the contents but it

00:12:54,079 --> 00:12:57,360
needs to know the size to calculate the

00:12:55,760 --> 00:12:58,720
correct implicit size for the background

00:12:57,360 --> 00:13:00,800
as well

00:12:58,720 --> 00:13:02,560
and then we let the implicit size of the

00:13:00,800 --> 00:13:04,079
background also be the implicit size of

00:13:02,560 --> 00:13:05,440
the whole control

00:13:04,079 --> 00:13:07,360
and the result can be see here at the

00:13:05,440 --> 00:13:09,760
bottom

00:13:07,360 --> 00:13:11,040
um the slide has been converted a bit

00:13:09,760 --> 00:13:12,560
longer but you can see at least the

00:13:11,040 --> 00:13:14,480
control down here

00:13:12,560 --> 00:13:16,959
uh here we have a combo box with

00:13:14,480 --> 00:13:19,760
contents uh with a scaled up nine patch

00:13:16,959 --> 00:13:20,000
background texture behind it which looks

00:13:19,760 --> 00:13:22,880
like

00:13:20,000 --> 00:13:22,880
it should uh look

00:13:25,040 --> 00:13:29,600
uh and by respecting the split between

00:13:27,920 --> 00:13:31,279
the foreground and background

00:13:29,600 --> 00:13:33,200
the application is free to override any

00:13:31,279 --> 00:13:36,399
of the delegates and this goes through

00:13:33,200 --> 00:13:38,720
all styles not only for the at once

00:13:36,399 --> 00:13:39,680
in the application shown here we create

00:13:38,720 --> 00:13:42,959
a common box

00:13:39,680 --> 00:13:44,720
and assign in a custom content item

00:13:42,959 --> 00:13:46,000
with a green background which you can

00:13:44,720 --> 00:13:47,279
see here

00:13:46,000 --> 00:13:49,040
and this will basically override the

00:13:47,279 --> 00:13:50,959
default uh foreground that was set from

00:13:49,040 --> 00:13:53,040
the previous slide

00:13:50,959 --> 00:13:54,399
uh in general we do recommend all that

00:13:53,040 --> 00:13:56,399
you either set both a custom

00:13:54,399 --> 00:13:58,079
foreground and a custom background or

00:13:56,399 --> 00:13:59,360
none of them otherwise you'll risk an

00:13:58,079 --> 00:14:00,800
inconsistent look if you're app is

00:13:59,360 --> 00:14:03,839
supposed to run on top of

00:14:00,800 --> 00:14:03,839
different platform styles

00:14:08,800 --> 00:14:12,639
as you might have noticed we're not

00:14:10,720 --> 00:14:15,040
coping the fusion style

00:14:12,639 --> 00:14:16,720
from widgets controls2 already has

00:14:15,040 --> 00:14:18,959
sufficient style which is uh which is

00:14:16,720 --> 00:14:20,800
written in kml

00:14:18,959 --> 00:14:22,560
and we don't think cue style is the best

00:14:20,800 --> 00:14:23,760
way to create the style for controls2 in

00:14:22,560 --> 00:14:26,560
general

00:14:23,760 --> 00:14:28,160
it already makes only makes sense um

00:14:26,560 --> 00:14:30,240
when you need to use a native platform

00:14:28,160 --> 00:14:32,079
api to draw native controls and

00:14:30,240 --> 00:14:34,800
primitives onto images

00:14:32,079 --> 00:14:36,720
at runtime basically on mac codes for

00:14:34,800 --> 00:14:39,680
example we use app kit to draw in a

00:14:36,720 --> 00:14:42,480
celsium and is used to key images

00:14:39,680 --> 00:14:43,920
if you don't use any native apis you're

00:14:42,480 --> 00:14:45,120
actually better off drawing the images

00:14:43,920 --> 00:14:47,600
by other means

00:14:45,120 --> 00:14:48,800
or using email directly like the fusion

00:14:47,600 --> 00:14:51,360
style

00:14:48,800 --> 00:14:51,360
in compose

00:14:53,360 --> 00:14:56,639
and that actually brings me to an

00:14:54,560 --> 00:14:58,240
important point i mean we don't want to

00:14:56,639 --> 00:15:00,800
introduce a second api

00:14:58,240 --> 00:15:03,440
for styling and controls it already has

00:15:00,800 --> 00:15:04,800
a great styling api form before

00:15:03,440 --> 00:15:06,959
and we don't want to support and

00:15:04,800 --> 00:15:08,880
maintain a second styling api

00:15:06,959 --> 00:15:10,800
so for that reason the copio q style

00:15:08,880 --> 00:15:13,040
would be a private implementation detail

00:15:10,800 --> 00:15:16,720
in the controls repo another public

00:15:13,040 --> 00:15:16,720
styling api for everyone to use

00:15:20,399 --> 00:15:26,240
okay so what about widgets there might

00:15:23,360 --> 00:15:27,519
be somebody asking about that

00:15:26,240 --> 00:15:29,839
what was it what will this mean for

00:15:27,519 --> 00:15:32,320
widgets and the short answer it's

00:15:29,839 --> 00:15:34,079
absolutely nothing i mean wedges will

00:15:32,320 --> 00:15:36,240
continue to be in maintenance mode as

00:15:34,079 --> 00:15:38,160
before nothing will change

00:15:36,240 --> 00:15:39,440
uh hopefully one day composers be in

00:15:38,160 --> 00:15:41,199
such a good shape

00:15:39,440 --> 00:15:42,480
that you will prefer using it over the

00:15:41,199 --> 00:15:44,959
widgets for your new

00:15:42,480 --> 00:15:46,240
desktop projects but that will be up to

00:15:44,959 --> 00:15:49,920
you

00:15:46,240 --> 00:15:49,920
we're not enforcing this on anyone

00:15:51,199 --> 00:15:54,560
all right so in the end i'll just going

00:15:53,680 --> 00:15:56,959
to show

00:15:54,560 --> 00:15:58,720
how uh application controls the

00:15:56,959 --> 00:16:02,320
application will look with the mac stop

00:15:58,720 --> 00:16:09,839
where we are now in q6 also see if i can

00:16:02,320 --> 00:16:09,839
share my screen

00:16:15,040 --> 00:16:21,040
yeah cool all right

00:16:18,399 --> 00:16:22,800
so this is a normal control c

00:16:21,040 --> 00:16:23,759
application with the tab bar and tab

00:16:22,800 --> 00:16:27,199
button

00:16:23,759 --> 00:16:28,959
and a lot of controls so i can start

00:16:27,199 --> 00:16:30,800
this up with the fusion first

00:16:28,959 --> 00:16:32,800
the fusion style which is already in

00:16:30,800 --> 00:16:36,240
controls too

00:16:32,800 --> 00:16:37,839
here it is nothing spectacular test

00:16:36,240 --> 00:16:41,199
buttons

00:16:37,839 --> 00:16:45,680
check boxes radio buttons

00:16:41,199 --> 00:16:49,199
in boxes text fields text areas

00:16:45,680 --> 00:16:52,240
all boxes and so forth

00:16:49,199 --> 00:16:57,199
and now i can also start this up with

00:16:52,240 --> 00:16:57,199
mac os file yes

00:17:02,720 --> 00:17:06,079
and here we go here we have the mac

00:17:04,160 --> 00:17:10,079
style

00:17:06,079 --> 00:17:10,079
buttons check boxes

00:17:10,319 --> 00:17:13,120
radio buttons

00:17:15,760 --> 00:17:19,600
i'm not sure if this come if you can

00:17:18,000 --> 00:17:21,439
actually see this over the

00:17:19,600 --> 00:17:22,959
video link but here you can see we're

00:17:21,439 --> 00:17:23,360
also fading the scroll bars which you

00:17:22,959 --> 00:17:25,760
don't

00:17:23,360 --> 00:17:26,480
do for widgets this is a pretty easy

00:17:25,760 --> 00:17:29,200
thing to do

00:17:26,480 --> 00:17:31,120
in qml right so here we halfway draw the

00:17:29,200 --> 00:17:33,760
slider or the scroll bar

00:17:31,120 --> 00:17:34,320
with q style and then we do some extra

00:17:33,760 --> 00:17:36,960
top

00:17:34,320 --> 00:17:39,280
logic on top from kml to make it fade in

00:17:36,960 --> 00:17:39,280
and out

00:17:39,679 --> 00:17:42,880
here we have the combo box

00:17:42,960 --> 00:17:46,000
and you see there's still some drawing

00:17:45,280 --> 00:17:47,760
artifacts

00:17:46,000 --> 00:17:49,280
with the respective focus rex we are

00:17:47,760 --> 00:17:51,520
going to work on those before the

00:17:49,280 --> 00:18:00,160
final release so this is a very badass

00:17:51,520 --> 00:18:03,679
take right now

00:18:00,160 --> 00:18:05,280
all right this is all i got

00:18:03,679 --> 00:18:07,520
i guess i have some time for questions

00:18:05,280 --> 00:18:07,520
too

00:18:11,919 --> 00:18:16,320
yeah let's take it to q a then if you

00:18:14,559 --> 00:18:17,120
click the shared notes on the sidebar

00:18:16,320 --> 00:18:19,039
you will see

00:18:17,120 --> 00:18:20,160
quite a few questions get up for you

00:18:19,039 --> 00:18:21,520
please um

00:18:20,160 --> 00:18:23,360
answer any of them in the order you

00:18:21,520 --> 00:18:28,480
design

00:18:23,360 --> 00:18:30,559
oh okay let's start from the top

00:18:28,480 --> 00:18:32,480
okay here on plasma we have our own

00:18:30,559 --> 00:18:34,160
platform style what can we do for that

00:18:32,480 --> 00:18:36,080
we would need to be able to implement

00:18:34,160 --> 00:18:38,080
styles for his q style

00:18:36,080 --> 00:18:40,320
q style fork yeah that and that's what

00:18:38,080 --> 00:18:41,039
you have to do anyway i mean even if we

00:18:40,320 --> 00:18:43,280
try to share

00:18:41,039 --> 00:18:45,520
two styles with widgets and you have a

00:18:43,280 --> 00:18:47,760
third party style that work with widgets

00:18:45,520 --> 00:18:49,840
i mean in order for that to work there

00:18:47,760 --> 00:18:50,880
cannot be any references to keywidget

00:18:49,840 --> 00:18:52,000
inside that style

00:18:50,880 --> 00:18:54,559
otherwise you have to link your

00:18:52,000 --> 00:18:55,919
application to widgets like one

00:18:54,559 --> 00:18:57,440
and we are not going to go down that

00:18:55,919 --> 00:18:59,120
route we don't want to compost your

00:18:57,440 --> 00:19:02,160
application

00:18:59,120 --> 00:19:04,480
we need to link the widgets so we had to

00:19:02,160 --> 00:19:07,280
anyway refactor that style and remove

00:19:04,480 --> 00:19:08,880
all the notions of widgets

00:19:07,280 --> 00:19:10,799
and we don't think that is the right way

00:19:08,880 --> 00:19:12,080
to go for styling controls application

00:19:10,799 --> 00:19:12,960
during the first place we wanted to

00:19:12,080 --> 00:19:14,559
write the qml

00:19:12,960 --> 00:19:16,640
using qml to write the style that's what

00:19:14,559 --> 00:19:18,640
the gmail is great for

00:19:16,640 --> 00:19:20,080
so i mean it's a pity i would love that

00:19:18,640 --> 00:19:21,039
too that you can take any third party

00:19:20,080 --> 00:19:23,679
style and just

00:19:21,039 --> 00:19:24,880
make it work for controls as well i

00:19:23,679 --> 00:19:28,160
thought it's not

00:19:24,880 --> 00:19:29,919
going to work with this project

00:19:28,160 --> 00:19:31,520
okay if i understood this question

00:19:29,919 --> 00:19:33,760
correctly um

00:19:31,520 --> 00:19:35,440
i jumped the question to you why cue

00:19:33,760 --> 00:19:37,280
painter aren't you throwing away all i

00:19:35,440 --> 00:19:38,559
want to just oh gpu accelerated

00:19:37,280 --> 00:19:41,520
rendering yeah

00:19:38,559 --> 00:19:42,880
i mean the keyword no queue image is

00:19:41,520 --> 00:19:45,280
only a temporary step

00:19:42,880 --> 00:19:46,640
i mean we create a q image and we put

00:19:45,280 --> 00:19:48,400
the q painter on it

00:19:46,640 --> 00:19:50,240
because that is the api that q style

00:19:48,400 --> 00:19:51,600
understands it takes the q painter and

00:19:50,240 --> 00:19:53,919
it draws something

00:19:51,600 --> 00:19:55,520
somewhere i mean this can probably be

00:19:53,919 --> 00:19:57,520
optimized

00:19:55,520 --> 00:19:59,360
away later which is why i said we need

00:19:57,520 --> 00:20:00,640
to have the freedom to optimize this

00:19:59,360 --> 00:20:03,039
even further

00:20:00,640 --> 00:20:03,760
but currently we just draw the control

00:20:03,039 --> 00:20:07,120
onto

00:20:03,760 --> 00:20:09,039
a q image once and then we convert it to

00:20:07,120 --> 00:20:10,559
a nine patched texture node

00:20:09,039 --> 00:20:12,880
in the scene graph and from there on

00:20:10,559 --> 00:20:15,440
it's of course accelerated

00:20:12,880 --> 00:20:15,440
hopefully

00:20:16,720 --> 00:20:21,360
all right question three are there any

00:20:19,360 --> 00:20:24,080
plans to make q2 controls to use

00:20:21,360 --> 00:20:25,440
proper windows yeah yeah i mean i said

00:20:24,080 --> 00:20:27,520
that on slide three or four

00:20:25,440 --> 00:20:29,120
i mean that's uh that's some of the

00:20:27,520 --> 00:20:29,679
things we need to look at uh very

00:20:29,120 --> 00:20:31,919
shortly

00:20:29,679 --> 00:20:33,919
actually and we need to use the platform

00:20:31,919 --> 00:20:35,840
theme plugin to create native dialogues

00:20:33,919 --> 00:20:38,320
and native menus

00:20:35,840 --> 00:20:39,120
and i don't know kd in and out i guess

00:20:38,320 --> 00:20:41,120
you have your own

00:20:39,120 --> 00:20:44,799
platform styling plugin that provides a

00:20:41,120 --> 00:20:46,880
native file log and native style

00:20:44,799 --> 00:20:48,400
style name and so forth and so it will

00:20:46,880 --> 00:20:52,159
be good if you can pick that up that

00:20:48,400 --> 00:20:55,039
information and we use it also controls

00:20:52,159 --> 00:20:56,400
yeah exactly so that is the motivation

00:20:55,039 --> 00:20:58,960
right we want to

00:20:56,400 --> 00:21:00,480
look we ask qpa basically the same

00:20:58,960 --> 00:21:02,559
question like widgets do

00:21:00,480 --> 00:21:04,000
i mean which style does this platform

00:21:02,559 --> 00:21:04,880
prefer it's the fusion style it's

00:21:04,000 --> 00:21:08,080
another style

00:21:04,880 --> 00:21:09,919
i will respect that whatever it returns

00:21:08,080 --> 00:21:11,200
and we will ask ask it whenever we need

00:21:09,919 --> 00:21:13,840
to create a native dialogue

00:21:11,200 --> 00:21:17,840
and orientated menus or anything that

00:21:13,840 --> 00:21:17,840
the team can provide

00:21:21,120 --> 00:21:25,760
there is some text typing here at the

00:21:22,960 --> 00:21:25,760
same time so

00:21:29,360 --> 00:21:34,080
this i mean this uh i'm not sure which

00:21:32,240 --> 00:21:37,520
part you're asking now the qpa stuff

00:21:34,080 --> 00:21:38,559
uh it's not it's semi-public it's not

00:21:37,520 --> 00:21:40,320
public but

00:21:38,559 --> 00:21:42,080
if you're talking about the queue style

00:21:40,320 --> 00:21:43,440
copy the fork basically that we do in

00:21:42,080 --> 00:21:45,919
control so that will not be

00:21:43,440 --> 00:21:46,720
public api now because as i said we

00:21:45,919 --> 00:21:49,039
don't want to

00:21:46,720 --> 00:21:50,320
uh introduce the second styling and

00:21:49,039 --> 00:21:51,440
going controls this is not the

00:21:50,320 --> 00:21:53,760
motivation for us

00:21:51,440 --> 00:21:55,440
we just want to provide native styling

00:21:53,760 --> 00:21:57,039
and the low hanging fruit for us how to

00:21:55,440 --> 00:21:58,080
do that is to just take what we got i

00:21:57,039 --> 00:22:00,640
think you saw already

00:21:58,080 --> 00:22:01,679
and use that as a as a drawing tool

00:22:00,640 --> 00:22:04,080
basically

00:22:01,679 --> 00:22:05,039
so it's an implementation detail and we

00:22:04,080 --> 00:22:07,520
we want to

00:22:05,039 --> 00:22:08,080
i mean cue style is inefficient in many

00:22:07,520 --> 00:22:10,960
ways and

00:22:08,080 --> 00:22:12,880
it draws the background because the

00:22:10,960 --> 00:22:15,280
foreground it draws all the primitives

00:22:12,880 --> 00:22:16,960
trim primitives like frames and styling

00:22:15,280 --> 00:22:19,919
rights and all those

00:22:16,960 --> 00:22:20,240
separately and for many things like in

00:22:19,919 --> 00:22:22,640
in

00:22:20,240 --> 00:22:24,240
on the mac style we can draw the whole

00:22:22,640 --> 00:22:27,520
button in one go

00:22:24,240 --> 00:22:29,200
on on the native platform so q style is

00:22:27,520 --> 00:22:31,200
not very optimized for how we want to

00:22:29,200 --> 00:22:32,640
things to work in controls and for that

00:22:31,200 --> 00:22:34,320
reason we need to have this freedom

00:22:32,640 --> 00:22:36,960
going forward now to

00:22:34,320 --> 00:22:39,039
to basically uh chop out everything that

00:22:36,960 --> 00:22:41,280
is slowing us down and

00:22:39,039 --> 00:22:42,240
things that we want to do differently so

00:22:41,280 --> 00:22:46,320
this we

00:22:42,240 --> 00:22:46,320
are not going to make this public now

00:22:47,280 --> 00:22:54,799
okay um i just i think i jumped to

00:22:49,840 --> 00:22:56,320
question four now

00:22:54,799 --> 00:22:58,320
how are we supposed to implement our own

00:22:56,320 --> 00:23:00,799
styles like breeze which is currently a

00:22:58,320 --> 00:23:02,400
q style when it's private to

00:23:00,799 --> 00:23:03,919
i mean if you want to implement the

00:23:02,400 --> 00:23:06,400
style for control 2 you need to use the

00:23:03,919 --> 00:23:08,559
compose 2 styling api basically so

00:23:06,400 --> 00:23:09,840
if you only have breeze for widgets

00:23:08,559 --> 00:23:11,600
right now

00:23:09,840 --> 00:23:13,120
then you would need to implement breeze

00:23:11,600 --> 00:23:16,320
in uh

00:23:13,120 --> 00:23:17,440
using the qml styling api this is not

00:23:16,320 --> 00:23:20,080
the answer for

00:23:17,440 --> 00:23:20,080
for that part

00:23:21,200 --> 00:23:25,120
uh what is the plan for linux that's

00:23:23,200 --> 00:23:28,320
question five

00:23:25,120 --> 00:23:28,960
um i mean when we started out this

00:23:28,320 --> 00:23:30,720
project

00:23:28,960 --> 00:23:32,559
uh we was all we were also thinking

00:23:30,720 --> 00:23:36,080
about porting the fusion stuff or

00:23:32,559 --> 00:23:38,000
for from q uh from q style

00:23:36,080 --> 00:23:39,440
on par with the how we would port the

00:23:38,000 --> 00:23:40,799
mac style and windows but then we saw

00:23:39,440 --> 00:23:41,520
that they already have the fusion style

00:23:40,799 --> 00:23:43,840
and fusion

00:23:41,520 --> 00:23:45,440
in controls to actually look better so

00:23:43,840 --> 00:23:48,080
the fusion style is currently

00:23:45,440 --> 00:23:51,679
our answer to desktop styling for

00:23:48,080 --> 00:23:54,480
widgets also for widgets

00:23:51,679 --> 00:23:56,799
and of course we will prioritize linux

00:23:54,480 --> 00:24:01,120
equal to windows and mac os

00:23:56,799 --> 00:24:03,039
so okay question 6 will text controls

00:24:01,120 --> 00:24:05,840
have context menu

00:24:03,039 --> 00:24:07,279
like q text editors i mean this is there

00:24:05,840 --> 00:24:10,000
are many controls

00:24:07,279 --> 00:24:12,159
um missing in controls too we have in

00:24:10,000 --> 00:24:13,919
widgets today and

00:24:12,159 --> 00:24:16,960
likewise there are many controls in

00:24:13,919 --> 00:24:19,520
converse 2 today that we missing widgets

00:24:16,960 --> 00:24:20,640
like a range page slider for example and

00:24:19,520 --> 00:24:22,640
then there's a lot of controls that are

00:24:20,640 --> 00:24:26,159
missing in general from native platforms

00:24:22,640 --> 00:24:29,679
like a search search field uh

00:24:26,159 --> 00:24:31,600
uh yeah and many others that i'm popping

00:24:29,679 --> 00:24:33,919
to my right now

00:24:31,600 --> 00:24:35,360
so this is things we need to work in for

00:24:33,919 --> 00:24:36,799
the future but we have a few people this

00:24:35,360 --> 00:24:40,320
will take some time but

00:24:36,799 --> 00:24:40,320
surely this is what we are going to work

00:24:44,840 --> 00:24:47,840

YouTube URL: https://www.youtube.com/watch?v=39w-CjCxcVk


