Title: Akademy 2020 - Carson Black - API Design and QML
Publication date: 2020-11-24
Playlist: Akademy 2020
Description: 
	A presentation over QML API design sharing best practices to follow and things to avoid when creating QML APIs as well as a more general API-first design process.

Covers idioms to rely on when designing and implementing QML APIs, names some antipatterns to avoid when creating them, and shares examples to help demonstrate idioms of API design in practice.
Captions: 
	00:00:01,130 --> 00:00:08,610
[Music]

00:00:10,000 --> 00:00:13,200
so

00:00:10,800 --> 00:00:15,679
let's see i'll be giving a talk on api

00:00:13,200 --> 00:00:18,160
design and commerce there

00:00:15,679 --> 00:00:18,160
let's see

00:00:18,800 --> 00:00:22,240
in this presentation i'm going to go

00:00:20,320 --> 00:00:25,519
over what i consider

00:00:22,240 --> 00:00:29,039
to be the main types of qml apis the

00:00:25,519 --> 00:00:30,000
virtual component apis the non-visual

00:00:29,039 --> 00:00:32,800
apis that you can

00:00:30,000 --> 00:00:33,360
uh build with qml as well as the general

00:00:32,800 --> 00:00:36,960
api

00:00:33,360 --> 00:00:38,960
guidelines for a qml and

00:00:36,960 --> 00:00:40,800
the the design process that i personally

00:00:38,960 --> 00:00:42,239
use and an example let me use in that

00:00:40,800 --> 00:00:45,840
design process to

00:00:42,239 --> 00:00:45,840
build an api so

00:00:48,320 --> 00:00:50,719
hold on

00:00:57,120 --> 00:00:59,840
let's see

00:01:01,199 --> 00:01:16,880
let's see uh hold on a second

00:01:13,360 --> 00:01:19,920
okay so let's see uh let's see if you're

00:01:16,880 --> 00:01:23,040
watching this presentation i would uh

00:01:19,920 --> 00:01:24,960
hope that you already know uh what what

00:01:23,040 --> 00:01:27,280
qml is like so

00:01:24,960 --> 00:01:29,360
you have the basic uh declarative syntax

00:01:27,280 --> 00:01:31,840
where you uh

00:01:29,360 --> 00:01:32,960
specify an object and you specify its

00:01:31,840 --> 00:01:36,000
properties uh

00:01:32,960 --> 00:01:38,720
and its and functions on it as well as

00:01:36,000 --> 00:01:42,479
the signals to react to other things

00:01:38,720 --> 00:01:44,880
so let's see like uml is generally like

00:01:42,479 --> 00:01:46,960
about the exchange of data between uh

00:01:44,880 --> 00:01:47,920
the declarative qml site and the

00:01:46,960 --> 00:01:50,479
imperative

00:01:47,920 --> 00:01:52,840
c plus plus sign or if you're using

00:01:50,479 --> 00:01:55,680
another language like a python or

00:01:52,840 --> 00:01:57,280
go your

00:01:55,680 --> 00:01:59,520
imperative side of the code can also be

00:01:57,280 --> 00:02:01,759
built with that so

00:01:59,520 --> 00:02:04,640
i generally consider there to be a two

00:02:01,759 --> 00:02:06,560
main types of qml apis uh

00:02:04,640 --> 00:02:08,800
let's see the first is what i would like

00:02:06,560 --> 00:02:10,959
to determine elements which are

00:02:08,800 --> 00:02:13,200
the visual components that you can see

00:02:10,959 --> 00:02:15,360
on qd quick applications

00:02:13,200 --> 00:02:17,840
and then let's see there is also what i

00:02:15,360 --> 00:02:19,920
would like to tell about processors or

00:02:17,840 --> 00:02:21,840
utility data processing components or

00:02:19,920 --> 00:02:26,080
anything else that doesn't uh

00:02:21,840 --> 00:02:26,080
show anything visible on the screen so

00:02:28,000 --> 00:02:37,840
let's see how in a second

00:02:48,840 --> 00:02:53,040
okay

00:02:50,560 --> 00:02:53,040
let's see

00:02:55,280 --> 00:02:58,560
let's see so there are generally are two

00:02:57,599 --> 00:03:01,440
main types of uh

00:02:58,560 --> 00:03:03,200
visual components so let's see the first

00:03:01,440 --> 00:03:04,319
type is what i would like to call it

00:03:03,200 --> 00:03:07,440
leaves or

00:03:04,319 --> 00:03:10,239
these are generally the unknowns and the

00:03:07,440 --> 00:03:11,680
and the what and the tree of items in

00:03:10,239 --> 00:03:13,599
your tml programs

00:03:11,680 --> 00:03:15,360
you generally don't put a other element

00:03:13,599 --> 00:03:17,680
inside these elements

00:03:15,360 --> 00:03:19,599
these are your controls like buttons

00:03:17,680 --> 00:03:22,800
check boxes and etc

00:03:19,599 --> 00:03:25,519
let's see you also have the

00:03:22,800 --> 00:03:26,720
branches or components that are

00:03:25,519 --> 00:03:29,599
generally used for

00:03:26,720 --> 00:03:30,560
putting other components in such as the

00:03:29,599 --> 00:03:33,440
layouts

00:03:30,560 --> 00:03:35,360
and and other miscellaneous components

00:03:33,440 --> 00:03:37,599
like the kirigami page pool

00:03:35,360 --> 00:03:37,599
and

00:03:41,280 --> 00:03:45,840
let's see so first i'll cover some

00:03:43,920 --> 00:03:49,120
specific considerations for

00:03:45,840 --> 00:03:51,760
designing the leaves like since the

00:03:49,120 --> 00:03:53,760
leafs and your public qml apis are

00:03:51,760 --> 00:03:56,159
most likely going to be a controls let's

00:03:53,760 --> 00:03:58,159
see like it's generally a good practice

00:03:56,159 --> 00:04:00,560
to either inherit from the

00:03:58,159 --> 00:04:02,799
control type and qt quick components too

00:04:00,560 --> 00:04:04,560
or abstract button type if your element

00:04:02,799 --> 00:04:08,400
is for clicking

00:04:04,560 --> 00:04:08,400
so let's see

00:04:11,519 --> 00:04:14,640
let's see uh using the controls expect

00:04:13,680 --> 00:04:16,639
that uh

00:04:14,640 --> 00:04:18,639
controls should have appropriate sizing

00:04:16,639 --> 00:04:20,639
set automatically based on the

00:04:18,639 --> 00:04:21,680
input of the properties that you use in

00:04:20,639 --> 00:04:24,639
the

00:04:21,680 --> 00:04:24,639
api so

00:04:25,759 --> 00:04:29,440
let's see like sizing is generally

00:04:27,680 --> 00:04:32,560
exposed to the implicit and

00:04:29,440 --> 00:04:34,320
width and height properties but like

00:04:32,560 --> 00:04:36,960
like what you do not want to do when

00:04:34,320 --> 00:04:37,759
creating a digital control is exposed by

00:04:36,960 --> 00:04:40,639
sudo

00:04:37,759 --> 00:04:44,080
well with and height properties and the

00:04:40,639 --> 00:04:44,080
layouts often change these

00:04:48,160 --> 00:04:52,080
let's see as the width and height are

00:04:51,120 --> 00:04:54,880
often changed by

00:04:52,080 --> 00:04:56,800
external layouts let's see the the

00:04:54,880 --> 00:04:58,240
content and its padding should dictate

00:04:56,800 --> 00:04:59,199
the implicit width and height of the

00:04:58,240 --> 00:05:01,360
control

00:04:59,199 --> 00:05:03,280
like in 99 percent of cases the

00:05:01,360 --> 00:05:05,280
background of control should be uh

00:05:03,280 --> 00:05:07,680
subservient to its site and shouldn't

00:05:05,280 --> 00:05:11,840
really affect the size of the control

00:05:07,680 --> 00:05:13,680
let's see let's see your control should

00:05:11,840 --> 00:05:15,600
be able to handle whatever developer

00:05:13,680 --> 00:05:18,240
throws at it without looking broken

00:05:15,600 --> 00:05:19,199
even if even if it does look a little

00:05:18,240 --> 00:05:21,759
bit weird

00:05:19,199 --> 00:05:23,440
you should also be mindful of options

00:05:21,759 --> 00:05:25,120
that inheriting from another type ring

00:05:23,440 --> 00:05:27,600
to the public api

00:05:25,120 --> 00:05:29,120
for example if you inherit from the

00:05:27,600 --> 00:05:31,520
abstract button type you

00:05:29,120 --> 00:05:33,039
your control sheet will handle all the

00:05:31,520 --> 00:05:36,560
clicking and the checkable

00:05:33,039 --> 00:05:39,840
types of the button let's see

00:05:36,560 --> 00:05:39,840
and then

00:05:40,960 --> 00:05:44,560
on the other side of things you have

00:05:42,639 --> 00:05:47,600
what i what i call that

00:05:44,560 --> 00:05:49,680
branch control so these are generally

00:05:47,600 --> 00:05:51,199
apis that are used for managing other

00:05:49,680 --> 00:05:53,280
components like the

00:05:51,199 --> 00:05:56,240
layout such as the column layout which

00:05:53,280 --> 00:05:58,000
uh arranges items in the column or

00:05:56,240 --> 00:05:59,840
components that manage construction and

00:05:58,000 --> 00:06:02,000
destruction of other components

00:05:59,840 --> 00:06:03,840
like repeaters or the kirigami page

00:06:02,000 --> 00:06:06,479
childer

00:06:03,840 --> 00:06:07,360
let's see branch components can also

00:06:06,479 --> 00:06:09,440
make use of

00:06:07,360 --> 00:06:11,360
attached properties or exposing

00:06:09,440 --> 00:06:14,800
conditional apis like

00:06:11,360 --> 00:06:17,360
for example uh layouts

00:06:14,800 --> 00:06:19,039
use the layout attach property to expose

00:06:17,360 --> 00:06:20,880
stuff like a preferred height and width

00:06:19,039 --> 00:06:22,960
as well as whether you want the fill

00:06:20,880 --> 00:06:25,440
height or width or not

00:06:22,960 --> 00:06:25,440
let's see

00:06:26,240 --> 00:06:31,199
for layouts it's expected to set a

00:06:28,880 --> 00:06:33,840
sensible default property so

00:06:31,199 --> 00:06:35,600
that the user of your api can simply put

00:06:33,840 --> 00:06:38,080
the items inside the parent item

00:06:35,600 --> 00:06:39,759
and in their program source code instead

00:06:38,080 --> 00:06:42,319
of need to explicitly

00:06:39,759 --> 00:06:43,039
specify a channel property let's see

00:06:42,319 --> 00:06:45,600
like

00:06:43,039 --> 00:06:47,680
if you're building a layout and uh mail

00:06:45,600 --> 00:06:48,400
has a special role such as the header or

00:06:47,680 --> 00:06:50,160
footer

00:06:48,400 --> 00:06:52,240
you should generally expose these as

00:06:50,160 --> 00:06:56,560
their own properties

00:06:52,240 --> 00:06:58,720
let's see for for uh

00:06:56,560 --> 00:07:00,479
let's see uh for specific purpose apis

00:06:58,720 --> 00:07:02,800
where you're building both the

00:07:00,479 --> 00:07:04,240
components and uh where you're building

00:07:02,800 --> 00:07:06,080
both apparent components and the

00:07:04,240 --> 00:07:08,000
components that go inside them

00:07:06,080 --> 00:07:10,080
you should generally be you should

00:07:08,000 --> 00:07:11,840
generally take care to make sure that

00:07:10,080 --> 00:07:13,440
these components look like they are way

00:07:11,840 --> 00:07:16,000
to go together

00:07:13,440 --> 00:07:17,759
let's see like generally this means like

00:07:16,000 --> 00:07:20,800
these things should be named similarly

00:07:17,759 --> 00:07:22,479
and let's see and things that look

00:07:20,800 --> 00:07:24,400
and things that affect each other should

00:07:22,479 --> 00:07:26,479
look like they affect each other

00:07:24,400 --> 00:07:28,880
let's see you can also use attached

00:07:26,479 --> 00:07:30,720
properties to

00:07:28,880 --> 00:07:33,680
communicate information between the

00:07:30,720 --> 00:07:36,080
children items and the parent items

00:07:33,680 --> 00:07:38,400
let's see and that's all i have to say

00:07:36,080 --> 00:07:39,680
about the digital apis but there's also

00:07:38,400 --> 00:07:42,880
a lot more

00:07:39,680 --> 00:07:45,840
besides the visual apis in the qml world

00:07:42,880 --> 00:07:45,840
let's see

00:07:46,560 --> 00:07:49,360
hold on a second

00:07:53,360 --> 00:07:57,599
let's see on the other side on the other

00:07:55,759 --> 00:07:58,000
side of the apis that you can build with

00:07:57,599 --> 00:08:00,479
chemo

00:07:58,000 --> 00:08:01,520
or the non-visual ones let's see like

00:08:00,479 --> 00:08:03,520
for example this

00:08:01,520 --> 00:08:05,120
is the qbs build system on this line

00:08:03,520 --> 00:08:07,039
here let's see like

00:08:05,120 --> 00:08:08,720
when you're building a non-visual api

00:08:07,039 --> 00:08:10,160
it's generally extremely important to

00:08:08,720 --> 00:08:11,680
know your target audience

00:08:10,160 --> 00:08:15,680
more so than when they're building like

00:08:11,680 --> 00:08:16,800
a api with visual components or qt quick

00:08:15,680 --> 00:08:20,160
so

00:08:16,800 --> 00:08:23,680
let's see like like i like

00:08:20,160 --> 00:08:25,599
talking about qbs like qbs like

00:08:23,680 --> 00:08:27,120
while having a purely declarative build

00:08:25,599 --> 00:08:30,080
system would be

00:08:27,120 --> 00:08:30,639
nice it's pretty impractical for real

00:08:30,080 --> 00:08:33,680
world

00:08:30,639 --> 00:08:34,959
usage like this knowledge of the target

00:08:33,680 --> 00:08:37,680
audience is why

00:08:34,959 --> 00:08:38,640
qbs abandons the the qbs build system

00:08:37,680 --> 00:08:40,640
abandons the

00:08:38,640 --> 00:08:43,599
purely declarative site of qml and gives

00:08:40,640 --> 00:08:46,640
the javascript engine a lot more tools

00:08:43,599 --> 00:08:48,880
than the qml engine and qt quick does

00:08:46,640 --> 00:08:50,240
such as exposing the required segment

00:08:48,880 --> 00:08:52,800
and expanding the

00:08:50,240 --> 00:08:53,760
javascript printer supporting diesel and

00:08:52,800 --> 00:08:56,160
build systems

00:08:53,760 --> 00:08:58,160
such as convenient methods on the array

00:08:56,160 --> 00:09:00,640
and string prototypes

00:08:58,160 --> 00:09:00,640
let's see

00:09:02,959 --> 00:09:08,399
let's see that not common in qt quick

00:09:06,399 --> 00:09:10,480
but used fairly prominently and

00:09:08,399 --> 00:09:12,000
qb is this what i would like to call the

00:09:10,480 --> 00:09:14,080
annotation pattern

00:09:12,000 --> 00:09:16,000
the annotation pattern is an extension

00:09:14,080 --> 00:09:18,160
of how attached properties are

00:09:16,000 --> 00:09:20,160
used in qg quick but it allows it to be

00:09:18,160 --> 00:09:23,839
more specific and encode more

00:09:20,160 --> 00:09:23,839
information using the hierarchy

00:09:24,240 --> 00:09:28,080
that's yeah this pattern lets individual

00:09:26,640 --> 00:09:30,480
elements take two forms

00:09:28,080 --> 00:09:32,560
a plain an annotated form and a larger

00:09:30,480 --> 00:09:34,000
annotated form by moving out and out to

00:09:32,560 --> 00:09:36,959
its own item

00:09:34,000 --> 00:09:38,560
the the unannotated form of an item has

00:09:36,959 --> 00:09:41,120
a sensible default

00:09:38,560 --> 00:09:42,640
while the annotated form of an item

00:09:41,120 --> 00:09:44,399
allows the user to specify more

00:09:42,640 --> 00:09:46,800
information about an element

00:09:44,399 --> 00:09:49,120
such as flagging it with tags we're

00:09:46,800 --> 00:09:51,680
making an application on other

00:09:49,120 --> 00:09:53,680
parts of the script depend on the

00:09:51,680 --> 00:09:56,959
condition

00:09:53,680 --> 00:09:59,120
that's the uh the annotation pattern

00:09:56,959 --> 00:09:59,680
also includes using attach properties on

00:09:59,120 --> 00:10:02,839
a

00:09:59,680 --> 00:10:04,399
larger form items to provide extra

00:10:02,839 --> 00:10:07,200
information

00:10:04,399 --> 00:10:08,560
let's see but besides that there is not

00:10:07,200 --> 00:10:12,720
much else specific to

00:10:08,560 --> 00:10:14,399
non-digital kml apis it's mostly the

00:10:12,720 --> 00:10:15,760
same concepts that you see in general

00:10:14,399 --> 00:10:17,920
api design

00:10:15,760 --> 00:10:20,000
and uh speaking of that there's this one

00:10:17,920 --> 00:10:20,720
clue that i really like to keep in mind

00:10:20,000 --> 00:10:24,160
when designing

00:10:20,720 --> 00:10:26,800
api's and it's

00:10:24,160 --> 00:10:28,480
let's see uh this quote is from rob pike

00:10:26,800 --> 00:10:31,120
decide the architecture name the

00:10:28,480 --> 00:10:34,560
components and document the details

00:10:31,120 --> 00:10:37,680
let's see what

00:10:34,560 --> 00:10:37,680
ah hold on a second

00:10:40,320 --> 00:10:44,880
let's see let's see uh

00:10:43,600 --> 00:10:46,800
when designing the high level

00:10:44,880 --> 00:10:48,959
architecture of your api you want to

00:10:46,800 --> 00:10:50,480
think about the big picture of your api

00:10:48,959 --> 00:10:52,079
what do you want the end result to look

00:10:50,480 --> 00:10:53,360
like think about how the parent

00:10:52,079 --> 00:10:55,200
components and your api

00:10:53,360 --> 00:10:56,399
interact with their child components and

00:10:55,200 --> 00:10:58,560
advice their set

00:10:56,399 --> 00:11:00,320
what options are the parent components

00:10:58,560 --> 00:11:02,160
are going to take on the

00:11:00,320 --> 00:11:04,160
children components what are the

00:11:02,160 --> 00:11:06,320
children going to tell the parent about

00:11:04,160 --> 00:11:08,800
let's see what do you want to expose the

00:11:06,320 --> 00:11:12,320
developers using your api

00:11:08,800 --> 00:11:14,720
and then after you've designed your high

00:11:12,320 --> 00:11:16,880
level api you want to think about

00:11:14,720 --> 00:11:18,560
what you want to name your names what

00:11:16,880 --> 00:11:18,880
when you're building a foreign code base

00:11:18,560 --> 00:11:20,640
the

00:11:18,880 --> 00:11:22,880
names of items and properties are going

00:11:20,640 --> 00:11:25,200
to tell the reader how everything in

00:11:22,880 --> 00:11:27,440
in the program fits together if your

00:11:25,200 --> 00:11:29,200
names are obscure and hard to understand

00:11:27,440 --> 00:11:30,240
readers of programs that use your api

00:11:29,200 --> 00:11:31,920
are going to have a hard time

00:11:30,240 --> 00:11:34,240
understanding

00:11:31,920 --> 00:11:36,640
uh how everything puts together and

00:11:34,240 --> 00:11:39,120
developers using your apis are

00:11:36,640 --> 00:11:40,640
going to have trouble or calling what

00:11:39,120 --> 00:11:42,240
what elements they should use to fix

00:11:40,640 --> 00:11:44,079
their problems like

00:11:42,240 --> 00:11:45,519
like components should have short names

00:11:44,079 --> 00:11:47,600
but not names so short that

00:11:45,519 --> 00:11:49,839
that excuse their meaning and on the

00:11:47,600 --> 00:11:51,120
other end the long names are cumbersome

00:11:49,839 --> 00:11:52,399
to decipher and remember when they're

00:11:51,120 --> 00:11:54,160
writing code

00:11:52,399 --> 00:11:56,240
a good name and convention to follow is

00:11:54,160 --> 00:12:00,560
either a single nail such a

00:11:56,240 --> 00:12:02,880
button or spinner or

00:12:00,560 --> 00:12:05,760
input let's see or you can do like

00:12:02,880 --> 00:12:08,880
unknown another for example uh

00:12:05,760 --> 00:12:10,240
let's see the page founder manages pages

00:12:08,880 --> 00:12:13,839
by routing them

00:12:10,240 --> 00:12:15,680
or you can use two nouns together

00:12:13,839 --> 00:12:18,959
to form your component name such as the

00:12:15,680 --> 00:12:22,320
curry gummy page pool or the

00:12:18,959 --> 00:12:24,639
tool button let's see for components for

00:12:22,320 --> 00:12:26,320
variants for example list items using a

00:12:24,639 --> 00:12:28,639
single adjective

00:12:26,320 --> 00:12:29,680
is use the often use of the switch

00:12:28,639 --> 00:12:32,480
between them

00:12:29,680 --> 00:12:33,120
let's see like for example you'd have a

00:12:32,480 --> 00:12:35,360
baseline

00:12:33,120 --> 00:12:37,040
list item and then you'd if you wanted a

00:12:35,360 --> 00:12:39,200
list item the

00:12:37,040 --> 00:12:41,920
the uh expandable you would have that be

00:12:39,200 --> 00:12:44,800
an expandable list item and so on

00:12:41,920 --> 00:12:46,320
it's like a common mistake is uh given

00:12:44,800 --> 00:12:49,600
the base component of

00:12:46,320 --> 00:12:51,760
an adjective such as basic or

00:12:49,600 --> 00:12:54,160
simple this is redundant information

00:12:51,760 --> 00:12:55,600
that makes the name less concise and

00:12:54,160 --> 00:12:57,120
it makes it harder to notice which

00:12:55,600 --> 00:12:59,760
components are subtypes of other

00:12:57,120 --> 00:12:59,760
components

00:13:01,519 --> 00:13:07,120
let's see and finally like

00:13:04,880 --> 00:13:08,880
no good api is complete without the

00:13:07,120 --> 00:13:11,120
documentation

00:13:08,880 --> 00:13:12,639
while a good architecture and names are

00:13:11,120 --> 00:13:14,079
important for developers to be able to

00:13:12,639 --> 00:13:16,560
intuit their api

00:13:14,079 --> 00:13:17,279
they're not substitute for documentation

00:13:16,560 --> 00:13:19,440
like

00:13:17,279 --> 00:13:21,680
documentation should first give a

00:13:19,440 --> 00:13:23,440
description of every type and then

00:13:21,680 --> 00:13:24,959
after you fill out a description for

00:13:23,440 --> 00:13:25,519
every type you want to describe their

00:13:24,959 --> 00:13:28,320
methods

00:13:25,519 --> 00:13:29,360
properties signals and other things then

00:13:28,320 --> 00:13:30,720
after you

00:13:29,360 --> 00:13:32,399
and then after you've written the

00:13:30,720 --> 00:13:33,600
explanations of everything you should

00:13:32,399 --> 00:13:35,360
generally add

00:13:33,600 --> 00:13:39,279
small concise examples that show

00:13:35,360 --> 00:13:39,279
specific parts of your api

00:13:39,440 --> 00:13:43,519
let's see let's see

00:13:46,560 --> 00:13:50,800
when writing documentation do not forget

00:13:48,480 --> 00:13:53,279
that comments are also documentation

00:13:50,800 --> 00:13:53,839
nobody likes to read dense 1009 files

00:13:53,279 --> 00:13:58,480
with

00:13:53,839 --> 00:13:58,480
neary a common to help them let's see

00:14:00,320 --> 00:14:03,519
let's see uh that's all the talk but

00:14:02,959 --> 00:14:05,519
it's uh

00:14:03,519 --> 00:14:07,040
time to explain how i applied this to

00:14:05,519 --> 00:14:10,079
designing something

00:14:07,040 --> 00:14:10,079
so let's see

00:14:10,160 --> 00:14:16,399
every tool translation has a purpose and

00:14:13,279 --> 00:14:18,240
it aims to solve a problem let's see for

00:14:16,399 --> 00:14:19,519
for the current gummy page trailer api

00:14:18,240 --> 00:14:22,800
that i just signed

00:14:19,519 --> 00:14:23,040
let's see like like the main reason why

00:14:22,800 --> 00:14:25,040
i

00:14:23,040 --> 00:14:27,120
built this was because i know it's not a

00:14:25,040 --> 00:14:27,760
state management and page navigation is

00:14:27,120 --> 00:14:31,440
like

00:14:27,760 --> 00:14:34,160
all over the place so

00:14:31,440 --> 00:14:34,160
let's see like

00:14:36,480 --> 00:14:40,399
our most complex applications navigation

00:14:38,639 --> 00:14:41,680
wise tend to hold their own solutions

00:14:40,399 --> 00:14:44,000
for navigation

00:14:41,680 --> 00:14:44,880
for example a discover uses a javascript

00:14:44,000 --> 00:14:46,800
file with

00:14:44,880 --> 00:14:48,160
custom navigation functions for all of

00:14:46,800 --> 00:14:50,160
its needs like

00:14:48,160 --> 00:14:51,440
even simpler applications like elisa

00:14:50,160 --> 00:14:53,920
tend to do a

00:14:51,440 --> 00:14:54,560
of custom stuff in regards to navigation

00:14:53,920 --> 00:14:56,399
and

00:14:54,560 --> 00:14:58,480
especially in communicating data between

00:14:56,399 --> 00:15:01,199
different parts of the application

00:14:58,480 --> 00:15:03,279
like simplifying this simplifying uh

00:15:01,199 --> 00:15:03,839
this navigation and sleep management is

00:15:03,279 --> 00:15:06,079
like

00:15:03,839 --> 00:15:07,600
the problem that i wanted the page

00:15:06,079 --> 00:15:10,880
traveler apis designed to

00:15:07,600 --> 00:15:13,360
fix so unless you like before getting

00:15:10,880 --> 00:15:14,480
into designing the api i first wanted to

00:15:13,360 --> 00:15:17,040
see uh

00:15:14,480 --> 00:15:18,160
what what approaches other ui frameworks

00:15:17,040 --> 00:15:21,279
use the

00:15:18,160 --> 00:15:22,880
building uh navigation and welding

00:15:21,279 --> 00:15:24,399
part art is extremely important and

00:15:22,880 --> 00:15:26,000
making sure that you design something

00:15:24,399 --> 00:15:28,240
recognizable and not

00:15:26,000 --> 00:15:29,920
truly foreign to developers after

00:15:28,240 --> 00:15:32,160
browsing through and poking with a lot

00:15:29,920 --> 00:15:34,399
of ui frameworks i found that i liked

00:15:32,160 --> 00:15:35,440
reacts and flutters navigation api so

00:15:34,399 --> 00:15:37,440
that so i took

00:15:35,440 --> 00:15:40,160
most inspiration from them as well

00:15:37,440 --> 00:15:41,920
combining them with gmail specif

00:15:40,160 --> 00:15:43,199
qml specific items like attached

00:15:41,920 --> 00:15:45,199
properties and the

00:15:43,199 --> 00:15:47,120
abilities of the domain specific

00:15:45,199 --> 00:15:48,880
language ask apis

00:15:47,120 --> 00:15:50,399
this is where the first step of api

00:15:48,880 --> 00:15:53,519
design comes in

00:15:50,399 --> 00:15:56,720
deciding the architecture

00:15:53,519 --> 00:15:58,639
let's see for a page founder i wanted to

00:15:56,720 --> 00:16:00,480
avoid applications having to avoid their

00:15:58,639 --> 00:16:03,759
own custom navigation solution

00:16:00,480 --> 00:16:06,880
and having to manually move

00:16:03,759 --> 00:16:08,240
exposed variables up the tree so

00:16:06,880 --> 00:16:09,920
like this influenced the main

00:16:08,240 --> 00:16:11,839
architecture of the api

00:16:09,920 --> 00:16:14,000
the controller object responsible for

00:16:11,839 --> 00:16:16,320
navigation managing the pages

00:16:14,000 --> 00:16:17,600
moving data between them let's see

00:16:16,320 --> 00:16:20,639
attached properties are

00:16:17,600 --> 00:16:24,240
used a lot in the page travelers api to

00:16:20,639 --> 00:16:26,880
move data between them and

00:16:24,240 --> 00:16:28,000
so between uh take plane as the trees

00:16:26,880 --> 00:16:30,399
are component

00:16:28,000 --> 00:16:31,920
and then after i designed a high-level

00:16:30,399 --> 00:16:34,320
approach of the

00:16:31,920 --> 00:16:35,440
api let's see i needed to name the

00:16:34,320 --> 00:16:38,480
component

00:16:35,440 --> 00:16:40,240
since kirigami already

00:16:38,480 --> 00:16:42,160
has components like the page and the

00:16:40,240 --> 00:16:42,800
page bowl i named the component after

00:16:42,160 --> 00:16:45,120
them

00:16:42,800 --> 00:16:47,120
the manager object here is called the

00:16:45,120 --> 00:16:49,040
page founder and the specification for a

00:16:47,120 --> 00:16:51,440
page is called a page round

00:16:49,040 --> 00:16:53,360
let's see additionally i named the

00:16:51,440 --> 00:16:55,680
navigation functions like

00:16:53,360 --> 00:16:57,199
as a bit of a mix of a stack base such

00:16:55,680 --> 00:16:59,920
as like an array and

00:16:57,199 --> 00:17:01,440
browse any navigation such as navigating

00:16:59,920 --> 00:17:03,920
to a specific link so

00:17:01,440 --> 00:17:05,120
the methods are named such as pushrod

00:17:03,920 --> 00:17:08,319
push file from here

00:17:05,120 --> 00:17:10,720
pop rail navigate to rail et cetera

00:17:08,319 --> 00:17:11,600
let's see i i chose this naming to make

00:17:10,720 --> 00:17:14,480
sure that

00:17:11,600 --> 00:17:14,959
it was apparent what the components do

00:17:14,480 --> 00:17:16,559
and

00:17:14,959 --> 00:17:18,959
what what their interactions with each

00:17:16,559 --> 00:17:22,480
other resulting in the application

00:17:18,959 --> 00:17:24,000
and then after i designed and

00:17:22,480 --> 00:17:26,000
implemented the

00:17:24,000 --> 00:17:27,919
architecture and this component let's

00:17:26,000 --> 00:17:30,240
see documentation what's the last thing

00:17:27,919 --> 00:17:30,240
to do

00:17:30,880 --> 00:17:34,559
let's see since the page router is

00:17:33,520 --> 00:17:36,799
pretty different from how

00:17:34,559 --> 00:17:38,720
navigation is usually handled i

00:17:36,799 --> 00:17:40,400
emphasize to explain the high level

00:17:38,720 --> 00:17:43,520
how the high level architecture works

00:17:40,400 --> 00:17:45,679
before explaining the individual details

00:17:43,520 --> 00:17:47,679
i provide diagrams and the documentation

00:17:45,679 --> 00:17:48,559
to help developers visualize how things

00:17:47,679 --> 00:17:50,000
are arranged

00:17:48,559 --> 00:17:52,320
in applications when they're using the

00:17:50,000 --> 00:17:56,080
page founder api

00:17:52,320 --> 00:17:56,080
let's see and

00:17:56,160 --> 00:18:00,880
that that's the that's the process that

00:17:59,200 --> 00:18:03,120
i've used for designing the

00:18:00,880 --> 00:18:04,480
pay trials api i hope that was

00:18:03,120 --> 00:18:07,360
enlightening

00:18:04,480 --> 00:18:07,360
let's see uh

00:18:09,840 --> 00:18:15,840
do we have any questions that need

00:18:12,840 --> 00:18:15,840

YouTube URL: https://www.youtube.com/watch?v=KqxZs7aOFMw


