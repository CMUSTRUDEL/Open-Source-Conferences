Title: Akademy 2020 - Volker Krause - Using Wikidata and OpenStreetMap
Publication date: 2020-11-27
Playlist: Akademy 2020
Description: 
	Wikidata and OpenStreetMap (OSM) are probably the largest Open Data pools in the world, and they contain an incredible wealth of information we can freely use to build digital assistance features for our applications and platforms.

The rise of digital assistance features has shown that it's no longer enough to just focus on freely available source code to build such systems, the data needed for those is equally important. Fortunately, we do have two gigantic general-purpose data sets that model "the world", Wikidata and OpenStreetMap (OSM).

Wikidata contains more than eight billion statements about almost 100 million items, and allows to model basically any kind of fact that isn't entirely transient. Containing also localized names and accompanied by more than 60 million media assets in Wikimedia Commons, Wikidata isn't limited to purely machine readable data, but also provides useful elements for presenting results to humans.

OSM contains about 60GB worth of spatial data, ranging from country borders all the way down to individual streetlamps, and everything in between. A large variety of semantic annotations and cross-links to other databases such as Wikidata enable use-cases way beyond merely displaying a map.

In this talk we will look at how those two data sets are structured, how they can be accessed, how to comply with their licenses, and how we can make use of them for our applications.
Captions: 
	00:00:01,130 --> 00:00:08,600
[Music]

00:00:10,800 --> 00:00:15,280
thank you frederick

00:00:12,240 --> 00:00:16,880
hello everyone um yeah we are going to

00:00:15,280 --> 00:00:19,840
talk a bit about

00:00:16,880 --> 00:00:22,800
wiki data and open suite map and how we

00:00:19,840 --> 00:00:25,119
can use that in our applications

00:00:22,800 --> 00:00:25,119
um

00:00:27,439 --> 00:00:32,000
why do we care about that um when we

00:00:30,240 --> 00:00:33,920
think about applications

00:00:32,000 --> 00:00:36,559
the first thing that for most of us

00:00:33,920 --> 00:00:39,760
probably comes to mind

00:00:36,559 --> 00:00:41,840
is code but that's

00:00:39,760 --> 00:00:43,120
by far not enough to to actually make

00:00:41,840 --> 00:00:47,039
the applications

00:00:43,120 --> 00:00:49,760
work and useful right um

00:00:47,039 --> 00:00:51,520
a free media player only solves half of

00:00:49,760 --> 00:00:53,360
the problem as long as the audio and

00:00:51,520 --> 00:00:55,600
video files i want to play

00:00:53,360 --> 00:00:57,280
are stuck in some proprietary screening

00:00:55,600 --> 00:00:59,039
service

00:00:57,280 --> 00:01:00,480
a free software email client only solves

00:00:59,039 --> 00:01:02,000
part of the problem as long as the

00:01:00,480 --> 00:01:04,559
emails are hosted at

00:01:02,000 --> 00:01:05,280
google and a free software spellchecker

00:01:04,559 --> 00:01:06,720
only solves

00:01:05,280 --> 00:01:08,560
half of the problem as long as the

00:01:06,720 --> 00:01:09,680
dictionary for my language isn't freely

00:01:08,560 --> 00:01:13,600
available

00:01:09,680 --> 00:01:16,159
right and the last bit is an example for

00:01:13,600 --> 00:01:17,040
data we need for our applications to

00:01:16,159 --> 00:01:20,720
functions prop

00:01:17,040 --> 00:01:22,240
it to function properly and we actually

00:01:20,720 --> 00:01:26,479
have

00:01:22,240 --> 00:01:29,759
a number of uh of examples in kde where

00:01:26,479 --> 00:01:31,439
where applications rely on data

00:01:29,759 --> 00:01:34,560
one of the obvious things to come to

00:01:31,439 --> 00:01:34,560
mind is probably model

00:01:35,119 --> 00:01:41,280
which is basically just data

00:01:38,720 --> 00:01:43,600
but there's a lot of cases where this is

00:01:41,280 --> 00:01:46,880
a lot more subtle

00:01:43,600 --> 00:01:51,280
the metadata retrieval

00:01:46,880 --> 00:01:53,439
in media players come to mind

00:01:51,280 --> 00:01:55,119
there is a number of places that do some

00:01:53,439 --> 00:01:58,240
form of coordinate

00:01:55,119 --> 00:02:00,240
to time zone or coordinate to country or

00:01:58,240 --> 00:02:02,560
region mapping

00:02:00,240 --> 00:02:04,079
for for image viewers and for for

00:02:02,560 --> 00:02:06,640
setting up the clock and

00:02:04,079 --> 00:02:07,439
stuff like that and then of course

00:02:06,640 --> 00:02:10,800
there's the

00:02:07,439 --> 00:02:12,959
uh the crazy stuff in uh in

00:02:10,800 --> 00:02:13,920
things like india january and that's of

00:02:12,959 --> 00:02:17,280
course the reason

00:02:13,920 --> 00:02:19,680
why i looked into that entire topic uh

00:02:17,280 --> 00:02:21,040
and if you haven't seen that there we do

00:02:19,680 --> 00:02:23,599
stuff like

00:02:21,040 --> 00:02:24,959
checking if the power plug between your

00:02:23,599 --> 00:02:26,560
home country and the

00:02:24,959 --> 00:02:29,760
travel destination country are

00:02:26,560 --> 00:02:33,040
compatible or if you have to bring a

00:02:29,760 --> 00:02:35,599
converter and detect

00:02:33,040 --> 00:02:37,280
airport and stations mentioned in a

00:02:35,599 --> 00:02:40,000
travel document so

00:02:37,280 --> 00:02:41,280
of course that is is heavily relying on

00:02:40,000 --> 00:02:43,599
data as well

00:02:41,280 --> 00:02:46,400
and there's probably many many more uh

00:02:43,599 --> 00:02:49,440
examples all over kde where

00:02:46,400 --> 00:02:53,840
where where this is the case

00:02:49,440 --> 00:02:56,480
um so where do we get that data from

00:02:53,840 --> 00:02:57,660
um fortunately there has been somewhat

00:02:56,480 --> 00:02:58,800
of a

00:02:57,660 --> 00:03:01,280
[Music]

00:02:58,800 --> 00:03:03,760
positive change in the last 10 years or

00:03:01,280 --> 00:03:06,159
so with open data becoming a thing in

00:03:03,760 --> 00:03:07,840
the same way as

00:03:06,159 --> 00:03:09,920
free software became a thing in the

00:03:07,840 --> 00:03:13,120
decade before that

00:03:09,920 --> 00:03:15,440
um and that results

00:03:13,120 --> 00:03:16,840
in in organizations like government

00:03:15,440 --> 00:03:20,560
agencies

00:03:16,840 --> 00:03:25,440
or even bigger companies

00:03:20,560 --> 00:03:25,440
are publishing relevant data sets

00:03:25,760 --> 00:03:32,319
that however is often in

00:03:29,120 --> 00:03:33,599
in a form that is fairly disconnected

00:03:32,319 --> 00:03:35,599
from each other that

00:03:33,599 --> 00:03:36,799
doesn't use some kind of standard

00:03:35,599 --> 00:03:39,440
identifiers so

00:03:36,799 --> 00:03:40,080
merging those interval individual data

00:03:39,440 --> 00:03:43,200
sets is

00:03:40,080 --> 00:03:46,560
uh uh

00:03:43,200 --> 00:03:49,519
quite some some work and non-trivial

00:03:46,560 --> 00:03:50,319
the formats are often fairly primitive

00:03:49,519 --> 00:03:53,360
like csv

00:03:50,319 --> 00:03:56,720
or spreadsheets they use a

00:03:53,360 --> 00:03:58,720
varying amount of licenses um

00:03:56,720 --> 00:04:00,159
and often this data is de facto

00:03:58,720 --> 00:04:03,519
read-only um

00:04:00,159 --> 00:04:05,680
i mean you find typo in there and then

00:04:03,519 --> 00:04:07,760
there's usually no process to get back

00:04:05,680 --> 00:04:09,439
to the government agency where this came

00:04:07,760 --> 00:04:12,480
from to tell them

00:04:09,439 --> 00:04:14,400
yes the patch be supplied out and then

00:04:12,480 --> 00:04:15,760
they need some kind of internal process

00:04:14,400 --> 00:04:17,600
to

00:04:15,760 --> 00:04:19,600
propagate that and eventually release a

00:04:17,600 --> 00:04:21,919
new data set

00:04:19,600 --> 00:04:23,440
um which then results in you having to

00:04:21,919 --> 00:04:26,639
do all kinds of workarounds in

00:04:23,440 --> 00:04:27,280
in your code for that um fortunately

00:04:26,639 --> 00:04:29,120
there is a

00:04:27,280 --> 00:04:30,320
there's a much better way um to work

00:04:29,120 --> 00:04:33,680
with this um

00:04:30,320 --> 00:04:34,880
and that's the two giant databases

00:04:33,680 --> 00:04:37,919
maintained by

00:04:34,880 --> 00:04:41,040
the wikidata and by the openstreetmap

00:04:37,919 --> 00:04:44,320
communities um

00:04:41,040 --> 00:04:46,240
they basically aggregate

00:04:44,320 --> 00:04:49,440
an enormous amount of data from from

00:04:46,240 --> 00:04:49,440
various different sources

00:04:49,680 --> 00:04:53,600
provided from somebody else or obtained

00:04:51,840 --> 00:04:55,840
themselves

00:04:53,600 --> 00:04:58,160
and collect that in unified databases

00:04:55,840 --> 00:05:00,320
with a unified format unified interface

00:04:58,160 --> 00:05:04,000
unified license

00:05:00,320 --> 00:05:07,120
and in a way that is really easy

00:05:04,000 --> 00:05:10,479
to edit that and to change that

00:05:07,120 --> 00:05:11,520
so we find a few typos in there we fix

00:05:10,479 --> 00:05:13,280
that upstream right

00:05:11,520 --> 00:05:15,199
that's the easiest way for us to deal

00:05:13,280 --> 00:05:17,440
with that problem and it benefits for

00:05:15,199 --> 00:05:21,360
everyone else as well

00:05:17,440 --> 00:05:23,440
for itinerary we were missing some

00:05:21,360 --> 00:05:25,360
special french and belgium station

00:05:23,440 --> 00:05:28,320
identifiers in wikidata

00:05:25,360 --> 00:05:30,000
so we just edit them upstream that

00:05:28,320 --> 00:05:31,600
avoids a whole lot of complication in

00:05:30,000 --> 00:05:33,600
our code and

00:05:31,600 --> 00:05:36,080
that's that's possible if we use those

00:05:33,600 --> 00:05:36,080
systems

00:05:36,240 --> 00:05:41,360
um so a very brief overview on

00:05:39,280 --> 00:05:42,960
what's actually in in wikidata and

00:05:41,360 --> 00:05:45,199
openstreetmap

00:05:42,960 --> 00:05:46,639
and i'm sorry lydia if i'm butchering

00:05:45,199 --> 00:05:49,440
your work here um

00:05:46,639 --> 00:05:52,479
a bit i had to simplify this enough to

00:05:49,440 --> 00:05:56,160
squeeze it on two slides

00:05:52,479 --> 00:05:59,440
so wiki data aims at basically being the

00:05:56,160 --> 00:06:03,360
machine readable form of wikipedia

00:05:59,440 --> 00:06:06,639
so that means a very very broad scope

00:06:03,360 --> 00:06:09,360
so any factual statement is

00:06:06,639 --> 00:06:11,600
basically in scope there and that so far

00:06:09,360 --> 00:06:15,120
has resulted in

00:06:11,600 --> 00:06:18,319
um eight billion statements about

00:06:15,120 --> 00:06:21,840
uh 100 million objects and counting so

00:06:18,319 --> 00:06:24,160
this is a very rapidly growing

00:06:21,840 --> 00:06:25,280
ana is accompanied by another 60 million

00:06:24,160 --> 00:06:30,800
media assets

00:06:25,280 --> 00:06:30,800
so images logos that kind of stuff

00:06:33,360 --> 00:06:41,199
technically what this database contains

00:06:37,680 --> 00:06:43,840
um are subject predicate object triples

00:06:41,199 --> 00:06:45,680
so if you're old enough that you have

00:06:43,840 --> 00:06:47,600
been around in the kde 4 era

00:06:45,680 --> 00:06:49,199
you might remember some of this from

00:06:47,600 --> 00:06:51,759
necromooc

00:06:49,199 --> 00:06:54,479
and indeed you you'll find a number of

00:06:51,759 --> 00:06:57,599
similarities in here

00:06:54,479 --> 00:07:00,880
um so the subject

00:06:57,599 --> 00:07:02,240
is that's items which is basically just

00:07:00,880 --> 00:07:05,599
a numeric identifier

00:07:02,240 --> 00:07:09,120
prefix with a capital q um then the

00:07:05,599 --> 00:07:11,199
predicate that can be any of about 9 000

00:07:09,120 --> 00:07:13,039
different properties

00:07:11,199 --> 00:07:14,479
again represented by a numerical

00:07:13,039 --> 00:07:17,840
identifier and

00:07:14,479 --> 00:07:18,639
prefix by capital p um and that can be

00:07:17,840 --> 00:07:21,840
anything

00:07:18,639 --> 00:07:22,960
from very widely used and very generic

00:07:21,840 --> 00:07:25,919
things like

00:07:22,960 --> 00:07:28,160
instance off or creation time to

00:07:25,919 --> 00:07:31,840
something very niche and very specific

00:07:28,160 --> 00:07:31,840
like power plug type

00:07:33,199 --> 00:07:37,919
and the object that can be then

00:07:35,680 --> 00:07:41,199
primitive types like strings

00:07:37,919 --> 00:07:42,080
number states or references to media

00:07:41,199 --> 00:07:46,879
assets or

00:07:42,080 --> 00:07:50,400
other items and those statements can be

00:07:46,879 --> 00:07:52,960
qualified so we can specify for example

00:07:50,400 --> 00:07:55,199
in which time frame they were valid

00:07:52,960 --> 00:07:56,720
so we can also model how things change

00:07:55,199 --> 00:07:59,039
over time

00:07:56,720 --> 00:08:02,240
and then in wiki data speak as an

00:07:59,039 --> 00:08:02,240
example something like

00:08:04,120 --> 00:08:07,520
q1431p31q2989352

00:08:05,280 --> 00:08:10,080
obviously means ade is a free software

00:08:07,520 --> 00:08:10,080
community

00:08:11,520 --> 00:08:19,199
um and similar in openstreetmap

00:08:16,000 --> 00:08:22,400
um very

00:08:19,199 --> 00:08:26,080
similar size for the for that database

00:08:22,400 --> 00:08:30,160
um about six billion points in there

00:08:26,080 --> 00:08:33,440
and 700 million lines and polygons

00:08:30,160 --> 00:08:35,760
of geometry that represents anything on

00:08:33,440 --> 00:08:35,760
earth

00:08:35,839 --> 00:08:41,440
the license for osm is we need to pay a

00:08:39,440 --> 00:08:42,640
tiny bit more attention to than for for

00:08:41,440 --> 00:08:45,760
wikileaks

00:08:42,640 --> 00:08:47,600
cc0 um odbl has

00:08:45,760 --> 00:08:49,200
uh share like and attribution

00:08:47,600 --> 00:08:53,120
requirements

00:08:49,200 --> 00:08:56,160
um that is for the

00:08:53,120 --> 00:08:59,120
well somewhat comparable to the gpl

00:08:56,160 --> 00:09:00,480
we use in code so um easy for us to

00:08:59,120 --> 00:09:03,120
comply with in

00:09:00,480 --> 00:09:04,399
a free software world uh but we actually

00:09:03,120 --> 00:09:08,560
have to

00:09:04,399 --> 00:09:12,480
take care of that and then what's

00:09:08,560 --> 00:09:12,480
technically in in here is

00:09:14,320 --> 00:09:21,920
three basic element types um

00:09:18,480 --> 00:09:23,519
nodes ways and relations nodes are

00:09:21,920 --> 00:09:25,200
points so that's basically just a

00:09:23,519 --> 00:09:28,800
geographic coordinate and a

00:09:25,200 --> 00:09:30,560
190 degree resolution uh depending on

00:09:28,800 --> 00:09:33,440
your latitude that is in

00:09:30,560 --> 00:09:33,920
the centimeter range so you can even

00:09:33,440 --> 00:09:37,040
model

00:09:33,920 --> 00:09:40,480
like room scale objects in

00:09:37,040 --> 00:09:43,040
in here rays are then

00:09:40,480 --> 00:09:44,640
ordered sequences of nodes um so that's

00:09:43,040 --> 00:09:48,720
what's

00:09:44,640 --> 00:09:51,680
used to build lines or simple polygons

00:09:48,720 --> 00:09:53,440
and relations um that is used both for

00:09:51,680 --> 00:09:55,839
semantic groupings like

00:09:53,440 --> 00:09:57,279
those five buildings uh belong to a

00:09:55,839 --> 00:10:00,399
campus

00:09:57,279 --> 00:10:03,519
um and uh for

00:10:00,399 --> 00:10:05,040
modeling complex polygons um so polygons

00:10:03,519 --> 00:10:07,839
start have holes in them and that you

00:10:05,040 --> 00:10:09,279
can't represent by a single way anymore

00:10:07,839 --> 00:10:11,839
and then the part where this gets really

00:10:09,279 --> 00:10:14,000
interesting each of those elements can

00:10:11,839 --> 00:10:17,360
be annotated by a large set of

00:10:14,000 --> 00:10:18,720
um of key value pairs and that's what's

00:10:17,360 --> 00:10:21,920
actually adding the

00:10:18,720 --> 00:10:24,480
the meaning to that geometry data um

00:10:21,920 --> 00:10:27,040
because anything in here is

00:10:24,480 --> 00:10:28,320
um described on a semantic level so for

00:10:27,040 --> 00:10:31,040
a line you won't find

00:10:28,320 --> 00:10:32,320
an annotation telling you render this 10

00:10:31,040 --> 00:10:34,560
pixel wide and a

00:10:32,320 --> 00:10:36,160
black and white dash pattern on the map

00:10:34,560 --> 00:10:38,560
but it will tell you instead this is

00:10:36,160 --> 00:10:40,959
available track right and then

00:10:38,560 --> 00:10:43,680
any visual display decides how how that

00:10:40,959 --> 00:10:47,040
is rendered that's not in the data

00:10:43,680 --> 00:10:50,000
and the data in here goes far uh

00:10:47,040 --> 00:10:51,920
beyond what uh what you would usually

00:10:50,000 --> 00:10:53,680
see visualized on the map

00:10:51,920 --> 00:10:55,360
so imagine you're building a like a

00:10:53,680 --> 00:10:57,279
digital assistant

00:10:55,360 --> 00:11:00,079
and you have a query like find me a

00:10:57,279 --> 00:11:02,959
pizza place within a 500 meter range

00:11:00,079 --> 00:11:04,160
from from where i am right now that i

00:11:02,959 --> 00:11:07,360
can enter

00:11:04,160 --> 00:11:09,839
with a wheelchair that um offers

00:11:07,360 --> 00:11:11,440
vegan options where i can pay with one

00:11:09,839 --> 00:11:13,279
of my credit cards

00:11:11,440 --> 00:11:15,040
and which is near to a parking spot

00:11:13,279 --> 00:11:17,279
where i can charge the electric

00:11:15,040 --> 00:11:18,240
my electrical car with a type 2

00:11:17,279 --> 00:11:20,320
connector

00:11:18,240 --> 00:11:21,279
right the data to answer that is all in

00:11:20,320 --> 00:11:24,640
here so it's

00:11:21,279 --> 00:11:24,640
it's incredibly detailed

00:11:25,010 --> 00:11:28,480
[Music]

00:11:26,480 --> 00:11:30,160
and can be used way beyond just

00:11:28,480 --> 00:11:33,360
rendering a map

00:11:30,160 --> 00:11:34,720
and if any of those two databases aren't

00:11:33,360 --> 00:11:38,959
good enough on their own

00:11:34,720 --> 00:11:42,160
um they offer cross referencing between

00:11:38,959 --> 00:11:44,720
osm elements and wiki data items in both

00:11:42,160 --> 00:11:44,720
directions

00:11:46,959 --> 00:11:53,200
okay so how can we make use of that done

00:11:50,480 --> 00:11:54,480
in in our applications and there's

00:11:53,200 --> 00:11:58,880
basically two

00:11:54,480 --> 00:11:58,880
approaches to this one is

00:11:59,279 --> 00:12:03,839
bundling the data we need with the

00:12:00,959 --> 00:12:06,560
application for offline use

00:12:03,839 --> 00:12:11,120
and the other one is accessing some some

00:12:06,560 --> 00:12:15,120
kind of online api

00:12:11,120 --> 00:12:19,040
so for the bundling that works

00:12:15,120 --> 00:12:22,880
if you have a reasonable amount

00:12:19,040 --> 00:12:26,720
of data and data that is

00:12:22,880 --> 00:12:28,959
barely static so that doesn't change

00:12:26,720 --> 00:12:31,760
with a high probability within a within

00:12:28,959 --> 00:12:31,760
a release cycle

00:12:32,160 --> 00:12:35,680
and that actually applies to a

00:12:33,839 --> 00:12:39,120
surprising amount of

00:12:35,680 --> 00:12:40,480
of use cases um because

00:12:39,120 --> 00:12:42,480
since you're doing some offline

00:12:40,480 --> 00:12:43,839
preparation as a developer for the data

00:12:42,480 --> 00:12:45,839
you ship

00:12:43,839 --> 00:12:47,920
you can actually put quite some some

00:12:45,839 --> 00:12:50,480
effort into this

00:12:47,920 --> 00:12:52,160
to very efficiently pack it in a way

00:12:50,480 --> 00:12:55,279
that it needs very very

00:12:52,160 --> 00:12:57,680
little space and can still be uh very

00:12:55,279 --> 00:13:01,279
efficiently accessed at runtime

00:12:57,680 --> 00:13:02,800
um so there's a lot you can squeeze in a

00:13:01,279 --> 00:13:06,560
few hundred kilobytes if you're not

00:13:02,800 --> 00:13:08,800
using xml json um

00:13:06,560 --> 00:13:09,680
and then of course there there remains

00:13:08,800 --> 00:13:11,920
the question on

00:13:09,680 --> 00:13:13,360
where do you get the data from as the as

00:13:11,920 --> 00:13:16,800
the developer

00:13:13,360 --> 00:13:18,839
uh and for that um there's the

00:13:16,800 --> 00:13:21,279
online query apis that we'll see in a

00:13:18,839 --> 00:13:24,160
second

00:13:21,279 --> 00:13:25,519
there is in some cases derivative

00:13:24,160 --> 00:13:28,720
databases

00:13:25,519 --> 00:13:29,600
so for example um there is the time zone

00:13:28,720 --> 00:13:32,639
shape file

00:13:29,600 --> 00:13:34,560
that's a just 120 megabyte in size

00:13:32,639 --> 00:13:37,440
extract with the exact

00:13:34,560 --> 00:13:39,920
vector borders for the time zones that

00:13:37,440 --> 00:13:43,040
is generated from the full

00:13:39,920 --> 00:13:45,279
uh osm data set um

00:13:43,040 --> 00:13:46,160
but it's of course a lot more efficient

00:13:45,279 --> 00:13:47,760
if you work with

00:13:46,160 --> 00:13:50,160
with the small subset if you find one

00:13:47,760 --> 00:13:51,600
that matches your use case

00:13:50,160 --> 00:13:53,360
and otherwise there's of course always

00:13:51,600 --> 00:13:55,600
the case to the

00:13:53,360 --> 00:13:57,040
the possibility to work with the full

00:13:55,600 --> 00:14:02,240
data sets

00:13:57,040 --> 00:14:03,839
um i mean 60 gigabytes of download is uh

00:14:02,240 --> 00:14:05,440
is hard but that's still still

00:14:03,839 --> 00:14:09,360
manageable

00:14:05,440 --> 00:14:09,360
um if you don't have another option

00:14:10,000 --> 00:14:16,240
um then for the online access um

00:14:13,920 --> 00:14:18,720
generally there is two different types

00:14:16,240 --> 00:14:21,920
of apis that you find in in both wiki

00:14:18,720 --> 00:14:21,920
data and opensweetmap

00:14:22,320 --> 00:14:28,639
one is a simple single item

00:14:25,760 --> 00:14:28,639
access api

00:14:28,880 --> 00:14:32,800
that usually has a a very fast response

00:14:31,920 --> 00:14:34,800
time in

00:14:32,800 --> 00:14:36,639
milliseconds so wikidata for example

00:14:34,800 --> 00:14:39,440
uses that to power its

00:14:36,639 --> 00:14:40,760
its auto completion uh so that scales

00:14:39,440 --> 00:14:42,480
very well but it's

00:14:40,760 --> 00:14:46,639
[Music]

00:14:42,480 --> 00:14:49,839
has a somewhat limited way of doing this

00:14:46,639 --> 00:14:52,000
and for the um the second option starts

00:14:49,839 --> 00:14:54,720
the the complex query services uh

00:14:52,000 --> 00:14:56,639
using query languages like sparkle again

00:14:54,720 --> 00:15:00,400
something you might remember from

00:14:56,639 --> 00:15:02,639
on nepal or overpass ql for

00:15:00,400 --> 00:15:05,440
[Music]

00:15:02,639 --> 00:15:05,440
open street map

00:15:05,760 --> 00:15:11,440
that little example i have here lists

00:15:08,639 --> 00:15:14,639
all the members of the kde community

00:15:11,440 --> 00:15:14,639
as known by wikidata

00:15:15,920 --> 00:15:22,320
and those those services come very

00:15:18,959 --> 00:15:25,199
with very nice interactive

00:15:22,320 --> 00:15:26,399
tools to work with and that already

00:15:25,199 --> 00:15:29,230
shows that they are

00:15:26,399 --> 00:15:31,519
much more focused on um

00:15:29,230 --> 00:15:33,519
[Music]

00:15:31,519 --> 00:15:35,360
research and experiments and obtaining

00:15:33,519 --> 00:15:37,680
data for offline processing rather than

00:15:35,360 --> 00:15:40,959
for use from applications

00:15:37,680 --> 00:15:41,519
um and that's emphasized by the fact

00:15:40,959 --> 00:15:43,519
that

00:15:41,519 --> 00:15:45,519
if you're lucky the response comes in

00:15:43,519 --> 00:15:47,680
within seconds

00:15:45,519 --> 00:15:48,720
but even waiting minutes isn't unheard

00:15:47,680 --> 00:15:50,720
of

00:15:48,720 --> 00:15:52,800
so definitely not something to use from

00:15:50,720 --> 00:15:56,399
within an application

00:15:52,800 --> 00:16:00,160
but very useful to you as a developer

00:15:56,399 --> 00:16:03,279
and then there's a number of um

00:16:00,160 --> 00:16:04,880
kind of third-party services that are

00:16:03,279 --> 00:16:09,199
built on top of

00:16:04,880 --> 00:16:11,680
the wikidata open suitemap datasets

00:16:09,199 --> 00:16:12,880
that might be usable for for specific

00:16:11,680 --> 00:16:14,959
purposes

00:16:12,880 --> 00:16:16,959
um one of them is actually one that that

00:16:14,959 --> 00:16:19,680
kde hosts itself

00:16:16,959 --> 00:16:21,680
and that's uh on mapscadiorg the

00:16:19,680 --> 00:16:25,120
[Music]

00:16:21,680 --> 00:16:28,079
back end for the vector maps in marble

00:16:25,120 --> 00:16:29,199
and we are currently working on updating

00:16:28,079 --> 00:16:33,759
that

00:16:29,199 --> 00:16:36,800
to ensure it has worldwide coverage and

00:16:33,759 --> 00:16:39,920
is typically not lagging behind the

00:16:36,800 --> 00:16:43,040
upstream data by more than 24 hours

00:16:39,920 --> 00:16:44,000
um and what this offers us is a very

00:16:43,040 --> 00:16:47,440
efficient way

00:16:44,000 --> 00:16:50,959
to retrieve basically

00:16:47,440 --> 00:16:53,120
openstreetmap data for a very small

00:16:50,959 --> 00:16:55,360
region so a range of a few hundred

00:16:53,120 --> 00:16:57,360
meters for example

00:16:55,360 --> 00:16:59,120
and if you look at an area of that size

00:16:57,360 --> 00:17:03,199
and the full raw data

00:16:59,120 --> 00:17:05,199
is just a few kilobytes usually

00:17:03,199 --> 00:17:06,720
so this gives us a very flexible and

00:17:05,199 --> 00:17:09,120
powerful mechanism

00:17:06,720 --> 00:17:10,319
for any kind of use case that you might

00:17:09,120 --> 00:17:14,959
come up with

00:17:10,319 --> 00:17:18,880
as long as it has a very localized

00:17:14,959 --> 00:17:22,079
need of accessing data

00:17:18,880 --> 00:17:25,600
and there's plenty of other services

00:17:22,079 --> 00:17:29,520
was mentioning like the

00:17:25,600 --> 00:17:31,679
routing or geocoding services

00:17:29,520 --> 00:17:34,160
offered around open speed map for

00:17:31,679 --> 00:17:34,160
example

00:17:38,559 --> 00:17:44,720
when we use online access from within

00:17:42,000 --> 00:17:47,120
the application

00:17:44,720 --> 00:17:48,000
there's a few things to consider privacy

00:17:47,120 --> 00:17:51,360
is

00:17:48,000 --> 00:17:54,799
one of the obvious issues

00:17:51,360 --> 00:17:56,400
because it becomes very very easy here

00:17:54,799 --> 00:17:59,679
to leak

00:17:56,400 --> 00:18:01,440
high resolution coordinates so possibly

00:17:59,679 --> 00:18:03,440
the location where the user is right now

00:18:01,440 --> 00:18:05,200
or where the user lives

00:18:03,440 --> 00:18:06,559
as well as specific interests or

00:18:05,200 --> 00:18:09,679
activities

00:18:06,559 --> 00:18:10,320
um if you remember the um the query

00:18:09,679 --> 00:18:12,840
example

00:18:10,320 --> 00:18:14,400
from earlier for the digital assistant

00:18:12,840 --> 00:18:16,960
right

00:18:14,400 --> 00:18:18,880
if you send that as is to the server you

00:18:16,960 --> 00:18:21,440
leak the exact position where i live

00:18:18,880 --> 00:18:22,080
as well as the very specific interest

00:18:21,440 --> 00:18:25,039
and

00:18:22,080 --> 00:18:26,960
specific constraints i have on what i'm

00:18:25,039 --> 00:18:28,559
searching for

00:18:26,960 --> 00:18:30,720
if you on the other hand would run this

00:18:28,559 --> 00:18:31,360
against uh something like the map scale

00:18:30,720 --> 00:18:34,720
york

00:18:31,360 --> 00:18:37,360
interface that already reduces the

00:18:34,720 --> 00:18:38,880
coordinate resolution to a few hundred

00:18:37,360 --> 00:18:41,360
meters

00:18:38,880 --> 00:18:42,960
and it doesn't leak anything about what

00:18:41,360 --> 00:18:43,600
i'm actually looking for because it just

00:18:42,960 --> 00:18:46,880
gives me

00:18:43,600 --> 00:18:48,720
the entire data set um if that's good

00:18:46,880 --> 00:18:51,679
enough from a privacy point of view

00:18:48,720 --> 00:18:52,960
i guess depends on what alternatives you

00:18:51,679 --> 00:18:55,360
have and so the

00:18:52,960 --> 00:18:58,880
offline approach will always win against

00:18:55,360 --> 00:18:58,880
that but that's not always feasible

00:18:58,960 --> 00:19:06,160
um and then if you use somebody else's

00:19:03,120 --> 00:19:08,240
online access or online apis

00:19:06,160 --> 00:19:09,200
check the the guidelines and rules for

00:19:08,240 --> 00:19:11,760
that

00:19:09,200 --> 00:19:12,799
because some of this can cause quite

00:19:11,760 --> 00:19:15,840
some load on

00:19:12,799 --> 00:19:17,200
somebody else's server um somebody has

00:19:15,840 --> 00:19:21,039
to pay for that like

00:19:17,200 --> 00:19:25,200
wikidata and openstreetmap but just

00:19:21,039 --> 00:19:27,760
communities like like us as well so

00:19:25,200 --> 00:19:28,799
it's always important to also keep in

00:19:27,760 --> 00:19:31,840
mind the

00:19:28,799 --> 00:19:31,840
the cost on that side

00:19:34,640 --> 00:19:38,960
like if you want to do anything like

00:19:37,520 --> 00:19:42,559
that in your application

00:19:38,960 --> 00:19:45,440
um i listed a few examples here

00:19:42,559 --> 00:19:47,120
um in just covering code that i touched

00:19:45,440 --> 00:19:50,799
recently there's probably more

00:19:47,120 --> 00:19:52,880
um like marble comes to mind

00:19:50,799 --> 00:19:53,840
where some of this that i some of the

00:19:52,880 --> 00:19:56,960
things i mentioned

00:19:53,840 --> 00:19:57,919
um are actually used or are done in some

00:19:56,960 --> 00:19:59,919
way

00:19:57,919 --> 00:20:01,440
uh so that might give you some examples

00:19:59,919 --> 00:20:04,840
or inspiration on

00:20:01,440 --> 00:20:08,159
on how this could be approached

00:20:04,840 --> 00:20:11,919
um offline and online access for

00:20:08,159 --> 00:20:15,120
uh for both uh those kinds of

00:20:11,919 --> 00:20:17,360
data in there and

00:20:15,120 --> 00:20:21,840
various forms of more or less elaborate

00:20:17,360 --> 00:20:21,840
uh local pre-processing

00:20:22,400 --> 00:20:29,200
and yeah with that

00:20:26,400 --> 00:20:29,919
we are already coming to an end so i i

00:20:29,200 --> 00:20:32,640
hope that

00:20:29,919 --> 00:20:34,720
gave you some ideas on what's possible

00:20:32,640 --> 00:20:36,960
and

00:20:34,720 --> 00:20:37,919
a bit of an overview on on how we can

00:20:36,960 --> 00:20:41,360
approach

00:20:37,919 --> 00:20:44,640
using openstreetmap and wiki data for

00:20:41,360 --> 00:20:45,679
our applications um and i also have a

00:20:44,640 --> 00:20:48,370
few questions

00:20:45,679 --> 00:20:50,640
where i'd be interested in in feedback

00:20:48,370 --> 00:20:54,799
[Music]

00:20:50,640 --> 00:20:56,720
for one do you think it makes sense

00:20:54,799 --> 00:20:58,080
if we extract some of those building

00:20:56,720 --> 00:21:00,159
blocks

00:20:58,080 --> 00:21:02,480
or collect some of the building blocks

00:21:00,159 --> 00:21:05,600
for working with this kind of data in

00:21:02,480 --> 00:21:06,000
say a separate library or framework and

00:21:05,600 --> 00:21:09,600
then

00:21:06,000 --> 00:21:13,280
do you have database features

00:21:09,600 --> 00:21:14,159
um that would make sense in frameworks

00:21:13,280 --> 00:21:16,320
and

00:21:14,159 --> 00:21:17,440
i have the suspicion that some of the

00:21:16,320 --> 00:21:20,159
coordinate based

00:21:17,440 --> 00:21:22,000
uh look up features um to get time zones

00:21:20,159 --> 00:21:25,520
or countries or so on

00:21:22,000 --> 00:21:29,280
um might be of a broader interest there

00:21:25,520 --> 00:21:31,360
so um that would be something i would be

00:21:29,280 --> 00:21:33,760
interested in discussing this week for

00:21:31,360 --> 00:21:33,760
example

00:21:35,520 --> 00:21:39,200
and yeah i think we we have a few

00:21:37,760 --> 00:21:41,200
minutes for questions

00:21:39,200 --> 00:21:43,039
yeah thank you so much for your talk

00:21:41,200 --> 00:21:47,200
it's so fun to see folk

00:21:43,039 --> 00:21:50,400
dive deeper and deeper into data and

00:21:47,200 --> 00:21:51,760
it narry and transport we do have

00:21:50,400 --> 00:21:55,760
currently two questions

00:21:51,760 --> 00:21:59,600
uh so the first one is is there data

00:21:55,760 --> 00:22:02,799
with shop opening times

00:21:59,600 --> 00:22:05,840
uh yes i actually missed that in my

00:22:02,799 --> 00:22:05,840
my query example

00:22:06,000 --> 00:22:09,840
that is of course in the open suitemap

00:22:07,919 --> 00:22:13,120
data and

00:22:09,840 --> 00:22:16,799
that again is probably a topic for an

00:22:13,120 --> 00:22:18,799
entire talk and entire framework

00:22:16,799 --> 00:22:21,280
because modeling opening times while

00:22:18,799 --> 00:22:23,440
considering local public holidays

00:22:21,280 --> 00:22:25,120
and various recurrent patterns and

00:22:23,440 --> 00:22:27,039
seasonal things

00:22:25,120 --> 00:22:29,440
that's all done they have all of that in

00:22:27,039 --> 00:22:31,919
there it's a very very detailed

00:22:29,440 --> 00:22:33,679
uh comprehensive specification on on the

00:22:31,919 --> 00:22:35,919
format

00:22:33,679 --> 00:22:37,120
writing an inter parser an interpreter

00:22:35,919 --> 00:22:39,520
for that

00:22:37,120 --> 00:22:40,640
is something we still need to do i

00:22:39,520 --> 00:22:43,919
expect that to be

00:22:40,640 --> 00:22:46,880
similar in complexity like the ico uh

00:22:43,919 --> 00:22:47,919
recurrence handling um but yes that's

00:22:46,880 --> 00:22:50,559
that's there and

00:22:47,919 --> 00:22:52,559
it's extremely powerful in what you can

00:22:50,559 --> 00:22:55,919
model with it

00:22:52,559 --> 00:22:57,600
wow okay second question are you reusing

00:22:55,919 --> 00:23:00,720
data from

00:22:57,600 --> 00:23:03,600
noma nomantim

00:23:00,720 --> 00:23:04,240
no no me not him sorry for address

00:23:03,600 --> 00:23:06,000
lookup

00:23:04,240 --> 00:23:09,280
you probably know what that is i have no

00:23:06,000 --> 00:23:12,400
idea yeah that's the um

00:23:09,280 --> 00:23:13,919
the geocoder or reverse geocode i always

00:23:12,400 --> 00:23:17,120
mix up which one is reverse

00:23:13,919 --> 00:23:19,679
um that is one of the the

00:23:17,120 --> 00:23:20,640
the third-party services that come to

00:23:19,679 --> 00:23:23,840
mind for

00:23:20,640 --> 00:23:26,960
for specific use cases with

00:23:23,840 --> 00:23:30,720
uh with geographic data so for

00:23:26,960 --> 00:23:33,520
geocoding um we are currently not doing

00:23:30,720 --> 00:23:33,520
geocoding

00:23:34,400 --> 00:23:40,799
in in itinerary yet uh

00:23:37,520 --> 00:23:43,919
but we will need that uh at some point

00:23:40,799 --> 00:23:45,520
um uh

00:23:43,919 --> 00:23:47,360
if you get a hotel reservation let's

00:23:45,520 --> 00:23:48,480
trust the address right we need to know

00:23:47,360 --> 00:23:50,960
where that actually is

00:23:48,480 --> 00:23:51,760
in order to plan away to get there to

00:23:50,960 --> 00:23:53,760
know

00:23:51,760 --> 00:23:55,520
and to complete all the missing bits on

00:23:53,760 --> 00:23:57,120
which country is this in which time zone

00:23:55,520 --> 00:24:00,240
is designed and so on

00:23:57,120 --> 00:24:03,039
uh so that that is important to have

00:24:00,240 --> 00:24:04,000
i am not sure it's possible to do that

00:24:03,039 --> 00:24:05,440
offline

00:24:04,000 --> 00:24:07,840
seeing that this was added to the

00:24:05,440 --> 00:24:07,840
question

00:24:08,000 --> 00:24:12,640
i suspect the database behind that to be

00:24:12,960 --> 00:24:19,279
in the multi gigabyte range so

00:24:16,159 --> 00:24:21,520
that is uh not something you want to

00:24:19,279 --> 00:24:24,240
deploy on a mobile phone

00:24:21,520 --> 00:24:26,480
um that is that is typically something

00:24:24,240 --> 00:24:27,120
that is only realistically solvable by

00:24:26,480 --> 00:24:30,240
an

00:24:27,120 --> 00:24:30,240
online service i think

00:24:31,279 --> 00:24:35,360
all right yeah great discussion in the

00:24:34,000 --> 00:24:38,000
chat how do i find

00:24:35,360 --> 00:24:39,039
the way from my work desk to my bed and

00:24:38,000 --> 00:24:43,120
stuff like that

00:24:39,039 --> 00:24:43,120
uh not sure if

00:24:43,520 --> 00:24:48,559
are you solving that we are working on

00:24:46,880 --> 00:24:51,919
that not necessarily for

00:24:48,559 --> 00:24:54,559
for the bed to desk scenario but um

00:24:51,919 --> 00:24:56,320
i mean one of the reasons why i'm

00:24:54,559 --> 00:24:57,840
finding myself digging deeper and deeper

00:24:56,320 --> 00:25:01,120
into openstreetmap is

00:24:57,840 --> 00:25:04,000
we are looking into indoor maps for

00:25:01,120 --> 00:25:04,799
big train stations and airports and i'm

00:25:04,000 --> 00:25:06,880
doing

00:25:04,799 --> 00:25:08,799
sort of navigation in there so what is

00:25:06,880 --> 00:25:10,480
the most efficient way to switch from

00:25:08,799 --> 00:25:12,960
between your trains if if you're in a

00:25:10,480 --> 00:25:15,360
hurry in stations like

00:25:12,960 --> 00:25:17,840
uh brilliant hotbandhoff where you have

00:25:15,360 --> 00:25:20,880
like eight laws

00:25:17,840 --> 00:25:24,480
and only one working elevator and

00:25:20,880 --> 00:25:27,520
right so this but ultimately

00:25:24,480 --> 00:25:28,080
if you can model that in an suite map

00:25:27,520 --> 00:25:31,440
and work with

00:25:28,080 --> 00:25:34,480
it if you add your

00:25:31,440 --> 00:25:36,480
your bedroom and your uh your office to

00:25:34,480 --> 00:25:40,240
the openstreetmap data

00:25:36,480 --> 00:25:40,240
you should work there as well so

00:25:40,840 --> 00:25:45,039
nice

00:25:42,640 --> 00:25:47,360
all right then i guess we are out of

00:25:45,039 --> 00:25:49,440
official questions there uh

00:25:47,360 --> 00:25:51,440
one question from my side accessibility

00:25:49,440 --> 00:25:54,799
i still care about that

00:25:51,440 --> 00:25:56,640
uh wheelchair accessible data blind

00:25:54,799 --> 00:25:59,279
uh navigation lanes and so on i guess

00:25:56,640 --> 00:26:02,400
there's a lot of data for that as well

00:25:59,279 --> 00:26:04,159
there is a um i haven't

00:26:02,400 --> 00:26:06,080
i've only scratched the surface for that

00:26:04,159 --> 00:26:09,760
but there is a

00:26:06,080 --> 00:26:12,480
um a huge amount of text on that subject

00:26:09,760 --> 00:26:14,480
for wheelchair access there is a

00:26:12,480 --> 00:26:17,679
complete model for

00:26:14,480 --> 00:26:21,440
for toilets and restrooms there's

00:26:17,679 --> 00:26:24,880
tactile paving and tactile

00:26:21,440 --> 00:26:28,240
signs and information about that

00:26:24,880 --> 00:26:30,400
um and

00:26:28,240 --> 00:26:31,679
probably more that i don't that i

00:26:30,400 --> 00:26:33,760
haven't found yet or don't

00:26:31,679 --> 00:26:36,240
even understand um so there's there

00:26:33,760 --> 00:26:39,440
seems to be a large sub-community

00:26:36,240 --> 00:26:42,960
within accessibility interest

00:26:39,440 --> 00:26:45,360
involved there yeah um there's

00:26:42,960 --> 00:26:46,080
things like real map that is based on

00:26:45,360 --> 00:26:49,120
top of

00:26:46,080 --> 00:26:52,799
osm and they they also have apis

00:26:49,120 --> 00:26:55,279
for the life status of

00:26:52,799 --> 00:26:56,000
elevators and and that kind of stuff so

00:26:55,279 --> 00:26:58,240
there's

00:26:56,000 --> 00:27:00,000
there's people looking specifically at

00:26:58,240 --> 00:27:01,440
those topics and

00:27:00,000 --> 00:27:07,840
of course it would be interesting for us

00:27:01,440 --> 00:27:07,840
to leverage that as well

00:27:10,000 --> 00:27:12,080

YouTube URL: https://www.youtube.com/watch?v=WS1XUW_4FcY


