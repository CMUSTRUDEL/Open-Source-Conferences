Title: Akademy 2020 - Student Showcase Part 2
Publication date: 2020-11-24
Playlist: Akademy 2020
Description: 
	Every year a number of students join us through our student programs Google Summer of Code and Season of KDE. In this session some of them will show you what they've been working on and talk about their experience working with the KDE community.

Speakers and Presentation Topics Include:
Anuj Bansal - Improvements to KDEâ€™s Web Infrastructure
Paritosh Sharma - Qt3D backend for KStars
Shashwat Jolly - EteSync sync backend for Akonadi
Shivam Balikondwar - Add file backends for ROCS IDE
Captions: 
	00:00:01,120 --> 00:00:08,599
[Music]

00:00:11,120 --> 00:00:16,960
student showcase

00:00:12,719 --> 00:00:19,199
part two hi everyone i'm shashvat

00:00:16,960 --> 00:00:21,039
a gsoc 2020 student working on the

00:00:19,199 --> 00:00:23,279
project at async sync backend for

00:00:21,039 --> 00:00:25,439
econadi

00:00:23,279 --> 00:00:27,039
my project is about adding a new sync

00:00:25,439 --> 00:00:29,840
functionality to kdpim

00:00:27,039 --> 00:00:30,480
apps all kdp maps that come under

00:00:29,840 --> 00:00:33,200
contact

00:00:30,480 --> 00:00:34,559
like k address book and k organizer can

00:00:33,200 --> 00:00:35,280
currently sync the user's personal

00:00:34,559 --> 00:00:36,960
information

00:00:35,280 --> 00:00:38,719
through a variety of services like

00:00:36,960 --> 00:00:41,760
google contacts google calendars

00:00:38,719 --> 00:00:43,600
microsoft ews dav graphic resource dav

00:00:41,760 --> 00:00:46,160
griffer servers

00:00:43,600 --> 00:00:47,440
and others so the aim is to add to this

00:00:46,160 --> 00:00:49,280
list a secure

00:00:47,440 --> 00:00:52,000
end-to-end encrypted open sourcing

00:00:49,280 --> 00:00:53,760
solution called at async

00:00:52,000 --> 00:00:55,680
so a little more about what addressing

00:00:53,760 --> 00:00:57,600
is so it is sync as i said

00:00:55,680 --> 00:00:59,440
is a secure end-to-end encrypted open

00:00:57,600 --> 00:01:01,280
source solution for your contacts

00:00:59,440 --> 00:01:02,879
calendars and tasks

00:01:01,280 --> 00:01:05,199
adjacent clients are available for a

00:01:02,879 --> 00:01:09,520
number of platforms including android

00:01:05,199 --> 00:01:11,760
ios the desktop cal dav card dev bridge

00:01:09,520 --> 00:01:13,760
the web client and a thunderbird plugin

00:01:11,760 --> 00:01:15,520
has been developed recently

00:01:13,760 --> 00:01:17,280
the server is also open source and can

00:01:15,520 --> 00:01:18,960
be self-hosted

00:01:17,280 --> 00:01:20,560
edison integrates really well with your

00:01:18,960 --> 00:01:22,720
existing applications

00:01:20,560 --> 00:01:24,080
for example on android you could simply

00:01:22,720 --> 00:01:25,920
download the eta sync app

00:01:24,080 --> 00:01:29,040
and use your favorite calendar app to

00:01:25,920 --> 00:01:29,040
sync your addressing events

00:01:29,200 --> 00:01:33,520
uh now a little about akonadi so icon rd

00:01:32,240 --> 00:01:36,079
is the back-end framework

00:01:33,520 --> 00:01:37,680
for storage indexing and retrieval of

00:01:36,079 --> 00:01:40,880
the user's personal information

00:01:37,680 --> 00:01:42,640
like contacts calendars and tasks

00:01:40,880 --> 00:01:44,479
so the benefit of aquanaudi is that it

00:01:42,640 --> 00:01:48,159
provides a centralized system

00:01:44,479 --> 00:01:50,000
for user data management otherwise all

00:01:48,159 --> 00:01:52,560
payment apps would have their own cache

00:01:50,000 --> 00:01:53,920
and data management

00:01:52,560 --> 00:01:56,640
icon already provides an extensive

00:01:53,920 --> 00:01:58,079
client api to make development easier

00:01:56,640 --> 00:01:59,759
one such implementation is called the

00:01:58,079 --> 00:02:01,520
accounting resource

00:01:59,759 --> 00:02:03,119
so all external services that are

00:02:01,520 --> 00:02:05,759
integrated into contact

00:02:03,119 --> 00:02:07,040
like as i said google microsoft or the

00:02:05,759 --> 00:02:09,520
dav servers

00:02:07,040 --> 00:02:10,640
all these external services have their

00:02:09,520 --> 00:02:13,120
resources

00:02:10,640 --> 00:02:14,239
have aquanadi resources running which

00:02:13,120 --> 00:02:18,000
interface between the

00:02:14,239 --> 00:02:21,120
between aquanadi and your server

00:02:18,000 --> 00:02:23,440
so my work is to make a new resource

00:02:21,120 --> 00:02:24,879
to enable native editing integration in

00:02:23,440 --> 00:02:26,640
accounting

00:02:24,879 --> 00:02:28,480
note that users could previously also

00:02:26,640 --> 00:02:30,640
use etising

00:02:28,480 --> 00:02:32,640
by setting up the at async dav bridge

00:02:30,640 --> 00:02:35,200
and using the dav resource

00:02:32,640 --> 00:02:38,800
but my project enables native addressing

00:02:35,200 --> 00:02:38,800
integration which is clearly better

00:02:40,000 --> 00:02:43,200
so the project status is that the

00:02:41,440 --> 00:02:44,959
resource is ready for beta testing

00:02:43,200 --> 00:02:47,200
and we would love to have more testers

00:02:44,959 --> 00:02:48,840
so do reach out if you're interested

00:02:47,200 --> 00:02:51,200
i'll give a small demo of the working

00:02:48,840 --> 00:02:54,080
resource

00:02:51,200 --> 00:02:54,879
so here i have k organizer open i can

00:02:54,080 --> 00:02:58,480
add a calendar

00:02:54,879 --> 00:03:02,400
and that is sync entry shows up

00:02:58,480 --> 00:03:02,400
so i'll add my test credentials

00:03:03,519 --> 00:03:06,640
i have locally hosted the resource the

00:03:06,080 --> 00:03:09,840
server

00:03:06,640 --> 00:03:12,959
and that's why this ip is a local ip

00:03:09,840 --> 00:03:15,760
i enter my async encryption password and

00:03:12,959 --> 00:03:16,720
all the events get all the events are

00:03:15,760 --> 00:03:19,760
fetched

00:03:16,720 --> 00:03:20,319
so we can also add a new event let's

00:03:19,760 --> 00:03:23,840
call this

00:03:20,319 --> 00:03:23,840
test event 6

00:03:24,959 --> 00:03:31,519
and we can go to the async web client

00:03:28,400 --> 00:03:33,840
and refresh this to see that it has been

00:03:31,519 --> 00:03:33,840
fetched

00:03:34,400 --> 00:03:38,239
so similarly k address books syncs all

00:03:36,400 --> 00:03:39,200
your address books and contacts so for

00:03:38,239 --> 00:03:42,560
example

00:03:39,200 --> 00:03:42,560
if i delete this contact here

00:03:44,080 --> 00:03:47,440
and if i go to the web client and

00:03:46,319 --> 00:03:49,280
refresh it

00:03:47,440 --> 00:03:50,879
you can see the contact is deleted from

00:03:49,280 --> 00:03:52,319
metasync

00:03:50,879 --> 00:03:54,159
so there's a lot more than this demo

00:03:52,319 --> 00:03:56,159
shows including journal

00:03:54,159 --> 00:03:57,280
addition collection uh journal addition

00:03:56,159 --> 00:04:01,120
modification deletion

00:03:57,280 --> 00:04:02,959
and item modification

00:04:01,120 --> 00:04:05,120
but that's it for this presentation to

00:04:02,959 --> 00:04:08,879
know more about the project you can

00:04:05,120 --> 00:04:10,879
join the irc channels icon at async

00:04:08,879 --> 00:04:12,959
you can read more about the project and

00:04:10,879 --> 00:04:14,959
the status updates on my blog

00:04:12,959 --> 00:04:16,639
or their testing blog or you could also

00:04:14,959 --> 00:04:18,400
contact me directly

00:04:16,639 --> 00:04:21,759
so thank you all thanks a lot for

00:04:18,400 --> 00:04:21,759
listening uh that's it

00:04:25,600 --> 00:04:33,360
hi uh am myself shivam balikundra

00:04:30,240 --> 00:04:36,880
i worked on adding file

00:04:33,360 --> 00:04:38,160
processing for box id during season of

00:04:36,880 --> 00:04:42,000
kde

00:04:38,160 --> 00:04:45,280
uh in year 2020 this summer

00:04:42,000 --> 00:04:48,080
particular introduction about me so

00:04:45,280 --> 00:04:51,199
the contributor for uh as i already said

00:04:48,080 --> 00:04:53,120
i contributed for kde

00:04:51,199 --> 00:04:55,520
and in the past i also contributed from

00:04:53,120 --> 00:04:58,880
chromium and linux as well

00:04:55,520 --> 00:04:59,759
in rush c business and related to

00:04:58,880 --> 00:05:03,759
compilers and

00:04:59,759 --> 00:05:08,080
operating systems coming back to

00:05:03,759 --> 00:05:08,080
my project for doing this sok

00:05:08,240 --> 00:05:14,160
so first i'll start with the basic part

00:05:12,320 --> 00:05:16,880
so what are files so file is a

00:05:14,160 --> 00:05:19,919
collection of data

00:05:16,880 --> 00:05:21,360
then we structurally logically arrange

00:05:19,919 --> 00:05:24,479
this data

00:05:21,360 --> 00:05:25,039
into hierarchical data structure then we

00:05:24,479 --> 00:05:28,479
have

00:05:25,039 --> 00:05:31,280
this respective file formats

00:05:28,479 --> 00:05:32,080
in this case we went with kml file

00:05:31,280 --> 00:05:36,080
format

00:05:32,080 --> 00:05:39,840
so about this python was processed

00:05:36,080 --> 00:05:44,479
first the rox id opens the file

00:05:39,840 --> 00:05:47,840
imports it as a bit stream

00:05:44,479 --> 00:05:51,759
now from the stream it

00:05:47,840 --> 00:05:53,120
we we have file passes written using qr

00:05:51,759 --> 00:05:57,280
passes

00:05:53,120 --> 00:06:00,479
uh in even notation grammar

00:05:57,280 --> 00:06:01,199
so using this grammar the pass passes

00:06:00,479 --> 00:06:06,080
this

00:06:01,199 --> 00:06:08,880
stream and creates a passion to that

00:06:06,080 --> 00:06:09,520
from this parse tree we can generate

00:06:08,880 --> 00:06:12,800
tokens

00:06:09,520 --> 00:06:15,039
which give the real information

00:06:12,800 --> 00:06:17,120
data which is stored in the respective

00:06:15,039 --> 00:06:21,759
files for the respective file format

00:06:17,120 --> 00:06:25,840
which in this case it's the game kml

00:06:21,759 --> 00:06:30,639
so coming to the world that was done

00:06:25,840 --> 00:06:34,080
during the slk for the first week

00:06:30,639 --> 00:06:36,160
there was a debate regarding why i was

00:06:34,080 --> 00:06:39,440
kml

00:06:36,160 --> 00:06:40,800
an important file format that was

00:06:39,440 --> 00:06:43,759
required in

00:06:40,800 --> 00:06:44,240
rox ide so the reason was obvious

00:06:43,759 --> 00:06:47,840
because

00:06:44,240 --> 00:06:51,440
it was quite easy it is finally used

00:06:47,840 --> 00:06:51,840
today and it's user friendly and easy to

00:06:51,440 --> 00:06:55,440
read

00:06:51,840 --> 00:06:57,680
individualized so

00:06:55,440 --> 00:06:58,479
that was the main reason behind this

00:06:57,680 --> 00:07:02,639
during this

00:06:58,479 --> 00:07:05,520
my mentor saw donati

00:07:02,639 --> 00:07:05,919
helped me in guiding me through this

00:07:05,520 --> 00:07:09,840
entire

00:07:05,919 --> 00:07:13,039
network uh till now

00:07:09,840 --> 00:07:14,840
uh after this first week the second and

00:07:13,039 --> 00:07:18,080
third week

00:07:14,840 --> 00:07:19,919
uh we're invested in

00:07:18,080 --> 00:07:21,919
discussing the file structure

00:07:19,919 --> 00:07:24,160
researching on other file formats and

00:07:21,919 --> 00:07:29,280
learning from them

00:07:24,160 --> 00:07:32,000
and after researching and documenting

00:07:29,280 --> 00:07:33,440
an approach uh on the right hand side as

00:07:32,000 --> 00:07:36,880
you can see

00:07:33,440 --> 00:07:42,720
uh this this is the

00:07:36,880 --> 00:07:46,240
file structure of kml in rox ide that

00:07:42,720 --> 00:07:49,759
that is for that we have implemented

00:07:46,240 --> 00:07:52,960
parser and grammar so

00:07:49,759 --> 00:07:53,759
using this pass and grammar we are able

00:07:52,960 --> 00:07:56,879
to

00:07:53,759 --> 00:08:00,720
import and process this file format

00:07:56,879 --> 00:08:04,160
and generate tokens out of it so

00:08:00,720 --> 00:08:04,160
that's the progress till now

00:08:05,120 --> 00:08:09,680
and from the table you can see uh get

00:08:07,440 --> 00:08:13,199
information regarding the various tags

00:08:09,680 --> 00:08:16,319
and in and the information

00:08:13,199 --> 00:08:19,759
the data that the stacks

00:08:16,319 --> 00:08:21,919
contain coming up the rest part is

00:08:19,759 --> 00:08:22,879
integrating this parcel with the graph

00:08:21,919 --> 00:08:26,160
engine

00:08:22,879 --> 00:08:28,160
which will import the tokens and create

00:08:26,160 --> 00:08:32,160
graph out of it

00:08:28,160 --> 00:08:32,160
and testing and documentation

00:08:33,440 --> 00:08:38,000
now on the right side you can see i have

00:08:36,719 --> 00:08:42,159
a screenshot

00:08:38,000 --> 00:08:45,120
of what will be this kml

00:08:42,159 --> 00:08:46,080
file structure look like like it will

00:08:45,120 --> 00:08:49,040
have graph drive

00:08:46,080 --> 00:08:50,160
then types directed then radius for

00:08:49,040 --> 00:08:53,440
nodes

00:08:50,160 --> 00:08:56,720
then color for this node then edge

00:08:53,440 --> 00:08:57,680
defining the different edge from one

00:08:56,720 --> 00:09:00,399
node to another

00:08:57,680 --> 00:09:01,360
and connect to connect one node to other

00:09:00,399 --> 00:09:05,279
and

00:09:01,360 --> 00:09:07,279
its respective color representation

00:09:05,279 --> 00:09:10,080
in the visualization you can see is

00:09:07,279 --> 00:09:12,320
directed to b and b is directed to see

00:09:10,080 --> 00:09:13,200
the adjacent w and the node as well as

00:09:12,320 --> 00:09:16,320
blue

00:09:13,200 --> 00:09:19,519
with ids a b and c and

00:09:16,320 --> 00:09:21,920
on the left hand side we have the pass

00:09:19,519 --> 00:09:23,760
incrementation that is currently

00:09:21,920 --> 00:09:28,000
implemented

00:09:23,760 --> 00:09:31,040
from the entire soc i learned

00:09:28,000 --> 00:09:34,240
it was quite a great experience for me

00:09:31,040 --> 00:09:37,440
i learned the value of open source in

00:09:34,240 --> 00:09:39,839
software development then the positivity

00:09:37,440 --> 00:09:43,920
of community which help

00:09:39,839 --> 00:09:46,560
young developers to get a head start

00:09:43,920 --> 00:09:48,640
in open source and making good

00:09:46,560 --> 00:09:51,760
contributions for it

00:09:48,640 --> 00:09:54,880
and also busy brothers library and

00:09:51,760 --> 00:09:57,920
by processing which was my main interest

00:09:54,880 --> 00:09:59,540
behind this contribution

00:09:57,920 --> 00:10:01,040
so that's all from my side

00:09:59,540 --> 00:10:04,480
[Music]

00:10:01,040 --> 00:10:07,680
thank you hello everyone

00:10:04,480 --> 00:10:11,519
my name is paritosh and i am

00:10:07,680 --> 00:10:12,320
working on on acute 3d based backend for

00:10:11,519 --> 00:10:16,640
k stars

00:10:12,320 --> 00:10:19,360
in my google summer of code 2020.

00:10:16,640 --> 00:10:21,920
my mentors are mike cruz and jason

00:10:19,360 --> 00:10:21,920
matlock

00:10:22,079 --> 00:10:29,600
and you can contact me using this

00:10:25,760 --> 00:10:31,440
so let's begin so first i'll start by

00:10:29,600 --> 00:10:32,399
introducing what a planetarium software

00:10:31,440 --> 00:10:34,560
is

00:10:32,399 --> 00:10:35,760
it's simply a program which simulates

00:10:34,560 --> 00:10:38,880
the night sky

00:10:35,760 --> 00:10:42,079
at any location of the earth

00:10:38,880 --> 00:10:44,800
at any given time and there are separate

00:10:42,079 --> 00:10:45,600
planetarium software such as tellurium k

00:10:44,800 --> 00:10:49,200
stars

00:10:45,600 --> 00:10:51,839
sky map formerly known as google sky map

00:10:49,200 --> 00:10:54,720
now there are more mostly two parts to

00:10:51,839 --> 00:10:58,160
these planetarium softwares the one part

00:10:54,720 --> 00:11:01,760
it focuses on getting the data

00:10:58,160 --> 00:11:05,279
of the positions of the object in 3d

00:11:01,760 --> 00:11:08,480
3d or 2d coordinates and

00:11:05,279 --> 00:11:11,920
the second part is the drawing part

00:11:08,480 --> 00:11:15,360
which actually draws the sky

00:11:11,920 --> 00:11:17,519
objects from the data

00:11:15,360 --> 00:11:18,640
now software is like stellarium they are

00:11:17,519 --> 00:11:22,320
capable of

00:11:18,640 --> 00:11:23,360
drawing in 3d however other softwares

00:11:22,320 --> 00:11:26,480
like

00:11:23,360 --> 00:11:30,320
case stars they currently only use

00:11:26,480 --> 00:11:34,480
a 2d based backend for 2d we have a

00:11:30,320 --> 00:11:34,480
popular backend known as cue painter

00:11:34,959 --> 00:11:39,360
and there was also work on an opengl

00:11:37,519 --> 00:11:42,880
version

00:11:39,360 --> 00:11:46,160
right now what we aim in this

00:11:42,880 --> 00:11:48,640
project is to add a 3d backend and

00:11:46,160 --> 00:11:50,560
which will be based on a qt 3d based

00:11:48,640 --> 00:11:53,519
framework

00:11:50,560 --> 00:11:55,440
so this is a brief overview of how k

00:11:53,519 --> 00:11:59,040
stars actually draws

00:11:55,440 --> 00:12:01,600
the sky objects as i said there is a

00:11:59,040 --> 00:12:02,240
there is a information bit or a data bit

00:12:01,600 --> 00:12:06,720
and uh

00:12:02,240 --> 00:12:08,959
draw a bit so we have the information in

00:12:06,720 --> 00:12:12,639
k stars and we have a class known as

00:12:08,959 --> 00:12:16,079
sky map which is actually the widget

00:12:12,639 --> 00:12:20,320
on which everything is drawn

00:12:16,079 --> 00:12:23,360
so skymap actually can use

00:12:20,320 --> 00:12:26,000
either sky map q draw or sky map

00:12:23,360 --> 00:12:26,639
and gl draw and this q draw this

00:12:26,000 --> 00:12:30,000
actually

00:12:26,639 --> 00:12:32,480
is the cube inter-based back-end widget

00:12:30,000 --> 00:12:34,160
and the gl draw is the opengl based

00:12:32,480 --> 00:12:36,240
back-end widget

00:12:34,160 --> 00:12:38,240
again we have something known as the

00:12:36,240 --> 00:12:41,600
skymap composite

00:12:38,240 --> 00:12:44,240
and and this is where everything

00:12:41,600 --> 00:12:44,240
is drawn

00:12:45,360 --> 00:12:50,720
this controls the draw calls for each

00:12:49,040 --> 00:12:53,760
sky object and this sky

00:12:50,720 --> 00:12:55,360
object is just a base class for

00:12:53,760 --> 00:12:57,519
each and everything this includes

00:12:55,360 --> 00:13:00,880
planets and

00:12:57,519 --> 00:13:04,480
comets moon everything

00:13:00,880 --> 00:13:08,160
the individual classes of these

00:13:04,480 --> 00:13:09,519
have the uh draw call which could either

00:13:08,160 --> 00:13:13,040
either utilize

00:13:09,519 --> 00:13:15,120
cue painter or opengl and this has

00:13:13,040 --> 00:13:17,120
been served using a comma interface

00:13:15,120 --> 00:13:20,560
skype intel

00:13:17,120 --> 00:13:23,279
now since the skype painter draw calls

00:13:20,560 --> 00:13:24,320
which are called in the sky object class

00:13:23,279 --> 00:13:28,000
they

00:13:24,320 --> 00:13:31,519
occur at every paint event so

00:13:28,000 --> 00:13:36,880
we can't you utilize qt 3d

00:13:31,519 --> 00:13:36,880
using this interface we can't do this

00:13:36,959 --> 00:13:41,839
and the reason behind this is because

00:13:39,120 --> 00:13:45,040
qrt3d utilizes something known as

00:13:41,839 --> 00:13:47,199
scene graph as its drawing principle and

00:13:45,040 --> 00:13:50,079
which basically means you have to give

00:13:47,199 --> 00:13:53,760
all the information to qt 3d and

00:13:50,079 --> 00:13:53,760
it will handle the drawing

00:13:55,519 --> 00:13:59,920
thus the only solution to solving this

00:13:58,720 --> 00:14:03,120
problem

00:13:59,920 --> 00:14:08,000
is actually having

00:14:03,120 --> 00:14:12,079
both initialization and update drop

00:14:08,000 --> 00:14:14,800
draw calls in sky map composite

00:14:12,079 --> 00:14:16,399
and this mesh means each and every sky

00:14:14,800 --> 00:14:16,880
object they needs to have these two

00:14:16,399 --> 00:14:19,440
calls

00:14:16,880 --> 00:14:21,279
and the initialization call it will be

00:14:19,440 --> 00:14:24,399
utilized to use

00:14:21,279 --> 00:14:26,000
to initialize the scene graph and the

00:14:24,399 --> 00:14:28,839
update call will just

00:14:26,000 --> 00:14:30,240
is a transformation coordinates or

00:14:28,839 --> 00:14:33,760
anything

00:14:30,240 --> 00:14:34,240
related to projections or colors so this

00:14:33,760 --> 00:14:36,880
was

00:14:34,240 --> 00:14:39,279
what i suggested in the previous slide

00:14:36,880 --> 00:14:39,920
we have a custom window which is derived

00:14:39,279 --> 00:14:44,000
from the q

00:14:39,920 --> 00:14:47,920
3d window and

00:14:44,000 --> 00:14:50,800
each sky object it has the option to

00:14:47,920 --> 00:14:51,279
actually modify the acute 3d window

00:14:50,800 --> 00:14:55,440
which

00:14:51,279 --> 00:14:55,440
the custom window we have used here and

00:14:55,680 --> 00:14:59,519
this will have calls for everything this

00:14:57,839 --> 00:15:03,120
include initializing

00:14:59,519 --> 00:15:06,320
some sky object be it a planet or a moon

00:15:03,120 --> 00:15:07,120
or anything and even for updates update

00:15:06,320 --> 00:15:10,079
calls for all

00:15:07,120 --> 00:15:11,519
although so till now we mainly discuss

00:15:10,079 --> 00:15:14,399
the integration section

00:15:11,519 --> 00:15:15,680
that is how to integrate cube 3d inside

00:15:14,399 --> 00:15:18,079
k-stars

00:15:15,680 --> 00:15:20,880
now we are talking about some

00:15:18,079 --> 00:15:24,000
technicalities related to

00:15:20,880 --> 00:15:24,639
drawing as in using that back-end to

00:15:24,000 --> 00:15:27,839
draw

00:15:24,639 --> 00:15:30,000
in 3d and this mainly covers two main

00:15:27,839 --> 00:15:31,920
topics which is astronomical projections

00:15:30,000 --> 00:15:35,839
and instance rendering

00:15:31,920 --> 00:15:38,560
so we generally when we use

00:15:35,839 --> 00:15:40,639
3d software or we play 3d games we

00:15:38,560 --> 00:15:45,440
actually use something known as

00:15:40,639 --> 00:15:45,440
perspective or orthogonal

00:15:45,519 --> 00:15:50,160
projection they however don't apply for

00:15:48,880 --> 00:15:53,279
astronomical soft

00:15:50,160 --> 00:15:55,040
softwares and for astronomical softwares

00:15:53,279 --> 00:15:58,240
we have a set of

00:15:55,040 --> 00:16:01,279
six projections inside k stars

00:15:58,240 --> 00:16:05,440
these include lambert

00:16:01,279 --> 00:16:08,880
or eqe rectangular etc

00:16:05,440 --> 00:16:11,120
now the main complexion was to employ

00:16:08,880 --> 00:16:11,120
the

00:16:12,079 --> 00:16:16,240
you know these projections inside the

00:16:14,800 --> 00:16:19,920
shaders

00:16:16,240 --> 00:16:23,440
and when we are drawing it so instead of

00:16:19,920 --> 00:16:25,519
the x y or z coordinate which is served

00:16:23,440 --> 00:16:27,600
and which is given to the s vertex

00:16:25,519 --> 00:16:30,160
position to the

00:16:27,600 --> 00:16:31,360
vertex shader while drawing we have

00:16:30,160 --> 00:16:33,600
actually

00:16:31,360 --> 00:16:34,959
have to give the right ascension and the

00:16:33,600 --> 00:16:39,519
declination

00:16:34,959 --> 00:16:42,880
of the sky object to the vertex shader

00:16:39,519 --> 00:16:45,279
and this will actually

00:16:42,880 --> 00:16:46,480
project it using one of the six

00:16:45,279 --> 00:16:48,959
projection

00:16:46,480 --> 00:16:50,959
astronomical projections and project

00:16:48,959 --> 00:16:53,279
them on a 2d screen

00:16:50,959 --> 00:16:54,399
and then it is further given to the

00:16:53,279 --> 00:16:58,079
fragment shader which

00:16:54,399 --> 00:17:00,240
handles the coloring etc

00:16:58,079 --> 00:17:01,360
so this was a difficult bit to tackle

00:17:00,240 --> 00:17:03,680
and was the main

00:17:01,360 --> 00:17:04,959
first was the first problem in the

00:17:03,680 --> 00:17:07,360
drawing site

00:17:04,959 --> 00:17:08,880
the second problem is related to

00:17:07,360 --> 00:17:12,319
instance rendering

00:17:08,880 --> 00:17:15,600
so as k stars it can have

00:17:12,319 --> 00:17:16,319
a lot of stars or a lot of sky objects

00:17:15,600 --> 00:17:20,240
and

00:17:16,319 --> 00:17:22,240
we can't draw all of them individually

00:17:20,240 --> 00:17:24,400
by giving like separate buffers for

00:17:22,240 --> 00:17:28,160
every every time we send

00:17:24,400 --> 00:17:30,160
send shader info to a graphic card

00:17:28,160 --> 00:17:32,240
to solve this we use something known as

00:17:30,160 --> 00:17:34,320
instance rendering

00:17:32,240 --> 00:17:35,679
which is we give all the vertex

00:17:34,320 --> 00:17:38,960
positions

00:17:35,679 --> 00:17:40,960
and other shader information

00:17:38,960 --> 00:17:42,480
in the like that is the other shader

00:17:40,960 --> 00:17:46,480
parameters

00:17:42,480 --> 00:17:48,720
in just one buffer and it handles

00:17:46,480 --> 00:17:50,799
the drawing for multiple objects at the

00:17:48,720 --> 00:17:53,360
same time

00:17:50,799 --> 00:17:53,919
so instance rendering was utilized

00:17:53,360 --> 00:17:57,280
throughout

00:17:53,919 --> 00:18:00,960
k starts and most importantly when

00:17:57,280 --> 00:18:05,360
we are we use it to draw

00:18:00,960 --> 00:18:08,960
stars and the grid

00:18:05,360 --> 00:18:10,080
so this can include the grid lines which

00:18:08,960 --> 00:18:13,280
are similar to

00:18:10,080 --> 00:18:18,000
a latitude of latitude or longitude

00:18:13,280 --> 00:18:18,000
for learn sanitarium softwares

00:18:18,559 --> 00:18:25,280
so for example for rendering starts we

00:18:22,000 --> 00:18:28,880
actually just place the points

00:18:25,280 --> 00:18:29,919
at the given writer's ascension and

00:18:28,880 --> 00:18:33,200
declination

00:18:29,919 --> 00:18:35,520
or for that projection and then we pass

00:18:33,200 --> 00:18:37,919
in this happens in the vertex shader and

00:18:35,520 --> 00:18:40,960
then we pass it to a geometric shader

00:18:37,919 --> 00:18:44,080
which just summons a coordinate fill

00:18:40,960 --> 00:18:47,360
at that particular point and

00:18:44,080 --> 00:18:48,000
it has the texture for the star we want

00:18:47,360 --> 00:18:49,840
to draw

00:18:48,000 --> 00:18:51,440
and then it is passed to the fragment

00:18:49,840 --> 00:18:54,320
shader

00:18:51,440 --> 00:18:55,039
the results and as you can see we have

00:18:54,320 --> 00:18:56,720
our sun

00:18:55,039 --> 00:18:58,240
we have a few red lines we have a few

00:18:56,720 --> 00:19:01,120
stars and

00:18:58,240 --> 00:19:02,720
so some keyboard and mouse actions are

00:19:01,120 --> 00:19:06,559
working right now

00:19:02,720 --> 00:19:08,720
these include this include zooming and

00:19:06,559 --> 00:19:10,080
panning and changing projections or

00:19:08,720 --> 00:19:14,320
turning of the particular

00:19:10,080 --> 00:19:17,520
sky object similarly we have

00:19:14,320 --> 00:19:19,760
more textures and we'll

00:19:17,520 --> 00:19:22,480
add more 3d models for the other sky

00:19:19,760 --> 00:19:25,840
objects as well

00:19:22,480 --> 00:19:27,919
so this was my work and thank you and

00:19:25,840 --> 00:19:30,080
you are free to ask any queries that you

00:19:27,919 --> 00:19:30,080
have

00:19:31,679 --> 00:19:36,640
hello everyone my name is anuj bansal

00:19:34,720 --> 00:19:38,320
and i'm a final year undergraduate

00:19:36,640 --> 00:19:40,559
student from india

00:19:38,320 --> 00:19:42,799
i have been working with the kde web

00:19:40,559 --> 00:19:44,559
team since december 2019

00:19:42,799 --> 00:19:46,000
and i'm currently working on improving

00:19:44,559 --> 00:19:48,880
the web infrastructure

00:19:46,000 --> 00:19:50,000
for kde as part of google summer of code

00:19:48,880 --> 00:19:53,200
2020.

00:19:50,000 --> 00:19:55,520
my gsoc project consists of two parts

00:19:53,200 --> 00:19:57,960
as the first part of my project i worked

00:19:55,520 --> 00:20:01,520
on porting kde's main website

00:19:57,960 --> 00:20:03,679
kde.org to hugo the website is currently

00:20:01,520 --> 00:20:05,679
built using php

00:20:03,679 --> 00:20:06,720
now the website for the most part is a

00:20:05,679 --> 00:20:08,960
static website

00:20:06,720 --> 00:20:10,559
and the parts of it that are dynamic

00:20:08,960 --> 00:20:13,679
like the applications page

00:20:10,559 --> 00:20:15,200
have already been built as a subsite so

00:20:13,679 --> 00:20:16,960
it doesn't make a lot of sense to use

00:20:15,200 --> 00:20:19,520
php for it

00:20:16,960 --> 00:20:20,559
there's also a lot of problems like slow

00:20:19,520 --> 00:20:23,520
build times and

00:20:20,559 --> 00:20:25,600
the need for manual work for example the

00:20:23,520 --> 00:20:27,840
list of announcements on the website

00:20:25,600 --> 00:20:30,320
is built manually by adding each

00:20:27,840 --> 00:20:33,679
announcement to a list

00:20:30,320 --> 00:20:35,679
this is where hugo comes into play hugo

00:20:33,679 --> 00:20:36,400
is a static site generator based on

00:20:35,679 --> 00:20:38,960
golang

00:20:36,400 --> 00:20:40,720
and provides great speed and flexibility

00:20:38,960 --> 00:20:42,000
it solves many of the problems with the

00:20:40,720 --> 00:20:44,320
php site

00:20:42,000 --> 00:20:47,039
it allows us to construct layouts which

00:20:44,320 --> 00:20:49,440
reduce the amount of duplicate code

00:20:47,039 --> 00:20:51,440
for example every announcement on only

00:20:49,440 --> 00:20:53,120
changes slightly from the other ones

00:20:51,440 --> 00:20:56,159
so we can have a layout that has the

00:20:53,120 --> 00:20:58,720
dynamic part inserted into it

00:20:56,159 --> 00:21:00,559
there are also huber short codes that

00:20:58,720 --> 00:21:02,320
are sort of like functions that provide

00:21:00,559 --> 00:21:05,039
some syntactic sugar

00:21:02,320 --> 00:21:07,440
i can use the single line of code to

00:21:05,039 --> 00:21:09,600
embed a youtube video into a page

00:21:07,440 --> 00:21:12,559
and we can also create some custom

00:21:09,600 --> 00:21:14,400
shortcuts for some functionality

00:21:12,559 --> 00:21:16,159
i'm happy to say that this part of my

00:21:14,400 --> 00:21:18,159
project is now complete and

00:21:16,159 --> 00:21:20,799
is now being tested after which it can

00:21:18,159 --> 00:21:20,799
be deployed

00:21:21,360 --> 00:21:25,760
the second part of my project involves a

00:21:23,600 --> 00:21:26,960
complete revamp of the season of kde

00:21:25,760 --> 00:21:29,120
website

00:21:26,960 --> 00:21:32,240
the website now looks much more modern

00:21:29,120 --> 00:21:32,240
and mobile friendly

00:21:33,679 --> 00:21:37,840
the website now also uses the new oauth

00:21:36,240 --> 00:21:40,000
based identity service

00:21:37,840 --> 00:21:42,400
that is currently being built by my

00:21:40,000 --> 00:21:44,159
mentor carl

00:21:42,400 --> 00:21:45,760
some of the new functionality on the

00:21:44,159 --> 00:21:48,240
website includes

00:21:45,760 --> 00:21:48,799
a nice and easy to use admin panel

00:21:48,240 --> 00:21:51,039
badges

00:21:48,799 --> 00:21:52,799
assigned to students and mentors and the

00:21:51,039 --> 00:21:54,720
support for multiple mentors for a

00:21:52,799 --> 00:21:57,039
project

00:21:54,720 --> 00:21:58,640
one of the most helpful new features i

00:21:57,039 --> 00:21:59,440
believe would be the new markdown

00:21:58,640 --> 00:22:01,520
support

00:21:59,440 --> 00:22:13,840
the students can have much more detailed

00:22:01,520 --> 00:22:13,840
and nice looking proposals

00:22:14,960 --> 00:22:18,880
some of the students may remember from

00:22:16,720 --> 00:22:21,760
some random html being added to their

00:22:18,880 --> 00:22:23,840
proposal from last year

00:22:21,760 --> 00:22:25,360
currently i'm working on adding the

00:22:23,840 --> 00:22:27,200
ability for the mentors

00:22:25,360 --> 00:22:29,520
and students to be able to comment on

00:22:27,200 --> 00:22:31,840
the proposals for feedback

00:22:29,520 --> 00:22:35,520
and also automatic certificate

00:22:31,840 --> 00:22:35,520
generation at the end of the program

00:22:35,600 --> 00:22:39,120
finally i would like to say that it has

00:22:37,679 --> 00:22:41,840
been a wonderful experience

00:22:39,120 --> 00:22:43,280
contributing to the kde community that's

00:22:41,840 --> 00:22:44,240
all from me thank you so much for

00:22:43,280 --> 00:22:55,840
listening to me

00:22:44,240 --> 00:22:55,840

YouTube URL: https://www.youtube.com/watch?v=vBn6U-Aq2cs


