Title: SOLID Clouds
Publication date: 2018-06-06
Playlist: Software Architecture
Description: 
	Kevin German presented SOLID Clouds at Code & Supply in Pittsburgh, PA on May 30, 2018.

Slides: https://drive.google.com/open?id=1hnzEfwHrYAZHCTF0Ts3kOY744r489GUs

Learn more at http://www.codeandsupply.co
Captions: 
	00:00:00,000 --> 00:00:04,980
so I'll just get started like Colin said

00:00:03,540 --> 00:00:07,049
they started the architecture group and

00:00:04,980 --> 00:00:08,429
some of my friends who were starting

00:00:07,049 --> 00:00:09,990
that group reached out and said hey

00:00:08,429 --> 00:00:12,630
would you like to do a talk and I said

00:00:09,990 --> 00:00:14,040
no and then I thought well I always say

00:00:12,630 --> 00:00:19,310
that so maybe I'll do it this time and

00:00:14,040 --> 00:00:22,170
Here I am um so this this talk is about

00:00:19,310 --> 00:00:23,910
but totally said taking the solid

00:00:22,170 --> 00:00:25,650
principles it is not about

00:00:23,910 --> 00:00:27,269
object-oriented design

00:00:25,650 --> 00:00:29,160
that's what solid is about that's what

00:00:27,269 --> 00:00:31,650
there are many many great lectures from

00:00:29,160 --> 00:00:35,130
really smart people on online dr. Bob

00:00:31,650 --> 00:00:38,730
Martin is the founder of this that that

00:00:35,130 --> 00:00:41,850
ideology this is about cloud

00:00:38,730 --> 00:00:43,950
architectures and as I was going through

00:00:41,850 --> 00:00:45,390
the slides last night I thought this

00:00:43,950 --> 00:00:47,730
really isn't even an architecture talk

00:00:45,390 --> 00:00:51,600
this is a DevOps talk but the good news

00:00:47,730 --> 00:00:53,760
is one way to have solid architecture is

00:00:51,600 --> 00:00:56,219
to have a solid understanding of how all

00:00:53,760 --> 00:00:58,410
the pieces are coming together that's in

00:00:56,219 --> 00:01:02,850
large part at least in my opinion what

00:00:58,410 --> 00:01:05,400
DevOps is about so you're wondering

00:01:02,850 --> 00:01:06,720
about the pony when I googled solid

00:01:05,400 --> 00:01:08,640
clouds to see if anybody else was

00:01:06,720 --> 00:01:12,600
talking about this this was the only hit

00:01:08,640 --> 00:01:17,520
in Google so that's what it's really

00:01:12,600 --> 00:01:19,290
about just a quick disclaimer my

00:01:17,520 --> 00:01:20,670
opinions are mine not my employers my

00:01:19,290 --> 00:01:23,369
employer has lots of great opinions I

00:01:20,670 --> 00:01:25,080
work at pet um we're hiring on most of

00:01:23,369 --> 00:01:26,580
the slides you will see a QR code if I'm

00:01:25,080 --> 00:01:27,630
getting boring got your phone shoot the

00:01:26,580 --> 00:01:30,270
QR code there's something interesting

00:01:27,630 --> 00:01:32,520
there Easter eggs this one is the link

00:01:30,270 --> 00:01:35,960
to get a job attach them then you can

00:01:32,520 --> 00:01:35,960
ask my dress it's a great place to work

00:01:37,049 --> 00:01:42,030
so I'm going to go through a couple

00:01:40,289 --> 00:01:45,750
background slides just to cover the

00:01:42,030 --> 00:01:48,299
basics this this slide is from a talk by

00:01:45,750 --> 00:01:51,060
Sam Newman about micro service

00:01:48,299 --> 00:01:53,100
architecture again a great read if you

00:01:51,060 --> 00:01:54,329
click through to that these slides will

00:01:53,100 --> 00:01:58,100
be posted later I'll link it in the

00:01:54,329 --> 00:01:58,100
architecture group on the slide channel

00:01:59,329 --> 00:02:04,890
so the general idea I mean there are a

00:02:03,479 --> 00:02:06,659
lot of different principles that Sam

00:02:04,890 --> 00:02:09,539
talks about going into the design of a

00:02:06,659 --> 00:02:11,069
good Microsoft's architecture but one of

00:02:09,539 --> 00:02:13,950
the things that I noticed in here that

00:02:11,069 --> 00:02:15,480
very is very similar to what I'm going

00:02:13,950 --> 00:02:17,340
to be talking about is the idea of

00:02:15,480 --> 00:02:23,459
isolation the idea of independence the

00:02:17,340 --> 00:02:26,970
idea of keeping things simple another

00:02:23,459 --> 00:02:28,440
thing another thing to keep in mind when

00:02:26,970 --> 00:02:29,940
when I at least what I'm talking about

00:02:28,440 --> 00:02:31,530
cloud architectures discriminatees

00:02:29,940 --> 00:02:35,190
because that's the box that I live in

00:02:31,530 --> 00:02:40,200
most days kubernetes is a fabric for

00:02:35,190 --> 00:02:43,829
deploying micro services really before

00:02:40,200 --> 00:02:51,120
deploying themes in containers on on a

00:02:43,829 --> 00:02:53,209
cloud on a cloud architecture so Heroku

00:02:51,120 --> 00:02:58,799
put together these twelve factors

00:02:53,209 --> 00:03:00,920
as best practices for for building for

00:02:58,799 --> 00:03:05,880
building applications on their platform

00:03:00,920 --> 00:03:08,870
and you know since the talk is really

00:03:05,880 --> 00:03:11,760
about building solid cloud applications

00:03:08,870 --> 00:03:13,200
why am I not why isn't it twelve back to

00:03:11,760 --> 00:03:17,040
talk because there's a lot of tool

00:03:13,200 --> 00:03:18,389
factor talks because I'm lazy and

00:03:17,040 --> 00:03:20,970
remembering five things is a lot easier

00:03:18,389 --> 00:03:23,310
than rendering twelve and most of all

00:03:20,970 --> 00:03:26,440
because talking about solid clouds give

00:03:23,310 --> 00:03:30,340
me an excuse to use the pony gift

00:03:26,440 --> 00:03:32,380
and the last background slide is is what

00:03:30,340 --> 00:03:36,040
we're here to talk about except not

00:03:32,380 --> 00:03:37,600
object-oriented design just I'll quickly

00:03:36,040 --> 00:03:39,550
bust through them and then we're gonna

00:03:37,600 --> 00:03:43,500
go through a lot more detail in the next

00:03:39,550 --> 00:03:46,420
30 or 40 slides so the personal ones

00:03:43,500 --> 00:03:49,510
single responsibility principle is I

00:03:46,420 --> 00:03:50,770
think of it as the rule of one it's

00:03:49,510 --> 00:03:56,370
about keeping it simple keeping it

00:03:50,770 --> 00:03:56,370
isolated the open-closed principle is

00:03:56,760 --> 00:04:04,480
the tagline for that has changes bad

00:04:00,210 --> 00:04:07,350
let's golf substitution is really just a

00:04:04,480 --> 00:04:10,750
reasonable expectation of types

00:04:07,350 --> 00:04:14,590
interface segregation principle is the

00:04:10,750 --> 00:04:18,700
rule of small and dependency inversion

00:04:14,590 --> 00:04:20,200
is about decoupling there's some

00:04:18,700 --> 00:04:20,980
concepts to keep in mind as we're going

00:04:20,200 --> 00:04:29,500
through this the single responsibility

00:04:20,980 --> 00:04:32,140
is like I said it's the rule of one the

00:04:29,500 --> 00:04:36,490
idea of being that it should only change

00:04:32,140 --> 00:04:39,160
when when the requirements change and if

00:04:36,490 --> 00:04:43,870
you have if your thing only has one

00:04:39,160 --> 00:04:46,510
reason for being one concept if it's

00:04:43,870 --> 00:04:48,130
isolated then the reason the reasons for

00:04:46,510 --> 00:04:49,240
which you may have to change it the

00:04:48,130 --> 00:04:50,290
reasons for which it will break the

00:04:49,240 --> 00:04:54,820
reasons for which what bugs will be

00:04:50,290 --> 00:04:57,340
introduced becomes a lot smaller and

00:04:54,820 --> 00:04:59,580
with a smaller bucket you have fewer

00:04:57,340 --> 00:04:59,580
bugs

00:05:01,710 --> 00:05:07,120
you have a single point of truth when

00:05:04,930 --> 00:05:08,500
you package your thing together it's in

00:05:07,120 --> 00:05:12,130
a single package whether it's a tarball

00:05:08,500 --> 00:05:14,199
or a help a cage or a dead file but

00:05:12,130 --> 00:05:16,419
there is a way to package it that gets

00:05:14,199 --> 00:05:18,910
all the miscellaneous parts where they

00:05:16,419 --> 00:05:20,889
belong the way that they belong you

00:05:18,910 --> 00:05:22,330
don't want to check out a git repo and

00:05:20,889 --> 00:05:25,660
try and build it on your production

00:05:22,330 --> 00:05:31,740
servers that will work a bunch of times

00:05:25,660 --> 00:05:31,740
and then it won't in a really bad way so

00:05:32,729 --> 00:05:36,460
taking taking a look at the single

00:05:34,780 --> 00:05:42,190
responsibility principle as it applies

00:05:36,460 --> 00:05:43,810
to DevOps some just some ideas take away

00:05:42,190 --> 00:05:45,820
you know when we talk about it in

00:05:43,810 --> 00:05:48,190
object-oriented design we're saying

00:05:45,820 --> 00:05:50,680
we're thinking about one class you know

00:05:48,190 --> 00:05:54,820
that function has one purpose there's

00:05:50,680 --> 00:05:56,979
there's a single path of execution but

00:05:54,820 --> 00:05:58,090
when we expand these concepts out and we

00:05:56,979 --> 00:06:01,289
start talking about how they apply to

00:05:58,090 --> 00:06:04,509
our cloud design or to our DevOps

00:06:01,289 --> 00:06:06,639
principles some of the things you can

00:06:04,509 --> 00:06:11,259
think about is I'm gonna have one one

00:06:06,639 --> 00:06:16,360
git repo for a thing whether it's a DLL

00:06:11,259 --> 00:06:19,259
or a jar file or you know you know it's

00:06:16,360 --> 00:06:22,090
it's the content side of your website or

00:06:19,259 --> 00:06:24,940
but you've got these things isolated in

00:06:22,090 --> 00:06:25,270
a single codebase that builds into a

00:06:24,940 --> 00:06:29,200
thing

00:06:25,270 --> 00:06:30,580
releasable thing one package and each

00:06:29,200 --> 00:06:32,920
one of those things has an explicit

00:06:30,580 --> 00:06:35,320
version or tag for release so that you

00:06:32,920 --> 00:06:39,100
always know which one of that thing is

00:06:35,320 --> 00:06:41,560
it one action per build jump so as your

00:06:39,100 --> 00:06:42,970
you've got your build script and it's

00:06:41,560 --> 00:06:45,010
very easy to understand where did this

00:06:42,970 --> 00:06:47,200
fail you can see which balloon turned

00:06:45,010 --> 00:06:48,670
red which which line has the big fatal

00:06:47,200 --> 00:06:49,900
on if Vincent much easier to trace in

00:06:48,670 --> 00:06:52,060
and figure out where you made your

00:06:49,900 --> 00:06:55,150
mistake and turn it around and that's a

00:06:52,060 --> 00:06:57,970
big part of keeping you know that the

00:06:55,150 --> 00:06:59,440
idea of single responsibilities is if

00:06:57,970 --> 00:07:01,120
there's only a single responsibility if

00:06:59,440 --> 00:07:03,790
there's only a single behavior for the

00:07:01,120 --> 00:07:05,470
thing then there's only one ideally one

00:07:03,790 --> 00:07:07,510
way that it's going to break and it

00:07:05,470 --> 00:07:10,770
becomes much simpler to diagnose fix and

00:07:07,510 --> 00:07:13,150
move on so you don't get locked out and

00:07:10,770 --> 00:07:16,030
just keep going one source for trusted

00:07:13,150 --> 00:07:18,040
artifacts a single configuration

00:07:16,030 --> 00:07:20,350
template but maybe that configuration

00:07:18,040 --> 00:07:22,120
template breaks out into multiple value

00:07:20,350 --> 00:07:27,220
sets one for dad one for production one

00:07:22,120 --> 00:07:28,210
for my desktop one for yours another way

00:07:27,220 --> 00:07:31,360
that you can look at single

00:07:28,210 --> 00:07:35,380
responsibility applying to beyond just

00:07:31,360 --> 00:07:38,320
the code base thing about testability so

00:07:35,380 --> 00:07:40,090
each thing should be testable each of

00:07:38,320 --> 00:07:41,770
those tests should have a single path of

00:07:40,090 --> 00:07:47,590
execution through a single assertion to

00:07:41,770 --> 00:07:49,750
the test and just the simple quality of

00:07:47,590 --> 00:07:51,370
is it testimony can is there something

00:07:49,750 --> 00:07:53,710
that I can identify about this thing I

00:07:51,370 --> 00:07:56,010
built that I can describe in terms of

00:07:53,710 --> 00:07:56,010
the test

00:08:02,429 --> 00:08:07,769
so moving on to the Olaf solid open for

00:08:06,549 --> 00:08:12,789
extension closed for modification

00:08:07,769 --> 00:08:15,759
there's you and I want to stumble across

00:08:12,789 --> 00:08:18,329
this notion of it this is the definition

00:08:15,759 --> 00:08:21,789
right there it's a Lego brick

00:08:18,329 --> 00:08:23,289
they are infinitely composable but

00:08:21,789 --> 00:08:24,759
you're not going to take it apart this

00:08:23,289 --> 00:08:26,199
is only going to have eight bumps on the

00:08:24,759 --> 00:08:27,759
top it's only gonna have eight bumps on

00:08:26,199 --> 00:08:28,689
the page sockets on the bottom with

00:08:27,759 --> 00:08:31,869
those three little holes if you're

00:08:28,689 --> 00:08:36,579
feeling kind of crazy but it doesn't

00:08:31,869 --> 00:08:38,729
change but you can do myriad things with

00:08:36,579 --> 00:08:38,729
it

00:08:39,550 --> 00:08:46,569
the big takeaway from the tagline for

00:08:42,899 --> 00:08:50,529
open percent OCP principle of extension

00:08:46,569 --> 00:08:53,170
closed for modification is that you want

00:08:50,529 --> 00:08:54,670
to resist change so this this Lego brick

00:08:53,170 --> 00:08:56,529
is not going to change by the way that's

00:08:54,670 --> 00:08:58,240
not a little brick if somebody's CAD

00:08:56,529 --> 00:08:59,350
drawing that was in free images online

00:08:58,240 --> 00:09:04,089
because all the Lego stuff is

00:08:59,350 --> 00:09:05,350
copyrighted but it's it's not going to

00:09:04,089 --> 00:09:08,559
change you're not going to mutate it

00:09:05,350 --> 00:09:10,629
you're not going to modify its behavior

00:09:08,559 --> 00:09:14,939
but how you use it it's a brick it's a

00:09:10,629 --> 00:09:21,399
car it's a leg it's a foot it's a hat

00:09:14,939 --> 00:09:23,410
it's all about context so when we when

00:09:21,399 --> 00:09:26,290
we take that open closed principle out

00:09:23,410 --> 00:09:31,059
to the cloud one of the ways that really

00:09:26,290 --> 00:09:33,850
is seems pretty clear to me when I think

00:09:31,059 --> 00:09:35,529
about it is how my code behaves

00:09:33,850 --> 00:09:38,110
depending on the configuration set that

00:09:35,529 --> 00:09:40,629
I give it so when I build my code into

00:09:38,110 --> 00:09:41,800
containers but yeah twelve factor talks

00:09:40,629 --> 00:09:44,610
about storing the config in the

00:09:41,800 --> 00:09:47,050
environment is one of the twelve factors

00:09:44,610 --> 00:09:51,399
and so when I start to think about that

00:09:47,050 --> 00:09:53,319
in kubernetes I'm isolating my secrets

00:09:51,399 --> 00:09:55,959
so my secrets are deployed as up being

00:09:53,319 --> 00:09:58,120
in my kubernetes environment in a

00:09:55,959 --> 00:10:00,449
particular namespace or you know

00:09:58,120 --> 00:10:04,029
generally across all the namespaces and

00:10:00,449 --> 00:10:06,610
they are separate from the from the code

00:10:04,029 --> 00:10:09,129
itself which means so that's a way that

00:10:06,610 --> 00:10:10,600
OCP begins to affect the overall

00:10:09,129 --> 00:10:13,060
security of my platform

00:10:10,600 --> 00:10:15,490
if any of you have ever looked in a git

00:10:13,060 --> 00:10:18,459
repo or in other source control and seen

00:10:15,490 --> 00:10:25,120
passwords or certificates so it's not

00:10:18,459 --> 00:10:27,279
where you want to be not in the source

00:10:25,120 --> 00:10:29,410
code not well so 12 factor means

00:10:27,279 --> 00:10:31,300
specifically they say specifically in

00:10:29,410 --> 00:10:33,069
the environment but I would and I

00:10:31,300 --> 00:10:35,709
generalize it a lot more to just say

00:10:33,069 --> 00:10:37,959
it's in its own place it's separate from

00:10:35,709 --> 00:10:39,910
so there are secrets and you have a way

00:10:37,959 --> 00:10:41,050
to get secrets in and it's only about

00:10:39,910 --> 00:10:42,639
you know getting back to seeing

00:10:41,050 --> 00:10:45,040
responsibility there's all these

00:10:42,639 --> 00:10:47,139
principles no one of them is terribly

00:10:45,040 --> 00:10:50,860
useful if you try to religiously follow

00:10:47,139 --> 00:10:53,319
a particular one it might make your code

00:10:50,860 --> 00:10:54,790
better but it might also you end up kind

00:10:53,319 --> 00:10:56,889
of lost they all go together they all

00:10:54,790 --> 00:11:00,399
feed to get feed into one another to

00:10:56,889 --> 00:11:05,110
build a more solid application

00:11:00,399 --> 00:11:06,610
architecture through with so in

00:11:05,110 --> 00:11:09,420
kubernetes you all I'll take those

00:11:06,610 --> 00:11:11,920
secrets out of the code but I'll also

00:11:09,420 --> 00:11:14,380
inherit a lot of environment from my

00:11:11,920 --> 00:11:16,300
namespace from the cloud room deploying

00:11:14,380 --> 00:11:18,069
if I'm an AWS there are certain

00:11:16,300 --> 00:11:21,939
variables that are going to be injected

00:11:18,069 --> 00:11:23,980
into my runtime there are and then

00:11:21,939 --> 00:11:26,139
within my crib nineties deployment there

00:11:23,980 --> 00:11:27,639
are additional environment variables

00:11:26,139 --> 00:11:30,009
that will be set and all of those will

00:11:27,639 --> 00:11:31,810
filter in and if I build my containers

00:11:30,009 --> 00:11:34,800
so that they're reading in a lot of that

00:11:31,810 --> 00:11:39,550
information just from the environment

00:11:34,800 --> 00:11:41,680
then there there's those nested contexts

00:11:39,550 --> 00:11:45,189
begin to change the behavior of what I'm

00:11:41,680 --> 00:11:48,970
deploying how many how many replicas do

00:11:45,189 --> 00:11:53,670
I get what what subdomain are they

00:11:48,970 --> 00:11:59,079
looking up other services on permissions

00:11:53,670 --> 00:12:01,870
storage backends instead of so then an

00:11:59,079 --> 00:12:05,170
additional then you can so but one of

00:12:01,870 --> 00:12:07,540
the things I get with kubernetes is so I

00:12:05,170 --> 00:12:09,970
packaged my code in one thing and I've

00:12:07,540 --> 00:12:11,829
got configuration and I've got my

00:12:09,970 --> 00:12:14,050
container and now I need a way to pull

00:12:11,829 --> 00:12:17,589
all that together helm is a tool that I

00:12:14,050 --> 00:12:19,959
use to pull all those things together it

00:12:17,589 --> 00:12:22,389
gives me a way to I can still very

00:12:19,959 --> 00:12:22,860
explicitly declare this is the value set

00:12:22,389 --> 00:12:25,230
for this

00:12:22,860 --> 00:12:26,850
particular installation I can also have

00:12:25,230 --> 00:12:29,190
another value set that's built into the

00:12:26,850 --> 00:12:31,530
helm package and then yet another value

00:12:29,190 --> 00:12:36,390
set that's built into the spec or or

00:12:31,530 --> 00:12:38,490
that pod for that kubernetes app and it

00:12:36,390 --> 00:12:41,070
just each of those abstractions each of

00:12:38,490 --> 00:12:44,070
those layers is defining just that

00:12:41,070 --> 00:12:45,660
single that single behavior but then as

00:12:44,070 --> 00:12:47,190
they all fold together they begin to

00:12:45,660 --> 00:12:53,430
affect the behavior of the overall

00:12:47,190 --> 00:12:57,180
system a little ranch that I've been

00:12:53,430 --> 00:12:59,550
banging my head against lately is is

00:12:57,180 --> 00:13:02,460
anybody familiar with docker latest

00:12:59,550 --> 00:13:05,100
we're gonna get pool latest and then you

00:13:02,460 --> 00:13:06,930
run it and then you come back week later

00:13:05,100 --> 00:13:08,600
and push some changes you got a new

00:13:06,930 --> 00:13:11,910
container out there it's working great

00:13:08,600 --> 00:13:13,830
get pool latest get pool comes back

00:13:11,910 --> 00:13:15,140
immediately you run it it still was

00:13:13,830 --> 00:13:18,840
broken as it was the day before

00:13:15,140 --> 00:13:20,070
yeah that's cuz it's a tag and just

00:13:18,840 --> 00:13:21,480
thing is that so

00:13:20,070 --> 00:13:23,820
a lot of what I'm trying to talk about

00:13:21,480 --> 00:13:25,760
is the right way to do it but this is a

00:13:23,820 --> 00:13:28,010
case where docker kind of blew it

00:13:25,760 --> 00:13:29,930
they've got another thing called labels

00:13:28,010 --> 00:13:32,160
labels on the other hand are immutable

00:13:29,930 --> 00:13:34,410
when I create a new container I do

00:13:32,160 --> 00:13:36,510
darker build I can specify label get

00:13:34,410 --> 00:13:38,520
hash I can specify label for the

00:13:36,510 --> 00:13:40,980
architecture I can specify a label for

00:13:38,520 --> 00:13:42,870
my birthday just in case you guys want

00:13:40,980 --> 00:13:45,360
to keep track of it I can specify label

00:13:42,870 --> 00:13:47,340
for anything and those are fixed in the

00:13:45,360 --> 00:13:49,650
container image unfortunately the only

00:13:47,340 --> 00:13:51,330
way I can see them is by running docker

00:13:49,650 --> 00:13:54,930
inspect and parsing that JSON out and

00:13:51,330 --> 00:13:57,180
extracting those values so they've got

00:13:54,930 --> 00:14:00,810
the feature that you need to be able to

00:13:57,180 --> 00:14:04,410
get the thing that you need except it's

00:14:00,810 --> 00:14:07,290
hidden behind tags which everybody

00:14:04,410 --> 00:14:09,410
changes tags and the docker pull

00:14:07,290 --> 00:14:11,670
mechanism doesn't really quite work

00:14:09,410 --> 00:14:13,920
kubernetes they addressed it somewhat

00:14:11,670 --> 00:14:17,220
with pull policies so I can have a pool

00:14:13,920 --> 00:14:19,590
policy on my pod which is my collection

00:14:17,220 --> 00:14:22,230
of one or more docker containers that

00:14:19,590 --> 00:14:26,490
says always pull sometimes pull pull

00:14:22,230 --> 00:14:29,910
weakly but that's a case of a leaky

00:14:26,490 --> 00:14:34,050
abstraction so we've got the

00:14:29,910 --> 00:14:36,240
responsibility for which one of the

00:14:34,050 --> 00:14:39,060
which which instance of this thing

00:14:36,240 --> 00:14:40,709
is this container is really on the

00:14:39,060 --> 00:14:43,200
container it's on the docker framework

00:14:40,709 --> 00:14:46,770
the fact that kubernetes had to build

00:14:43,200 --> 00:14:50,480
something into the pod spec to kind of

00:14:46,770 --> 00:14:53,430
force that override that broken behavior

00:14:50,480 --> 00:14:57,060
is just a demonstration of how it how it

00:14:53,430 --> 00:14:58,649
got broken and now that that's a normal

00:14:57,060 --> 00:15:00,120
thing in kubernetes it makes it even

00:14:58,649 --> 00:15:03,870
more confusing when I try to run my

00:15:00,120 --> 00:15:06,480
containers in a CI test because it works

00:15:03,870 --> 00:15:08,310
great on the minis cluster but now it

00:15:06,480 --> 00:15:13,709
doesn't work great when I run it in a

00:15:08,310 --> 00:15:15,390
docker compose or a swarm Barbara Liskov

00:15:13,709 --> 00:15:19,170
she want to give us a list of

00:15:15,390 --> 00:15:22,310
substitutions all of the other letters

00:15:19,170 --> 00:15:23,760
in this are actual descriptive names

00:15:22,310 --> 00:15:26,850
acronyms are hard

00:15:23,760 --> 00:15:28,920
Namie stuff is hard finding something

00:15:26,850 --> 00:15:31,320
that started with L but fit in this that

00:15:28,920 --> 00:15:35,640
made sense it was apparently also hard

00:15:31,320 --> 00:15:39,060
but Barbara Liskov wrote a very

00:15:35,640 --> 00:15:40,230
complicated explanation of is a versus

00:15:39,060 --> 00:15:42,450
has no relationships

00:15:40,230 --> 00:15:45,480
and list all substitution is talking

00:15:42,450 --> 00:15:48,000
about the is a relationship meaning that

00:15:45,480 --> 00:15:50,040
if there is a thing and it exhibits an

00:15:48,000 --> 00:15:53,510
interface that all things that exhibit

00:15:50,040 --> 00:15:53,510
that interface will behave the same way

00:15:53,870 --> 00:16:00,690
so in a cloud or Microsoft architecture

00:15:57,649 --> 00:16:03,510
you know it it points to

00:16:00,690 --> 00:16:05,820
I've got containers that are no js'

00:16:03,510 --> 00:16:07,410
service so I can reasonably expect that

00:16:05,820 --> 00:16:10,470
they're all going to have a service port

00:16:07,410 --> 00:16:16,079
that's going to serve up some form of HD

00:16:10,470 --> 00:16:18,390
HTTP interface but it also extends to

00:16:16,079 --> 00:16:21,450
how a team or an organization or an

00:16:18,390 --> 00:16:24,390
industry segment will converge on

00:16:21,450 --> 00:16:26,880
certain expectations like logging to

00:16:24,390 --> 00:16:29,070
standard out so we assume that all of

00:16:26,880 --> 00:16:30,660
our things now in the cloud are logging

00:16:29,070 --> 00:16:32,250
to standard out so that all we need to

00:16:30,660 --> 00:16:34,680
do is scrape standard out most of our

00:16:32,250 --> 00:16:36,060
frameworks do that and pipe it off to a

00:16:34,680 --> 00:16:37,620
place where we can begin to aggregate

00:16:36,060 --> 00:16:40,850
our logs and that's some clue about what

00:16:37,620 --> 00:16:40,850
went wrong and what they've go wrong

00:16:41,100 --> 00:16:51,060
mmm pull metrics versus trying to push

00:16:46,050 --> 00:16:52,380
them out extracting security and

00:16:51,060 --> 00:16:57,780
permissions away from the actual

00:16:52,380 --> 00:17:00,390
implementations of the things so another

00:16:57,780 --> 00:17:02,490
one way to look at how Liskov

00:17:00,390 --> 00:17:05,880
substitution applies in some of the 12

00:17:02,490 --> 00:17:10,470
factors these are the two 12 factor

00:17:05,880 --> 00:17:12,690
definitions for binding that like I said

00:17:10,470 --> 00:17:14,579
with the nodejs server that I can always

00:17:12,690 --> 00:17:19,320
expect that there's going to be a port

00:17:14,579 --> 00:17:20,699
and that even though outside the

00:17:19,320 --> 00:17:22,560
container it's found the port 8080

00:17:20,699 --> 00:17:24,540
inside the container or vice versa

00:17:22,560 --> 00:17:25,860
inside the container has found 8080

00:17:24,540 --> 00:17:28,110
outside the container it's bound to

00:17:25,860 --> 00:17:30,330
anything that means it makes it very

00:17:28,110 --> 00:17:32,580
easy for me to scale out 30 of those and

00:17:30,330 --> 00:17:35,010
all those ports whether they're on one

00:17:32,580 --> 00:17:36,210
host or many hosts will map to a

00:17:35,010 --> 00:17:39,960
reasonable hook port within the

00:17:36,210 --> 00:17:41,880
container they have broad parity meaning

00:17:39,960 --> 00:17:47,610
that as a developer I have a reasonable

00:17:41,880 --> 00:17:49,290
expectation that it behaved well there

00:17:47,610 --> 00:17:51,150
it's going to behave long production

00:17:49,290 --> 00:17:53,370
obviously I'm not going to be running to

00:17:51,150 --> 00:17:55,170
the scale or the load of that in doing

00:17:53,370 --> 00:17:57,420
production but I should have similar

00:17:55,170 --> 00:17:58,680
deployment mechanisms I should have you

00:17:57,420 --> 00:18:00,330
know if I'm deploying to kubernetes in

00:17:58,680 --> 00:18:05,880
production I shouldn't be running it in

00:18:00,330 --> 00:18:08,790
a sauce on my desktop but really that

00:18:05,880 --> 00:18:12,330
was all kind of warrant the I recently

00:18:08,790 --> 00:18:13,980
ran across a tweet this code about

00:18:12,330 --> 00:18:18,000
garage doors needs to be has anybody

00:18:13,980 --> 00:18:20,900
stumble come across that story I just

00:18:18,000 --> 00:18:20,900
got that so I'm gonna click on

00:18:31,389 --> 00:18:34,079
come on

00:18:36,650 --> 00:18:43,490
hmm so this guy yeah

00:18:40,540 --> 00:18:44,780
so it's to begin right you get this page

00:18:43,490 --> 00:18:47,720
you keep getting this page I've gotten

00:18:44,780 --> 00:18:49,070
this page several times today and it

00:18:47,720 --> 00:18:53,800
always comes up the same thing same way

00:18:49,070 --> 00:18:53,800
nothing else happens yeah so this guy

00:18:57,130 --> 00:19:08,210
it's a real a hooked up the push button

00:18:59,330 --> 00:19:09,410
on the garage door so so he so he hooked

00:19:08,210 --> 00:19:11,990
up this thing so that he could open and

00:19:09,410 --> 00:19:14,540
close the garage door his laptop except

00:19:11,990 --> 00:19:16,610
it's a get request so every time he hit

00:19:14,540 --> 00:19:18,679
that URL garage door opens the garage

00:19:16,610 --> 00:19:21,110
door closes so that's an example of list

00:19:18,679 --> 00:19:23,090
off not done right and that's what

00:19:21,110 --> 00:19:25,330
happens you get a garage door that's

00:19:23,090 --> 00:19:25,330
misbehaving

00:19:31,980 --> 00:19:37,600
so the eye and I'm solid obviously

00:19:36,220 --> 00:19:40,050
nervous as I'm racing through these so

00:19:37,600 --> 00:19:42,130
if you guys have questions comments

00:19:40,050 --> 00:19:45,910
catch me making something up feel free

00:19:42,130 --> 00:19:51,340
to give a shout the into the I and

00:19:45,910 --> 00:19:54,790
interface segregation is it's like I

00:19:51,340 --> 00:19:57,880
said it's the rule of the small the idea

00:19:54,790 --> 00:20:02,680
being that each one of these things can

00:19:57,880 --> 00:20:04,120
stand alone but even more so on to

00:20:02,680 --> 00:20:07,060
abstract it out a little bit away from

00:20:04,120 --> 00:20:10,180
just that object-oriented code mentality

00:20:07,060 --> 00:20:11,470
start thinking about it in terms of what

00:20:10,180 --> 00:20:13,090
is the minimum useful bit of

00:20:11,470 --> 00:20:17,350
functionality that can be defined in

00:20:13,090 --> 00:20:18,970
that particular context and this is

00:20:17,350 --> 00:20:20,710
where the interface comes in where does

00:20:18,970 --> 00:20:25,210
that contacts overlap with something

00:20:20,710 --> 00:20:28,600
else so my interface isn't what my thing

00:20:25,210 --> 00:20:29,410
does my interface is where it touches

00:20:28,600 --> 00:20:33,540
something else

00:20:29,410 --> 00:20:40,050
it's how am i implementing HTTP handlers

00:20:33,540 --> 00:20:40,050
how how do my routes map in my app how

00:20:41,520 --> 00:20:49,420
how am i accessing back-end storage how

00:20:44,860 --> 00:20:51,610
am how am I getting my code to the

00:20:49,420 --> 00:20:53,350
different environments those are all the

00:20:51,610 --> 00:20:55,150
interfaces they're the places where the

00:20:53,350 --> 00:20:59,620
things intersect and when you start

00:20:55,150 --> 00:21:03,820
thinking about harm others I and again

00:20:59,620 --> 00:21:06,400
click interface segregation couples very

00:21:03,820 --> 00:21:09,160
very well at least in my mind with that

00:21:06,400 --> 00:21:12,490
single responsibility principle in that

00:21:09,160 --> 00:21:15,160
I don't want my interfaces to overlap if

00:21:12,490 --> 00:21:17,560
there is a way to do something from here

00:21:15,160 --> 00:21:22,390
to get from here to there I want there

00:21:17,560 --> 00:21:25,210
to be one path I want it to be a clear

00:21:22,390 --> 00:21:27,160
path now you can stick in then you apply

00:21:25,210 --> 00:21:29,410
something like this valve and that one

00:21:27,160 --> 00:21:31,120
path there are many ways to actually get

00:21:29,410 --> 00:21:34,000
there but they're all taking the same

00:21:31,120 --> 00:21:35,470
path through that same interface they're

00:21:34,000 --> 00:21:36,200
all having it they all exhibit that same

00:21:35,470 --> 00:21:37,429
behavior

00:21:36,200 --> 00:21:38,840
again making it easier to understand

00:21:37,429 --> 00:21:41,570
your system easier to compose your

00:21:38,840 --> 00:21:45,350
system and even worth you know I skipped

00:21:41,570 --> 00:21:47,090
past it on the the open/closed slide but

00:21:45,350 --> 00:21:50,149
one of the big things that I've seen

00:21:47,090 --> 00:21:52,519
that makes a lot of products

00:21:50,149 --> 00:21:54,619
architectures summations wildly

00:21:52,519 --> 00:21:56,509
successful is when people think about

00:21:54,619 --> 00:21:59,809
how to do things that you didn't

00:21:56,509 --> 00:22:01,820
anticipate and that's composability if

00:21:59,809 --> 00:22:03,679
you give them the ability to make

00:22:01,820 --> 00:22:06,559
something that you never imagined was

00:22:03,679 --> 00:22:07,100
what he built they're going to do that

00:22:06,559 --> 00:22:11,239
eventually

00:22:07,100 --> 00:22:13,279
and that's often an ingredient in wild

00:22:11,239 --> 00:22:18,649
success referencing back to that Lego

00:22:13,279 --> 00:22:21,019
brick so thinking about interface

00:22:18,649 --> 00:22:22,840
segregation in terms of 12 factor a

00:22:21,019 --> 00:22:26,450
couple of the things they talk about

00:22:22,840 --> 00:22:28,039
administrative processes that you know

00:22:26,450 --> 00:22:30,619
every one of your administrative tasks

00:22:28,039 --> 00:22:32,859
is an isolated one-off thing it's

00:22:30,619 --> 00:22:36,529
separate from your application code it's

00:22:32,859 --> 00:22:40,159
outside of it's outside of the

00:22:36,529 --> 00:22:45,249
deployment logic and similarly your

00:22:40,159 --> 00:22:45,249
processes there are also isolated

00:22:45,669 --> 00:22:51,739
execute the app with one or more

00:22:47,299 --> 00:22:52,789
stateless processes that also is an

00:22:51,739 --> 00:22:55,549
important thing to think about when

00:22:52,789 --> 00:22:58,220
you're building your docker containers a

00:22:55,549 --> 00:22:59,690
popular docker anti-pattern is the

00:22:58,220 --> 00:23:04,700
container is a virtual machine where

00:22:59,690 --> 00:23:07,369
you've got you've got startup scripts

00:23:04,700 --> 00:23:09,320
that are triggered from an D and they're

00:23:07,369 --> 00:23:10,820
starting some background processes and

00:23:09,320 --> 00:23:12,739
got some other things going on you want

00:23:10,820 --> 00:23:14,539
one brought one page per container one

00:23:12,739 --> 00:23:18,200
process a container is literally a

00:23:14,539 --> 00:23:21,679
wrapper around the Linux process through

00:23:18,200 --> 00:23:24,590
this guy why is he here in kubernetes a

00:23:21,679 --> 00:23:26,869
lot of teams will deploy what I've read

00:23:24,590 --> 00:23:29,480
called a bastion node which is it's

00:23:26,869 --> 00:23:32,299
outside the cluster and this is a way

00:23:29,480 --> 00:23:34,399
that you can separate some of those

00:23:32,299 --> 00:23:35,629
administrative processes so one of the

00:23:34,399 --> 00:23:38,269
things that I've seen this Bastion nodes

00:23:35,629 --> 00:23:40,700
used for is an SSH product as is as an

00:23:38,269 --> 00:23:44,389
SSH proxy so I've got my kubernetes

00:23:40,700 --> 00:23:47,260
cluster out there in AWS and I don't

00:23:44,389 --> 00:23:51,010
want to make any public routes available

00:23:47,260 --> 00:23:52,840
to that control plane because if you get

00:23:51,010 --> 00:23:54,850
that vulnerability and you start mining

00:23:52,840 --> 00:23:59,230
Bitcoin on there my aw skis are gonna go

00:23:54,850 --> 00:24:02,410
through the roof so one of the things to

00:23:59,230 --> 00:24:03,700
do is don't open anything you can't

00:24:02,410 --> 00:24:06,520
touch the stage to run master you can't

00:24:03,700 --> 00:24:08,020
ask the sage to my nose there's a box

00:24:06,520 --> 00:24:10,090
out there that if you know the

00:24:08,020 --> 00:24:12,640
credentials for the next hop that you

00:24:10,090 --> 00:24:13,840
can associate the proxy through but then

00:24:12,640 --> 00:24:16,540
you've got to get to two you've got to

00:24:13,840 --> 00:24:19,000
get to different vulnerabilities that's

00:24:16,540 --> 00:24:20,740
that's a purposeful isolation for

00:24:19,000 --> 00:24:22,930
security another way that this Bastion

00:24:20,740 --> 00:24:24,430
nodes are used is setting up some kind

00:24:22,930 --> 00:24:25,990
of a gateway server and that's doing

00:24:24,430 --> 00:24:27,970
your authentication that's pushing this

00:24:25,990 --> 00:24:28,330
the user to come in they hit that really

00:24:27,970 --> 00:24:31,470
quickly

00:24:28,330 --> 00:24:34,420
that box is tuned very well to to do the

00:24:31,470 --> 00:24:36,460
credential auth or whatever author using

00:24:34,420 --> 00:24:38,470
and to authenticate the users and then

00:24:36,460 --> 00:24:40,540
it passes them on in your application

00:24:38,470 --> 00:24:42,820
gets into okay I know that this person

00:24:40,540 --> 00:24:44,260
is what they say they are now you can

00:24:42,820 --> 00:24:46,030
start to do the authorization to see

00:24:44,260 --> 00:24:47,230
what they're allowed to do and use think

00:24:46,030 --> 00:24:49,050
the tools that are built into your

00:24:47,230 --> 00:24:52,920
platform and approve amenities to

00:24:49,050 --> 00:24:52,920
authorize that role

00:24:54,460 --> 00:25:03,669
hmm another huge way that interface

00:24:59,559 --> 00:25:05,980
segregation has personally saved me a

00:25:03,669 --> 00:25:07,029
great deal of time and I think it's a

00:25:05,980 --> 00:25:08,440
really important thing to think about

00:25:07,029 --> 00:25:18,820
when you're designing your applications

00:25:08,440 --> 00:25:22,090
is observability so if each of this my

00:25:18,820 --> 00:25:24,009
request comes in it's one container you

00:25:22,090 --> 00:25:25,840
know that parses it out determines what

00:25:24,009 --> 00:25:27,840
the intended action is then it gets

00:25:25,840 --> 00:25:29,889
routed to another container that

00:25:27,840 --> 00:25:32,679
decorates something or triggers a

00:25:29,889 --> 00:25:34,720
side-job dumps it into a queue another

00:25:32,679 --> 00:25:36,070
thing spuds worker you know it bounces

00:25:34,720 --> 00:25:38,559
through all of these things in a matter

00:25:36,070 --> 00:25:40,659
of a couple seconds I got a couple

00:25:38,559 --> 00:25:43,990
thousand of those hitting my my button

00:25:40,659 --> 00:25:46,419
my cluster every minute it becomes very

00:25:43,990 --> 00:25:49,080
difficult to understand where did it go

00:25:46,419 --> 00:25:51,999
wrong if when I'm logging I'm not

00:25:49,080 --> 00:25:53,409
expressing an identity plus an identity

00:25:51,999 --> 00:25:53,980
for each one of those interfaces that's

00:25:53,409 --> 00:25:57,730
being hit

00:25:53,980 --> 00:26:00,159
I'm not correlation ID you know the

00:25:57,730 --> 00:26:02,590
correlation ID so there's a there's an

00:26:00,159 --> 00:26:05,019
ID for the request there's an ID for

00:26:02,590 --> 00:26:06,820
each of the nodes there's an ID for the

00:26:05,019 --> 00:26:08,169
version there's an ID for the host where

00:26:06,820 --> 00:26:10,149
it's running all of that information

00:26:08,169 --> 00:26:12,100
gets logged and then suddenly your lungs

00:26:10,149 --> 00:26:13,960
become a really valuable tool and a

00:26:12,100 --> 00:26:18,399
really powerful tool for diagnosing what

00:26:13,960 --> 00:26:21,039
happened and that gets into so on one

00:26:18,399 --> 00:26:23,769
hand it's it's about separating those

00:26:21,039 --> 00:26:25,749
interfaces those isolating them on

00:26:23,769 --> 00:26:27,820
another hand it's about making sure that

00:26:25,749 --> 00:26:31,509
each thing has a distinct responsibility

00:26:27,820 --> 00:26:34,539
so that I know when I see a container

00:26:31,509 --> 00:26:38,220
who got hit I know that somebody was

00:26:34,539 --> 00:26:38,220
trying to get some food

00:26:42,400 --> 00:26:50,230
moving on so the D mid all the way

00:26:47,210 --> 00:26:52,460
through dependency inversion principle

00:26:50,230 --> 00:26:53,690
and I just copied the I was getting

00:26:52,460 --> 00:26:56,450
tired when I put this one to get it I

00:26:53,690 --> 00:26:58,550
got to the left slide so I just copied

00:26:56,450 --> 00:27:00,530
the definition high-level module should

00:26:58,550 --> 00:27:01,720
not depend on low-level modules both

00:27:00,530 --> 00:27:03,800
should depend on abstractions

00:27:01,720 --> 00:27:05,390
abstractions need not depend on details

00:27:03,800 --> 00:27:08,030
details should depend on the extractions

00:27:05,390 --> 00:27:09,230
and that's what I hope that I've touched

00:27:08,030 --> 00:27:13,010
on this little bit as we've gotten this

00:27:09,230 --> 00:27:15,200
far to get this far but it's about so

00:27:13,010 --> 00:27:17,420
it's about separating those things but

00:27:15,200 --> 00:27:21,560
it's what happens when we separate those

00:27:17,420 --> 00:27:24,170
things so when I take that configuration

00:27:21,560 --> 00:27:25,970
data out of my container so let's say

00:27:24,170 --> 00:27:29,510
I've got in the net container and that

00:27:25,970 --> 00:27:31,730
we're about a container and it knows how

00:27:29,510 --> 00:27:35,690
to get things from Amazon s3 and copy

00:27:31,730 --> 00:27:38,360
them over to storage when I configure

00:27:35,690 --> 00:27:40,370
that when I test that out on my desktop

00:27:38,360 --> 00:27:41,930
I run that docker

00:27:40,370 --> 00:27:44,690
I'm out the volume to a local directory

00:27:41,930 --> 00:27:47,780
I set some credentials in the

00:27:44,690 --> 00:27:50,930
environment it goes out get stuff that

00:27:47,780 --> 00:27:54,050
worked I push it up the CI mmm it does

00:27:50,930 --> 00:27:55,820
the same thing except it pipes that off

00:27:54,050 --> 00:27:58,010
to another filter that makes sure that

00:27:55,820 --> 00:28:00,140
the file content is correctly it runs

00:27:58,010 --> 00:28:02,030
through a hash it checks the sha awesome

00:28:00,140 --> 00:28:04,970
okay great I actually got the file that

00:28:02,030 --> 00:28:07,760
I expected to get moves on I deploy that

00:28:04,970 --> 00:28:12,230
in my cluster now it gets it gets

00:28:07,760 --> 00:28:14,330
configured with a map to a persistent

00:28:12,230 --> 00:28:16,370
volume from kubernetes that's either

00:28:14,330 --> 00:28:18,740
mapped to that node host or maybe it's

00:28:16,370 --> 00:28:20,750
mapped to some kind of a shared file

00:28:18,740 --> 00:28:23,300
system that all of these these nodes are

00:28:20,750 --> 00:28:25,670
using and I configure it to be an init

00:28:23,300 --> 00:28:28,010
container so it comes up and dies before

00:28:25,670 --> 00:28:31,460
the actual application starts so now

00:28:28,010 --> 00:28:33,740
this thing comes up but I deployed seven

00:28:31,460 --> 00:28:37,460
of them they come up and I also told

00:28:33,740 --> 00:28:39,740
them to communicate to broadcast over

00:28:37,460 --> 00:28:41,450
local channel what they were getting to

00:28:39,740 --> 00:28:43,370
make sure that if somebody else is

00:28:41,450 --> 00:28:45,380
getting that they don't duplicate it now

00:28:43,370 --> 00:28:47,180
all five of my clusters come up they'll

00:28:45,380 --> 00:28:49,190
go out they grab different channels on

00:28:47,180 --> 00:28:51,530
all that data they pull it down really

00:28:49,190 --> 00:28:53,210
fast they start up it always comes up if

00:28:51,530 --> 00:28:54,529
only three of them start up immediately

00:28:53,210 --> 00:28:56,929
and two of them are lagging because they

00:28:54,529 --> 00:28:58,159
couldn't get resources that's okay those

00:28:56,929 --> 00:28:59,539
two will come up and will say oh the

00:28:58,159 --> 00:29:01,490
files are there I don't do anything

00:28:59,539 --> 00:29:04,039
exit everybody comes up the data is

00:29:01,490 --> 00:29:06,320
still there so you change the behavior

00:29:04,039 --> 00:29:07,700
by getting those details out of the

00:29:06,320 --> 00:29:11,960
implementation the implementation still

00:29:07,700 --> 00:29:13,669
stays really simple copy stuff but then

00:29:11,960 --> 00:29:15,230
as you apply those layers those

00:29:13,669 --> 00:29:17,179
configuration details and you extract

00:29:15,230 --> 00:29:18,830
them out and you through the different

00:29:17,179 --> 00:29:20,419
you know I talked about you know how the

00:29:18,830 --> 00:29:22,100
hell modules about giving me some

00:29:20,419 --> 00:29:25,100
control over it and the kinetics that

00:29:22,100 --> 00:29:26,570
gives me some control over it mmm and my

00:29:25,100 --> 00:29:32,600
cloud the bladder gives me some control

00:29:26,570 --> 00:29:33,679
over it all of those things just check

00:29:32,600 --> 00:29:39,770
my notes and see if I should talk about

00:29:33,679 --> 00:29:41,809
what I said and one last rant I hate

00:29:39,770 --> 00:29:43,549
your database I hate it with a passion

00:29:41,809 --> 00:29:44,029
sequel databases do not belong in the

00:29:43,549 --> 00:29:45,850
cloud

00:29:44,029 --> 00:29:48,049
they are the antithesis of stateless

00:29:45,850 --> 00:29:51,049
their whole reason for purpose is to

00:29:48,049 --> 00:29:52,720
store state except sometimes you need

00:29:51,049 --> 00:29:55,490
them and sometimes they're really easy

00:29:52,720 --> 00:30:01,190
so you build abstractions around them to

00:29:55,490 --> 00:30:03,020
make them work here's a stateful set to

00:30:01,190 --> 00:30:04,789
make sure that that when that thing goes

00:30:03,020 --> 00:30:07,340
down it always comes back up on the same

00:30:04,789 --> 00:30:10,309
host so that when your database still

00:30:07,340 --> 00:30:12,289
has quick access to a local drive it's

00:30:10,309 --> 00:30:16,149
not trying to read and write from over

00:30:12,289 --> 00:30:16,149
NFS and struggling

00:30:17,870 --> 00:30:26,150
yeah so cool right so one of the other

00:30:24,500 --> 00:30:27,680
challenges you have with databases is

00:30:26,150 --> 00:30:28,970
it's not as simple as bumping your

00:30:27,680 --> 00:30:34,070
replication number from two to three

00:30:28,970 --> 00:30:35,270
because all of your clients are not

00:30:34,070 --> 00:30:37,160
necessarily going to map to the right

00:30:35,270 --> 00:30:39,440
thing but you can build abstractions

00:30:37,160 --> 00:30:41,480
around that to make it work so then

00:30:39,440 --> 00:30:43,970
something you've got six copies of

00:30:41,480 --> 00:30:46,640
Postgres running in your cloud they're

00:30:43,970 --> 00:30:51,470
all serving up the same indices we're

00:30:46,640 --> 00:30:55,120
staying reasonably in sync but you

00:30:51,470 --> 00:30:58,550
didn't have to do a monolithic

00:30:55,120 --> 00:30:59,960
replication back-end behind it simply by

00:30:58,550 --> 00:31:02,150
building those abstractions around it

00:30:59,960 --> 00:31:04,100
now in my opinion the better answer is

00:31:02,150 --> 00:31:06,290
don't use the sequel database use

00:31:04,100 --> 00:31:09,050
something else abstract abstract out

00:31:06,290 --> 00:31:10,850
your storage so the frequency with which

00:31:09,050 --> 00:31:13,820
you actually need to have all of your

00:31:10,850 --> 00:31:15,620
data in a single table is not very high

00:31:13,820 --> 00:31:18,250
occasionally you'll need that maybe

00:31:15,620 --> 00:31:21,440
you're doing some some kind of analytics

00:31:18,250 --> 00:31:22,850
but even then most frameworks that

00:31:21,440 --> 00:31:26,630
you're going to be using don't want it

00:31:22,850 --> 00:31:28,850
as a cursor they want it as a as a CSV

00:31:26,630 --> 00:31:31,730
as a text file as a bunch of objects in

00:31:28,850 --> 00:31:33,380
a queue so you're gonna end up

00:31:31,730 --> 00:31:34,610
extracting it anyway to get it into the

00:31:33,380 --> 00:31:36,850
analytics framework that you're going to

00:31:34,610 --> 00:31:36,850
be using

00:31:39,630 --> 00:31:43,460
mmm right so

00:31:44,670 --> 00:31:48,720
some of the mitigations that you'll you

00:31:46,770 --> 00:31:51,090
end up applying if you do want to use

00:31:48,720 --> 00:32:00,960
that that relational database in your in

00:31:51,090 --> 00:32:02,940
the cloud application so another way to

00:32:00,960 --> 00:32:08,970
think about it getting back to the

00:32:02,940 --> 00:32:11,400
DevOps cycle is when I build my thing

00:32:08,970 --> 00:32:13,230
I'm gonna have dependencies and I want

00:32:11,400 --> 00:32:15,780
to explicitly declare that I dependent

00:32:13,230 --> 00:32:17,610
that I know this works for that version

00:32:15,780 --> 00:32:20,340
and that version and that version of my

00:32:17,610 --> 00:32:22,049
dependencies getting back to the latest

00:32:20,340 --> 00:32:24,929
attack I don't want to say that I'm

00:32:22,049 --> 00:32:29,250
using whatever the newest thing is in

00:32:24,929 --> 00:32:30,840
your in your gem file you you generally

00:32:29,250 --> 00:32:35,040
want to say that your you're gonna bound

00:32:30,840 --> 00:32:38,640
it at your version one but not greater

00:32:35,040 --> 00:32:40,320
than one or or you might say one zero

00:32:38,640 --> 00:32:41,580
not if you know that this is the only

00:32:40,320 --> 00:32:44,000
one that works and I'm not trusting

00:32:41,580 --> 00:32:44,000
anything else

00:32:53,650 --> 00:32:58,270
so dependency version across

00:32:56,260 --> 00:33:00,100
configuration management and quality if

00:32:58,270 --> 00:33:02,110
the API is able to express and abstract

00:33:00,100 --> 00:33:04,950
a relationship with its dependency

00:33:02,110 --> 00:33:07,390
specifically then deploying that thing

00:33:04,950 --> 00:33:09,010
with confidence becomes more reasonable

00:33:07,390 --> 00:33:10,540
because you know exactly what you're

00:33:09,010 --> 00:33:11,559
going to be deploying with and then

00:33:10,540 --> 00:33:13,600
you're going to want the abstractions

00:33:11,559 --> 00:33:18,790
around that that's what dr. gives you

00:33:13,600 --> 00:33:19,900
that's what that's what your cloud is

00:33:18,790 --> 00:33:26,350
going to give you by segmenting your

00:33:19,900 --> 00:33:28,210
cloud and and having those dependencies

00:33:26,350 --> 00:33:29,830
where you where you expect them to be in

00:33:28,210 --> 00:33:32,710
the underlying layers in the base

00:33:29,830 --> 00:33:34,450
containers as you build the new versions

00:33:32,710 --> 00:33:36,640
and build on top of those building

00:33:34,450 --> 00:33:41,710
blocks you inherit the behavior that you

00:33:36,640 --> 00:33:43,690
expect so that's the end I copied a lot

00:33:41,710 --> 00:33:48,010
of it images from the internet this is

00:33:43,690 --> 00:34:01,000
what I got them from mm-hmm that's the

00:33:48,010 --> 00:34:03,130
end go be the pony so any questions

00:34:01,000 --> 00:34:05,280
comments suggestions I would love to

00:34:03,130 --> 00:34:05,280
hear

00:34:07,840 --> 00:34:17,260
so you're not throwing your state and

00:34:10,349 --> 00:34:18,669
our DMS or no sequel is use some

00:34:17,260 --> 00:34:20,289
variation of those sequel depending on

00:34:18,669 --> 00:34:24,839
what the application is and what the

00:34:20,289 --> 00:34:28,629
usage is sometimes it's the little state

00:34:24,839 --> 00:34:31,690
sometimes the state is you know it comes

00:34:28,629 --> 00:34:34,809
in it goes through transitions comes

00:34:31,690 --> 00:34:37,089
back out there there might be static

00:34:34,809 --> 00:34:39,819
content there might be dynamic content

00:34:37,089 --> 00:34:41,799
that's delivered and maybe behind that

00:34:39,819 --> 00:34:43,359
content is an already a mess maybe

00:34:41,799 --> 00:34:46,690
there's just a traditional web app

00:34:43,359 --> 00:34:48,369
that's serving up that content but when

00:34:46,690 --> 00:34:49,779
I think about applications where I've

00:34:48,369 --> 00:34:50,649
got a lot of micro services that are

00:34:49,779 --> 00:34:54,940
working together

00:34:50,649 --> 00:34:57,400
I want that storage I want that that

00:34:54,940 --> 00:35:06,160
unit to be well abstracted away from the

00:34:57,400 --> 00:35:23,349
rest of my cloud that's a mitigation

00:35:06,160 --> 00:35:24,640
that you and the more abstractions you

00:35:23,349 --> 00:35:25,809
can put around that the better off you

00:35:24,640 --> 00:35:27,339
are and then one of the things that

00:35:25,809 --> 00:35:30,099
you'll find after you start building out

00:35:27,339 --> 00:35:31,720
those abstractions is oh wow I don't

00:35:30,099 --> 00:35:34,270
need the database I can just drop these

00:35:31,720 --> 00:35:35,650
messages in a durable queue because I

00:35:34,270 --> 00:35:36,849
don't need them to be around forever or

00:35:35,650 --> 00:35:38,710
maybe I do need them to be around

00:35:36,849 --> 00:35:40,119
forever in which case I'm gonna have

00:35:38,710 --> 00:35:42,789
something pulling off pulling on that

00:35:40,119 --> 00:35:46,529
durable Q and serializing them off to a

00:35:42,789 --> 00:35:46,529
no sequel storage or something

00:35:47,430 --> 00:35:51,730
they replicate its design there a lot

00:35:51,250 --> 00:35:53,260
better

00:35:51,730 --> 00:35:54,520
yeah it's design for clouds it's

00:35:53,260 --> 00:35:58,210
designed for cloud applications

00:35:54,520 --> 00:35:59,950
databases were grew up in an era of big

00:35:58,210 --> 00:36:02,220
client-server computing where it was

00:35:59,950 --> 00:36:05,200
reasonable for me to order another

00:36:02,220 --> 00:36:07,740
$40,000 computer you know when I needed

00:36:05,200 --> 00:36:07,740
to expand

00:36:14,920 --> 00:36:21,420
an argument it's just that generally

00:36:17,620 --> 00:36:21,420
before a micro service

00:36:22,020 --> 00:36:25,170
right and that's what that's what was

00:36:23,520 --> 00:36:26,880
saying as you build the abstractions

00:36:25,170 --> 00:36:28,800
around you are doing us to make it work

00:36:26,880 --> 00:36:30,720
well in the class in a cloud solution in

00:36:28,800 --> 00:36:33,900
a micro server solution you're gonna

00:36:30,720 --> 00:36:35,910
find a while instead of been arguing us

00:36:33,900 --> 00:36:37,350
behind this I could just use something

00:36:35,910 --> 00:36:39,710
that's a lot simpler and cheaper to

00:36:37,350 --> 00:36:39,710
deploy

00:36:43,990 --> 00:36:49,039
for you and all that they built it they

00:36:47,480 --> 00:36:53,569
built an API around it and they deal

00:36:49,039 --> 00:36:54,920
with all the headaches for you that

00:36:53,569 --> 00:36:57,559
works yeah

00:36:54,920 --> 00:37:00,349
and I've I've seen it work well and I've

00:36:57,559 --> 00:37:01,400
seen it hurt yeah and and that's true

00:37:00,349 --> 00:37:02,960
for any of these things I mean there's

00:37:01,400 --> 00:37:05,299
no there's no perfect answers there's no

00:37:02,960 --> 00:37:07,099
right wrong these are just concepts to

00:37:05,299 --> 00:37:09,049
think about them that's really what I

00:37:07,099 --> 00:37:11,150
wanted to get across what this is as

00:37:09,049 --> 00:37:13,339
you're designing as you're building ask

00:37:11,150 --> 00:37:14,569
these questions and a lot of times

00:37:13,339 --> 00:37:16,369
you're gonna ask the question area say

00:37:14,569 --> 00:37:17,869
you know what I need to get this out the

00:37:16,369 --> 00:37:19,789
door this week it's going out this way

00:37:17,869 --> 00:37:21,500
I'm breaking the rules and sending it

00:37:19,789 --> 00:37:23,950
because we need to get it done and it's

00:37:21,500 --> 00:37:23,950
good enough

00:37:26,490 --> 00:37:33,420
just to the Anastasis at the spot

00:37:30,859 --> 00:37:35,339
Australian you're taking patterns a less

00:37:33,420 --> 00:37:37,820
fine great approach to the data and

00:37:35,339 --> 00:37:37,820
persistence

00:37:38,280 --> 00:38:01,530
enough in this particular yeah on that

00:37:40,710 --> 00:38:03,030
slide yeah helm uses go template so do

00:38:01,530 --> 00:38:05,100
you know you deploy so the way you

00:38:03,030 --> 00:38:07,130
deploy a kubernetes application of pod

00:38:05,100 --> 00:38:10,560
is you write off this yellow file and

00:38:07,130 --> 00:38:13,640
helm uses go templates it's a templating

00:38:10,560 --> 00:38:16,470
library built into the go language to

00:38:13,640 --> 00:38:18,990
mock those out so you can create you can

00:38:16,470 --> 00:38:22,470
rough out your your gamble PI over 3

00:38:18,990 --> 00:38:23,940
deployment as a template and stick in

00:38:22,470 --> 00:38:25,920
the little variables everything out

00:38:23,940 --> 00:38:27,090
operations and we've got you know

00:38:25,920 --> 00:38:29,160
different mutations that you can apply

00:38:27,090 --> 00:38:34,380
to the strings that are and you feed it

00:38:29,160 --> 00:38:36,560
a dictionary of values not my code I

00:38:34,380 --> 00:38:36,560
can't

00:38:36,800 --> 00:38:44,280
and so what helm gives you the ability

00:38:40,740 --> 00:38:46,320
to do is I can then describe the

00:38:44,280 --> 00:38:48,690
container the actual docker instances

00:38:46,320 --> 00:38:51,180
that I want to use and I can describe

00:38:48,690 --> 00:38:53,130
the configuration for my deployment you

00:38:51,180 --> 00:38:55,350
know how big the replication set is and

00:38:53,130 --> 00:38:58,290
then within that dictionary I can I can

00:38:55,350 --> 00:39:01,440
have fields for you know I can say

00:38:58,290 --> 00:39:03,480
replicas replicas : and then underneath

00:39:01,440 --> 00:39:06,140
of that instead of just four I can have

00:39:03,480 --> 00:39:11,430
dead staging production developer and

00:39:06,140 --> 00:39:12,780
four to eight 36 depending on what what

00:39:11,430 --> 00:39:15,840
environment I'm deploying to and then

00:39:12,780 --> 00:39:19,890
when I just say helm install and say - a

00:39:15,840 --> 00:39:21,450
env equals whatever and how many uses my

00:39:19,890 --> 00:39:24,750
tribulation include NetID credentials to

00:39:21,450 --> 00:39:26,520
push that out it reads it read some

00:39:24,750 --> 00:39:27,780
information from the coop config it

00:39:26,520 --> 00:39:30,330
reads some information when it starts

00:39:27,780 --> 00:39:32,970
talking to its counterpart killer in the

00:39:30,330 --> 00:39:34,470
kubernetes cluster and actually fills

00:39:32,970 --> 00:39:36,180
out the rest of those templates and then

00:39:34,470 --> 00:39:37,670
applies those specs to the cluster to

00:39:36,180 --> 00:39:44,450
create whatever is you're trying to

00:39:37,670 --> 00:39:48,079
it's a great tool it's your installer

00:39:44,450 --> 00:39:52,609
package really is it's just a way to

00:39:48,079 --> 00:39:54,500
describe how to install something and

00:39:52,609 --> 00:39:57,890
then bundle it together neatly into a

00:39:54,500 --> 00:39:59,900
tarball and it hasn't you know

00:39:57,890 --> 00:40:02,769
reasonable install semantics to install

00:39:59,900 --> 00:40:02,769
remove scale

00:40:06,490 --> 00:40:11,079
somebody else well thank you all very

00:40:09,670 --> 00:40:13,329
much for coming out

00:40:11,079 --> 00:40:14,500
I hope it was useful if it wasn't like I

00:40:13,329 --> 00:40:15,609
said there's some great Easter eggs in

00:40:14,500 --> 00:40:18,420
that and here more intelligent people

00:40:15,609 --> 00:40:18,420
talk about these topics

00:40:20,820 --> 00:40:23,979

YouTube URL: https://www.youtube.com/watch?v=yNQNauUK5v4


