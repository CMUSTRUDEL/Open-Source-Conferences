Title: Scaling agile dev across teams w  microservices architecture - A. Stoyanovsky - C&S Architecture
Publication date: 2019-02-26
Playlist: Software Architecture
Description: 
	The topic of this talk came about naturally from a 6+ month project in collaboration between IBM Watson and IBM Research in which we had to find an efficient way for engineers to be able to iterate on system design while researchers iterate on the state of the art, without losing significant time to friction in the process itself. In this session, we share our approach to scaling a scrum-like development process across teams with different incentives and backgrounds, in our case research and engineering teams; by designing and implementing a microservice-based system architecture in which concerns that are specific to or play to the strengths of one team are hidden behind component boundaries with simple RPC APIs, such loosely coupled teams were able to effectively work together to deliver a cohesive, state of the art product. Although we took this approach to enable collaboration between research and engineering teams and will discuss some points specific to that situation, we believe that the approach generalizes to collaboration between teams that generally have different disciplines or specializations; we discuss lessons learned, observe useful patterns, and derive principles to generalize the approach.

Anastas Stoyanovsky, a software engineer working on Watson Discovery Service at IBM Watson Pittsburgh, presented this second meetup in C&S' Architecture series.

(There is a short period with no audio. We apologize for this live-streaming anomaly.)
Captions: 
	00:00:00,000 --> 00:00:05,819
as as Colin said that's well not just

00:00:03,149 --> 00:00:09,179
Microsoft architecture but the subject

00:00:05,819 --> 00:00:11,070
of this talk is essentially to take a

00:00:09,179 --> 00:00:12,750
look at how to use Microsoft

00:00:11,070 --> 00:00:16,800
architecture to facilitate a certain way

00:00:12,750 --> 00:00:19,410
of teams working together so to give a

00:00:16,800 --> 00:00:21,029
little bit more introduction so IBM

00:00:19,410 --> 00:00:23,519
Watson an IBM research are separate

00:00:21,029 --> 00:00:24,570
organizations and they have as different

00:00:23,519 --> 00:00:26,609
organizations they have different goals

00:00:24,570 --> 00:00:28,800
and they collaborate often and every

00:00:26,609 --> 00:00:30,840
time this new collaboration starts

00:00:28,800 --> 00:00:32,520
between these two organizations two or

00:00:30,840 --> 00:00:35,280
more teams sometimes usually two need to

00:00:32,520 --> 00:00:37,620
find a way of working together well and

00:00:35,280 --> 00:00:39,290
so on observation after we went or after

00:00:37,620 --> 00:00:42,030
my team went through this a couple times

00:00:39,290 --> 00:00:43,469
we observed that these teams from

00:00:42,030 --> 00:00:45,870
different organizations they tend to

00:00:43,469 --> 00:00:47,850
have different norms habits ways of

00:00:45,870 --> 00:00:49,500
working and those tend to align with the

00:00:47,850 --> 00:00:52,620
incentive structures inside those

00:00:49,500 --> 00:00:54,449
organizations so this will be a case

00:00:52,620 --> 00:00:57,149
study of one approach we took to

00:00:54,449 --> 00:00:59,460
establishing a development process when

00:00:57,149 --> 00:01:01,800
a new collaboration of this sort starts

00:00:59,460 --> 00:01:03,870
and in particular we try to do this

00:01:01,800 --> 00:01:05,100
through system architecture rather than

00:01:03,870 --> 00:01:07,710
any sort of necessarily agile

00:01:05,100 --> 00:01:10,070
methodology or whatever else what flavor

00:01:07,710 --> 00:01:13,140
of it may be popular at the moment and

00:01:10,070 --> 00:01:14,490
starting with the case study some sort

00:01:13,140 --> 00:01:16,770
of a template we made to extract some

00:01:14,490 --> 00:01:19,700
principles that could be reused in a

00:01:16,770 --> 00:01:19,700
more general situation

00:01:19,770 --> 00:01:23,210
so as a sequence of topics there's a

00:01:21,509 --> 00:01:25,619
couple concepts I want introduced

00:01:23,210 --> 00:01:27,960
starting off with quality attributes and

00:01:25,619 --> 00:01:29,790
organizational incentives from their

00:01:27,960 --> 00:01:31,920
micro service architecture and

00:01:29,790 --> 00:01:34,170
architectural hoisting with those

00:01:31,920 --> 00:01:36,570
definitions in mind I'll go into a case

00:01:34,170 --> 00:01:38,640
study so as I said this is between IBM

00:01:36,570 --> 00:01:40,289
Watson and IBM research but the general

00:01:38,640 --> 00:01:42,659
framework I feel should be able to be

00:01:40,289 --> 00:01:44,369
reused for just generally teams with

00:01:42,659 --> 00:01:46,920
different specializations as a more

00:01:44,369 --> 00:01:48,720
general sort of mindset of course how it

00:01:46,920 --> 00:01:50,610
actually turned out because stories are

00:01:48,720 --> 00:01:51,750
nice but results are better and of

00:01:50,610 --> 00:01:53,310
course how we could have improved what

00:01:51,750 --> 00:01:54,929
we did because obviously this is in

00:01:53,310 --> 00:01:57,360
hindsight and we were figuring it out as

00:01:54,929 --> 00:02:01,799
we went along and some time for

00:01:57,360 --> 00:02:04,319
questions and discussion afterwards so

00:02:01,799 --> 00:02:05,759
first let's define quality attributes in

00:02:04,319 --> 00:02:07,890
organizational centers to help set the

00:02:05,759 --> 00:02:10,619
stage but I want to do this in a

00:02:07,890 --> 00:02:12,630
particular way so has anybody heard the

00:02:10,619 --> 00:02:14,850
phrase research coach who's been sitting

00:02:12,630 --> 00:02:16,080
here we actually have a couple hands I

00:02:14,850 --> 00:02:17,819
was starting to think this might be a

00:02:16,080 --> 00:02:18,890
kind of an eternal IBM thing but

00:02:17,819 --> 00:02:21,239
apparently not

00:02:18,890 --> 00:02:22,349
so the general concepts if you haven't

00:02:21,239 --> 00:02:23,880
heard that phrase before it's the same

00:02:22,349 --> 00:02:26,130
concept best prototype code or

00:02:23,880 --> 00:02:28,769
proof-of-concept code those sorts of

00:02:26,130 --> 00:02:30,030
things and it essentially refers to code

00:02:28,769 --> 00:02:34,250
that looks like this

00:02:30,030 --> 00:02:34,250
so single variable

00:02:39,540 --> 00:02:41,599
you

00:02:55,290 --> 00:03:00,090
question because it's not bad code it's

00:02:58,470 --> 00:03:03,900
written for us it's code written for a

00:03:00,090 --> 00:03:07,079
specific purpose so with that to define

00:03:03,900 --> 00:03:09,060
we can use that as a starting point to

00:03:07,079 --> 00:03:11,430
go into the quality attributes of a

00:03:09,060 --> 00:03:13,379
system for to rephrase this in a

00:03:11,430 --> 00:03:15,060
different vocabulary so the quality

00:03:13,379 --> 00:03:16,610
attributes of a system are the various

00:03:15,060 --> 00:03:18,840
factors which affect its behavior

00:03:16,610 --> 00:03:21,269
usability and design across all

00:03:18,840 --> 00:03:22,590
components there's actually an ISO

00:03:21,269 --> 00:03:24,599
standard for this I found out while

00:03:22,590 --> 00:03:26,040
putting this talk together I've never

00:03:24,599 --> 00:03:29,819
personally referred to it but it has a

00:03:26,040 --> 00:03:32,730
nice categorization here so to go back

00:03:29,819 --> 00:03:34,379
to it from this perspective we can say

00:03:32,730 --> 00:03:35,819
that research code of the sort that I

00:03:34,379 --> 00:03:38,519
mentioned is generally code that's

00:03:35,819 --> 00:03:40,739
written for accuracy in the sense of an

00:03:38,519 --> 00:03:42,540
artificial intelligence application in

00:03:40,739 --> 00:03:44,190
this particular case meaning through the

00:03:42,540 --> 00:03:47,639
prediction the predictions it makes are

00:03:44,190 --> 00:03:50,159
they accurate are they do they bear out

00:03:47,639 --> 00:03:53,430
and it's generally not written for say

00:03:50,159 --> 00:03:55,920
maintainability among others and often

00:03:53,430 --> 00:03:57,329
we have this when we we often have this

00:03:55,920 --> 00:03:59,280
trade-off between different quality

00:03:57,329 --> 00:04:01,500
attributes for example performance and

00:03:59,280 --> 00:04:02,970
accuracy often we come Kim would come

00:04:01,500 --> 00:04:05,340
across a case where a more accurate

00:04:02,970 --> 00:04:10,639
algorithm would be of course would be

00:04:05,340 --> 00:04:13,500
often less performant meaning slower so

00:04:10,639 --> 00:04:16,530
the situation that we had is a research

00:04:13,500 --> 00:04:17,880
organization where the structure of the

00:04:16,530 --> 00:04:19,530
organization or its incentives are

00:04:17,880 --> 00:04:21,750
generally geared towards incent well

00:04:19,530 --> 00:04:23,010
incentivizing publishing improvements on

00:04:21,750 --> 00:04:25,440
the state of the art in an academic

00:04:23,010 --> 00:04:29,090
journal not on shipping performant

00:04:25,440 --> 00:04:29,090
maintainable code as a software product

00:04:29,479 --> 00:04:34,620
so I found actually this old

00:04:32,160 --> 00:04:36,060
organizational chart of one of the three

00:04:34,620 --> 00:04:37,830
companies a hundred years ago that merge

00:04:36,060 --> 00:04:40,560
to form IBM and you can see that this

00:04:37,830 --> 00:04:41,970
already was a large organization so you

00:04:40,560 --> 00:04:44,280
can easily imagine different groups of

00:04:41,970 --> 00:04:46,130
people forming different working habits

00:04:44,280 --> 00:04:49,620
or emphasizing different particular

00:04:46,130 --> 00:04:51,000
aspects of a system and it's only a game

00:04:49,620 --> 00:04:53,240
more through over time especially as

00:04:51,000 --> 00:04:55,740
organizations get bigger in fact

00:04:53,240 --> 00:04:57,479
apparently when Watson got started as an

00:04:55,740 --> 00:04:59,370
organization and people were coming in

00:04:57,479 --> 00:05:01,020
from other organizations there was a

00:04:59,370 --> 00:05:02,760
clash of vocabulary even where people

00:05:01,020 --> 00:05:04,260
were trading off performance and

00:05:02,760 --> 00:05:06,150
performance because the researchers

00:05:04,260 --> 00:05:07,500
would call the accuracy performance in

00:05:06,150 --> 00:05:08,889
engineers will call the speed of the

00:05:07,500 --> 00:05:11,259
system performance

00:05:08,889 --> 00:05:13,870
so that's how deep the differences can

00:05:11,259 --> 00:05:15,280
go so this often creates tension if you

00:05:13,870 --> 00:05:17,229
have one group that focuses on one

00:05:15,280 --> 00:05:18,699
quality I should be the trade off with

00:05:17,229 --> 00:05:20,379
another that the other team focuses on

00:05:18,699 --> 00:05:21,969
you have to find a way of reconciling

00:05:20,379 --> 00:05:24,870
that and actually being able to

00:05:21,969 --> 00:05:27,969
establish a good development process so

00:05:24,870 --> 00:05:29,650
the question is when team from two

00:05:27,969 --> 00:05:31,780
different organizations with different

00:05:29,650 --> 00:05:33,189
incentive structures collaborate can we

00:05:31,780 --> 00:05:35,229
design our software architecture to

00:05:33,189 --> 00:05:36,900
avoid the tension between the quality

00:05:35,229 --> 00:05:38,979
attributes that we know ahead of time

00:05:36,900 --> 00:05:43,689
ideally that different teams will focus

00:05:38,979 --> 00:05:45,969
on and as the title of the talk hints

00:05:43,689 --> 00:05:47,889
this one approach that we took was to

00:05:45,969 --> 00:05:49,029
facilitate that sort of architecture

00:05:47,889 --> 00:05:52,389
approach through micro service

00:05:49,029 --> 00:05:55,090
architecture and using techniques of of

00:05:52,389 --> 00:05:58,029
architectural hoisting so let's briefly

00:05:55,090 --> 00:05:59,680
define those I'm pretty sure if you

00:05:58,029 --> 00:06:00,759
asked three different people what a

00:05:59,680 --> 00:06:02,379
micro services you'll get three

00:06:00,759 --> 00:06:04,870
different answers so let's go with one

00:06:02,379 --> 00:06:06,639
that was from a top Google result so a

00:06:04,870 --> 00:06:09,069
micro service architecture is an

00:06:06,639 --> 00:06:10,810
architectural style that structures an

00:06:09,069 --> 00:06:12,520
application as a collection of loosely

00:06:10,810 --> 00:06:15,639
coupled services which implement

00:06:12,520 --> 00:06:16,960
business capabilities it give us a

00:06:15,639 --> 00:06:19,120
visual again something that I pulled

00:06:16,960 --> 00:06:20,469
from the top Google result with the

00:06:19,120 --> 00:06:22,930
source here of course because our honest

00:06:20,469 --> 00:06:24,699
people here a monolithic architecture

00:06:22,930 --> 00:06:26,949
generally you have everything in one

00:06:24,699 --> 00:06:29,289
large application that runs as a

00:06:26,949 --> 00:06:30,729
monolith meanwhile in a micro service

00:06:29,289 --> 00:06:33,279
architecture we might take those

00:06:30,729 --> 00:06:34,930
individual components and stand each of

00:06:33,279 --> 00:06:36,909
them up the services where each micro

00:06:34,930 --> 00:06:39,460
service speaks to as many others as it

00:06:36,909 --> 00:06:41,229
needs and we have lots of little pieces

00:06:39,460 --> 00:06:43,240
of the program distributed in this way

00:06:41,229 --> 00:06:48,639
which gave us gives us various benefits

00:06:43,240 --> 00:06:50,560
in various situations so this is going

00:06:48,639 --> 00:06:52,449
with a micro service architecture which

00:06:50,560 --> 00:06:54,060
we already had precedent for in this

00:06:52,449 --> 00:06:56,710
case study that I'm going to talk about

00:06:54,060 --> 00:07:00,520
gave us an opportunity of trying out

00:06:56,710 --> 00:07:02,139
trying out the combining of that with a

00:07:00,520 --> 00:07:04,569
technique called architectural hoisting

00:07:02,139 --> 00:07:07,120
so I'm going to quote George Clara banks

00:07:04,569 --> 00:07:10,060
here and architectural hoisting is the

00:07:07,120 --> 00:07:11,889
direct ownership management or guarantee

00:07:10,060 --> 00:07:13,990
by the architecture of future property

00:07:11,889 --> 00:07:15,550
or quality attribute and in particular

00:07:13,990 --> 00:07:17,409
it lets developers depend on the

00:07:15,550 --> 00:07:21,849
architecture for the hoisted feature

00:07:17,409 --> 00:07:22,020
property or quality so this returns to

00:07:21,849 --> 00:07:23,550
the

00:07:22,020 --> 00:07:25,560
question with these definitions in mind

00:07:23,550 --> 00:07:27,120
in these perspectives is there any way

00:07:25,560 --> 00:07:28,949
we can use these so that when teams from

00:07:27,120 --> 00:07:31,050
different organizations work together we

00:07:28,949 --> 00:07:33,449
can adopt an architectural approach to

00:07:31,050 --> 00:07:34,860
reconcile this tension between this

00:07:33,449 --> 00:07:37,560
possible tension between teams and the

00:07:34,860 --> 00:07:39,960
way they work and we do this or we try

00:07:37,560 --> 00:07:43,879
to do this by hosting certain quality

00:07:39,960 --> 00:07:46,740
attributes into the architecture itself

00:07:43,879 --> 00:07:48,539
so we'll simplify a little bit and let's

00:07:46,740 --> 00:07:50,069
say we have as I said a research team

00:07:48,539 --> 00:07:51,900
and an engineering team and let's say

00:07:50,069 --> 00:07:53,190
that we know ahead of time that the

00:07:51,900 --> 00:07:54,630
research team is going to focus on

00:07:53,190 --> 00:07:57,000
accuracy they're going to focus on

00:07:54,630 --> 00:07:59,280
developing the algorithm on pushing the

00:07:57,000 --> 00:08:00,599
state-of-the-art while the engineering

00:07:59,280 --> 00:08:02,069
team will be concerned with more

00:08:00,599 --> 00:08:03,720
products type concerns and let's just

00:08:02,069 --> 00:08:05,659
say for now to simplify the conversation

00:08:03,720 --> 00:08:08,460
that their main concern is performance

00:08:05,659 --> 00:08:11,250
so is there any way that we can design

00:08:08,460 --> 00:08:13,919
the architecture to have as many quality

00:08:11,250 --> 00:08:16,050
attributes as as we can make it have in

00:08:13,919 --> 00:08:17,340
such a way that we can have both teams

00:08:16,050 --> 00:08:19,469
working and pursuing their own

00:08:17,340 --> 00:08:21,300
incentives but working within the

00:08:19,469 --> 00:08:23,250
architectures so that they don't have to

00:08:21,300 --> 00:08:25,770
deal with this tension and that these

00:08:23,250 --> 00:08:26,880
things are actually that the

00:08:25,770 --> 00:08:29,550
architecture makes it difficult for

00:08:26,880 --> 00:08:31,139
other teams actually damage the system

00:08:29,550 --> 00:08:35,130
for Berthe prevent the system from

00:08:31,139 --> 00:08:38,550
having these properties so to make this

00:08:35,130 --> 00:08:42,719
concrete let's go into the case study of

00:08:38,550 --> 00:08:45,990
what happens so this was a project that

00:08:42,719 --> 00:08:47,610
as that was building on top of an

00:08:45,990 --> 00:08:50,430
existing platform that was in production

00:08:47,610 --> 00:08:52,589
and in particularly we had a novel AI

00:08:50,430 --> 00:08:54,029
tasks to be solved now all we knew was

00:08:52,589 --> 00:08:55,230
the inputs and outputs we didn't

00:08:54,029 --> 00:08:56,490
actually know how it was going to be

00:08:55,230 --> 00:08:58,800
solved what the concerns of the

00:08:56,490 --> 00:09:00,540
application would be what specific miss

00:08:58,800 --> 00:09:02,940
with different types of data stores or

00:09:00,540 --> 00:09:04,770
resources it might need and essentially

00:09:02,940 --> 00:09:07,620
two teams were picked put together and

00:09:04,770 --> 00:09:11,040
said you to make the system I find a

00:09:07,620 --> 00:09:12,839
solution make the system ship it so

00:09:11,040 --> 00:09:14,310
using this method of architectural

00:09:12,839 --> 00:09:17,910
hoisting what we tried to do was the

00:09:14,310 --> 00:09:19,709
engineering team try to design system so

00:09:17,910 --> 00:09:22,290
that we could iterate on the system

00:09:19,709 --> 00:09:24,029
design itself and focus on things like

00:09:22,290 --> 00:09:26,459
performance fault tolerance and things

00:09:24,029 --> 00:09:28,320
like that while research could just

00:09:26,459 --> 00:09:31,410
pursue their incentives and focus on

00:09:28,320 --> 00:09:33,570
state-of-the-art improvements in

00:09:31,410 --> 00:09:35,459
particular this was a made this more

00:09:33,570 --> 00:09:36,749
difficult by the fact that the algorithm

00:09:35,459 --> 00:09:38,369
rythmic solution actually had not been

00:09:36,749 --> 00:09:40,290
developed but there was a tight deadline

00:09:38,369 --> 00:09:41,759
and we had to start so we had to build a

00:09:40,290 --> 00:09:44,369
lot of flexibility into the architecture

00:09:41,759 --> 00:09:45,779
to allow us to actually fulfill all

00:09:44,369 --> 00:09:47,670
these goals we didn't have time to be

00:09:45,779 --> 00:09:49,649
losing friction to figuring out let's

00:09:47,670 --> 00:09:51,389
say there is some sort of improvement

00:09:49,649 --> 00:09:53,639
made in a prototype we don't want to

00:09:51,389 --> 00:09:55,410
spend time reimplemented a prototype in

00:09:53,639 --> 00:09:57,240
particular can we have the research team

00:09:55,410 --> 00:10:02,459
just writing code that ships directly to

00:09:57,240 --> 00:10:04,079
production so this is we went through a

00:10:02,459 --> 00:10:05,910
lot of redesigns in order to do this I

00:10:04,079 --> 00:10:07,230
was just breeze through a couple I just

00:10:05,910 --> 00:10:09,509
want to illustrate how much has changed

00:10:07,230 --> 00:10:11,509
over the course of three months we went

00:10:09,509 --> 00:10:14,550
from this initial design where we have

00:10:11,509 --> 00:10:17,069
these just visually looking at the shape

00:10:14,550 --> 00:10:18,600
of it within about a month this got

00:10:17,069 --> 00:10:20,819
rearranged the architecture diagram to

00:10:18,600 --> 00:10:22,019
look like this we arranged rearranged it

00:10:20,819 --> 00:10:25,050
again after when you've figured out more

00:10:22,019 --> 00:10:26,730
concerns and we finally ended up with

00:10:25,050 --> 00:10:29,179
this final design and all of these

00:10:26,730 --> 00:10:33,029
redesigns happen in about three months

00:10:29,179 --> 00:10:35,759
now this was made easier because we were

00:10:33,029 --> 00:10:37,019
able to repurpose micro-services because

00:10:35,759 --> 00:10:38,519
they've implemented one one business

00:10:37,019 --> 00:10:40,350
capability and all we changed was how

00:10:38,519 --> 00:10:42,720
these pieces communicate differently

00:10:40,350 --> 00:10:47,459
with one another so actually I forgot

00:10:42,720 --> 00:10:48,929
Maya pull this out so we'll go through

00:10:47,459 --> 00:10:50,160
this a little bit there were some

00:10:48,929 --> 00:10:52,290
general patterns we found that we're

00:10:50,160 --> 00:10:54,119
very useful to mediate this sort of

00:10:52,290 --> 00:10:55,290
approach we had and I'll go through them

00:10:54,119 --> 00:10:58,559
after just describing what the

00:10:55,290 --> 00:11:01,589
subsystems are here so what was this

00:10:58,559 --> 00:11:04,619
task we have some sort of data that

00:11:01,589 --> 00:11:06,869
comes in some documents in this case and

00:11:04,619 --> 00:11:10,740
we have an ingestion subsystem here

00:11:06,869 --> 00:11:11,939
where we we essentially have to put

00:11:10,740 --> 00:11:14,069
those through an ingestion process

00:11:11,939 --> 00:11:16,319
extract some data from them do some

00:11:14,069 --> 00:11:18,540
processing some pre-processing to get

00:11:16,319 --> 00:11:20,189
the data in a format that we want we

00:11:18,540 --> 00:11:21,929
want to have messages or we have

00:11:20,189 --> 00:11:23,819
messages of incoming documents as they

00:11:21,929 --> 00:11:25,610
come in there's some data extraction

00:11:23,819 --> 00:11:29,699
here in a kind of a standalone component

00:11:25,610 --> 00:11:31,350
and a document store so later we have

00:11:29,699 --> 00:11:33,299
all of this data that the customer has

00:11:31,350 --> 00:11:35,220
given us and later a user wants to

00:11:33,299 --> 00:11:38,220
extract some information from it and

00:11:35,220 --> 00:11:39,509
they would give two or three examples of

00:11:38,220 --> 00:11:42,179
the sort of information they wanted to

00:11:39,509 --> 00:11:43,949
extract and the idea was that we would

00:11:42,179 --> 00:11:46,230
implement a way of extracting other

00:11:43,949 --> 00:11:48,330
types of information of that sort from

00:11:46,230 --> 00:11:49,980
the rest of the data set

00:11:48,330 --> 00:11:52,440
just by extending a pattern of the

00:11:49,980 --> 00:11:54,780
examples they gave us so the way that we

00:11:52,440 --> 00:11:56,880
set this set this up we'll go into this

00:11:54,780 --> 00:11:59,520
in a second is each of these algorithm

00:11:56,880 --> 00:12:01,860
boxes is refers to a different approach

00:11:59,520 --> 00:12:04,410
to solving the problem so one of these

00:12:01,860 --> 00:12:05,430
was worked on by the research team one

00:12:04,410 --> 00:12:07,530
of these was worked on by the

00:12:05,430 --> 00:12:09,240
engineering team and we tried to

00:12:07,530 --> 00:12:11,070
encapsulate this work into these

00:12:09,240 --> 00:12:14,640
components so that we could try to

00:12:11,070 --> 00:12:16,560
encourage so that we wouldn't require

00:12:14,640 --> 00:12:18,000
the research team to be doing the sort

00:12:16,560 --> 00:12:19,680
of work that they're not incentivized to

00:12:18,000 --> 00:12:23,670
do that they don't want to do such as

00:12:19,680 --> 00:12:25,110
testing of the entire system or worrying

00:12:23,670 --> 00:12:30,120
about that ingestion or data management

00:12:25,110 --> 00:12:31,770
or any of these things so like I said

00:12:30,120 --> 00:12:33,990
there was generally one ingestion system

00:12:31,770 --> 00:12:35,610
this mostly we designed on our own but

00:12:33,990 --> 00:12:38,010
with obviously input about what that it

00:12:35,610 --> 00:12:40,980
needed to look like there is a training

00:12:38,010 --> 00:12:42,600
subsystem where as data changes we have

00:12:40,980 --> 00:12:45,090
basically a proxy to a high performance

00:12:42,600 --> 00:12:46,860
computer where we have some model

00:12:45,090 --> 00:12:48,630
storage and some model serving so we can

00:12:46,860 --> 00:12:51,150
actually query the model later at

00:12:48,630 --> 00:12:52,890
runtime and of course the query time

00:12:51,150 --> 00:12:55,530
system where we would get some example

00:12:52,890 --> 00:12:57,360
input from the user do some analysis and

00:12:55,530 --> 00:13:01,380
extract the information from the model

00:12:57,360 --> 00:13:03,800
and return back to the user the patterns

00:13:01,380 --> 00:13:06,720
that we use in order to do this are

00:13:03,800 --> 00:13:08,520
fixed interfaces for multiple provider

00:13:06,720 --> 00:13:10,380
backends so each of these

00:13:08,520 --> 00:13:11,580
implementations has the same exact

00:13:10,380 --> 00:13:14,280
interface and they solve the same

00:13:11,580 --> 00:13:17,310
problem but in different ways so what

00:13:14,280 --> 00:13:18,600
are we what are the quality art abuse

00:13:17,310 --> 00:13:20,520
that we've actually encoded in

00:13:18,600 --> 00:13:22,530
architecture here by having as many

00:13:20,520 --> 00:13:25,530
different backends as we want with the

00:13:22,530 --> 00:13:30,870
same interface we have extensibility for

00:13:25,530 --> 00:13:32,610
one we can implement new implement new

00:13:30,870 --> 00:13:35,220
functionality or new methods of analysis

00:13:32,610 --> 00:13:36,840
in the backend here and whenever a

00:13:35,220 --> 00:13:38,400
request comes in and we fan it out they

00:13:36,840 --> 00:13:40,800
all respond and we collect it all and

00:13:38,400 --> 00:13:42,570
put it in a database this enabled

00:13:40,800 --> 00:13:44,760
experimentation this also enabled for

00:13:42,570 --> 00:13:46,230
enabled fault tolerance so we had a much

00:13:44,760 --> 00:13:48,690
decreased worry about fault tolerance so

00:13:46,230 --> 00:13:50,130
let's say there are some edge cases in

00:13:48,690 --> 00:13:52,140
the research implementation that have

00:13:50,130 --> 00:13:54,000
not been ironed out or well or haven't

00:13:52,140 --> 00:13:55,590
been handled because that's just not

00:13:54,000 --> 00:13:57,540
something that that team generally has

00:13:55,590 --> 00:13:59,460
to do or is incentivized to worry about

00:13:57,540 --> 00:14:00,930
if that happens then we have another

00:13:59,460 --> 00:14:02,130
component ready to take over and return

00:14:00,930 --> 00:14:03,899
some sort of input

00:14:02,130 --> 00:14:06,420
so that the system as a whole is not

00:14:03,899 --> 00:14:08,850
down so we have just maybe the graded

00:14:06,420 --> 00:14:13,709
service but that is a degree of fault

00:14:08,850 --> 00:14:15,209
tolerance a second pattern that we can

00:14:13,709 --> 00:14:17,819
extract from the way we did this was

00:14:15,209 --> 00:14:19,110
message queues for events let's say new

00:14:17,819 --> 00:14:24,839
data comes in that we need to process

00:14:19,110 --> 00:14:27,540
Center in a new model on so by doing it

00:14:24,839 --> 00:14:29,160
this way we encoded scalability into the

00:14:27,540 --> 00:14:31,410
system so we don't need necessarily

00:14:29,160 --> 00:14:32,940
let's say that there's some sort of data

00:14:31,410 --> 00:14:34,949
extraction that comes in and it's a

00:14:32,940 --> 00:14:36,660
little bit slow well we can just add

00:14:34,949 --> 00:14:38,519
more workers that all read from the same

00:14:36,660 --> 00:14:40,889
message queue and give us the ability to

00:14:38,519 --> 00:14:43,050
scale up as we need to and this is

00:14:40,889 --> 00:14:46,500
actually not not so much by our design

00:14:43,050 --> 00:14:47,819
but but by micro-service architecture

00:14:46,500 --> 00:14:51,000
itself because you can always add more

00:14:47,819 --> 00:14:54,839
replicas that back a service we also

00:14:51,000 --> 00:14:57,089
have pub/sub for state changes so let's

00:14:54,839 --> 00:15:00,360
say that we want to we have a team

00:14:57,089 --> 00:15:02,610
implementing the data analysis for model

00:15:00,360 --> 00:15:03,720
training for the data that comes in but

00:15:02,610 --> 00:15:05,790
we don't want to have them worry about

00:15:03,720 --> 00:15:07,439
how to read the data about data backups

00:15:05,790 --> 00:15:10,139
about cleaning up data that's old about

00:15:07,439 --> 00:15:11,850
all of these things so rather than

00:15:10,139 --> 00:15:15,420
having them worry about it we let them

00:15:11,850 --> 00:15:17,279
focus on what they again 10 want to

00:15:15,420 --> 00:15:18,509
focus on and every time there's a state

00:15:17,279 --> 00:15:20,850
change and we handle it we have a

00:15:18,509 --> 00:15:22,500
pub/sub mechanism and it just notifies

00:15:20,850 --> 00:15:25,259
the various implementations to actually

00:15:22,500 --> 00:15:27,329
pick up the new data and use it so now

00:15:25,259 --> 00:15:29,130
we've built in modularity and

00:15:27,329 --> 00:15:31,500
reliability into the system as quality

00:15:29,130 --> 00:15:32,699
attributes by just taking away this

00:15:31,500 --> 00:15:34,290
concern and putting it in the

00:15:32,699 --> 00:15:38,579
architecture itself rather than in any

00:15:34,290 --> 00:15:41,310
one particular component generally also

00:15:38,579 --> 00:15:43,620
useful proxies and facades so rather

00:15:41,310 --> 00:15:44,699
than having having to have everybody

00:15:43,620 --> 00:15:47,250
figure out how to use this high

00:15:44,699 --> 00:15:49,439
performance compute cluster what the

00:15:47,250 --> 00:15:51,899
parameters are managing credentials

00:15:49,439 --> 00:15:53,339
where the object sort is going to be the

00:15:51,899 --> 00:15:55,889
permissions the file storage

00:15:53,339 --> 00:15:58,170
we just encapsulate that all in a proxy

00:15:55,889 --> 00:16:00,180
so now all that each another team has to

00:15:58,170 --> 00:16:02,160
do is it writes the actual training

00:16:00,180 --> 00:16:04,139
scripts and just submits it and we take

00:16:02,160 --> 00:16:05,939
care of everything else so this is all

00:16:04,139 --> 00:16:08,130
obstructed away which also gives us

00:16:05,939 --> 00:16:09,899
separation of concerns and again let's

00:16:08,130 --> 00:16:12,269
the iteration on the algorithmic

00:16:09,899 --> 00:16:14,040
implementation solution to iterate to

00:16:12,269 --> 00:16:15,900
proceed without worrying about all of

00:16:14,040 --> 00:16:18,480
the rest of these things

00:16:15,900 --> 00:16:20,520
at the same time we have the research

00:16:18,480 --> 00:16:22,110
organization pursuing its incentives and

00:16:20,520 --> 00:16:23,430
what it wants to do by just focusing on

00:16:22,110 --> 00:16:25,740
that algorithm and everything else being

00:16:23,430 --> 00:16:27,990
abstracted away meanwhile we can take

00:16:25,740 --> 00:16:30,060
the time to optimize whatever other

00:16:27,990 --> 00:16:34,080
components are slow or need more testing

00:16:30,060 --> 00:16:36,540
or need better better error handling and

00:16:34,080 --> 00:16:37,950
so both teams are able because this is

00:16:36,540 --> 00:16:40,230
what both teams are naturally inclined

00:16:37,950 --> 00:16:43,100
to do they're enabled to do this by the

00:16:40,230 --> 00:16:45,720
architecture and both actually proceed

00:16:43,100 --> 00:16:48,030
doing that full-time with full focus and

00:16:45,720 --> 00:16:50,670
without getting distracted by figuring

00:16:48,030 --> 00:16:52,020
out code handoffs or reviewing each

00:16:50,670 --> 00:16:53,790
other's code and disagreeing on code

00:16:52,020 --> 00:17:00,180
style or testing processes or anything

00:16:53,790 --> 00:17:01,230
like that so the results of how this

00:17:00,180 --> 00:17:03,840
actually all worked out

00:17:01,230 --> 00:17:05,580
so the architectural flexibility that we

00:17:03,840 --> 00:17:07,430
built in using this approach which was

00:17:05,580 --> 00:17:09,660
enabled by a micro service architecture

00:17:07,430 --> 00:17:11,940
it minimized the impact of changing

00:17:09,660 --> 00:17:14,820
requirements and scope creep which

00:17:11,940 --> 00:17:17,850
happened as it always does the final

00:17:14,820 --> 00:17:19,830
product had a cohesive design and we'd

00:17:17,850 --> 00:17:21,540
argue pretty much all desired quality

00:17:19,830 --> 00:17:23,430
attributes we had performance we had

00:17:21,540 --> 00:17:27,480
accuracy we had scalability modularity

00:17:23,430 --> 00:17:29,250
all of these things in the end the AI

00:17:27,480 --> 00:17:30,450
team the research team

00:17:29,250 --> 00:17:31,740
submitted their work to the journal

00:17:30,450 --> 00:17:33,870
because they were able to even though

00:17:31,740 --> 00:17:35,640
this was a relatively short project they

00:17:33,870 --> 00:17:37,770
were able to focus full-time on what

00:17:35,640 --> 00:17:39,300
they needed to do so even with just six

00:17:37,770 --> 00:17:41,550
months which is relatively short for a

00:17:39,300 --> 00:17:43,020
research project they were able to

00:17:41,550 --> 00:17:45,900
improve the state of the art and submit

00:17:43,020 --> 00:17:47,340
to the conference's that they they have

00:17:45,900 --> 00:17:50,430
rewarded to be submitting to and going

00:17:47,340 --> 00:17:52,290
to by their organization and throughout

00:17:50,430 --> 00:17:54,120
the entire process we had significantly

00:17:52,290 --> 00:17:57,090
reduced communication and management

00:17:54,120 --> 00:17:58,620
overhead so since we had well isolated

00:17:57,090 --> 00:18:00,300
components with clear responsibilities

00:17:58,620 --> 00:18:02,190
and the various concerns being actually

00:18:00,300 --> 00:18:03,750
lifted in the architecture and we don't

00:18:02,190 --> 00:18:06,240
have to argue about the performance of

00:18:03,750 --> 00:18:07,650
this or that or how various or what the

00:18:06,240 --> 00:18:09,600
fault tolerance will be or whether these

00:18:07,650 --> 00:18:10,800
edge cases are handled everyone's just

00:18:09,600 --> 00:18:12,810
naturally focused on what they are

00:18:10,800 --> 00:18:14,760
inclined to do and have experience doing

00:18:12,810 --> 00:18:17,190
so there was very little overhead there

00:18:14,760 --> 00:18:19,050
and it's also meant that everybody was

00:18:17,190 --> 00:18:20,970
happier during the work that they did so

00:18:19,050 --> 00:18:22,080
nobody had to actually be stuck doing

00:18:20,970 --> 00:18:23,400
work that they felt they shouldn't have

00:18:22,080 --> 00:18:25,890
to do or it wasn't normally their

00:18:23,400 --> 00:18:28,230
responsibility which you always have to

00:18:25,890 --> 00:18:29,730
do to some degree but this also meant

00:18:28,230 --> 00:18:32,130
that people were

00:18:29,730 --> 00:18:34,159
just happier doing doing what they were

00:18:32,130 --> 00:18:34,159
doing

00:18:35,510 --> 00:18:40,240
downsize so we actually run a little bit

00:18:37,880 --> 00:18:43,490
too far with a decoupling of these teams

00:18:40,240 --> 00:18:45,380
so we had there was a period of time

00:18:43,490 --> 00:18:47,690
worried we hadn't really touched base

00:18:45,380 --> 00:18:49,580
very well for two or three weeks and we

00:18:47,690 --> 00:18:51,530
met and we realized that both teams had

00:18:49,580 --> 00:18:53,120
designed mutually exclusive solutions to

00:18:51,530 --> 00:18:54,380
the same problem because there was just

00:18:53,120 --> 00:18:55,670
no communication that both had

00:18:54,380 --> 00:18:56,390
identified this problem and both were

00:18:55,670 --> 00:18:58,820
working on it

00:18:56,390 --> 00:19:01,460
so this flexibility allowed a loss of

00:18:58,820 --> 00:19:02,960
synchronization at times on requirements

00:19:01,460 --> 00:19:04,760
so there was miscommunication there

00:19:02,960 --> 00:19:06,380
because we got used to kind of working

00:19:04,760 --> 00:19:07,850
on our separate components and just

00:19:06,380 --> 00:19:10,490
trusting the other team to be doing what

00:19:07,850 --> 00:19:11,630
they're doing and sometimes there was

00:19:10,490 --> 00:19:13,190
some miscommunication on design

00:19:11,630 --> 00:19:15,560
decisions there were one or two times

00:19:13,190 --> 00:19:18,290
when the responsibilities of a certain

00:19:15,560 --> 00:19:22,040
component weren't clear to one team one

00:19:18,290 --> 00:19:23,480
or the other so if we could actually go

00:19:22,040 --> 00:19:26,240
back into it again how would we have

00:19:23,480 --> 00:19:27,980
improved it one is to keep some sort of

00:19:26,240 --> 00:19:29,870
record of the architectural decisions

00:19:27,980 --> 00:19:31,370
that were made periodically as they are

00:19:29,870 --> 00:19:33,500
made especially when each of these

00:19:31,370 --> 00:19:34,490
redesigns happened because then we would

00:19:33,500 --> 00:19:36,410
have a record where we could just

00:19:34,490 --> 00:19:40,250
reference it send a link over to you

00:19:36,410 --> 00:19:42,440
whoever needs to get caught up and we

00:19:40,250 --> 00:19:44,240
actually did very little cross team code

00:19:42,440 --> 00:19:45,680
review or any sort of periodic knowledge

00:19:44,240 --> 00:19:48,070
sharing throughout the project so in the

00:19:45,680 --> 00:19:50,630
end when one team has some slack towards

00:19:48,070 --> 00:19:51,860
getting closer to the deadline it was

00:19:50,630 --> 00:19:53,270
actually unable to help the other team

00:19:51,860 --> 00:19:55,280
finish up on something they were behind

00:19:53,270 --> 00:19:57,020
on because we weren't familiar with the

00:19:55,280 --> 00:19:58,640
codebase and then the law of adding more

00:19:57,020 --> 00:20:01,210
people to a late project makes it later

00:19:58,640 --> 00:20:04,010
would have kicked in right there and

00:20:01,210 --> 00:20:05,390
finally I tried very hard to come to

00:20:04,010 --> 00:20:07,430
eliminate the need for any sort of

00:20:05,390 --> 00:20:08,750
formal project management role but this

00:20:07,430 --> 00:20:10,310
experience convinced me that you do need

00:20:08,750 --> 00:20:11,480
some sort of manager on most projects

00:20:10,310 --> 00:20:14,360
especially if you have more than one

00:20:11,480 --> 00:20:17,279
team so I finally eternal eyes the

00:20:14,360 --> 00:20:21,039
banette for that to be there

00:20:17,279 --> 00:20:23,440
so to kind of recap what's the main idea

00:20:21,039 --> 00:20:25,539
here we start with the observation that

00:20:23,440 --> 00:20:26,980
teams in different organizations have

00:20:25,539 --> 00:20:29,019
different incentive structures and that

00:20:26,980 --> 00:20:30,549
those incentive structures may cause

00:20:29,019 --> 00:20:33,159
those teams to naturally prioritize

00:20:30,549 --> 00:20:35,289
different quality attributes and in a

00:20:33,159 --> 00:20:37,659
cross organization collaboration these

00:20:35,289 --> 00:20:40,000
may be in tension with one another and

00:20:37,659 --> 00:20:42,130
so one way of trying to resolve this is

00:20:40,000 --> 00:20:43,809
to use architectural hoisting to wholly

00:20:42,130 --> 00:20:45,100
certain quality attributes in the

00:20:43,809 --> 00:20:46,389
architecture itself so that the

00:20:45,100 --> 00:20:48,309
individual teams don't have to worry

00:20:46,389 --> 00:20:50,590
about it I can naturally pursue the

00:20:48,309 --> 00:20:52,570
normal ways of working and that this is

00:20:50,590 --> 00:20:55,389
particularly easy using a microservice

00:20:52,570 --> 00:20:57,850
architecture and finally with an

00:20:55,389 --> 00:20:59,620
observation that once this gets going

00:20:57,850 --> 00:21:00,970
and people get comfortable with it they

00:20:59,620 --> 00:21:02,380
can actually lose communication more

00:21:00,970 --> 00:21:05,500
than they should and this is something

00:21:02,380 --> 00:21:06,760
to watch out for this architectural

00:21:05,500 --> 00:21:09,039
approach to encouraging collaboration is

00:21:06,760 --> 00:21:11,230
not magic it comes with its own risks

00:21:09,039 --> 00:21:13,419
like any other like any other

00:21:11,230 --> 00:21:25,690
methodology it needs to be executed with

00:21:13,419 --> 00:21:37,350
care and that's all I have thank you so

00:21:25,690 --> 00:21:40,860
are there any questions that the chart

00:21:37,350 --> 00:21:40,860
sure this one

00:21:44,100 --> 00:21:46,160
you

00:21:51,900 --> 00:22:02,130
how responsible is it simply by the

00:21:58,180 --> 00:22:09,820
nature this is research this is

00:22:02,130 --> 00:22:11,830
engineering high scale like so let's go

00:22:09,820 --> 00:22:16,060
back to that diagram which I did kind of

00:22:11,830 --> 00:22:22,660
breeze through generally yes it was what

00:22:16,060 --> 00:22:25,680
we try to do is identify what at the end

00:22:22,660 --> 00:22:28,180
of the we try to identify what sorts of

00:22:25,680 --> 00:22:29,500
skills are most developed on each team

00:22:28,180 --> 00:22:31,570
and what they are naturally going to be

00:22:29,500 --> 00:22:34,480
working on the most and then try to

00:22:31,570 --> 00:22:36,280
design the separation of concerns so

00:22:34,480 --> 00:22:38,860
that different teams could own different

00:22:36,280 --> 00:22:41,020
components entirely so in particular

00:22:38,860 --> 00:22:43,720
like I said we actually in this case we

00:22:41,020 --> 00:22:47,110
were able to come up with a simple but

00:22:43,720 --> 00:22:49,090
fast and reliable implementation for the

00:22:47,110 --> 00:22:50,650
problem at hand ourselves and that the

00:22:49,090 --> 00:22:52,360
research team focus on another one so

00:22:50,650 --> 00:22:55,660
this was entirely their component that

00:22:52,360 --> 00:22:56,590
they owned just based on have to let

00:22:55,660 --> 00:22:58,960
them iterate and have their own

00:22:56,590 --> 00:23:01,090
playground towards the end we did come

00:22:58,960 --> 00:23:01,960
in and help add some more robust testing

00:23:01,090 --> 00:23:04,240
to make sure everything was working

00:23:01,960 --> 00:23:07,360
properly but yes it was very much based

00:23:04,240 --> 00:23:09,040
on what people were what their roles

00:23:07,360 --> 00:23:11,590
were overall and within their

00:23:09,040 --> 00:23:16,240
organizations this is the role of

00:23:11,590 --> 00:23:19,270
sidecar here research team that is just

00:23:16,240 --> 00:23:20,620
I I kind of repurposed this slide from

00:23:19,270 --> 00:23:24,100
an internal presentation took away the

00:23:20,620 --> 00:23:26,890
names of things this is kind of like a

00:23:24,100 --> 00:23:28,390
mini proxy to Center a particular

00:23:26,890 --> 00:23:30,160
customer's request to their model and

00:23:28,390 --> 00:23:32,440
not somebody else's it's kind of a

00:23:30,160 --> 00:23:34,000
little it's not particularly important

00:23:32,440 --> 00:23:37,600
to the overall I just thought it was

00:23:34,000 --> 00:23:38,740
like my passing this proxy yes you can

00:23:37,600 --> 00:23:50,080
pretend that these arrows go straight

00:23:38,740 --> 00:23:51,580
there so for the accuracy of the again

00:23:50,080 --> 00:23:52,990
this was the benefit of letting people

00:23:51,580 --> 00:23:56,230
fulfill the roles that they naturally

00:23:52,990 --> 00:23:57,580
have from within organizations so the

00:23:56,230 --> 00:23:59,410
accuracy there were routine accuracy

00:23:57,580 --> 00:24:00,640
test being run against the research

00:23:59,410 --> 00:24:02,380
teams component that they would just

00:24:00,640 --> 00:24:03,610
nobody had to tell them to do it they

00:24:02,380 --> 00:24:07,300
just did it so they're keeping track of

00:24:03,610 --> 00:24:09,130
that themselves on our hand we already

00:24:07,300 --> 00:24:11,410
had load testing and performance testing

00:24:09,130 --> 00:24:12,610
habits because of what we do normally so

00:24:11,410 --> 00:24:13,810
we would just apply that to the entire

00:24:12,610 --> 00:24:16,660
system and then try to identify

00:24:13,810 --> 00:24:19,180
bottlenecks and improve those so again

00:24:16,660 --> 00:24:20,680
just very naturally people did what they

00:24:19,180 --> 00:24:22,210
are naturally inclined to do and used to

00:24:20,680 --> 00:24:23,830
do I should mention that these were

00:24:22,210 --> 00:24:28,180
relatively mature teams they were not

00:24:23,830 --> 00:24:32,460
fresh out of school hires right so each

00:24:28,180 --> 00:24:34,520
team just took care of its own concerns

00:24:32,460 --> 00:24:34,520
you

00:24:34,630 --> 00:24:36,690
you

00:24:38,570 --> 00:24:40,630
you

00:24:48,110 --> 00:24:54,750
yes so separate repositories on github

00:24:51,800 --> 00:25:06,420
everything or in source control in

00:24:54,750 --> 00:25:10,260
general yes one thing that helped a lot

00:25:06,420 --> 00:25:11,760
is because we had we had president for

00:25:10,260 --> 00:25:12,900
micro service base architecture so we

00:25:11,760 --> 00:25:17,460
had some templates we could have we

00:25:12,900 --> 00:25:19,620
shared so things like setting up best

00:25:17,460 --> 00:25:21,090
practices for certain libraries where it

00:25:19,620 --> 00:25:22,140
was already established so that will we

00:25:21,090 --> 00:25:23,970
kind of hit the ground running and we

00:25:22,140 --> 00:25:27,480
didn't have to learn a new framework so

00:25:23,970 --> 00:25:29,940
that was very helpful and perhaps

00:25:27,480 --> 00:25:31,680
actually one of the lucky things that

00:25:29,940 --> 00:25:34,910
made this work within a short amount of

00:25:31,680 --> 00:25:34,910
period of a short period of time

00:25:36,590 --> 00:25:43,200
how did you handle change management

00:25:39,929 --> 00:25:45,990
across all of these services more

00:25:43,200 --> 00:25:48,179
specifically made a change to one of the

00:25:45,990 --> 00:25:50,190
services how would you tell other

00:25:48,179 --> 00:25:53,220
services that something was going to

00:25:50,190 --> 00:25:56,850
change by designing the responsibilities

00:25:53,220 --> 00:26:00,480
of each upfront and with a strict RPC

00:25:56,850 --> 00:26:02,760
API so this was not Jason you it's very

00:26:00,480 --> 00:26:06,210
well defined and difficult to change and

00:26:02,760 --> 00:26:08,010
that was just because we had this this

00:26:06,210 --> 00:26:10,380
design up front of the concerns of each

00:26:08,010 --> 00:26:12,330
everybody when when we found out we

00:26:10,380 --> 00:26:14,130
needed to make a change in one service

00:26:12,330 --> 00:26:15,360
we just naturally knew that oh we need

00:26:14,130 --> 00:26:17,429
to communicate this to the other team

00:26:15,360 --> 00:26:21,659
because they're they're calling it for

00:26:17,429 --> 00:26:23,370
this purpose so those two separate teams

00:26:21,659 --> 00:26:24,900
of maybe about five people so that

00:26:23,370 --> 00:26:27,090
happened more easily maybe with a larger

00:26:24,900 --> 00:26:29,470
team that would be things will fall

00:26:27,090 --> 00:26:32,429
through the cracks more easily

00:26:29,470 --> 00:26:32,429
thank you

00:26:38,940 --> 00:26:43,650
yes

00:26:41,220 --> 00:26:45,720
for these organizations applied and

00:26:43,650 --> 00:26:49,260
passed away and I was wondering or

00:26:45,720 --> 00:26:51,830
micro-services challenges are pushed

00:26:49,260 --> 00:26:53,940
back from my top psyche etc I'm getting

00:26:51,830 --> 00:26:56,130
numerous services like this deployed

00:26:53,940 --> 00:26:57,750
every one issues the past where like

00:26:56,130 --> 00:27:00,380
here these ten services that need to go

00:26:57,750 --> 00:27:03,570
up to make this obligation work and they

00:27:00,380 --> 00:27:05,430
essentially have a bad time we did our

00:27:03,570 --> 00:27:07,410
own DevOps our own provisioning our own

00:27:05,430 --> 00:27:09,240
risk quota requests and all of these so

00:27:07,410 --> 00:27:11,460
we kind of just said we need this much

00:27:09,240 --> 00:27:13,890
RAM and this much CPU and we got to do

00:27:11,460 --> 00:27:23,850
whatever we want with it yeah we had a

00:27:13,890 --> 00:27:27,120
lot of freedom because we were adding a

00:27:23,850 --> 00:27:28,710
new system on top of an existing

00:27:27,120 --> 00:27:33,390
platform that we had a lot of those

00:27:28,710 --> 00:27:34,860
problems that already been solved so for

00:27:33,390 --> 00:27:36,180
example the engineering team was already

00:27:34,860 --> 00:27:37,680
its own certificate authority and

00:27:36,180 --> 00:27:39,630
figured out key management and things

00:27:37,680 --> 00:27:41,430
like that and just built that into the

00:27:39,630 --> 00:27:44,240
template for the into the micro service

00:27:41,430 --> 00:27:44,240
template that was reused

00:27:47,530 --> 00:27:51,220
at first zero

00:27:56,720 --> 00:28:02,930
not very high actually you might argue

00:28:00,500 --> 00:28:07,700
that we kind of went a little crazy with

00:28:02,930 --> 00:28:09,260
it the part that I didn't mention is

00:28:07,700 --> 00:28:12,530
that even though we had everything up

00:28:09,260 --> 00:28:14,000
and running very soon after everything

00:28:12,530 --> 00:28:15,410
was finished there was a internal

00:28:14,000 --> 00:28:18,860
reorganization there was nobody left to

00:28:15,410 --> 00:28:20,000
go on call for it so it's just sitting

00:28:18,860 --> 00:28:23,680
there running and staging but not

00:28:20,000 --> 00:28:26,030
Productions well we did try it out with

00:28:23,680 --> 00:28:29,120
collections of millions of documents and

00:28:26,030 --> 00:28:42,650
then it flew tested out manually it

00:28:29,120 --> 00:28:45,380
could have handled a lot of loads so if

00:28:42,650 --> 00:28:47,450
you actually sit down and look at any

00:28:45,380 --> 00:28:49,850
particular events in a system such as

00:28:47,450 --> 00:28:51,620
querying a model or updating a model

00:28:49,850 --> 00:28:53,930
there is never more than two or three

00:28:51,620 --> 00:29:06,530
hops and each hop is on the scale of

00:28:53,930 --> 00:29:08,210
microseconds no I just made that up

00:29:06,530 --> 00:29:10,670
actually or I just noticed that in

00:29:08,210 --> 00:29:12,860
response to your question like a query

00:29:10,670 --> 00:29:15,620
goes in through here through here and it

00:29:12,860 --> 00:29:17,540
just hits the model ingestion I guess

00:29:15,620 --> 00:29:19,310
has a couple but you have a Miss the

00:29:17,540 --> 00:29:21,440
message queue you have this and it gets

00:29:19,310 --> 00:29:30,260
processed and just kind of came out that

00:29:21,440 --> 00:29:34,910
way from the design what they're doing

00:29:30,260 --> 00:29:40,250
try to use this model it's easy to get

00:29:34,910 --> 00:29:44,740
that latency issue in this model at

00:29:40,250 --> 00:29:44,740
least I think it's only maybe

00:29:46,620 --> 00:29:54,030
well when my coworker and I who were Co

00:29:52,080 --> 00:29:55,530
technical leads on this sat down and

00:29:54,030 --> 00:29:58,200
tried to look at it and see if we could

00:29:55,530 --> 00:29:59,550
expect any principles from it we end up

00:29:58,200 --> 00:30:00,450
laughing after about 10 minutes because

00:29:59,550 --> 00:30:05,790
all we had written down was

00:30:00,450 --> 00:30:07,680
encapsulation and abstraction so just as

00:30:05,790 --> 00:30:10,110
a strong understanding of the problem of

00:30:07,680 --> 00:30:11,160
well not even that because like I like I

00:30:10,110 --> 00:30:13,140
mentioned it went through so many

00:30:11,160 --> 00:30:16,400
redesigns it's really just having a

00:30:13,140 --> 00:30:19,450
strong separation of concerns that

00:30:16,400 --> 00:30:22,940
facilitates that

00:30:19,450 --> 00:30:23,930
and we did with all this emergent

00:30:22,940 --> 00:30:26,090
complexity in the inter-service

00:30:23,930 --> 00:30:27,350
communication i mean you have state

00:30:26,090 --> 00:30:28,490
changes coming on a queue and you have

00:30:27,350 --> 00:30:29,980
pub/sub which means you have

00:30:28,490 --> 00:30:32,030
synchronization you might have

00:30:29,980 --> 00:30:33,800
potentially lost messages although it's

00:30:32,030 --> 00:30:35,660
really unlikely you might have things

00:30:33,800 --> 00:30:38,660
going out of sync you might have said we

00:30:35,660 --> 00:30:42,530
might have some replicas and some of the

00:30:38,660 --> 00:30:44,960
storage having eventual consistency like

00:30:42,530 --> 00:30:47,120
that it took quite a while to iron all

00:30:44,960 --> 00:30:48,800
of those out so even though each

00:30:47,120 --> 00:30:50,420
component is simpler the complexity has

00:30:48,800 --> 00:30:52,960
to be somewhere and here it's an

00:30:50,420 --> 00:30:52,960
architecture

00:30:54,130 --> 00:31:03,309
so all these lines RPC calls or yes we

00:31:00,230 --> 00:31:03,309
used your PC for everything

00:31:04,310 --> 00:31:06,370
you

00:31:07,639 --> 00:31:12,230
talk about one possible improvements

00:31:09,919 --> 00:31:16,100
being recording your architectural

00:31:12,230 --> 00:31:17,960
design decisions yes you have like an

00:31:16,100 --> 00:31:24,710
idea if you had to go back and do it

00:31:17,960 --> 00:31:27,230
again like right morning we use to so

00:31:24,710 --> 00:31:28,700
this was the sad part is that we already

00:31:27,230 --> 00:31:30,139
had an internal template for this and we

00:31:28,700 --> 00:31:33,080
kind of just didn't do it because we had

00:31:30,139 --> 00:31:35,419
to move very quickly well that's not an

00:31:33,080 --> 00:31:37,570
excuse we just didn't do it if you

00:31:35,419 --> 00:31:39,739
actually google the phrase architectural

00:31:37,570 --> 00:31:41,659
decision records there's a few blog

00:31:39,739 --> 00:31:43,549
posts that forgive a template that we

00:31:41,659 --> 00:31:46,009
use pretty much directly with some

00:31:43,549 --> 00:31:47,179
simplification and there was actually a

00:31:46,009 --> 00:31:51,830
few talks floating around online about

00:31:47,179 --> 00:31:53,359
it too one of them given by my colleague

00:31:51,830 --> 00:31:54,649
Michael Keeling who will be speaking

00:31:53,359 --> 00:31:57,859
here apparently in a couple months so

00:31:54,649 --> 00:32:01,070
you can he was one who actually brought

00:31:57,859 --> 00:32:03,550
that brought those into the team way

00:32:01,070 --> 00:32:05,470
before this project started

00:32:03,550 --> 00:32:10,200
how many people were involved in this

00:32:05,470 --> 00:32:10,200
project so the engineering team was

00:32:13,049 --> 00:32:17,820
five it was five full-time engineers a

00:32:15,720 --> 00:32:20,220
couple from time-to-time consulting

00:32:17,820 --> 00:32:22,559
they were distributed amongst among

00:32:20,220 --> 00:32:24,059
Pittsburgh and Denver the research team

00:32:22,559 --> 00:32:27,919
was a team of about four or five again

00:32:24,059 --> 00:32:27,919
and they were in New York City

00:32:29,809 --> 00:32:35,149
and we had some another team oh I guess

00:32:33,950 --> 00:32:36,649
we also had a design team that was

00:32:35,149 --> 00:32:38,299
coming up with a tooling for all this at

00:32:36,649 --> 00:32:39,619
the same time that was just a couple

00:32:38,299 --> 00:32:44,029
people they were in the same office as

00:32:39,619 --> 00:32:45,919
us in Pittsburgh and there was a another

00:32:44,029 --> 00:32:47,210
team that we would consult with because

00:32:45,919 --> 00:32:48,440
they had another application that helped

00:32:47,210 --> 00:32:51,139
drive the requirements and some of the

00:32:48,440 --> 00:32:53,419
database design for us and San Jose that

00:32:51,139 --> 00:32:55,039
was about a team of six people I want to

00:32:53,419 --> 00:32:57,219
say but will really only talk to one or

00:32:55,039 --> 00:32:57,219
two

00:33:02,300 --> 00:33:06,560
slightly less technical question you

00:33:04,670 --> 00:33:08,600
said at the end in retrospect you wish

00:33:06,560 --> 00:33:10,010
you had you know some products on

00:33:08,600 --> 00:33:11,390
project management or some project

00:33:10,010 --> 00:33:13,430
manager over things

00:33:11,390 --> 00:33:14,810
project managers tend not to come with

00:33:13,430 --> 00:33:16,640
technical skills whether it's from the

00:33:14,810 --> 00:33:18,620
minimal technical skills your ideal

00:33:16,640 --> 00:33:24,440
project manager going into the project

00:33:18,620 --> 00:33:29,120
with a bad just ensuring ensuring

00:33:24,440 --> 00:33:31,670
routine check-ins cross team and just

00:33:29,120 --> 00:33:33,170
keeping track of let's say one team

00:33:31,670 --> 00:33:34,490
discovers a new requirements or a

00:33:33,170 --> 00:33:36,320
concern that wasn't there and making

00:33:34,490 --> 00:33:38,090
sure that that gets communicated because

00:33:36,320 --> 00:33:39,230
often when you say oh I I didn't wise I

00:33:38,090 --> 00:33:43,180
have to do this and you go off and you

00:33:39,230 --> 00:33:45,410
put up the the code and then you move on

00:33:43,180 --> 00:33:48,849
which we try to be good about that but

00:33:45,410 --> 00:33:51,339
from time to time things fell through

00:33:48,849 --> 00:33:54,309
this case was interesting because this

00:33:51,339 --> 00:33:55,690
was a special project and five or the

00:33:54,309 --> 00:33:56,799
five engineers picked were all from

00:33:55,690 --> 00:34:00,039
different teams and each had a different

00:33:56,799 --> 00:34:03,149
manager so this team had no manager in

00:34:00,039 --> 00:34:05,849
the end and that's why we felt that lack

00:34:03,149 --> 00:34:08,319
then there were other things like

00:34:05,849 --> 00:34:09,399
coordinating security reviews and things

00:34:08,319 --> 00:34:12,609
like that because there's certain

00:34:09,399 --> 00:34:14,740
process things we have to do that at

00:34:12,609 --> 00:34:16,149
least in our in our office our managers

00:34:14,740 --> 00:34:18,849
usually take care of organizing all that

00:34:16,149 --> 00:34:21,129
and setting it up and synchronizing with

00:34:18,849 --> 00:34:23,190
other teams

00:34:21,129 --> 00:34:23,190
you

00:34:24,070 --> 00:34:29,890
so I guess maybe a little bit more than

00:34:26,950 --> 00:34:31,090
project management because this is quite

00:34:29,890 --> 00:34:35,130
a large organization there's a lot of

00:34:31,090 --> 00:34:35,130
external communication it used to happen

00:34:40,700 --> 00:34:46,220
since you didn't adopt any artists did

00:34:43,579 --> 00:34:53,349
you end up doing anything else or

00:34:46,220 --> 00:34:56,029
organically - we were a little bit

00:34:53,349 --> 00:34:58,130
we were fortunate with the team makeup

00:34:56,029 --> 00:34:59,450
because the maturity of people on each

00:34:58,130 --> 00:35:01,579
team were the sort of people that

00:34:59,450 --> 00:35:02,569
naturally would when they notice

00:35:01,579 --> 00:35:03,410
something I need to communicate would

00:35:02,569 --> 00:35:04,549
naturally just call a meeting with

00:35:03,410 --> 00:35:07,339
everybody

00:35:04,549 --> 00:35:09,019
I'm just very proactive so that kind of

00:35:07,339 --> 00:35:10,369
just happened organically and I probably

00:35:09,019 --> 00:35:13,369
also was a large reason that we were

00:35:10,369 --> 00:35:15,589
able to actually stay on track without

00:35:13,369 --> 00:35:19,400
having any sort of management overhead

00:35:15,589 --> 00:35:20,750
at all so if I had five people hired out

00:35:19,400 --> 00:35:22,690
of school for one team and 5 people

00:35:20,750 --> 00:35:25,369
hired out school for another team I

00:35:22,690 --> 00:35:27,769
would probably want to set up some sort

00:35:25,369 --> 00:35:29,450
of process first for them to follow I

00:35:27,769 --> 00:35:30,529
don't mean to pick on college hires I'm

00:35:29,450 --> 00:35:33,500
just saying that these habits or once

00:35:30,529 --> 00:35:36,069
you develop as you start working and

00:35:33,500 --> 00:35:36,069
everybody had

00:35:39,650 --> 00:35:43,450
[Laughter]

00:35:48,090 --> 00:35:51,660
I'm going to go back to

00:35:52,849 --> 00:35:56,770
we're going back to this one

00:35:54,010 --> 00:36:05,490
like how it looks and I found this by

00:35:56,770 --> 00:36:08,850
googling JavaScript any you thing else

00:36:05,490 --> 00:36:08,850
leave it on why

00:36:09,920 --> 00:36:15,680

YouTube URL: https://www.youtube.com/watch?v=fsS6hIIFvys


