Title: Virtual EmberConf 2020: A11y First and Everyone Wins by Ava Wroten
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	A11y First and Everyone Wins by Ava Wroten

By putting accessibility first we can achieve a far more composable, intuitive, and testable product. Come and listen to the real tale of modern automation testing the untestable: a drag and drop user interface. The story of a drag and drop feature doomed to be unaccessible, made accessible. The telling of a feature salvaged by accessibility. We've all been told accessibility is important, but rarely do we feel the fruits of the labor directly. We'll discuss how developers, QA and leads can all feel the same benefit our users feel by putting accessibility first.
Captions: 
	                              [Music]                               hello amber cough virtual attendees                               hello Portland if you are streaming                               there and thank you all for having me                               my name is Ava gave our Rotom and I'm                               here to talk about accessibility that's                               gonna be a little bit different this is                               a success story this is a story                               accessibility first and everyone wins                                more composable intuitive and testable                                we've all heard of mobile first I'm                                gonna flip it on its head a little bit                                once again I am Ava                                Wroten I go by see her and I am a                                software engineer at L of U and L of U                                we build software for K through                                   school districts and I'm very proud of                                what we do there we built this all in                                ember J s and I've been doing ember for                                oh the past seven years or so at                                different companies you can find me on                                get lab or one github at the things in                                the doobly-doo so we'll be discussing a                                project feature that was saved by                                accessibility it might not have gotten                                off the ground otherwise and so I'm very                                excited to share this story with you                                during the course of this story we'll be                                talking about adding functionality with                                composable components so we'll discuss                                composability composable components and                                what that means how I did it in this                                case we'll talk about equitable and                                discoverable user experience design and                                we'll talk about what those things mean                                and finally we'll talk about automation                                testing and how it relates to all these                                topics and hopefully you'll see                                something you haven't quite seen before                                and an automation testing with an ember                                or at least you'll see some of the newer                                ways of how automation testing can be                                done in some of the latest amber                                practices but has me really excited and                                so here's the story I had a feature this                                is several years back now                                and on my team we were given a ticket                                this ticket had a picture on it called                                item reordering this feature was so                                simple that it had no design we just                                wrote it up users should be able to move                                around items on the sidebar in order to                                reorder them to their heart's content ok                                that sounds good                                it sounds simple maybe a little too                                simple so ok Mouse drag and drop that                                makes sense I can make that happen                                what about touch do we support pets                                devices and of course when you ask that                                kind of question that sounds great yeah                                support touch just go through the extra                                loop so you need to do loop holes                                jumping through hoops rather that you                                need to do in order to make touch work                                no big deal                                maybe what about accessibility ok so the                                room goes dead it goes real quiet and I                                need to explain a little bit more what                                I'm talking about so firstly you're                                already seeing on the screen several                                times now a                                                             that out it becomes the word                                accessibility it's a sort of an acronym                                if you will                                that means accessibility perhaps you've                                seen that before perhaps you haven't                                accessibility has                                                    and so we shorten it down for things                                like this presentation or her                                documentation to simply mean                                accessibility but we're also be talking                                about equity so what is equity well                                let's think about the idea of what I was                                being assigned to do I was tasked with                                delivering a feature that I felt like                                maybe not everybody could use ok drag                                and drop sounds simple enough a user can                                use their mouse to move up and down                                click on something and drag it and then                                let go                                that requires some fine motor control it                                sounds like and also touch or on a                                mobile device but it doesn't have                                anything to do with a keyboard input or                                a screen reader or some other ways that                                maybe users are inter                                acting with our app imagine using no                                hands and you're using the eyes in order                                to click on things and move them around                                 clicking and dragging is a very                                 difficult thing to do without a standard                                 Mouse or touch interface and so I felt                                 like it was potentially unfair that we                                 were maybe unintentionally locking out                                 some users from accessing parts of the                                 app this entire feature that was                                 assigned to work on wasn't necessarily                                 accessible to everybody literally not                                 able to be used by everybody and so I                                 felt like there was a lack of equity not                                 that everybody is entirely equal that                                 everybody can use in the same exact way                                 drag and drop but in an equitable way                                 that I was hoping users to be able to                                 interact with this via the keyboard                                 through a different input medium                                        the world lives with some form of                                 disability and the great many talks have                                 been given already trying to sell                                 accessibility trying to be the person up                                 on stage who is selling to you why                                 accessibility is important I'm merely                                 wishing to set the stage for my                                 motivations here about what really got                                 me thinking about this in return in                                 respects to this presentation in                                 respects to this feature there are                                 different degrees of disabilities                                 sometimes there are invisible                                 disabilities sometimes there are visible                                 disabilities that are just varying forms                                 of ability right limited mobility muscle                                 slowness tremors low vision color                                 blindness partial hearing loss things of                                 this nature and this is just a few                                 examples of the varying ways that you                                 can have a varying degree of ability                                 that maybe something isn't completely                                 inaccessible to you but might be more                                 difficult that perhaps you would even                                 just prefer to interact with a device in                                 a different way many times I find myself                                 preferring to interact                                 with a device via the keyboard everybody                                 has their own reasons whether it be                                 ability or otherwise and I want to                                 design for those kinds of things                                 luckily web assistive technologies can                                 commonly help us with vision hearing and                                 movement varying abilities we can use                                 these web technologies in order to piece                                 together interactivity in a way that can                                 allow more people equitable access to                                 these kinds of features and at the end                                 of the day I build software for humans I                                 wouldn't be happy with myself if I                                 shipped some software that was                                 completely unusable to some users just                                 because we lacked some foresight and so                                 I did my research I came across the w                                   website they have a list of patterns if                                 you dig down deep enough and I was                                 looking at some of their approved web                                 patterns and for for wordsworth w                                   stands for the World Wide Web Consortium                                 and so they have a lot of really great a                                 well researched accessible UI patterns                                 that you can borrow from this one in                                 particular caught my eye it's called a                                 example of list boxes with                                 rearrangements I'll scroll down here                                 here's an example with a single select                                 list box so this is using a select that                                 has has been like kind of made larger                                 and also some buttons beneath it I can                                 use my mouse they click on any of these                                 or I could click on these buttons down                                 here at the bottom but I want to use my                                 keyboard to try to interact with this I                                 will hit tab and I can focus into this                                 element the first thing that it does is                                 it automatically selects the first item                                 in the list for me as a visual selection                                 I can see it very obviously become a                                 bright blue and I see a dotted border                                 around the outside of the entire list                                 telling me that the entire list has been                                 selected with a sub selection inside of                                 it I can then use my arrow keys to move                                 down                                 selection but not the item itself and                                 then up in order to go back up with my                                 selection at the bottom of my list I can                                 see it there is an UP button and a down                                 button there's also an unimportant                                 button which is not important for this                                 demo but the up-and-down actually allows                                 me to deep prioritize for example in                                 this case proximity of fast-food can go                                 down just by hitting the spacebar or                                 Enter key on the down button while I                                 have a selected item I can then shift                                 tab back to my list and pick another                                 item like neighborhood walkability I can                                 tab to the UP button and activate it                                 with enter or space the first time I                                 arrived on this page I felt it was very                                 intuitive we were working with something                                 that was using some raw HTML elements                                 I've already been trained to know how to                                 use I know that spacebar + Enter key can                                 activate them I know that they are                                 readily built to be accessible that                                 users will be told how to interact with                                 them if they are semantically written                                 correctly so now already makes you feel                                 a lot better about these items and I                                 know how to interact with them it's very                                 discoverable the user experience of if                                 anybody came here and unintentionally                                 hit tab and found themselves selecting                                 the entire list almost guaranteed that                                 if they knew about how keyboard inputs                                 worked they would try to use similar key                                 combos in order to interact with this                                 list and so you wouldn't even need                                 necessarily a tutorial to tell them how                                 this works which is excellent down                                 further on the list we also have some                                 great accessibility information around                                 Aria labels and how they can be dynamic                                 but that's going to be a little bit                                 outside the scope of this presentation                                 for now but I highly encourage you to                                 read this kind of documentation w                                      excellent at providing it next to my                                 list of two dudes was to find a                                 add on that was sort of the basis                                 instead of having to reinvent the wheel                                 on drag-and-drop with an ember we have a                                 fantastic ecosystem of add-ons out there                                 that do a great many things that people                                 have built for us that we can then pull                                 into our ember applications often as                                 simple as in this case running ember                                 install ember sortable dad is fantastic                                 amber sortable I found on the ember                                 observer website under the category of                                 components drag and drop it was very                                 easy to come across it's also very                                 highly ranked by ember observable and                                 highly scored the rank on this plugin at                                 the current moment is                                                                                                                       percent of downloads I can see how many                                 open issues there are and when the                                 latest commit is so I felt very good                                 about leveraging this add-on ember                                 sortable provided Mouse drag and drop                                 touch drag and drop and it provided a                                 really great ember observer ranking so I                                 felt like there was no reason not to try                                 to use this for the project and that's                                 what I did the component structure as                                 given to us by ember sortable is a                                 component of sortable group and another                                 may another component of sortable item                                 these components are shipped to be                                 composable by default as in a sortable                                 item can be placed inside of a Yoda                                 sortable group and so I decided to                                 follow that pattern instead of doing a                                 reopen on these components or even                                 forking the entire add-on to add an                                 accessibility I added my own custom                                 wrappers I generated these sortable                                 group accessible and sortable item                                 accessible custom wrappers and so it                                 looks a little bit like this where you                                 can see the nesting of each of these                                 items put together in a list there's an                                 each loop inside of there for each of                                 our items and everything else is just                                 kind of nested going down                                 and I was able to do not even have to                                 touch the original and preservable code                                 for this to work so here's the final                                 result here's a demo application that                                 you can access at that little URL at the                                 bottom right of kit lab comm slash                                 Gaiety slash sortable - recipes I will                                 put this I will place this URL in the                                 discord the ember comm channel there in                                 case anybody wants to access it where                                 you can see the code and also all the                                 slides for this presentation so in this                                 I have a demo application where I have                                 sortable recipes right now we have                                 peanut butter cookies in our list I can                                 add another meal like this blackberry                                 fool with has hazelnuts and butter and                                 other things in it so now I have a list                                 of several items and I can drag and drop                                 these lists let's say I wanted                                 blackberry fool to be higher on my list                                 I can just click and drag using my                                 sortable in order to reorder these items                                 and some kind of a priority or however I                                 wish to use this list this is really                                 great this also works for touch right                                 out of the box without me having to do                                 any work on my part with the                                 accessibility components I added in and                                 wrapped around these I can also hit tab                                 and I can tap into the point where I                                 select the entire list and then the                                 entire list gets a different colored                                 outline around it and I see buttons                                 appear for an up sort and a down sort I                                 can now use my arrow keys in order to                                 move my selection down and my selection                                 up much like the w                                                     can tab into these buttons I can press                                 space or enter in order to activate the                                 reordering of these items                                 I can't quartz shift tab in order to                                 move it back up I can just activate                                 these buttons as much as I wish and none                                 of this blocks the interactivity of                                 being able to for example tab                                 to the links that are under here so                                 these are actual links so here's the                                 lengths of peanut butter cookies and                                 here's the link for blackberry fool I                                 can hit enter in order to activate one                                 of these anchor links and it'll take me                                 to that page I can also click on any of                                 these items in order to activate them as                                 well no functionality is lost while                                 doing these kind of interactive things                                 in fact M burger pardon me                                 ember CLI template lint does not throw                                 any kind of warnings for this kind of                                 composability                                 as long as you thought it kind of                                 carefully in regards to having nested                                 interactivity because you can build                                 these as separate elements very                                 carefully with your interact ability and                                 so this felt great and work great and                                 when I showed it off to some of the                                 other co-workers they actually really                                 liked how it was going so let's dive                                 into some implementation details if you                                 want the full details of this you're                                 able to pull up the gitlab repository                                 and digging for yourself all the tests                                 are passing for this repository and you                                 can see how all the tests are done and                                 how the components are done before this                                 demo code one of the things I want to                                 talk about for composable components are                                 splat rebukes splat tributes are                                 relatively new to the ember framework                                 and with the introduction of glimmer                                 components and template only ember                                 components we no longer have a wrapper                                 div assumed on our component on the                                 outside and so if we want to pass in                                 attributes like a tab index or a class                                 we can now do so by passing at                                 attributes within of our within our                                 components template and it will                                 automatically figure out all the things                                 that you passed in and render out                                 something like this at the bottom where                                 you have a tab within tabindex of zero                                 and the class that we defined a boarder                                 and a focus boarder of teal what's nice                                 about this is that you're able to split                                 out the levels of concerns the                                 extra buttes that are going to be                                 assigned within for example in this case                                 the index application kind of route the                                 index route template we're able to say                                 we want this one to have these classes                                 and we don't have to have sortable group                                 accessible component either worried                                 about the classes itself or have to                                 expose a class api of some kind or have                                 to have a wrapper div that would allow                                 you to pass these things in instead                                 we're allowed to use splat tributes to                                 intelligently pass these things down                                 wherever we wish within the component                                 now on to events and modifiers within                                 our sortable group accessible component                                 I have many many even more than shown                                 here you vac the modifiers because we're                                 listening for things like focus and blur                                 key up key down into spacebar things                                 like that one line to you can see an                                 example of a modifier this is a modifier                                 that ships with ember it's called one                                 and Owen is tied to the div itself and                                 so it knows what the event is pardon it                                 knows what the element is and it listens                                 for in this case a focus event and when                                 I this div gets a focus event it'll fire                                 off the event to this handle focus                                 action and in that action is where I                                 handle all the focusing logic similarly                                 a line down is blur and then on line                                 four I could have done the same thing I                                 could have done on key up and then                                 assigned a key up handler in my                                 component but instead I opted to write                                 my own amber modifier I wanted to do                                 that so that instead of having to have                                 the component itself listen for every                                 single possible key up event and then                                 doing some kind of switch case or a                                 series of ifs about which the event is                                 being fired for what's key like what key                                 is being entered on the keyboard and                                 then ignoring                                 I wanted to abstract that into its own                                 modifier and so that's what I did here                                 at the bottom of the screen you can see                                 there is a modifier key up file this is                                 the entire modifier it's just eight                                 lines of code the most important lines                                 of code are on line six and seven line                                 six adds an event listener on to our                                 element that listens for a key up and                                 then on seven we undo it we say remove                                 that event listener plants no longer                                 need it for this modifier the rest of                                 the logic is just listening for an event                                 and firing off a function when it gets                                 done listening for the event and also                                 narrowing down to that desired key so                                 okay let's with shift gears just a                                 little bit we're going to talk about                                 some testing details many of you have                                 probably seen amber test member test                                 helpers up at the top of your testing                                 file if you were to generate a new                                 component right now you would likely get                                 an import that will import from amber                                 test helpers a line like a render render                                 is the most common one that you see and                                 it's how you can render out your                                 rendering pass your application tests                                 things like that one of the first ones                                 that people end up finding out about                                 when they want to write more tests is                                 click and so these are asynchronous you                                 can await a render and you can all wait                                 a click event and then you can assert                                 some kind of data has been changed or                                 some kind of UI state has been changed                                 within your tests something that people                                 are not as aware of commonly is trigger                                 event and trigger key event so we'll be                                 using those now if we go back to our key                                 up example we want to write a test for                                 that we can write a test just like this                                 it's asynchronous so work with me here                                 we're going to be on line                                                going to render out eight div and that                                 div is going to have a modifier of key                                 up and it'll pass up a function to this                                 key up and we'll handle that in a moment                                 so now we have a div with our modifier                                 on it                                 with kia and on line                                                 have a no wait                                 trigger key event and it will be first                                 passed an element that we're going to                                 put the event on to and then a string of                                 what type of events which is a key up                                 event and then finally what key this                                 could be a key code like number                                          could be a string that starts with an                                 uppercase like enter we don't hit line                                                                                                        after line                                                          trigger that key event which will                                 trigger our modifier with the key up                                 event listener and in this case it's                                 going to go as line                                                   key up and you can see that on line                                   this that key up so this that key up                                 receives an event which we are going to                                 D structure we're gonna take out of the                                 event object just key on line                                         gonna make sure that key is an assert                                 equal to enter now on line                                           just go ahead and assert a step of key                                 up now if you haven't seen step before                                 it's one of my favorite bits of cue unit                                                                                                         will then and automatically to an array                                 anything you want                                 typically strings on line                                                verify those steps for run and so we can                                 verify an array of one string in this                                 case of key up was fired if for some                                 reason line                                                            up function then this test would fail as                                 it did not get all the steps that are                                 expected to get and verify steps and so                                 to cover this one more time we make a                                 div we can put a modifier on to it in a                                 test we can then fire something like a                                 trigger key event and then we can listen                                 for what that key is in this case and                                 make a step and then verify those steps                                 occurred similarly in application                                 testing we could test the entire page                                 tic for something at a higher level and                                 so in the index tests for example we                                 could assert in the Dom this is using Q                                 unit Dom this is another adilyn we can                                 use q unit Dom to say assert in the Dom                                 the first element has text of item                                      what this is really doing is we're gonna                                 find all the items like item add                                         and item at                                                            assert that it has a certain text inside                                 of it you can also do this with dot text                                 content if you wish to but at any rate                                 this is going to verify the beginning                                 state is what we expect it to be item                                   and then item                                                           reordering we want to see if we can flip                                 those and then test for that the next                                 line down we await a trigger event which                                 is a lot like what the user is going to                                 do where they're going to focus by                                 hitting tab                                                            so we're going to hit focus as an event                                 want to the entire list and then that'll                                 make the up arrow and the down arrow up                                 here and we'll await a click emulating a                                 click event on that down arrow so now                                 that's asynchronous and we've said oh                                 wait for that click to occur all the                                 Emer run loop runs through and now we                                 can do another assertion afterward so we                                 can now just take the same test that we                                 did a second ago with the same                                 assertions and we can just flip the                                 items now we expect item                                               and item                                                              this allows us to test reordering when I                                 first got to this I did not think that                                 we will be able to promise that we can                                 have automation testing for drag and                                 drop and while technically we did not in                                 this case automation test to drag and                                 drop of the mouse or the touch but we                                 were able to make sure that we can                                 guarantee that the list can be restored                                 with keyboard inputs and that was a big                                 win for us we had a lot of different                                 team wins in fact throughout this                                 project we had a very quick feedback                                 with development because once we had                                 tests written we were able to do                                 test-driven development from then on and                                 we were able to see when tests would go                                 red if we broke something and stayed                                 green while it was still good we were                                 able to work with design to continually                                 improve on this functionality in all the                                 different visuals passing in splat                                 rebukes of more classes to adjust the                                 visual style of things very quickly we                                 also had a very quick feedback loop with                                 project managers who were instantly able                                 to see that we achieved the baseline                                 functionality of mouse drag and drop and                                 touch drag-and-drop and then gave us a                                 little bit more time to work on the                                 keyboard interactivity                                 we got quick sign-off for UX which was                                 excellent were able to see how is                                 working in every step in the process                                 because we're doing composable                                 components and we had less stress on QA                                 because we were able to deliver an                                 automation tested paid the entire                                 feature was automation tested from                                 beginning to end and so instead of them                                 having to do manual testing for every                                 release from here on end we were able to                                 have that automation tested for them and                                 finally we had less scope creep because                                 instead of having to come back to this                                 either in the final days or months later                                 down the road to have to force an                                 accessibility for this feature                                 it was just already built in there                                 didn't have to worry about it                                 now something I find very interesting                                 amber sortable version                                                  most of my work was done for this                                 feature and I've implemented this into                                 the demo project where now we have                                 version                                                               have a list here of peanut butter                                 cookies and lasagna and now you can                                 ahead love that combination you can                                 click and drag just like we were able to                                 before but also without any of my                                 composable components invert sortable                                 out-of-the-box supports keyboard events                                 I can tab to the list I can hit enter I                                 can use my arrow keys to move them up                                 and down and hit enter again to finalize                                 selection it's a bit of a different UI                                 pattern but I actually really like the                                 way that it feels                                 and it's shipped by default and it's                                 part of a main ember sortable library                                 which is excellent you get these kind of                                 things for free by leveraging                                 open-source community projects on top of                                 that in order to do an upgrade from what                                 I had shown previously to this version                                 all I would have to do is delete those                                 two composable components and then                                 rewire this back up very slightly and it                                 just works I can move forward by this                                 deleting code that's something you                                 always want and so where do we go from                                 there something I did not talk about but                                 is very important it's accessible screen                                 announcements screen announcements                                 letting the user know that something has                                 changed such as the order of items in a                                 list                                 another thing is ember sortable version                                                                                                          as the main way that you write ember                                 sortable components so instead of having                                 composable components you could actually                                 write something like an ordered list now                                 it have a modifier of a sortable group                                 and Li like a list item element that has                                 a modifier of a sortable item I find it                                 to be very exciting there's also ember                                 accessibility testing and ember CLI                                 template lint then I feel go hand in                                 hand to help you avoid some                                 accessibility plot holes plot holes                                 potholes that you could run into were                                 you like oh no I accidentally forgot to                                 put a roll on my button for example this                                 is the very real case that happened to                                 us recently and so what did we discuss                                 we were talking about adding                                 functionality with composable components                                 and all the different advantages that                                 came with composable components such as                                 being able to upgrade more easily over                                 time having faster feedback loops and                                 being able to not have to modify core                                 functionality from an                                 our add-on for example we talked about                                 equitable and discoverable user                                 experience design while looking at some                                 of the w                                                              reasons why you would want to do these                                 things and then the final result and how                                 good it feels then we also talked about                                 automation testing and automation                                 testing accessibility but is something                                 that is not commonly done but I would                                 love to see more of it once again I work                                 at L of U as a software engineer we are                                 hiring and we are working right now with                                 K through                                                            only help them through the corona virus                                 epidemic that is happening right now but                                 also throughout the year as they are                                 budgeting in order to make a more                                 equitable education system for everybody                                 we build member software so we are                                 Emperor through and through and we                                 develop software with shape up by base                                 camp so if you're looking for something                                 that's an alternative to agile take a                                 look at all of you lastly I have a                                 challenge for you hire somebody                                 different than you that might sound                                 completely off topic but it's really not                                 if you hire somebody that's different                                 than you in regards to I don't care if                                 it's race religion orientation gender                                 maybe they like Legos and you like Mega                                 Bloks it doesn't matter the more                                 different people we have on your team                                 the more likely you're going to have                                 people asking important questions such                                 as is this accessible and that is what                                 inspired us to do this on our team so I                                 encourage you try to hire somebody is                                 different than you if you have the                                 opportunity you won't regret it and                                 lastly I ask you to make accessibility a                                 priority at your next design meeting
YouTube URL: https://www.youtube.com/watch?v=ESemqChsBEE


