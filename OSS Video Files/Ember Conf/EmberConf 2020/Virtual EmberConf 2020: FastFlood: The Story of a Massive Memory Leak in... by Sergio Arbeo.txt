Title: Virtual EmberConf 2020: FastFlood: The Story of a Massive Memory Leak in... by Sergio Arbeo
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	FastFlood: The Story of a Massive Memory Leak in FastBoot Land by Sergio Arbeo

What would you do if you found a memory leak so big, that most of the data of your requests are leaking? What if everyone on your team was distributed? What if no one on the team shared a timezone?

This talk presents the typical techniques to find a memory leak and a few unusual ones when dealing with a significant leak.

We will also discuss how to organize a distributed team to find the leak faster.
Captions: 
	                              [Music]                               it was a really exciting day but first                               let me tell you that the story all names                               characters and incidents portrayed in                               these productions are fictitious                               no dedication with the actual persons                               living or disease places building and                               products is intended or should be                               inferred just as a curiosity this was                                started in the film industry after the                                MGM production pristine and the Empress                                in that production it was still pristine                                great Natasha Natasha was the character                                portraying Prince Irina and Princess                                Irina should MDM and Siwon what we would                                be what it would be today over two                                million dollars in court and                                           in out-of-court settlement if you are                                not a native English speaker like I am I                                mean I'm not a native English speaker                                this is legalese for do not sue me                                please as I was saying it was a really                                exciting day after months and months of                                work we were releasing a new feature the                                team was really really excited and                                thriving because of this but suddenly                                our project manager came with bad news                                we were having a leak in the server and                                then I talking about a small leak I'm                                talking like this kind of leak welcome                                to fast flood a message a story of a                                massive memo leaked in fast food lab my                                name is circular Bell I'm also known as                                said Ave in Twitter and github I work                                for Tokyo docker is digital product                                consultancy from idea to the final                                product                                we have QA designers project managers                                engineers if you're looking for some                                people to work with you just drop us a                                line and we see we can we do if any of                                the presents are not familiar with what                                fastboot is fast food is the server                                render ending of member this means that                                we can render in our server the pages so                                we can serve and already render pages                                I let ember take it from there if you're                                not familiar with what a memory leak is                                is basically that it's a piece of data                                that should have been garbage collected                                but it's not for some reason let me let                                me do a kind of a clear example with                                this let's say we have variable one two                                three four five and six in our memory                                and let's say we drop one two and three                                if after this we still have one two                                three four five and six in memory we say                                we have a leak it could be good that                                whenever we drop one two and three we                                find ourselves with one two three four                                five and six in our memory this means                                it's reproducible that's great                                because it will be easier to the book it                                but it's still bad that we have one two                                three drop I still find ourselves one                                two three four five and six and not just                                because we cannot get rid of one two and                                three it is because we don't know what                                else we can have in our work memory like                                oops                                annex ability sorry let's say I hope                                this makes things much clearer but                                why does memory leak happen the main                                reason is that something else is keeping                                a reference this is almost a hundred                                percent of places there is a tiny tiny                                chance really tiny that it's a garbage                                collector book it diesel it happens in                                frameworks themselves it's really rare                                to see one of these in our applications                                as we are talking about references we                                can easily create an object memory graph                                this is the object memory graph tool in                                Firefox we are not going to see much of                                Firefox here because as we are in                                fastboot and password is node it's much                                easier to work with chrome developer                                tools in here I don't know for you but                                this tool reminds me a lot the file                                directory tool in Jurassic Park and a                                colleague told me that that was an                                actual thing in Solaris but let's see a                                tool that's much more useful for us and                                that's he profiled in here we have two                                panels in the panel at valve we have all                                the objects in memory and then we have                                information about them the first piece                                of information we have is what people                                call the distance that's the distance                                 from the GC root it's a little hard to                                 explain it's much easier to see written                                 documentation about this but the general                                 idea behind this is that the biggest                                 memory leak the technologies number must                                 be it's not real correlation but it's                                 highly likely and then we have the                                 shallow side that's the size of the                                 object itself finally we had the                                 retained selves the retain size is the                                 size with three so we freed that object                                 let's see an example or for example the                                 object in this case we have four hundred                                 thousand like a three percent of memory                                 in solid size but so we Frida's object                                 we                                 between other values as well and those                                 with free almost a                                                   below this first panel we have the                                 retainers panel we can send objects from                                 this panel to the panel above and vice                                 versa this is really useful because we                                 can look for an object in the panel                                 above and send it to the retainer panel                                 and we can see which object are                                 retaining that one really really useful                                 as I said this is the heat profile we                                 can do really good really cool things                                 with this basically we captured the                                 memory State at one point in time and                                 the tool let us compare several                                 different profiles for example if you                                 work more leaned mostly in the browser                                 we can do things like this what we call                                 the tree snapshot technique for doing                                 this technique the first step is to warm                                 up our our application let's say just                                 start it or started on logging in would                                 be warming up this will create a few                                 objects in our memory after this we                                 create the first snapshot after the                                 first nap shot we do the action we                                 suspect this leak in memory and we do a                                 second snapshot as we can see after this                                 action a few object has been marked to                                 be recollected for example the one in                                 the bottom left corner is mark for                                 recollection then we repeat the action                                 and we do a third snapshot okay now we                                 have three snapshots that you might have                                 suspected we would do so because it's                                 called a free snapshot technique but                                 what can we do with this thing we can do                                 the following we want the object that                                 are in the third snapshot                                 that removes all the objects marked for                                 a collection or regulated already then                                 we want the objects created after the                                 first nap shot we are not interested in                                 the objects created during the warmup                                 maybe if they and finally we want the                                 objects created before the second                                 snapshot we are not interested in the                                 oddly created after doing the action for                                 the first time while this does not                                 pinpoint us to an object that is leaking                                 this does just reduce a lot the memory                                 we need to inspect but this is not                                 really useful for us because in fastboot                                 the memory are are more atomic we don't                                 have leaking between requests for that                                 it's much more useful the timeline tool                                 the timeline tool looks exactly like the                                 heap profiler we saw before but with the                                 timeline logged off let's inspect that                                 timeline in that timeline we have a blue                                 bar that represents the memory we are                                 consuming if some of the part of that                                 memory is being reflected by the garbage                                 collector that part is display as a gray                                 bar more about the memory in fastboot is                                 that easily in fact with the warm-up                                 action in involves higher and higher                                 memory being consumed but subsequent                                 request does not consume that much                                 usually after a few requests an                                 application because that was the                                 application if you remember when we                                 introduced fast food there were like                                 application initializers and instance                                 initializers it's mostly designed here                                 like we create the application and we                                 create the instances a new application                                 is created and the other one is drop in                                 this scenario all the requests are                                 leaking on                                                                                                       would be something like this we see all                                 the requests gray okay                                 you'd be wondering now we have the tools                                 what okay I'll tell you the process we                                 followed and we will find during during                                 that story the step zero is we need to                                 reproduce that locally some of you might                                 think might be thinking about using get                                 exact that's a really useful tool if you                                 can use it in our case since we were                                 using feature flags extensively we've                                 been working on that for months so it                                 was not useful for us in any case this                                 is useful for anybody                                 production is build why because we want                                 to have the build as close as possible                                 as as production that means that we                                 might need to remove some loggers or                                 some services but if we were using like                                 if we were building the first built                                 application and moving into another                                 project we would be doing that in here                                 we want to be as close as possible and                                 one big change that really needs to be                                 done is notification and that's just                                 because in the panel we saw before in                                 the in the heap snapshot profile they up                                 the name of the objects could be there                                 but what if your object has no name like                                 a simple polio you were passing well we                                 have a snippet for that later the next                                 step would be look for the leak in our                                 code or look for changes between                                 versions we can approach this like okay                                 we have just you see we see the project                                 in one state then suspect the project as                                 you see now or look for the changes that                                 happened in those month for finding the                                 leak we followed this process the                                 first one is running the server don't                                 forget to use inspect on its back BRK so                                 you can use the chrome developer tools                                 which are not the instance then we do                                 one request this this idea was taking                                 directly from the free snapshot                                 technique and also we do this first                                 request manually this is important                                 because sometimes you don't solve the                                 the memory leak but break the build and                                 I would let you see if you are still                                 returning our website then you start the                                 timeline and finally make a few requests                                 so you can inspect the code for making                                 those few requests we usually use a                                 party bag mark                                 they'll be tool with concurrency one so                                 you can see more clearly each of those                                 requests this is the snippet so you can                                 see in one expecting the memory the name                                 of some poachers you can use these                                 niches this lipid that does would let                                 you see that pajamas lick detect in the                                 inspector and look for it                                 or these are the one they have the same                                 effect if you need several names just                                 change the leak detect for the names you                                 want                                 foobar makélélé whatever then we have                                 step two we need to find the Dominator                                 Dominator is a term in the industry I                                 haven't found all the one if you know of                                 a better one let me know and I'll change                                 the presentation but the Dominator is                                 basically the retainer we need to remove                                 so the link is gone                                 or we can also find the dependency                                 because that the leak can be can be in                                 one of our dependencies updated to                                 display time step three                                 removal the Dominator or change the                                 dependency version and win thank you so                                 much                                 wait                                 this was not that simple in our case we                                 were dealing with two big problems first                                 we were a fully remote team there were                                 four people on our team and I think                                 there were even four time zones and we                                 were leaking the container if you are                                 into ember container is basically the                                 registry embarrassing for everything                                 everything is the in there so that's the                                 reason we were leaking almost                                            memory so what do we do well                                 after confirming we were leak in the                                 container that was on the very first day                                 we have two approaches the first one is                                 look for all not leaking                                 owner is basically the public API of the                                 container so we might be looking at                                 maybe leak in the container something                                 some work might be our code or some of                                 our dependencies and also day to late                                 December we were not in the late                                 December because of reasons I cannot                                 disclose but that's the other approach                                 maybe hopefully sorry for them recording                                 but hopefully the leak poster and it was                                 not our fault spoiler alert we don't                                 know then we assign tasks based on                                 people's knowledge for example there                                 were one person on our team that had                                 updated a similar application so we                                 asked him to to start working on that                                 update our Umbridge is the other person                                 was the main person behind the changes                                 behind this new feature so we charge him                                 with going through the changes and see                                 what could be wrong and two of us had                                 more experience finding leaks and                                 inspecting memory                                 so we charged those people on doing a                                 general investigation on approaching                                 these as if you were new to the project                                 done this I cannot suggest not that                                 communication is key                                 communicate early and communicate often                                 this is as if in a remote environment                                 communication is really really important                                 in times of crisis it is more early and                                 often less let us prevent duplicate over                                                                                                      colleagues as rubber ducks even if you                                 think you might be used wasting your                                 time the times of the time of your                                 colleague this is not the case because                                 this is a time consuming task that                                 consumes also a lot of morale you really                                 need that human contact as well take                                 small victories before winning the war                                 is one of the other key concept I want                                 you to take from this talk first finding                                 the leak won't be done by one individual                                 as we were splitting the task the                                 responsibility shall not be split why                                 because the only reason one person in                                 that team is finding the leak is because                                 the rest of the team is trying other                                 approaches this is really important this                                 is not a competition this is a team                                 effort                                 but while taking small victories before                                 finding the leak first add more                                 important morale while going through                                 this process even if it's just a few                                 days they will be a really intensive                                 days that will take on your morale but                                 why this small victories affect them and                                 lift your morale well it decreases the                                 pressure if you consume less memory you                                 need to restart the server less and you                                 get less pressure from from the external                                 services also it improves your codebase                                 less memory consumption snap your apps                                 and less memory consumption you need to                                 expect less memory to find a leak and                                 that's nice that affects morale as well                                 if you need to spec play inspect less                                 memory it's easier to find it at least                                 in theory                                 but please don't take we pick Therese up                                 to any price some some improvements                                 improvements are not worth it think that                                 you might make a change that will need                                 to be taken into account for the                                 foreseeable future every time you do                                 something those changes need to be easy                                 to drop in case you want to drop them                                 and doesn't need to be hard to maintain                                 for example one of the small victory we                                 took is that we were using presenters in                                 in our team plates and we stopped                                 cutting those presenters in fast-food                                 land there was four five lines of code                                 for that and they were easy to remove in                                 case we wanted to and that removed the                                 memory consumption by                                                 but four days later we were still in the                                 same point we were consuming much less                                 memory almost half of it that's nice of                                 course but we were still leaking like                                                                                                           can we do now this is hard to describe                                 because we were out of options                                 okay then we thought this is basically                                 the request in an Berlin request if                                 you're not familiar with this in fact                                 tool and Jesus kept our request it goes                                 through several middle words because                                 childhood is basically an express middle                                 war then hits fast food fast food goes                                 to the router the router creates the                                 routes the routes lost the data from                                 data store then the eating solace is the                                 controller and the controller Wenders                                 the template that uses several                                 components to be render this is defied                                 version and brilliant accurate but I                                 think it's useful for for our purpose so                                 the first thing we did indeed and we did                                 this early like the first day or the                                 second one is to check if it's something                                 in our other middle words because we                                 were it's in several of them                                 what we did is substitute fast-food with                                 a static response and the leak was long                                 so that means that it's actually in our                                 air application after that what we                                 thought was the weakest point we can                                 attack and easily change for a static                                 response that's simple                                 the template what we would do is we                                 would remove that in plate and just use                                 a static HTML receipt from the server we                                 did this the league was still there                                 that means the league was not in our                                 templates or any of the components below                                 it next place we would replace the model                                 in the route and we would return a plain                                 old JavaScript object we did that and                                 bingo Tammy Malik was gone so we mean                                 the problem was in the store we had                                 really really kill some store adapter                                 oxidizers so that was bad news the good                                 news is that we were using those                                 customized adapters and sterilizers for                                 really long so we were fairly confident                                 on on not being there our our memory                                 leak what we did is at this point in                                 time we spent a couple of days replacing                                 parts of my data and our adapters for                                 static responses this is not as simple                                 as it sounds because depending on the                                 point we might need to tweak different                                 things but after a couple of days we                                 found the problem was in our adapter do                                 you want to see the problem Dell League                                 was here we have ended up in our adapter                                 we have completed property for headers                                 this is using the they all syntax                                 because this happened almost a year ago                                 and                                 these sellers will return in an                                 authorization with token injected from                                 one album do you want to see the fix                                 because this is going to be really nice                                 the fix was this one headers was just                                 get er but why was that happening we                                 suspect that something was happening in                                 the request because they all the                                 properties in the requests are being                                 like lacy like completed at the last                                 moment and I we think that's a                                 combination of that and how the body in                                 the burger was injected but we don't                                 really know                                 so my last by Ford blasted pies for                                 these would be let go if it's hard to                                 reproduce you won't be able to send a                                 reproduction to the amber team so they                                 can find out and maybe it's over your                                 level of knowledge maybe it's over any                                 of your team's level of knowledge and                                 you cannot really find it you can spend                                 some time on it but don't sweat over it                                 thank you all for attending my talk on                                 this remote version of amber comp it's                                 in a pleasure talking to you                                 at least literally if you have any                                 question I don't know if there will be                                 any system in place for doing that life                                 but you can reach me on twitter at                                 serrata thank you
YouTube URL: https://www.youtube.com/watch?v=NradLNmO9ec


