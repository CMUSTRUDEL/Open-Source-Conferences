Title: Virtual EmberConf 2020: AST: the Secret Weapon to Transform a Codebase by Sophia Wang
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	AST: the Secret Weapon to Transform a Codebase by Sophia Wang

Ever wonder what is metaprogramming? Ever wonder how a machine translates ember code into the websites that you interact with? Want to update your codebase to a newer syntax without going through editing every line? Curious about what linters, codemod, compilers, etc. have in common?

Abstract Syntax Tree (AST)! We'll aim to demystify AST in this talk. You'll realize itâ€™s really fun and cool, and you can leverage this concept to create your own tools!
Captions: 
	                              [Music]                               okay hi everyone my name is Sofia hope                               you had a good lunch and you have a good                               conference so far today I'm going to                               talk about abstract syntax tree so to                               start off I'll introduce a little bit                               about myself                               right now I worked for LinkedIn learning                               just in case you don't know                                LinkedIn learning is a platform where we                                offer video courses in fields such as                                technology creative and business taught                                by industry experts I started as selling                                calm and then later it was acquired by                                LinkedIn I'd LinkedIn learning I get my                                first exposure in a member before ember                                I was working at this startup called                                spoke where spoke was trying to help                                employee to work more efficient by using                                machine learning to manage internal                                requests there I was working full stack                                I used tools such as nodejs and angular                                so to start off I want to share kind of                                two problems that I encountered this                                past year that really leads me very                                interested in the this topic so what's                                the problem I encountered this past year                                was a problem to book and its syntax                                awesome at scale for example I was                                trying to wrap around all of our                                requests wrapped around in this like                                global air handler to why I first                                started working on this project my first                                thought is I'll just do it manually but                                then when I started looking at it there                                were thousands or maybe like how many                                hundreds of requests across our code                                base it's gonna be a lot of code that I                                need to like edit and it's gonna take                                days and it's tedious so I thought about                                a second solution which is to use radix                                and I try                                and I wrote the most complicated reg X                                in my life and they solved about half                                the problem for other half reg X can                                just simply cannot do it and wreck X                                especially can't handle a situation                                where the lines the kind of a request                                called that out lasted a couple of lines                                reg X does really well when so single                                line but when it's like a couple of                                lines it doesn't do as a fish enough job                                so that's when I started looking into                                code mod and it made up my life is so                                much better and I was able to transform                                a lot of the code in recode base using                                code mod in just couple of days of work                                so that's the first problem that I                                encounter the second problem I                                encountered started from observations I                                realized we have a lot of code                                commissions in your routine and you                                would see that code reviewers or one                                review code I like we're always trying                                to enforce those conventions sometimes                                I'd feel bad of pointing them out and as                                people who submit code I also feel bad                                of making those mistakes but sometimes                                they're just hard to catch especially                                why I'm trying in a rush it's hard so I                                was wondering if there's a way to                                automate this process and that's why I                                looked into creating a custom linking                                rule and then you also make my I think                                my team's life so much better where we                                can identify problems before it's been                                pointing out to other people and I                                shortened our kind of problem-solving                                cycle it was great                                so from this to problems and those two                                tools I used I realize there both of                                them somehow have this very similar                                underlying way to solve a problem that                                is involved called manipulation and                                transformation and that's what I want to                                talk                                talk to you about today it's to how to                                do it how to just use that tool and make                                your life easier as a developer so to                                start with talking about kind of that                                underlying concept behind them I'm going                                to start with a simple analogy if you                                ever trying to learn different language                                you would always start with probably why                                don't you think first thing you learn                                about vocabulary second thing you will                                learn about grammar you'll learn things                                like Apple is a noun is a subject you                                have sentence you need a subject verb                                 and noun if I say a sentence like AI                                 Apple some of you just don't understand                                 like what does that mean understanding                                 grammar behind the language enable                                 people to communicate more efficiently                                 and enable people to understand each                                 other better and how does this relate it                                 to our daily life as a developer similar                                 to speaking of language writing code is                                 very similar where if you understand if                                 we can understand how the code are                                 working behind the scene and be really                                 familiar with the grammar behind it we                                 are able to do so much more things with                                 the code that we write every day and                                 that's become a very efficient developer                                 so that's what I'm going to talk about                                 today to help you understand better of                                 the underlying lines syntax and the                                 underlying structure behind the code                                 that you write every day so to start off                                 I'll go a little bit more in depth about                                 the tool the productivity tools that                                 were my encounter any ember and from                                 there I'll point out to you this                                 underlying concept abstract syntax tree                                 behind them and then I'll talk about how                                 you can apply                                 at track syntax tree and use it in your                                 future work so to start off I'll go a                                 little bit more in depth into some of                                 the tools that I may have mentioned                                 before the first is linter what linter                                 does is it catches area and point out                                 errors as you're developing it can often                                 see as a code editor plugin or like as a                                 pre-commit hook I'll start with an                                 example of disallowing unreachable code                                 as part of a yes linter rule so for this                                 rule if you have a line that's written                                 after the return statement like                                 assigning of value the code editor will                                 barf at you for making this mistake this                                 seems like a simple mistake a simple                                 like problem to solve like you just                                 check what comes after return and that's                                 it but it's actually a lot more complex                                 because if both the same line return                                 value equals to                                                        determine that it's after return but not                                 before return how is that position                                 determined and how does linter know the                                 particular syntax like the context                                 around that particular line that's some                                 questions that will be answered later                                 but for the next thing I'm going to look                                 at another tool code mot that I                                 mentioned a little bit before and I                                 wanted to go a little bit more in depth                                 into it                                 so code may enable us to poke edit                                 syntax within your code base a lot of us                                 may have went through the transition of                                 upgrading ember                                                          the ember octane to do that you need to                                 convert a lot of                                 the curly braces syntax in your template                                 into angle brackets and that's what code                                 ma can do it automatically not only                                 convert the curly brackets into angle                                 bracket and it has add symbols in front                                 of the arguments and skips attributes                                 such as class code mod here is really                                 impressive because it not only added                                 things in bulk and it's able to                                 distinguish some of like a very similar                                 syntax for example in the original code                                 the curly braces version in three point                                 four you would have some text such as                                 curly braces country town name and code                                 mod is able to distinguish this curly                                 braces with the curly braces that's                                 wrapped around super - selects curly                                 braces and they decided to convert the                                 curly braces right next to super dashes                                 alike but then skip the curly braces                                 around the country dot name that's a                                 hard problem to solve in order to solve                                 it code mod also needs to learn to know                                 the context surrounding those two lines                                 and similar to winter those are very                                 similar problems that it needs to solve                                 and I'm going to talk in a little bit                                 later of how this problem is solved for                                 the next thing I'm going to talk about                                 the third tool transpiler the reason why                                 I want to look at it is even though this                                 tool you may not be actively using it                                 but it's probably somewhere in your                                 dependency you probably have this as a                                 package in your in your project                                 what transpiler do is for let's say for                                 example Babel what it does is a comfort                                 es                                                                version that can run any browser                                 such as Chrome or ie it saves us                                 developers so much more time from                                 writing code that's particular to our                                 browser so I want to look at a specific                                 example that babo does in this                                 particular example                                 bab-oh is kind of a converting the fat                                 arrow syntax into a regular function                                 syntax and in fact not only from the fat                                 arrow to kind of backward compatible                                 version transpiler also able to do the                                 other way around it can convert older                                 version of syntax to the new version of                                 syntax this is definitely sure a very                                 beneficial tool to be included in our                                 repository by similar to code mod and                                 linter transpiler also needs to solve a                                 lot of problems in order to get to where                                 it is one important problem is also very                                 similar is how does they know where is                                 the ending of a syntax that is trying to                                 convert how does they know that when                                 it's converting a fat arrow to a regular                                 function that n plus                                                   plus                                                                    around the function around instead of                                 this whole entire item alright so I've                                 been throwing a lot of questions at you                                 and maybe you've been curious what's the                                 answer so for all of those problems have                                 all of those tools have very similar                                 problems to solve which is to identify a                                 contact surrounding a particular line of                                 syntax how do they do it the answer is                                 abstract syntax tree                                 abstract syntax tree is basically a tree                                 structure the highlights most important                                 syntax of a language to understand                                 abstract syntax tree well we had to                                 start with the most basic concept of                                 tree and then see how the concepts                                 evolved from a tree to abstract syntax                                 tree so what is a tree data structure                                 tree is basically our bunch of nodes                                 that are connected by edges if you are                                 not familiar with this concept I linked                                 article at the bottom of the slide and                                 feel free to check it out after the                                 presentation so basically tree is very                                 useful in computer science and it's                                 always adapt to it's widely used and                                 it's may adapt to very different forms                                 for particular problems we're trying to                                 solve so for example we have heap trees                                 we use heap trees to store memories in                                 order to solve the problem of encoding                                 decoding people come up with binary                                 trees because that's the kind of a data                                 structure that solve a problem                                 particularly well what if we want to                                 solve the problem for representing a                                 language that's what it comes parse tree                                 so you can think of parse tree as                                 basically making a grammatical structure                                 of a sentence on to a tree for example                                 when we have formula                                                     we map it on to a tree it would look                                 something like this so it's a literal                                 translation of this grammatical                                 structure you can see in this tree                                 there's a lot of math terminologies                                 about what each part of this this line                                 does                                 for the example purposes I'm not going                                 to go in deep of what each does math                                 expression means but here I do want to                                 point out the specific term here looks                                 my looks really scary but it won't                                 change depending on the context if we if                                 it's a natural language say I ate an                                 apple then the different note here will                                 probably be replaced by nun or verb and                                 then say if it's a template handlebar                                 template each of the node will be                                 replaced by things like moustache                                 statement and different kind of                                 statement or hash values so basically                                 the different kind of a node is                                 determined by the grammatical structure                                 of the language so when we look at the                                 parse tree                                 it actually looks kind of complicated                                 and it's not as efficient as it can be                                 if one is looking at this tree there are                                 a lot of notes on the tree that actually                                 contains repetitive information for                                 example if we look at three there are                                 three parents here and as a tree is not                                 as efficient as it can be and that leads                                 us to abstract syntax tree abstract                                 syntax tree basically basically have the                                 best part of parse tree which is the                                 kind of structure grammatical structure                                 forest syntax but it highlights the most                                 important information for example it                                 does so by kind of condensed to change                                 notes together and then a take away                                 extraneous information mission in this                                 case brackets and then that's where we                                 get to this new new tree which is the                                 abstract syntax tree the way I think                                 about it is the abstract syntax tree is                                 the tree I would                                 think about that would be how actually                                 think about in my head                                 and then I would think about the tree on                                 the left as a way to kind of reproduce                                 the original format of this tree as you                                 can see if I combine the information                                 from the middle tree here with the tree                                 on the Left I can get to the original                                 expression of three times four plus two                                 so as you can see that this tree                                 hierarchy really provide a clear way                                 like a very hierarchical way to get the                                 surrounding syntax because see five look                                 at a four here I can clearly see that                                 the plus here is taking precedent over                                 the expression four plus two and then                                 the multiplication is taking a precedent                                 over the the plus so it's kind of at a                                 higher level so kind of abstract syntax                                 tree this is how if we have a code that                                 people are able to know the context                                 around it is by this kind of a                                 hierarchical structure                                 that provides a lot more information                                 about the context so yeah we just talked                                 about the concept of syntax tree and                                 then how it provides this context                                 through this hierarchical structure how                                 does it relate it to the code that we                                 write every day this is what I'm going                                 to talk about next is a step to step                                 from the code that we write every day to                                 abstract syntax tree and back to the                                 translate back to the code so typically                                 to go through this step there are three                                 steps                                 this three steps are pretty common for                                 tools such as compiler translator of not                                 translator interpreter so the first                                 stage of the code manipulation is this                                 parsing process which I'm gonna get into                                 it soon so you can think of a parsing as                                 a process converting a sentence to                                 abstract syntax tree in order to make                                 this happen                                 we first need to know what are the lines                                 were reading so for example to cover                                 from the three times four plus plus two                                 you have to finish reading it right as a                                 machine so that's the skinning step                                 after we finished reading it you have to                                 find a way to break this statement down                                 into a certain way so that's what the                                 tokenization does tokenization basically                                 break down this particular expression                                 into smaller chunks such as three four                                 and two and this whole process of                                 skinning and tokenization are called                                 lexical analysis so let's look at a real                                 world code example let's say I have this                                 block of code after I scan it this is                                 the kind of token I would get it's like                                 a div class and become h                                                 line so this is some of the example                                 tokens that I would get from this block                                 of code after I get this block of code                                 the next thing to build up the tree                                 structure is we want to put them                                 together into a tree and then this                                 process is called some technican Alyce's                                 so ER to help with this process of                                 building a tree we used to called ast                                 Explorer                                 or I use this too pretty often during my                                 development this is a really simple tool                                 actually it's a website developed by                                 Alex clean and I have linked his link to                                 this tool and his name at the bottom of                                 the slide so to use this tool you just                                 simply go into this website the                                 interface will look something like this                                 at the top left corner you would have                                 the code that you want to transform and                                 at the top right it will output you this                                 abstract syntax tree with the token                                 that's already parsed so here I want to                                 use a gleam parser to do the job of                                 actually building the abstract syntax                                 tree this will be the output of this                                 abstract syntax tree as you can see each                                 one is this element node and within this                                 element node there is mustache statement                                 that is this title block and then has                                 the value okay original the star title                                 so this will be the actual abstract                                 syntax tree coming kind of the output of                                 the parser so the parsing steps are you                                 lay down by existing packages if you                                 were to write a compiler or like a new                                 tool you usually don't need to kind of                                 write your own parser it usually there's                                 already parser coming from each language                                 for example for JavaScript they're                                 already parsers exist like Babylon and                                 for handlebars                                 there are parsers such as glimmered                                 parser                                 there's also browsers such as handlebar                                 parser and all the different parsers                                 works a little bit different and                                 therefore the parsing result is also a                                 little bit different                                 the second stage of the code                                 manipulation is the transformation step                                 if you ever want to write your own kind                                 of code mod or if you ever want to write                                 your own winter this will be the bulk of                                 the work                                 since the parsing step is already done                                 for you what the transformation step                                 does is help you actually manipulating                                 the code for example looking at this                                 particular block say I want to add a                                 helper function called beautify to this                                 in front of this title this is the kind                                 of code I would write to actually                                 transform it as you can see there the                                 kind of to the transformation usually                                 have this visitor pattern for this                                 particular code block if you're not                                 familiar with the visitor hook pattern                                 I've linked a link at the bottom of this                                 slide if you want to look more into it                                 so basically within each hook I write an                                 expression that matches the kind of                                 statement I want to modify in in this                                 particular block I want to modify it's                                 this dot title it's with the mustache                                 statement so that's the reason why I                                 have this modification I was lucky                                 inside the mustache statement method and                                 then here I'm just time checking if it's                                 a path expression then I would add                                 beautify in front of the value just an                                 FYI this code may not actually work but                                 this is example of the kind of                                 manipulation I would actually do to                                 manipulate the code at a scale an                                 interesting thing about this is if I                                 were to write a linking linter rule I                                 would do exactly the same thing but                                 except instead of actually manipulating                                 or valley                                 which is what kolmad does for linking I                                 would do a type checking for example if                                 I want to create a linter rule that's                                 trying to check its each mustache                                 statement okay okay                                 like those values that's kind of wrapped                                 around a bracket if they have this dot i                                 would i would do in here and check                                 note that path the original have                                 contains this like this style value so                                 the last step of the code manipulation                                 process is called generation not all the                                 tools that we created or like you're                                 going to create meet this step this step                                 is helpful for tools such as compiler                                 transpiler code mod but maybe not as                                 much for linking but what this called                                 cogeneration step does is every prints                                 the trees that we have just manipulated                                 in the case of the beautified example                                 because in the last example what we did                                 is we change the value within a                                 particular statement and what the                                 cogeneration does is it detect the                                 change and then it will print out the                                 things that we have changed and then                                 this would be the ideal output from the                                 code snippet before so just now I went                                 over a concept such as abstract syntax                                 tree what it is and the process to how                                 it's applied in a lot of different tools                                 I hope you have a base understanding of                                 this concepts and the tools around it                                 there are a lot more cool applications                                 can be developed using abstract syntax                                 tree that hasn't been developed yet and                                 I hope with more understanding of this                                 concepts you are able to empowered                                 to develop your own tools and I'm really                                 looking forward to see what you can do                                 with this information at the end this is                                 a list of resources that I have that I                                 found being useful for me while I'm                                 putting together this presentation and                                 lastly I really want to thank my team                                 for their feedback and support and for                                 the conference organizer for really                                 sticking through everything and make                                 this happen                                 great job this is my contact information                                 just in case if you need to contact me                                 thank you
YouTube URL: https://www.youtube.com/watch?v=lyFMCqzkn3w


