Title: Virtual EmberConf 2020:  Democratizing Frameworks Through Developer Experience by Sarah Yu
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	Democratizing Frameworks Through Developer Experience by Sarah Yu

Improving the developer experience (DX) of frameworks is often something that is pushed aside for new features. The cost of not understanding how things work results in the misuse of frameworks, bugs and, most importantly, frustrated engineers.

This talk will explore the concept of DX through the lens of a former journalist. We will go over why having the lowest barrier to entry is important by democratizing development and providing access to information. We will also talk about the consequences of having subpar DX which creates an imbalance of power in the open source/developer ecosystem.
Captions: 
	                              [Music]                               so today I'm going to talk about how                               improving developer experience is vital                               to making frameworks more accessible and                               also contributes to a healthy                               open-source ecosystem good developer                               experience helps brings engineers                               together from all levels toward the                               common goal of learning and my hope is                                by the end of this talk you'll be                                inspired to work on developer experience                                features or at least think about and                                appreciate the ones that you consume so                                I don't have a traditional CS background                                my training is actually in journalism                                and that's really shaped how I tackle                                and solve problems in the software                                engineering space I actually started my                                career out in Alaska at a public radio                                station where I was a journalist and                                also a web administrator so I was                                writing stories about shucking oysters                                and gardening while also making sure                                that the website didn't go down and                                that's how I learned how to code and                                because of my past one helpful system I                                use is the classic who what when where                                and why thought process which I'm going                                to use in this talk to describe                                developer experience so Who am I why am                                i talking to you about this I'm a UI                                engineer on the economic graph team one                                thing that my team does is release a                                quarterly workforce report that shows                                trends in the US labor market and this                                research is used by policymakers by                                academics by journalists so I feel like                                I've really kept a tie back to my                                original training by working on this                                team and like I said previously I                                started out as a journalist I really                                didn't have that much experience                                starting off on the job at LinkedIn                                three years ago I really ramped up on                                the job and when I was starting out                                amber seemed really new and exciting but                                also scary and not a lot has changed                                since then to be honest so because of my                                past I'm really passionate about working                                with the reach apprenticeship program at                                LinkedIn and this program helps                                engineers from non-traditional                                backgrounds start full-time software                                engineering                                rolls and I really have to tap into the                                feelings that I had starting out all of                                my fears everything that I struggled                                with in order to empathize and mentor                                the apprentices and also now I have a                                lot of experience seeing people from                                very different backgrounds go into the                                industry and how they learn and how they                                process concepts and this has really                                inspired me to work on developer                                experience so my main focus is on ember                                data and the related add-ons                                particularly m                                                         to DS model and when I started learning                                ember that was the area that I found to                                be the most intimidating but also                                incredibly interesting I distinctly                                remember when I had to hook up my first                                API endpoint at LinkedIn I was actually                                pair programming with someone on my team                                because I was really stuck and honestly                                I was actually on the verge of tears                                because I was really feeling like I                                didn't understand how anything worked I                                was really struggling I kind of had this                                feeling in the back of my mind that                                LinkedIn had made a mistake by hiring me                                it was one of those really terrifying                                moments early on in my career but I was                                able to push through it I got a lot of                                help from really supportive people and I                                felt like this incredible joy when I                                actually got everything to work and I                                realized that I was actually learning                                one of the most powerful aspects of the                                framework and that was a incredibly                                exciting to me and so that experience                                really motivated me to learn ember data                                deeper because I wanted to make it                                easier for me to understand what was                                going on and also for other people to                                understand what was going on and one of                                the more recent features I was                                responsible for was for for adding                                support for m                                                   inspector this was actually just                                 basically solving a pain point that I                                 personally had so what is developer                                 experience developer experience is how                                 engineers interact with your framework                                 it's really at the boundary between                                 people and code                                 this can include documentation                                 which is the entry point for most                                 developers and probably the first                                 impression that they'll make of your                                 project if I go to a repo and it has a                                 missing outdated or blank readme I                                 really hesitate to use the project this                                 also includes debugging tools which                                 engineers really appreciate and they                                 definitely remember if they're                                 frustrating this can also include                                 framework ergonomics and developers may                                 not be consciously aware of good                                 ergonomics but they definitely know if a                                 framework has clunky or difficult syntax                                 so unfortunately developer experience is                                 often not prioritized and I believe one                                 of the reasons why is because it                                 involves people and people metrics are                                 notoriously hard to measure it's a lot                                 easier to say that you reduce the build                                 size by X amount or sped up the website                                 by X milliseconds it's a lot harder to                                 say that you made developers work X                                 times faster with your feature and just                                 to be clear though developer experience                                 is important it should not come at the                                 expense of user experience ideally it                                 should be a symbiotic relationship so I                                 actually ran into this problem myself on                                 a feature that I'm currently working on                                 the concept of people metrics so I'm                                 trying to add a button in the data pane                                 to output the store into the console and                                 this is actually a feature that I wish                                 existed when I started out because I                                 didn't know that you could grab the                                 store off the container pane I didn't                                 even know what a container was I wasted                                 so much time putting breakpoints into my                                 code to dry try to grab the store it was                                 very frustrating but I didn't want to                                 build a feature that I just only found                                 useful so what I did is I actually                                 talked to a lot of developers from all                                 different levels I heard about their                                 pain points with ember data I also                                 pitched my idea to see if they actually                                 would find it useful and that enabled me                                 to gain a little bit of consensus and                                 traction so that I felt confident that                                 what I was working on was actually                                 something that people wanted and that                                 they would use and I'll be making a PR                                 for that soon so keep an eye out for                                 that                                 so why is DX important if a framework                                 has great DX it's a lot easier for                                 people to adopt it to contribute to it                                 to answer questions open issues etc and                                 this really encourages diversity and a                                 healthy open-source ecosystem if the                                 framework is a delight to use it really                                 makes for happier engineers if a                                 framework doesn't have good DX that                                 really limits the type and number of                                 people who can adopt it and contribute                                 to the project etc this really can                                 create conformity in the types of people                                 that use it and the problems being                                 solved and also if only a small number                                 of people understand it when developers                                 are building out applications there's a                                 greater risk of bugs being introduced                                 into the code and framework misuse if                                 the beginner can only understand what is                                 happening by looking at the source code                                 that is a failure of the framework and                                 they'll probably go and find something                                 else that's a lot easier to use they                                 don't have to use what you built and                                 luckily I'm not the only one who thinks                                 that this is a problem so when should                                 you contribute to developer experience                                 one great thing is that newcomers bring                                 new and very valuable opinions to                                 developer experience new engineers have                                 fresh eyes and new insights into the                                 framework they know it's hard starting                                 off these insights are really lost the                                 longer you work with a framework and                                 people can contribute to different                                 facets of frameworks as they gain                                 experience and each of these ladders is                                 vitally important and as engineers grow                                 they should continue to contribute to                                 all levels of developer experience and                                 help new engineers level up and this                                 will create a self-perpetuating                                 ecosystem I also really encourage people                                 from non-traditional backgrounds to                                 contribute to developer experience I                                 feel like there's a lot of pressure for                                 people from non-traditional backgrounds                                 to conform to the expectations of how                                 software engineers should learn and                                 solve problems but we should really be                                 using our unique backgrounds to make                                 frameworks and the open-source ecosystem                                 a more open and engaging place for                                 everyone so where can you actually                                 contribute one suggestion I have is to                                 work on features or missing                                 documentation that bother you or hinder                                 you and your day-to-day work this will                                 help motivate you to contribute and                                 you'll also directly benefit from it and                                 a lot of small one line changes exist I                                 personally have a huge pet peeve when it                                 comes to dead links whenever I see a                                 dead link in the code I'll make a pull                                 request when it's the repo to fix it and                                 this ensures the next person will have                                 access to the information and I've done                                 this for Amber data for the octane                                 guides for Mirage so on and so forth and                                 usually those PR gets merged within days                                 and it really helps builds relationships                                 with the maintainer --zz at the very                                 least and kind of give you ramped up on                                 to the framework you can also add                                 examples of how to use add-ons so if you                                 start consuming an add-on and you kind                                 of struggle with a bit to figure out how                                 to get it to work you can create a pull                                 request in the readme with an example                                 and I've also done this with ember sign                                 on cue unit because like a lot of people                                 I actually spent a lot of time figuring                                 out how to test my code in addition to                                 writing my application code and as you                                 work on the framework more you can add                                 comments into the source code you can                                 work on developer tools like ember                                 inspector there are just so many areas                                 out there that are just waiting and                                 maintained errs really appreciate you                                 making these fixes even if they seem                                 trivial because honestly a lot of times                                 they don't have time to take care of                                 these themselves so hopefully now you                                 understand why I'm so passionate about                                 developer experience and how important                                 it is DX is a great opportunity to help                                 you learn more about the framework and                                 also to help others learn and if you're                                 inspired to work on developer experience                                 tools I'm more than happy to talk to you                                 about them just let me know so                                 thank you
YouTube URL: https://www.youtube.com/watch?v=FIP6hmekDkc


