Title: Virtual EmberConf 2020: The Moderate Programmer by Derek Gavey
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	The Moderate Programmer by Derek Gavey

The moderate programmer isn't mediocre they are exceptional. Moderate as in "avoiding extremes of behaviour" might be the most useful trait a programmer can possess. As programmers "extreme behaviour" is almost a given so we need to fight harder to find the right balance. Moderate programmers know where to draw the lines and when to step over them. Using real world examples we will demonstrate what makes a moderate programmer so effective and explore what we can all do to become more moderate.
Captions: 
	                              [Music]                               hello everyone my name is Dara Gabi and                               I'm presenting to you today from the                               comfort of my home in rural Alberta                               Canada we're yet another winter storm                               seems to be rolling in today I'm gonna                               chat to you about what it is to be a                               moderate programmer why becoming one                               will make you a better programmer and                                maybe more importantly a better teammate                                first a little bit about me I'm the                                front-end lead at inclusive where we do                                public relations analytics for large                                brands such as lyft Airbnb etc I've been                                using ember for over six plus years                                since pre                                                            still using it for work and for pleasure                                today this is my fourth time at ember                                conference and my first time speaking on                                it my first time attending virtually as                                well as it is for all of you too so                                first off what do I mean by moderate I                                mean avoiding extremes of behavior I'm                                just gonna tell you a little story about                                why this matters to me I'm been a                                programmer now professionally for over                                                                                                       changes in the field especially a                                front-end programming and I've done                                almost every single one of the things                                I'm telling you to avoid today and I                                think it's really important to share                                this story because especially junior                                developers and other developers who are                                coming up you're likely to make a lot of                                these and and I'm hoping that that I can                                shed some light on on my path to what I                                hope anyway is becoming a better                                programmer first off this is not                                moderate I do not recommend jumping into                                your tub so I don't know if it's in our                                DNA or if it's in our culture but                                extreme behavior seemed to be endemic                                around programmers and we have to work                                harder than others at actually you know                                curbing that that behavior it's more                                it's so much inner culture we even have                                extreme programming as a programming                                pair                                that's that's been used by a lot of                                people over the years so yeah like I                                said we have to work a little harder at                                curbing those behaviors so this quote                                moderation and all things including                                moderation for everything I'm going to                                tell you today there's of course reasons                                to to ignore my advice and sometimes we                                do have to go all-in on something and do                                an extreme behavior depending other                                thing however I do think that we should                                be fighting for the middle ground not                                only in programming but really in life                                itself so this quote was brought to you                                by my mother                                well actually it was Oscar Wilde or                                before that apparently this quote can be                                attributed to Socrates so the idea of                                moderation in society and and as human                                has been around for as long as we've had                                society so first item is the moderate                                programmer names things appropriately                                but with enough detail so let's dive                                into some examples of that here at the                                top we have a not specifically enough                                named array so we have an array of items                                that contains a name of Canada which                                guesses the country although it just                                says name so I'm not sure code is yeah                                well what kind of code hmm well let's go                                into a two specifically named example                                now we have country ISO code objects                                which is better but that's pretty long                                and oh look we're repeating country ISO                                twice so that's a lot to read a lot to                                look at that's gonna make it more                                difficult for someone looking at it                                after in the moderate way on the bottom                                we have all countries name is Canada and                                the ISO code is ca ca so now we have a                                little bit more information about that                                that's going to be easier for someone to                                read let's go through some rules about                                naming things you should name things                                three words or less whether that's a                                variable or a function or class any more                                than that is probably too verbose we                                should avoid jargon to metaphors try not                                using the words factory or object or                                class all of those things are repetitive                                 and do cause problems in the code you                                 should also use plurals where                                 appropriate this would be in the case of                                 arrays or collections or maps it signals                                 to your teammates or for you looking at                                 your code in the future that this in                                 fact is multiple items makes it easier                                 to understand also for boolean is prefix                                 with is has can again this is another                                 trigger when we're looking at it at the                                 code later it's much more clear that                                 this is in fact a boolean if it has                                 those those words in front of it for                                 functions use a verb then now like get                                 users find admin things like that                                 number two the moderate programmer                                 writes small functions but not too many                                 so again here's another example this                                 function is doing far too much we got                                 set country per user and we're passing                                 in an ISO code and a save user which i                                 think is a flag it's a little bit hard                                 to understand though not that this                                 function has too many lines it's only                                 about ten but that's is doing                                 conceptually too many things so let's                                 break it up oh we've broken up far too                                 much look at this we got now four                                 functions where we have one before so                                 now we gotta get user get ISO code SAVE                                 user get country and then the main                                 functions start save user well this                                 isn't quite right it's going to be                                 really difficult to because every time                                 we get to it costs user equals sisters                                 here okay what does this get user yeah                                 so now we jump up have to look at it                                 this becomes a lot more difficult to                                 understand here's a nice moderate                                 example of writing small functions we                                 have now two functions both do one thing                                 conceptually the first one gets the                                 country code or gets the continuum from                                 the ISO code the second saves the user                                 we check if the user is valid we see if                                 we get the country set it to the user                                 save the user set a user flag so much                                 more easy to understand this code than                                 the last two examples so again some                                 rules a function should conceptually do                                 one thing                                 beware of how many flags you have                                 arguments any flags even one is probably                                 a sign that your function is doing too                                 many things and you may want to                                 reconsider that be aware of how many                                 arguments you're passing to a function                                 again too many arguments I'd say even                                 more than three and that's probably                                 again a good indicator that it likely                                 should be refactored components are                                 functions too and this is really                                 important so everything I said here also                                 applies to your component creation                                 because conceptionally components are                                 functions as well so your component                                 should do one thing you you should                                 beware how many flags you're passing to                                 your component as well as how many                                 arguments or McKissack ramona's                                 properties you're passing to it so the                                 number three in the moderate programmer                                 rights tests but only enough so you've                                 probably seen this before eat food not                                 too much mostly plants this is a nice                                 moderate take on eating by Michael                                 Pollan and in in programming we have                                 this so Guillermo wrote this while ago                                 write tests not too many mostly                                 integration now if you take the idea                                 that that writing tests is like a                                 nutritional balance for your program                                 they have some similar parallel                                 parallels so writing tests because if we                                 don't write tests we're starving our                                 program not too many because too many                                 and our program is going to become                                 bloated and we mostly want to do                                 integration you know why do we want to                                 mostly do integration because                                 integration gives you the best balance                                 of knowing enough about the program to                                 find regressions and not enough that                                 it's going to become tripped up over                                 changes that aren't important that don't                                 need to be caught in regression test so                                 again some rules write your tests and                                 write them immediately or you probably                                 won't write them so I'm not saying that                                 you need to do test-driven development                                 I'm saying that you should make sure                                 that you                                 tests in your own PR right away                                 ember integration tests are your best                                 bet again they're the perfect middle                                 ground or the perfect moderate ground in                                 where you're going the best bang for                                 your buck when it comes to testing then                                 unit tests know too much about the                                 implementation I'm not saying don't do                                 unit tests they're important just as                                 important however you should be using                                 them sparingly and only when it's it's                                 important for a regression to be caught                                 except this test can also become too                                 fragile and they don't really know                                 enough about about your program so                                 they're often catching things where they                                 shouldn't be and it becomes that you're                                 fixing tests more than you're fixing                                 problems so don't forget you have                                 diminishing returns after whatever                                 percent of code coverage this is                                 different for every team and every                                 project I'd consider talking to your                                 team about their to see just just how                                 many tests do you need to catch those                                 regressions to to catch any bugs that                                 you might introduce so the moderate                                 programmer factors but only eventually                                 this talk by Sandi Metz in                                               conference so it's really great and she                                 talked about refactoring you don't need                                 to be a ruby developer or even a rails                                 developer done you're just Dan this talk                                 I highly recommend it she says one thing                                 in that that really resonated with me                                 and she says duplication is far cheaper                                 than the wrong abstraction she even has                                 a blog post specifically about that and                                 I think it's it's really important but                                 above that I've written bright ugly code                                 and that's the one thing if you're only                                 gonna take one thing from my talk today                                 I want you to take that I want you to                                 have permission to yourself to write                                 ugly code because unless you write ugly                                 code you're not gonna know what                                 beautiful code is you're not gonna know                                 what the right abstraction is going to                                 be you also might make it harder for                                 your teammates to read the code so it's                                 really important that at least at first                                 you write                                 it's okay to write those for loops                                 instead of the filter it's okay to write                                 the if statements it's okay to write the                                 ugly code so this came up the other day                                 Jeff Atwood tweeted the older I get the                                 more I enjoyed dumb verbose code over                                 fancy concise code and I thought this                                 kind of summed up what I was talking                                 about fairly well so you can see at the                                 top it's a much more complicated thing                                 to understand then then below so again                                 some rules rule of three abstract on                                 your third duplication if you're gonna                                 refactor it's okay if you leave some                                 duplication in your coat that's not a                                 sin you absolutely can do it in fact you                                 probably want to do it up to your third                                 time at that point you should be                                 considering what the right abstraction                                 should be well future me or my teammates                                 understand this better                                 and when I say future me I don't mean                                 future mean that has been working on                                 this code for three days and knows it                                 inside out but future me who's been                                 tired who is under slapped and who is                                 now stressed because they have to figure                                 out that code that's a different person                                 than you are when you're writing it so                                 you really want to consider that way the                                 costs of the refactor is this going to                                 be better for the program or is it just                                 clever like is it going to stop bugs                                 from coming up is it going to be easier                                 for my teammates to read and I think                                 that that's maybe the most important key                                 is you should be erring towards easier                                 to read rather than easier to write so                                 the moderate program gives up but not                                 forever                                 so there's a number of examples about                                 this let's go through each type of                                 giving up first off give up and ask                                 someone for help and this is probably                                 the most important versions of the                                 giving up if you're struggling with                                 trying to get some code written if                                 you're not sure and you banged your head                                 against your monitor for three hours                                 it's definitely time to give up and ask                                 someone for help that could be a                                 teammate                                 it could be online it could three be in                                 discord it could be just a Stack                                 Overflow search but it's really                                 important to stop and do that                                 also I found that while asking for                                 someone for help within minutes of                                 trying to explain the problem I've                                 already solved it in my head and I don't                                 even need to talk to someone anymore so                                 it's more important that we need to do                                 this and not just power through when                                 we're struggling also give up and take a                                 break take a walk play a guitar do some                                 yoga whatever it is that takes you away                                 from programming even if that's just for                                                                                                          make it easier to solve your problems                                 and finally give up and throw out your                                 code it's okay you can write your code                                 two three times and sometimes you have                                 to struggle through it once or twice                                 before you find the right way to do it                                 so I'd say it's okay to throw out your                                 code you probably want to get stash at                                 first you'd be surprised at how many                                 times you might need it so let's sum up                                 what we've been through today we talked                                 about the moderate programmer names                                 things but with enough detail write                                 small functions but not too many writes                                 only enough tests rhe factors their code                                 eventually and the moderate programmer                                 knows when to temporarily give up thank                                 you everyone I really appreciate you                                 listening to my talk and please reach                                 out to me on discord or wherever you can                                 find me and I would love to chat to you                                 more about this
YouTube URL: https://www.youtube.com/watch?v=V9xHfex3ttc


