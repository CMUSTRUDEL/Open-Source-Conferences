Title: Virtual EmberConf 2020: Octane: A Paradigm shift in EmberJS by Suchita Doshi
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	Octane: A Paradigm shift in EmberJS by Suchita Doshi

EmberJS is a great choice when it comes to building web apps of any size. However, it does have a reputation for having a steep learning curve along with other issues like the size of the framework, not being productive out of the box, etc. Ember JS's newest edition Ember Octane addresses most of such concerns & rescues the troubled developers. Curious about what features Ember Octane offers? and why is it so different from the previous versions of Ember? This session would cover some important aspects of Ember Octane & an overview of Ember's transformation from its previous versions to Octane.
Captions: 
	                              [Music]                               hello everyone I'm very good morning                               open everyone is doing great                               my name is sue cheetah Doshi and today I                               will be taking you to the journey of                               anger but before I do that let me give                               you a quick introduction about myself I                               work as a senior engineer at LinkedIn                               and before linden I work for many                                different companies but my very first                                ever experience comes from Yahoo back in                                late                                                                    where I didn't do amber stuff but that                                was not for not the love for Amber for                                independent and Here I am working on a                                lot of cool amber stuff also when I have                                not on my like working on my computer or                                I am not doing any coding related stuff                                here are the things that I love I love                                playing guitar not true but I can still                                play a little bit I am a huge cricket                                fan for those who don't know what                                cricket is it's a sport which is very                                similar to baseball and I myself play                                cricket and it's very famous back in                                India awfully I have this craze of                                building my own custom mechanical                                keyboards with new switches and custom                                click apps etc if any of you might have                                any cool ideas feel free to reach out to                                me and I love watching movies I mean who                                doesn't right ok enough said about me                                now we should focus on the main topic so                                today an agenda would be something like                                this I plan to cover the journey of                                Ambrosius                                in terms of its versions like version                                  dot X                                                                  and I will be talking about amber octane                                and its native concepts like some core                                concepts like native classes glimmer                                components templating and octane track                                properties modifiers and decorators                                after that I will be showing you a                                consolidated comparison of the classic                                syntax vs octane syntax and at the end I                                will leave you guys with some                                documentation                                references to migration guides and some                                information about amber octane vlogs etc                                okay so let's start with the journey of                                amber but before that let's take a step                                back and think about around                                           or so back in that time we didn't have a                                lot of options in relation to JavaScript                                frameworks as we have today the most                                evident options during that                                        backbone.js angularjs knockout JS etc                                while these were great they still left                                the decisions of configuration on the                                developers it was during that time when                                one framework emerged which was rid of                                the principle of the developers should                                not care about the configuration stuff                                they should only focus on that specific                                stuff which means the developers                                productivity would be increased because                                a free mug would do the config related                                stuff the name of this framework was                                amber genius amber is come a very long                                way ever since                                                          started with wonder X so since one node                                X was up for a very first version of                                amber it came with a lot of goodness to                                start off with its conventional                                configuration                                this was a whole new mental model shift                                for any developer who comes from a                                different JavaScript framework world                                especially they I will give you my                                specific example I came from backbone.js                                background and when I tried working on                                amber it was very different for me but                                as it when I started working on Albert I                                started feeling the difference and I                                started appreciating him more and more                                because I stand feeling more more                                productive so that was when I started                                falling in love with Amber also I'm not                                provided in box built in routing                                capability so that means you don't have                                to write your own routing layer or get                                it from outside                                something like that it was already ready                                for you which was a huge thing also we                                have support for Amber data that took                                care of the state of the application etc                                and whatnot it's was built on new driven                                architecture what I mean is here you can                                 see the route controller I think that                                 was the path that or that was the                                 architecture that we followed at that                                 time and for anybody who wants a                                 refresher of how he is to read I produce                                 a sleeve pic is in here where computed                                 properties were written somewhere like                                 the animated with dot property and                                 observers were written something like                                 they'd be added dot observes to the                                 properties also we have the capability                                 of two-way bindings which was great                                 because and that came it was really                                 really dynamic thing for any frame of to                                 have this ability and we add the support                                 for attribute bindings this was really                                 good because let's see if you had a                                 package as class or a template like a                                 component with a template or even a                                 template and you wanted to associate the                                 attributes value dynamically so with                                 bind actor syntax you can associate your                                 components of views property directly on                                 the template so that was pretty good ok                                 so this wasn't good amber would not X                                 was really taking off and it was doing                                 great and complex web applications who                                 are started to love it already but the                                 community always believed that there is                                 always room for improvement so the                                 lessons that they learned from one dot X                                 and the new frameworks that were                                 evolving during the time at                                             being planned out they embraced all of                                 these things together and added things                                 in the roadmap of products so here are                                 the few things that landed in products                                 instead of you driven now we are                                 component Riven this was because the web                                 community itself was going in that                                 direction                                 and amber was hand in hand with that so                                 here you can see round controller                                 component is of no avail and again a                                 sneak peek of how the syntax changed the                                 computed properties now amber are                                 computed and observer is now under done                                 observer also we had the bloomer                                 rendering engine in to Roddick's which                                 was a very very good thing was a gif or                                 dramatic improvement in the real                                 enduring of the application is pretty                                 good and then we had better binding                                 attributes right you remember in the                                 previous slide I showed you the bio-data                                 syntax like you can see here as well in                                 the mathematics but this post some                                 issues where it became an overhead and                                 it was confusing and so on with                                         it became more simplified where you can                                 directly add a property from your J's                                 class on to the template without adding                                 the band by Nutter so that was nice also                                 the template scoping was improved let me                                 show you an example here we have one dot                                 X and robotics again a comparison and I                                 want to specifically talk about the                                 second example in the one dot X section                                 where we are trading over the posts                                 without any in so here I am doing each                                 posts and whatever is the inside of that                                 iteration loses the outside context or                                 it doesn't have access to the outside                                 context so you are stuck in that                                 iteration itself so as a workaround the                                 above example like each post in post                                 allow you to do that where the post                                 would act as the inner context and the                                 new bin is Alexis outer context but in                                 two dot X things are way more simplified                                 and standardized where every time you                                 want to iterate over a property you use                                 that as functionality like each post as                                 and then pipe and whatever the                                 parameters here it is post so again the                                 post would be the inner context and you                                 can get the outer context as                                 you wish also while to mybinding's was                                 great did impose some issues when your                                 app started becoming more and more                                 complex and more and more bigger by that                                 what I mean is let's say property a                                 updates nini update see see updates Erin                                 so this kind of infinite cascading                                 started becoming a problem and that's                                 why we started embracing the data down                                 actions up approach and amber tarot                                 decks was not just about all of this it                                 was of a more than that in two Roddick's                                 itself we had a roadmap towards things                                 like HTML syntax for component                                 invocation routes to drive components                                 like these are under bracketed                                 invocations and routable components if                                 you might have heard already that brings                                 me to my next topic within our                                 Theodoric's this is very exciting it has                                 a lot of things and mention a few of the                                 things here but there are many more                                 things than this in Theodoric's to start                                 off with its clean up clean up clean up                                 why am i emphasizing on clean up so much                                 because a lot of theorem has been done                                 with this version where a lot of private                                 API is deprecations everything                                 everything hasn't cleaned up in that way                                 the code the framework becomes more                                 manageable maintainable and more cleaner                                 also we have removed support for                                 Internet Explorer                                                        also power from now on the other points                                 I will be excluding more in the details                                 in the coming slides I'll quickly skim                                 through these three not X has the                                 ability for supporting Native classes we                                 have our components angle brackets                                 invocation                                 track properties modifiers and                                 decorators and lots of documentation                                 which is a huge thing when you are                                 moving forward with a certain youth                                 change so that is a job well done by the                                 folks so what did we learn we saw that a                                 framework emerged when in                                          released one dot X and then it                                 threw more in torrox and then through                                 the wall in three directs and then here                                 we are with the first new addition and                                 were octane so you must be thinking why                                 is this a new edition and why isn't not                                 a new version so you can think of                                 edition as something that represents a                                 shift in programming model due to new                                 features and concepts added in the                                 framework like for example here we have                                 a bundle of new features a lot of                                 documentation a lot of - links like code                                 mods etcetera and everything bundled                                 together so that's where it's in the                                 condition so let's take a sneak peek of                                 each or some of the key concepts of                                 vampire octane itself let's start with                                 Native classes so amber relies very                                 heavily now on Native clubs or native                                 features of JavaScript when I say it                                 relies on native features I mean there                                 is very less framework specific code and                                 because there is very less framework                                 specific code the overhead on building                                 the framework itself is very less that                                 means increase performance and Amber is                                 known for its C planning curve I mean                                 I've seen many folks what's open doing                                 it when I've read if I edit some blogs                                 as well                                 well people choose not to use that word                                 because of its steep learning curve and                                 I can imagine why but I think with                                 octane that won't be an issue anymore                                 because since now we have again I am                                 repeating less framework specific code                                 so you won't have to learn a lot of                                 things out of the box so it's it gives                                 you a smooth learning curve experience                                 also because again the same thing it's                                 more native stuff it is more aligned                                 with the JavaScript community and you                                 can share code more easily and there is                                 no more dot DX can you imagine like me                                 myself personally I used to feel like                                 why do we have this like this job                                 oh this circuit bar I am sure a lot of                                 you might be sharing the same feeling                                 like I am right now                                 so there's move objects you just                                 directly do this doubtful                                 there's your back like you usually do to                                 me more property in your JavaScript                                 currently and of course it is clean and                                 easier to read                                 enough said let's see an example so here                                 in this example you see on the top we                                 have this classic amber of Dickinson tax                                 and at the bottom he have native syntax                                 now if you see the main difference is                                 how we are creating or defining the                                 object on the top we are doing amber                                 object on extent but at the bottom with                                 native class and that's no more amber                                 objects you can just say class person                                 that's it you're done also in the                                 classic syntax you can see the computer                                 property full name is created by passing                                 in the properties for Simon last name                                 and we are invoking before Simon last                                 name is this turning force in this                                 you're getting a snake where the native                                 class we are just writing the native                                 getters of JavaScript and then just                                 adding a little splash of computed                                 decorator on top of the native Gator and                                 that's it you're done you don't have to                                 do this job gets anyone's this is your                                 first thing this is your last name so                                 that's very cool this is a little bit                                 about native classes now let's move on                                 to glimmer components in my personal                                 opinion this is one of the biggest                                 events in Amber's journey so far because                                 Amber's component library was pretty old                                 and with this new component library it's                                 a great refresher                                 not only does glimmer components take                                 all the goodness of Native classes but                                 it also makes it more simplified                                 component library in Acworth let's talk                                 about this following example again so                                 here wilmer component is defined by                                 importing glimmer component instead of                                 our component as you can see and instead                                 of exporting default component or extend                                 like we do usually in a classic syntax                                 we just do a native class and then                                 exchange of the level component also                                 there are now                                 your hooks and properties that is a                                 great thing like previously we had                                 thirteen lifecycle hooks at twenty nine                                 properties now can you imagine a new                                 person coming and joining working on                                 amber and you say hey if you want to be                                 productive if you want to start working                                 and make an effect you need to know                                 thirteen lifecycle hooks and twenty-nine                                 properties that would be immediately                                 daunting and overwhelming for anyone who                                 comes across this I think with this with                                 blima components no more fear because                                 now we only have two lifecycle hooks and                                 three properties also you must be                                 already knowing then every time you                                 create a component in the classic                                 component world or rapper is always                                 wrapped around your template like for                                 example here the number of kids is just                                 a value but when it renders on a Dom                                 there will be a div or in this case                                 there will be a label that will be                                 wrapped around it this might become                                 confusing and it has actually I have had                                 many people come to me and ask me hey                                 I'm just rendering this template what is                                 this new tip that is being wrapped                                 around it I'm not even adding it in my                                 template and then I had to explain that                                 the reason why but with glimmer                                 components it's what you write is what                                 you get or what you see here you can see                                 very well the bottom when I'm wrapping                                 it around with the label tag itself so I                                 am not doing anything special in my                                 class rather I am just reading                                 everything in my template itself so that                                 is amazing also it's important for us to                                 identify what can the local in our                                 component and what things comes from                                 outside with the classic components                                 there is no way to do it because as I                                 can see here this is your number of this                                 and                                 max list they both are this dot and this                                 job there's no way for you to bloom                                 which is a current one and which is I                                 mean which is a local one and which is                                 coming from the parent context but if                                 you see in the liberal component case                                 this dot r dot Maximus                                 so I know now for a fact that max gas is                                 coming from somewhere outside so it's                                 from a parent context so that is a great                                 way to identify what is the point of                                 origin for any particular property so                                 this was a little bit about glimmer                                 components for you guys now let's talk                                 about templating in octane now there are                                 a lot of good things that have come in                                 in the world of templating for octane                                 let's start with angle bracket syntax                                 now this angle bracket syntax is                                 dramatic simplification of API like                                 let's say for example in here in this                                 example we are saying in classic                                 templating we are invoking the component                                 using the curlies                                 but in octane we are booking the                                 component using the normal HTML syntax                                 which is angle bracket so now it's very                                 easy for me to understand which thing is                                 coming or which thing is a component                                 which then use a helper which thing is a                                 property - before it was very hard for                                 me to understand right when I see it                                 from the for school                                 also with angle brackets we have                                 something about us named arguments named                                 arguments are away well in the previous                                 slides we saw this dot arcs                                 it is similar to that but if the                                 templating side well it helps you                                 understand where is the origin of your                                 property coming from for example in here                                 on the top everything has no context                                 whatsoever you don't know where the                                 employee name is coming from you don't                                 know where the employee ID is coming                                 from but in the bottom it's very clear                                 like for example the employee ID when                                 I'm pre fixing it with the actor it's                                 Inder I knew that it is coming from an                                 outside context so now I can understand                                 that okay this is a bastion art and not                                 something local to my JavaScript plus                                 also a good thing to keep in mind is on                                 the next time right now like on the                                 classic templating side on the left side                                 we have name                                 M ID and an employee now it's hard to                                 understand whether this thing is part of                                 the HTML attribute or is it a part of                                 your component but with okhane it's very                                 easy because not everything that is                                 pertinent to your component will be                                 always prefixed with an actor it like we                                 have right now in here also we have                                 required this inter tickets let me have                                 at the rate symbol for something coming                                 from outside we should know what things                                 recite locally in your backing class and                                 that's where this dot employee name                                 becomes very handy before there's no way                                 for me to know but now I do                                 so it's a great way to make things very                                 specific and very concerned and very                                 clear so this was a little bit about                                 templating in the octane world now let's                                 move on to track properties my personal                                 favorite the reason being the                                 simplification that it brings on the                                 table but beneath it is very strong let                                 me start by going through the syntax                                 real quick here you can see instead of                                 computed property when I am importing on                                 the talk I am putting a track property                                 from England were tracking library then                                 any local property that I want to listen                                 to or that I want to depend on I will                                 mark it as track like a prefix it adds                                 extract in the track syntax and then the                                 magic happens on the top in classic                                 syntax you can see there is a computed                                 property that is depending on Fox name                                 and last name we're at the bottom I'm                                 not doing anything                                 it is a simple plain JavaScript getter                                 but the magic happens now well any                                 property that is marked as round will                                 make sure that any Gator                                 that uses that tract property and if                                 there is any chance where the track                                 property changes it will make sure that                                 it recalculates the Gator and sends it                                 back to the browser so in a way the                                 functionality or the behavior would be                                 similar to computer but this is way                                 better just imagine when you are writing                                 a huge component class and you have                                 several properties in your class and if                                 you have to depend on few of the                                 properties here and there for multiple                                 computer properties there will be so                                 many more computer properties in your                                 class and it will be not very clean but                                 with this you can just mark those or                                 prefix books with tract and just read                                 your regular Gators that's all so very                                 clean and concise as well also no more                                 sex my native places we have no more                                 gates now we have no more sets                                 so no more this dot set foo set bar or                                 for example in here this is Georges set                                 count equals this Georgia count no now                                 for all this confusion just do what you                                 regularly do in your JavaScript this                                 your County because this job complex one                                 and you're good to go so that's amazing                                 so these are a few things of track                                 properties how it works and how it                                 behaves now let's move on to modifiers                                 and decorators so what is a modifier you                                 can think of modifiers functions or                                 classes that are directly apply to the                                 template like it's applied directly to                                 the element itself like you can see in                                 this example on the button tag I'm                                 adding the or modifier itself which is                                 just doing some usual event handling                                 with this your agreement now you must be                                 thinking why do I need to do this I can                                 currently with my tip insert element                                 hook I can associate my event listener                                 and I'm all good to go but just think                                 about it you can do that easily with                                 your top-level element or the root layer                                 element for your component but what                                 about the child elements you could still                                 do it but it will be a bit messy                                 instead of that modifiers allow you to                                 target specific elements                                 so you can go in whichever elements you                                 want to associate things with you can                                 just add the modifiers in there directly                                 and moreover it also cleans up the code                                 for you and it also I mean cleans up the                                 state and registers if any parameters                                 change so that is a great thing and they                                 are easy to reuse so there are a lot of                                 benefits of using modifiers or not using                                 them now let's move on to decorators                                 what is a decorator now you can think of                                 decorators as something that enhances                                 the functionality of what it is prefixed                                 on for example here you can see the                                 increment function and decrement                                 function as an action decorator prefixed                                 now just the increment and decrement                                 functions are doing the job of                                 incrementing or decrementing at the                                 counter but with action decorator it's                                 doing more than that it understand them                                 or now this function is the coming an                                 action out there rather than just being                                 one function so that's how it enhances                                 the functionality so it's kind of an                                 abstraction for the developer but it                                 adds a lot of value so this was a little                                 bit about modify design decorators                                 now let's move on to the meat part now                                 we will do the comparison between the                                 classic and the octane syntax now here                                 on the left a very very left side you                                 see there's a custom off label that's                                 what we are talking about right now                                 it is invoked using the curly slack you                                 can see in the bottom with toggle label                                 and I'm passing in few arguments and in                                 the right you can see an actual                                 implementation of this component all                                 this is good there's this classic                                 component you can see a lot of things                                 happening in the component has itself                                 when I move it to octane this is how it                                 looks like now the template specific                                 stuff is in template the component                                 sizing stuff is in component and you can                                 see it is in both using that                                 bracket syntax let's go through it one                                 by one so right away you can see that                                 the input is different on the left on                                 the classic side we have component                                 component and on the right side we have                                 a grabber component next we are no                                 longer doing the classic components in                                 tax like on the Left we see component or                                 extend but on the right we see native                                 class syntax and then we are extending                                 from climber component then no longer                                 implicit wrappers on the left                                 I am overriding the tag name with level                                 but on the right if you see on the right                                 bottom the label element is being                                 improved in the template itself also any                                 template specific stuff goes to template                                 itself on the right in octane part but                                 that's not happening in the classic we                                 are still doing attribute bindings and                                 class name bindings in another asset                                 class also a few things to note on the                                 left side in the classic syntax in the                                 our property god is awesome and a label                                 value of computed property that depends                                 on that and then we are invoking and he                                 was in this job yet but on the right                                 instead we are pre fixing it with track                                 that is awesome and then we are just                                 using a normal regular getter and no                                 longer this dot yet it is just as your                                 awesome next thing to check is on the                                 Left we see that we are depending on a                                 property called value but I don't know                                 really where this value is coming from                                 but on the right it's very evident that                                 it's coming from this dot R the sort of                                 value that is coming from parent context                                 so easy to understand also on the Left                                 we can see that we are handling the                                 click Hamner on the left by reading the                                 click handler in the classic syntax but                                 on the right we are using the on                                 modifier to make sure we are editing on                                 the element itself like registering here                                 and then handle                                 using the actions decorator so this was                                 a little sneak peek for you to give you                                 guys the feel of how it was before how                                 it is now how simplified and how good                                 the separation of logic has happened now                                 and I hope it gives you a good                                 understanding of what is coming forward                                 as promised here are a few reference and                                 guys where it would help you to migrate                                 in a current existing I am gonna walk                                 team like with these cold modes we have                                 a lot of old mods in this link that you                                 couldn't follow the folks have done a                                 lot of hard work and it is easily seen                                 in there you know hopefully this will be                                 a very smooth transition for you guys                                 also if you have any questions about my                                 visions or migration order or something                                 like that I am gonna Atlas would be the                                 right place for you to go there it will                                 give you the right amount of information                                 for you to migrate very smoothly and the                                 rest are a few random information for                                 you to dig down more deep into popped in                                 and its key concepts and deep                                 understanding about each concept so this                                 one it guys thank you very much for                                 patiently listening to my talk and I                                 hope all of you are as excited as I am                                 for obtain and I'll see you riding up in                                 ride of it                                 you
YouTube URL: https://www.youtube.com/watch?v=ukzyBxQ9Zsc


