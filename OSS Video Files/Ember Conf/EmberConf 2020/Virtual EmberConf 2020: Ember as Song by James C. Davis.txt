Title: Virtual EmberConf 2020: Ember as Song by James C. Davis
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	Ember as Song by James C. Davis

Songwriting and programming have much more in common than you might think and Ember is the perfect medium for demonstrating this. This talk will show you just how similar these two disciplines are by creating an Ember Octane app that is actually a piece of music! Components are our instruments and routes are our phrases! We’ll start with a simple riff and build upon it, piece by piece, the same way you’d develop any Ember app, only this is one you can hear! Come join me in building an app note-by-note and experience Ember in a brand new way!
Captions: 
	                              [Music]                               hi i'm james c                               davis and i'm a professional programmer                               and an amateur songwriter                               i'm going to talk to you today about                               something that i call ember as song                               so let's start with an idea there was a                               brainstorming session for                               ambercomp proposals where melanie sumner                                had thrown out this idea of                                composing a song alongside building up                                a number app so building up the song                                piece by piece and the amber app                                and then coinciding so i really like                                this idea but i wasn't really sure how                                to make it happen                                so the idea grew it just sat with me for                                a while                                like how best can i compare building an                                app                                with composing a song can i                                map the elements of a song to concepts                                and number                                i wasn't really sure how to do that and                                make it work                                and then it hit me i could create an                                ember app that is a song                                and then this just led to a whole                                exploration into that                                so i've long thought that programming                                and songwriting were very similar                                they're both very creative endeavors                                they're both complex                                and they share many fundamental concepts                                like patterns                                and loops conditionals                                problem solving it's often when you're                                creating music you're trying to figure                                out how to get things to work together                                and bug fixing sometimes something's                                wrong and                                you have to figure out how to make it                                work                                so what's in a song a song is composed                                of sections                                so you have like an intro and verse                                and a chorus and bridge and these                                may repeat and be intermixed with each                                other                                so what are sections composed of well                                a section has instruments                                and the instruments play different parts                                and the parts are made up of                                individual notes those notes are                                organized into measures and                                it can be strung together to create                                musical phrases                                so like sentences or paragraphs                                so i want to map these concepts to amber                                so here's some of the mappings that i've                                done                                sections i've mapped into routes because                                those are kind of like locations                                in the in the song instruments i've                                mapped to services                                which i'll demonstrate in a little bit                                parts are components because that's what                                that's what makes it up that's what                                makes up the song                                and that's what makes up the app is the                                components and then notes                                i've mapped to contextual components                                specifically a                                contextual component within the part                                because it needs context so a section                                mapped to a route so it's a location of                                the song it's composed of                                different instruments playing parts                                together                                uh the same way a route                                will have a route template where you                                have different things working together                                it's really like the musical equivalent                                of a page                                so an instrument i've mapped to service                                and this is because instruments are                                global you have instruments that you use                                all throughout the song                                and they maintain state when moving                                through sections they keep playing                                so if there was a note that was sounding                                at the end of a section it'll continue                                into the next                                section volume                                you can control the volume of the                                instruments and that's a global control                                or effects that are applied on the                                instrument                                so part i've mapped a component                                 because a part is made up of notes for                                 one instrument                                 and it's often a pattern that repeats                                 within a section                                 and it could also be reused across                                 multiple sections so                                 you might have a part in one section                                 and use that same part later the same                                 way you would do a reusable component                                 and number so notes                                 i've made contextual components because                                 they belong to a part they need the                                 context                                 they need to know which instrument that                                 they go with                                 and they need to know when to play                                 relative to other notes                                 there's other globals as well like tempo                                 tempo is the speed that the song                                 plays at there's the master volume so                                 all the instruments together                                 there's a volume control that's global                                 there's also the playing state such as                                 start                                 pause stop and where we are on the                                 timeline                                 these could be handled by a single or                                 multiple services                                 depending on how you want to group them                                 together                                 so how do i take this concept of ember                                 as song                                 into an actual implementation so i                                 started with the web                                 audio api the web audio api                                 is extremely powerful but it's very low                                 level                                 i wanted to start with something a                                 little higher                                 for making music so i found tone.js                                 and tone js uses the web audio api it's                                 built on top of it                                 but it provides primitives for making                                 music not just sounds                                 which is basically what the web audio                                 api gives you                                 so i want to create a hello world so my                                 goal                                 here for hello world was to create one                                 instrument                                 uh a piano let's say and just play a                                 single note                                 middle c so middle c is the white key                                 right in the middle                                 of the piano keyboard so i created a                                 service                                 generated a service called it piano and                                 i went ahead and added a name so we have                                 something human readable                                 and so with this service i created a                                 property called inst                                 for the instrument and i use something                                 called sample library which is an                                 extension to tone.js                                 that lets you play samples and samples                                 are just recorded                                 instruments little single note                                 recordings of instruments                                 and so i load up the piano instrument                                 piano sample and i send it to master and                                 so master is your output basically to                                 your speakers                                 and so i wanted to be able to work with                                 the instrument within the template                                 so tonejs is made for creating music                                 and javascript and i really wanted to                                 create it in ember                                 in ember templates and so what i did is                                 i created a component to represent the                                 instrument                                 and so you can see the component                                 displays the title                                 instrument so you can see what it is has                                 a container                                 parallel i'll talk about later but it                                 yields a contextual component                                 called part and passes through                                 the instrument plus volume and human ice                                 and things we'll talk about later                                 to it and it yields apart okay so the                                 part component                                 the part component is responsible for                                 connecting notes to an instrument                                 it's responsible for scheduling notes to                                 play and i say scheduling because                                 in tone.js you schedule notes to play at                                 certain times                                 the timing is not exact enough in                                 javascript to say just play this note                                 right now                                 you actually schedule it to play at a                                 certain time                                 music it has to be very exact to sound                                 right                                 it's also responsible for scheduling                                 draws and draws are like any                                 thing where you manipulate the dom and                                 we'll see that a little bit later                                 and also for looping so any repeats so                                 those are all                                 handled by the part component                                 so the template for the part component                                 looks like this                                 and so we have uh the did insert element                                 modifier                                 we call an init part                                 and it yields a contextual component                                 called note                                 as i had said earlier that i map notes                                 to contextual components and it passes                                 something called add note and something                                 called active note                                 to that component so let's look at this                                 note component                                 so the template's very simple uh has a                                 local class                                 i am using ember css modules here                                 and it has a conditional class                                 on this dot active something called                                 active and                                 active gives it a background color and                                 then if we look at                                 the backing class we can see there's a                                 constructor that calls that add note                                 that was passed in                                 it grabs a bunch of properties off the                                 arguments                                 and then active is a calculated                                 getter there so let's play it so here's                                 how you would use it                                 you invoke the instrument component pass                                 it the instrument                                 so this instrument is a service                                 we're now in a route template so we need                                 to create a controller so i create a                                 controller                                 and inject the piano service into the                                 controller and that's really all the                                 controller is there for                                 is to get the that's piano service into                                 the template so it yields i                                 of the contextual component part which                                 yields p                                 with the contextual component note and                                 here we                                 say pitch equals c                                  so c                                                           it's a standard way of naming the notes                                 that starts all the way down at c zero                                 goes c d e f g                                 a b and then c one because the notes                                 repeat                                 those seven notes repeat um so z four is                                 right in the middle                                 so let's see what that sounds like                                 [Music]                                 and there you have it we press middle c                                 and you also saw that it lit up which                                 we'll talk about visualization                                 in a moment so let's do a scale a scale                                 is a string of notes                                 one after another it can be ascending go                                 up                                 get higher or descending in pitch and                                 it's basically like for the c scale at                                 least hitting all the white keys on                                 the piano so we can implement a scale                                 like this                                 so we have our instrument we pass it a                                 piano                                 and down here in the part i've actually                                 divided things up into measures                                 the measure component there is really                                 just for visual display                                 it just divides it up visually                                 here and in the output                                 so you can see i have pitches starting                                 at c                                                    up c d e f g a b and then c                                 five that's the next octave once you                                 wrap back around that's an octave                                 and here i've specified the time                                 argument so time in tone j s                                 is defined with measures and beats                                 so standard time                                 like a standard time signature is                                     which is                                         per measure so you see our four beats it                                 starts at zero                                 so zero one two three then the second                                 measure zero one two three                                 so let's see what that scale sounds like                                 there we go c scale all right so how                                 does this work                                 so here's our part component we looked                                 at earlier                                 so you can see that it yields                                 this note component and then here's the                                 backing class for that note component                                 so we can see that it's calling add note                                 that it was passed in and it's                                 passing in basically the arguments                                 and that's supposed to be rx there where                                 it says this                                 anyways so the part component so let's                                 take a look at this we haven't seen this                                 yet                                 so it defines an empty array of notes                                 create defines this action called add                                 note takes a note                                 calculates an id for the note so just                                 the next one in the list                                 just uses length for that pushes onto                                 notes                                 adding the id and then returns the id                                 and you can see                                 down the lower left back to the part add                                 note component                                 where add node's called and returned                                 with the id which gets assigned                                 to that note then we have trigger synth                                 and trigger synth takes a time and a                                 note                                 and it calls trigger attack release                                 which an attack and a release attack is                                 basically hitting the key and releases                                 releasing the key for a piano or any                                 instrument                                 on off and so it just doesn't on and off                                 in tone.js there there is attack and a                                 separate release                                 so that you could actually hold a note                                 for a long time and                                 and do that but we're just going to do                                 one hit here                                 so what this is actually doing it's not                                 actually playing the note when it calls                                 trigger attack release it's scheduling                                 it for a certain time                                 and                                 next we have a knit part so the init                                 part action                                 is what actually ties the notes together                                 with trigger synth                                 so would it calls uh                                 instantiates a new part in part capital                                 p                                 here is something from tonejs that's the                                 tone js part                                 and you pass it a trigger trigger synth                                 which is a callback                                 and you pass it an array of notes                                 and it goes through those array of notes                                 and it calls trigger sent for each of                                 them scheduling them all at the                                 appropriate time                                 so let's talk about visualization for a                                 minute                                 so if we look at the template for the                                 node                                 component you can see we have                                 this active class and we have a getter                                 this is in the backing class where we                                 compare the active note                                 argument to the id of                                 of the note and active sets of                                 background color it's that orangey color                                 you can see when they light up                                 and so let's see how this actually works                                 so in a part component                                 you can see we set active note to                                 negative one there will never be a note                                 with id of negative one                                 because it starts at zero                                 and in trigger synth we've added a                                 little bit more here                                 so you see this draw.schedule so                                 draw.schedule is something that tone jhs                                 gives us to be able to manipulate the                                 dom                                 at a certain time in sync with the music                                 this is a little bit tricky because the                                 dom takes a little bit of time to update                                 so it actually factors that in to try to                                 get it to line up real nicely                                 so what's happening here is we're                                 actually saying at the time the same                                 time that we've scheduled                                 the note to play                                 we are setting the active note to the id                                 of the note that we've scheduled to play                                 at that time                                 so that will light it up that will set                                 the active note it'll match                                 the appropriate note component                                 set that class to active and it'll light                                 up orange                                 but then we want it to turn off when we                                 release                                 and so the next drawdown schedule right                                 here is setting it back to negative one                                 and what we have to do here is we have                                 to                                 set the time in the future                                 when we know that it's going to be                                 released                                 so we have the duration and duration up                                 there as you can see                                 is                                                                    note                                 in tone js so that's one quarter of a                                 measure                                 and four four so                                 time here has to be in seconds so tone                                 gs provides this time capital t                                 here where you can pass a duration and                                 convert it to seconds and then just add                                 it to the time                                 so it knows when to turn off                                 okay so what if we want to do multiple                                 instruments at the same time                                 so two instruments so over on the left                                 we have that's our piano scale we had                                 before                                 and over on the right we've created                                 something new uh a violin                                 so these would actually be in the same                                 template                                 it actually doesn't matter what order                                 they go in as far as when things will                                 play                                 but they will visually the one that is                                 above the other will                                 be above the other on the page so the                                 violin                                 is another service very similar to the                                 piano service we inject it                                 into the controller and use it here                                 here we're using half notes you can see                                 i specified duration on the note                                 the instead of the default quarter note                                 so we have just two of them in a measure                                 and then a little riff there so let's                                 see what that sounds like                                 and there you go piano and violin                                 playing together                                 okay what about multiple parts                                 so you might have multiple parts for an                                 instrument if you wanted some to repeat                                 or you just wanted to break them up into                                 different phrases so here's where                                 you can use start so start                                 schedules that part to happen that whole                                 part a whole set of notes to happen at a                                 certain time                                 and that's specified in measures so here                                 we have the first part                                 we have flute so another sample                                 instrument                                 service injected the controller                                 and we've started the first one at zero                                 and then we have two measures                                 and then we started the next one at two                                 so that'll be                                 the third and the fourth measure so                                 it'll play the first part and then the                                 second part                                 let's see what that sounds like                                 and second part all right let's talk                                 about loops                                 so a loop is just a repeat                                 i said parts are responsible for loops                                 so to specify a loop you pass the loop                                 argument                                 and you specify a number of how many                                 times to loop but you also need to                                 specify                                 loop end so that's actually how                                 long to go before you loop there's also                                 a loop start if you don't want to loop                                 all the way back to the beginning but                                 here we're just going to loop                                 back to the beginning we've defined two                                 measures                                 and we've said we want to loop after two                                 measures so we'll just repeat the whole                                 thing                                 so let's see what that sounds like                                 [Music]                                 let's see it just played through it                                 twice                                 all right let's create a drum kit                                 so drums are pretty interesting because                                 they're an instrument that's actually                                 composed of multiple sub instruments                                 so what i've done here is i've created a                                 drum service and these are actually all                                 just one thing i've just broken it apart                                 for a display here                                 so give it a name drum kit and then                                 instead of creating an                                 enst i create a kick so the kick drum is                                 the big one down on the floor                                 the bass drum give it a name i give it a                                 default pitch                                 and what default pitch lets me do is                                 define if i don't give it a pitch just                                 use this pitch                                 and it's a drum drums are tuned they                                 do have pitch but here we've just given                                 it a                                 c                                                                        note                                 and for the ants we've created a                                 membrane synth and                                 this this synth comes from tone js and                                 what a synth is                                 as opposed to a sample so while samples                                 are                                 recordings of instruments a synth is                                 actually completely generated by the                                 computer                                 and you give it all these various                                 parameters                                 that could do a whole talk on                                 oscillators and envelopes and how that                                 works and                                 different waveforms and combining them                                 together                                 but basically it's computer-generated                                 music here and then we send that to                                 master                                 that's our output snare                                 snare is actually pretty hard to                                 synthesize                                 well so i'm actually using a sample here                                 again with the default pitch                                 and then the hi-hat and this one's a                                 little more complicated because it uses                                 this pan fall                                 to get some effect but this kind of                                 demonstrates                                 how you can chain things with tone.js                                 together and you can create this pan                                 ball effect                                 send that to master and then you                                 actually connect                                 your hi-hat synth to that so you change                                 chain things together change instruments                                 to effects to a master output                                 and it's a metal synth which is just a                                 different kind of synth                                 so how you use this is                                 invoke instrument pass it drums but in                                 the part                                 you specify the sub instrument that'll                                 actually pull off                                 that sub instrument off of the                                 instrument because again the instrument                                 is passed to the                                 contextual part component and so                                 we do that here and then                                 we have the snare part the snare was a                                 little bit loud                                 so i passed volume to it to turn it down                                 a little bit                                 and then i've specified half notes here                                 to let the snare ring                                 a little while it sounds better and                                 finally down at the bottom we have the                                 hi-hat and the hi-hat was very loud so i                                 turned it down                                 a good bit i'm also passing this thing                                 called humanize                                 and what humanizes in tone.js is it                                 introduces a little bit of                                 random variance instead of hitting right                                 exactly on the beat                                 and that's because humans don't always                                 hit exactly right                                 on the beat and it turns out computer                                 generating music can                                 feel sort of sterile sometimes because                                 it's so precise and so this is                                 changing that up just a little bit now                                 i've scheduled the snare to start it                                 one and the hi-hat to start at two                                 because for this demonstration i just                                 wanted to                                 play one after the other                                 kick drum                                 and hi-hat okay we have a drum kit so                                 let's loop it so drum loops so often in                                 a song you have                                 a riff like a drum riff                                 that pattern that plays over and over                                 again in a loop                                 so the way you do that is you can                                 actually pass the loop                                 argument to the instrument and it'll                                 pass that down to all the parts                                 and then we're going to schedule these                                 to all play simultaneously                                 so the default start is zero so i                                 haven't specified that here                                 but what i've done is i've specified                                 some                                 notes to play at various different times                                 so the kick is going to be on the first                                 beat                                 the snare is going to be on the third                                 beat and the high hats on every beat and                                 this is actually a very standard                                 rock beat let's see what that sounds                                 like                                 very standard beat cool all right                                 let's put it all together so i've                                 actually composed a song                                 with ember which i'm going to                                 demonstrate in a minute                                 so i've created routes and controllers                                 for                                 these different sections the intro the                                 verse and the chorus                                 and i've set it up to actually auto                                 advance among the sections                                 so it'll actually do intro a verse a                                 chorus and then a final verse                                 the routes handle all the timing and                                 advancing                                 so there's some timing                                 about where to get these sections to                                 play in relation to each other it's all                                 handled                                 by the routes and then the advancing                                 which is just                                 transition transition to                                 the controllers are really there just to                                 inject the instruments the services                                 to get them into the templates and so i                                 set this up with a parent route                                 for the drums because i want those                                 drums to loop all the way through the                                 whole saw                                 and not have to redefine them for every                                 section and then we have child routes                                 for each of these sections                                 so let's have a listen                                 first                                 up                                 [Music]                                 there we go there's a song                                 so future plans i want to write more                                 songs this was actually a lot of fun                                 once i got things set up and going i was                                 it was fun to build that too                                 it was really fun to work with i really                                 want to turn this into an add-on                                 and put it on the community i think it                                 would be great for other people to                                 be able to play with this i want to                                 continue to add features                                 there's a lot more we could do and a lot                                 more stuff i could get into the template                                 and make it                                 usable and i want to try collaboratively                                 writing songs using                                 github i think that would be pretty cool                                 it's probably been done before i'm sure                                 but i think this would be a neat any way                                 to do it                                 so i want to thank you all for listening                                 to my talk                                 i'm going to put all of this up at                                 slash emperor's jmcdavis.github.com and                                 if you want to follow me                                 i will tweet out when i release this as                                 an add-on and                                 do more work on it it's jam c davis on                                 twitter without the e                                 and everywhere else discord and github                                 it's james c davis                                 so thank you very much
YouTube URL: https://www.youtube.com/watch?v=tGg_jG_NsU4


