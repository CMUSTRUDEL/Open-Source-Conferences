Title: Virtual EmberConf 2020: Decorators in Depth by Marco Otte-Witte
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	Decorators in Depth by Marco Otte-Witte

Decorators are becoming an essential part of the Ember.js Programming Model with Octane. While APIs like @tracked and @action are easy to use though, many developers are not yet familiar with the concept of decorators as such and don't have a clear mental model of what they are and how they work. This talk dives deep into the ideas and motivations behind decorators, introduces a bit of historical context and similarities to concepts in other languages and gives an overview of how decorators work internally. By the end of this talk, you will have a good understanding of how decorators work, what the
Captions: 
	                              [Music]                               hello everybody I'm I'm recording this                               the Friday before amber conce                               unfortunately of course I I couldn't                               come to Portland as I I did at the past                               like five years or so                               first time first time I'm speaking and                               first time I'm not actually there at the                               same time which is unfortunate but I                                guess this is kind of a special                                situation of the sea so I don't have                                proper recording equipment but I hope                                this is gonna be gonna be good and let's                                get started so welcome to my to my bonus                                contour decorators in debt I'm Marco I'm                                from from Germany specifically Bavaria                                where people sometimes look like this I                                am the founder of simple apps we were a                                a web engineering consultancy with                                digital products for companies around                                the world and we also have teams to be                                like more effective with with amber to                                live a better quality in a shorter time                                maybe and and just sort of to get the                                most out of amber and you might know us                                from our open source work we maintain a                                bunch of like well-known add-ons in the                                amber ecosystem we also sponsor the                                amber project such with people writing                                for the amber times for example we did a                                lot of work on the website with people                                on the learning team and so on and we                                co-organized Emma Fest which is Europe's                                amber conference obviously and my notes                                say yeah I brought because I didn't                                actually bring obviously I I think I                                sent                                                      maybe now in the turd office and like                                maybe we can distribute them some other                                way but here's how the sticker looks for                                this year and the dates for this year                                gonna be October                                      we don't actually say what the host city                                of the conference's as every year sort                                of we have this sticker with a                                background that sort of gives some some                                visual hints on the location and then we                                let people guess it's like our Pullman's                                marketing strategy I think it worked                                pretty well in the last year's and yeah                                see whether I was somebody let's see                                whether somebody can guess this year's                                host ID will of course reveal it soon                                but I guess at the moment it's not even                                clear whether everybody will be able to                                travel anywhere in Europe mid-october                                hopefully yes but we will hold off a bit                                until the situation smooth us a bit more                                so I have some opening story for the                                heart which doesn't really work anymore                                I'm still gonna do because I I couldn't                                really come up with anything better so                                this is actually like I said beginning                                it's the first time I speak at Emma conf                                right and the joke that I want to make                                is that it's the first time that I'm                                speaking and I almost didn't make the                                PATA no of course I actually didn't make                                Department but that's to go through the                                story because besides corona there's                                actually another reason why I would                                almost not have made it to Portland                                if Corona hadn't happened at all and                                that has to do with this thing the                                electronic system for Travel                                Authorization                                so esta which is what all of the                                Naughton the the non Americans or                                Europeans or so I don't really know                                to who at a place but everybody from                                Europe has to sort of go through this                                system sort of to read just with with                                like passport number and so on before                                they can go to the yes right and then                                that gets proved and then you can go                                into the country without a visa and in                                order to go through this you have to                                answer all kinds of questions one                                question is have you ever violated any                                law related to processing using or                                distributing illegal drugs which I don't                                know this might be the one where like                                many people would actually lie I guess                                there's also other questions I do you                                see to engage in or have you ever                                engaged in terrorist activities                                espionage sabotage or genocide which I                                guess or hope most people can actually                                honestly didn't and so negatively but                                 there's also a new question since I                                 think summer last year and that is have                                 you traveled to or being present in Iran                                 Iraq Libya or North Korea Somalia Sudan                                 and so on after                                                       and the problem is his picture of me in                                 North Korea and                                                         statue of I think emerald stone and                                 here's a bunch of flowers that I just                                 had had dropped in front of that statue                                 and I should say this is not actually                                 sort of me expressing my support for the                                 regime it's just something that you're                                 sort of expected to do when you're there                                 so I answered that new question honestly                                 and not surprisingly my travel to the US                                 was not authorized so now I need to get                                 a visa which is actually a good thing                                 because now I have to I have a                                         visa and I don't have to go through esta                                 anymore and somebody told me I would                                 have been able to sort of immigration                                 take like a first Elena so I might find                                 that out next year and getting the visa                                 was really is                                 the person at the Embassy found a pretty                                 convincing that I went to North Korea                                 for vacation but I having to visit                                 doesn't help me no of course right and                                 of course it's not really up to me sort                                 of to judge US policy but I'm not sure                                 it's fair that I need a visa now because                                 they only be because I have been to                                 North Korea once because here's me and                                 my guide and in North Korea that's mr.                                 Kim obviously in North Korea you cannot                                 do anything without a guy and and the                                 guy does not actually guide it's more                                 like a a person that's watching you                                 right and they are being watched                                 themselves right but the thing is I                                 don't seem to be the only one                                 maintaining relatively close                                 relationships with North Koreans right                                 so it seems a bit like there's different                                 rules for different people here and                                 although I will admit that I did not                                 fall in love with mr. Kim over beautiful                                 letters but just over beers as people do                                 [Music]                                 yeah it's like maybe a bit of double                                 standards here so anyway I thought this                                 might be a good opening story for the                                 talk now as I said so if it doesn't work                                 anymore really because now I'm sitting                                 here Munich bird having added that story                                 to the talk I thought like maybe there's                                 a ways of connecting the Detroits main                                 topic which is obviously not North Korea                                 but JavaScript decorators like                                 connecting the two topics a bit right                                 and having sort of a JavaScript                                 decoration slash North Korea talk and                                 then I was thinking about how I could do                                 that and the first thought I had is just                                 this statement which sounds pretty nice                                 when it decorators are the North Korea                                 of JavaScript but what does that even                                 mean                                 and it's basically it's basically just a                                 a budget statement that sounds very good                                 it means nothing so unfortunately there                                 will be no more North Korea content in                                 this                                 just because I couldn't find a proper                                 way to to get it in but back to the                                 topic and I want to start with some                                 theories so the theory behind something                                 like JavaScript decorators is attribute                                 oriented programming and the idea behind                                 attribute oriented programming is that                                 it is a program level marketing                                 technique that allows you to mark                                 elements in your program to indicate                                 that they maintain specific application                                 specific or domain specific semantics                                 without leaking all of the details of                                 those semantics into your core logic                                 subset which then increases abstraction                                 and reduces complexity all right and                                 many languages have had similar content                                 similar concepts for quite some time for                                 example in in Java you have attributes                                 like deprecated which allows you to mark                                 a specific thing in in your code like a                                 class here as deprecated of course you                                 could also do more sophisticated stuff                                 so here's an example from hibernate                                 which is a very popular opera object                                 relational mapper in in Java and here                                 you see we use the ID and we use the                                 entity attribute and the table attribute                                 ID attribute and so on to sort of define                                 how the mapping from instances of the                                 employee class to a particular data                                 based table should work or other way                                 around well of course but the thing here                                 is we are not leaking any of the details                                 like any of the sort of internal                                 mechanisms of this mapping into the                                 application code right we keep it                                 relatively clean because we just sort of                                 attribute the elements with respects                                 with their respective at                                 dudes without sort of revealing how                                 those work internally this concept                                 doesn't only exist in in Java                                 don't they also a similar concept in job                                 net so here for example we're using JSON                                 property attributes to to define how                                 instances of a particular class and in                                 this case the API error class are                                 serialized to JSON and again without                                 leaking any of the details of the                                 serialization process sort of into our                                 application code when we compare this to                                 what we have in octane then it's                                 obviously similar right so here we use                                 the track decorator to mark the count                                 property aspect so the template we ran                                 out when it changes and we use the                                 action decorator to make the increment                                 decrement methods work as agents so                                 again without leaking any of the details                                 of these decorators or the concepts                                 behind them into our application code                                 right we just say the count property                                 should be tracked we don't care about                                 how how that works internally or what                                 like what                                 tracking even means sort of that's not a                                 concern of our application but that's a                                 framer concern so there's no point sort                                 of leaking leaking any of the details of                                 the concept of tracking or the concept                                 of making a method available as an                                 active work as an action into our                                 application code so we want to hide all                                 of them and we do hide all of it behind                                 the decorator so this is how Java Script                                 decorators fit in to sort of the general                                 concept of attribute oriented                                 programming so you add attributes                                 the code to express additional semantics                                 while hiding all of the details but                                 later we will see there's actually a                                 fundamental difference between                                 JavaScript decorators and attributes in                                 other languages we will look into that                                 more detail later sort of on the surface                                 on the surface it's sort of the same                                 thing and it's it's meant to serve the                                 same purpose the the inside sort of a                                 bit different that for now we can ignore                                 that so then you might ask our                                 decorators ready for use and the answer                                 it is it's complicated unfortunately and                                 again I want to share some background                                 here so as most of you know or everybody                                 presumably tc                                                          ACMA script standard and that's                                 JavaScript it's an international group                                 of people with various backgrounds sort                                 of that represent different interest                                 groups like larger companies browser                                 makers and so on but also sort of the                                 viewpoint of the average JavaScript                                 developer sort of which I think was one                                 of the main motivations for eudicots                                 like obviously as you know one of the                                 sort of inventors of ember to join tc                                   because I I think that his motivation                                 sort of was to make sure that the the                                 the average JavaScript developers                                 viewpoint sort of was recognized in tc                                   as well not only the interests of larger                                 companies or browser makers because                                 sometimes those could be those could be                                 pretty different of course so that group                                 of international people discusses ideas                                 for additions and changes to the spec or                                 I guess in reality it's really additions                                 only because you cannot change anything                                 at JavaScript and it's it's basically an                                 additive aspect because changing                                 anything would break existing code and                                 websites so each new thing that they                                 discuss goes through five stages in                                 stage                                                                  idea for a new language feature so                                 anybody could have that idea and then                                 when you find the tc                                                   it to the group then it it would get                                 discussed there right at that point the                                 idea would usually be pretty vague                                 there's no indication of whether it'll                                 go forward at all or maybe like it's                                 being discussed for five minutes and                                 then immediately rejected for some                                 reason over ever right the next stage                                 then is stage one where you have a                                 written proposal with proper description                                 examples and so on discussions of                                 semantics and there's a tc                                               champions the ideas or the proposal so                                 stage one means that tc                                                 X to examine discuss and contribute to                                 the proposal but there are still major                                 changes to be expected at that point                                 it's still relatively awake and there's                                 no indication of whether it'll make it                                 into the spec eventually or if it makes                                 it whether that's gonna be a very                                 different form maybe but if it's not                                 rejected then the next stage with stage                                 two and at that stage the proposal must                                 have a formal syntax definition                                 description should complete there should                                 be or the need to be I think to                                 experimental implementations one will                                 usually be barrel unless the future                                 cannot be transpired to current                                 JavaScript sort of and I think that was                                 the case with proxies because there's no                                 way sort of to make the underlying                                 mechanism of proxies work with with with                                 current JavaScript obviously                                 experimented implementations can of                                 course be in browsers as well behind                                 future flex or whatever at stage two a                                 proposal can still be rejected                                 it's it's it's relatively far in the                                 process but they'll still no no                                 guaranteed it'll make it the next stage                                 then is stage three at which point the                                 spec text needs to be complete then it                                 need to be full they need to be two                                 fully compliant of implementations again                                 one of them would usually be better and                                 at this point the proposal can be                                 expected to be added to the spec and                                 changes should only be made when                                 critical issues occur and that's why                                 stage three is sort of the important                                 stage right because at stage three you                                 can expect the thing to be added to the                                 spec eventually and only slightly                                 modified form so stage three proposals                                 are pretty okay to use in general right                                 why everything everything before or                                 below stage three is not really okay to                                 be used because there's no guarantee it                                 will actually make it to the spec and                                 there's no guarantee that if it makes it                                 to the spec it will be in the form that                                 take in its current form sort of right                                 so yes Stage three is the one that you                                 want to keep in mind because that's so                                 when you're building on relatively solid                                 ground sort of if you're using something                                 in stage three the next stage is then                                 stage four which is basically just like                                 a a stage that something goes into while                                 it's sort of waiting to the Edit but                                 it's already decided that it weighed the                                 other right so of course now the                                 question is where are we with JavaScript                                 decorators and first problem is there's                                 not one but I see two proposals second                                 problem is one is in stage one and the                                 other is stage two and obviously that                                 means that none of them is final or                                 complete right                                 the states one proposal is basically                                 deprecated sort of that's been not going                                 to be continued and the stage one the                                 stage two proposal is in stage two which                                 means it's not done right it might still                                 change relatively significantly so let's                                 look at some more details of those two                                 proposals first of all the stage one                                 proposal which basically defines                                 decorators as simple functions right you                                 would just write function that receives                                 the element that you're decorating and                                 then you can modify the element which is                                 very simple right but it has major                                 implications with respect to performance                                 because you're actually modifying the                                 class or the method or the property or                                 whatever so you're changing the shape of                                 things sort of which is always very bad                                 for for browser engines to optimize                                 right so the major performance implicit                                 implications they also made a tooling                                 implication because you cannot actually                                 statically and you cannot actually                                 statically analyze those decorators                                 right if a class is decorated with a                                 stage one decorator you cannot really                                 know what that decorator does so you                                 might not know for sure which which                                 methods that class has right or whether                                 the methods are actually as you see them                                 in the class body or whether the                                 decorator does modify them and then like                                 like the extra methods on instances or                                 on the prototype will actually be                                 different from what you're seeing right                                 so that's of course a major problem                                 it's where in particular for tooling                                 right so the stage two proposal solves                                 the performance and tooling problems                                 by basically defining decorators as                                 first-class language elements and sort                                 of limiting them much more it's not                                 ready yet there are major changes to be                                 expected so it's not even really clear                                 how exactly that's going to look right                                 so coming back to my previous slide here                                 in reality decorators are not in North                                 Korea of JavaScript but sort of the anti                                 North Korea of JavaScript because                                 nothing is regulated and everybody can                                 do what they want                                 basically because there is no official                                 regulation or specification right so the                                 question is what do we do the whole                                 thing is deprecated and the new thing is                                 not ready but in ember we need something                                 that works well with Native classes                                 because the old macro methods that we've                                 been using for computer properties for                                 example and so on they don't really work                                 well with Native classes you have a                                 bunch of options using them with native                                 classes so it's not impossible to use                                 them I think there might be some edge                                 case whether actually behave differently                                 but it's it's not impossible to use them                                 it's just not nice at all so for example                                 if you had a person class with a first                                 name and last name and by the way all                                 those examples are I think taken from                                 the IFC that I think Melanie Sumner Road                                 are not on absentia                                 the examples have our name of obviously                                 so let's just assume she wrote it so if                                 you have a person class here but the                                 first name and last name and you want to                                 define a like the the typical full name                                 computer property right like full name                                 must be a sort of the hello world of                                 computer properties I guess then with a                                 native class you could define the class                                 first and then on the prototype define                                 the computer property right which is                                 obviously not what you actually want to                                 do                                 in your application the alternative is                                 you sort of mix a new native classes and                                 the OMB object model and you define the                                 the class as an extension of sort of an                                 anonymous class here that where you use                                 the old way sort of extending from M                                 object this works but it was obviously                                 also not really nice right the best                                 solution is obviously with decorators                                 right where you just define define a                                 proper native class with with two fields                                 and one getter and you just decorate                                 together with the computed decorator                                 yeah right so the question is how do we                                 get that when the decorators proposal is                                 not ready really                                 and the answer is we just stick with                                 this stage one proposal for now this is                                 what the tc                                                             because although the specification is                                 not ready decorators are already widely                                 used in the JavaScript community and                                 ember is actually relatively late to the                                 party here so products like angular also                                 have used decorators for years now so                                 there's a lot of pressure and also                                 there's commitment I think from tc                                      make the final decorator proposal so                                 that it will allow to do the to make the                                 final decorator proposal so that it will                                 allow for doing the same things with                                 decorators that you can also do with                                 stage one decorators so that means you                                 will very likely not have to change your                                 usages of decorators right the                                 decorators will only have to change                                 internally to solve the                                 performance and tooling problems but                                 that also means that you do not want to                                 write your own decorators yet because                                 why sort of my usages of decorators will                                 not have to change the internals of                                 decorators will change a lot potentially                                 so you when writing decorators you are                                 building on pretty unstable ground right                                 if you only do if you only use the                                 decorators that ember provides then                                 obviously ember sort of shields you from                                 all of the internal changes that might                                 all will probably have to be made at                                 some point the computed property at the                                 computer decorate and the track                                 decorator will continue to work the same                                 way that would just be implemented in a                                 very different way internally one thing                                 though is that in app code you would                                 usually there's usually not such good                                 use cases for decorators anyway because                                 as we saw in the beginning the purpose                                 of a decorator is sort of making                                 something available while hiding all of                                 the details of that and which is usually                                 not something that you want to do in an                                 application and because in an                                 application you don't want to sort of                                 hide parts of the code from from from                                 from the engineer because all of your                                 application code as a whole sort of is                                 being maintained by your project team                                 and so on so you like you don't want to                                 introduce black boxes right it is of                                 course something has a lot of value for                                 frameworks like ember or maybe even for                                 add-ons and understanding what                                 decorators do how they work what they                                 can do what they can't do sort of gives                                 you a better mental model of your                                 application of course which is also the                                 reason why I give this talk so let's                                 look at                                 stays one proposal Amada t we were                                 basically ignore the stage-two proposal                                 for now because it's unclear how it's                                 it's going to work eventually so we will                                 focus on the stage one proposal and and                                 like I said these days one proposal                                 defines decorations as simple functions                                 that modify the element that they are                                 decorating and that is also coming back                                 to a previous point that is that main                                 difference between JavaScript decorators                                 and attributes and Java or.net because Y                                 attributes and Java and.net only add                                 metadata sort of to the elements that                                 they're attributing JavaScript                                 decorators actually modify these                                 elements right so with the Java Script                                 decorator you could actually modify a                                 class for example where Y an attribute                                 in.net will only add metadata to that                                 class so that at runtime you could                                 reflect over that metadata and sort of                                 do certain things right so there might                                 of course be different in the stage two                                 proposal but for now that's really the                                 main difference that a JavaScript                                 decorator will actually modify this                                 thing that it is decorating and doing                                 that though is relatively simple there's                                 basically two cases that's the case                                 where you are decorating a class and in                                 that case the decorator is a simple                                 function that receives the class                                 constructor it's argument you could also                                 of course decorate a class member in                                 which case the arguments for that are                                 the prototype the name of the member and                                 property descriptor for for the property                                 you are you are decorating and and I                                 want to show you some concrete examples                                 to make that bit clearer I have created                                 a little example so you can find all of                                 the code on on guitar                                 and let's look at the first one so here                                 we have a simple ember oh right we just                                 load some data from an API endpoint we                                 don't care about the details of course                                 and now let's assume we want to                                 benchmark that right we want to like                                 have something in place that allows us                                 to benchmark the execution time and                                 maybe we report it somewhere or whatever                                 of course we don't want to sort of have                                 all of the benchmarking code as such in                                 the Rob right we want to hide that                                 because it's not relevant to the                                 application really all right let's say                                 we want to like make a benchmarking                                 add-on or whatever so a good way to do                                 that of course is to use decorator as                                 we're doing here and which is importing                                 that as any other thing sort of in                                 JavaScript and then we're decorating the                                 model method and as I said before the                                 decorate using the stage one proposal to                                 decorate is just a function that takes                                 the the prototype the property name and                                 the property descriptor for the property                                 we're decorating as arguments and what                                 we're doing here is we're simply                                 remembering the original value of the                                 property descriptor which is the                                 original implementation of that method                                 and then we replace it with a wrapper                                 right and here what we're doing is we                                 stop the time when we start execution                                 then we called the original method we                                 stop the time when that ends and we lock                                 that to the console in reality you might                                 be logging into some sort of API or                                 whatever and then we return the result                                 that we got from the original method all                                 right so we do not we do not change the                                 original method we also don't change the                                 signature of the method because the                                 method that we are replacing the                                 original one has the same signature                                 right we're just adding our stuff sort                                 of before and after                                 original method and that also means of                                 course that the original modern method                                 doesn't even have to know that it is                                 being benchmark there is like grep with                                 something else which is the point of                                 decorate of course another example is                                 this one here so let's assume besides                                 benchmarking the modern method we also                                 want to require users to be logged in to                                 have access to that role at all and by                                 the way this is a sneak preview                                 incentive of what and a version of Emma                                 simple earth which we had simple apps                                 maintained without mix-ins can't look                                 like right you can use mix-ins with                                 native classes like relatively easily in                                 but it's not really it's not really                                 great right so in the current version of                                 Emma's employee but just mix and the                                 authenticated route mix sent into this                                 route that you're defining here but with                                 a decorator it's even a bit nicer and                                 sort of has a has more modern look as                                 well so what we do here is we just                                 import the authenticated decorator and                                 apply it to the rod class right and                                 again the decorator is a simple function                                 that takes the class constructor as an                                 argument and we do a similar thing here                                 too to what we did before we we remember                                 sort of the original implementation of                                 the classes before model method and then                                 we replace it with our own method and                                 what we do in that method is we get a                                 session or the session service we check                                 whether the user is logged in if it's                                 not the case we just transition them                                 somewhere else in this case you to index                                 would probably make more sense to                                 transition them to the login round and                                 if they are logged in and there's an                                 original implementation of before more                                 we just call that alright so again we                                 are adding                                 so relatively complex logic with a very                                 simple mechanism and we are hiding all                                 of the details we don't change the                                 origin before method so I think this is                                 a very nice example for how decorators                                 are actually a pretty good way of making                                 making functionality in add-ons                                 available for applications and obviously                                 those examples are sort of made up they                                 don't really have any sort of real value                                 it's and it's just for for illustration                                 purposes here so I also want to look at                                 two examples from M by itself and if we                                 look at this this piece of code here                                 from previously mmm-hmm                                 again with component that has a tract                                 property called count and then two                                 methods that we decorate with the action                                 decorator so we can actually call them                                 as actions from the template so how's                                 this work and first of all let's look at                                 the direct decorator and this is not                                 really the the code from the climber                                 code base it's sort of the essence of                                 the code right but here you see that we                                 have a function that takes the the                                 prototype the property name and the                                 property descriptor as arguments right                                 because it's a a stage one decorator                                 applied to a class member and what it                                 does is a very similar thing to what we                                 saw before it replaces the original                                 property with in this case here a a                                 getter and a setter we can ignore the                                 getter that's not so interesting                                 the thing of course about computer about                                 track properties is that whenever a                                 correct property is modified then the                                 template rear Enders right and you see                                 how that works here in the setter where                                 whenever the the property is said the                                 property to change call back will be                                 called which is sort of an internal call                                 back in glimmer which which sort of                                 triggers re-render right so that is                                 basically how the tracked decorator in                                 inside of TMR works and it just replaces                                 your original property with sort of a                                 wrap-up property that will make sure                                 that whenever the property sets and                                 internal call backs sort of in glimmers                                 called                                 which will then trigger a rerun up and                                 that's next let's look at action and as                                 you all know the main thing about                                 actions is that they are closures that                                 are already sort of pre bound to the                                 correct context right so you can just                                 call them as a function and they will be                                 running with correct this binding so                                 right so basically besides a bunch of                                 other things like you see the dotted                                 lines here basically are like relatively                                 big parts of extra code that I left out                                 here but sort of one of the main things                                 where the action decorator does is it                                 just it binds the method you're                                 decorating and assigns it to a a hash of                                 actions right and that allows you then                                 to use like like the method as an action                                 from the template so this is decorators                                 in ember they're a great way for                                 abstracting logic that is known a sensor                                 to your application but that is maybe                                 only a sensor for the framework or                                 only essential for some other system                                 sort of you're using but there's no                                 stable spec which means you don't want                                 to bright you unless you have lots of                                 time and lots of willingness sort of to                                 to potentially rewrite lots of the                                 internals of the decorators your your                                 writing and that's all that I thanks                                 unfortunately I I can take questions                                 unfortunately I can also not talk to                                 people sort of after the talk or in                                 breaks or whatever but we repeat all of                                 that I guess next the important or and                                 ember fest and Europe this year thank                                 you bye bye
YouTube URL: https://www.youtube.com/watch?v=E_grLMx7q6Q


