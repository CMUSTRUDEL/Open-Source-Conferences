Title: Virtual EmberConf 2020: Opening Keynote by Yehuda Katz, Jen Weber, and Godfrey Chan
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	Opening Keynote by Yehuda Katz, Jen Weber, and Godfrey Chan

Join us for a State of the Ember Union by Ember Creator Yehuda Katz and Core Team Members Jen Weber and Godfrey Chan.
Captions: 
	                              [Music]                               hello and welcome to the first ever                               virtual ember conf in very strange                               circumstances I am here talking to a big                               empty room so thank you for everyone for                               bearing with us I also want to thank the                               speakers for having done all the work                               to make this possible in the first place                               on very short notice and thank the                                community for coming out and making this                                event the thing at all                                also Thank You leia for scrambling last                                minute and doing an amazing job with the                                conference as always my son Jonas was                                born on January                                                     later Leia the person who makes ember                                conf so amazing every year my life                                partner and Jonas his mother and also                                the person who made virtual eMERCOM                                possible carried a few month old Jonas                                onto this stage to give her                                announcements                                I remember feeling very sure that this                                was the right thing to do and at the                                same time I was nervously watching the                                audience just a few months earlier we                                were living a life without children                                totally unable to see what was coming                                around the bend it was a snowy winter                                Donald Trump had just been elected but                                Barack Obama was still president in a                                lot of ways we were waiting for                                everything to change but not sure what                                would come next that period stretched on                                and on and on Jonas was over a week late                                and we were living in a quiet period                                just ready for everything to change in                                ways we knew we couldn't predict one of                                the first things I clearly remember from                                the first week after Jonas was born was                                filling out a commemorative form to                                remember what was happening on the day                                he was born there was a section for                                president I remember filling out Barack                                Obama and thinking a lot about it I was                                in general not very good at the first                                child posed photo thing there's not a                                lot of smile here but I was trying                                really hard another engineer at Tilda                                was pregnant at the same time and we                                knew that as business owners we could do                                better than the status quo after reading                                about the ways in which modern society                                leaves parents and especially women                                totally alone to care there to take care                                of their newborn children we decided to                                follow the lis of the babies in the                                workplace Institute and establish a                                policy allowing parents to bring newborn                                infants to work we might be running a                                technology company but we had a strong                                conviction that software went beyond the                                code that we wrote or how we organized                                our computers to gain a bit of extra                                productivity software fundamentally is a                                human activity an activity that we do                                together                                as human beings and we do our best when                                we support each other a few years later                                we're now on our second group of infants                                we've learned a lot but most of all what                                we've learned is that there's more to                                software than the number of lines of                                code you write or the number of minutes                                you're sitting in your chair I knew that                                the ember community valued building                                together and that we all valued an                                environment that was focused on                                sustainability personal growth and                                sharing as I looked into the audience                                that day I was extremely relieved to see                                happy faces people in our community                                wanted to see that there was more to                                what we did than cool technology and                                fights over which paradigm is better                                what I did not fully expect was the                                outpouring of support Leia got from                                people who finally saw themselves in our                                community's leadership who saw that                                mother and community leader not only                                didn't conflict but that the two could                                go hand-in-hand because there's                                something inside of us that wants more                                from open-source communities and                                technology we want communities that                                welcome newcomers communities that                                support each other and communities where                                the members help each other to be our                                best selves I will admit by the way that                                 I wrote that whole section before the                                 current situation and it feels all the                                 more relevant right now at the same time                                 as all that was happening the ember                                 community was recovering from a rocky                                 transition to the glimmer rendering                                 engine in ember                                                       number of deprecations and those                                 deprecations were removed just one minor                                 release later it was a technically                                     while that sequence technically followed                                 semantic versioning if fragmented the                                 ecosystem and created a lot of chaos                                 I'll never forget a conversation I had                                 with a community member who had bet                                 everything on ember                                                     to his company on the grounds that it                                 was a stable platform to build on then                                 we created a flurry of deprecations and                                 removals and he just felt embarrassed in                                 front of his peers and frankly betrayed                                 what we learned from that story is that                                 semantic versioning doesn't tell the                                 whole story of ecosystem stability we                                 could see that we violated embers basic                                 premise which is everything we do we do                                 it together even though we followed the                                 rules of semantic versioning for the                                 next few years we invested in                                 strengthening what we could do together                                 as a community                                 the first RFC that we use so the RFC                                 process is what we use to make decisions                                 as a community and the first one that we                                 emerged was in                                          a long time we use RFC's only narrowly                                 for features like block params or tweaks                                 to computer properties syntax or engines                                 RFC's gave us a way to make decisions as                                 a community together and during the to                                 direct series after that                                                refined the RFC process and expanded its                                 footprint to virtually every decision we                                 could make as a framework by the time                                 member                                                                  the RFC process so it could be used for                                 every decision we needed to make we also                                 came to understand how decisions guided                                 by our FCS are better decisions                                 first and foremost our FCS are tools to                                 help us make decisions the final                                 decision is always in the hands of the                                 core team that is responsible for the                                 area covered by the RFC the primary rule                                 is that decisions of of a core team must                                 be made entirely on the basis of                                 comments made or summarized on the RFC                                 thread once the conversation reaches a                                 steady state and participants aren't                                 bringing any new information to the                                 table the relevant core team is prepared                                 to make a decision they declare a final                                 comment period which is a last call for                                 comments before they make a decision                                 typically if new information comes up                                 during the final comment period the core                                 team will continue the discussion                                 instead of proceeding in short the                                 ultimate and primary purpose of the RFC                                 process is to aid members of the core                                 teams in making decisions with the                                 benefit of as many perspectives as                                 possible second RFC's help core teams                                 collect constraints from the community                                 by building up a collection of                                 constraints the core teams can arrive at                                 decisions that better satisfy a broader                                 cross-section of the community third                                 RFC's help those involved in an RFC                                 build relationships those relationships                                 often last into the implementation phase                                 of the process and often even longer                                 in fact it's some of my favorite stories                                 from ember come from people who found                                 each other through our of C threads in                                 some cases small communities spring up                                 around RFC's which sometimes turn into                                 strike teams that work on implementation                                 the ad hoc nature of these relationships                                 is a strength of this structure                                 RFC s provide just enough structure to                                 get a conversation going but don't have                                 much to say about the work style of the                                 participants this really comes in handy                                 as we press our of season to service to                                 do more as I will talk about soon fourth                                 RFC's help drive a design discussion to                                 completion and then provides a structure                                 for implementation by the time an RFC is                                 merged the implementation is either                                 already complete or a small community                                 have                                 sprung up around it to drive it to                                 completion just as the RFC process is a                                 tool to help Cortinas make decisions is                                 a tool to drive discussions to                                 completion in RFC process that allows                                 never-ending discussion is failing at                                 this goal fifth RFC's record the                                 rationale and constraints for decisions                                 that the core team makes later when                                 people wonder why decision was made a                                 complete record of the final rationale                                 for this decision as well as a record of                                 the discussion is available for                                 inspection this really comes in handy                                 when the original rationale for a                                 decision is no longer applicable for                                 example a design decision based on a                                 quirk of I ate I ate is no longer around                                 that decision is free to be revisited                                 finally and perhaps the most important                                 RFC's give people in the community a                                 chance to feel hurt and I really do mean                                 perhaps the most important we learned                                 this lesson after                                                     members don't feel heard it usually                                 means we're not really listening this                                 undermines the legitimacy of the process                                 and it also undermines everything else                                 we hope to achieve with RFC's a core                                 team may be able to technically make                                 decisions when people don't feel heard                                 but it is unlikely to collect all the                                 constraints community can you community                                 members who don't feel heard don't build                                 relationships around in RFC community                                 members who don't feel heard continue to                                 fight during the implementation phase                                 and are unlikely to provide their                                 expertise and assistance to get the                                 feature over the finish line                                 this imperils the project's completion                                 and community members who don't feel                                 heard won't consider the recorded                                 history legitimate reducing the force of                                 the project's history so fundamentally a                                 successful RFC will make community                                 members feel heard even if they don't                                 ultimately agree with the final decision                                 of the core team so we realized that                                 RFC's were a general-purpose                                 decision-making tool that could help us                                 make decisions build communities around                                 those decisions and drive them to                                 completion and we started to ask                                 ourselves given that definition or rfcs                                 why shouldn't we use RFC's for more                                 things in                                                              slack but we were quickly outgrowing it                                 slacks free plan which we were using                                 capped archives at                                                     we had to manually manage users the                                 framework team thought that we should                                 move to discord but we knew it would                                 only work if we really gave the whole                                 community a chance to flesh out the plan                                 with us and really buy into it when we                                 thought about it we realized that is                                 exactly a job for our C's we had                                 iterated a lot on the RFC template over                                 the years so that it more closely                                 matched the goals of fleshing out and                                 mobilizing around a proposed                                 and it worked really well we even had a                                 how do you teach this section for this                                 RFC because it was the first time we use                                 it for something like this we were                                 paying a lot of attention to the need to                                 ultimately wind down the conversation                                 and make a decision there were                                     comments on the thread before we finally                                 wrapped up the conversation and the                                 conversation helped refine the RFC and                                 help refine the policy around which                                 rooms would be limited to users with                                 certain roles for example precisely                                 because of the need to make a decision                                 that we could all support it was                                 imperative that participants in the                                 conversation felt heard I was so proud                                 of the way our community handled this                                 discussion the final comment                                 that approved this RFC was a comment by                                 Tom and I think this comment by Tom                                 really shows what it looks like when a                                 spirited conversation has slowed down                                 and is ready to start driving towards a                                 conclusion so for example tom says after                                 several long discussions based on the                                 concerns raised above we still think                                 discord is the right next step and                                 intent emerges RC we do this with the                                 awareness that this is not the preferred                                 outcome for many people this was before                                 a final comment period which would have                                 made more sense for this statement and I                                 really like this sentiment sentiment                                 from Tom amber is its community not its                                 codebase preserving the health of this                                 community is my number one priority                                 sincere thank you to everyone who                                 commented on this RFC for or against                                 decisions like this are not easy but I                                 believe this is the right thing to do                                 for the long-term health of ember and                                 then the real test this was an                                 incredibly hard stress test of the RFC                                 process it lasted about six months from                                 the time it was open until the time it                                 was merged and I got a hundred and                                 sixty-four comments ultimately we                                 believe that by doing the work to                                 respect each other and sincerely hear                                 each other out we are creating a strong                                 healthy community that can go farther                                 together and this this comment says this                                 is not the decision I personally favor                                 but I appreciate that someone has to                                 make a decision that is that is the best                                 case scenario for everybody felt heard                                 even though we don't all agree now if                                 you think that mervich moving to this                                 Court is a tricky RFC this next one is                                 even trickier embers website is the home                                 base for many of our developers and it                                 hasn't changed in years and we kept                                 hearing over and over again that it's                                 time for us to update the website but as                                 much as everyone felt strongly that it                                 was time for a big update members of the                                 community had very strong opinions about                                 how it should change and having done a                                 lot of design work in my day myself                                 there was no way in hell I wanted to                                 subject                                 designer to the kind of back and forth                                 asynchronous discussion that the RFC                                 process uses to drive decisions there's                                 something wrong with that process it's                                 just not really the process that a                                 designer is used to going through so                                 what we needed to do is create a small                                 strike team of community members who                                 would work directly with the designer                                 and represent the designers perspective                                 to the community and vice-versa                                 it was pretty tricky to navigate but it                                 was an important test of our capacity to                                 make decisions as a community without a                                 corporation's management hierarchy                                 calling the shots and without the need                                 for a benevolent dictator for life I                                 don't want to do that the RFC contained                                 designs and illustrations so it was a                                 pretty different kind of RFC as the RFC                                 progressed the designs were tweaked and                                 refined to try to get as much community                                 perspective into the first draft as                                 possible we analyzed our annual                                 Community Survey and identified the                                 values that those who responded to the                                 survey described this is one piece of                                 that analysis but they're attached to                                 the RFC was a PDF with a very detailed                                 analysis of what kind of values came                                 through in the survey and people should                                 check it out now as soon as we released                                 the RFC the RFC will reveal the glaring                                 oversight in our effort to streamline                                 the visual design we had taken away                                 something that ember developers felt was                                 a core part of their identity looks                                 great the only thing I'm missing is not                                 seeing a Tom stirrer anywhere on that                                 page wink this turned out to be a                                 critical discussion Leia was very                                 careful not to overwhelm the designer                                 and soon enough                                 the designer popped in to give us a                                 status update and when all was said and                                 done we found a way to keep around                                 embers iconic illustrations while still                                 refreshing the visual style of the                                 website ultimately because of the                                 magnitude of this project this RFC was                                 co-owned by the framework or team The                                 Learning Team and the steering committee                                 it was approved by all three groups and                                 its implementation was managed by the                                 Learning Team if you go to ember.js comm                                 today you can see the fruits of this                                 labor just like the discord RFC because                                 we were doing something like this for                                 the first time we were experimenting                                 with using the RFC process to work                                 together as a community to do something                                 really outside the realm of ember api's                                 we paid close attention to the need to                                 make final decisions especially because                                 we were working with a designer who was                                 not directly involved with the RFC                                 process itself we were also very focused                                 on making sure that the plan                                 be implemented by the Learning Team and                                 a lot of the thread is about that and                                 ultimately finished and just like with                                 the discord RFC we knew that making sure                                 that everyone felt heard was critical to                                 marshaling the kind of effort that we                                 would need to implement the website at                                 the end it is also worth noting that in                                 addition to the number of people who                                 raised concerns about losing our iconic                                 illustration style the RFC process also                                 on earth another constraint                                 accessibility the learning team was                                 already waist-deep in an effort to                                 improve the overall accessibility of the                                 website and this new homepage needed to                                 continue to build on that effort now the                                 reason that most people wouldn't even                                 consider updating the website through                                 the RFC process is fear of the dreaded                                 designed by committee I remember my very                                 first web development job being told to                                 put a counter at the bottom of the page                                 I said what's the point of that very few                                 people actually go to this website                                 wouldn't that be very embarrassing to                                 which I was told don't be silly did you                                 think we wanted you to put the real                                 count of views there that's what design                                 by committee looks like and it's a                                 disaster in this case we weren't using                                 the design process to iterate granularly                                 with the designer we would never ever                                 use the RC prostitute thought process to                                 do something that looks like designed by                                 committee instead we were using the RFC                                 process to help the leadership of the                                 project make decisions that were                                 well-informed recorded implementable and                                 which made members of the community feel                                 heard we've also invested in giving                                 people a path to join the core teams                                 provided they are willing and able to do                                 the work this has always been an                                 extremely important part of Amber's                                 community focus our goal and our                                 yardstick is this our core team should                                 represent communities companies big and                                 small big medium and small countries all                                 over the world and people with many                                 different perspectives and identities                                 the more diverse our leadership teams                                 are the more likely their decisions will                                 reflect will reflect the wider community                                 and the more likely it is that the wider                                 community will reflect those decisions                                 will respect those decisions and the                                 core teams have a place for people doing                                 all kinds of different work designers                                 event planners project managers and                                 illustrators are all part of mbers                                 community leadership team with the                                 completion of the discord and website                                 RFC's our community process had proven                                 itself it had become a general purpose                                 tool for helping us organize discussion                                 drive towards decisions and mobilize                                 implementation we didn't need a single                                 corporate                                 to make decisions for us through its                                 management hierarchy and we didn't need                                 to vest all decision-making authority                                 and a single person to move faster no                                 matter how benevolent that person might                                 be we had learned to move together these                                 RFC's also proved that we can do the                                 work together and still make progress it                                 reminds me of the adage go slow to go                                 fast I found that if you try to blow                                 past community dissent and make command                                 decisions you're taking on community                                 that that will crop up randomly later on                                 because at the end of the day Amber's                                 core belief is that we're all in this                                 together through ups and downs through                                 thick and thin through coronavirus or                                 whatever we're all willing to work as                                 hard for each other as we work for                                 ourselves and that means continuing to                                 build the capacity to work together but                                 trouble was lurking while we were                                 investing our energy in building to keep                                 bringing the community together by                                      the Ember framework felt like it was                                 starting to fall behind in ember moving                                 as a community is our highest technical                                 priority at the beginning that meant                                 that our users have to wait for the                                 community to design new high level                                 features to make progress this slows                                 down enthusiastic early adopters in our                                 community it also deprives us of the                                 feedback of experiments so to get our                                 community to experiment more maybe we                                 could announce features that are still                                 just ideas then our community could help                                 us flesh them out and help us figure out                                 what the problems are this is not a                                 solution for ember it places too much of                                 the onus of experimentation on the                                 people who are just trying to ship new                                 features and make progress with their                                 apps and we're not excited about taking                                 the time to experiment at work what we                                 realize is that for every nine people                                 who are just going about their day                                 building features and making their                                 customers happy there's about one person                                 who is excited about trying out new                                 stuff either because they really really                                 need it we're more likely that they're                                 just a kind of person who likes                                 tinkering with new stuff this reminded                                 me of a talk that Brandon Hayes gave                                 called surviving the framework Wars he                                 said there are three kinds of people in                                 a community and they correspond to three                                 different stages of development in a                                 community                                 he said he cited somebody the link is on                                 the slide pioneers are so pioneers are                                 responsible for the early vision of the                                 project and for doing the experimental                                 work that gets it off the ground                                 Brandon said settlers are responsible                                 for                                 term strategy and synthesis and town                                 planners are responsible for tactics and                                 execution by the way depending on the                                 day I personally might be a pioneer like                                 when I'm working on glimmer VN features                                 a settler when I'm working on skylight                                 or a town planner when I'm attending                                 framework meetings I actually think it's                                 very important to be able to conceive of                                 people moving seamlessly across these                                 roles what we realized when we thought                                 about it is that in our ideal community                                 the people who are excited to experiment                                 with new features can play around and in                                 that ideal community that wouldn't                                 disrupt everybody else and every so                                 often when this is going well the                                 excited experimenters share the love by                                 creating add-ons that the rest of the                                 community can use we've seen this happen                                 over and over with fastboot Mirage ember                                 twittle ember observer type script                                 support and so much more even without                                 our direct support the kinds of people                                 who are excited about experimenting with                                 new tools bring new stable features to                                 the rest of the user base in the form of                                 add-ons on its own the pioneers do an                                 amazing job of flushing out experimental                                 ideas finding problems suggesting                                 solutions and creating add-ons for users                                 but what we realized around                                              the core teams could make their job even                                 easier by changing our process instead                                 of the core teams fully designing high                                 level features landing the whole feature                                 buying the feature flag and then                                 stabilizing it over time we could                                 involve the pioneers directly we could                                 instead land and stabilize low-level                                 features that we did not intend everyday                                 users to use and we could let the                                 Pioneers hammer on them to flesh out                                 high-level api's the key is to make sure                                 that ember settlers see all the activity                                 but understand that they're free to                                 continue doing their everyday work while                                 the pioneers chart the next course                                 there's a certain joy in embracing the                                 idea that you're getting your work done                                 and you don't need to be a part of every                                 little twist and turn of the effort of                                 the pioneers starting in                                                 learning how to make a process out of                                 shipping features as low-level                                 primitives first and let the pioneers                                 flesh out the high-level api's we flesh                                 out the idea in our                                                  same year that we announced glimmer j/s                                 now glimmer JS was our first serious                                 attempt to chart this course and let's                                 just say we learned from that experience                                 by                                                                       when we wrote the routing server                                 RFC we had the basics down and by                                      with them up with the modifier manager                                 API we had become pretty confident that                                 the approach was working by then we had                                 years of experience shipping new                                 features first as low-level primitives                                 and saw that ember settlers could keep                                 humming along just fine                                 this quote is basically saying in the                                 RFC we're not very worried about                                 fragmentation we've done this a bunch of                                 times and everything is coming along                                 just fine and in practice let's look at                                 how that worked so the visit API becomes                                 fastboot component manager becomes                                 glimmer component and modifier manager                                 became ember modifiers the key is that                                 when we ship new api's like component                                 manager or modifier manager we focus on                                 unlocking experimentation and                                 flexibility and we use names that                                 clearly communicate that application                                 developers don't need to look at them                                 now they also need to tend to be                                 designed with an eye towards evolution                                 these low-level api is tend to be much                                 more stable than higher-level api's                                 which means that the experiments that                                 people build in userspace                                 continue to work even when we eventually                                 finalize something else in Kor we give                                 the Pioneers the tools that they need to                                 pioneer and leave the settlers alone to                                 settle now a totally valid alternative                                 to this story is to announce a new API                                 is where there's while they're still                                 being designed and encouraged everyone                                 in the community to participate in the                                 process flushing them out that gives the                                 whole community including the settlers a                                 QA role and it probably uncovers more                                 information but it cuts against embers                                 core value placing too much of the onus                                 of building new features on ember                                 settlers at first this was a serious                                 issue for us because our pioneers had                                 nothing to do unless they were able to                                 contribute directly to ember source code                                 but since                                                         community innovations that would give                                 embers pioneers a lot to do improving                                 how quickly we could build new features                                 without creating the kind of                                 fragmentation that cut so deeply against                                 our core value that everything we do we                                 do together by                                                     pretty good at this our pioneers were                                 cranking out new add-ons left and right                                 and embers core teams were focused on                                 building low-level primitives so they                                 could work with the pioneers to build                                 the next generation high level features                                 there was only one problem                                 most ember users had no idea when they                                 should adopt any of these features in                                 some cases the features had gone through                                 the entire lifecycle from primitive to                                 pioneer to stability in other cases                                 features were still going through the                                 lifecycle while this was moving                                 along technically it was obvious that it                                 wasn't the end of the story we had one                                 more lifecycle problem to solve and for                                 ember it's the whole ball game how could                                 we move our community to the new world                                 that we were building together so in                                 last year's keynote we announced the                                 last piece of community innovation                                 puzzle last piece of the community                                 innovation puzzle Auditions ember octane                                 would be the first addition an addition                                 serves as a call to arms to the                                 communities pioneers it's time to turn a                                 collection of features into a new world                                 that we can migrate our entire community                                 to in the mean time the settlers keep on                                 working they can see all the exciting                                 work going on to get everyone ready to                                 migrate to a new better world and                                 somebody even find it exciting enough to                                 do some pioneering of their own but most                                 people continue to get their job done                                 day in and day out and wait for the call                                 to march together                                 [Music]                                 although gen Weber couldn't be in                                 Portland in person this year she created                                 an octane trailer for us to watch let's                                 roll the tape today's presentation has a                                 lot of information for and about our                                 community but it's also a time to share                                 a message with the broader JavaScript                                 community ember is a front-end framework                                 that has something new to offer you a                                 new set of tools and a new way of                                 working on web apps our latest work is                                 called ember octane and it's a total                                 overhaul of Empress syntax mental models                                 and learning journey if you tried ember                                 before this is pretty different                                 one of embers long-standing core                                 strengths is that it includes the things                                 you need to build a successful software                                 product tools that are built to work                                 together now with octane it puts HTML                                 first if its components front and center                                 developers can learn by following                                 thoroughly tested free brand new                                 tutorials and this past December we                                 shipped octane in a minor stable release                                 building some of the best new features                                 that the front-end has to offer on top                                 of a solid dependable foundation member                                 developers didn't have to rewrite their                                 apps in order to start using these                                 features let me take you on a tour with                                 a few commands I can generate my app                                 install and use almost any popular                                 JavaScript package from NPM and add some                                 markup interaction and CSS I can write                                 some end-to-end tests run them run a                                 production build and deploy I can do all                                 of these things with zero config along                                 the way I learned some important things                                 in a guided way out of the box                                 every new ember app comes with linting                                 that guides me to make good choices for                                 following coding best practices and                                 improving my apps accessibility and when                                 I work on other projects I bring my                                 knowledge and expertise about the web                                 with me here I'm copying and pasting                                 some d                                                               into my ember app in the end I have more                                 time for doing the things I enjoy as a                                 developer                                 whenever I have questions it's                                 especially helpful to be part of this                                 community I can get debugging help from                                 other people without needing to explain                                 my apps architecture first the Ember                                 community includes developers who work                                 at companies that have thousands of                                 engineers they work at small startups                                 with scrappy teams and the drive to                                 build something new they're hobbyists                                 who choose ember for their side projects                                 because it lets one person get a lot                                 done and anyone can participate in                                 shaping embers future by making                                 proposals for new features or providing                                 feedback on the things that others have                                 written we're all using the same core                                 tools and that opens new possibilities                                 if you need to move quickly to get your                                 app into production or you want to learn                                 what it take                                 to get there we invite you to try ember                                 octane let's build something together                                 we spent a lot of time talking about how                                 ember have however has improved its                                 capacity to move together as a community                                 and we will just watch Jen quickly walk                                 through octane but now I want to take a                                 few minutes to rewind back to                                          talk about my own journey from print                                 designer to programmer when I started                                 programming in                                                          and CSS sort of at the time I had five                                 years of experience as editor-in-chief                                 and main designer of to school                                 newspapers my designs had won some minor                                 awards and I had learned enough HTML and                                 CSS to lightly modify the CMS that my                                 newspaper used to put its content on the                                 Internet this is a this is a not fully                                 complete comp that I found in my email                                 from back then when I took my first job                                 as a web designer I assumed that my                                 experience as a print designer would                                 carry me forward as I found my digital                                 footing the person who hired me had the                                 same assumption virtually all of my jobs                                 before this one were low paid hourly                                 work this web designer job paid thirty                                 seven dollars an hour but it was                                 part-time                                                             living wage at a respected nonprofit my                                 first day at the job I was told that the                                 company had cut ties with the digital                                 agency that had been managing the                                 websites of a dozen or so departments                                 and expected me to take over the                                 responsibilities effective immediately                                 as a half time employee I was hanging on                                 for dear life for my first project I                                 updated the website for the nonprofit's                                 annual dinner was a ColdFusion website                                 next I built a brand new microsite for a                                 basketball tournament fundraiser than a                                 golf tournament microsite in the                                 meantime demands from half a dozen                                 departments were piling up they had                                 replaced a digital agency with a                                 half-time employee whose only web                                 experience was Microsoft front-page I                                 was only supposed to work halftime but                                 my desk was piled high with requests to                                 make changes to various parts of the                                 organization's website requests for                                 brand-new micro sites and requests for                                 meetings to discuss and plan even more                                 web sites I frequently worked                                                                                                                     most urgent demands I realized that my                                 print design experience wasn't gonna get                                 the job done I needed to learn how to                                 program and I needed to learn fast I                                 remember walking into Barnes & Noble                                 going into the programming section and                                 feeling like the information I needed                                 was somewhere inside the books on those                                 shelves I didn't have a ton of extra                                 money at the time but I picked up a PHP                                 and my sequel book and I read it                                 cover-to-cover                                 I felt a great sense of relief this was                                 gonna work I already knew HTML and CSS                                 and I was gonna be able to use PHP to                                 speed up my work I could Spock I could                                 stop spending hours keeping headers and                                 footers up to date I could give people                                 in the organization a tiny form they                                 could use to update frequently changing                                 copy on the website it made a huge                                 difference I was still copying and                                 pasting PHP files from the last project                                 into the new one when I created a new                                 microsite but the structure really                                 helped that didn't mean I suddenly had a                                 lot of free time I was still totally new                                 to programming and the requests were                                 coming in fast and furious it's just                                 that I was now getting things done and I                                 wasn't totally embarrassed by the base                                 then I learned about rails instead of                                 including the header and footer into                                 every page we also had the concept of                                 layouts I remember thinking that layouts                                 were so much better I could take the                                 HTML and CSS I was writing in PHP files                                 move them into a rails app and                                 everything got better instead of ad hoc                                 forums where people could edit tiny                                 pieces of copy I could finally build the                                 CMS back-end I always dreamed of always                                 for a few months this is an image from                                 about a year later when I turned it into                                 a rails plug-in to be honest I was                                 probably a little bit in over my head at                                 the time but I actually did build the                                 CMS for the departments in the                                 organization to use just a few months                                 after realizing that I actually needed                                 to be a programmer not a designer what                                 made all that possible and the reason                                 I'm a programmer today is that when I                                 was in over my head barely hanging on I                                 was able to build on the baseline                                 knowledge of HTML and CSS a little bit                                 at a time never having to build burne                                 weeks of time at work on learning a                                 whole new paradigm frankly if I had                                 tried to learn a new paradigm I would                                 have probably had been fired and looking                                 for a new print design job before I                                 could ever become a programmer so this                                 is very personal to me I wouldn't be a                                 programmer today if I hadn't found tools                                 that took my HTML and CSS knowledge and                                 helped me build on it here's what I'm                                 talking about there's basically three                                 steps you want to get your portfolio                                 portfolio your marketing website or your                                 personal website online create a new app                                 you want to take your HTML CSS and you                                 want to deploy it and you want space to                                 grow into a dynamic website with dynamic                                 URLs as you learn more and you don't                                 want an easy bake oven you don't want                                 tools that only beginners use you want                                 tools that everybody uses I'm talking                                 about using tools that a community of                                 professional web developers use to build                                 large applications with hundreds of                                 engineers in                                                          way to incrementally supercharge my HTML                                 and CSS skills and this is something                                 that has always weighed heavily on me I                                 personally built HTML tokenization                                 parsing and tree building infrastructure                                 into clemmer VM and we have worked                                 extremely hard to support valid HTML                                 including SVG here's an example test if                                 you don't believe me you might not                                 believe me because SVG is very is the                                 bane of everyone's existence even though                                 we cared a lot about this use case and                                 kept pushing ember towards being a great                                 fit for people who already know HTML                                 HTML and CSS there was already one major                                 stumbling block there was always one                                 major stumbling block ember required                                 users to configure the root element of                                 every component using a weird JavaScript                                 DSL to be honest even though we had done                                 so much work to align Ember with HTML I                                 didn't feel like the hooda of                                            have been able to bootstrap a                                 programming career with ember and yet it                                 wasn't like there were a lot of other                                 options out there for that person what's                                 really incredible to me is that the                                 octane programming model has enough                                 improvements that we could update the                                 documentation to teach components HTML                                 first the picture on the right is an                                 example that we first introduced in the                                 first section which is called templates                                 or HTML and used throughout the guides                                 and this is the first place in the                                 component guides where JavaScript comes                                 up at all in isolation each feature of                                 octane might seem small but in aggregate                                 they make enough of a difference to                                 change the way we write octane apps and                                 if we change the way right octane apps                                 of course we need to do it together and                                 that's why we refresh the guides based                                 on this new way of teaching and using                                 ember components before we were ready to                                 call the whole community to migrate to                                 the new world and we could finally and                                 with enthusiasm tell all of our users                                 about the work that we had done to bake                                 HTML so deeply into the glimmer VM going                                 back to the beginning this means that if                                 you know HTML and CSS you can take your                                 existing code drop it into an ember                                 application deploy quickly to production                                 and share it with your friends                                 this goes for Tom's World of Warcraft                                 guild website which is the first website                                 Tom made as a programmer it goes from my                                 basketball tournament website and it                                 goes for your portfolio                                 Marketing website and you can iterate on                                 your skills just like I did with PHP and                                 Rails to add interactivity to your                                 website Godfrey is gonna get into a lot                                 more details about what it looks like                                 technically about what HTML first looks                                 like technically but this is the goal                                 and once you get your website on the                                 Internet which is really the important                                 thing it's important that you have                                 something on the internet that you can                                 share with your friends or your or a                                 potential boss or a potential person                                 you're applying for a job at there's                                 room to grow                                 you could add interactivity using the                                 component JavaScript API you can add                                 more pages to your app with the Ember                                 router you can add server-side rendering                                 using fastboot or even empress to build                                  on your ember knowledge to build a gem                                  stack app which there will be a talk                                  about in this conference and my personal                                  favorite is you can use air table as a                                  back-end to add some dynamic data to                                  your app the coolest thing about air                                  table is that after you design your                                  tables you get custom documentation                                  that's localized for the exact table and                                  columns that you create it you can just                                  copy and paste it into your application                                  and if you're feeling really adventurous                                  you could try it embroider which brings                                  automatic route based code splitting to                                  your app it works today and a lot of                                  real world apps already work with                                  embroider but not every add-on supports                                  embroidery yet embers pioneers are hard                                  at work to bring embroider to everyone                                  which means that all ember apps will                                  soon have route based code splitting                                  without any special annotations just by                                  using embers router and components                                  normally if you fancy yourself a pioneer                                  try it out it's really cool whether                                  you're just starting out with an HTML                                  and CSS in your pocket and dreams of                                  becoming a web developer or whether                                  you're a pioneer looking to help chart                                  the course to embroider for the rest of                                  the community ember has a place for you                                  and if you're looking to become a part                                  of embers leadership there's a team to                                  shoot for regardless of your skill or                                  prior experience with frame or code if                                  you have experience with infrastructure                                  writing or web development the learning                                  team would love your help                                  if you love project management and want                                  to put those skills to good use                                  reach out you don't need to be a wizard                                  at framework development or have an                                  interest in becoming one to have a path                                  to leadership in ember if you're                                  interested reach out to remember the                                  steering committee framework team or                                  learning team and one of us will try to                                  help you figure out what your path might                                  look like                                  [Music]                                  ultimately what I have learned being a                                  part of this amazing community is that                                  there's much more to web developer aim                                  works than code we strive together we                                  run together we move together                                  and now when the only way to stay safe                                  is to distance ourselves from one                                  another we need each other more than                                  ever for posterity I want to bring Jonas                                  up on the stage one more time roll the                                  tape you painted an antibody that's                                  great what's your antibody gonna do it's                                  going to go track down the small why oh                                  what's it gonna do with it finds a virus                                  and then what's it gonna do it's gonna                                  stop it                                  that's great and then you'll be healthy                                  that's so good what a great antibody as                                  they used to say when I was growing up                                  from your lips to God's ears kid next up                                  Godfrey's gonna do a deeper dive into                                  the technical details of octane but                                  first let's watch let's watch Jen's                                  trailer again because it's so cool                                  today's presentation has a lot of                                  information for and about our community                                  but it's also a time to share a message                                  with the broader JavaScript community                                  ember is a front-end framework that has                                  something new to offer you a new set of                                  tools and a new way of working on web                                  apps our latest work is called ember                                  octane and it's a total overhaul of                                  Empress syntax mental models and                                  learning journey if you tried ember                                  before this is pretty different                                  one of embers long-standing core                                  strengths is that it includes the things                                  you need to build a successful software                                  product tools that are built to work                                  together now with octane it puts HTML                                  first if its components front and center                                  developers can learn by following                                  thoroughly tested free brand-new                                  tutorials and this past December we                                  shipped octane in a minor stable release                                  building some of the best new features                                  that the front-end has to offer on top                                  of a solid dependable foundation member                                  developers didn't have to rewrite their                                  apps in order to start using these                                  features let me take you on a tour with                                  a few commands I can generate my app                                  install and use almost any popular                                  JavaScript package from NPM and add some                                  markup interaction and CSS I can write                                  some end and tests run them run a                                  production build and deploy I can do all                                  of these things with zero config along                                  the way I learned some important things                                  in a guided way out of the box                                  every new Emperor app comes with linting                                  that guides me to make good choices for                                  following coding best practices and                                  improving my apps accessibility and when                                  I work on other projects I bring my                                  knowledge and expertise about the web                                  with me here I'm copying and pasting                                  some d                                                                into my ember app in the end I have more                                  time for doing the things I enjoy as a                                  developer                                  whenever I have questions it's                                  especially helpful to be part of this                                  community I can get debugging help from                                  other people without needing to explain                                  my apps architecture first the Ember                                  community includes developers who work                                  at companies that have thousands of                                  engineers they work at small startups                                  with scrappy teams and the drive to                                  build something new they're hobbyists                                  who choose ember for their side projects                                  because it lets one person get a lot                                  done and anyone can participate in                                  shaping embers future by making                                  proposals for new features or providing                                  feedback on the things that others have                                  written we're all using the same core                                  tools and that opens new possibilities                                  if you need to move quickly to get your                                  app into production or you want to learn                                  what it takes to                                  get there we invite you to try mbar                                  octane let's build something together                                  thank you Jim and Yehuda and hello                                  everyone thank you for tuning in to                                  Virgil number common                                                   from the Ember team and I'm here to give                                  you an update on all the exciting things                                  that happen this year in amber world of                                  course as you probably noticed at this                                  point the most important news of all is                                  that we should obtain a new edition of                                  ember but what exactly is obtained as                                  you saw in Jen's trailer obtained is a                                  lot of things it's a major update to the                                  framework it's a set of new features its                                  new program model its new defaults when                                  generating apps it's a new set of                                  recommendations and linting rules as new                                  website up the documentation blah blah                                  sure it's all those individual things                                  but above all obtained is really an                                  opportunity for us to present amber to                                  developers outside of our community it's                                  a chance for us to say hey we have made                                  a lot of improvements in ember and we                                  think you really like it based on the                                  feedback we received so far I think it's                                  probably safe to say we deliver on that                                  believe it or not we actually got an                                  entire pitch of positive reviews and I                                  can use that you didn't see that coming                                  for a lot of us existing ember users                                  though things might feel a little bit                                  different sure we hear a lot of things                                  about obtain on internet there are a lot                                  of new things but hey we have an app to                                  maintain at work and it's not like we're                                  going to rewrite everything overnight                                  that's the whole point of using ever                                  after all it's about the stability right                                  well we totally get that and that's why                                  we focus a lot on incrementalism and                                  backwards compatibility we ship and                                  stabilize these features incrementally                                  whenever they're ready there's no                                  breaking changes we also make sure                                  there's a good interrupt story between                                  the new and old paradigms we think this                                  is a pretty good time to upgrade overall                                  but and if you want to do that we have                                  written code months and other migration                                  tools to help with that but ultimately                                  the choice is yours and your existing                                  code is not going to suddenly stop                                  working anytime soon that's all great                                  but because things are so incremental                                  and so backwards compatible for a lot of                                  us and longtime member users we're                                  mostly focus on the mechanics like what                                  switchers do I have to flip to upgrade                                  my app what is the transition                                  from A to B things like that these                                  things of course very important but they                                  can also cause you to miss the forest                                  for the trees when you're so focused on                                  the mechanics you might miss the bigger                                  picture and don't fully realize how                                  different things really are so for the                                  purpose of this segment I want to invite                                  you to go ahead and forget everything                                  you know about amber for now and let's                                  try to give amber fresh look from the                                  perspective of a new user I'm going to                                  highlight three major areas of obtaining                                  that I think are pretty representative                                  and through these examples I hope to                                  show you the many ways that we are now                                  thinking about these features                                  differently in the post octane era of                                  amber so here we go as if you'da                                  mentioned from the beginning amber                                  position itself as a framework for                                  building ambitious web applications at                                  the core of the web platform there's                                  HTML and there CSS so at the core of the                                  Emer framework is just HTML and CSS we                                  want to embrace a web platform and power                                  web developers to build on top of these                                  familiar foundation technologies and be                                  able to do more with them rather than                                  getting in your way and requiring you to                                  learn something completely new and                                  different if you already know HTML and                                  CSS you should really be able to dive                                  right into into the world of ember and                                  feel right at home here this has always                                  been a goal of ember and in fact this is                                  the reason ember was born in the first                                  place as a fork of sprout core that                                  focuses more on an HTML first approach                                  however historically there have always                                  been some extent Oh shall we say                                  annoyances both big and small that kind                                  of gets in the way an undermining                                  position here a big part of octane is to                                  clean up these complexities let me show                                  you some examples when creating a new                                  octane app you can go straight into your                                  index template plop down some HTML some                                  CSS and bam everything just works the                                  way you expect this means you can drop                                  in any markup you find on the Internet                                  maybe from Stack Overflow or perhaps                                  some mock-ups that you received from a                                  designer without making any special                                  modification or tweaks to use them in                                  ember if it works with things like SVG                                  and web components you can keep your                                  typical web development workflow such as                                  using a browsers built-in Dom inspector                                  and there will no more strange Amber                                  wrapper elements that messes with your                                  CSS anymore this may seem like a small                                  change on its own but it's a good                                  example of the kind of HTML CSS first                                  experience that we aspire to provide as                                  you'll see octane is all about making                                  these steps that seem small by                                  themselves but when taken together they                                  add up to more than just the sum of the                                  parts                                  speaking of CSS you can look forward to                                  tomorrow session and ember devs guide to                                  CSS grid by embracing HTML CSS we can                                  immediately take finish of and benefit                                  from the web platforms latest and                                  greatest features such as CSS grid                                  without having to reinvent a real and                                  like invent a new library or patterns to                                  import these ideas in there ember world                                  check that out tomorrow at                                                time is subject to change so check the                                  schedule for latest time on these talks                                  okay so we have seen that HTML works                                  exactly the same way that you would                                  expect them to in ember that's cool but                                  of course HTML and CSS alone is not                                  sufficient to build an ambitious                                  application otherwise ember probably                                  doesn't need to access at all instead we                                  don't want to fight or replace HTML we                                  want it we want ember to feel like a                                  natural extension of HTML instead with                                  octane I think we've got something that                                  feels pretty great here one of the                                  limitations of HTML is that it doesn't                                  give you a whole lot of tools to                                  organize your code back to our example                                  here you can see that there are a lot of                                  markup on this page but if you look at                                  the rendered output it's pretty clear                                  that there are some high-level groupings                                  that would be helpful to reflect in the                                  source code it will be great if you can                                  look at the source code and at a glance                                  kind of knew what the render page looks                                  like release water them                                  important parts of the page art in                                  obtain this is pretty easy all you have                                  to do is create a new template file in                                  the components directory move over your                                  section of markup and that's it the                                  output looks exactly the same as before                                  but you have just created a component                                  and capsulate this whole navbar a                                  section of your markup by separating out                                  these logical units and giving them                                  meaningful names your source code is now                                  much more readable that's not the end of                                  story though as you can see at the                                  bottom of the at the bottom half of the                                  page we have a couple of these cards                                  each representing a different rental                                  property on the site so while they all                                  have the same visual and markup                                  structure the information they present                                  is different we could just copy and                                  paste this markup every time we needed                                  at one of these but as you have probably                                  experienced this is going to become a                                  maintenance nightmare very soon                                  especially in an ambitious codebase                                  don't worry though we got you covered                                  here too just like before we can extract                                  the mark-up into a new component by                                  moving them into a new file however                                  instead of hard-coding the information                                  we can replace them with placeholders                                  using the curly braces and add syntax                                  these placeholders are called component                                  arguments when invoking a component we                                  can use the same add syntax to pass                                  these arguments into the component                                  filling in the placeholders we defined                                  earlier now you have created a                                  parameterised component that can be                                  reused in different parts of your app                                  just by passing different arguments in                                  different situations you can think of                                  this as giving you the ability to create                                  abstractions in HTML in a traditional                                  programming language you are probably                                  you're probably going to take for                                  granted the ability to split things up                                  into functions they allow you to break                                  up your code into small self-contained                                  and reuse reusable pieces that can be                                  glued together to build something more                                  complicated components an octane gives                                  you the same ability to do the same                                  thing with your markup it doesn't stop                                  here though octane gives you a complete                                  suite of tools to in order to become a                                  productive and                                  is markup developer for example we add a                                  support for component namespacing which                                  allow you to group related components                                  into folders and invoke them using the                                  double colon syntax the splatter beauty                                  sure on the other hand allows you to                                  pass arbitrary HTML attributes to                                  components which comes in handy when you                                  need to tailor the CSS classes or the                                  Aria attributes for a particular usage                                  of that component likewise you can also                                  perhaps content around with blocks and                                  yield keyword and soon you even be able                                  to pass multiple named blocks when                                  invoking a component of course we have                                  always supported control flows like                                  conditional if unless and loops like                                  each and soon there will be a built-in                                  logical operator that you can use                                  without needing to install separate                                  add-on                                  speaking of which of course we shouldn't                                  forget that ember gives you access to a                                  vast component library via add-ons                                  maintained by the community as well as                                  the ability to package up your own                                  components to share with the world                                  ohnow octane in octane we have set out                                  to create to complete our vision of                                  being HTML first framework creating a                                  flavor of enhanced HTML that works for                                  building ambitious web applications and                                  I think we did a pretty good job on that                                  front you may also have noticed that up                                  until this point we have not written or                                  discussed any JavaScript just yet this                                  is not a coincidence historically                                  javascript is a pretty integral part to                                  the ember component model in fact it is                                  probably fair to say that the                                           components were first and foremost                                  JavaScript driven there was always a                                  JavaScript class associated with each                                  component and there's a wrapper element                                  on body driver the JavaScript class the                                  wrapper element was configured using a                                  JavaScript DSL and the JavaScript class                                  itself was responsible for intercepting                                  and handling user interactions with the                                  component to a lot of memory developers                                  this JavaScript API is probably the                                  first thing that comes into mind when                                  thinking about components and ember                                  in fact some components don't even need                                  a template in that old world because our                                  customizations were done entirely using                                  javascript in octane we flipped at the                                  other way round hopefully I have                                  convinced you that complaint isn't                                  obtained our first and foremost driven                                  by HTML and template as we just saw this                                  is a pretty viable programming model and                                  in a lot of use cases a template is all                                  you need inducting ganas the wrapper                                  element and what you see in their                                  components template is what you get in                                  the dump if you want to add a class or                                  if you want an HTML attribute all you                                  need to do is add in a template no more                                  JavaScript DSL we have refactored                                  internals of the rendering engines to                                  remove the need for JavaScript class                                  when rendering a component in octane                                  when rendering and templating only                                  component ever no longer generates an                                  allocated component instance and for the                                  most part this is a pretty subtle change                                  that happens under the hood but you may                                  notice that from the improved                                  performance and not having access to the                                  special this object in a template only                                  component more importantly though this                                  is a significant Mendham water shift in                                  how we think of a components in ember                                  now                                  components are all about the template                                  and any JavaScript is secondary to that                                  to reflect this shift we have moved the                                  component templates in your app from the                                  templates folder into the main component                                  folder and adjust it the generators                                  default output accordingly as I                                  mentioned at the beginning we're mostly                                  focused on giving ember a fresh look                                  here if you want to see more of the how                                  the path compares to the present you can                                  look forward to shishitos talk later                                  today ok so even though templates get                                  you pretty far in obtain we still have                                  JavaScript and we're still a JavaScript                                  framework after all and you're still                                  going to need plenty of it it's just                                  that JavaScript now plays a pretty                                  different role and serve a different                                  purpose in octane and octane the primary                                  purpose of JavaScript has switched from                                  managing the Dom to managing data first                                  for general-purpose computation that you                                  plan to reuse across the app you can use                                  helpers for that nothing really changed                                  here in octane except due to increased                                  utility of templum only components I                                  think you may find more places in your                                  app where creating a helper feels like                                  the right choice it's also worth                                  mentioning that helpers and including                                  class-based helpers now participate in                                  the auto tracking system which I'll go                                  into a little bit more later but what                                  about integrating JavaScript into                                  components well I'm glad you asked let's                                  look at an example here we have a share                                  button component that allows the user to                                  share the current page on Twitter this                                  component this is a component with its                                  markup and for the most part is just a                                  hyperlink Twitter has this intent API                                  that lets you prompt the user to compose                                  a tweet just by linking them to a                                  special URL and you can customize the                                  suggested tags and the hashtags using                                  query parameters and stuff like that                                  while the functionality of the component                                  is very simple it's just a link after                                  all you will probably need to write some                                  JavaScript code to build up this special                                  URL especially when you want to make                                  these things customizable via past in                                  component arguments and you'll need to                                  also URL and code the query params                                  so you can probably accomplish this with                                  a series of helpers but it will probably                                  feel pretty clumsy and it's probably not                                  super appropriate to add a bunch of                                  specialized helpers globally just for a                                  single component so this is the perfect                                  kind of use case for adding JavaScript                                  class to a component and with octane                                  that's pretty easy too you can                                  accomplish this by creating a JavaScript                                  file in the same place next to your                                  template and this is what the code look                                  the code looks like just as we spend a                                  lot of attention making octane templates                                  feel like a natural extension of HTML                                  the same amount of effort went into                                  making sure our JavaScript API leverages                                  native JavaScript syntax features and                                  idioms here we have a share button                                  component class sub classing from                                  glimmer component in our component class                                  we have access to passing arguments via                                  distant arcs which we took advantage of                                  in                                  share URL getter since we edit a                                  JavaScript file to a component we now                                  have access to the component instance                                  via is special this object in the                                  template and since we made share URL a                                  getter it behaves just like any other                                  property on the component instance so                                  accessing curly curly disk share URL                                  just works in the template all these are                                  done using native JavaScript features                                  and we didn't have to make any special                                  annotations to make it work in Hamburg I                                  hope you agree with me that this feels                                  totally in line with more than                                  JavaScript and nothing about it jumps I                                  was weird                                  mber ISM when it comes to integrate                                  JavaScript integrating javascript into                                  the Dom the challenge has always been                                  about keeping the Dom I'll put in sync                                  with the JavaScript code or the                                  JavaScript state while it may not be                                  super surprising that you have access to                                  this start URL together this start share                                  URL together in the template                                  the surprising thing here is that                                  whenever the pass in arguments changes                                  ember would know to rerun your getter                                  and automatically update the Dom output                                  so in this case if this dark stop text                                  changes Emperor is going to recompute                                  your share URL getter and automatically                                  update the href attribute in the Dom we                                  didn't have to write anything like ember                                  not yet or enumerate our dependencies                                  anywhere how does that work of this is                                  thank to the thanks to the new state of                                  the art auto tracking system whenever                                  you reference component arguments in                                  your template amber is now able to keep                                  track of the dependencies automatically                                  so we know when to update output this                                  works consistently whether you're                                  referencing them directly in the                                  template or when you're referencing them                                  and JavaScript or when you reference                                  them through a getter or a getter                                  calling and I get her get her calling                                  out of functions etc as far as number                                  can tell all this just works the same                                  way an ember is able to follow through                                  the change of the chain of dependencies                                  without any issues this capability is                                  not unique to component arguments your                                  own code can participate in the auto                                  tracking system too all you have to do                                  is add an                                  at tract annotation to any property you                                  want to use in a template and you're                                  good to go here for example we have a                                  rental image component with an AZ slark                                  is large property on it indicating                                  whether we're displaying the image in                                  the extended format or not when the                                  value of this property changes for any                                  reason ember would take note of that and                                  rerender template accordingly of course                                  just like with arguments this work just                                  as well when you reference them directly                                  in a template or when you access them                                  through a network of getters external                                  functions etc it works all the same way                                  as far as ember is concerned so far                                  we've been focusing on components but it                                  doesn't stop here as I mentioned earlier                                  helpers can also fully participate in                                  the auto tracking system as well                                  in fact the auto tracking system and                                  track properties work consistently on                                  any arbitrary JavaScript classes and you                                  don't even have to subclass from any                                  particular framework superclass like                                  ember objects so you can create your own                                  motor class and it will put a track                                  property on it and it watch it work just                                  fine this allows you to implement your                                  business logic in the own little                                  self-contained model and utility classes                                  and then you can just lightly glue them                                  together in your component more                                  importantly the auto tracking system                                  allows the sticks to refactor existing                                  push-based data flow based on observers                                  and argument stiffening into on-demand                                  pull based computations refactoring                                  existing code to fully take advantage of                                  this new program model it can probably                                  be in a talk on its own which I don't                                  have time for but you can look forward                                  to a future blog post on this topic and                                  I suggest you to experiment that on your                                  own as well and share what you've                                  learned with the community if you want                                  to understand how the auto tracking                                  system works under the hood you can look                                  forward to Chris Gary's talk tomorrow in                                  which he will show you the nitty gritty                                  of the system and how it compares the                                  other framework so check that out ok so                                  we have talked about templates we talked                                  about how to integrate JavaScript state                                  into templates and so the last piece of                                  puzzle here is how to work with the dog                                  of course for the most part managing the                                  DOM is not something that you have to do                                  explicitly as you saw earlier when using                                  templates amber will take care of                                  updating the Dom whenever your daily                                  changes in the JavaScript world however                                  when it comes to user interaction you'll                                  often want to work with the Dom directly                                  so here is a couple of examples here                                  we're back to the same expandable image                                  example that we saw earlier we have                                  wired up that is large track property                                  but we don't have any way for the                                  end-user to toggle its value at the                                  moment what we want to do is to call the                                  toggle size method on a component                                  instance whenever the user clicked on                                  the button in octane we've made this                                  pretty straightforward first we'll                                  import the action decorator and annotate                                  the toggle size method as an action this                                  turns it into a callback that we can use                                  in template next we will add the built                                  in on modifier to the elements that                                  we're interested in in this case we we                                  specified that we want amber to call                                  toggle size method on a compliant                                  instance whenever either of the buttons                                  are clicked with that the user can now                                  click on the image to target size the                                  thing that we added to the template here                                  is called an element modifier or                                  modifier in short it looks like the                                  placeholder syntax that were used to but                                  it's attached to a particular HTML                                  element in the same position where                                  attributes usually go the building on                                  modifier allows you to attach event                                  handlers to HTML elements but the                                  concept of element modifiers is more                                  general than that in octane this is how                                  you interact with the Dom and just like                                  helpers and components you can write                                  your own element modifier in your app                                  let's look at in it let's look at an                                  example for that here we are back to the                                  index page without app and there's a                                  search input box on the page perhaps you                                  might want it to be automatically                                  focused whenever it is page is rendered                                  knowing what you know about HTML you                                  might be tempted to put the auto focus                                  attribute                                  the input element like that                                  unfortunately the autofocus attribute is                                  really designed for a server rendered                                  static pages so it only works on the                                  initial page float                                  since we're rendering content with                                  JavaScript it doesn't do anything for us                                  no problem though we can write a                                  modifier for that we created a file                                  called autofocus J's inside the                                  modifiers directory inside the file we                                  wrote a small class that inherits from                                  the modifier class provided by the amber                                  modifier package here we have access to                                  the element in this case it will be our                                  input element and whenever the auto                                  focus modifier is attached in element                                  Emperor will call the wall we'll call                                  the focus method on the element to make                                  it the active element on the page we                                  think amber we think element modifiers                                  in amber are a powerful and pretty                                  intuitive way to work with the Dom just                                  like components and helpers they can be                                  packaged up into reusable add-ons and we                                  look forward to the community finding                                  and sharing new innovative use cases for                                  them with the wider ecosystem and in                                  fact some of this is already happening                                  let's look at two more examples the                                  first example would use this two                                  official render modifiers add-on and                                  just like Jan showed us and the trailer                                  we want to integrate with the external                                  d                                                                        code here comes from a d                                                we found online and we're able to mostly                                  just paste in the code verbatim I don't                                  expect you to read all the code here on                                  the slide but the important thing here                                  is that the random modifier Adam                                  provides a convenient way for us to run                                  a callback function on a component                                  whenever a particular element is                                  rendered which is exactly what we need                                  in this case and here we have another                                  example here we have a video player                                  component which consists of an HTML                                  video element and a play button what we                                  want to do here is                                  for the user to be able to click the                                  play button and it just start playing                                  the video in order to do that our play                                  method needs to have access to a video                                  element but how are we gonna do that                                  well this is where the emperor ref                                  modifier anton comes into play it's a                                  perfect use case for it here we'll add                                  the ref modifier on the video element                                  this gives us access to the element in a                                  component using name we chosen in this                                  case it will be this top video element                                  this allows us to finish implementing                                  our play method and with that our user                                  can now click the play button and start                                  playing our cat video that concludes our                                  brief journey into ember octane I hope                                  you agree with me that it is an                                  incredibly intuitive and productive                                  program model and if you have been using                                  ember for a long time this feels pretty                                  different from the framework that you                                  once learned in the best possible way I                                  only had time for a few selected                                  highlights but most of these examples                                  are taken directly from the official                                  guides and tutorial                                  they have been completely rewritten for                                  octane and I think they're pretty good I                                  encourage you to give them a read and I                                  think you'll be surprised before we wrap                                  up I want to talk to you about what                                  comes next so here comes a part where I                                  spill all the beans on the super secret                                  things that we have been working on                                  actually there's no secrets in fact we                                  have a road map RC probably on github                                  it's been up for a couple months at this                                  point the road map is set based on the                                  results from last year's community                                  survey and public awful blog post that                                  you can participate in the steering                                  committee then take all these feedback                                  and come up with a couple of general                                  directions and you can read more about                                  it in the road map road map RC itself                                  but here is a quick summary first we're                                  going to invest further into the                                  foundation that we built with octane                                  we'll keep simplifying things removing                                  conceptual complexity and introducing                                  new functionality that complements the                                  new program model we are also going to                                  invest in developer tools like making                                  type square in idea work better with                                  ember in general but also                                  with the new features in nokton second                                  we're going to invest in morganisa a                                  built system you might have heard of an                                  effort called embroid yet which is going                                  to integrate ember CLI with popular                                  packages like wet pack and roll-up this                                  doesn't mean you have to now change your                                  curry into a configuration architect                                  router these systems will be used under                                  the hood to give you access to morning                                  optimizations like tree shaking and code                                  splitting on the other hand it will                                  still allow ember to provide a zero                                  conflict experience out of the box so                                  that's pretty nice                                  third will invest in ember making ever                                  work better with assistive technologies                                  out of the box                                  we formed a new accessibility strike                                  team to tackle these issues and if this                                  is something you're interested in                                  helping you can find them on this Court                                  finally with octane out the door this is                                  a great time to share ember with the                                  outside community this is something that                                  you can help with by writing blog post                                  videos posting on social media speaking                                  of virtual conferences or even just                                  teaching ever to your friends and                                  colleagues as I mentioned one of the                                  parties on the roadmap is to invest in                                  the octane program model and given that                                  I spent a lot of time in this session to                                  tell you about how great templates are                                  and why you don't need as much                                  JavaScript anymore                                  the title of Matthew's talk might                                  surprise you I won't spoil everything                                  for you but stay tuned for this session                                  later if you want a glimpse of the                                  future and since we're talking about the                                  roadmap and talks Edward this main                                  architect behind the embroidery project                                  he doesn't have a talk at the conference                                  this time but he spoke about it at ember                                  fest                                                                     ember it's available on YouTube and if                                  you want to learn more by Umbro dia this                                  is definitely something you should add                                  to your playlist after to check out                                  after the conference finally I would                                  like to talk about how you can get to be                                  part of this effort we are a community                                  driven open-source framework and will                                  rely on the community members like you                                  and me to help move us forward so first                                  I recommend that you get involved with                                  the community by subscribing to ember                                  time                                  newsletter and joining out this court                                  server if you haven't already done so                                  there you can help answer questions you                                  can bounce ideas you can ask questions                                  you can join strike teams etc secondly                                  you can help by giving feedback what I                                  mean by that well there are a couple of                                  ways you can do that maybe you can                                  configure UCI server to run your test                                  against the baton canary channel using                                  ember try and report any issues as soon                                  as you see them the earlier we hear                                  about breakages the easier would be for                                  us to tracking them and fixing them and                                  of course you can submit pull requests                                  as well as writing and reviewing RFC's                                  third you can share common solutions you                                  found with the wider community in the                                  form of add-ons or you can help build                                  better developer experience by                                  contributing to tools like code mods and                                  linters if you're looking to get started                                  here check out the adopted ember add-ons                                  project on github and speaking of                                  tooling in case you missed it                                  both ember inspector and ember todo has                                  been updated to work with octane and the                                  latest version of ember those are great                                  projects to contribute as well finally                                  you can help with teaching ember to more                                  people as I mentioned before your block                                  poles and confidence talks are great                                  place to start but you can also                                  contribute it to the official guides and                                  documentation that I mentioned earlier                                  with octane we have invested pretty                                  heavily in the area of learning                                  materials including writing our own                                  state of the art tooling to go with the                                  documentation we now have for example a                                  self updating tutorial that runs itself                                  against the latest changes every day                                  which is great for keeping it up-to-date                                  and fresh but it's also serves as a good                                  way for us to detect breakages across                                  the ecosystem if this is something that                                  you would like to help with we would                                  love to get would love to keep the                                  octane momentum going so definitely get                                  in touch with this court on the deaf                                  Learning Channel                                  and finally if you want to hear more                                  about more ideas about contributing you                                  can look forward to this session                                  tomorrow and finally finally if you                                  haven't seen the amber documentation the                                  impaired documentary yet I highly                                  recommend watching it it's really well                                  done and it's available for free on                                  YouTube there are many highlights but                                  one of the things that really jumped out                                  to me is this quote from Melanie when                                  interviewed about the core values of                                  amber I think this is a great way to sum                                  everything up so I'm just gonna leave                                  that with you                                  we are amber the together framework                                  let's get the message out there thank                                  you very much
YouTube URL: https://www.youtube.com/watch?v=vUojP8DDPs0


