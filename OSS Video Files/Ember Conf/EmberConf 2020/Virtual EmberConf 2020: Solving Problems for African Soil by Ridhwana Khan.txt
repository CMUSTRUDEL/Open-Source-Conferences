Title: Virtual EmberConf 2020: Solving Problems for African Soil by Ridhwana Khan
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	Solving Problems for African Soil by Ridhwana Khan

Often smart people build ambitious applications that are meant to solve the world’s problems - like education, food shortages etc. However, the context like limited resources, minimal infrastructure, and smartphone adoption are usually overlooked. Solutions like low bandwidth apps, offline-first solutions are never at the top of the list even though they are sometimes most appropriate.

In this talk I’d like to walk you through some of the challenges that Africans face and how we can utilise some of Ember’s features as a tool to support relevant and effective solutions.
Captions: 
	                              [Music]                               hi everybody thank you for attending my                               talk today                               my name is Ramona and I'm a senior                               software engineer I currently work at a                               company called Dell you may know it                               better is Delta                                                     Devon Twitter and atever I hope flooding                               my passion for coding learning and                                sharing and building communities if                                you've not heard this episode before                                it's one of the many South African                                accents I hope that some of you have                                been to South Africa particularly Cape                                Town which is beautiful if not I hope                                that you'd visit sometime soon in                                addition to my job all surround a                                nonprofit organization in South Africa                                called Casa Metz                                Claire Metz is an after-school program                                that exposes students in under-resourced                                communities to stir water in the                                environments of kasi Metz has allowed me                                to appreciate the challenges that we as                                African space and it's inspired me to                                Bhosle write the stroke to share my                                experiences on a global level and                                secondly both my own applications with                                performance at the forefront of my mind                                to compensate for the challenges that we                                encounter in developing communities                                unless map the countries marked in                                purple are developing countries the                                darker purple is the high-income                                developing countries unlike most of                                Africa but they nevertheless are still                                developing so why am i showing you this                                map the reason is because whatever the                                challenges that Africa experiences at                                least                                                                  there is all these countries marked in                                purple they experiencing it too which                                means if you don't follow your acts to                                cater for emerging markets these are the                                people that will either not be able to                                use your exit or or will have difficulty                                using them living on the African                                continent I have a lot of exposure to                                the                                that we experienced here and I'd like to                                go through some so the first challenge                                that I'd like to outline is low chilling                                and hello chilling is just really the                                bane of my existence and other Africans                                existence too for those who do not know                                my cloud chilling years                                it's the deliberate shutdown of                                electrical power in part or parts of                                into power distributed system generally                                to prevent the failure of the entire                                system when the demand strains the                                capacity of the system                                I think the quali drawing that blackouts                                in the US but it's a little bit more                                impactful here the implications of these                                is that there is no power for a minimum                                of four hours in South Africa and most                                days rotating around the different parts                                of the city this is a graph on the slide                                showing the plant breakdown of energy                                over the two months it is absolutely                                insane to think that our plants break                                down as much in our African countries                                like Zimbabwe and Zambia as you can see                                from these tweets the power is turned                                off unexpectedly but at around                                         at the time as a result of having no                                power we tend to have faint - no cell                                phone reception because the cell phone                                towers are being overused and are unable                                to handle this increased capacity                                cheering these periods no cell phone                                reception means no                                                 without internet access we are unable to                                use full functionality of applications                                another challenge that a large portion                                of Africans face is that we have very                                basic digital literacy and this is                                probably due to the reasons that a lot                                of public schools have no computer labs                                and students don't have access to                                computers at home enough                                hence complex and unintuitive interfaces                                proved to be a hurdle teacher cost in                                South Africa are also extremely high and                                they also hide now                                Africa South Africa on this chart puts                                between China and Canada with about $                                  per gig you may say this is not too                                 different compared to the US however                                 this is not tip dollars is not                                 proportional to the audience of South                                 Africans who on earth even less than                                     is completed employees in the US or                                 Canada while smartphones are common in                                 Europe and northern America sub-saharan                                 Africa who live in ownership in South                                 Africa around                                                     smartphone however this is below the                                 medium of                                                                Nigeria Kenya and Tanzania even lower                                 they still huge populations of a                                 population of Africa that uses feature                                 phones which is more affordable than                                   which is more affordable than smart                                 phones because they sell between                                                                                                               tend to have slower CPUs Loram lower                                 storage older OS versions and some of                                 these devices can even be restricted to                                 just                                                                   contain outdated browsers and they often                                 don't even have touch screens instead                                 they have a key period or deep here for                                 navigation and Casamance we most of the                                 students have either no or low end                                 devices they gave coated tech hubs in                                 the community with their desktop                                 computers in Internet is provided                                 however there is a time limit for the                                 utilization of these computers the                                 internet penetration rates are between                                                                                            in South Africa DS it's about just                                    percent whilst other African countries                                 like again ganya Kenya and Tanzania are                                 below                                                              lacking in under-resourced communities                                 in South Africa and other parts of                                 Africa hence very few have constant                                 internet access instead most people end                                 up using                                                              are able but it sometimes there's no                                 connection at all if we look at the                                 statistics for the top apps that I                                 downloaded in Africa unlike something                                 like the Google Play Store you will see                                 that the light versions of applications                                 when available always end up being at                                 the top of these statistics we need to                                 optimize for fast loading performance                                 relative to devices destiny means                                 optimizing the CPU memory best battery                                 and bandwidth usage before divided                                 diving into some of these techniques to                                 optimize performance let's go to some                                 important metrics                                 typically used to measure performance of                                 web applications or sites these metrics                                 can be measured at different phases of                                 the loading cycle so the first one is                                 the first paint the first paint marks                                 the points immediately after navigation                                 when the browser Randall renders some                                 pixels to the screen depending on the                                 structure of the page this could be                                 displaying the background color or it                                 could be the entire page being rendered                                 it's a really depends on how the app was                                 structured and how intent full they were                                 about performance the we want to                                 optimize most of the page being rendered                                 the first content full paint is the                                 point when the browser renders the first                                 bit of content from the Dom which must                                 be text in image or just any element for                                 site visitors with this time signifies                                 when actual content has been loaded on                                 the page and it wasn't just like any                                 change the first meaningful paint                                 measures when the page appears                                 meaningfully complete the first CPU idle                                 marks the first time in which pages main                                 is quiet enough to handle input and the                                 time to eat active measures when a user                                 can consistently interact which means                                 touch or click with all the page                                 elements so in subsequent sections I                                 will be providing a high level overview                                 of some techniques that we can use to                                 optimize for performance within emerging                                 markets they will include firstly                                 reducing the bundle size secondly                                 server-side or static rendering the                                 implementation of service workers and                                 number                                                                 each of these sections we will reference                                 the metric that we are optimizing for                                 and we will also give examples within                                 the context of ember                                 we are clickable so let's dive right in                                 in modern times                                 most of our web applications I have                                 really heavily reliant on JavaScript and                                 we ship so my JavaScript he uses then it                                 has become one of the most expensive                                 resources on the web we load our                                 applications without thinking of the                                 cost implication on both the hard way in                                 the network of a user's device the                                 consequences of loading to my transcript                                 and feature phones are low-end                                 smartphones in emerging markets are                                 substantial on such devices the                                 JavaScript can end up block in the main                                 did for significant amount of time                                 that's increasing the time to interact                                 with the application in addition the                                 passing of the extra JavaScript can                                 result in a breakdown of that thread                                 causing applications to sometimes just                                 run out of memory or hang or crash this                                 leaves the user of the feeling of                                 extreme frustration we he or she ends up                                 clicking around the interface without                                 seeing an effect according to el us -                                 article the cost of javascript in                                      which I recommended every person reads                                 he outlines how on mobile it takes                                 three to four times longer for median                                 phone like a moto G four to execute read                                 its JavaScript complete a high-end                                 device like the pixel T and it takes                                 over six times as long under low-end                                 device like they are to tell one acts                                 similarly downloading loads of                                 JavaScript and CSS files on a slow                                 network connection increases the first                                 meaningful paint I'm VI by leaving the                                 user with acceptance a feeling of                                 frustration according to Google's                                 double-click when come we'll compare                                 sites the low in five seconds compared                                 to sites that low in                                                fastest sites it is                                     longer average session things                                           bounce rates and                                                     mobility than the slower counterparts                                 that's a lot of increases knowing that                                 the first meaningful paint and the time                                 to interact is too high if it's too high                                 the juices will leave our sites and most                                 likely not written how can you then                                 reduce the bundle site so some very                                 simple solutions include the first one                                 is many file in concatenate in your                                 JavaScript both we can improve on the                                 overall performance of our sites and                                 applications by many finally on the                                 transcript to reduce the file size and                                 concatenating our relevant files to                                 reduce the number of requests in every                                 CLI we are fortunate that the J's files                                 are ready minified by default in                                 production using broccoli uglify draya's                                 and then whatever files are ready                                 concatenated into just one javascript                                 file however we can improve on us even                                 further with code splitting so instead                                 of shoving all the JavaScript at once we                                 can split the JavaScript but page routes                                 or component this means that we can sum                                 the minimum amount of JavaScript to                                 prioritize what a user will need and the                                 after we can lazy load the rest so we                                 can fetch the additional bundles even in                                 the background when the uses idle or in                                 response to user initiated action once                                 we have introduced the overall amount of                                 coding apps we have avoided loading code                                 that the user may not use and reduce the                                 amount of code needed during the initial                                 load another common way that we end up                                 loading our Java scripts is by importing                                 loads and nodes of Iran's we just keep                                 throwing it in me and libraries into our                                 applications instead we could have                                 simply claimed the same functionality                                 sometimes variety which is a small                                 custom JavaScript function or by                                 importing only a portion of that library                                 importing only a portion of the library                                 is now possible with tree shaking                                 tree shaking was free shaking we can                                 take advantage of static import                                 statements to put in only the specific                                 and relevant parts of es                                          hence eliminating dead code it's                                 possible to utilize codes music and tree                                 shaking from the embroider v                                          for those that don't know embroider is                                 modern fully featured Perl system that                                 works in tandem with ember CLI it also                                 newly embraces the ACMA standard for                                 importing es                                                          shaking achievable however it is                                 important to note that embroider is                                 currently in beta and there are some                                 risks to be aware of it using it in                                 production you can read more about                                 embroider on NS status on their own                                 estate this page you can't improve if                                 you don't measure so some of the tools                                 that we can use to audit our sights                                 include the Google Chrome's lighthouse                                 tool for performance audits depth audits                                 that will be useful to look at                                 boss you're using our bundle size and                                 they are very aptly named so the first                                 one is JavaScript Putin is high on it                                 and that reveals how much CPU time each                                 script on the page will consume along                                 with its URL then the onion JavaScript                                 audit which reveals the JavaScript                                 downloaded by the current page but their                                 child but it shows the JavaScript that                                 is never used the many fights are Script                                 audits visual compiled a list of and                                 many five resources that it finds in the                                 current page from there you can simply                                 take action for many find those files                                 manually or comment in your well system                                 to do it for you so the second one that                                 I can think of is the Embassy and I                                 bundle analyzer the Embassy and I bundle                                 analyzer analyzes the size and the                                 content of your ember apps bundled                                 output using a really cool and easy to                                 understand visualization more                                 specifically we'll be able to see which                                 individual models make it into your                                 final bundle so if you look at the                                 picture you'll be able to see that it                                 shows which which are the different                                 packages that have gone into your bundle                                 we also can find out how big each                                 contained module is including the row                                 source the magnified and the gzip sizes                                 finally we can by looking at the diagram                                 we can kind of see which fund of which                                 of the packages have made it into a                                 bundle one mistake and then we can                                 optimize our bundle size the third one                                 is funder phobia and so before I                                 actually install a bundle to my                                 application I like to know how a bundle                                 will impact my site is by the phobia                                 does this by showing the cost of an NPM                                 package by providing the information on                                 the size of the package how far it                                 downloads on                                                    downloads on a                                                   percentage of other dependencies that                                 package                                 Raisa thus we can then make informed                                 decisions and ready to edit or not                                 well JavaScript single page applications                                 can be quite snappy once they are fully                                 loaded this is this time between the                                 load and time to interact we uses a                                 usually presented with the blacks blank                                 screen this is because for most single                                 page applications the initial document                                 written by Java is empty thus resulting                                 in an increase in the first content for                                 paint so what if I wanted the best of                                 both worlds a quick initial load time                                 but also just snappy successive                                 interactions                                 this is achievable using server-side                                 rendering or static rendering for all or                                 most of the popular pages in your                                 applications thus can result in almost                                 instant first content full paint which                                 is particularly useful for developing                                 countries we network connections may be                                 unreliable remember that the first                                 content will paint which we discussed in                                 one of the earlier sides measures the                                 time from when the page starts loading                                 to it any parts of the pages content is                                 rendered on the screen using this                                 technique we are then able to display                                 useful information that is content to                                 the user instantly when I first went in                                 full panes is less than a thousand                                 milliseconds and uses are really happy                                 when the value is between a thousand                                 sixty thousand milliseconds one two                                 three seconds usual users they're                                 usually a little bit less pissed but                                 still pretty happy but over these second                                 so say three to five seconds sucks                                 causing frustration so over five seconds                                 uses I'm just completely lost interest                                 it's really simple to server-side render                                 pages in Emma and also of all we need to                                 do is to just use instant install a                                 hospital member which actually                                 renders the application and allows us to                                 pre-render any list of URLs into static                                 HTML files and bail time as a results                                 the pages can be self statically and it                                 has the fast four spins of the HTML                                 content from fastboot so all we do is                                 reinstall and the CLI possible to                                 install prim Bob and then we can                                 configure the URLs that we want to pre                                 render now this setup we can simply even                                 just see the HTML Viacom since the most                                 important values here are with the first                                 potential paint we can run the                                 performance audit once again and we                                 notice how the value decreases we see                                 the value from the lighthouse chrome                                 tools it's great it's great progress                                 that we are able to render our assets                                 and our content optimally especially to                                 ease the burden of slow network                                 connections high data costs in case of                                 low end devices but what about taking it                                 one step further                                 so as workers in caching can reduce                                 user's data costs even further and they                                 can render pages even faster with the                                 least amount of processing time not only                                 that but we can also render applications                                 offline for those for any connections                                 during low chaining was passing through                                 poor network areas a serviceworker is                                 essentially a background script that                                 runs separately from the main main                                 process did respond ad films including                                 incepting network request caching or                                 retrieving ready resources from the                                 cache and delivering push messages the                                 implementation of service workers is                                 pretty simple simple using a magnet                                 iran's                                 so here's a very brief look on how to                                 integrate service workers into our                                 application the dockyard and the                                 serviceworker dock                                 makes it really easy we use the                                 following commands cocl bus riders amber                                 installed serviceworker                                 which is installed the serviceworker                                 when the page loads then we do my                                 install service working index and the                                 serviceworker except cash which                                 essentially captures our index and HTML                                 page and all the other static assets so                                 at this point if you have to disconnect                                 your internet connection or time into an                                 offline mode in other browsers dev tools                                 and refresh the page                                 our app should still load then we can do                                 we can take it one step even further                                 where we can install and the                                 serviceworker cache fallback which then                                 texted any non-static resources like                                 request to the API and just like that                                 our service workers would be up and                                 running                                 we just need to browse the app for few                                 moment moment whilst online and it will                                 essentially be priming the fallback                                 cache and afterwards we can put our                                 browser into offline mode and try to                                 load a page that we have visited before                                 and guess what it should now sell your                                 API responses from the cache but can we                                 can make our applications even more                                 functional I mean if I think about it                                 when I'm without internet during times                                 of low cheating and not only when to                                 view data but I might want to fill out                                 forms or bookmark some data or maybe                                 even send some information through to                                 the application I think the memory of a                                 goldfish and once I close it up I'm                                 really not going to remember to come                                 back to that app so this is where my                                 pouch comes into play for us and it                                 basically is data persistence and the                                 pouch allows data to sync automatically                                 once a connection is restored in the                                 background the data is saved on the time                                 side using index TV or web sequel and we                                 just keep using the                                 the datastore API once again in order to                                 test our improve performance and offline                                 strategy lighthouse comes to the rescue                                 you can see your cache finds a files and                                 you can use Network requests to                                 determine where a network request where                                 Network we're the with the request is                                 getting answered from is it from the                                 capture the API and you can also use                                 something like Google Analytics to track                                 metrics that will help us to assess the                                 impact of our service welcome finally we                                 come to other performance charts so                                 there are a couple of techniques that                                 I'm not able to influence DP but I'd                                 still like to the some of them out                                 because I believe that when they are                                 used appropriately they will provide                                 better accessibility for emerging                                 markets                                 some of them include firstly using SVG's                                 we were able to or else optimizing                                 images by using tools like squash or                                 image optimizer HTML sources are also                                 really useful to serve different images                                 to da from visitors a company called fun                                 space reduce the image plane out by                                     resulting in a reduction in no time of                                                                                                          helped double phones based ecommerce                                 purchases conversion ratio cut bounce                                 rates but                                                              by                                                                 optimizing and singing through only the                                 necessary keys in our JSON payloads can                                 really just optimize our network                                 requests in our JSON we should serialize                                 and compress adequately as well in                                 addition and doctor the technology like                                 graph QL would automate the optimal                                 param param realization of data fetches                                 thus increasing the                                 performance Instagram increased                                 impressions and user profile scrolling                                 interactions by decreasing the responses                                 of the choice are needed for displaying                                 comments but                                                            for the                                                                can use techniques like adaptive loading                                 to tailor the experience based on the                                 user's constraints adaptive loading uses                                 signals to determine the network CPU                                 Kolkata and memory and based on those                                 values we can then conditionally load                                 more highly interactive components or                                 run computationally heavily heavy                                 operations whilst not sending these                                 scripts down if you know slower device                                 however it's useful to know that the web                                 properties that are used to determine                                 Network CPU are co count and memory and                                 not available via the web api to all                                 especially older browsers this                                 unfortunately does not make it extremely                                 useful for African markets idiots but it                                 is a useful technique the most likely                                 will be used more commonly in the near                                 future using all or most of these                                 strategies that have outlined allows us                                 to build more efficient applications                                 that will deliver an improved experience                                 within Africa however our professional                                 environments usually consist of teams                                 that include multiple developers working                                 on one application together within these                                 teams not all developers are                                 knowledgeable or even mindful of                                 performance so how do I go about                                 proactively maintaining a code base with                                 the team for just optimal performance                                 this is where performance budgets                                 integrated with the CIS will become                                 really useful so why is the performance                                 budgets a performance budget is a limit                                 with pages or components which the team                                 are not allowed to exceed any less money                                 the performance guru mentions the theory                                 of important metrics that we                                 to use in order to incorporate this                                 budget the first one is master timings                                 which are based on the user experience                                 when loading the page so things like                                 time to interact a first content web                                 page it's that first page of metrics                                 that I showed you and I started the                                 presentation we may need to pay several                                 of these metrics together in order to                                 represent our full story then this                                 quantity based metrics so these are                                 based on draw values so the weight of                                 the JavaScript the number of HTTP                                 requests these are directly correlated                                 to a browser experience and finally we                                 have blue base metrics which are schools                                 generally by tools such as lighthouse or                                 web page test they often just provide                                 one single number on a series to grade                                 the site furthermore we can apply                                 different budget stone mobile                                 applications forced our desktop                                 applications first device classes                                 because they are underlying hardware                                 like CPUs and memory and the connection                                 capabilities tougher across these                                 different experiences so an example                                 budget on my personal website could                                 include something like the home page                                 must shop less than hundred and seventy                                 caves of kilobytes of JavaScript on                                 mobile it should include less than two                                 minutes of images on a desktop but maybe                                                                                                       and then we get lazy load the rest                                 afterwards it should load and get                                 interactive in less than seven seconds                                 on an Android go which is one of the                                 more popular devices in sub-saharan                                 Africa and also maybe the score needs to                                 be greater than                                                      woman's audit these are just some                                 examples of what I could put into my                                 performance budget it is useful to know                                 that there's some standards which we can                                 integer - like for mid-range mobile                                 devices with slow TG connections a good                                 target for force loads is to load the                                 page and be interactive in five seconds                                 or less for subsequent loads a good                                 target is still                                 in under two seconds this is where the                                 developer has the opportunity to set the                                 precedent to be inclusive are the                                 emerging markets but the most tricky                                 thing about creating a budget is usually                                 to come up with the performance metrics                                 themselves one way to do this is to use                                 a calculator like performance budget at                                 i/o to get some baseline and then                                 configure the budget based on your                                 knowledge of the type of application                                 being created as well as your target                                 markets the see on the slide is                                 performance budget at i/o and it's a                                 really good experience                                 once we've crunched the numbers we want                                 to also proactively stay away from now                                 stay away of is not the throughout the                                 development process this can be done by                                 integrating something like web pack                                 performance hints which he issues                                 command line warnings or errors when the                                 butterflies grows over the limit this is                                 perfect for your development process                                 thereafter                                 once we started drawing we can integrate                                 it with the CI to automatically m                                       limits on poorer graphs for teams so if                                 the test fails we can simply prevent the                                 pull request from being large some scare                                 options that can be used is the bundle                                 size CI and lifehouse boss                                 sorry Lighthouse bite finally I                                 recommend also using speed curve for the                                 reactive monitoring so that we can                                 actually monitor some real users also we                                 can improve based on some baseline as a                                 result using a performance budget and                                 these integration tools developers and                                 machines have performance at the                                 forethought of their minds and hence                                 it's shown their development practices                                 accordingly in conclusion yes the scrap                                 again there are really no downsides to                                 make your applications performance there                                 are only benefits a performance                                 application opens you up to a whole new                                 markets this is millions of additional                                 people it is also proven facts based on                                 statistics in case studies some of which                                 are cited in                                 your slides their performance and route                                 increase increases traffic to your sites                                 in keep use keeps uses engage for longer                                 periods on a fast site used unknown to                                 consume more content some of these                                 changes especially server-side rendering                                 or even static are rendering allows                                 other apps to have enhanced SEO that's                                 increasing our leads and signup                                 conversion rates in fact the study shows                                 the triple complain Pinterest pages for                                 performance resulted in a                                              in wait time a                                                     traffic and a                                                            rates a sign up finally for every                                 travelers like myself                                 PTAs I hailed lifesavers I mean who                                 doesn't want to be able to check the                                 train schedule or navigate around the                                 city year without any network I know I                                 do but that being said I hope I've now                                 convinced you to think about performance                                 and expanding your apps to the African                                 soil why not thank you so much                                 you
YouTube URL: https://www.youtube.com/watch?v=Js_IfaHIP_4


