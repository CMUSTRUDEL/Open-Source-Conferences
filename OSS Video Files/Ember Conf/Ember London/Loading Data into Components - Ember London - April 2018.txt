Title: Loading Data into Components - Ember London - April 2018
Publication date: 2018-04-15
Playlist: Ember London
Description: 
	All while using data down, actions up.

Luke Sargeant
Captions: 
	00:00:00,030 --> 00:00:05,779
hi guys today I'm going to talk about

00:00:02,100 --> 00:00:11,840
how we handle data without roots at IG

00:00:05,779 --> 00:00:14,309
so why why would we want to do that

00:00:11,840 --> 00:00:16,789
there's anyone got any ideas about why

00:00:14,309 --> 00:00:19,560
we'd want to do that

00:00:16,789 --> 00:00:22,260
has anyone ever loaded any data without

00:00:19,560 --> 00:00:24,900
a root before it's okay you're in safe

00:00:22,260 --> 00:00:28,800
hands it's fine you can admit it it's

00:00:24,900 --> 00:00:30,840
okay okay so one anyone else yep not

00:00:28,800 --> 00:00:34,140
over there okay so there are a few

00:00:30,840 --> 00:00:36,540
reasons you might want to do this so at

00:00:34,140 --> 00:00:39,329
IG our team build the front-end

00:00:36,540 --> 00:00:41,309
dashboard for our leveraged trading

00:00:39,329 --> 00:00:44,100
products and clients can access a

00:00:41,309 --> 00:00:45,930
variety of financial data and then buy

00:00:44,100 --> 00:00:49,440
or sell contracts with IG and other

00:00:45,930 --> 00:00:52,489
traders hopefully to beat the market and

00:00:49,440 --> 00:00:57,899
make a profit and we do our best to stay

00:00:52,489 --> 00:01:01,260
LTS so why did we build a configurable

00:00:57,899 --> 00:01:04,860
dashboard to our users really need to

00:01:01,260 --> 00:01:06,600
compose their own workspace well many of

00:01:04,860 --> 00:01:09,600
our valuable clients would like their

00:01:06,600 --> 00:01:12,240
home office to look something like this

00:01:09,600 --> 00:01:14,750
and for a few of them I've heard that

00:01:12,240 --> 00:01:17,970
it's actually not that far from reality

00:01:14,750 --> 00:01:19,670
so when we built the project when we

00:01:17,970 --> 00:01:22,560
started building the project

00:01:19,670 --> 00:01:26,400
configurability was a high priority for

00:01:22,560 --> 00:01:28,890
for that project okay so let's talk

00:01:26,400 --> 00:01:31,710
about ember them so I'd like to think

00:01:28,890 --> 00:01:34,110
about conventional routing in amber as a

00:01:31,710 --> 00:01:38,939
mapping of a URL to a nested series of

00:01:34,110 --> 00:01:40,979
Russian dolls or views so this routing

00:01:38,939 --> 00:01:45,030
system is great at mapping segments of

00:01:40,979 --> 00:01:46,140
the URL to a UI hierarchy hopefully for

00:01:45,030 --> 00:01:49,850
those of you familiar with embers

00:01:46,140 --> 00:01:53,280
routing that all makes a lot of sense so

00:01:49,850 --> 00:01:55,140
at each level we get a route with the

00:01:53,280 --> 00:01:58,290
lifecycle hooks designed to help manage

00:01:55,140 --> 00:02:02,270
loading data the model hook is probably

00:01:58,290 --> 00:02:04,950
the most well known of these hooks and

00:02:02,270 --> 00:02:07,500
you also get a template that has the

00:02:04,950 --> 00:02:10,000
result of the root model hook passed

00:02:07,500 --> 00:02:12,790
into its scope

00:02:10,000 --> 00:02:14,170
and you get some conventions about how

00:02:12,790 --> 00:02:18,160
to provide loading in our templates

00:02:14,170 --> 00:02:20,760
great so pretty cool but what about when

00:02:18,160 --> 00:02:20,760
we want to do this

00:02:24,480 --> 00:02:29,500
so in our app users choose precisely

00:02:27,520 --> 00:02:31,750
what charts and use and trading data

00:02:29,500 --> 00:02:36,160
they want to see and they can compose

00:02:31,750 --> 00:02:38,020
the screen how they like so there are

00:02:36,160 --> 00:02:40,540
potentially infinite combinations of the

00:02:38,020 --> 00:02:42,930
UI that our clients configure so it

00:02:40,540 --> 00:02:46,480
doesn't really matter where to the URL

00:02:42,930 --> 00:02:49,390
and unfortunately this doesn't really

00:02:46,480 --> 00:02:51,940
make much sense we can't pass arguments

00:02:49,390 --> 00:02:53,410
into outlets for child routes as they're

00:02:51,940 --> 00:02:56,739
supposed to get their data based on the

00:02:53,410 --> 00:02:59,830
URL it's a few other ways but that's the

00:02:56,739 --> 00:03:02,410
main way okay so before you think we're

00:02:59,830 --> 00:03:04,480
crazy for wanting to build this

00:03:02,410 --> 00:03:06,160
flexibility in the first place I just

00:03:04,480 --> 00:03:08,709
want to talk about when we had Eric Brin

00:03:06,160 --> 00:03:10,300
visit our office last year he was there

00:03:08,709 --> 00:03:15,840
to help us tune the performance of our

00:03:10,300 --> 00:03:18,610
app so this is Eric here in the middle

00:03:15,840 --> 00:03:21,280
posing for a photo of the team after a

00:03:18,610 --> 00:03:24,310
heavy week of coding a bit of beer as

00:03:21,280 --> 00:03:27,910
well so Eric was recommended by Tilda as

00:03:24,310 --> 00:03:31,330
being great for what we needed so he

00:03:27,910 --> 00:03:35,170
used to be a core team member has worked

00:03:31,330 --> 00:03:36,850
with Netflix LinkedIn he also runs ember

00:03:35,170 --> 00:03:39,250
weekly so if any of you subscribe to

00:03:36,850 --> 00:03:42,970
that you probably know you've probably

00:03:39,250 --> 00:03:44,019
seen some stuff that he's written and we

00:03:42,970 --> 00:03:46,870
were really impressed with his

00:03:44,019 --> 00:03:49,870
performance insights but that should

00:03:46,870 --> 00:03:51,459
probably be a topic for another talk so

00:03:49,870 --> 00:03:52,690
early in Eric's visit I remember him

00:03:51,459 --> 00:03:55,540
saying that our app was probably the

00:03:52,690 --> 00:03:58,110
most ambitious app that he'd seen and I

00:03:55,540 --> 00:04:01,690
was feeling pretty chuffed about that

00:03:58,110 --> 00:04:05,079
until later in the week his phrase had

00:04:01,690 --> 00:04:07,570
changed just a little bit and it's just

00:04:05,079 --> 00:04:10,329
a little bit but yeah it does make a

00:04:07,570 --> 00:04:10,870
difference but truthfully you felt that

00:04:10,329 --> 00:04:13,780
the app

00:04:10,870 --> 00:04:15,250
felt more like an OS and thought there

00:04:13,780 --> 00:04:20,950
should be more patterns available to

00:04:15,250 --> 00:04:23,320
support this paradigm in ember yeah so

00:04:20,950 --> 00:04:24,010
let's get back to the problem and go

00:04:23,320 --> 00:04:25,690
back and tie

00:04:24,010 --> 00:04:29,320
three and a bit years ago when we

00:04:25,690 --> 00:04:30,900
started working on the app so what can

00:04:29,320 --> 00:04:34,720
we do

00:04:30,900 --> 00:04:37,090
option one just don't do it don't don't

00:04:34,720 --> 00:04:38,850
do it we using ember use routes it's

00:04:37,090 --> 00:04:41,410
fine

00:04:38,850 --> 00:04:46,350
these guys convinced us that we needed a

00:04:41,410 --> 00:04:48,760
better option than that so option two

00:04:46,350 --> 00:04:50,230
load everything in the workspace route

00:04:48,760 --> 00:04:52,600
that's what we call those dashboards

00:04:50,230 --> 00:04:55,060
it's our workspace clients can have lots

00:04:52,600 --> 00:04:57,250
of those and whilst we considered this

00:04:55,060 --> 00:05:00,010
we prefer to isolate the various data

00:04:57,250 --> 00:05:02,800
for the panels in case we wanted to use

00:05:00,010 --> 00:05:05,680
them in another way also to prevent kind

00:05:02,800 --> 00:05:09,990
of a monolith emerging that might be

00:05:05,680 --> 00:05:12,340
tough to work with big team option three

00:05:09,990 --> 00:05:15,000
so right components that handle their

00:05:12,340 --> 00:05:18,970
own data when we started writing the app

00:05:15,000 --> 00:05:20,590
this is what we did and it's probably

00:05:18,970 --> 00:05:23,350
worth noticing at this point that we

00:05:20,590 --> 00:05:25,570
aren't using ember data this is probably

00:05:23,350 --> 00:05:28,210
mainly to do with I was wanting to keep

00:05:25,570 --> 00:05:30,730
a lot of our core business logic in a

00:05:28,210 --> 00:05:32,380
framework agnostic library because we

00:05:30,730 --> 00:05:36,850
were sharing that with another app at

00:05:32,380 --> 00:05:38,710
the time ok so this is a bit small you

00:05:36,850 --> 00:05:40,120
don't really need to see the details but

00:05:38,710 --> 00:05:43,200
this is kind of what a component looks

00:05:40,120 --> 00:05:48,580
like when it takes care of its own data

00:05:43,200 --> 00:05:50,490
it's injecting a store and loading the

00:05:48,580 --> 00:05:52,630
data and setting a property on itself

00:05:50,490 --> 00:05:54,070
you can probably imagine what the

00:05:52,630 --> 00:05:56,710
template looks like it's handling

00:05:54,070 --> 00:05:59,080
loading it's Hara handling and arrow

00:05:56,710 --> 00:06:01,600
states and this is kind of before we

00:05:59,080 --> 00:06:04,800
even get to any of the stuff that this

00:06:01,600 --> 00:06:07,420
view should actually be taking care of

00:06:04,800 --> 00:06:09,610
and you've got even more complex when we

00:06:07,420 --> 00:06:14,110
started support features like sorting in

00:06:09,610 --> 00:06:15,790
our tables so we you can see here where

00:06:14,110 --> 00:06:20,230
the store we're doing this get only

00:06:15,790 --> 00:06:24,730
lookup this is to get an instance of a

00:06:20,230 --> 00:06:27,640
store which has injected the actual

00:06:24,730 --> 00:06:30,100
store behind it so that we could keep

00:06:27,640 --> 00:06:33,790
kind of like a view model in place and

00:06:30,100 --> 00:06:35,830
it was implemented as an array proxy we

00:06:33,790 --> 00:06:37,289
were really keen not to mutate the

00:06:35,830 --> 00:06:39,449
underlying data and that's kind of

00:06:37,289 --> 00:06:42,080
we did it so that you can have this not

00:06:39,449 --> 00:06:44,849
so this concern didn't have to happen in

00:06:42,080 --> 00:06:49,409
the component but also didn't have to

00:06:44,849 --> 00:06:50,999
mutate the underlying data this approach

00:06:49,409 --> 00:06:55,589
also meant we had to clean up view

00:06:50,999 --> 00:07:01,349
stores when components were destroyed so

00:06:55,589 --> 00:07:03,089
this got really messy you can feel a bit

00:07:01,349 --> 00:07:05,339
of anger towards that approach from

00:07:03,089 --> 00:07:10,649
probably those guys they're smiling but

00:07:05,339 --> 00:07:12,509
they're yeah they're angry so we want a

00:07:10,649 --> 00:07:14,339
better way to isolate the concerns

00:07:12,509 --> 00:07:18,439
without wiring up too much magic behind

00:07:14,339 --> 00:07:21,029
the scenes it was hard to teach and also

00:07:18,439 --> 00:07:22,619
just made testing really complicated

00:07:21,029 --> 00:07:26,789
because you got to setup all the data in

00:07:22,619 --> 00:07:28,800
every single test so in the meantime a

00:07:26,789 --> 00:07:32,789
few newer concepts were getting popular

00:07:28,800 --> 00:07:34,830
a number so tagless components that you

00:07:32,789 --> 00:07:37,680
use declarative component structures

00:07:34,830 --> 00:07:43,319
without impacting markup of your your UI

00:07:37,680 --> 00:07:45,539
structure which is pretty cool yielding

00:07:43,319 --> 00:07:48,269
block programs so components could now

00:07:45,539 --> 00:07:50,759
expose data to the markup and components

00:07:48,269 --> 00:07:55,229
passed it into the block which is very

00:07:50,759 --> 00:07:57,749
cool so these new features were what we

00:07:55,229 --> 00:08:02,399
needed for a new style of data component

00:07:57,749 --> 00:08:04,080
that we called data loaders so here we

00:08:02,399 --> 00:08:07,709
have a data loader that loads a list of

00:08:04,080 --> 00:08:09,119
markets and exposes it to its block the

00:08:07,709 --> 00:08:13,199
inner block doesn't have to worry about

00:08:09,119 --> 00:08:14,939
loading and arrow states and this

00:08:13,199 --> 00:08:19,439
because this is just all taken care of

00:08:14,939 --> 00:08:22,519
in the data loader zone template just

00:08:19,439 --> 00:08:22,519
leave that there for a second

00:08:25,610 --> 00:08:31,470
cool so roots back to roots roots are

00:08:29,130 --> 00:08:33,690
really good at providing conventions for

00:08:31,470 --> 00:08:35,880
loading and arrow states and they

00:08:33,690 --> 00:08:39,450
provide a few lifecycle hooks for

00:08:35,880 --> 00:08:41,339
managing loading of data so we to

00:08:39,450 --> 00:08:43,440
abstract Adar mechanisms into a base

00:08:41,339 --> 00:08:45,420
class that we could extend for our

00:08:43,440 --> 00:08:47,310
actual data loaders we didn't want to

00:08:45,420 --> 00:08:51,180
have to write this code over and over

00:08:47,310 --> 00:08:52,770
again for each of these data loaders and

00:08:51,180 --> 00:08:55,020
loosely again don't worry about the

00:08:52,770 --> 00:08:58,800
detail too much but this is roughly what

00:08:55,020 --> 00:09:02,459
it ended up looking like it provided all

00:08:58,800 --> 00:09:07,940
those things that we expect from from

00:09:02,459 --> 00:09:10,980
roots so our current version is okay

00:09:07,940 --> 00:09:13,620
it's well tested and it isolates the

00:09:10,980 --> 00:09:16,140
concerns nicely things like loading

00:09:13,620 --> 00:09:20,580
lists subscribing to live updates for

00:09:16,140 --> 00:09:23,880
prices and submitting forms but it's not

00:09:20,580 --> 00:09:26,220
that ergonomic and it's not exposed as a

00:09:23,880 --> 00:09:31,440
public add-on with usage guides

00:09:26,220 --> 00:09:33,930
everything that you'd expect so as a big

00:09:31,440 --> 00:09:37,140
company benefiting from ember it feels

00:09:33,930 --> 00:09:39,150
right to contribute back maybe and you

00:09:37,140 --> 00:09:41,130
know providing these sorts of libraries

00:09:39,150 --> 00:09:42,450
is maybe a good way to tell the

00:09:41,130 --> 00:09:46,130
community what you're doing in your

00:09:42,450 --> 00:09:49,709
company maybe generate a bit of interest

00:09:46,130 --> 00:09:53,400
so unfortunately we have had some epic

00:09:49,709 --> 00:09:56,400
open source fails in the past like we

00:09:53,400 --> 00:09:59,610
had Istanbul providing code coverage

00:09:56,400 --> 00:10:02,270
back when ember CLI blanket didn't play

00:09:59,610 --> 00:10:04,529
nicely with Babel quite a while ago

00:10:02,270 --> 00:10:07,350
however we got caught up in building our

00:10:04,529 --> 00:10:09,480
app and didn't publish it and around

00:10:07,350 --> 00:10:11,040
half a year later it was someone else

00:10:09,480 --> 00:10:14,970
who made this awesome tool available to

00:10:11,040 --> 00:10:17,910
the community kind of similar story with

00:10:14,970 --> 00:10:20,880
ember preloader something we developed

00:10:17,910 --> 00:10:23,880
around a year ago we we had an attempt

00:10:20,880 --> 00:10:25,680
at trying to make it available but for

00:10:23,880 --> 00:10:27,380
one reason or another we just didn't

00:10:25,680 --> 00:10:31,560
really make a very good job of that

00:10:27,380 --> 00:10:33,540
so perhaps loading data for scenarios

00:10:31,560 --> 00:10:38,180
that routes don't cover like dashboards

00:10:33,540 --> 00:10:38,180
is something that we can help with

00:10:39,300 --> 00:10:42,240
that was the drum a little bit I miss

00:10:41,290 --> 00:10:45,400
the drumroll

00:10:42,240 --> 00:10:46,840
Amba datablock cool so it's a new

00:10:45,400 --> 00:10:50,680
implementation of the data loader

00:10:46,840 --> 00:10:52,150
pattern very very new as in like when

00:10:50,680 --> 00:10:56,310
will tricked me to do this talk the

00:10:52,150 --> 00:11:01,150
other day since then it's been created

00:10:56,310 --> 00:11:04,360
so the main difference with this is it

00:11:01,150 --> 00:11:06,670
tries to basically if you know how to

00:11:04,360 --> 00:11:09,250
use routes you should know already how

00:11:06,670 --> 00:11:12,760
to use ember data blocks that's the

00:11:09,250 --> 00:11:15,070
theory so now I've got to do a demo to

00:11:12,760 --> 00:11:19,660
try and explain how that works cool ok

00:11:15,070 --> 00:11:21,400
so here you can see four examples where

00:11:19,660 --> 00:11:23,590
we're using it in slightly different

00:11:21,400 --> 00:11:26,710
ways just to kind of give you a feel for

00:11:23,590 --> 00:11:28,930
all the the common use cases that you

00:11:26,710 --> 00:11:30,910
might have for your routes and how we're

00:11:28,930 --> 00:11:36,040
handling it with an implementation on

00:11:30,910 --> 00:11:38,440
top of the amber data block so person

00:11:36,040 --> 00:11:40,150
data is the thing that we're honing

00:11:38,440 --> 00:11:44,500
around here and you can see in the first

00:11:40,150 --> 00:11:46,630
example very very simple person data if

00:11:44,500 --> 00:11:50,890
we go to see what the code looks like

00:11:46,630 --> 00:11:56,920
inside that basically for the most part

00:11:50,890 --> 00:11:58,630
we're just implementing a model hook is

00:11:56,920 --> 00:12:00,910
returning a promise which is quite nice

00:11:58,630 --> 00:12:03,460
I've got something going on down there

00:12:00,910 --> 00:12:05,170
just so that we can kind of imitate an

00:12:03,460 --> 00:12:07,690
error state as well for a later example

00:12:05,170 --> 00:12:09,820
if the ID isn't one that's going to

00:12:07,690 --> 00:12:11,320
return an error but that's not really

00:12:09,820 --> 00:12:15,370
what's important here what's important

00:12:11,320 --> 00:12:20,880
is that it should feel a bit like a root

00:12:15,370 --> 00:12:24,400
you can model hook return some data cool

00:12:20,880 --> 00:12:26,320
so let's just see it in action and if I

00:12:24,400 --> 00:12:29,890
hit refresh it's the top one you're

00:12:26,320 --> 00:12:32,200
looking at so that set timeout was

00:12:29,890 --> 00:12:34,960
around three seconds so for three

00:12:32,200 --> 00:12:36,700
seconds we just get blank that could be

00:12:34,960 --> 00:12:38,770
whilst the app is going to get some data

00:12:36,700 --> 00:12:42,070
from the server and then it just

00:12:38,770 --> 00:12:48,100
displays the template so very simple in

00:12:42,070 --> 00:12:50,720
the second example we've got a loading

00:12:48,100 --> 00:12:52,910
spinner so just passing in a string here

00:12:50,720 --> 00:12:54,230
but that could be a component because

00:12:52,910 --> 00:12:55,790
it's really just using the component

00:12:54,230 --> 00:12:57,470
helper under the hood so you could set

00:12:55,790 --> 00:13:00,680
up the component with your own arguments

00:12:57,470 --> 00:13:02,240
if you wanted to again very simple it's

00:13:00,680 --> 00:13:04,939
not exactly the same as routes because

00:13:02,240 --> 00:13:07,490
in routes you would put that in a folder

00:13:04,939 --> 00:13:09,889
somewhere but it's still I hope quite a

00:13:07,490 --> 00:13:12,259
simple way of just saying this is the

00:13:09,889 --> 00:13:15,470
loading template or component in this

00:13:12,259 --> 00:13:18,439
case that I want to use and you can see

00:13:15,470 --> 00:13:21,620
that as we load the page you get your

00:13:18,439 --> 00:13:23,569
nice loading spinner and then it comes

00:13:21,620 --> 00:13:26,560
up with a template very exciting

00:13:23,569 --> 00:13:30,920
template lots of work went into that

00:13:26,560 --> 00:13:33,500
okay so third example again quite

00:13:30,920 --> 00:13:36,740
similar we're just providing the the

00:13:33,500 --> 00:13:38,660
error component here and as I mentioned

00:13:36,740 --> 00:13:41,300
before we've got ID equals two which is

00:13:38,660 --> 00:13:44,689
going to kind of trick this into failing

00:13:41,300 --> 00:13:47,389
so in this case there's no loading

00:13:44,689 --> 00:13:50,689
spinner no loading template and it just

00:13:47,389 --> 00:13:55,930
comes up with the the template in the in

00:13:50,689 --> 00:13:58,490
the error component okay so there's one

00:13:55,930 --> 00:14:01,309
slightly more interesting example here

00:13:58,490 --> 00:14:03,410
so in routes you can do this thing where

00:14:01,309 --> 00:14:06,680
you return an object straight away and

00:14:03,410 --> 00:14:08,329
then if that were to be like an object

00:14:06,680 --> 00:14:10,459
promise proxy you could do something

00:14:08,329 --> 00:14:12,980
clever kind of like Amber data where you

00:14:10,459 --> 00:14:15,379
then fill in the values after you've

00:14:12,980 --> 00:14:18,519
given it back what this means is that

00:14:15,379 --> 00:14:20,779
you can build that UI straight away

00:14:18,519 --> 00:14:23,269
before you've actually loaded the data

00:14:20,779 --> 00:14:25,670
maybe you want to show someone the form

00:14:23,269 --> 00:14:27,829
before you've got the data to support

00:14:25,670 --> 00:14:29,569
the form and then you kind of want to

00:14:27,829 --> 00:14:31,939
make that active when you actually get

00:14:29,569 --> 00:14:35,089
the data so this is what this is going

00:14:31,939 --> 00:14:37,639
to do in a very simple set scenario so

00:14:35,089 --> 00:14:40,399
here I haven't got any data at the

00:14:37,639 --> 00:14:43,519
beginning and then when I get the data

00:14:40,399 --> 00:14:45,319
it fills in you could imagine that might

00:14:43,519 --> 00:14:48,019
enable the form when it gets the data

00:14:45,319 --> 00:14:52,220
from the server so it's all quite simple

00:14:48,019 --> 00:14:55,160
stuff but the idea here is it's not

00:14:52,220 --> 00:14:58,490
original necessarily but the idea is to

00:14:55,160 --> 00:15:01,279
stay as close as we can to the API and

00:14:58,490 --> 00:15:03,170
the features you would expect of routes

00:15:01,279 --> 00:15:04,220
rather than doing something very

00:15:03,170 --> 00:15:06,620
different like

00:15:04,220 --> 00:15:08,600
so if you'd like to help us build out a

00:15:06,620 --> 00:15:11,540
great primitive for loading data outside

00:15:08,600 --> 00:15:14,080
of routes then please do get involved if

00:15:11,540 --> 00:15:17,570
you are loading data outside of routes

00:15:14,080 --> 00:15:19,430
already found out some of you are then

00:15:17,570 --> 00:15:21,200
I'd like to hear about your use case see

00:15:19,430 --> 00:15:26,660
if this would work or or whether

00:15:21,200 --> 00:15:28,160
something else would be better so I'll

00:15:26,660 --> 00:15:31,010
just quickly mention other things to

00:15:28,160 --> 00:15:34,370
consider so this has been a story of

00:15:31,010 --> 00:15:38,210
what we tried and what worked in the end

00:15:34,370 --> 00:15:41,360
for us browsing and bradon's comm there

00:15:38,210 --> 00:15:42,860
were a few other things like it but I

00:15:41,360 --> 00:15:46,700
didn't find anything that tried to mimic

00:15:42,860 --> 00:15:49,990
the route API quite as closely as this

00:15:46,700 --> 00:15:54,260
attempt to so there might be interesting

00:15:49,990 --> 00:15:55,750
Amba concurrency so every concurrency

00:15:54,260 --> 00:15:59,480
makes a lot of this easier to work with

00:15:55,750 --> 00:16:02,050
but I still believe in a good data block

00:15:59,480 --> 00:16:04,280
primitive and that that's useful and

00:16:02,050 --> 00:16:06,140
removing the loading logic from view

00:16:04,280 --> 00:16:11,030
component so I just think it's a good

00:16:06,140 --> 00:16:13,370
thing so the other one the monolithic

00:16:11,030 --> 00:16:15,920
route it would perhaps solve the problem

00:16:13,370 --> 00:16:18,770
for if you have quite simple widgets in

00:16:15,920 --> 00:16:22,000
your dashboard but complex widgets would

00:16:18,770 --> 00:16:25,970
like staged loading of their own and

00:16:22,000 --> 00:16:28,100
kind of alternate display states that

00:16:25,970 --> 00:16:30,700
could get a bit messy trying to manage

00:16:28,100 --> 00:16:35,210
that in just one place in your app and

00:16:30,700 --> 00:16:36,890
then of course engines which kind of

00:16:35,210 --> 00:16:39,770
allow for better splitting of our cloud

00:16:36,890 --> 00:16:41,930
base maybe and we're actually hoping to

00:16:39,770 --> 00:16:45,920
investigate this soon to see if it's a

00:16:41,930 --> 00:16:48,980
good fit for our app however our current

00:16:45,920 --> 00:16:51,500
understanding is that it would still it

00:16:48,980 --> 00:16:53,420
wouldn't help much in adding structure

00:16:51,500 --> 00:16:55,970
to the loading of the data in a

00:16:53,420 --> 00:16:59,480
dashboard style app so I think we need

00:16:55,970 --> 00:17:02,270
to investigate that a bit more cool so

00:16:59,480 --> 00:17:04,820
that's all just want to say thanks to

00:17:02,270 --> 00:17:06,980
the team for helping on these solutions

00:17:04,820 --> 00:17:08,630
the difficult problems and thanks for

00:17:06,980 --> 00:17:12,650
will for tricking me into doing this

00:17:08,630 --> 00:17:15,080
over breakfast last Friday and yeah

00:17:12,650 --> 00:17:17,440
thanks if you've got any questions come

00:17:15,080 --> 00:17:22,549
and have a chat near tool

00:17:17,440 --> 00:17:22,549

YouTube URL: https://www.youtube.com/watch?v=3L89X7rbc3k


