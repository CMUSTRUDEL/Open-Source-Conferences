Title: Contextual Components and Forms - Ember London - August 2017
Publication date: 2018-03-19
Playlist: Ember London
Description: 
	Contextual Components and Forms

Will Raxworthy
Captions: 
	00:00:00,000 --> 00:00:06,660
today I wanted to talk about forms it's

00:00:02,760 --> 00:00:09,059
not that exciting really but it is

00:00:06,660 --> 00:00:12,349
something that we tend to have to work

00:00:09,059 --> 00:00:14,700
with a lot as kind of web developers and

00:00:12,349 --> 00:00:16,859
so I think it's like quite important

00:00:14,700 --> 00:00:19,020
especially if you have an application

00:00:16,859 --> 00:00:22,949
that relies extremely heavily on forms

00:00:19,020 --> 00:00:25,350
right if you have junior developers or

00:00:22,949 --> 00:00:27,359
even like yourselves as like you know

00:00:25,350 --> 00:00:28,920
senior or intermediate or whatever level

00:00:27,359 --> 00:00:32,250
you're at you kind of don't want to

00:00:28,920 --> 00:00:34,530
spend a long time having to repeat the

00:00:32,250 --> 00:00:36,320
same thing with forms so typically an

00:00:34,530 --> 00:00:38,460
app will have some sort of style guide

00:00:36,320 --> 00:00:40,950
you'll have to like apply the same

00:00:38,460 --> 00:00:43,800
classes you'll have to like kind of redo

00:00:40,950 --> 00:00:45,960
these defaults every time if you're

00:00:43,800 --> 00:00:50,190
sticking to this kind of typical HTML

00:00:45,960 --> 00:00:54,420
form structure and so I think maybe a

00:00:50,190 --> 00:00:57,090
year ago myself and one of our other

00:00:54,420 --> 00:00:58,829
front-end developers we got together and

00:00:57,090 --> 00:01:01,649
kind of sat down and thought okay what

00:00:58,829 --> 00:01:05,299
would what would a form look like if we

00:01:01,649 --> 00:01:07,979
were to create something for ourselves

00:01:05,299 --> 00:01:11,010
and we decided that it had to have

00:01:07,979 --> 00:01:12,930
convention over configuration to kind of

00:01:11,010 --> 00:01:16,290
stick with thee with the Ember kind of

00:01:12,930 --> 00:01:18,180
you know ethos and so it would try and

00:01:16,290 --> 00:01:20,130
provide things like sane defaults and

00:01:18,180 --> 00:01:21,150
you know kind of make decisions that we

00:01:20,130 --> 00:01:22,970
thought would be best for our

00:01:21,150 --> 00:01:26,340
application and for our developers and

00:01:22,970 --> 00:01:30,030
it had to really what it boiled down to

00:01:26,340 --> 00:01:32,700
was it had to provide minimal fuss but

00:01:30,030 --> 00:01:34,470
also complete flexibility so we had to

00:01:32,700 --> 00:01:36,990
provide these same defaults but allow

00:01:34,470 --> 00:01:38,540
any developer at any point in time to

00:01:36,990 --> 00:01:41,820
jump in and do things their way right

00:01:38,540 --> 00:01:43,350
because one solution doesn't always fit

00:01:41,820 --> 00:01:47,610
all especially when it comes to things

00:01:43,350 --> 00:01:50,310
like forms and and it kind of had to be

00:01:47,610 --> 00:01:53,939
like you know at its base and it's very

00:01:50,310 --> 00:01:56,579
kind of basic implementation pretty

00:01:53,939 --> 00:01:59,369
simple easy to understand had to follow

00:01:56,579 --> 00:02:00,930
things like normal HTML conventions when

00:01:59,369 --> 00:02:02,310
it came to things like events and other

00:02:00,930 --> 00:02:05,909
properties that you had attached to

00:02:02,310 --> 00:02:07,860
these yeah so you start with something

00:02:05,909 --> 00:02:09,869
like this which is a fairly simple form

00:02:07,860 --> 00:02:12,180
and this is a form taken from our

00:02:09,869 --> 00:02:14,099
application and this is actually using

00:02:12,180 --> 00:02:17,020
the

00:02:14,099 --> 00:02:18,879
solution that we came up with but this

00:02:17,020 --> 00:02:22,239
isn't actually very difficult right this

00:02:18,879 --> 00:02:24,760
is one of the most simplest forms in our

00:02:22,239 --> 00:02:27,489
application we have a text area we have

00:02:24,760 --> 00:02:28,840
like some errors here because the

00:02:27,489 --> 00:02:31,930
address can't be blank we have a

00:02:28,840 --> 00:02:34,720
selector which is a country's US states

00:02:31,930 --> 00:02:37,450
quantities which is a number field and

00:02:34,720 --> 00:02:39,040
then another message text area down the

00:02:37,450 --> 00:02:42,910
bottom and then two buttons save and

00:02:39,040 --> 00:02:45,790
close so there's a very simple form but

00:02:42,910 --> 00:02:48,489
then you get also quite complex forms so

00:02:45,790 --> 00:02:50,440
this is another form that we have which

00:02:48,489 --> 00:02:53,049
is probably one of the most complex

00:02:50,440 --> 00:02:55,269
forms in our application I would say

00:02:53,049 --> 00:02:57,370
second most complex but we have a

00:02:55,269 --> 00:02:59,829
selector which searches every user that

00:02:57,370 --> 00:03:01,630
works here at the company we have a

00:02:59,829 --> 00:03:04,630
client contact which belongs to like a

00:03:01,630 --> 00:03:07,599
different model we have other select

00:03:04,630 --> 00:03:09,040
boxes we have this duration field client

00:03:07,599 --> 00:03:11,950
availability a whole bunch of things

00:03:09,040 --> 00:03:13,209
going on and to add to that there's a

00:03:11,950 --> 00:03:15,519
lot of stuff that's going on in the

00:03:13,209 --> 00:03:19,600
background right so we have a whole date

00:03:15,519 --> 00:03:21,040
picker over here that has like it yields

00:03:19,600 --> 00:03:22,500
each day and then each day can have

00:03:21,040 --> 00:03:25,510
different properties attached to that

00:03:22,500 --> 00:03:28,750
this field is actually displayed in

00:03:25,510 --> 00:03:31,030
minutes but it's stored in seconds here

00:03:28,750 --> 00:03:34,000
we have time zones which is you know a

00:03:31,030 --> 00:03:37,180
whole world on to its own but here we're

00:03:34,000 --> 00:03:39,819
like converting this is a conversion of

00:03:37,180 --> 00:03:42,549
that time zone against this time zone

00:03:39,819 --> 00:03:44,889
and then we display that output there we

00:03:42,549 --> 00:03:46,930
have actions we have radio buttons we

00:03:44,889 --> 00:03:49,510
have like combined fields down the

00:03:46,930 --> 00:03:51,730
bottom here so it's like very complex

00:03:49,510 --> 00:03:54,370
form and this is the exact type of thing

00:03:51,730 --> 00:03:56,950
that we wanted to set out to solve we

00:03:54,370 --> 00:03:58,359
wanted to say how can we say how can we

00:03:56,950 --> 00:04:00,730
build something that takes something

00:03:58,359 --> 00:04:01,989
like a very simple form all the way

00:04:00,730 --> 00:04:04,239
through to something that's a little bit

00:04:01,989 --> 00:04:07,870
more complex and still carry the same

00:04:04,239 --> 00:04:10,060
conventions and yeah it was it was a

00:04:07,870 --> 00:04:11,560
little bit challenging but I think we

00:04:10,060 --> 00:04:14,500
what we what we ended up coming up with

00:04:11,560 --> 00:04:18,760
I don't think is unique mmm I think it's

00:04:14,500 --> 00:04:20,829
been done before with other forms though

00:04:18,760 --> 00:04:22,890
I think some aspects of it I like pretty

00:04:20,829 --> 00:04:25,479
pretty interesting and quite unique and

00:04:22,890 --> 00:04:27,160
so yeah what we wanted to have was field

00:04:25,479 --> 00:04:29,440
areas labels we wanted to be

00:04:27,160 --> 00:04:31,120
to disable fields we want to be able to

00:04:29,440 --> 00:04:34,420
disable the whole form if we wanted to

00:04:31,120 --> 00:04:36,700
we wanted consistent styles so that the

00:04:34,420 --> 00:04:38,290
developer never has to think about you

00:04:36,700 --> 00:04:39,910
know if they have an input they

00:04:38,290 --> 00:04:41,590
shouldn't have to think like what class

00:04:39,910 --> 00:04:43,480
do I need to attach to this input to get

00:04:41,590 --> 00:04:46,810
it to look like the 50 million other

00:04:43,480 --> 00:04:49,180
inputs in my app it should be easy for

00:04:46,810 --> 00:04:50,650
testing if we're building our informed

00:04:49,180 --> 00:04:51,790
then we should like take liberty right

00:04:50,650 --> 00:04:54,340
and we should add things they're gonna

00:04:51,790 --> 00:04:55,890
make testing easier for us and then we

00:04:54,340 --> 00:04:59,020
can build helpers on top of that as well

00:04:55,890 --> 00:05:00,280
and it should also be really adaptable

00:04:59,020 --> 00:05:01,810
so it should be able to support future

00:05:00,280 --> 00:05:05,560
field types so it should be very

00:05:01,810 --> 00:05:07,270
pluggable and and we're always thinking

00:05:05,560 --> 00:05:08,800
right we always wanted to get to this

00:05:07,270 --> 00:05:10,780
like minimal fuss but complete

00:05:08,800 --> 00:05:13,090
flexibility that was the aim over

00:05:10,780 --> 00:05:17,530
everything and yeah it was like a bit of

00:05:13,090 --> 00:05:19,690
a challenge for for Andre and I and

00:05:17,530 --> 00:05:22,750
really there are two things that you

00:05:19,690 --> 00:05:24,840
need to kind of to grasp in order to to

00:05:22,750 --> 00:05:27,610
understand how the form works

00:05:24,840 --> 00:05:29,170
the first one is contextual components

00:05:27,610 --> 00:05:32,200
is everyone familiar with contextual

00:05:29,170 --> 00:05:34,300
components okay cool that should be easy

00:05:32,200 --> 00:05:38,050
and then the second one is this concept

00:05:34,300 --> 00:05:39,850
of project proxy objects or change sets

00:05:38,050 --> 00:05:42,540
if you've used Ember change set are

00:05:39,850 --> 00:05:45,490
people familiar with these as well okay

00:05:42,540 --> 00:05:48,730
I'm gonna go over them anyway but what

00:05:45,490 --> 00:05:50,980
are contextual components so I think it

00:05:48,730 --> 00:05:52,120
was like a year and a half ago maybe a

00:05:50,980 --> 00:05:54,940
little bit longer maybe a little bit

00:05:52,120 --> 00:05:56,919
shorter give or take a few months but

00:05:54,940 --> 00:05:59,100
you previously if you wanted to have

00:05:56,919 --> 00:06:01,660
this concept of like a nested component

00:05:59,100 --> 00:06:03,910
you couldn't really do it so you could

00:06:01,660 --> 00:06:07,300
namespace them but you couldn't have

00:06:03,910 --> 00:06:09,610
like a concept of like this component so

00:06:07,300 --> 00:06:12,160
in this instance you have my component

00:06:09,610 --> 00:06:14,890
you pass in a user it might need some

00:06:12,160 --> 00:06:16,960
knowledge about like that user then you

00:06:14,890 --> 00:06:19,060
have a label and input errors select and

00:06:16,960 --> 00:06:22,060
you couldn't have this concept of like

00:06:19,060 --> 00:06:25,419
well these label or this label component

00:06:22,060 --> 00:06:26,950
is actually a child of my component

00:06:25,419 --> 00:06:28,990
right if there's a there's an inherent

00:06:26,950 --> 00:06:31,540
relationship there and that could only

00:06:28,990 --> 00:06:33,730
be defined by the name spacing or by the

00:06:31,540 --> 00:06:36,430
structure of your application in the

00:06:33,730 --> 00:06:37,780
folders that was and and also you have

00:06:36,430 --> 00:06:40,150
like you know you have a bunch of

00:06:37,780 --> 00:06:40,930
repetitiveness here so you have the user

00:06:40,150 --> 00:06:42,669
and

00:06:40,930 --> 00:06:44,289
because there's no shared context here

00:06:42,669 --> 00:06:46,690
you have to pass the user into each one

00:06:44,289 --> 00:06:48,280
and I think a lot of us would probably

00:06:46,690 --> 00:06:50,800
have situations like this and some of

00:06:48,280 --> 00:06:53,169
our apps I know we do with some some

00:06:50,800 --> 00:06:55,120
widgets and weird things like that where

00:06:53,169 --> 00:06:57,130
they've got headers and then content and

00:06:55,120 --> 00:06:59,620
then footers and but this was a pretty

00:06:57,130 --> 00:07:01,780
typical scenario but obviously it's like

00:06:59,620 --> 00:07:03,039
not very good it's not ideal there's a

00:07:01,780 --> 00:07:04,720
lot of repetitive notes it's not very

00:07:03,039 --> 00:07:07,139
clear it's not very easy to read and

00:07:04,720 --> 00:07:07,139
understand

00:07:07,650 --> 00:07:14,229
so the solution they came up with was

00:07:10,870 --> 00:07:16,750
this idea of a component helper so we're

00:07:14,229 --> 00:07:18,990
all familiar with helpers I have white

00:07:16,750 --> 00:07:23,050
space there and that's driving me nuts

00:07:18,990 --> 00:07:25,240
but you have this concept of the hash

00:07:23,050 --> 00:07:28,410
helper people familiar with the hash

00:07:25,240 --> 00:07:32,530
helper essentially it will take these

00:07:28,410 --> 00:07:33,880
this is actually wrong but that's okay

00:07:32,530 --> 00:07:35,650
we'll roll with it

00:07:33,880 --> 00:07:38,110
but essentially will yield this hash and

00:07:35,650 --> 00:07:41,800
what you would have is you would say

00:07:38,110 --> 00:07:44,289
like you know label equals component and

00:07:41,800 --> 00:07:46,449
then you would have input equals

00:07:44,289 --> 00:07:48,220
component errors equals component and

00:07:46,449 --> 00:07:50,979
you can kind of think of that as like a

00:07:48,220 --> 00:07:52,750
normal object and the key will be label

00:07:50,979 --> 00:07:55,360
and the value will be this component

00:07:52,750 --> 00:07:58,030
which is not actually evaluated yet it's

00:07:55,360 --> 00:08:00,010
not evaluated to you call call on that

00:07:58,030 --> 00:08:03,039
argument that's yielding out into that

00:08:00,010 --> 00:08:05,260
hash and so this is basically the the

00:08:03,039 --> 00:08:09,070
essence of contextual components because

00:08:05,260 --> 00:08:11,080
now I no longer need to as a developer

00:08:09,070 --> 00:08:12,340
right not as an add-on implementer so

00:08:11,080 --> 00:08:13,720
this is what you would have is an add-on

00:08:12,340 --> 00:08:16,210
implementer and you still have this

00:08:13,720 --> 00:08:17,949
concept of like repetition here but I

00:08:16,210 --> 00:08:19,630
think that's okay that's okay because as

00:08:17,949 --> 00:08:22,120
an add-on developer you're designing an

00:08:19,630 --> 00:08:24,039
API you're not like reusing this in

00:08:22,120 --> 00:08:25,870
multiple areas of your application but

00:08:24,039 --> 00:08:28,120
as a developer you just want the

00:08:25,870 --> 00:08:29,440
benefits of this and that's what this

00:08:28,120 --> 00:08:31,300
help is all about that's what this

00:08:29,440 --> 00:08:33,159
contextual component is all about it's

00:08:31,300 --> 00:08:34,810
designed to make it easier for add-on

00:08:33,159 --> 00:08:36,640
developers and for like you know

00:08:34,810 --> 00:08:38,800
developers in your team to build

00:08:36,640 --> 00:08:40,839
components that expose some level of an

00:08:38,800 --> 00:08:45,040
API to make the job easier of building

00:08:40,839 --> 00:08:47,649
your application and so yeah you can see

00:08:45,040 --> 00:08:51,339
here that I pass in user to my top level

00:08:47,649 --> 00:08:53,320
so this is my component jeaious and I

00:08:51,339 --> 00:08:56,459
pass in disabled here and then I can

00:08:53,320 --> 00:08:56,459
pass this in to each one

00:08:57,280 --> 00:09:01,220
and then essentially what that's going

00:08:59,510 --> 00:09:04,790
to look like we'll look at in a bit

00:09:01,220 --> 00:09:07,190
but then I changes the the thing here

00:09:04,790 --> 00:09:09,140
quite dramatically because I can yield I

00:09:07,190 --> 00:09:10,550
get an argument back called like

00:09:09,140 --> 00:09:12,290
component or something I can name it

00:09:10,550 --> 00:09:15,110
whatever I want and then all I need to

00:09:12,290 --> 00:09:16,790
do is component label and that's it I

00:09:15,110 --> 00:09:18,980
don't need to do the disabled or the

00:09:16,790 --> 00:09:21,410
user anymore because that's all getting

00:09:18,980 --> 00:09:25,790
passed in through the my component

00:09:21,410 --> 00:09:29,690
component okay so that's contextual

00:09:25,790 --> 00:09:32,180
components what our proxy objects I'm

00:09:29,690 --> 00:09:34,610
sure in some of our applications or

00:09:32,180 --> 00:09:36,080
perhaps like earlier on in the days of

00:09:34,610 --> 00:09:37,940
ember this would have been a pretty

00:09:36,080 --> 00:09:39,410
typical scenario so you would have had

00:09:37,940 --> 00:09:41,600
your form it would have had first name

00:09:39,410 --> 00:09:43,430
last name email and that was probably

00:09:41,600 --> 00:09:45,530
directly to we're bound to like your

00:09:43,430 --> 00:09:48,500
model or some form of that perhaps like

00:09:45,530 --> 00:09:50,180
a an alias on your controller or your

00:09:48,500 --> 00:09:53,690
component but this was a pretty typical

00:09:50,180 --> 00:09:56,000
scenario but this is not ideal because

00:09:53,690 --> 00:09:58,280
the embassy or is global and so that

00:09:56,000 --> 00:10:00,260
state when you mutate it is changed

00:09:58,280 --> 00:10:02,960
everywhere in your application and then

00:10:00,260 --> 00:10:04,850
you as a developer you're now you've

00:10:02,960 --> 00:10:06,890
gone from you know trying to update

00:10:04,850 --> 00:10:09,830
first name to having to go back and

00:10:06,890 --> 00:10:11,270
rollback global state and that just

00:10:09,830 --> 00:10:15,200
shouldn't be like a concern that we have

00:10:11,270 --> 00:10:17,960
to worry about and so there's this

00:10:15,200 --> 00:10:19,970
concept of a proxy object I think in

00:10:17,960 --> 00:10:23,630
amber it's like amber dot object proxy

00:10:19,970 --> 00:10:25,610
and or changesets so these are kind of

00:10:23,630 --> 00:10:27,710
similar things change set is a similar

00:10:25,610 --> 00:10:31,160
concept but essentially what you're

00:10:27,710 --> 00:10:33,940
doing is you're populating your proxy

00:10:31,160 --> 00:10:37,040
object using defaults from the content

00:10:33,940 --> 00:10:38,900
and then when you change these you're

00:10:37,040 --> 00:10:41,600
only changing them on this proxy object

00:10:38,900 --> 00:10:43,970
or this change set and only when that

00:10:41,600 --> 00:10:47,150
changed set for this like kind of middle

00:10:43,970 --> 00:10:48,740
person here is valid or is in a state

00:10:47,150 --> 00:10:51,500
that you're happy with do you then

00:10:48,740 --> 00:10:54,740
persist that back and the advantage of

00:10:51,500 --> 00:10:57,500
this is that if my user decides to fill

00:10:54,740 --> 00:10:59,780
in this form and then cancel because

00:10:57,500 --> 00:11:01,580
this is all within a component I don't

00:10:59,780 --> 00:11:03,800
have to do any cleanup I just have to

00:11:01,580 --> 00:11:05,330
throw it all away and forget that the

00:11:03,800 --> 00:11:07,370
thing ever happened I'm not mutated any

00:11:05,330 --> 00:11:08,510
global state here all I've done is

00:11:07,370 --> 00:11:10,340
create an object

00:11:08,510 --> 00:11:14,480
populate with some defaults and then

00:11:10,340 --> 00:11:16,850
throw it away and so that's kind of the

00:11:14,480 --> 00:11:19,550
concept of a proxy object or or change

00:11:16,850 --> 00:11:21,140
that and so yeah these give us like

00:11:19,550 --> 00:11:25,130
really good things though things that

00:11:21,140 --> 00:11:27,530
don't necessarily that easy to use on an

00:11:25,130 --> 00:11:29,570
on an ember model and because these can

00:11:27,530 --> 00:11:31,460
be just plain pojos these don't have to

00:11:29,570 --> 00:11:33,080
be anything special and so because of

00:11:31,460 --> 00:11:35,480
that we can create our own conventions

00:11:33,080 --> 00:11:37,100
around these so we can do validations we

00:11:35,480 --> 00:11:38,720
can have temporary properties like

00:11:37,100 --> 00:11:40,880
password and then password confirmation

00:11:38,720 --> 00:11:42,170
and then we can have something in there

00:11:40,880 --> 00:11:44,570
like a function that compares them to

00:11:42,170 --> 00:11:46,940
make sure they're correct and we don't

00:11:44,570 --> 00:11:49,700
have needless store creation so if I

00:11:46,940 --> 00:11:53,060
want to create a new record I don't have

00:11:49,700 --> 00:11:54,800
to create that until the object that I'm

00:11:53,060 --> 00:11:57,110
actually mutating this proxy object is

00:11:54,800 --> 00:11:59,990
in a valid state and can be persisted

00:11:57,110 --> 00:12:02,050
back and I also avoid two-way binding

00:11:59,990 --> 00:12:04,970
and I stick to this principle of actions

00:12:02,050 --> 00:12:09,950
actions up data down or data down

00:12:04,970 --> 00:12:13,130
actions up one of the two okay so back

00:12:09,950 --> 00:12:18,680
to forms and so this is really a kind of

00:12:13,130 --> 00:12:22,190
brief look of how we do the forms at

00:12:18,680 --> 00:12:24,680
alpha sites there's like a lot more in

00:12:22,190 --> 00:12:26,480
here that I would that I would love to

00:12:24,680 --> 00:12:28,190
cover but honestly I could keep going

00:12:26,480 --> 00:12:31,490
forever so I kind of have to like scope

00:12:28,190 --> 00:12:35,960
myself and mm-hmm but essentially this

00:12:31,490 --> 00:12:37,580
is this is the X form component okay so

00:12:35,960 --> 00:12:41,210
if you think about our my component

00:12:37,580 --> 00:12:42,620
before this is the component that we've

00:12:41,210 --> 00:12:46,940
generated the form component and it's

00:12:42,620 --> 00:12:50,210
called X form because naming things is

00:12:46,940 --> 00:12:52,250
hard and so here we have just a plain

00:12:50,210 --> 00:12:54,650
component and what this does is it

00:12:52,250 --> 00:12:56,900
yields out a few different contextual

00:12:54,650 --> 00:12:59,210
components this isn't an exhaustive list

00:12:56,900 --> 00:13:01,490
like I cut this down a little bit to

00:12:59,210 --> 00:13:03,020
kind of simplify it but we have a text

00:13:01,490 --> 00:13:04,790
area actually I should start at the

00:13:03,020 --> 00:13:06,740
start the first thing you get passed in

00:13:04,790 --> 00:13:09,680
is a change set and then a global

00:13:06,740 --> 00:13:12,650
disabled fault sorry global disabled

00:13:09,680 --> 00:13:15,950
state and the reason for this is because

00:13:12,650 --> 00:13:18,770
as if you imagine that your application

00:13:15,950 --> 00:13:20,270
uses modal's or they go to a page and

00:13:18,770 --> 00:13:21,699
then you require to load like you know

00:13:20,270 --> 00:13:23,619
five other different models

00:13:21,699 --> 00:13:25,419
like in the case of that scheduling form

00:13:23,619 --> 00:13:26,919
that we had before you don't want your

00:13:25,419 --> 00:13:28,419
users to be able to interact with this

00:13:26,919 --> 00:13:30,459
form yet right because it's not ready

00:13:28,419 --> 00:13:33,489
and so we have the option here to just

00:13:30,459 --> 00:13:35,040
pass disabled in as true and that can be

00:13:33,489 --> 00:13:37,509
running off something like an ember

00:13:35,040 --> 00:13:40,629
concurrency task and as soon as that

00:13:37,509 --> 00:13:42,249
task stops running and is idle the whole

00:13:40,629 --> 00:13:44,019
form will be enabled and all that data

00:13:42,249 --> 00:13:45,999
will be in there so we can use ember

00:13:44,019 --> 00:13:48,249
concurrency tasks now to control the

00:13:45,999 --> 00:13:49,689
whole state of our form with just one

00:13:48,249 --> 00:13:51,669
property and because we're using

00:13:49,689 --> 00:13:54,279
contextual components these just get

00:13:51,669 --> 00:13:56,259
passed into every other field and then

00:13:54,279 --> 00:13:58,299
we have like classes which get applied

00:13:56,259 --> 00:14:00,429
and then the X form has like a special

00:13:58,299 --> 00:14:02,319
CSS file which then makes everything

00:14:00,429 --> 00:14:05,709
look the same right so everything can be

00:14:02,319 --> 00:14:08,019
disabled there is a drawback here which

00:14:05,709 --> 00:14:10,809
I'll go into later which I'm still

00:14:08,019 --> 00:14:13,929
trying to solve and so we yield out a

00:14:10,809 --> 00:14:15,549
hash we have text areas select and under

00:14:13,929 --> 00:14:18,160
the hood this select is really just a

00:14:15,549 --> 00:14:19,600
power select so we're doing you're doing

00:14:18,160 --> 00:14:21,369
that whole concept of like you know

00:14:19,600 --> 00:14:26,049
there are these solutions out there that

00:14:21,369 --> 00:14:29,529
exist things like power select or power

00:14:26,049 --> 00:14:31,149
calendar that are really great right and

00:14:29,529 --> 00:14:33,039
we don't want to lose those benefits by

00:14:31,149 --> 00:14:34,689
like trying to reinvent the wheel so

00:14:33,039 --> 00:14:36,999
what we've done here is we yield out a

00:14:34,689 --> 00:14:38,319
select and the underlying component

00:14:36,999 --> 00:14:40,929
there is actually just a Power select

00:14:38,319 --> 00:14:43,329
and then we provide like defaults even

00:14:40,929 --> 00:14:46,299
on to that Power select and we have a

00:14:43,329 --> 00:14:47,129
plain old input and then a button and a

00:14:46,299 --> 00:14:50,230
label

00:14:47,129 --> 00:14:52,149
okay so if we dive in to that input

00:14:50,230 --> 00:14:55,809
component this is what that input

00:14:52,149 --> 00:14:57,549
component looks like and if you imagine

00:14:55,809 --> 00:14:59,529
what a form is and you imagine what a

00:14:57,549 --> 00:15:01,989
field or what we call an element is

00:14:59,529 --> 00:15:04,179
we've decided that elements are made up

00:15:01,989 --> 00:15:07,119
of three things an element on a form is

00:15:04,179 --> 00:15:10,419
made up of a label a field and an error

00:15:07,119 --> 00:15:12,189
list and and so you have in that first

00:15:10,419 --> 00:15:14,980
example the label would have been named

00:15:12,189 --> 00:15:17,589
the field will be whatever the input is

00:15:14,980 --> 00:15:21,959
for that particular element and then the

00:15:17,589 --> 00:15:25,869
error list is basically a list of errors

00:15:21,959 --> 00:15:27,730
and so at any point you can use all of

00:15:25,869 --> 00:15:29,799
these you can use none of these if you

00:15:27,730 --> 00:15:32,019
want just the field you don't have to

00:15:29,799 --> 00:15:35,169
have the label you just wouldn't do like

00:15:32,019 --> 00:15:35,710
form dot label or whatever if you don't

00:15:35,169 --> 00:15:43,350
want

00:15:35,710 --> 00:15:45,580
field for example you can do that yep I

00:15:43,350 --> 00:15:46,960
have an example later where I can

00:15:45,580 --> 00:15:49,480
actually demonstrate some of this in

00:15:46,960 --> 00:15:50,920
action and so if we dive down a little

00:15:49,480 --> 00:15:53,920
bit further let's have a look at the

00:15:50,920 --> 00:15:56,140
field and so here we we have like this

00:15:53,920 --> 00:15:58,779
is an example of like taking a bit of

00:15:56,140 --> 00:16:01,350
Liberty as an add-on developer or as

00:15:58,779 --> 00:16:04,150
like a kind of developer building an API

00:16:01,350 --> 00:16:07,240
in this an it where we define a computer

00:16:04,150 --> 00:16:09,790
property but essentially it's like a

00:16:07,240 --> 00:16:12,490
very simple thing write the tag name is

00:16:09,790 --> 00:16:14,560
just input then we have a few attribute

00:16:12,490 --> 00:16:17,380
bindings for some normal kind of HTML

00:16:14,560 --> 00:16:20,410
attributes value disabled Rideau in the

00:16:17,380 --> 00:16:22,300
placeholder type right so we have

00:16:20,410 --> 00:16:24,610
default support for things like number

00:16:22,300 --> 00:16:27,220
or email or website or anything like

00:16:24,610 --> 00:16:29,620
that and then we apply our like kind of

00:16:27,220 --> 00:16:32,890
class names which is specific to this

00:16:29,620 --> 00:16:36,070
particular X form we do things like auto

00:16:32,890 --> 00:16:38,529
focus so these are things that there is

00:16:36,070 --> 00:16:41,620
an html5 attribute which is auto focus

00:16:38,529 --> 00:16:43,839
but that only works if the page loads

00:16:41,620 --> 00:16:46,540
and it's not and it's the only input on

00:16:43,839 --> 00:16:49,480
the page right if you have a component

00:16:46,540 --> 00:16:49,720
that is in a modal or something like

00:16:49,480 --> 00:16:51,850
that

00:16:49,720 --> 00:16:53,950
auto focus doesn't always work in that

00:16:51,850 --> 00:16:55,360
instance so here again we can take

00:16:53,950 --> 00:16:57,700
liberties and we can say if you've

00:16:55,360 --> 00:17:01,360
provided auto focus we do some like

00:16:57,700 --> 00:17:04,780
quirky jQuery stuff in here to select it

00:17:01,360 --> 00:17:09,040
which I removed I think to to hide that

00:17:04,780 --> 00:17:10,870
shame and then we do a few more things

00:17:09,040 --> 00:17:16,209
in the init so we do we define like a

00:17:10,870 --> 00:17:19,150
property here - to watch the value which

00:17:16,209 --> 00:17:21,189
I'll get into in the example so each

00:17:19,150 --> 00:17:23,920
element also has a property which

00:17:21,189 --> 00:17:26,679
reflects it tells that element what

00:17:23,920 --> 00:17:29,260
field in the change set or proxy object

00:17:26,679 --> 00:17:33,760
it's responsible for because by default

00:17:29,260 --> 00:17:34,900
that this knows how to update itself but

00:17:33,760 --> 00:17:36,550
that doesn't mean that you can't change

00:17:34,900 --> 00:17:38,320
it which I'll dive into in a bit and

00:17:36,550 --> 00:17:40,000
then we provide like you know the

00:17:38,320 --> 00:17:42,490
default actions as well so we expose

00:17:40,000 --> 00:17:43,960
those so we say if you've provided as a

00:17:42,490 --> 00:17:46,450
developer if you've provided me an

00:17:43,960 --> 00:17:47,830
action on input I'm just going to yield

00:17:46,450 --> 00:17:49,570
up and I'm gonna give you the event and

00:17:47,830 --> 00:17:52,359
it's up to you what you want to do

00:17:49,570 --> 00:17:54,220
if you don't provide that action then

00:17:52,359 --> 00:17:57,009
the default is to just set that property

00:17:54,220 --> 00:17:59,229
on to the change set or the proxy object

00:17:57,009 --> 00:18:00,789
that you've passed in so always trying

00:17:59,229 --> 00:18:03,519
to think like what is the same default

00:18:00,789 --> 00:18:06,009
here what's the expected thing but then

00:18:03,519 --> 00:18:07,389
providing that complete flexibility for

00:18:06,009 --> 00:18:11,639
the developer to jump in and do whatever

00:18:07,389 --> 00:18:17,769
they want basically what this slide says

00:18:11,639 --> 00:18:22,869
okay so an example so here we have a

00:18:17,769 --> 00:18:26,019
form I'll bring up the example

00:18:22,869 --> 00:18:29,019
controller and so here we have a

00:18:26,019 --> 00:18:30,190
controller the route is just example we

00:18:29,019 --> 00:18:31,869
don't have a route we don't have like a

00:18:30,190 --> 00:18:33,690
real ember model either so you'll just

00:18:31,869 --> 00:18:36,909
have to like imagine that a little bit

00:18:33,690 --> 00:18:38,649
but in a knit we create this model which

00:18:36,909 --> 00:18:41,649
you typically wouldn't do because the

00:18:38,649 --> 00:18:43,210
controller is a singleton so this would

00:18:41,649 --> 00:18:45,159
only get loaded once so typically this

00:18:43,210 --> 00:18:47,320
would happen in a route so you'll have

00:18:45,159 --> 00:18:48,970
to forgive me but then we set this real

00:18:47,320 --> 00:18:51,909
model so we're basically like faking the

00:18:48,970 --> 00:18:55,029
route action you can see here that age

00:18:51,909 --> 00:18:56,769
right is stored in months so I'm trying

00:18:55,029 --> 00:18:57,999
to like replicate this tricky situation

00:18:56,769 --> 00:19:00,669
of something that's stored but then

00:18:57,999 --> 00:19:02,409
displayed differently then we have an

00:19:00,669 --> 00:19:04,119
action which is log objects which you'll

00:19:02,409 --> 00:19:09,279
see when we get to the form and then

00:19:04,119 --> 00:19:14,109
another action there to set the age so

00:19:09,279 --> 00:19:16,599
this is the form and so this is what it

00:19:14,109 --> 00:19:21,849
looks like in code this is what it looks

00:19:16,599 --> 00:19:23,470
like on the on the page itself first

00:19:21,849 --> 00:19:29,889
name will last name raxworthy

00:19:23,470 --> 00:19:31,960
age 30 and and so yeah so if we walk

00:19:29,889 --> 00:19:35,259
through this form a little bit first we

00:19:31,960 --> 00:19:37,269
use the X form component I've used class

00:19:35,259 --> 00:19:40,659
names here because I like didn't want to

00:19:37,269 --> 00:19:42,399
kind of do my own CSS so I copied from a

00:19:40,659 --> 00:19:43,960
from a previous form just to get the

00:19:42,399 --> 00:19:45,789
kind of spacing and stuff like that

00:19:43,960 --> 00:19:48,489
right and put it in the middle of the of

00:19:45,789 --> 00:19:50,710
the page I'm using a change set so we

00:19:48,489 --> 00:19:52,149
use change sets by default but really

00:19:50,710 --> 00:19:56,080
this could be anything this could be a

00:19:52,149 --> 00:19:58,989
member object proxy it could be a POJO

00:19:56,080 --> 00:20:01,389
it could be whatever you want we just

00:19:58,989 --> 00:20:03,730
use change sets and and then in response

00:20:01,389 --> 00:20:06,640
or what gets yielded out to you there

00:20:03,730 --> 00:20:08,680
this forum this component but you also

00:20:06,640 --> 00:20:10,060
get that changed setback and this is

00:20:08,680 --> 00:20:12,790
really important because this is what

00:20:10,060 --> 00:20:15,490
lets you have that complete fix of

00:20:12,790 --> 00:20:18,250
flexibility over what your what your

00:20:15,490 --> 00:20:20,200
form elements will do and then we have

00:20:18,250 --> 00:20:22,150
an input so we do formed our input I

00:20:20,200 --> 00:20:26,440
tell it which property this element is

00:20:22,150 --> 00:20:29,380
looking after which is named I have a

00:20:26,440 --> 00:20:33,820
label first name by default so if I was

00:20:29,380 --> 00:20:35,440
to get rid of this and just do this by

00:20:33,820 --> 00:20:37,120
default that's just going to take the

00:20:35,440 --> 00:20:39,460
property name that I have and capitalize

00:20:37,120 --> 00:20:42,130
it and just do name I don't know that

00:20:39,460 --> 00:20:44,560
seemed reasonable when we did it but you

00:20:42,130 --> 00:20:46,180
can override that you can yield out and

00:20:44,560 --> 00:20:48,520
you can do whatever you want you can

00:20:46,180 --> 00:20:50,230
have a label that is like a select box

00:20:48,520 --> 00:20:52,480
now you can have a label that is a

00:20:50,230 --> 00:20:54,960
picture or like gif or something like

00:20:52,480 --> 00:20:57,850
that right you can do whatever you want

00:20:54,960 --> 00:21:01,090
or you can just put first name or you

00:20:57,850 --> 00:21:02,980
can just have the default and then we do

00:21:01,090 --> 00:21:05,560
the input field and this is this bit

00:21:02,980 --> 00:21:07,540
here so you can see already right we've

00:21:05,560 --> 00:21:10,480
created this change set it's backed by a

00:21:07,540 --> 00:21:14,140
real model which was named will lastname

00:21:10,480 --> 00:21:15,610
raxworthy and just by doing this it's

00:21:14,140 --> 00:21:18,520
given me this input which then

00:21:15,610 --> 00:21:21,880
pre-populates my default values in there

00:21:18,520 --> 00:21:23,530
and ok so we have the same thing for

00:21:21,880 --> 00:21:25,390
last name and then we have age again

00:21:23,530 --> 00:21:28,630
which I'll get to in a second and then

00:21:25,390 --> 00:21:31,510
down here we have we have a button and

00:21:28,630 --> 00:21:33,340
so we have this concept of a primary

00:21:31,510 --> 00:21:35,350
button and then we have a concept of

00:21:33,340 --> 00:21:37,330
like a secondary button which is just

00:21:35,350 --> 00:21:43,390
like a cancer or something like that

00:21:37,330 --> 00:21:45,490
oh can everyone see that and so yeah we

00:21:43,390 --> 00:21:48,610
passed primary true I'm not a big fan of

00:21:45,490 --> 00:21:50,440
like passing primary true if I could do

00:21:48,610 --> 00:21:54,870
it again I would probably do button -

00:21:50,440 --> 00:21:57,370
primary or something but it's ok and

00:21:54,870 --> 00:21:59,830
then we have an action here which is

00:21:57,370 --> 00:22:01,720
which is on quick so by default a button

00:21:59,830 --> 00:22:03,850
doesn't know what to do you have to you

00:22:01,720 --> 00:22:06,490
have to tell it what to do so in this

00:22:03,850 --> 00:22:08,860
case we're going to call log objects and

00:22:06,490 --> 00:22:11,020
so if we have a look at log objects

00:22:08,860 --> 00:22:13,360
what's it going to do it's going to log

00:22:11,020 --> 00:22:15,400
the real model and then it's going to

00:22:13,360 --> 00:22:17,330
log each of the values of the change set

00:22:15,400 --> 00:22:19,720
so name last name and age

00:22:17,330 --> 00:22:22,220
and this is really just to prove that

00:22:19,720 --> 00:22:23,630
that the the change set is working and

00:22:22,220 --> 00:22:26,150
that we're like you know updating these

00:22:23,630 --> 00:22:30,440
values as we want so if I was to change

00:22:26,150 --> 00:22:33,110
this to James and then I click this

00:22:30,440 --> 00:22:36,679
button here you can see my original

00:22:33,110 --> 00:22:39,500
object or my real model hasn't been

00:22:36,679 --> 00:22:42,200
changed in any way but might change that

00:22:39,500 --> 00:22:46,429
the values have been changed and only

00:22:42,200 --> 00:22:49,520
the ones that although the ones that

00:22:46,429 --> 00:22:52,429
have had those values are still the same

00:22:49,520 --> 00:22:54,559
values and you can see like by default

00:22:52,429 --> 00:22:56,270
right this is a pretty same thing you

00:22:54,559 --> 00:22:58,159
put you type in the input the input

00:22:56,270 --> 00:23:01,730
updates the change set and then you get

00:22:58,159 --> 00:23:05,690
the change set back and so where it

00:23:01,730 --> 00:23:09,039
becomes a little bit trickier is here so

00:23:05,690 --> 00:23:11,539
we have this aged form and the aged form

00:23:09,039 --> 00:23:15,470
we've decided we're going to store it in

00:23:11,539 --> 00:23:19,780
months but when the user uses it we want

00:23:15,470 --> 00:23:22,429
to show it to them in in years because

00:23:19,780 --> 00:23:25,220
that's that's a better way to view your

00:23:22,429 --> 00:23:27,020
age and and so this is an example of how

00:23:25,220 --> 00:23:27,409
we can go completely custom on this

00:23:27,020 --> 00:23:31,700
thing

00:23:27,409 --> 00:23:34,039
so the default now is when I type in if

00:23:31,700 --> 00:23:38,090
I go back to this example and I type in

00:23:34,039 --> 00:23:39,650
something like 20 I want to see 20 but

00:23:38,090 --> 00:23:44,600
what I actually want to store on the

00:23:39,650 --> 00:23:46,100
change set is 240 all right it's like

00:23:44,600 --> 00:23:50,120
stage fright I didn't even want to try

00:23:46,100 --> 00:23:52,820
and so you can see right so by default

00:23:50,120 --> 00:23:56,330
the value here would be change set age

00:23:52,820 --> 00:24:00,080
and but we're we're overriding that now

00:23:56,330 --> 00:24:02,900
and we're saying if change set age is an

00:24:00,080 --> 00:24:05,059
integer and I'll show you why we have to

00:24:02,900 --> 00:24:07,760
do this in a sec so integer is integer

00:24:05,059 --> 00:24:11,240
is a helper that we've we've made and if

00:24:07,760 --> 00:24:16,220
it's an integer then divide change set

00:24:11,240 --> 00:24:19,400
dot age by 12 and if it's not an integer

00:24:16,220 --> 00:24:21,679
integer so it's like no or text just

00:24:19,400 --> 00:24:24,409
yield that text and this is so that I

00:24:21,679 --> 00:24:26,600
can say something like I didn't capture

00:24:24,409 --> 00:24:28,549
it but in the scheduling form if I was

00:24:26,600 --> 00:24:29,510
the type test right you don't want to

00:24:28,549 --> 00:24:31,610
show in a

00:24:29,510 --> 00:24:33,740
you want to validate and you want to say

00:24:31,610 --> 00:24:36,470
you've typed test but this is this field

00:24:33,740 --> 00:24:41,420
should be a number I can show a better

00:24:36,470 --> 00:24:42,890
example of that it actually works but

00:24:41,420 --> 00:24:46,310
yeah so we check there if it's an

00:24:42,890 --> 00:24:49,250
integer divided by 12 otherwise show the

00:24:46,310 --> 00:24:51,530
age and then on input so rather than

00:24:49,250 --> 00:24:55,040
going with that default action of just

00:24:51,530 --> 00:24:58,400
updating the change set we want to run

00:24:55,040 --> 00:25:02,540
our own action which in this case is if

00:24:58,400 --> 00:25:05,060
there is a value set the age to the

00:25:02,540 --> 00:25:05,720
value divided by 12 I sorry multiplied

00:25:05,060 --> 00:25:07,370
by 12

00:25:05,720 --> 00:25:13,460
otherwise don't do anything we don't

00:25:07,370 --> 00:25:16,490
want to do anything so then when I type

00:25:13,460 --> 00:25:19,610
in here and I say something like 50 and

00:25:16,490 --> 00:25:22,550
then I hit save you can see the change

00:25:19,610 --> 00:25:24,170
set is stored as 600 but the value of

00:25:22,550 --> 00:25:26,720
that is displayed in my input is still

00:25:24,170 --> 00:25:28,160
50 so my user has no idea that what

00:25:26,720 --> 00:25:29,900
they're typing in is stored in months

00:25:28,160 --> 00:25:32,000
but as a developer I have full control

00:25:29,900 --> 00:25:35,390
to kind of like show that form exactly

00:25:32,000 --> 00:25:37,520
as I want but I still get all the other

00:25:35,390 --> 00:25:41,120
benefits right so I still get all the

00:25:37,520 --> 00:25:42,800
classes I still get all the all those

00:25:41,120 --> 00:25:44,270
other same defaults I get the error

00:25:42,800 --> 00:25:47,540
lists and everything like that

00:25:44,270 --> 00:25:49,790
and if we look at the classes we can see

00:25:47,540 --> 00:25:51,230
that we have like you know we generate

00:25:49,790 --> 00:25:54,020
all of this stuff which is useful for

00:25:51,230 --> 00:25:55,640
for testing so we have like X form field

00:25:54,020 --> 00:25:57,980
dash dash name so we use those

00:25:55,640 --> 00:26:00,860
properties because you've told us what

00:25:57,980 --> 00:26:03,560
that element is and so we can use that

00:26:00,860 --> 00:26:05,600
to build class names which in your queue

00:26:03,560 --> 00:26:08,570
unit tests you can now just go you know

00:26:05,600 --> 00:26:10,250
project form dot X form field dash dash

00:26:08,570 --> 00:26:11,810
name check the value of that and then

00:26:10,250 --> 00:26:13,640
off you go you kind of don't need to

00:26:11,810 --> 00:26:16,970
like traverse this whole dorm down to

00:26:13,640 --> 00:26:18,410
like input so yeah we can take like a

00:26:16,970 --> 00:26:20,420
lot of liberties here and we can provide

00:26:18,410 --> 00:26:27,080
like a really good experience for for

00:26:20,420 --> 00:26:28,520
someone who's building a form so yeah

00:26:27,080 --> 00:26:31,220
like I said there's a there's a lot more

00:26:28,520 --> 00:26:33,080
that I could probably talk about here so

00:26:31,220 --> 00:26:34,940
I you know things like select boxes some

00:26:33,080 --> 00:26:37,280
more like kind of complex examples of

00:26:34,940 --> 00:26:38,720
how you would structure this how you

00:26:37,280 --> 00:26:40,340
might go about testing it some other

00:26:38,720 --> 00:26:42,440
helpers that we've written to kind of

00:26:40,340 --> 00:26:44,690
make this stuff a little bit easier

00:26:42,440 --> 00:26:46,850
I think I'm running out of time and

00:26:44,690 --> 00:26:54,470
today I want to have any questions at

00:26:46,850 --> 00:26:56,570
all yes I the whole thing itself is an

00:26:54,470 --> 00:26:59,840
open-sourced purely because originally

00:26:56,570 --> 00:27:02,870
it was changing so often as we kind of

00:26:59,840 --> 00:27:06,110
figured it out I would love to open

00:27:02,870 --> 00:27:11,360
source it I think there's another one

00:27:06,110 --> 00:27:15,610
called ember form for which is quite

00:27:11,360 --> 00:27:18,049
similar which also handles things like

00:27:15,610 --> 00:27:22,490
change sets and stuff like that

00:27:18,049 --> 00:27:23,870
it also does like translations and yeah

00:27:22,490 --> 00:27:26,210
I would love to open source it I think

00:27:23,870 --> 00:27:28,909
kind of before that there's like things

00:27:26,210 --> 00:27:30,620
like accessibility that I would also

00:27:28,909 --> 00:27:32,269
like to figure out like how you would go

00:27:30,620 --> 00:27:37,340
about creating defaults for

00:27:32,269 --> 00:27:40,850
accessibility yeah things like that

00:27:37,340 --> 00:27:42,860
the other the other gotchu is so here

00:27:40,850 --> 00:27:45,080
right I can say I can disable an

00:27:42,860 --> 00:27:46,970
individual field so I can say if this

00:27:45,080 --> 00:27:51,110
value is blank then disabled this

00:27:46,970 --> 00:27:54,049
particular field short so if I go back

00:27:51,110 --> 00:27:59,299
to my example template I can say like

00:27:54,049 --> 00:28:03,740
here disabled equals true and then if I

00:27:59,299 --> 00:28:05,090
go back here so age is now disabled and

00:28:03,740 --> 00:28:06,860
you can see like this is an example of

00:28:05,090 --> 00:28:09,559
how I've given it one property but it's

00:28:06,860 --> 00:28:13,009
changed everything about that field but

00:28:09,559 --> 00:28:15,620
now if my form as a whole is dependent

00:28:13,009 --> 00:28:18,019
on a like running tasks I've overridden

00:28:15,620 --> 00:28:20,899
the default here so I then have to

00:28:18,019 --> 00:28:23,480
repeat this kind of like if this task is

00:28:20,899 --> 00:28:25,250
running disabled this field as well and

00:28:23,480 --> 00:28:26,330
this field so there's like a few things

00:28:25,250 --> 00:28:27,710
like that that I'd kind of like to

00:28:26,330 --> 00:28:30,590
figure out so like how would you

00:28:27,710 --> 00:28:31,909
actually merge these disabled States so

00:28:30,590 --> 00:28:34,940
that you can still disabled the whole

00:28:31,909 --> 00:28:37,779
form but then have the ability to you

00:28:34,940 --> 00:28:39,769
know have kind of nested disabled States

00:28:37,779 --> 00:28:42,080
another thing you can do is you can

00:28:39,769 --> 00:28:45,259
provide like modifiers so if you have

00:28:42,080 --> 00:28:46,909
instances where you want to style a

00:28:45,259 --> 00:28:48,710
field slightly differently you can

00:28:46,909 --> 00:28:51,320
provide a modifier and that will be

00:28:48,710 --> 00:28:54,230
familiar with be e/m it'll be ex form

00:28:51,320 --> 00:28:56,300
field - - name - - something or other

00:28:54,230 --> 00:29:00,260
and then you can like style

00:28:56,300 --> 00:29:01,400
specific to your situation so yeah

00:29:00,260 --> 00:29:03,620
there's a ton of things that I'd

00:29:01,400 --> 00:29:08,260
probably love to change about it before

00:29:03,620 --> 00:29:08,260
then any other questions

00:29:08,650 --> 00:29:13,010
okay cool

00:29:10,460 --> 00:29:17,099
thank you very much

00:29:13,010 --> 00:29:17,099

YouTube URL: https://www.youtube.com/watch?v=_cbg8KzEk2g


