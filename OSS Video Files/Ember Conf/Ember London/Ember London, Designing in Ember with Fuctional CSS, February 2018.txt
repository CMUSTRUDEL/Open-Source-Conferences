Title: Ember London, Designing in Ember with Fuctional CSS, February 2018
Publication date: 2018-02-11
Playlist: Ember London
Description: 
	Talk presented by Jeff Jewiss.

More about Ember London: https://www.meetup.com/London-Emberjs-User-Group/
Captions: 
	00:00:00,000 --> 00:00:05,009
everyone thanks for coming today I'm

00:00:02,300 --> 00:00:08,099
gonna be talking about designing ember

00:00:05,009 --> 00:00:11,849
apps with functional CSS so we'll go

00:00:08,099 --> 00:00:14,490
over what functional CSS means some

00:00:11,849 --> 00:00:19,650
packages you can leverage to use it and

00:00:14,490 --> 00:00:24,359
show some examples my name is Jeff and I

00:00:19,650 --> 00:00:25,199
work at Tulare I'm here in London I'm

00:00:24,359 --> 00:00:26,730
sure you're familiar with number

00:00:25,199 --> 00:00:28,680
observers so if you go and look at your

00:00:26,730 --> 00:00:31,650
options for your using styles in a

00:00:28,680 --> 00:00:36,780
number app there are at least 100

00:00:31,650 --> 00:00:40,800
modules things like sass are very

00:00:36,780 --> 00:00:44,399
popular we also have CSS modules which

00:00:40,800 --> 00:00:47,090
will scope your styles to a component so

00:00:44,399 --> 00:00:49,950
that you can not have to worry about

00:00:47,090 --> 00:00:52,469
global styles or collisions or

00:00:49,950 --> 00:00:54,480
specificity there are lots of different

00:00:52,469 --> 00:00:57,809
pre-processors there are lots of

00:00:54,480 --> 00:01:01,250
different ways to write CSS but it's

00:00:57,809 --> 00:01:03,799
still it's it's very challenging

00:01:01,250 --> 00:01:06,750
everything in CSS is global

00:01:03,799 --> 00:01:10,049
collaborating on a large team can be

00:01:06,750 --> 00:01:12,990
very difficult you you might get

00:01:10,049 --> 00:01:14,159
assigned a bug or feature and you can't

00:01:12,990 --> 00:01:16,049
be confident that you're not breaking

00:01:14,159 --> 00:01:20,580
something else in the app when you

00:01:16,049 --> 00:01:23,880
change CSS having a consistent design

00:01:20,580 --> 00:01:25,770
having it be maintainable and even just

00:01:23,880 --> 00:01:27,270
the the developer experience of writing

00:01:25,770 --> 00:01:33,360
CSS I think that's why a lot of these

00:01:27,270 --> 00:01:34,409
tools exist so if we look at solutions

00:01:33,360 --> 00:01:37,020
to this problem one that's been around

00:01:34,409 --> 00:01:41,040
for a while is BEM how many people use

00:01:37,020 --> 00:01:45,270
them before in their Styles yeah so

00:01:41,040 --> 00:01:47,759
basically to avoid the global trap we

00:01:45,270 --> 00:01:52,140
come we've come up with a method where

00:01:47,759 --> 00:01:54,060
you can very specifically name your CSS

00:01:52,140 --> 00:01:56,070
classes and not get collisions anymore

00:01:54,060 --> 00:01:59,159
and I've used that in a lot of projects

00:01:56,070 --> 00:02:02,939
and it works but you end up with a

00:01:59,159 --> 00:02:05,719
scalability issue a more modern approach

00:02:02,939 --> 00:02:08,819
that I think has come from react and

00:02:05,719 --> 00:02:11,039
other tool chains is the idea of CSS

00:02:08,819 --> 00:02:12,970
modules that through the build process

00:02:11,039 --> 00:02:16,880
and JavaScript there

00:02:12,970 --> 00:02:18,950
scope to your components basically it'll

00:02:16,880 --> 00:02:20,810
generate unique class names for you and

00:02:18,950 --> 00:02:22,730
do some other fun things but that still

00:02:20,810 --> 00:02:25,930
has the same scalability and

00:02:22,730 --> 00:02:28,520
maintainability problem in many cases

00:02:25,930 --> 00:02:32,780
that's how you use it specifically an

00:02:28,520 --> 00:02:35,030
ember but the the real problem is that

00:02:32,780 --> 00:02:37,100
this complexity this global state it has

00:02:35,030 --> 00:02:39,290
to live somewhere so in most of these

00:02:37,100 --> 00:02:41,180
solutions were saying it's going to live

00:02:39,290 --> 00:02:45,020
in our style sheets whether it's SAS or

00:02:41,180 --> 00:02:47,240
less or something else whether it's CSS

00:02:45,020 --> 00:02:49,550
styles in JavaScript we're basically

00:02:47,240 --> 00:02:54,340
putting it somewhere else

00:02:49,550 --> 00:02:54,340
and that can be a big problem

00:02:55,090 --> 00:03:01,310
over time so as a reference I like to

00:02:58,940 --> 00:03:04,000
point people to this essay that Adam

00:03:01,310 --> 00:03:06,709
Morris wrote a few years ago he's a

00:03:04,000 --> 00:03:09,470
designer and developer and he used to

00:03:06,709 --> 00:03:11,570
work at Salesforce and if you are

00:03:09,470 --> 00:03:13,010
interested in this diving deeper into

00:03:11,570 --> 00:03:17,120
this topic I really recommend this

00:03:13,010 --> 00:03:20,060
article basically he talks about reading

00:03:17,120 --> 00:03:22,519
over the entire CSS code base for

00:03:20,060 --> 00:03:24,380
Salesforce and the fact that no one had

00:03:22,519 --> 00:03:25,790
really done that before you on board new

00:03:24,380 --> 00:03:27,260
devs and no one's gonna take the time

00:03:25,790 --> 00:03:30,500
like oh why don't I read through every

00:03:27,260 --> 00:03:34,250
stylesheet we have in the entire tool

00:03:30,500 --> 00:03:37,370
chain but a really interesting quote is

00:03:34,250 --> 00:03:39,709
that refactoring CSS is hard and

00:03:37,370 --> 00:03:41,330
time-consuming deleting unused CSS is

00:03:39,709 --> 00:03:42,830
hard and time-consuming and more often

00:03:41,330 --> 00:03:44,959
than not it's not work people are

00:03:42,830 --> 00:03:47,570
excited to do so what happens people

00:03:44,959 --> 00:03:48,980
keep writing more and more CSS so I'm

00:03:47,570 --> 00:03:51,590
sure you've seen on your projects that

00:03:48,980 --> 00:03:53,959
basically over time you have more CSS

00:03:51,590 --> 00:03:57,459
the files bigger it's split into more

00:03:53,959 --> 00:04:00,080
files it's just it's kind of a disaster

00:03:57,459 --> 00:04:01,790
to give you a concrete example I don't

00:04:00,080 --> 00:04:07,190
know if you've ever looked at Twitter

00:04:01,790 --> 00:04:09,650
CSS but it's 2/3 of a Meg there's 17,000

00:04:07,190 --> 00:04:12,230
declarations almost 10,000 selectors

00:04:09,650 --> 00:04:14,420
somehow there's a thousand colors ePub

00:04:12,230 --> 00:04:17,870
files for most novels are actually

00:04:14,420 --> 00:04:19,940
smaller than the CSS bundle and until

00:04:17,870 --> 00:04:22,160
recently that was to display and star

00:04:19,940 --> 00:04:24,680
140 characters so they need more

00:04:22,160 --> 00:04:26,000
information to describe how to look at

00:04:24,680 --> 00:04:28,280
140 characters

00:04:26,000 --> 00:04:31,400
then most people need to show you a book

00:04:28,280 --> 00:04:33,590
so it it's a real problem real companies

00:04:31,400 --> 00:04:35,570
are having dealing with this which is

00:04:33,590 --> 00:04:39,380
why I'm proposing to have a look at

00:04:35,570 --> 00:04:41,360
functional CSS John Gould also wrote a

00:04:39,380 --> 00:04:44,060
very short but really interesting

00:04:41,360 --> 00:04:46,220
article summarizing how it helps your

00:04:44,060 --> 00:04:47,990
sanity to think of this way don't really

00:04:46,220 --> 00:04:52,850
summarize it but it's just another thing

00:04:47,990 --> 00:04:54,910
that I could share a link about so I'll

00:04:52,850 --> 00:04:58,880
show some examples and try and explain

00:04:54,910 --> 00:05:00,770
what functional CSS is I think this is

00:04:58,880 --> 00:05:03,200
one of the earlier examples of what BEM

00:05:00,770 --> 00:05:06,410
could be Nicole Sullivan took a media

00:05:03,200 --> 00:05:09,169
object which an example of that would be

00:05:06,410 --> 00:05:10,850
in Facebook when you have say a profile

00:05:09,169 --> 00:05:13,820
photo and then someone sharing something

00:05:10,850 --> 00:05:17,240
whether it's text block or multimedia

00:05:13,820 --> 00:05:20,930
and this is one way you could build that

00:05:17,240 --> 00:05:24,020
in BEM and then if you wanted to do that

00:05:20,930 --> 00:05:27,440
in functional CSS this is what it would

00:05:24,020 --> 00:05:30,229
look like so the concept is that

00:05:27,440 --> 00:05:35,020
everything is global you embrace that

00:05:30,229 --> 00:05:38,660
and you come up with class names to

00:05:35,020 --> 00:05:41,030
basically do one thing so obviously

00:05:38,660 --> 00:05:43,340
there aren't actually functions in CSS

00:05:41,030 --> 00:05:45,229
but you're thinking of a pure function

00:05:43,340 --> 00:05:47,630
that doesn't have side effects and is

00:05:45,229 --> 00:05:52,340
very focused so ma2

00:05:47,630 --> 00:05:55,280
is margin on all sides two units FLS

00:05:52,340 --> 00:05:57,919
float:left so the idea is you're moving

00:05:55,280 --> 00:05:59,870
this complexity to your templates and

00:05:57,919 --> 00:06:02,570
you're coming up with a design system

00:05:59,870 --> 00:06:03,860
where instead of having arbitrary pixel

00:06:02,570 --> 00:06:06,290
values for things like margin and

00:06:03,860 --> 00:06:07,940
padding you're coming up with units of

00:06:06,290 --> 00:06:11,350
measure that will be consistent through

00:06:07,940 --> 00:06:11,350
throughout your whole application

00:06:11,530 --> 00:06:19,250
tachyons is one of my favorite tools for

00:06:14,150 --> 00:06:21,290
actually using functional CSS it's it's

00:06:19,250 --> 00:06:23,450
very small and easy to use you can use

00:06:21,290 --> 00:06:25,640
in sass you can use it with post CSS you

00:06:23,450 --> 00:06:27,800
can just drop the the built minified

00:06:25,640 --> 00:06:29,150
version of it into a project and that's

00:06:27,800 --> 00:06:31,220
actually where most of those classes

00:06:29,150 --> 00:06:32,510
came from in my example so you don't

00:06:31,220 --> 00:06:35,720
have to write your own you can leverage

00:06:32,510 --> 00:06:36,590
existing tools this is how tachyons

00:06:35,720 --> 00:06:39,249
would approach something like a

00:06:36,590 --> 00:06:41,819
complicated flexbox layout

00:06:39,249 --> 00:06:45,609
this does work really great with ember

00:06:41,819 --> 00:06:48,009
through computed properties or class

00:06:45,609 --> 00:06:49,449
names you can have these things combined

00:06:48,009 --> 00:06:51,579
because really it's just a string of

00:06:49,449 --> 00:06:52,989
class names the benefits are that it'll

00:06:51,579 --> 00:06:56,649
work with your existing approaches

00:06:52,989 --> 00:06:58,089
whether using BEM or CSS components you

00:06:56,649 --> 00:07:01,539
can you don't have to go all-in with

00:06:58,089 --> 00:07:03,189
functional CSS it can enhance what

00:07:01,539 --> 00:07:05,019
you're already doing I think it's a much

00:07:03,189 --> 00:07:07,179
simpler mental model when I've

00:07:05,019 --> 00:07:10,599
collaborated with designers or back-end

00:07:07,179 --> 00:07:13,689
devs using this system has given them a

00:07:10,599 --> 00:07:15,849
lot more power to be able to get a

00:07:13,689 --> 00:07:18,569
design eighty percent there and still

00:07:15,849 --> 00:07:22,059
work within a consistent design system

00:07:18,569 --> 00:07:24,189
it's being composable you think of

00:07:22,059 --> 00:07:26,499
functions and its really obvious what

00:07:24,189 --> 00:07:30,039
things do when you build these things

00:07:26,499 --> 00:07:32,979
together and maintainable in the sense

00:07:30,039 --> 00:07:34,539
that you're not writing new CSS the

00:07:32,979 --> 00:07:39,269
complexity existed in your templates

00:07:34,539 --> 00:07:41,739
instead so this is an example of a

00:07:39,269 --> 00:07:44,169
documentation site for an add-on that

00:07:41,739 --> 00:07:47,799
I've built using almost entirely takin's

00:07:44,169 --> 00:07:51,009
so I realized it's a little minimal but

00:07:47,799 --> 00:07:52,779
I feel like so record a little video of

00:07:51,009 --> 00:07:55,439
me just kind of scrolling through it to

00:07:52,779 --> 00:07:58,179
show I mean it's it's a fully responsive

00:07:55,439 --> 00:08:00,669
site and I think it's pretty easy to use

00:07:58,179 --> 00:08:02,319
and to read and it didn't take that much

00:08:00,669 --> 00:08:04,899
effort by one person to get something

00:08:02,319 --> 00:08:09,369
that I think is a nice default or a nice

00:08:04,899 --> 00:08:11,379
starting point and this is the entirety

00:08:09,369 --> 00:08:16,659
of the custom styles that I wrote for it

00:08:11,379 --> 00:08:18,039
the rest is just all tachyons so I

00:08:16,659 --> 00:08:19,869
realize no one wants to end up in a

00:08:18,039 --> 00:08:24,159
situation like bootstrap where every

00:08:19,869 --> 00:08:25,539
website looks the same so I guess an

00:08:24,159 --> 00:08:27,189
argument against using something like

00:08:25,539 --> 00:08:30,610
tachyons is that you'll end up with the

00:08:27,189 --> 00:08:33,339
same values but they do use CSS custom

00:08:30,610 --> 00:08:35,259
properties through post CSS and they're

00:08:33,339 --> 00:08:37,509
now landed in browser so you can

00:08:35,259 --> 00:08:41,289
customize any of these values really

00:08:37,509 --> 00:08:43,350
easily so this is what the template

00:08:41,289 --> 00:08:47,259
would look like again with some of the

00:08:43,350 --> 00:08:49,889
composable CSS classes here's another

00:08:47,259 --> 00:08:52,179
example where I was able to build a

00:08:49,889 --> 00:08:53,110
photography portfolio site basically a

00:08:52,179 --> 00:08:56,350
gallery

00:08:53,110 --> 00:08:58,780
and again it's something like 90%

00:08:56,350 --> 00:09:01,330
tachyons and and I think you can get a

00:08:58,780 --> 00:09:07,960
pretty nice clean result by using this

00:09:01,330 --> 00:09:10,810
approach who's heard of the ember map

00:09:07,960 --> 00:09:15,100
guys before have has anyone heard of

00:09:10,810 --> 00:09:17,050
them has anyone used ember mirage okay

00:09:15,100 --> 00:09:20,040
so Sam Sela cough I think is how you

00:09:17,050 --> 00:09:22,240
pronounce his name him and Ryan Toronto

00:09:20,040 --> 00:09:25,890
it's a video course

00:09:22,240 --> 00:09:28,060
so they're using functional CSS you can

00:09:25,890 --> 00:09:31,240
most the time you can tell when you

00:09:28,060 --> 00:09:33,880
inspect a website or app and you start

00:09:31,240 --> 00:09:38,110
seeing classes like B G dark grey near

00:09:33,880 --> 00:09:42,220
white f6 those are your functions even

00:09:38,110 --> 00:09:44,230
segment is using CSS functions and it's

00:09:42,220 --> 00:09:45,790
interesting to me as a counter example

00:09:44,230 --> 00:09:48,640
because it works with their existing

00:09:45,790 --> 00:09:50,560
approach so you can see through these

00:09:48,640 --> 00:09:53,440
class names that they're they're using

00:09:50,560 --> 00:09:56,620
some form of CSS modules or components

00:09:53,440 --> 00:09:59,710
because they're unique generated hashes

00:09:56,620 --> 00:10:00,100
basically but then if you look at the

00:09:59,710 --> 00:10:02,680
footer

00:10:00,100 --> 00:10:05,590
they've also seem to have a mix of

00:10:02,680 --> 00:10:07,360
potentially bem but then also mt2 DB

00:10:05,590 --> 00:10:09,550
they've got functions in there as well

00:10:07,360 --> 00:10:10,810
so it's a nice approach that you can add

00:10:09,550 --> 00:10:13,030
into what you're already doing and it

00:10:10,810 --> 00:10:15,550
makes refactoring a lot easier just a

00:10:13,030 --> 00:10:19,630
couple bonus things to show how I built

00:10:15,550 --> 00:10:25,690
the add-on site and portfolio also

00:10:19,630 --> 00:10:28,210
leveraging other member tools so the the

00:10:25,690 --> 00:10:30,670
documentation site for that add-on it's

00:10:28,210 --> 00:10:33,760
actually using the dummy app from the

00:10:30,670 --> 00:10:37,150
add-on itself and you can deploy that so

00:10:33,760 --> 00:10:40,090
using ember CLI deploy get it will

00:10:37,150 --> 00:10:42,760
actually build the the test app in your

00:10:40,090 --> 00:10:46,450
add-on and then deploy that to your

00:10:42,760 --> 00:10:48,400
github pages branch so if you're working

00:10:46,450 --> 00:10:50,860
on your own add-ons and you want an easy

00:10:48,400 --> 00:10:52,210
way to have a documentation site without

00:10:50,860 --> 00:10:54,880
doing something custom this works really

00:10:52,210 --> 00:10:58,320
well and remember I guess is how you

00:10:54,880 --> 00:11:02,230
pronounce it it's pre-rendering ember so

00:10:58,320 --> 00:11:04,300
to deal with being able to reload a page

00:11:02,230 --> 00:11:04,870
because to get it working on github

00:11:04,300 --> 00:11:08,920
pages

00:11:04,870 --> 00:11:11,080
you can't take advantage of the well you

00:11:08,920 --> 00:11:12,870
have to use the hash URL so refreshes

00:11:11,080 --> 00:11:18,550
wouldn't work this creates a bunch of

00:11:12,870 --> 00:11:25,089
index.html files for you and then so

00:11:18,550 --> 00:11:27,010
again this is the the output and this is

00:11:25,089 --> 00:11:30,820
what it would look like using just these

00:11:27,010 --> 00:11:33,910
functions for the for that site and

00:11:30,820 --> 00:11:36,250
photography portfolio I found there's

00:11:33,910 --> 00:11:38,820
new really easy way to get typefaces

00:11:36,250 --> 00:11:42,610
into your project

00:11:38,820 --> 00:11:45,339
someone's created NPM modules for over

00:11:42,610 --> 00:11:47,980
800 fonts that are from google fonts and

00:11:45,339 --> 00:11:50,770
other free sources and keeps them

00:11:47,980 --> 00:11:53,230
versioned now that you can install

00:11:50,770 --> 00:11:56,290
things from node modules very easily a

00:11:53,230 --> 00:11:58,450
number CLI we can detect that and pull

00:11:56,290 --> 00:12:00,820
that in your project so basically in two

00:11:58,450 --> 00:12:02,830
steps you install this add-on and you

00:12:00,820 --> 00:12:05,380
install the typeface you want and then

00:12:02,830 --> 00:12:07,570
that's it you can use it in your project

00:12:05,380 --> 00:12:09,220
it makes managing your typefaces a lot

00:12:07,570 --> 00:12:11,650
easier you don't have to deal with

00:12:09,220 --> 00:12:13,839
vendor files and so on

00:12:11,650 --> 00:12:15,730
and the other one that I thought was

00:12:13,839 --> 00:12:21,070
interesting just briefly talk about is

00:12:15,730 --> 00:12:25,060
dealing with exif metadata so the the

00:12:21,070 --> 00:12:26,980
order of the photos and the captions and

00:12:25,060 --> 00:12:29,080
all of the the information about them

00:12:26,980 --> 00:12:31,390
it's actually pulled from their metadata

00:12:29,080 --> 00:12:33,250
so at Build time it runs the directory

00:12:31,390 --> 00:12:35,290
of photos through this add-on and you

00:12:33,250 --> 00:12:37,540
can pull out any metadata you'd like

00:12:35,290 --> 00:12:41,160
about them so you wanted to sort by

00:12:37,540 --> 00:12:42,490
location or category or otherwise and

00:12:41,160 --> 00:12:43,820
that's it

00:12:42,490 --> 00:12:48,699
thank you

00:12:43,820 --> 00:12:48,699

YouTube URL: https://www.youtube.com/watch?v=2XGC3O5RFkc


