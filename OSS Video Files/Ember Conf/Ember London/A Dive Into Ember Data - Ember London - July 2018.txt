Title: A Dive Into Ember Data - Ember London - July 2018
Publication date: 2018-07-17
Playlist: Ember London
Description: 
	Presented by Pablo Brasero.

Dive into Ember Data's code and learn to build adapters and serialisers with ease.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:07,470
so hello everyone my name is Pablo and I

00:00:03,629 --> 00:00:09,300
work a third book and I thought coming

00:00:07,470 --> 00:00:12,330
to like to talk a little bit about under

00:00:09,300 --> 00:00:14,040
data I I first got in contact with

00:00:12,330 --> 00:00:15,750
number data when when I first got in

00:00:14,040 --> 00:00:19,320
contact with number a couple of years

00:00:15,750 --> 00:00:22,070
ago three years ago now and I tried to

00:00:19,320 --> 00:00:25,380
build this application they used the TfL

00:00:22,070 --> 00:00:28,199
API has any of you ever have a look at

00:00:25,380 --> 00:00:30,929
the TfL API yeah it's not the most

00:00:28,199 --> 00:00:34,140
straightforward API to follow but you

00:00:30,929 --> 00:00:36,000
know I was starting with ember and I was

00:00:34,140 --> 00:00:38,100
raising documentation and I was saying

00:00:36,000 --> 00:00:40,530
ember data is the thing to use I said

00:00:38,100 --> 00:00:43,890
well then I will I will bend it to my

00:00:40,530 --> 00:00:47,780
will and make it work with the TfL api

00:00:43,890 --> 00:00:51,180
which was something more complex than

00:00:47,780 --> 00:00:52,530
other aps I had to work with back but

00:00:51,180 --> 00:00:54,270
you know it wasn't really that bad

00:00:52,530 --> 00:00:58,050
because once you understand them the

00:00:54,270 --> 00:01:02,850
data and how to figure out it's cold

00:00:58,050 --> 00:01:06,780
days then things I start to to fall

00:01:02,850 --> 00:01:09,060
together relatively quickly or really my

00:01:06,780 --> 00:01:11,909
stock was going to be cold understanding

00:01:09,060 --> 00:01:13,590
and birth data then I renamed it into

00:01:11,909 --> 00:01:16,350
Ember data because I thought ah I think

00:01:13,590 --> 00:01:19,259
we should start from from a higher

00:01:16,350 --> 00:01:21,060
vantage point and from a hacker at a

00:01:19,259 --> 00:01:24,420
higher level of a strap abstraction and

00:01:21,060 --> 00:01:25,830
then getting at the end I have to admit

00:01:24,420 --> 00:01:28,710
that the dive is going to be a below

00:01:25,830 --> 00:01:31,320
because there's only so much I can talk

00:01:28,710 --> 00:01:33,630
in 20 minutes and there might be who

00:01:31,320 --> 00:01:36,240
knows a second part to this talk so

00:01:33,630 --> 00:01:40,950
let's see how we get there the reason

00:01:36,240 --> 00:01:42,899
why all these I started is and why I

00:01:40,950 --> 00:01:45,470
wanted to talk of them and their data is

00:01:42,899 --> 00:01:48,950
that something I see a lot everywhere

00:01:45,470 --> 00:01:51,210
these people who don't use amber data

00:01:48,950 --> 00:01:54,560
and birthdate is supposed to be like a

00:01:51,210 --> 00:01:58,140
bit like the gold standard off of

00:01:54,560 --> 00:02:00,899
dealing with data persistence in number

00:01:58,140 --> 00:02:03,810
I know necessarily the only one there

00:02:00,899 --> 00:02:09,239
are all the things like orbit but I see

00:02:03,810 --> 00:02:11,069
the most people just use a hand a hand

00:02:09,239 --> 00:02:13,110
crafted a yak service or something like

00:02:11,069 --> 00:02:16,170
that to download

00:02:13,110 --> 00:02:18,510
from from their own API is because they

00:02:16,170 --> 00:02:20,880
consider that one birthday is just too

00:02:18,510 --> 00:02:23,870
complex for this case and these normally

00:02:20,880 --> 00:02:27,030
follows from another session that is

00:02:23,870 --> 00:02:29,820
JSON API oh is too complex for a for a

00:02:27,030 --> 00:02:31,830
use case and the train of thought

00:02:29,820 --> 00:02:35,220
normally goes or ember data requires

00:02:31,830 --> 00:02:38,700
JSON API and we don't want to hear it is

00:02:35,220 --> 00:02:41,910
an API and I think that both things need

00:02:38,700 --> 00:02:44,850
some both assertions needed we think in

00:02:41,910 --> 00:02:46,580
first ember data doesn't only work with

00:02:44,850 --> 00:02:49,709
JSON API does the first thing that

00:02:46,580 --> 00:02:52,140
should be understood and the second

00:02:49,709 --> 00:02:56,400
thing is liable repeat actually note

00:02:52,140 --> 00:02:59,370
that back because so people normally end

00:02:56,400 --> 00:03:02,370
up saying people I mean I've seen out

00:02:59,370 --> 00:03:04,440
there in Italy include everyone I end up

00:03:02,370 --> 00:03:07,440
saying oh we can do simpler we can do

00:03:04,440 --> 00:03:11,010
with a simpler response format better

00:03:07,440 --> 00:03:12,840
suited to our or use case and I have

00:03:11,010 --> 00:03:15,630
build things like this before before

00:03:12,840 --> 00:03:18,959
like this API is let's start pretty much

00:03:15,630 --> 00:03:22,290
like this where somebody says oh we only

00:03:18,959 --> 00:03:25,049
need to return the user so let's just

00:03:22,290 --> 00:03:27,959
return the you saying Jason by the way I

00:03:25,049 --> 00:03:30,239
know that's not strictly Jason because

00:03:27,959 --> 00:03:35,700
I'm missing a bunch of quotes but just

00:03:30,239 --> 00:03:37,290
bear with me that and then the thing is

00:03:35,700 --> 00:03:40,530
that this project starts pretty well

00:03:37,290 --> 00:03:43,709
there pretty nicely with the simple data

00:03:40,530 --> 00:03:46,860
exchange format and then somewhere down

00:03:43,709 --> 00:03:48,470
the line a couple of months later you

00:03:46,860 --> 00:03:51,390
realize that you need to have say

00:03:48,470 --> 00:03:53,700
metadata to to that so you end up

00:03:51,390 --> 00:03:55,410
putting the person that was being

00:03:53,700 --> 00:03:57,299
returning to its own the resource that

00:03:55,410 --> 00:04:00,630
was being returned to some key and then

00:03:57,299 --> 00:04:01,200
the method and a town a different key or

00:04:00,630 --> 00:04:03,239
something like that

00:04:01,200 --> 00:04:05,430
and you could also put it inside the

00:04:03,239 --> 00:04:06,360
object and underscore underscore method

00:04:05,430 --> 00:04:08,100
or something like that

00:04:06,360 --> 00:04:11,220
my doesn't matter the things that you

00:04:08,100 --> 00:04:13,530
had to think about what you were doing

00:04:11,220 --> 00:04:17,479
and changed the format to accommodate

00:04:13,530 --> 00:04:20,310
these new these new needs and then

00:04:17,479 --> 00:04:22,320
somebody comes along couple of months

00:04:20,310 --> 00:04:25,650
later and says do you see those skills a

00:04:22,320 --> 00:04:28,740
list of strings

00:04:25,650 --> 00:04:30,960
which incidentally correspond to some

00:04:28,740 --> 00:04:33,000
other data in in our database and have

00:04:30,960 --> 00:04:35,400
their own IDs you say they shouldn't

00:04:33,000 --> 00:04:38,510
just be strings because we need to

00:04:35,400 --> 00:04:40,710
correlate them with something else so

00:04:38,510 --> 00:04:43,229
there should be a clear association

00:04:40,710 --> 00:04:45,740
there where we have the ID numbers and

00:04:43,229 --> 00:04:48,030
we use that to query other stuff and

00:04:45,740 --> 00:04:53,250
then again you have gone and you have

00:04:48,030 --> 00:04:56,340
changed the format - to be simple but

00:04:53,250 --> 00:04:58,590
still adapt to your growing needs and

00:04:56,340 --> 00:05:00,389
then of course there's the case where

00:04:58,590 --> 00:05:02,010
you don't want a single resource you

00:05:00,389 --> 00:05:05,160
want a list of them and it has its own

00:05:02,010 --> 00:05:07,530
meta right this meta is normally the

00:05:05,160 --> 00:05:09,479
pagination that's there probably most

00:05:07,530 --> 00:05:12,870
common yeah I think it's the most common

00:05:09,479 --> 00:05:14,039
type of material I see eventually when

00:05:12,870 --> 00:05:15,770
you get a list of things you are going

00:05:14,039 --> 00:05:20,639
to want to paginate them somewhere

00:05:15,770 --> 00:05:24,449
somehow so these really completely stuff

00:05:20,639 --> 00:05:30,810
this this is real life stuff that we

00:05:24,449 --> 00:05:34,050
find and we accept but then do and that

00:05:30,810 --> 00:05:36,470
doing that we implementing or really

00:05:34,050 --> 00:05:39,690
signing something that's very much like

00:05:36,470 --> 00:05:40,860
JSON API so why not go for JSON API in

00:05:39,690 --> 00:05:43,590
the first place especially given that

00:05:40,860 --> 00:05:45,360
there are many third-party libraries out

00:05:43,590 --> 00:05:47,970
there that can hundred in JSON API for

00:05:45,360 --> 00:05:50,430
you especially on the server like I

00:05:47,970 --> 00:05:53,039
can't think of a couple of them for

00:05:50,430 --> 00:05:55,919
elixir on Phoenix one is called JSON API

00:05:53,039 --> 00:05:58,410
and the other one is called yeah yes can

00:05:55,919 --> 00:06:00,539
remember what and there are couple

00:05:58,410 --> 00:06:03,060
others for Rubin rails I'm sure they're

00:06:00,539 --> 00:06:05,460
for node I'm not an expert there so the

00:06:03,060 --> 00:06:09,000
other day you you just have one of those

00:06:05,460 --> 00:06:10,770
revelation throw your data at it 90% of

00:06:09,000 --> 00:06:12,150
the cases are going to be solved for you

00:06:10,770 --> 00:06:14,820
and maybe you shouldn't be thinking so

00:06:12,150 --> 00:06:18,510
much about the simplicity of your of

00:06:14,820 --> 00:06:19,800
your data of your data and many cases

00:06:18,510 --> 00:06:23,130
when you think about the other thing

00:06:19,800 --> 00:06:25,080
quite work with my use case I thought

00:06:23,130 --> 00:06:28,410
well of that because I find that that

00:06:25,080 --> 00:06:32,490
often is just he says a bit of making

00:06:28,410 --> 00:06:35,940
excuses anyway and the thing is that

00:06:32,490 --> 00:06:40,530
even assuming that you want

00:06:35,940 --> 00:06:43,080
to use amber data and work with either

00:06:40,530 --> 00:06:45,990
yes on API or some other format you have

00:06:43,080 --> 00:06:48,270
that's fine do you end up having the

00:06:45,990 --> 00:06:49,950
problem that all that is very well

00:06:48,270 --> 00:06:53,580
documented that is a bit difficult to

00:06:49,950 --> 00:06:57,090
know where to start from all the calls

00:06:53,580 --> 00:06:59,670
that you have in a number a number data

00:06:57,090 --> 00:07:04,830
to all the hooks that are given to you

00:06:59,670 --> 00:07:07,620
to make it work with your with your own

00:07:04,830 --> 00:07:09,960
data format are there documented that

00:07:07,620 --> 00:07:14,580
what does all that mean which should be

00:07:09,960 --> 00:07:17,670
the one the first one I implement and

00:07:14,580 --> 00:07:20,070
the truly line B inverse code base it's

00:07:17,670 --> 00:07:23,310
a bit complex like I have tried to read

00:07:20,070 --> 00:07:25,620
it a few times but I didn't lost in in a

00:07:23,310 --> 00:07:28,200
back burner really quickly all the time

00:07:25,620 --> 00:07:30,630
I don't know about you Anna I'm sure

00:07:28,200 --> 00:07:34,710
there are some hints I could take that

00:07:30,630 --> 00:07:36,720
will help me navigate a bit better and

00:07:34,710 --> 00:07:39,960
those hints actually are the ones I want

00:07:36,720 --> 00:07:42,600
to try the liver here in for the case of

00:07:39,960 --> 00:07:44,250
a medical example data called Amber

00:07:42,600 --> 00:07:48,720
data's call business actually relatively

00:07:44,250 --> 00:07:51,470
straightforward and I want to try to

00:07:48,720 --> 00:07:54,840
guide you into how to get started with

00:07:51,470 --> 00:07:56,840
looking at amber data call base so the

00:07:54,840 --> 00:08:00,390
first thing we can do for that is remove

00:07:56,840 --> 00:08:02,930
amber data and let's say we have a we

00:08:00,390 --> 00:08:05,490
have a project and we say you know what

00:08:02,930 --> 00:08:07,560
we are not going to use some birthday

00:08:05,490 --> 00:08:07,950
turtle and the thing is that when you do

00:08:07,560 --> 00:08:11,700
that

00:08:07,950 --> 00:08:14,550
there's something the still stays with

00:08:11,700 --> 00:08:17,520
you and it is a store because the store

00:08:14,550 --> 00:08:20,460
is not really part of an birthday time

00:08:17,520 --> 00:08:23,100
and that data provides the store but if

00:08:20,460 --> 00:08:26,660
you remember and removing their data the

00:08:23,100 --> 00:08:30,090
concept of storage still exists in

00:08:26,660 --> 00:08:33,390
number and what it does by default is

00:08:30,090 --> 00:08:34,950
that those models for you what models if

00:08:33,390 --> 00:08:36,180
not if there is number data well that

00:08:34,950 --> 00:08:38,460
doesn't matter you can provide any

00:08:36,180 --> 00:08:39,360
models that you want the way it works is

00:08:38,460 --> 00:08:44,640
rough like this

00:08:39,360 --> 00:08:46,950
um you declare a route in this case we

00:08:44,640 --> 00:08:51,370
have a route

00:08:46,950 --> 00:08:56,290
that has a user ID at the end so when

00:08:51,370 --> 00:08:59,079
you do that amber by default let me

00:08:56,290 --> 00:09:01,890
rephrase that when you that then you can

00:08:59,079 --> 00:09:06,660
create a route pretty much like this one

00:09:01,890 --> 00:09:09,399
like that the these dots store the find

00:09:06,660 --> 00:09:11,050
user and reach the params

00:09:09,399 --> 00:09:16,779
that's what you will normally do with

00:09:11,050 --> 00:09:18,640
sample data right and then would stop

00:09:16,779 --> 00:09:20,490
actually I'm jumping way too fast and

00:09:18,640 --> 00:09:24,269
then I said but there's no Amber data

00:09:20,490 --> 00:09:27,730
but this those stores still exists and

00:09:24,269 --> 00:09:30,850
this default implementation of these

00:09:27,730 --> 00:09:31,959
dollar store that we get assumes that

00:09:30,850 --> 00:09:35,459
you are going to have something like

00:09:31,959 --> 00:09:38,019
that model in the models folder or

00:09:35,459 --> 00:09:41,200
whichever way you have it that is going

00:09:38,019 --> 00:09:44,290
to be picked up by the but the injection

00:09:41,200 --> 00:09:49,779
stuff inside number now yes it can be a

00:09:44,290 --> 00:09:52,540
support a puro the JavaScript object it

00:09:49,779 --> 00:09:53,980
doesn't even need to be a a member

00:09:52,540 --> 00:09:55,720
service or anything like that yes

00:09:53,980 --> 00:09:59,160
something of the clutter fine

00:09:55,720 --> 00:10:01,990
and assume is it going to receive an ID

00:09:59,160 --> 00:10:04,750
returns a promise and you could get

00:10:01,990 --> 00:10:07,630
working with that and you will say what

00:10:04,750 --> 00:10:10,329
power why will I want to do that and I

00:10:07,630 --> 00:10:12,399
just use my Ajax service that I have

00:10:10,329 --> 00:10:16,630
always been using and it works pretty

00:10:12,399 --> 00:10:21,040
well well mainly because both things are

00:10:16,630 --> 00:10:23,410
not really I'm not really in conflict

00:10:21,040 --> 00:10:26,680
you can you can have both you can

00:10:23,410 --> 00:10:30,490
implement that last Model I put there

00:10:26,680 --> 00:10:34,600
using your ax service and while you do

00:10:30,490 --> 00:10:38,440
that you gain you gain conventions

00:10:34,600 --> 00:10:41,260
because the thing is that when you the

00:10:38,440 --> 00:10:42,790
things that when use that and they're

00:10:41,260 --> 00:10:44,290
already assumed that you're going to do

00:10:42,790 --> 00:10:48,670
something like this dollar store dot

00:10:44,290 --> 00:10:50,079
find so I'm the code I had before we can

00:10:48,670 --> 00:10:51,940
remove the part in the middle we can

00:10:50,079 --> 00:10:55,449
just not have it because that happens to

00:10:51,940 --> 00:10:58,779
be the default implementation that in

00:10:55,449 --> 00:10:59,900
there has over route so you can have you

00:10:58,779 --> 00:11:02,780
can declare the route and you

00:10:59,900 --> 00:11:05,630
can have your model and if you go to

00:11:02,780 --> 00:11:07,730
that route but hopefully you will have a

00:11:05,630 --> 00:11:10,160
template in it and number will

00:11:07,730 --> 00:11:14,300
automatically do these data store find

00:11:10,160 --> 00:11:17,000
of whatever was before underscore ID

00:11:14,300 --> 00:11:19,580
which is user and we are going to give

00:11:17,000 --> 00:11:25,010
them times that the thing that has a V

00:11:19,580 --> 00:11:27,170
user and store away so suddenly you you

00:11:25,010 --> 00:11:29,950
were not using my data but because you

00:11:27,170 --> 00:11:33,500
are following this convention that Umbra

00:11:29,950 --> 00:11:35,690
expects of you you have to write less

00:11:33,500 --> 00:11:39,590
code to do a stuff you can you can

00:11:35,690 --> 00:11:41,560
tentatively create a template here we're

00:11:39,590 --> 00:11:44,600
out there and see how things work before

00:11:41,560 --> 00:11:47,240
getting onto to create a more concrete

00:11:44,600 --> 00:11:49,820
in more complex routes and it will still

00:11:47,240 --> 00:11:51,680
work with your own a jack service

00:11:49,820 --> 00:11:56,900
because you can declare the model at the

00:11:51,680 --> 00:11:59,420
end to use it in fact another thing you

00:11:56,900 --> 00:12:02,180
can do we go one step further and then

00:11:59,420 --> 00:12:06,830
we can have our own store it is we could

00:12:02,180 --> 00:12:09,050
declare a service called store that

00:12:06,830 --> 00:12:13,460
works exactly as store normally works

00:12:09,050 --> 00:12:17,750
and it has find other receives type and

00:12:13,460 --> 00:12:20,270
an IV and member will use it although

00:12:17,750 --> 00:12:21,710
I'm cheating a bit because in order to

00:12:20,270 --> 00:12:24,440
get this to work you actually need to

00:12:21,710 --> 00:12:26,690
put some injections in place and embed

00:12:24,440 --> 00:12:31,850
data does that number data provides its

00:12:26,690 --> 00:12:34,280
own store service and then uses the it's

00:12:31,850 --> 00:12:36,560
initializers to inject some things in

00:12:34,280 --> 00:12:38,270
places so that that works so it is

00:12:36,560 --> 00:12:40,520
actually possible to do that without

00:12:38,270 --> 00:12:43,550
having amber data but I didn't have the

00:12:40,520 --> 00:12:45,710
time to put myself together to show you

00:12:43,550 --> 00:12:50,030
exactly what you have to do any subby is

00:12:45,710 --> 00:12:52,010
likely is not relevant here not

00:12:50,030 --> 00:12:55,640
anyway let's add an birthdate aback

00:12:52,010 --> 00:12:57,170
because this was just to see how can you

00:12:55,640 --> 00:12:59,210
follow the conventions of amber data

00:12:57,170 --> 00:13:00,770
without actually having enter data by

00:12:59,210 --> 00:13:04,190
the way those conventions are used by

00:13:00,770 --> 00:13:06,950
other data persistent persistent

00:13:04,190 --> 00:13:10,860
libraries such as orbit orbit provides

00:13:06,950 --> 00:13:13,560
its own store with his own store its own

00:13:10,860 --> 00:13:15,840
store those fine so you see and we will

00:13:13,560 --> 00:13:18,600
just be doing the same that other levers

00:13:15,840 --> 00:13:23,490
are doing an unembodied expects anyway

00:13:18,600 --> 00:13:25,560
let's bring and birds data back and then

00:13:23,490 --> 00:13:29,940
let's try to read them birthday and to

00:13:25,560 --> 00:13:31,350
dive into em birthday test code and see

00:13:29,940 --> 00:13:35,190
we can understand what's going on

00:13:31,350 --> 00:13:37,740
so the first places we have been talking

00:13:35,190 --> 00:13:39,450
about the store and the store is

00:13:37,740 --> 00:13:42,150
normally the first thing we touch when

00:13:39,450 --> 00:13:45,690
we deal with number data we store dot

00:13:42,150 --> 00:13:47,730
final store that what final record

00:13:45,690 --> 00:13:50,130
actually doesn't thing I forgot to say

00:13:47,730 --> 00:13:52,010
and it is that we normally do find

00:13:50,130 --> 00:13:56,400
record instead of fine

00:13:52,010 --> 00:14:01,170
that's because fine is not so much a

00:13:56,400 --> 00:14:06,600
number data API but rather a protocol

00:14:01,170 --> 00:14:09,630
that Amber expects these data labrys to

00:14:06,600 --> 00:14:13,440
to implement a number data implements

00:14:09,630 --> 00:14:19,860
fine by just pretty much a liaison with

00:14:13,440 --> 00:14:21,720
fine record anyway whoever was I will

00:14:19,860 --> 00:14:24,960
bring in and be later back and then

00:14:21,720 --> 00:14:26,940
we're trying I'm going to try to guide

00:14:24,960 --> 00:14:29,490
you into how to start reading and birth

00:14:26,940 --> 00:14:32,070
data and because we were at the store we

00:14:29,490 --> 00:14:34,470
can store start at the store and give

00:14:32,070 --> 00:14:37,890
you a little bit of looking at is you

00:14:34,470 --> 00:14:39,840
pretty quickly find where the where

00:14:37,890 --> 00:14:44,730
amber data keeps the store right it is

00:14:39,840 --> 00:14:46,200
at Adams store in Dexter yes so it looks

00:14:44,730 --> 00:14:49,920
really promising and we're going to it

00:14:46,200 --> 00:14:53,400
and we open it into in our text editor

00:14:49,920 --> 00:14:54,960
and we find oh oh we have to look in

00:14:53,400 --> 00:14:58,110
another file because this is one of

00:14:54,960 --> 00:15:00,720
these import/export and and this is the

00:14:58,110 --> 00:15:03,690
right place probably the right place

00:15:00,720 --> 00:15:07,020
probably but we okay we have to do one

00:15:03,690 --> 00:15:09,620
step down ok so we go to the file that

00:15:07,020 --> 00:15:13,530
we were importing Adams private index

00:15:09,620 --> 00:15:16,410
and we open it in North Texas later on

00:15:13,530 --> 00:15:19,470
the house this is another export and

00:15:16,410 --> 00:15:22,510
import the sport of the importing Oh

00:15:19,470 --> 00:15:24,520
okay so it's fine explains fine we're

00:15:22,510 --> 00:15:27,490
good we just have to that is the third

00:15:24,520 --> 00:15:30,850
line there export default store from

00:15:27,490 --> 00:15:32,170
home system store okay that again

00:15:30,850 --> 00:15:36,160
there's another file we have to follow

00:15:32,170 --> 00:15:38,050
and I may feel a bit sick which is to

00:15:36,160 --> 00:15:40,180
follow this run but this is the straight

00:15:38,050 --> 00:15:44,050
forward we know at a vegetable we're

00:15:40,180 --> 00:15:48,970
going so we go to system store there we

00:15:44,050 --> 00:15:51,640
open it in our text editor and voila

00:15:48,970 --> 00:15:54,880
Ebola we actually have a store that we

00:15:51,640 --> 00:15:57,820
have something called store and that is

00:15:54,880 --> 00:15:59,920
actually service it's exported so this

00:15:57,820 --> 00:16:03,280
must be the thing we're looking for

00:15:59,920 --> 00:16:06,760
I mean find these implements find the

00:16:03,280 --> 00:16:09,460
way I just described and in turn cause

00:16:06,760 --> 00:16:11,140
find record the way I guess described so

00:16:09,460 --> 00:16:14,800
this looks like the place where we can

00:16:11,140 --> 00:16:22,720
start our little exploration of Amber

00:16:14,800 --> 00:16:27,730
data or can we because maybe here we are

00:16:22,720 --> 00:16:31,600
done on our text editor on our github or

00:16:27,730 --> 00:16:33,460
on github reading all this code but we

00:16:31,600 --> 00:16:34,930
don't really know if this is the place I

00:16:33,460 --> 00:16:36,430
hear it could be some other trails that

00:16:34,930 --> 00:16:39,310
happens to have a similar interface and

00:16:36,430 --> 00:16:42,610
name and one of these things that people

00:16:39,310 --> 00:16:44,080
do and you end up looking at code that

00:16:42,610 --> 00:16:47,770
is you know the code that you thought

00:16:44,080 --> 00:16:50,290
you were looking at so um so how do you

00:16:47,770 --> 00:16:55,300
know this is really what do you think it

00:16:50,290 --> 00:17:00,130
is well in order to in order to get this

00:16:55,300 --> 00:17:02,020
sorted out we can use NPM and pin comes

00:17:00,130 --> 00:17:07,960
to the rescue here in the form of its

00:17:02,020 --> 00:17:11,020
command NPM link well NPM link does it

00:17:07,960 --> 00:17:13,120
basically takes a library of an NPM

00:17:11,020 --> 00:17:16,930
package that you have in your file

00:17:13,120 --> 00:17:19,450
system and links it with your current

00:17:16,930 --> 00:17:21,670
projects or your current practice links

00:17:19,450 --> 00:17:23,650
it as a dependency of your current

00:17:21,670 --> 00:17:27,130
project so your current pro uses your

00:17:23,650 --> 00:17:29,030
local copy instead of that I don't know

00:17:27,130 --> 00:17:33,080
it one from the NPM

00:17:29,030 --> 00:17:39,660
repository please use a bit like this

00:17:33,080 --> 00:17:42,210
apologies for all those signs but by its

00:17:39,660 --> 00:17:44,700
simple example how to use this you you

00:17:42,210 --> 00:17:47,280
clone number data yourself and then you

00:17:44,700 --> 00:17:51,570
go into it and you say NPM link and then

00:17:47,280 --> 00:17:56,640
and NPM does its own mic and say ok this

00:17:51,570 --> 00:17:59,940
person wants to be able to use this this

00:17:56,640 --> 00:18:03,270
package I mean as later in a different

00:17:59,940 --> 00:18:06,300
project and then we go to our own

00:18:03,270 --> 00:18:11,070
project and then we do NPM link emulator

00:18:06,300 --> 00:18:12,900
and then at that point our plate will

00:18:11,070 --> 00:18:15,630
start using not that embel data

00:18:12,900 --> 00:18:17,880
downloaded from TMP and repository but

00:18:15,630 --> 00:18:21,210
rather the one that we have in our file

00:18:17,880 --> 00:18:26,070
system and then we can put a console log

00:18:21,210 --> 00:18:28,380
in there and then we can we can have a

00:18:26,070 --> 00:18:30,200
go at seeing if this is what we were

00:18:28,380 --> 00:18:33,360
looking for if this actually is going to

00:18:30,200 --> 00:18:37,260
work and it works

00:18:33,360 --> 00:18:39,360
you run this and you get the console the

00:18:37,260 --> 00:18:41,250
console message so you know that you are

00:18:39,360 --> 00:18:46,380
in the right place or close enough

00:18:41,250 --> 00:18:47,580
anyway and you start using console look

00:18:46,380 --> 00:18:49,260
at that point Wow

00:18:47,580 --> 00:18:50,840
I say console log obviously you could be

00:18:49,260 --> 00:18:54,120
using something a bit more fancy like

00:18:50,840 --> 00:18:56,100
the debugging tools I'm not really

00:18:54,120 --> 00:19:00,000
familiar with I'm more I'm more of a

00:18:56,100 --> 00:19:04,050
console log person so that's that's the

00:19:00,000 --> 00:19:06,090
way I teach it and I'm from there you

00:19:04,050 --> 00:19:08,940
start thinking okay so what am I going

00:19:06,090 --> 00:19:11,340
to look for next to what part of this

00:19:08,940 --> 00:19:16,650
code should I look for and at this point

00:19:11,340 --> 00:19:18,810
it is it is enticing to to say well

00:19:16,650 --> 00:19:22,320
let's go have a look at how fine record

00:19:18,810 --> 00:19:24,420
works by going to say fine record may

00:19:22,320 --> 00:19:26,580
not be the best place to start because

00:19:24,420 --> 00:19:30,600
it does some clever stuff especially

00:19:26,580 --> 00:19:33,660
with what given that final record makes

00:19:30,600 --> 00:19:36,210
pretty good use of the store catch so it

00:19:33,660 --> 00:19:38,400
checks if what you're trying to find in

00:19:36,210 --> 00:19:40,720
the catch and I know retrieves it and

00:19:38,400 --> 00:19:42,580
understand backburner

00:19:40,720 --> 00:19:45,640
I just cannot look into backburner

00:19:42,580 --> 00:19:48,940
really somebody has one day two and hold

00:19:45,640 --> 00:19:53,170
me into understanding how how to you how

00:19:48,940 --> 00:19:56,080
to rig backburner using code so instead

00:19:53,170 --> 00:19:59,470
I am I'll recommend that you have a look

00:19:56,080 --> 00:20:02,230
at startup query record these better

00:19:59,470 --> 00:20:04,150
place to start because by some natural

00:20:02,230 --> 00:20:06,730
query record it is not a very capable

00:20:04,150 --> 00:20:08,920
thing so it's very straightforward in

00:20:06,730 --> 00:20:10,570
that if you follow the code it goes

00:20:08,920 --> 00:20:13,300
quickly to the places where you actually

00:20:10,570 --> 00:20:15,610
who treats it she realizes it I know

00:20:13,300 --> 00:20:20,920
that I'm without so many intermediate

00:20:15,610 --> 00:20:23,590
steps in fact if in the father we were

00:20:20,920 --> 00:20:27,190
already if instead of going to find our

00:20:23,590 --> 00:20:29,170
fine record you go to query record but

00:20:27,190 --> 00:20:30,760
you see that you read the code and you

00:20:29,170 --> 00:20:32,620
see that internally is using something

00:20:30,760 --> 00:20:35,320
called underscore query record okay

00:20:32,620 --> 00:20:37,090
marita you go to the import you figure

00:20:35,320 --> 00:20:39,490
out where the reason it's in that file

00:20:37,090 --> 00:20:42,780
and you're reading that and then you see

00:20:39,490 --> 00:20:45,190
uses something called normalized

00:20:42,780 --> 00:20:48,430
normalized response helper and this

00:20:45,190 --> 00:20:50,560
starts feeling a bit familiar close to

00:20:48,430 --> 00:20:55,360
stuff that we have seen in the

00:20:50,560 --> 00:20:56,800
documentation do cool say all this let's

00:20:55,360 --> 00:20:59,050
go into that and see if I end up in a

00:20:56,800 --> 00:21:01,720
civilized and you're going to Adam

00:20:59,050 --> 00:21:04,000
private blah blah and you see that

00:21:01,720 --> 00:21:07,120
indeed user serializer

00:21:04,000 --> 00:21:11,380
the normally is responsible and at this

00:21:07,120 --> 00:21:12,880
point we are in documentation land we

00:21:11,380 --> 00:21:16,740
are in the kind of places that we

00:21:12,880 --> 00:21:19,540
expected and and also the kind of hooks

00:21:16,740 --> 00:21:21,130
temper data provides and are well

00:21:19,540 --> 00:21:22,330
documented by the same time when you

00:21:21,130 --> 00:21:24,100
read them for the first time you don't

00:21:22,330 --> 00:21:25,780
even know what it is talking about so

00:21:24,100 --> 00:21:28,120
it's a very good place to start putting

00:21:25,780 --> 00:21:32,320
console logs and then every everything

00:21:28,120 --> 00:21:35,590
starts making sense so I've been talking

00:21:32,320 --> 00:21:37,240
for 21 minutes I said I was only going

00:21:35,590 --> 00:21:39,280
to touch of a shadow where then I would

00:21:37,240 --> 00:21:42,250
have liked it so I'm going to leave this

00:21:39,280 --> 00:21:44,710
little clip hunger and hopefully I will

00:21:42,250 --> 00:21:49,600
come back with a part two of this talk

00:21:44,710 --> 00:21:51,520
where I did a dive a bit deeper into

00:21:49,600 --> 00:21:53,500
amber data and try to figure out where

00:21:51,520 --> 00:21:54,380
things are but with that just you see

00:21:53,500 --> 00:21:56,270
NPM link

00:21:54,380 --> 00:21:58,760
following this straight from query

00:21:56,270 --> 00:22:03,290
record you will quickly end up in the

00:21:58,760 --> 00:22:05,480
code for the supervisors for adaptors it

00:22:03,290 --> 00:22:11,620
would be much easier for you to figure

00:22:05,480 --> 00:22:15,460
out how all the works thank you

00:22:11,620 --> 00:22:15,460

YouTube URL: https://www.youtube.com/watch?v=2IIyQG5RDLE


