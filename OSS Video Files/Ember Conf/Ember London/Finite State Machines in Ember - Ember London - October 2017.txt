Title: Finite State Machines in Ember - Ember London - October 2017
Publication date: 2018-01-31
Playlist: Ember London
Description: 
	Finite State Machines (in Ember)

Dmitri Akatov
Captions: 
	00:00:00,030 --> 00:00:03,780
quite a small crowd here and basically

00:00:02,610 --> 00:00:06,629
decided to give this talk at the very

00:00:03,780 --> 00:00:10,980
last minute the original plan was just

00:00:06,629 --> 00:00:12,420
to do some live coding however started

00:00:10,980 --> 00:00:14,130
doing some slides in the end I ended up

00:00:12,420 --> 00:00:17,100
preparing some slides I didn't prepare

00:00:14,130 --> 00:00:20,119
any live coding at all so I might try

00:00:17,100 --> 00:00:25,800
and do a little bit of live coding but I

00:00:20,119 --> 00:00:27,240
will see how it goes but please please

00:00:25,800 --> 00:00:33,170
feel free to interrupt me at any time

00:00:27,240 --> 00:00:38,489
and ask questions right so ma'am

00:00:33,170 --> 00:00:41,010
finite state machines according to

00:00:38,489 --> 00:00:44,910
Wikipedia I'm not gonna open that you

00:00:41,010 --> 00:00:46,879
can open it she wants us so a finite

00:00:44,910 --> 00:00:53,730
state machine is a mathematical model of

00:00:46,879 --> 00:00:56,160
computation and probably one thing of

00:00:53,730 --> 00:00:58,590
particularly interest about a finite

00:00:56,160 --> 00:01:01,620
state machine is that it's less powerful

00:00:58,590 --> 00:01:04,979
than some other models of computation in

00:01:01,620 --> 00:01:07,470
particular the Turing machine so why

00:01:04,979 --> 00:01:10,970
would why why would one wants to use

00:01:07,470 --> 00:01:16,110
something which is not as powerful as

00:01:10,970 --> 00:01:18,000
something else and I guess the the main

00:01:16,110 --> 00:01:20,159
idea is that it restricts you from doing

00:01:18,000 --> 00:01:23,009
certain things and it restricts you in a

00:01:20,159 --> 00:01:27,990
good way it forces you to use a certain

00:01:23,009 --> 00:01:29,570
formalism and keeps you from making big

00:01:27,990 --> 00:01:33,600
mistakes

00:01:29,570 --> 00:01:39,630
so thinking convention over

00:01:33,600 --> 00:01:46,710
configuration okay so the formal

00:01:39,630 --> 00:01:48,030
definition I'm gonna skip that in

00:01:46,710 --> 00:01:53,149
particular because I don't know how to

00:01:48,030 --> 00:01:58,560
render lay back inside of or cannot yet

00:01:53,149 --> 00:02:02,219
so we'll just go to an example so I'm

00:01:58,560 --> 00:02:04,320
using a tool called plant UML which lets

00:02:02,219 --> 00:02:05,990
you describe state machines amongst

00:02:04,320 --> 00:02:08,429
other things that also lets you do some

00:02:05,990 --> 00:02:12,709
activity diagrams and just general other

00:02:08,429 --> 00:02:12,709
UML stuff just really cool

00:02:16,630 --> 00:02:24,590
wonderful doesn't zoom the image can you

00:02:21,170 --> 00:02:27,560
see the image at the bottom okay so this

00:02:24,590 --> 00:02:29,480
is a simple state machine it has two

00:02:27,560 --> 00:02:36,070
states who are called locked and

00:02:29,480 --> 00:02:39,200
unlocked its initial state is locked

00:02:36,070 --> 00:02:41,390
over here so this little dots is an

00:02:39,200 --> 00:02:44,570
indicator which shows that this state is

00:02:41,390 --> 00:02:46,670
the initial state and this all the

00:02:44,570 --> 00:02:48,140
arrows are called transitions so this

00:02:46,670 --> 00:02:51,310
particular arrow is kind of like the

00:02:48,140 --> 00:02:54,820
initializing transition it's implied and

00:02:51,310 --> 00:03:00,080
the state machine accepts two types of

00:02:54,820 --> 00:03:02,209
actions or and the mathematical

00:03:00,080 --> 00:03:03,950
formalism cookie called alphabet or the

00:03:02,209 --> 00:03:08,330
input alphabet but let's call them

00:03:03,950 --> 00:03:10,459
actions so this accepts the push action

00:03:08,330 --> 00:03:12,290
and the coin action cone action

00:03:10,459 --> 00:03:14,450
corresponds to you putting a coin into

00:03:12,290 --> 00:03:16,130
the turnstile and the first action

00:03:14,450 --> 00:03:18,890
corresponds to you trying to push the

00:03:16,130 --> 00:03:22,130
turnstile so if it's locked you put in a

00:03:18,890 --> 00:03:23,630
coin it becomes unlocked you can keep on

00:03:22,130 --> 00:03:27,680
putting coins that doesn't change the

00:03:23,630 --> 00:03:30,200
state but as soon as you push the trans

00:03:27,680 --> 00:03:33,320
no becomes lock together and what you

00:03:30,200 --> 00:03:36,280
can notice is that you can't push while

00:03:33,320 --> 00:03:39,620
you're in the locked state or at least

00:03:36,280 --> 00:03:41,630
this machine does not allow you it's a

00:03:39,620 --> 00:03:43,700
push in the lock state and this is on

00:03:41,630 --> 00:03:46,570
purpose so it basically prevents you

00:03:43,700 --> 00:03:46,570
from doing something bad

00:03:46,660 --> 00:03:53,450
let's look at another example a little

00:03:49,970 --> 00:03:58,870
bit longer so one two three four five

00:03:53,450 --> 00:03:58,870
six two three four five six seven states

00:03:58,930 --> 00:04:07,310
so probably the most interesting part is

00:04:01,459 --> 00:04:09,110
the names of the transitions so here so

00:04:07,310 --> 00:04:14,269
we have an initial state a we have a

00:04:09,110 --> 00:04:15,769
final state F so that's the so this

00:04:14,269 --> 00:04:17,570
indicator is that means this is the

00:04:15,769 --> 00:04:19,370
final state you can't transition from

00:04:17,570 --> 00:04:21,140
here like once the state machine reached

00:04:19,370 --> 00:04:23,360
that state that's it the program is

00:04:21,140 --> 00:04:24,590
terminated so you might want that or

00:04:23,360 --> 00:04:25,220
might not want that the previous one

00:04:24,590 --> 00:04:27,260
didn't have a

00:04:25,220 --> 00:04:31,250
like that so the shake machine lives on

00:04:27,260 --> 00:04:35,690
forever so what does the state machine

00:04:31,250 --> 00:04:37,820
do it accepts an action called e then

00:04:35,690 --> 00:04:41,770
okay this is really bad

00:04:37,820 --> 00:04:47,360
this a an arrow which loops upon itself

00:04:41,770 --> 00:04:48,890
also labeled with E then it accept then

00:04:47,360 --> 00:04:52,400
there's a transition called M transition

00:04:48,890 --> 00:04:54,050
called B position transition called e

00:04:52,400 --> 00:04:57,940
then another one which loops upon itself

00:04:54,050 --> 00:05:01,840
called E and a final one called R and

00:04:57,940 --> 00:05:04,400
I'll show you what it does in a minute

00:05:01,840 --> 00:05:07,640
this over here which brings me to

00:05:04,400 --> 00:05:11,480
applications of state machines and

00:05:07,640 --> 00:05:14,450
software so one of them is regular

00:05:11,480 --> 00:05:17,300
expressions or to be more specific

00:05:14,450 --> 00:05:19,700
it's regular languages which is a subset

00:05:17,300 --> 00:05:21,460
of regular expressions but I'm not going

00:05:19,700 --> 00:05:26,480
to go into too much detail about the

00:05:21,460 --> 00:05:30,130
differences so if you look at this as a

00:05:26,480 --> 00:05:34,130
regular expression and either takes

00:05:30,130 --> 00:05:36,500
letter e one or more times or a letter a

00:05:34,130 --> 00:05:39,200
one or more times then the lettuce MMB

00:05:36,500 --> 00:05:41,810
and then the letter e one or more times

00:05:39,200 --> 00:05:43,100
and then finally letter R so this

00:05:41,810 --> 00:05:48,010
regular expression corresponds exactly

00:05:43,100 --> 00:05:48,010
to the to this state machine right here

00:05:49,840 --> 00:06:02,900
so you can use state machines to model

00:05:54,430 --> 00:06:08,150
your application behavior so that's what

00:06:02,900 --> 00:06:09,770
you would call a state design but

00:06:08,150 --> 00:06:15,080
they're also pretty good - modeling

00:06:09,770 --> 00:06:16,970
event-driven behavior which pretty much

00:06:15,080 --> 00:06:21,080
old front-end applications are I mean

00:06:16,970 --> 00:06:23,470
they're way too user inputs and react to

00:06:21,080 --> 00:06:23,470
user input

00:06:24,870 --> 00:06:34,290
so look what what else is there I can

00:06:32,250 --> 00:06:39,180
try and do some live coding just as a

00:06:34,290 --> 00:06:48,889
little illustration so it's number

00:06:39,180 --> 00:06:48,889
twiddle let's just create a components

00:07:23,919 --> 00:07:32,629
okay so I'm gonna make a component which

00:07:29,209 --> 00:07:40,849
lets you log in and log out just just

00:07:32,629 --> 00:07:45,069
playing a button sorry can you remind me

00:07:40,849 --> 00:07:45,069
what the value

00:08:16,110 --> 00:08:32,789
this work no thank you

00:08:26,560 --> 00:08:35,770
okay here we go can you see that maybe

00:08:32,789 --> 00:08:38,680
okay it's gonna make it harder to edit

00:08:35,770 --> 00:08:44,130
the coats but whatever okay so this

00:08:38,680 --> 00:08:53,400
button does nothing for now let's say we

00:08:44,130 --> 00:08:57,990
and actions hash would you login

00:08:53,400 --> 00:09:09,190
actually so usually when you log in it

00:08:57,990 --> 00:09:10,240
okay so um I start off with this okay it

00:09:09,190 --> 00:09:23,920
doesn't do anything because we haven't

00:09:10,240 --> 00:09:24,540
connected the action button on okay here

00:09:23,920 --> 00:09:27,510
we go

00:09:24,540 --> 00:09:34,830
okay so

00:09:27,510 --> 00:09:39,170
and we went from logging to logout do

00:09:34,830 --> 00:09:39,170
the same thing to work out

00:09:58,920 --> 00:10:03,730
okay login logout okay now this is a

00:10:02,290 --> 00:10:07,209
little bit unrealistic because usually

00:10:03,730 --> 00:10:08,559
if you log in you need to send an HTTP

00:10:07,209 --> 00:10:10,509
request to the server you need to wait

00:10:08,559 --> 00:10:14,049
for it to authenticate so it's going to

00:10:10,509 --> 00:10:18,100
be an asynchronous action so we could

00:10:14,049 --> 00:10:31,809
say so how could we emulate December run

00:10:18,100 --> 00:10:35,739
later let's say we run of the second

00:10:31,809 --> 00:10:42,249
later so we click login and this didn't

00:10:35,739 --> 00:10:54,730
work because we need this there we go

00:10:42,249 --> 00:10:58,059
so what's the problem with this you can

00:10:54,730 --> 00:11:01,329
click login several times so we might

00:10:58,059 --> 00:11:04,920
want to we might want to disable the

00:11:01,329 --> 00:11:18,459
button right when we click it so this

00:11:04,920 --> 00:11:23,529
set is enabled say the component what do

00:11:18,459 --> 00:11:25,049
you do this should be binding is this

00:11:23,529 --> 00:11:27,010
gonna work

00:11:25,049 --> 00:11:37,150
nope

00:11:27,010 --> 00:11:42,660
are we going something happens okay so

00:11:37,150 --> 00:11:42,660
we probably want the well thank you

00:12:06,660 --> 00:12:25,690
sorry there we go so that worked we'll

00:12:22,660 --> 00:12:28,470
look back ouch oh look the buttons still

00:12:25,690 --> 00:12:31,270
disabled alright so I guess like that's

00:12:28,470 --> 00:12:34,270
the the smallest example I could think

00:12:31,270 --> 00:12:38,260
of right now to illustrate the benefits

00:12:34,270 --> 00:12:39,580
of a state-based design so so what's

00:12:38,260 --> 00:12:43,270
happening here if we look at the code

00:12:39,580 --> 00:12:45,160
over here so we have an online boolean

00:12:43,270 --> 00:12:47,470
variable and we have a disabled boolean

00:12:45,160 --> 00:12:51,250
variable so each one of those can take

00:12:47,470 --> 00:12:53,710
one of two states so the total state

00:12:51,250 --> 00:12:57,370
space of our components is actually two

00:12:53,710 --> 00:12:59,680
to the power of two which is four

00:12:57,370 --> 00:13:03,820
however what we really want is only to

00:12:59,680 --> 00:13:05,020
have three states so we want the state

00:13:03,820 --> 00:13:06,970
where we see the login button we want

00:13:05,020 --> 00:13:08,920
the states where the login button is

00:13:06,970 --> 00:13:12,130
disabled because we're currently logging

00:13:08,920 --> 00:13:13,540
in and we want the state where where we

00:13:12,130 --> 00:13:15,700
logged in and we have a lookout button

00:13:13,540 --> 00:13:17,500
and when we click that we want to end up

00:13:15,700 --> 00:13:20,860
in the states where we just have the

00:13:17,500 --> 00:13:24,370
login button which is enabled right so

00:13:20,860 --> 00:13:27,750
of course what we can do is we can also

00:13:24,370 --> 00:13:27,750
set this

00:13:32,880 --> 00:13:45,190
so this works but let's say all right

00:13:43,120 --> 00:13:47,649
I'm not gonna try and come up with more

00:13:45,190 --> 00:13:50,500
complex examples the thing is like once

00:13:47,649 --> 00:13:53,649
you start adding more and more boolean

00:13:50,500 --> 00:13:55,870
variables you can end up with a state

00:13:53,649 --> 00:13:58,990
space which is potentially huge whereas

00:13:55,870 --> 00:14:03,399
what you really want is only a very

00:13:58,990 --> 00:14:05,079
small subset of those states and what

00:14:03,399 --> 00:14:08,190
can happen is if you if you change the

00:14:05,079 --> 00:14:10,149
code at some point somebody doesn't

00:14:08,190 --> 00:14:12,699
there's a pay attention to what one of

00:14:10,149 --> 00:14:17,320
the boolean variables does and you might

00:14:12,699 --> 00:14:24,449
have an inconsistent UI basically all

00:14:17,320 --> 00:14:24,449
right let's let's go back

00:14:25,100 --> 00:14:36,420
so the right couple Oh actually this is

00:14:30,330 --> 00:14:38,400
exactly the example that we had so there

00:14:36,420 --> 00:14:43,560
are couple simplifications two state

00:14:38,400 --> 00:14:44,820
machines so basically this is a state

00:14:43,560 --> 00:14:48,470
machine which has three states

00:14:44,820 --> 00:14:51,120
disconnected connecting and online

00:14:48,470 --> 00:14:54,450
however we can group two of these states

00:14:51,120 --> 00:14:58,230
together and they're a super state

00:14:54,450 --> 00:15:01,550
called offline now this can have several

00:14:58,230 --> 00:15:04,020
advantages one of them is for instance

00:15:01,550 --> 00:15:06,570
if you want to render something in the

00:15:04,020 --> 00:15:11,610
in the UI if and only if you're in the

00:15:06,570 --> 00:15:13,860
offline state you can just check is your

00:15:11,610 --> 00:15:15,420
state currently offline rather than

00:15:13,860 --> 00:15:17,990
checking explicitly are we disconnected

00:15:15,420 --> 00:15:22,730
or connecting so it saves you one end

00:15:17,990 --> 00:15:24,840
and the in the template what else so

00:15:22,730 --> 00:15:29,520
over here we have a transition called

00:15:24,840 --> 00:15:34,380
disconnect once that transition is

00:15:29,520 --> 00:15:36,390
initiated the me as the program it

00:15:34,380 --> 00:15:38,400
shouldn't really worry about do I want

00:15:36,390 --> 00:15:40,940
to go into the disconnected state or do

00:15:38,400 --> 00:15:43,440
I want to go into the connecting state

00:15:40,940 --> 00:15:44,910
and that's because we have a default

00:15:43,440 --> 00:15:49,400
state so inside the offline state the

00:15:44,910 --> 00:15:51,510
default state is gets disconnected so

00:15:49,400 --> 00:15:54,750
once I transition back to your fine

00:15:51,510 --> 00:15:59,270
state then by default I end up in the

00:15:54,750 --> 00:15:59,270
disconnected state so it's just

00:15:59,480 --> 00:16:08,790
basically a way to save yourself some

00:16:06,750 --> 00:16:10,530
extra so I guess like the other one

00:16:08,790 --> 00:16:12,420
which we which we don't have here is if

00:16:10,530 --> 00:16:14,490
we had an action going from from the

00:16:12,420 --> 00:16:16,080
offline state and this basically means

00:16:14,490 --> 00:16:17,970
that we want both the disconnected state

00:16:16,080 --> 00:16:20,550
and the connecting state to behave

00:16:17,970 --> 00:16:22,200
exactly exactly the same manner when

00:16:20,550 --> 00:16:24,540
that particular action is called then we

00:16:22,200 --> 00:16:28,980
would draw the action from the offline

00:16:24,540 --> 00:16:34,350
state and I'll I'll draw the parallel to

00:16:28,980 --> 00:16:38,240
ember in there in two slides okay so oh

00:16:34,350 --> 00:16:38,240
oh here we go

00:16:38,690 --> 00:16:48,180
so the other simplifying concept in

00:16:44,520 --> 00:16:49,980
state machines is concurrent state and I

00:16:48,180 --> 00:16:51,900
guess concurrent state pretty closely

00:16:49,980 --> 00:16:53,160
corresponds to what you or I think this

00:16:51,900 --> 00:16:55,520
particular one pretty closely

00:16:53,160 --> 00:16:58,350
corresponds to what you get if you use

00:16:55,520 --> 00:17:02,580
boolean variables so if you have three

00:16:58,350 --> 00:17:05,220
boolean variables then let's call them

00:17:02,580 --> 00:17:07,589
no mwah num lock caps lock and scroll

00:17:05,220 --> 00:17:09,270
lock and this pretty much describes this

00:17:07,589 --> 00:17:11,550
particular state machine and so this is

00:17:09,270 --> 00:17:17,490
supposed to model a keyboard which has

00:17:11,550 --> 00:17:19,620
three modifier keys so you press num

00:17:17,490 --> 00:17:21,810
lock and then depending if num lock is

00:17:19,620 --> 00:17:23,280
on or off you go into the other state

00:17:21,810 --> 00:17:25,310
program lock

00:17:23,280 --> 00:17:27,630
similarly for caps lock and scroll lock

00:17:25,310 --> 00:17:31,200
but they are independent of each other

00:17:27,630 --> 00:17:35,390
so basically this state machine has

00:17:31,200 --> 00:17:35,390
eight states over all two to the three

00:17:37,700 --> 00:17:42,450
so I find this is sometimes a helpful

00:17:40,590 --> 00:17:44,400
way to model this if you're drawing our

00:17:42,450 --> 00:17:45,780
state machines but in terms of

00:17:44,400 --> 00:17:48,240
programming it doesn't really make

00:17:45,780 --> 00:17:50,670
things easier so I think it's easier if

00:17:48,240 --> 00:17:52,020
you do want to have concurrent state

00:17:50,670 --> 00:17:54,440
then you just basically define two

00:17:52,020 --> 00:17:56,610
independent state machines and then your

00:17:54,440 --> 00:17:58,820
overall state as the basically the

00:17:56,610 --> 00:18:03,840
product of these two states

00:17:58,820 --> 00:18:09,570
mathematically or you just use boolean

00:18:03,840 --> 00:18:13,800
variables okay so embrance States so I

00:18:09,570 --> 00:18:17,190
have a copy of amber GS and my my drive

00:18:13,800 --> 00:18:19,800
and I just run a grep for a current

00:18:17,190 --> 00:18:23,280
state and these are my results

00:18:19,800 --> 00:18:28,140
amber glimmer amber routing a number of

00:18:23,280 --> 00:18:34,050
views and I'll get to that in a second

00:18:28,140 --> 00:18:36,030
I also ran it on amber data and there's

00:18:34,050 --> 00:18:40,860
a couple more add ons sorry a couple

00:18:36,030 --> 00:18:45,050
more results but I guess the most

00:18:40,860 --> 00:18:49,350
important one is this one model

00:18:45,050 --> 00:18:52,520
and it's rental model both of them so

00:18:49,350 --> 00:18:54,440
amber does use some state machines

00:18:52,520 --> 00:18:59,430
internally

00:18:54,440 --> 00:19:01,290
what are they okay so um I'm not gonna

00:18:59,430 --> 00:19:03,650
fool all of them I'm just gonna

00:19:01,290 --> 00:19:06,060
concentrate on amber routing mostly well

00:19:03,650 --> 00:19:08,360
I'll talk briefly about amber routing Oh

00:19:06,060 --> 00:19:11,910
talk briefly about Amber data

00:19:08,360 --> 00:19:15,530
amber routing which hopefully you're all

00:19:11,910 --> 00:19:18,360
familiar with so an Amber routing you

00:19:15,530 --> 00:19:20,370
define the state machine yourself or

00:19:18,360 --> 00:19:21,450
rather you define the states of the

00:19:20,370 --> 00:19:25,380
state machine and you defined the

00:19:21,450 --> 00:19:28,020
transition rules and then amber takes

00:19:25,380 --> 00:19:30,510
care of setting your current state and

00:19:28,020 --> 00:19:36,330
your current state is the route in which

00:19:30,510 --> 00:19:41,360
you are in we do have some hierarchical

00:19:36,330 --> 00:19:41,360
States which are basically nested routes

00:19:42,470 --> 00:19:48,990
state dependent and behavior is invoked

00:19:46,200 --> 00:19:53,820
by using this dot sent sending an action

00:19:48,990 --> 00:19:56,550
on our routes and you can transition

00:19:53,820 --> 00:19:58,370
between states explicitly by using

00:19:56,550 --> 00:20:02,370
transition the transition to function

00:19:58,370 --> 00:20:05,610
and amber routing has a couple nice

00:20:02,370 --> 00:20:10,070
goodies including bubbling affections

00:20:05,610 --> 00:20:12,390
and the activate and deactivate hook so

00:20:10,070 --> 00:20:14,790
which basically lets you do some cleanup

00:20:12,390 --> 00:20:23,690
work or some set up work independent of

00:20:14,790 --> 00:20:25,980
how you enter relief route so amber data

00:20:23,690 --> 00:20:27,450
also has a state machine however that

00:20:25,980 --> 00:20:28,190
state machine is defined by amber data

00:20:27,450 --> 00:20:32,130
itself

00:20:28,190 --> 00:20:37,350
it's a hierarchical state machine with a

00:20:32,130 --> 00:20:39,900
couple almost concurrent definitions it

00:20:37,350 --> 00:20:43,440
used to use a library called member

00:20:39,900 --> 00:20:46,470
states this library is now not supported

00:20:43,440 --> 00:20:48,780
by Amber officially anymore so basically

00:20:46,470 --> 00:20:50,970
the code was half copy and paste it on

00:20:48,780 --> 00:20:54,330
modified and styling and so it's amber

00:20:50,970 --> 00:20:56,520
data so I dug around a little bit and I

00:20:54,330 --> 00:20:59,960
managed to come up with a following

00:20:56,520 --> 00:20:59,960
diagram so this is the source code

00:21:01,520 --> 00:21:05,789
and as you can see a lot of the

00:21:04,200 --> 00:21:07,610
transitions are commented out because

00:21:05,789 --> 00:21:12,299
basically they would completely blow up

00:21:07,610 --> 00:21:17,940
the diagram here we go that's the heat

00:21:12,299 --> 00:21:19,860
picture and people who've dealt with

00:21:17,940 --> 00:21:21,530
amber dates are probably familiar with

00:21:19,860 --> 00:21:24,179
some things like the the root state

00:21:21,530 --> 00:21:26,490
route that loaded route that loaded that

00:21:24,179 --> 00:21:30,030
created route that loaded that created

00:21:26,490 --> 00:21:33,720
that uncommitted or in flight and so

00:21:30,030 --> 00:21:36,960
forth updated

00:21:33,720 --> 00:21:41,280
there's also routes that empty and

00:21:36,960 --> 00:21:43,559
routed loading actually there's quite a

00:21:41,280 --> 00:21:45,659
few states state-transition missing from

00:21:43,559 --> 00:21:50,940
here so I tried to make a slightly

00:21:45,659 --> 00:21:52,559
simpler diagram so basically number D

00:21:50,940 --> 00:21:55,470
that you start out when you create a new

00:21:52,559 --> 00:21:58,860
Amber and the data model this model

00:21:55,470 --> 00:22:03,150
starts out its life cycle inside the

00:21:58,860 --> 00:22:04,620
empty state work really its root empty

00:22:03,150 --> 00:22:06,230
but I'm not going to write route

00:22:04,620 --> 00:22:08,309
everywhere so it's empty

00:22:06,230 --> 00:22:15,720
then what's your loading data its

00:22:08,309 --> 00:22:17,669
loading if it's loaded then it's in the

00:22:15,720 --> 00:22:20,280
loaded safe state if you created the

00:22:17,669 --> 00:22:23,220
model yourself locally then it will be

00:22:20,280 --> 00:22:25,770
in the uncommitted state so although

00:22:23,220 --> 00:22:29,789
these are basically newly created models

00:22:25,770 --> 00:22:33,360
these are models that are loaded from

00:22:29,789 --> 00:22:35,340
from the server and these are models

00:22:33,360 --> 00:22:38,580
that are about to be deleted so like

00:22:35,340 --> 00:22:40,350
once you delete a model it's not delete

00:22:38,580 --> 00:22:42,809
it immediately you need to call that

00:22:40,350 --> 00:22:45,090
safe on the model and I'm basically the

00:22:42,809 --> 00:22:47,970
transition inside these states over here

00:22:45,090 --> 00:22:50,010
and if you look at the sub states

00:22:47,970 --> 00:22:53,190
they're actually quite similar so this

00:22:50,010 --> 00:22:54,929
and flight saved and uncommitted and

00:22:53,190 --> 00:22:58,580
it's the same for the for the loaded

00:22:54,929 --> 00:22:58,580
state sorry

00:23:00,470 --> 00:23:07,500
for the for the create it in flight I'm

00:23:02,910 --> 00:23:08,850
committed and flight and uncommitted so

00:23:07,500 --> 00:23:11,430
if you look at the actual implementation

00:23:08,850 --> 00:23:14,840
like some things are sort of similar but

00:23:11,430 --> 00:23:14,840
some things are slightly different so

00:23:15,620 --> 00:23:23,670
what's the amber data guys did is they

00:23:20,240 --> 00:23:27,480
used object orientation and inheritance

00:23:23,670 --> 00:23:28,650
of objects to emulate similarities

00:23:27,480 --> 00:23:32,510
between different states so it's not

00:23:28,650 --> 00:23:40,800
really truly a concurrent state machine

00:23:32,510 --> 00:23:43,890
anyway so this brings me to what else

00:23:40,800 --> 00:23:47,160
can you use state machines for when

00:23:43,890 --> 00:23:49,500
state machines for models we had state

00:23:47,160 --> 00:23:51,030
machines for routes there's also some

00:23:49,500 --> 00:23:53,190
internal state machines for components

00:23:51,030 --> 00:23:55,110
the the certain components life cycle I

00:23:53,190 --> 00:24:00,720
haven't looked at exactly how that works

00:23:55,110 --> 00:24:04,680
so I'm not gonna talk about that but two

00:24:00,720 --> 00:24:07,380
natural things which I guess you could

00:24:04,680 --> 00:24:10,110
see from my example over here we're

00:24:07,380 --> 00:24:12,930
modeling a component so anything that

00:24:10,110 --> 00:24:15,660
has semi persistent dates so not data

00:24:12,930 --> 00:24:20,160
that you might want to persist to the

00:24:15,660 --> 00:24:22,320
server but data which is long-lived

00:24:20,160 --> 00:24:25,320
during a session and might change States

00:24:22,320 --> 00:24:28,140
and like a number is one of two things

00:24:25,320 --> 00:24:31,400
either it's a components or service so

00:24:28,140 --> 00:24:34,730
these are the two most common use cases

00:24:31,400 --> 00:24:37,530
so this the amber States library

00:24:34,730 --> 00:24:39,240
actually gonna this is not the the

00:24:37,530 --> 00:24:42,930
github library as you see but this is

00:24:39,240 --> 00:24:45,570
some documentation code for amber

00:24:42,930 --> 00:24:48,600
version one release candidate three

00:24:45,570 --> 00:24:52,020
after which this library was removed

00:24:48,600 --> 00:24:55,830
from ember proper but it shows how to

00:24:52,020 --> 00:24:57,570
use this thing so you create a state

00:24:55,830 --> 00:25:00,390
manager inside the state manager you

00:24:57,570 --> 00:25:03,870
create a couple of states so this is

00:25:00,390 --> 00:25:06,360
hierarchical as you can see and then you

00:25:03,870 --> 00:25:11,730
use transition to transition to other

00:25:06,360 --> 00:25:12,960
states and I think this is a full exam

00:25:11,730 --> 00:25:16,380
points either beautif

00:25:12,960 --> 00:25:27,419
your initial state powered down it also

00:25:16,380 --> 00:25:29,760
has some enter and exit hooks and I'm

00:25:27,419 --> 00:25:31,580
not sure how you explicitly call the oh

00:25:29,760 --> 00:25:36,750
here we go

00:25:31,580 --> 00:25:38,760
no just a create yeah and you sent to

00:25:36,750 --> 00:25:42,539
send an action so this is very similar

00:25:38,760 --> 00:25:44,039
to the routing thing and I'm not sure if

00:25:42,539 --> 00:25:46,980
amber state was ever intended to be used

00:25:44,039 --> 00:25:50,059
in the router or whether it was used in

00:25:46,980 --> 00:25:55,980
the router but certainly the

00:25:50,059 --> 00:25:59,390
terminologies is similar however it's

00:25:55,980 --> 00:26:01,860
not really maintained anymore and I

00:25:59,390 --> 00:26:03,600
didn't really like the fact that you

00:26:01,860 --> 00:26:06,390
have to create a state manager and then

00:26:03,600 --> 00:26:13,950
then estates and like just basically

00:26:06,390 --> 00:26:20,600
creating lots of extra objects so the

00:26:13,950 --> 00:26:27,059
next example is IV stateful one-star

00:26:20,600 --> 00:26:31,370
I've watch's 0 Forks man commits 3 years

00:26:27,059 --> 00:26:31,370
old there's not too mean it's bad though

00:26:33,020 --> 00:26:41,880
this is actually a lot simpler so it

00:26:35,549 --> 00:26:44,250
uses a basically exposes one mixin and

00:26:41,880 --> 00:26:53,429
lets you define your state machine on

00:26:44,250 --> 00:26:54,720
this object fluid States so the roots so

00:26:53,429 --> 00:26:58,289
you have the product state over here the

00:26:54,720 --> 00:27:00,120
idling state over here and first first

00:26:58,289 --> 00:27:04,580
gear state over here each state can have

00:27:00,120 --> 00:27:08,580
its own properties and each state has

00:27:04,580 --> 00:27:10,380
transitions or sorry actions

00:27:08,580 --> 00:27:13,529
you also have an answer and an exit

00:27:10,380 --> 00:27:17,070
action presumably to working as the

00:27:13,529 --> 00:27:19,110
enter and exit okay and you move between

00:27:17,070 --> 00:27:22,039
states by echoing transition transition

00:27:19,110 --> 00:27:24,480
through so relatively similar

00:27:22,039 --> 00:27:25,880
what does vehicle oh yeah and every

00:27:24,480 --> 00:27:30,050
state receives

00:27:25,880 --> 00:27:35,660
the state machine as the as the first

00:27:30,050 --> 00:27:38,210
parameter and this is how you such

00:27:35,660 --> 00:27:40,600
states presumably but as you notice this

00:27:38,210 --> 00:27:45,290
doesn't let you have hierarchical States

00:27:40,600 --> 00:27:48,080
and yeah I don't like the fact that you

00:27:45,290 --> 00:27:50,000
get this vehicle thing over here inside

00:27:48,080 --> 00:27:55,160
the action you have to use this route

00:27:50,000 --> 00:28:02,030
State thing over there and you're sort

00:27:55,160 --> 00:28:07,250
of yeah that's it I have an initial

00:28:02,030 --> 00:28:12,530
state so that's good anyway there's one

00:28:07,250 --> 00:28:14,660
more actually it's two more so we'll get

00:28:12,530 --> 00:28:18,440
to that so this one is a lot more

00:28:14,660 --> 00:28:23,480
popular also hasn't been updated in

00:28:18,440 --> 00:28:27,640
eight months a lot more commits I

00:28:23,480 --> 00:28:32,200
haven't examined it in too much detail

00:28:27,640 --> 00:28:32,200
but from what I can tell it's basically

00:28:32,410 --> 00:28:40,790
seems to be just as complex as the as

00:28:36,950 --> 00:28:43,880
this one as number states plus it claims

00:28:40,790 --> 00:28:51,760
that it is promising where and I'm not

00:28:43,880 --> 00:28:54,610
entirely sure what that means so but I

00:28:51,760 --> 00:28:57,560
guess one of the biggest downsides is Oh

00:28:54,610 --> 00:29:02,060
to downsize it's rather complex and it's

00:28:57,560 --> 00:29:04,790
also not hierarchical so you define your

00:29:02,060 --> 00:29:06,470
state's over here and every state has a

00:29:04,790 --> 00:29:08,840
lot of different hooks will enter it did

00:29:06,470 --> 00:29:10,580
enter will exit did exit and here you

00:29:08,840 --> 00:29:14,000
define events so events are like actions

00:29:10,580 --> 00:29:17,330
and there's some extra stuff that you

00:29:14,000 --> 00:29:20,450
can define in actions and then basically

00:29:17,330 --> 00:29:24,560
this tells you that if you receive an

00:29:20,450 --> 00:29:27,140
action event and you are inside this

00:29:24,560 --> 00:29:30,410
state inside a wake state then your

00:29:27,140 --> 00:29:31,100
transitions the sleeping State or

00:29:30,410 --> 00:29:34,490
something like that

00:29:31,100 --> 00:29:36,350
I basically if I didn't understand

00:29:34,490 --> 00:29:38,630
immediately how it works and plus you

00:29:36,350 --> 00:29:40,159
get these macros expand on those states

00:29:38,630 --> 00:29:47,129
a minute

00:29:40,159 --> 00:29:54,829
so I didn't like this so what do you do

00:29:47,129 --> 00:29:54,829
if you don't like something okay

00:29:55,159 --> 00:30:00,269
I'll show you this in a minute but I'll

00:29:58,259 --> 00:30:02,729
tell you my motivations behind this so I

00:30:00,269 --> 00:30:06,239
wanted to have somebody intuitive so I

00:30:02,729 --> 00:30:08,219
like the sari I like the original member

00:30:06,239 --> 00:30:12,469
states to the extent that it uses some

00:30:08,219 --> 00:30:12,469
terminology were familiar with it uses

00:30:12,950 --> 00:30:16,679
transition to and it uses scent the

00:30:15,269 --> 00:30:20,399
scent sends an action position to

00:30:16,679 --> 00:30:24,749
transitions to the state I wanted to

00:30:20,399 --> 00:30:26,459
keep that moreover I wanted to keep the

00:30:24,749 --> 00:30:32,129
actions hash because we already use that

00:30:26,459 --> 00:30:36,209
for actions oh and I wanted it to be

00:30:32,129 --> 00:30:37,469
hierarchical so I wanted to use the

00:30:36,209 --> 00:30:39,989
actions hash and I wanted to have

00:30:37,469 --> 00:30:42,149
bubbling justice you doing routes so if

00:30:39,989 --> 00:30:43,440
you return true and from an action it's

00:30:42,149 --> 00:30:48,959
going to bubble up to the year to the

00:30:43,440 --> 00:30:51,209
next state above and one conscious

00:30:48,959 --> 00:30:55,919
design decision was that transition to

00:30:51,209 --> 00:30:57,209
as asynchronous function so basically if

00:30:55,919 --> 00:30:58,829
you don't concurrency if you don't some

00:30:57,209 --> 00:31:02,099
asynchronous stuff you have to take care

00:30:58,829 --> 00:31:04,679
of it yourself so and we'll come back to

00:31:02,099 --> 00:31:09,629
this with the example in a second okay

00:31:04,679 --> 00:31:17,099
so it's mostly three months old I expect

00:31:09,629 --> 00:31:19,619
this to go up after tonight users is

00:31:17,099 --> 00:31:20,219
just a simple mix in so like the entire

00:31:19,619 --> 00:31:23,729
add-on

00:31:20,219 --> 00:31:28,769
it's just one file about 140 lines all

00:31:23,729 --> 00:31:33,649
it does is overwrite the scent the scent

00:31:28,769 --> 00:31:33,649
method right

00:31:35,640 --> 00:31:42,280
okay so a okay does something in the and

00:31:39,370 --> 00:31:46,360
and the ended thing and yeah and it

00:31:42,280 --> 00:31:50,890
overwrites sorry it overwrites end and

00:31:46,360 --> 00:31:57,130
yeah and it adds transition to so let's

00:31:50,890 --> 00:32:01,059
have a look I know what to use it you

00:31:57,130 --> 00:32:05,020
define your states explicitly inside the

00:32:01,059 --> 00:32:06,910
state's property if you want

00:32:05,020 --> 00:32:10,120
hierarchical states you use dot notation

00:32:06,910 --> 00:32:15,400
so on dot idle is a subset of dove on

00:32:10,120 --> 00:32:17,320
I'm detective is also subset of on no

00:32:15,400 --> 00:32:21,910
complicated nesting of hashes or

00:32:17,320 --> 00:32:23,340
whatever and you define your actions as

00:32:21,910 --> 00:32:26,530
you would inside your actions hash

00:32:23,340 --> 00:32:30,160
however if you want some actions only

00:32:26,530 --> 00:32:32,350
happen in specific States then you

00:32:30,160 --> 00:32:35,800
create a property inside the actions

00:32:32,350 --> 00:32:38,410
hash with the name of the state and you

00:32:35,800 --> 00:32:40,600
define the action inside inside that

00:32:38,410 --> 00:32:46,620
state so for instance if you are inside

00:32:40,600 --> 00:32:50,320
the on state and if you call turn on

00:32:46,620 --> 00:32:54,460
then it will execute this we're turning

00:32:50,320 --> 00:32:58,200
on but then it will actually bubble so

00:32:54,460 --> 00:32:58,200
it was execute this bit

00:33:02,169 --> 00:33:09,700
if your insights if your insights what

00:33:07,750 --> 00:33:10,120
I'm missing off okay so if your insight

00:33:09,700 --> 00:33:11,740
off

00:33:10,120 --> 00:33:13,720
we don't have often side the actions

00:33:11,740 --> 00:33:16,090
hash because there's no specific actions

00:33:13,720 --> 00:33:17,350
we want off to take so if we don't want

00:33:16,090 --> 00:33:21,580
any specific actions to happen we just

00:33:17,350 --> 00:33:23,230
put them just at the top so if you're

00:33:21,580 --> 00:33:26,500
inside the off state then and you and

00:33:23,230 --> 00:33:28,720
you send turn on then the default action

00:33:26,500 --> 00:33:34,540
will be executed so what's the advantage

00:33:28,720 --> 00:33:36,790
of this basically you can add this mixin

00:33:34,540 --> 00:33:40,059
without modifying your existing code so

00:33:36,790 --> 00:33:43,540
unless you have the state's variable use

00:33:40,059 --> 00:33:46,000
it use for something else you can just

00:33:43,540 --> 00:33:50,350
add it and then gradually improve your

00:33:46,000 --> 00:33:55,179
components or services the other thing

00:33:50,350 --> 00:33:59,770
that it does we expose a property called

00:33:55,179 --> 00:34:03,820
state and that property is quite clever

00:33:59,770 --> 00:34:06,220
so if you're inside the off state then

00:34:03,820 --> 00:34:09,250
this will be true fish so this will

00:34:06,220 --> 00:34:11,649
actually evaluate to a hash to an empty

00:34:09,250 --> 00:34:16,389
hash which in JavaScript lenders truth

00:34:11,649 --> 00:34:22,780
ish so you can use this in templates

00:34:16,389 --> 00:34:28,000
quite easily so rather than so for

00:34:22,780 --> 00:34:30,970
instance over here if we had the boolean

00:34:28,000 --> 00:34:34,690
variables for idle and active over here

00:34:30,970 --> 00:34:38,409
we would have to do if and sorry if were

00:34:34,690 --> 00:34:44,320
idle active but instead we can just do F

00:34:38,409 --> 00:34:46,050
state on some description about

00:34:44,320 --> 00:34:50,050
asynchronicity

00:34:46,050 --> 00:34:54,220
anyway let's let's go back to our

00:34:50,050 --> 00:34:57,280
example right at the beginning things

00:34:54,220 --> 00:34:59,859
this one right and let's see how we can

00:34:57,280 --> 00:35:03,369
gradually make this into an stateful

00:34:59,859 --> 00:35:09,090
components so the first thing you do is

00:35:03,369 --> 00:35:09,090
we talked into paste some code from here

00:35:12,190 --> 00:35:42,170
okay my components we import stable and

00:35:23,569 --> 00:35:50,390
we're stateful and thank you yeah

00:35:42,170 --> 00:35:54,739
and it's working okay so what are the

00:35:50,390 --> 00:35:56,989
states that we once we want the state

00:35:54,739 --> 00:36:01,309
were the botanist sorry with a button

00:35:56,989 --> 00:36:02,930
this says login and it's active where it

00:36:01,309 --> 00:36:09,559
says login and is not active and when it

00:36:02,930 --> 00:36:12,549
says log out so logout and so this state

00:36:09,559 --> 00:36:15,589
could be a fine

00:36:12,549 --> 00:36:22,450
the next thing could be connecting next

00:36:15,589 --> 00:36:22,450
day could be online move this

00:36:35,590 --> 00:36:43,790
we immediately start connecting okay

00:36:40,940 --> 00:36:48,530
know what I'm doing here is not very

00:36:43,790 --> 00:36:56,390
nice but and I'll show it to do it

00:36:48,530 --> 00:37:11,890
properly in a second just trying to

00:36:56,390 --> 00:37:17,420
replicate the sorry thank you

00:37:11,890 --> 00:37:19,570
okay again no something wrong no it's

00:37:17,420 --> 00:37:19,570
not

00:37:28,979 --> 00:37:31,979
okay

00:37:38,329 --> 00:37:47,920
ah Joseph father yes thank you

00:37:45,499 --> 00:37:55,219
so we didn't have a state for the

00:37:47,920 --> 00:37:58,039
connecting thing so basically here we'll

00:37:55,219 --> 00:38:01,369
need F States is offline or state as

00:37:58,039 --> 00:38:03,829
connecting and will mitigate this

00:38:01,369 --> 00:38:08,509
problem in second and one we want it to

00:38:03,829 --> 00:38:15,579
disable if we are connecting what's

00:38:08,509 --> 00:38:20,929
wrong this time or is not a helper okay

00:38:15,579 --> 00:38:27,529
what's the NB truth filters simply look

00:38:20,929 --> 00:38:43,660
up the recent version that works so

00:38:27,529 --> 00:38:43,660
gonna work once we all

00:38:49,150 --> 00:39:06,519
wait oh yeah that's the yeah that's

00:38:58,690 --> 00:39:12,119
something I prepared earlier this is our

00:39:06,519 --> 00:39:18,480
example right okay here we go

00:39:12,119 --> 00:39:25,539
so a works like a charm

00:39:18,480 --> 00:39:32,319
however this is quite ugly so we have an

00:39:25,539 --> 00:39:33,460
or helper over here so maybe in these

00:39:32,319 --> 00:39:37,779
two states should be grouped together

00:39:33,460 --> 00:39:40,240
under a super state we have the

00:39:37,779 --> 00:39:45,999
component I guess let's call that super

00:39:40,240 --> 00:39:51,130
state actually let's call it offline and

00:39:45,999 --> 00:39:53,970
I have two sub states called connecting

00:39:51,130 --> 00:39:53,970
and disconnected

00:40:02,310 --> 00:40:05,310
okay

00:40:07,619 --> 00:40:27,529
okay so this didn't work because this is

00:40:10,380 --> 00:40:33,749
wrong huh thank you okay so if we're in

00:40:27,529 --> 00:40:37,200
here transitioning to offline connecting

00:40:33,749 --> 00:40:38,849
okay also what I didn't mention is some

00:40:37,200 --> 00:40:44,849
of the other implementations if you're

00:40:38,849 --> 00:40:48,390
inside the sub state then sometimes you

00:40:44,849 --> 00:40:51,029
don't have to specify the full substitue

00:40:48,390 --> 00:40:53,519
you want to position two if it shares an

00:40:51,029 --> 00:40:54,930
ancestor so lets you take some shortcuts

00:40:53,519 --> 00:40:56,640
like if we were in the disconnected

00:40:54,930 --> 00:40:57,960
state we could say transitions are

00:40:56,640 --> 00:41:00,029
connecting rather than transition to

00:40:57,960 --> 00:41:03,119
offline connecting however I think this

00:41:00,029 --> 00:41:05,940
is a bad thing it's error-prone and I

00:41:03,119 --> 00:41:10,380
insist that you always specify and state

00:41:05,940 --> 00:41:12,329
explicitly okay this is all fine as you

00:41:10,380 --> 00:41:20,249
notice here this transitions to the

00:41:12,329 --> 00:41:25,859
offline state so what does that mean so

00:41:20,249 --> 00:41:30,690
we click on logout in the offline states

00:41:25,859 --> 00:41:33,210
so there's one more property exposed by

00:41:30,690 --> 00:41:37,049
the stateful add-on and that's called

00:41:33,210 --> 00:41:39,150
iron state just as it's called and some

00:41:37,049 --> 00:41:41,460
of the other some of the amber source

00:41:39,150 --> 00:41:42,930
code be careful

00:41:41,460 --> 00:41:44,729
don't mix it up with underscore current

00:41:42,930 --> 00:41:45,839
states because that's something actually

00:41:44,729 --> 00:41:59,729
used by the amber framework on

00:41:45,839 --> 00:42:01,829
components we go offline disconnected

00:41:59,729 --> 00:42:06,059
offline connecting online log out of

00:42:01,829 --> 00:42:09,869
line disconnected so why is it

00:42:06,059 --> 00:42:11,460
disconnected because because it's the

00:42:09,869 --> 00:42:12,809
first one exactly so I didn't want to

00:42:11,460 --> 00:42:13,200
have an extra property called initial

00:42:12,809 --> 00:42:15,540
State

00:42:13,200 --> 00:42:21,510
it's just the first one

00:42:15,540 --> 00:42:24,750
so what happens if we what if that's the

00:42:21,510 --> 00:42:26,880
next one okay so we start out on the

00:42:24,750 --> 00:42:33,180
connecting States and we basically

00:42:26,880 --> 00:42:37,200
screwed because we can't have this talk

00:42:33,180 --> 00:42:45,060
like this okay let's try it differently

00:42:37,200 --> 00:42:47,910
what about the online state first okay

00:42:45,060 --> 00:42:55,890
no this is not ideal as well okay what

00:42:47,910 --> 00:42:57,690
happened here yes exactly and that's

00:42:55,890 --> 00:43:01,080
because it's the the first one as well

00:42:57,690 --> 00:43:05,120
so during the set up we go through the

00:43:01,080 --> 00:43:07,830
entire state hierarchy and we for every

00:43:05,120 --> 00:43:09,990
super States we always set a default sub

00:43:07,830 --> 00:43:13,980
state and this corresponds to the order

00:43:09,990 --> 00:43:19,650
of the states so I thought that's sort

00:43:13,980 --> 00:43:23,910
of a nice simple way to a very concise

00:43:19,650 --> 00:43:28,310
way to restrict yourself from doing some

00:43:23,910 --> 00:43:28,310
things and having to do them manually

00:43:30,470 --> 00:43:37,230
it's probably two more things I could

00:43:32,490 --> 00:43:41,030
show one of them is okay let's let's

00:43:37,230 --> 00:43:41,030
have this one mess first

00:43:45,900 --> 00:44:01,920
we keep another five months okay so all

00:44:00,600 --> 00:44:03,210
right so it also works like they don't

00:44:01,920 --> 00:44:07,110
have to be in any particular water

00:44:03,210 --> 00:44:09,420
either it's it's clever enough to figure

00:44:07,110 --> 00:44:18,200
out that this and this have a common

00:44:09,420 --> 00:44:31,680
super state what we can do is okay let's

00:44:18,200 --> 00:44:34,130
make another button say two more things

00:44:31,680 --> 00:44:34,130
like a shot

00:44:36,050 --> 00:44:45,980
thank you this new keyboard

00:44:40,710 --> 00:44:45,980
Houston okay

00:44:55,750 --> 00:45:02,150
let's say we want people we want to

00:45:00,530 --> 00:45:07,760
prevent people from trying to log out

00:45:02,150 --> 00:45:11,770
while they're already logged out so we

00:45:07,760 --> 00:45:11,770
could put this log out action inside the

00:45:15,220 --> 00:45:21,380
online hash so this corresponds to this

00:45:18,950 --> 00:45:24,440
action and basically this says if we're

00:45:21,380 --> 00:45:26,599
inside the online action then execute

00:45:24,440 --> 00:45:29,480
this when we send log out okay so what

00:45:26,599 --> 00:45:32,839
happens we log out and everything is

00:45:29,480 --> 00:45:34,130
fine so if we have to we did this

00:45:32,839 --> 00:45:41,750
everything is fine okay

00:45:34,130 --> 00:45:44,500
what happens if we click this error okay

00:45:41,750 --> 00:45:44,500
let's try it again

00:45:44,950 --> 00:46:00,619
error can make this how do you increase

00:45:49,910 --> 00:46:02,420
the size of this sorry plus okay route

00:46:00,619 --> 00:46:11,569
action named log out was not found in

00:46:02,420 --> 00:46:13,400
the component and that's because we the

00:46:11,569 --> 00:46:21,010
only route action we have is log in so

00:46:13,400 --> 00:46:21,010
we could have another go actually

00:46:30,140 --> 00:46:33,329
if we're actually logged in then then

00:46:32,849 --> 00:46:39,960
it's fine

00:46:33,329 --> 00:46:45,030
how did this what's expected through

00:46:39,960 --> 00:46:48,059
this inside here that executes both

00:46:45,030 --> 00:46:51,359
actions right so that's that's bubbling

00:46:48,059 --> 00:46:52,650
for you right there okay one final thing

00:46:51,359 --> 00:47:01,230
if we have another two minutes

00:46:52,650 --> 00:47:03,210
is that right because basically what

00:47:01,230 --> 00:47:06,990
we're doing here is we're defining two

00:47:03,210 --> 00:47:09,539
transitions inside a single action

00:47:06,990 --> 00:47:11,609
so we're saying transition to offline

00:47:09,539 --> 00:47:18,750
connecting and then later at some point

00:47:11,609 --> 00:47:21,809
we transition to online so this is

00:47:18,750 --> 00:47:30,799
conceptually not great so what we could

00:47:21,809 --> 00:47:30,799
do instead is inside the off line

00:47:32,750 --> 00:47:49,740
connecting said the offline connecting

00:47:38,460 --> 00:47:52,220
state we have the interaction this

00:47:49,740 --> 00:47:52,220
golden here

00:47:56,539 --> 00:48:01,709
so this indicates of the connecting

00:47:58,979 --> 00:48:03,630
state there's pretty much nothing else

00:48:01,709 --> 00:48:05,989
but just wait for a promise to resolve

00:48:03,630 --> 00:48:10,019
and then at the end once it resolves it

00:48:05,989 --> 00:48:11,670
transitions to a different state what

00:48:10,019 --> 00:48:13,969
are the advantages of doing something

00:48:11,670 --> 00:48:13,969
like this

00:48:19,400 --> 00:48:27,109
let's give it a slice that's - it's like

00:48:24,390 --> 00:48:27,109
a longer time out

00:48:44,180 --> 00:48:52,440
make sure it still works yeah it still

00:48:47,999 --> 00:48:59,420
works okay let's say instead of doing a

00:48:52,440 --> 00:48:59,420
dump logout we do a stop action

00:48:59,930 --> 00:49:29,729
basically stops whatever you doing okay

00:49:28,079 --> 00:49:32,609
well it does pretty much the same thing

00:49:29,729 --> 00:49:41,309
as log out for now it's the only

00:49:32,609 --> 00:49:47,819
difference is there we go okay well what

00:49:41,309 --> 00:49:51,950
happened there so I mean we're already

00:49:47,819 --> 00:49:55,619
disconnected that's fine if we're online

00:49:51,950 --> 00:50:00,989
stop we'll disconnect actually you know

00:49:55,619 --> 00:50:07,289
what that's called

00:50:00,989 --> 00:50:08,609
yeah let's keep it cold stop so so what

00:50:07,289 --> 00:50:11,549
happened here okay clog and then we

00:50:08,609 --> 00:50:12,329
click stop okay and then we then

00:50:11,549 --> 00:50:17,249
something happens

00:50:12,329 --> 00:50:19,019
basically we're while we're inside the

00:50:17,249 --> 00:50:21,769
connecting states we're clicking stop

00:50:19,019 --> 00:50:24,779
we're transitioning synchronously to the

00:50:21,769 --> 00:50:27,299
disconnected State however later this

00:50:24,779 --> 00:50:29,789
promise results and we have another

00:50:27,299 --> 00:50:31,650
transition into the online state so

00:50:29,789 --> 00:50:36,900
probably what what we meant is that we

00:50:31,650 --> 00:50:37,499
want to cancel the connection so inside

00:50:36,900 --> 00:50:43,460
stop

00:50:37,499 --> 00:50:46,819
we could call number one cup cancel this

00:50:43,460 --> 00:50:46,819
gets tea

00:50:47,009 --> 00:50:57,759
stop this works as expected

00:50:51,689 --> 00:51:01,029
however okay what happens if we call

00:50:57,759 --> 00:51:06,489
stop over here again actually nothing

00:51:01,029 --> 00:51:07,659
happens I was hoping that was gonna be

00:51:06,489 --> 00:51:11,079
an error because you're trying to cancel

00:51:07,659 --> 00:51:13,150
a timeout which has already been

00:51:11,079 --> 00:51:15,849
cancelled or whatnot or it doesn't exist

00:51:13,150 --> 00:51:17,829
anymore but as you can imagine like if

00:51:15,849 --> 00:51:19,479
you're trying to cancel a promise or try

00:51:17,829 --> 00:51:21,849
to cancel an ever concurrency task for

00:51:19,479 --> 00:51:23,559
instance and that sauce is not running

00:51:21,849 --> 00:51:25,659
again it's like something unexpected

00:51:23,559 --> 00:51:29,679
might happen so this is exactly what the

00:51:25,659 --> 00:51:31,779
exit action that's good for as basically

00:51:29,679 --> 00:51:34,839
says like once you're transitioning out

00:51:31,779 --> 00:51:46,749
of this specific routes we can do some

00:51:34,839 --> 00:51:54,999
cleanup work so in this case we go again

00:51:46,749 --> 00:51:56,969
stop again online stop work is expected

00:51:54,999 --> 00:51:59,140
and what's the other advantage of that

00:51:56,969 --> 00:52:05,400
now stop has exactly the same

00:51:59,140 --> 00:52:09,479
implementation as logout well actually

00:52:05,400 --> 00:52:09,479
let's go back to it was before

00:52:20,820 --> 00:52:28,980
yes so before stop had the cancel and

00:52:25,950 --> 00:52:32,070
then transition - no it's exactly like

00:52:28,980 --> 00:52:36,570
the logout growths in fact over here we

00:52:32,070 --> 00:52:41,820
can just call the action log on and we

00:52:36,570 --> 00:52:47,880
can remove this so it's like another way

00:52:41,820 --> 00:52:52,320
you could have done it as you you know

00:52:47,880 --> 00:52:57,270
cancel I'm out then you do this that's

00:52:52,320 --> 00:53:00,200
and log out whoever you're chaining more

00:52:57,270 --> 00:53:03,000
than one actually on to each other and

00:53:00,200 --> 00:53:04,230
again it's an easy way to get lost so I

00:53:03,000 --> 00:53:06,660
think it's much cleaner if you handle

00:53:04,230 --> 00:53:12,080
this with enter and exit actions and

00:53:06,660 --> 00:53:17,480
like basically it's a nice way to

00:53:12,080 --> 00:53:17,480
display asynchronous states and your UI

00:53:17,760 --> 00:53:23,309

YouTube URL: https://www.youtube.com/watch?v=Onj0o975JIg


