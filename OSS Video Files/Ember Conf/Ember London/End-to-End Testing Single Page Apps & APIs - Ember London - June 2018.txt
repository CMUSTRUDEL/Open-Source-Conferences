Title: End-to-End Testing Single Page Apps & APIs - Ember London - June 2018
Publication date: 2018-06-24
Playlist: Ember London
Description: 
	Presented by Paul Jensen.

Developing web applications as separate front end and back end parts is a common practice, but brings with it the challenge of how to test those parts together in an end-to-end fashion.
_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:07,309
okay hi everyone - Paul I'm going to

00:00:02,070 --> 00:00:10,440
talk about the subject so why this took

00:00:07,309 --> 00:00:12,210
my opinion is the end-to-end testing is

00:00:10,440 --> 00:00:14,099
seems to be a bit of a lost art these

00:00:12,210 --> 00:00:18,300
days from my experience of working burse

00:00:14,099 --> 00:00:19,910
companies back in the old days I was

00:00:18,300 --> 00:00:23,039
working at a company called new bamboo

00:00:19,910 --> 00:00:25,260
you can actually see Pablo just there

00:00:23,039 --> 00:00:27,330
there he is I found this image it was

00:00:25,260 --> 00:00:30,029
really hard to find but I found it this

00:00:27,330 --> 00:00:33,149
is our old website and recent build apps

00:00:30,029 --> 00:00:35,160
with Ruby on Rails and end-to-end

00:00:33,149 --> 00:00:37,230
testing with Ruby on Rails was really

00:00:35,160 --> 00:00:41,670
nice Riis imple well supported you had

00:00:37,230 --> 00:00:43,950
cucumber which was used to do BDD and

00:00:41,670 --> 00:00:46,079
then he also had capybara which could

00:00:43,950 --> 00:00:50,039
allow you to basically hook into say

00:00:46,079 --> 00:00:52,530
selenium or web browser actually not web

00:00:50,039 --> 00:00:54,059
right basically hook into browsers test

00:00:52,530 --> 00:00:55,710
your apps in terms of the browser so

00:00:54,059 --> 00:00:57,300
making sure everything kind of works as

00:00:55,710 --> 00:00:58,800
you expect

00:00:57,300 --> 00:01:03,180
and the combination these two works

00:00:58,800 --> 00:01:05,640
really well but around 2010 I left the

00:01:03,180 --> 00:01:07,500
winter a well and roughly at that time

00:01:05,640 --> 00:01:09,869
Rubin rails was starting to get a bit

00:01:07,500 --> 00:01:14,490
overshadowed by another framework and

00:01:09,869 --> 00:01:15,810
any guesses no Jess it's a no Jess

00:01:14,490 --> 00:01:17,220
started to merge on the scene and become

00:01:15,810 --> 00:01:19,290
this sort of cool kid on the block

00:01:17,220 --> 00:01:21,930
and at the same time a front named

00:01:19,290 --> 00:01:24,060
JavaScript tooling changed and suddenly

00:01:21,930 --> 00:01:27,210
there was all of these different tools

00:01:24,060 --> 00:01:29,310
and libraries and frameworks and it just

00:01:27,210 --> 00:01:30,750
kept changing and this is a image I just

00:01:29,310 --> 00:01:33,150
plucked off about JavaScript fatigue

00:01:30,750 --> 00:01:34,439
which just I think sums up kind of the

00:01:33,150 --> 00:01:37,860
the state of affairs over the last

00:01:34,439 --> 00:01:39,990
couple of years and they just kept

00:01:37,860 --> 00:01:42,090
changing and as those texts I exchanged

00:01:39,990 --> 00:01:44,250
mana lifts that we had all been used to

00:01:42,090 --> 00:01:45,600
kind of testing and building start to

00:01:44,250 --> 00:01:48,210
get replaced by single page apps and

00:01:45,600 --> 00:01:51,090
api's and old problems that we had

00:01:48,210 --> 00:01:52,890
solved in previous frameworks were in

00:01:51,090 --> 00:01:57,149
some cases being resold from scratch

00:01:52,890 --> 00:01:59,299
again but some were not and one of those

00:01:57,149 --> 00:02:02,280
was how did you do end-to-end testing

00:01:59,299 --> 00:02:04,469
with an exotic combination of particular

00:02:02,280 --> 00:02:07,229
frameworks on the front end and the back

00:02:04,469 --> 00:02:09,929
end as you split them out into separate

00:02:07,229 --> 00:02:11,970
components and this happened to the

00:02:09,929 --> 00:02:13,830
extent that some developers just said we

00:02:11,970 --> 00:02:15,450
don't bother doing into in test

00:02:13,830 --> 00:02:18,360
and I worked a well they didn't do

00:02:15,450 --> 00:02:20,610
intern testing I worked two small

00:02:18,360 --> 00:02:22,830
startup so what's a star count for a lot

00:02:20,610 --> 00:02:24,830
lost two and a half years and entering

00:02:22,830 --> 00:02:27,450
testing was not something that they did

00:02:24,830 --> 00:02:30,739
and they just simply revert to unit

00:02:27,450 --> 00:02:32,760
tests which to me is a little bit like

00:02:30,739 --> 00:02:34,650
this little gift I found off the

00:02:32,760 --> 00:02:37,349
internet so this is like supposed to be

00:02:34,650 --> 00:02:39,360
a toilet lock door and obviously it's a

00:02:37,349 --> 00:02:40,860
sliding door so the principle there is

00:02:39,360 --> 00:02:42,360
you really got to know how the things

00:02:40,860 --> 00:02:45,930
align and there was a second one as well

00:02:42,360 --> 00:02:49,560
this is my favorite you know great

00:02:45,930 --> 00:02:50,730
design there obviously someone didn't

00:02:49,560 --> 00:02:54,180
quite work out where the bin was meant

00:02:50,730 --> 00:02:55,470
to go but um basically you know there is

00:02:54,180 --> 00:02:57,750
this challenge here which is how do we

00:02:55,470 --> 00:03:01,079
solve in two interesting single-page

00:02:57,750 --> 00:03:03,530
apps and api's and I want to show you a

00:03:01,079 --> 00:03:08,610
way that I think I kind of cracked it

00:03:03,530 --> 00:03:10,049
using these tools so cucumber yes it's

00:03:08,610 --> 00:03:12,569
been around for a while it's still good

00:03:10,049 --> 00:03:14,970
at what it does and a tool that came out

00:03:12,569 --> 00:03:18,090
recently last year or two from Google

00:03:14,970 --> 00:03:20,250
called puppeteer and I'll just going to

00:03:18,090 --> 00:03:22,980
talk quickly about cucumber first as

00:03:20,250 --> 00:03:24,030
anyone you come here it's okay cook a

00:03:22,980 --> 00:03:25,590
couple of you

00:03:24,030 --> 00:03:27,600
so just to guide you through it it's a

00:03:25,590 --> 00:03:30,120
behavior driven development tool for

00:03:27,600 --> 00:03:32,340
describing how an application should

00:03:30,120 --> 00:03:35,579
work in terms of features and those

00:03:32,340 --> 00:03:38,400
features help to run automated tests in

00:03:35,579 --> 00:03:40,109
the browser or in other places and it

00:03:38,400 --> 00:03:42,139
becomes a safety net to catch bugs and

00:03:40,109 --> 00:03:45,480
prevent regressions and it also provides

00:03:42,139 --> 00:03:46,709
documentation on how that app should

00:03:45,480 --> 00:03:48,959
work that everyone else can read the

00:03:46,709 --> 00:03:51,060
idea is it's human readable descriptions

00:03:48,959 --> 00:03:53,069
so what I mean by that is I'm going to

00:03:51,060 --> 00:03:56,639
quickly run you through an example so

00:03:53,069 --> 00:03:57,840
say you install it in a node app there's

00:03:56,639 --> 00:03:59,569
a command there you can just install it

00:03:57,840 --> 00:04:01,920
very quickly as development dependency

00:03:59,569 --> 00:04:04,290
credit features folder put all your

00:04:01,920 --> 00:04:06,810
files in there and then the idea is that

00:04:04,290 --> 00:04:07,950
you sit down with the product owner or

00:04:06,810 --> 00:04:10,139
stake holder and you talk about feature

00:04:07,950 --> 00:04:11,669
you want implement you try and write

00:04:10,139 --> 00:04:13,680
down notes or draw on the whiteboard

00:04:11,669 --> 00:04:15,450
whatever works capture as much

00:04:13,680 --> 00:04:18,510
information as you can and then you

00:04:15,450 --> 00:04:20,130
start to turn that into a feature file

00:04:18,510 --> 00:04:22,049
and the idea with the feature file is

00:04:20,130 --> 00:04:25,020
that you would describe what you're

00:04:22,049 --> 00:04:26,880
looking to achieve who you are and what

00:04:25,020 --> 00:04:29,790
actions you're going to take to do that

00:04:26,880 --> 00:04:32,970
and a good example that I present a

00:04:29,790 --> 00:04:35,880
couple months ago was G GD P R so say

00:04:32,970 --> 00:04:39,860
for example you wanting to enable

00:04:35,880 --> 00:04:41,910
feature to delete users data from system

00:04:39,860 --> 00:04:44,040
you could describe it in this particular

00:04:41,910 --> 00:04:45,470
language and the idea is that anyone can

00:04:44,040 --> 00:04:47,910
read this and understand what it does

00:04:45,470 --> 00:04:50,550
and then when you want to run the tests

00:04:47,910 --> 00:04:54,360
you can just run MPX Q come - - and it

00:04:50,550 --> 00:04:55,200
will run the tests that it finds so what

00:04:54,360 --> 00:04:57,620
it will do is it will look at a

00:04:55,200 --> 00:05:01,320
particular step here and it will then

00:04:57,620 --> 00:05:03,570
try to identify a snippet of code that

00:05:01,320 --> 00:05:05,430
would execute that and if it doesn't

00:05:03,570 --> 00:05:07,410
find it it just says okay I couldn't

00:05:05,430 --> 00:05:09,390
find that byte code but here is a little

00:05:07,410 --> 00:05:13,890
piece of JavaScript so that you could

00:05:09,390 --> 00:05:15,690
put in a particular full file and once

00:05:13,890 --> 00:05:16,860
you put it in there then you can start

00:05:15,690 --> 00:05:19,890
to write some code that actually does

00:05:16,860 --> 00:05:22,770
that particular action and it can also

00:05:19,890 --> 00:05:24,240
pull out numbers as well and quotes in

00:05:22,770 --> 00:05:26,720
words so you can start to pass in

00:05:24,240 --> 00:05:29,010
dynamic variables in your feature files

00:05:26,720 --> 00:05:30,510
so for example the user Sam should no

00:05:29,010 --> 00:05:33,450
longer have any - in system it will

00:05:30,510 --> 00:05:35,460
actually look for Sam and then

00:05:33,450 --> 00:05:36,900
interpolate that as a string to put it

00:05:35,460 --> 00:05:39,510
as a variable you can then pass that

00:05:36,900 --> 00:05:41,550
variable to JavaScript once you do this

00:05:39,510 --> 00:05:45,240
you can put those particular steps in

00:05:41,550 --> 00:05:47,220
say a common steps J's file and then you

00:05:45,240 --> 00:05:48,720
can start to get those particular steps

00:05:47,220 --> 00:05:51,060
to do things like click a button in a

00:05:48,720 --> 00:05:53,010
web app or check that someone is logged

00:05:51,060 --> 00:05:54,860
in or just check the database for a

00:05:53,010 --> 00:05:57,270
particular record existing in the table

00:05:54,860 --> 00:05:58,410
and the idea is that at first all the

00:05:57,270 --> 00:06:00,300
tests will fail because you haven't

00:05:58,410 --> 00:06:02,100
written any code for the app you then

00:06:00,300 --> 00:06:04,500
write the code it passes

00:06:02,100 --> 00:06:08,220
you're given refactor and then you've

00:06:04,500 --> 00:06:10,710
got your safety net and in terms of how

00:06:08,220 --> 00:06:13,260
you test it from the browser puppeteer

00:06:10,710 --> 00:06:14,730
is the second component so it's a no

00:06:13,260 --> 00:06:17,660
gesture library that provides a high

00:06:14,730 --> 00:06:19,770
level API for controlling Google Chrome

00:06:17,660 --> 00:06:23,280
you can run the web browser in either

00:06:19,770 --> 00:06:24,300
full mode or in headless mode and you

00:06:23,280 --> 00:06:26,670
can use it to all sorts of things you

00:06:24,300 --> 00:06:28,380
can take screenshots or websites you can

00:06:26,670 --> 00:06:31,350
create PDF files from webpages it's

00:06:28,380 --> 00:06:32,760
actually better than wk HTML to PDF in

00:06:31,350 --> 00:06:35,760
terms of generating them you don't have

00:06:32,760 --> 00:06:37,140
any weird issues with SVG you can crawl

00:06:35,760 --> 00:06:38,880
a single page wrap and generate

00:06:37,140 --> 00:06:39,860
pre-rendered content so maybe you'll say

00:06:38,880 --> 00:06:42,170
building a

00:06:39,860 --> 00:06:44,330
spider that crawls say want to

00:06:42,170 --> 00:06:45,500
Ticketmaster sites and they've basically

00:06:44,330 --> 00:06:47,680
made sure that they don't put the

00:06:45,500 --> 00:06:49,880
listings directly in the server sent

00:06:47,680 --> 00:06:52,190
HTML they do it as JavaScript afterwards

00:06:49,880 --> 00:06:54,980
you could actually use this to get

00:06:52,190 --> 00:06:56,900
around that you can pass web spiders

00:06:54,980 --> 00:06:58,790
that fill in forms for you and you can

00:06:56,900 --> 00:07:00,400
also get access to the data that's in

00:06:58,790 --> 00:07:03,260
the timeline trace when you load a site

00:07:00,400 --> 00:07:05,090
and you can actually store that away

00:07:03,260 --> 00:07:07,760
using this so you can automate some

00:07:05,090 --> 00:07:09,680
tricks that you might want to do so to

00:07:07,760 --> 00:07:12,080
install it you can just you just call

00:07:09,680 --> 00:07:14,570
MPM install popped here and here's a

00:07:12,080 --> 00:07:16,700
quick example so here you require the

00:07:14,570 --> 00:07:21,170
library and then this function just

00:07:16,700 --> 00:07:23,120
automatically gets invoked using async

00:07:21,170 --> 00:07:28,010
await you can basically say launch

00:07:23,120 --> 00:07:31,490
browser let's I put up a new page go to

00:07:28,010 --> 00:07:35,300
this particular URL and then let's take

00:07:31,490 --> 00:07:36,710
a screen shot right here and it will do

00:07:35,300 --> 00:07:39,380
that for you and you can actually pass

00:07:36,710 --> 00:07:41,840
it the file path there and then close

00:07:39,380 --> 00:07:44,480
browser it's really nice simple and

00:07:41,840 --> 00:07:46,490
power to use until you can use it to

00:07:44,480 --> 00:07:48,560
pass your testing strategy you can use

00:07:46,490 --> 00:07:50,960
it inside integration services like

00:07:48,560 --> 00:07:52,640
so-called CI I've got an example I could

00:07:50,960 --> 00:07:56,480
show you later and you can even use it

00:07:52,640 --> 00:07:57,710
in a DRS lambda functions as well which

00:07:56,480 --> 00:08:01,130
means that actually you can run this

00:07:57,710 --> 00:08:03,230
using all the new service style ways of

00:08:01,130 --> 00:08:05,720
doing things so making them work

00:08:03,230 --> 00:08:08,840
together the way I kind of envisioned it

00:08:05,720 --> 00:08:10,880
is it's a little bit like this key comes

00:08:08,840 --> 00:08:12,680
at your control and puppeteer so your

00:08:10,880 --> 00:08:15,920
puppeteer is loaded into your cucumbers

00:08:12,680 --> 00:08:18,200
Jess file so it can access all the step

00:08:15,920 --> 00:08:21,410
definitions and then the world GS file

00:08:18,200 --> 00:08:24,650
is where you control things so here's an

00:08:21,410 --> 00:08:25,820
example here I've got basically cucumber

00:08:24,650 --> 00:08:28,630
says you've got to set up a world

00:08:25,820 --> 00:08:31,550
constructor I require and puppeteer

00:08:28,630 --> 00:08:33,550
that's literally just a object there's

00:08:31,550 --> 00:08:35,780
nothing else to it these are actually

00:08:33,550 --> 00:08:37,820
the API on the web that are load and

00:08:35,780 --> 00:08:40,910
explain later and then inside of the

00:08:37,820 --> 00:08:43,640
world I basically just get puppeteer

00:08:40,910 --> 00:08:46,190
scopes to the driver pass intercept will

00:08:43,640 --> 00:08:48,050
construct ER and then everything from

00:08:46,190 --> 00:08:50,960
there just gets set up nicely for

00:08:48,050 --> 00:08:52,730
loading into the step definitions so how

00:08:50,960 --> 00:08:53,700
do we do setup and teardown with both of

00:08:52,730 --> 00:08:55,410
these

00:08:53,700 --> 00:08:57,510
so the case example here is a dashboard

00:08:55,410 --> 00:09:00,510
upper built couple years ago called dash

00:08:57,510 --> 00:09:03,720
Q which I'm now rebuilding or I'm

00:09:00,510 --> 00:09:06,210
currently impressed as a rebuilding as a

00:09:03,720 --> 00:09:08,490
single page app and an API is to react

00:09:06,210 --> 00:09:10,710
up on the front ends Express Redis

00:09:08,490 --> 00:09:15,090
on the back and everything's kind of

00:09:10,710 --> 00:09:17,040
been built with BDD style development so

00:09:15,090 --> 00:09:18,630
to give you example of how it currently

00:09:17,040 --> 00:09:20,150
exists you've got a front-end repo back

00:09:18,630 --> 00:09:23,220
in repo

00:09:20,150 --> 00:09:25,530
they have different repos and github and

00:09:23,220 --> 00:09:28,260
then for the tests I actually created a

00:09:25,530 --> 00:09:30,180
separate repo which called desk

00:09:28,260 --> 00:09:32,990
integration and so cucumber and

00:09:30,180 --> 00:09:35,220
puppeteer live in - cointegration repo

00:09:32,990 --> 00:09:39,000
the react type lives in the front ends

00:09:35,220 --> 00:09:40,590
the back end has the API and the way

00:09:39,000 --> 00:09:42,960
that it's sort of loading it is it will

00:09:40,590 --> 00:09:44,550
load those two you'd sort earlier on

00:09:42,960 --> 00:09:47,790
I'll talk you through a bit more in

00:09:44,550 --> 00:09:51,150
detail so to load this single page wrap

00:09:47,790 --> 00:09:55,220
in the API and perform setup Tembo setup

00:09:51,150 --> 00:09:57,240
and teardown even so how do we do that

00:09:55,220 --> 00:09:59,520
actually answer this question it's not

00:09:57,240 --> 00:10:03,810
get sub-modules it's not docker images

00:09:59,520 --> 00:10:05,190
either it's actually NPM so NPM is not

00:10:03,810 --> 00:10:07,080
just a package manager it's a really

00:10:05,190 --> 00:10:09,330
good way to stitch together a couple of

00:10:07,080 --> 00:10:11,760
dependencies in order to achieve a large

00:10:09,330 --> 00:10:13,350
goal and you can use it to do a lot of

00:10:11,760 --> 00:10:16,970
coordination of setup and teardown for

00:10:13,350 --> 00:10:20,780
you so to show you what I mean this is a

00:10:16,970 --> 00:10:23,250
the package.json file for - integration

00:10:20,780 --> 00:10:24,690
and the bit of interest here is down at

00:10:23,250 --> 00:10:26,250
the bottom with the dependencies so

00:10:24,690 --> 00:10:28,050
there's literally just four dependencies

00:10:26,250 --> 00:10:30,960
to the repo there's nothing else except

00:10:28,050 --> 00:10:33,630
the eslint as a dev dependency you've

00:10:30,960 --> 00:10:36,030
got cucumber and puppeteer then you've

00:10:33,630 --> 00:10:37,320
got the API and the web they are

00:10:36,030 --> 00:10:39,590
literally just node modules and that's

00:10:37,320 --> 00:10:42,810
how I'm getting other than to load and

00:10:39,590 --> 00:10:44,190
then to basically point to local copies

00:10:42,810 --> 00:10:46,830
that I'm developing at any time I just

00:10:44,190 --> 00:10:48,660
do they use NPM link and that works

00:10:46,830 --> 00:10:50,070
really nice so what I want to create

00:10:48,660 --> 00:10:52,440
product feature I start with the cukes

00:10:50,070 --> 00:10:53,700
and then implement the feature in single

00:10:52,440 --> 00:10:56,220
page app and then work my way back down

00:10:53,700 --> 00:10:59,130
through to the API and then when I want

00:10:56,220 --> 00:11:01,560
to run the tests I can coordinate all of

00:10:59,130 --> 00:11:04,410
that in one place so what I mean here is

00:11:01,560 --> 00:11:06,750
that there's a npm script section here

00:11:04,410 --> 00:11:07,410
so what I want to do pretest I need to

00:11:06,750 --> 00:11:11,069
make sure that

00:11:07,410 --> 00:11:12,899
the front-end repo has got a test

00:11:11,069 --> 00:11:14,790
environment configuration loaded in to

00:11:12,899 --> 00:11:16,319
know which particular API endpoint to

00:11:14,790 --> 00:11:20,190
hit and some other configuration

00:11:16,319 --> 00:11:22,050
variables I then run the tests using MPI

00:11:20,190 --> 00:11:23,790
execute command address and then

00:11:22,050 --> 00:11:25,980
afterwards just to get it back to the

00:11:23,790 --> 00:11:27,839
development state that I was in after I

00:11:25,980 --> 00:11:29,430
run a post-test and that automatically

00:11:27,839 --> 00:11:32,839
runs when you just call em PM tests you

00:11:29,430 --> 00:11:36,930
don't need to pass pre or post

00:11:32,839 --> 00:11:38,730
explicitly you can just pass npm test so

00:11:36,930 --> 00:11:42,360
how does it start the webinar repos

00:11:38,730 --> 00:11:42,750
again loading those modules at the very

00:11:42,360 --> 00:11:44,670
start

00:11:42,750 --> 00:11:47,490
it's literally here and so what's

00:11:44,670 --> 00:11:49,709
happening here is inside the API repo

00:11:47,490 --> 00:11:51,600
there's an index dot JS file which is

00:11:49,709 --> 00:11:52,829
loading express and a whole bunch of

00:11:51,600 --> 00:11:54,860
other things and at the end when you

00:11:52,829 --> 00:11:57,089
call that file it's booting up the app

00:11:54,860 --> 00:12:01,139
and the same thing is happening for the

00:11:57,089 --> 00:12:03,029
web in this case npm run build is

00:12:01,139 --> 00:12:04,920
getting called and it's literally just

00:12:03,029 --> 00:12:06,269
doing the build step for me which would

00:12:04,920 --> 00:12:08,759
serve up the same assets that would be

00:12:06,269 --> 00:12:13,019
on the production system and then just

00:12:08,759 --> 00:12:14,040
serving that folder and then when it

00:12:13,019 --> 00:12:16,350
comes to mansion dates from the daily

00:12:14,040 --> 00:12:19,589
basis - coup current uses MongoDB and

00:12:16,350 --> 00:12:22,139
Mongoose but I am using or considering

00:12:19,589 --> 00:12:25,740
using PostgreSQL and objections yes

00:12:22,139 --> 00:12:27,990
instead which is really good ORM and so

00:12:25,740 --> 00:12:31,259
there's a need here to have the models

00:12:27,990 --> 00:12:33,990
loaded from that integration repo so how

00:12:31,259 --> 00:12:35,730
do I get that to work the way I manage

00:12:33,990 --> 00:12:39,779
to do it is through the hooks gesture

00:12:35,730 --> 00:12:41,399
file in cucumber and the way that works

00:12:39,779 --> 00:12:43,230
or looks is like this so there's three

00:12:41,399 --> 00:12:44,730
parts the dependencies are actually

00:12:43,230 --> 00:12:49,500
loaded here and you can just go forward

00:12:44,730 --> 00:12:52,829
slash say DB and that will look how a DB

00:12:49,500 --> 00:12:55,470
file in your API repo just pick up the

00:12:52,829 --> 00:12:55,980
models that you wanna load straight away

00:12:55,470 --> 00:12:57,480
actually

00:12:55,980 --> 00:12:59,899
mungus and register loads the DB and

00:12:57,480 --> 00:13:01,860
then require API models which has a

00:12:59,899 --> 00:13:05,370
contained object list of all the models

00:13:01,860 --> 00:13:07,529
I can just reference it there in terms

00:13:05,370 --> 00:13:10,319
of doing setup I just clear everything

00:13:07,529 --> 00:13:11,910
out with the database beforehand and I'm

00:13:10,319 --> 00:13:14,730
using async/await so it's just a nicely

00:13:11,910 --> 00:13:16,230
styled to just be you know remove and if

00:13:14,730 --> 00:13:17,790
I really wanted to dry that up some of

00:13:16,230 --> 00:13:19,769
those models could be called in parallel

00:13:17,790 --> 00:13:20,730
to same time but some of them are

00:13:19,769 --> 00:13:23,010
dependent on

00:13:20,730 --> 00:13:25,230
of others so that's just a nice very

00:13:23,010 --> 00:13:26,399
simple example of it and then here

00:13:25,230 --> 00:13:28,290
there's two things that are happening at

00:13:26,399 --> 00:13:32,339
which are of interest so the first

00:13:28,290 --> 00:13:34,769
section here is actually checking if I'm

00:13:32,339 --> 00:13:36,269
on a certain page or I had a current

00:13:34,769 --> 00:13:41,959
page open from running one of the

00:13:36,269 --> 00:13:45,480
previous tests just clear it's cookies

00:13:41,959 --> 00:13:48,949
and wipe it clean and then basically

00:13:45,480 --> 00:13:54,209
make it available or basically just do a

00:13:48,949 --> 00:13:56,399
complete closed down and then after all

00:13:54,209 --> 00:13:58,050
that it will close the browser down

00:13:56,399 --> 00:14:01,230
completely and then you can actually see

00:13:58,050 --> 00:14:04,490
that it will call through to API and web

00:14:01,230 --> 00:14:07,320
and say let's shut them down and then

00:14:04,490 --> 00:14:08,779
close off the Mongoose and Redis

00:14:07,320 --> 00:14:12,180
connections so that there's no lingering

00:14:08,779 --> 00:14:14,550
process event listeners which would

00:14:12,180 --> 00:14:19,290
actually keep your cucumber tests still

00:14:14,550 --> 00:14:20,459
running in terms of inserting data the

00:14:19,290 --> 00:14:23,070
way it works is you've got say a

00:14:20,459 --> 00:14:24,600
particular step in your feature file it

00:14:23,070 --> 00:14:28,350
will go and find it basically kind of

00:14:24,600 --> 00:14:30,420
like a regex star format it will find

00:14:28,350 --> 00:14:32,160
the particular step definition and then

00:14:30,420 --> 00:14:34,459
call it and the way that I've structured

00:14:32,160 --> 00:14:36,720
it is that I have a little function

00:14:34,459 --> 00:14:38,190
which means it's really nice and easy to

00:14:36,720 --> 00:14:40,350
read all these details so this

00:14:38,190 --> 00:14:43,110
particular user exists it just goes and

00:14:40,350 --> 00:14:46,260
finds a particular user and then just

00:14:43,110 --> 00:14:48,720
instantiates that user and this is

00:14:46,260 --> 00:14:51,420
actually what my step definitions files

00:14:48,720 --> 00:14:53,339
look looks like it's literally just lost

00:14:51,420 --> 00:14:55,079
little functions getting called it makes

00:14:53,339 --> 00:14:56,220
it really easy to read that file so

00:14:55,079 --> 00:14:58,860
rather than having all the functions

00:14:56,220 --> 00:15:00,510
explicitly in there I just have them

00:14:58,860 --> 00:15:01,800
kind of tidy up away and that's really

00:15:00,510 --> 00:15:05,940
good for we need to read through these

00:15:01,800 --> 00:15:07,440
and also the other benefit you get is

00:15:05,940 --> 00:15:09,389
that you can use nodes async/await

00:15:07,440 --> 00:15:11,399
to combine step definitions for a single

00:15:09,389 --> 00:15:12,870
step so the example I could give here is

00:15:11,399 --> 00:15:16,110
if you're logging in with an email

00:15:12,870 --> 00:15:19,800
there's about eight steps there that

00:15:16,110 --> 00:15:21,449
again called and if you are testing

00:15:19,800 --> 00:15:22,680
anything from very start to the very

00:15:21,449 --> 00:15:26,370
finish you don't really want to be

00:15:22,680 --> 00:15:29,160
repeating this all the time because

00:15:26,370 --> 00:15:31,829
actually it gets really really verbose

00:15:29,160 --> 00:15:33,750
after a while and so what you want to do

00:15:31,829 --> 00:15:36,540
is you want to find a way to dry it up

00:15:33,750 --> 00:15:38,250
and we can so you can use nodes

00:15:36,540 --> 00:15:41,850
async/await to do that and the way you

00:15:38,250 --> 00:15:43,770
can do it is you can literally say take

00:15:41,850 --> 00:15:45,990
all these lines and you can just go and

00:15:43,770 --> 00:15:48,890
I login and they encourage you to do

00:15:45,990 --> 00:15:51,180
this to dry up a lot of repetitive steps

00:15:48,890 --> 00:15:53,240
and sometimes just hide some of the

00:15:51,180 --> 00:15:55,920
detail and the way you can do that is

00:15:53,240 --> 00:15:58,710
here's a step definition it's called

00:15:55,920 --> 00:16:00,960
given I log in like a bit time about 10

00:15:58,710 --> 00:16:03,750
seconds and then it's actually going

00:16:00,960 --> 00:16:06,150
visit the home page click on an item

00:16:03,750 --> 00:16:08,970
which is log in check that I'm taken to

00:16:06,150 --> 00:16:11,430
a page then fill in a email and a

00:16:08,970 --> 00:16:14,790
password which are further up in that

00:16:11,430 --> 00:16:16,560
file there and then press a button and

00:16:14,790 --> 00:16:19,200
then I should be on page if I quickly go

00:16:16,560 --> 00:16:21,270
back on the home page click on log in

00:16:19,200 --> 00:16:24,870
check I'm tell you to log in exactly

00:16:21,270 --> 00:16:26,070
mirrors what's happening here which is

00:16:24,870 --> 00:16:29,070
quite nice it means that you can

00:16:26,070 --> 00:16:31,280
actually hide away a lot of detail and

00:16:29,070 --> 00:16:33,650
make your files really easy to read and

00:16:31,280 --> 00:16:36,600
keep people engaging with them as well

00:16:33,650 --> 00:16:39,900
so when it comes to selecting elements

00:16:36,600 --> 00:16:41,970
and page to click you can use CSS

00:16:39,900 --> 00:16:45,330
selectors to get elements in puppeteer

00:16:41,970 --> 00:16:47,430
you can also now use XPath as well to do

00:16:45,330 --> 00:16:48,630
that if they didn't have that about two

00:16:47,430 --> 00:16:51,150
months ago but they introduced it last

00:16:48,630 --> 00:16:53,640
month and there's a nice list of CSS

00:16:51,150 --> 00:16:55,650
selectors that I referenced as a just an

00:16:53,640 --> 00:16:57,540
object tree from JavaScript and here's

00:16:55,650 --> 00:17:01,260
the example that I have so basically

00:16:57,540 --> 00:17:03,800
when I want to click on a particular

00:17:01,260 --> 00:17:06,270
element when I'm referencing it in the

00:17:03,800 --> 00:17:10,410
cucumber future file I just scan through

00:17:06,270 --> 00:17:12,270
this list like this so click on item I

00:17:10,410 --> 00:17:14,699
would basically look at its letters dot

00:17:12,270 --> 00:17:17,459
links link and it will go and find it

00:17:14,699 --> 00:17:19,319
through this particular selection so the

00:17:17,459 --> 00:17:23,520
login for example will look for a

00:17:19,319 --> 00:17:25,890
element with a href of login and this is

00:17:23,520 --> 00:17:28,170
quite nice because actually it's not

00:17:25,890 --> 00:17:30,930
tied into the front-end framework that

00:17:28,170 --> 00:17:33,320
I'm using so much which means that

00:17:30,930 --> 00:17:35,340
you've got a lot of agnostic

00:17:33,320 --> 00:17:36,810
availability to then say change your

00:17:35,340 --> 00:17:38,820
mind on whatever front-end framework you

00:17:36,810 --> 00:17:41,100
want to use so just to give you a quick

00:17:38,820 --> 00:17:44,130
demo I'm going to quickly switch out I'm

00:17:41,100 --> 00:17:47,270
going to run this live I'm going to

00:17:44,130 --> 00:17:52,050
hopefully just going to check

00:17:47,270 --> 00:17:54,150
that I'm actually in get brunch because

00:17:52,050 --> 00:17:56,370
there is a little demo yeah I'm a master

00:17:54,150 --> 00:17:59,010
so I'm just gonna run NPM tests and now

00:17:56,370 --> 00:18:02,970
I'm gonna see if I can find it's gonna

00:17:59,010 --> 00:18:06,720
do a little bit of building so we will

00:18:02,970 --> 00:18:11,640
just wait and then once it kicks off I

00:18:06,720 --> 00:18:14,130
will quickly go to the chromium browser

00:18:11,640 --> 00:18:15,390
that it runs up you'll get right it

00:18:14,130 --> 00:18:18,210
should be an action it is in action

00:18:15,390 --> 00:18:20,370
somewhere where are you here we go

00:18:18,210 --> 00:18:22,860
so what's happening right now is I'm

00:18:20,370 --> 00:18:25,110
testing both the frontend app and the

00:18:22,860 --> 00:18:26,580
API and it's going through and it's just

00:18:25,110 --> 00:18:29,460
testing loads and loads of different

00:18:26,580 --> 00:18:32,850
scenarios and it will just run on like

00:18:29,460 --> 00:18:34,950
this for ages and the point that I

00:18:32,850 --> 00:18:37,650
wanted to sort of show today in terms of

00:18:34,950 --> 00:18:38,610
the agnostic nature of it is at the

00:18:37,650 --> 00:18:40,170
moments just going through and it's

00:18:38,610 --> 00:18:41,700
testing loads and loads of different

00:18:40,170 --> 00:18:43,560
scenarios it will run for about three

00:18:41,700 --> 00:18:45,060
minutes I'm not going to keep you there

00:18:43,560 --> 00:18:48,120
waiting for that I'm just gonna kill it

00:18:45,060 --> 00:18:51,930
and do this fair but I will do that

00:18:48,120 --> 00:18:54,470
later why one show you was in terms of

00:18:51,930 --> 00:18:59,820
agnostic nature I'm just gonna kill you

00:18:54,470 --> 00:19:02,630
what I did later earlier on today was I

00:18:59,820 --> 00:19:04,260
actually did my first ever ember app

00:19:02,630 --> 00:19:07,760
because I thought if I'm going to talk

00:19:04,260 --> 00:19:10,830
here I'd better do some humor so I

00:19:07,760 --> 00:19:13,740
created this embers front-end app which

00:19:10,830 --> 00:19:15,900
is actually running at the moment here

00:19:13,740 --> 00:19:19,170
so it looks absolutely identical to the

00:19:15,900 --> 00:19:20,670
- go app because I basically just did

00:19:19,170 --> 00:19:22,440
some little do group okay and it's got a

00:19:20,670 --> 00:19:27,020
login page and it's got a few other bits

00:19:22,440 --> 00:19:30,900
and bobs but it essentially is just a

00:19:27,020 --> 00:19:35,090
sort of CSS copy and a few pages one of

00:19:30,900 --> 00:19:37,980
the scenarios that I wanted to test in

00:19:35,090 --> 00:19:40,670
cucumber was the login so if I just

00:19:37,980 --> 00:19:44,460
quickly find where I hid the integration

00:19:40,670 --> 00:19:47,880
repo here we are there is a particular

00:19:44,460 --> 00:19:50,520
feature WIP so I just put a tagged login

00:19:47,880 --> 00:19:52,590
with username and for the purpose of

00:19:50,520 --> 00:19:54,240
this I wrote some code here in ember web

00:19:52,590 --> 00:19:55,770
where you've got a login page and it's

00:19:54,240 --> 00:19:57,480
literacy and skip it's not going to do

00:19:55,770 --> 00:20:00,509
any authentication but just to show that

00:19:57,480 --> 00:20:10,549
I can swap out which repo it loads

00:20:00,509 --> 00:20:13,049
I am going to now do MPX cucumber j/s I

00:20:10,549 --> 00:20:14,970
think it's - in fact let me just quickly

00:20:13,049 --> 00:20:15,929
check which command it was around

00:20:14,970 --> 00:20:20,429
earlier on today

00:20:15,929 --> 00:20:23,070
it was NPM run whip that's it

00:20:20,429 --> 00:20:28,590
so MP on run whip will basically do kick

00:20:23,070 --> 00:20:30,179
em dress with - - WP yep at WIPP and npm

00:20:28,590 --> 00:20:31,830
run post-test so what this is doing now

00:20:30,179 --> 00:20:34,950
is it's actually run the tests and it's

00:20:31,830 --> 00:20:39,450
as it passes if I slow it down a little

00:20:34,950 --> 00:20:45,359
bit which I can do here not here I can

00:20:39,450 --> 00:20:50,700
do it here actions so slow-mo let's make

00:20:45,359 --> 00:20:53,220
it 50 I will quickly then get it - here

00:20:50,700 --> 00:20:56,220
we go there we go so this is like

00:20:53,220 --> 00:20:58,590
running really slowly and it's putting

00:20:56,220 --> 00:21:00,929
in the details and it hits login and

00:20:58,590 --> 00:21:04,049
I've been able to basically swap out my

00:21:00,929 --> 00:21:06,840
front-end react app put in the ember app

00:21:04,049 --> 00:21:08,220
and I would like to say it's an

00:21:06,840 --> 00:21:09,809
end-to-end test but in reality it's not

00:21:08,220 --> 00:21:10,859
because obviously this isn't actually

00:21:09,809 --> 00:21:12,210
hitting the API and doing the

00:21:10,859 --> 00:21:14,129
authentication it's just pretending that

00:21:12,210 --> 00:21:15,779
we did there and then going hey I can

00:21:14,129 --> 00:21:17,730
hit the dashboard and actually shows you

00:21:15,779 --> 00:21:19,200
that's not the world's best test because

00:21:17,730 --> 00:21:22,529
actually it's just a certain field under

00:21:19,200 --> 00:21:23,489
dashboard page your past it hasn't

00:21:22,529 --> 00:21:24,989
actually checked that there's a session

00:21:23,489 --> 00:21:26,820
record in the database or anything like

00:21:24,989 --> 00:21:29,100
that but the proof here is that you

00:21:26,820 --> 00:21:30,419
could actually take all the code that's

00:21:29,100 --> 00:21:32,309
already been written for the tests you

00:21:30,419 --> 00:21:34,200
can just swap the front-end component

00:21:32,309 --> 00:21:35,580
out for Ember

00:21:34,200 --> 00:21:36,840
and you can continue and you're not

00:21:35,580 --> 00:21:38,429
necessarily attached to the front-end

00:21:36,840 --> 00:21:41,879
framework you were using before so

00:21:38,429 --> 00:21:47,580
that's a really nice agnostic nature of

00:21:41,879 --> 00:21:49,169
it just to then ran off the rest so

00:21:47,580 --> 00:21:50,549
close to our recipe there is a recipe

00:21:49,169 --> 00:21:54,600
for being able to run this in circle CI

00:21:50,549 --> 00:21:57,840
you'll find a Phoenix 4 / puppeteer - so

00:21:54,600 --> 00:21:59,570
CO CO - recipe it's it's open you can

00:21:57,840 --> 00:22:03,840
access to it and then use it in your

00:21:59,570 --> 00:22:05,879
projects if you using circle CI testing

00:22:03,840 --> 00:22:07,109
browsers other than Google Chrome so

00:22:05,879 --> 00:22:08,399
this is an important point because some

00:22:07,109 --> 00:22:10,859
people have to test for multiple

00:22:08,399 --> 00:22:13,750
browsers if you want to do that continue

00:22:10,859 --> 00:22:17,200
using selenium or using webdriver I

00:22:13,750 --> 00:22:20,100
in place of puppeteer also things

00:22:17,200 --> 00:22:23,830
cucumber chess can do with other than

00:22:20,100 --> 00:22:26,950
soon page reps and api's you can use it

00:22:23,830 --> 00:22:30,460
to test electron apps so there is a

00:22:26,950 --> 00:22:31,900
framework called spectrum which github

00:22:30,460 --> 00:22:33,760
developed and that's got good support

00:22:31,900 --> 00:22:35,590
and that works really well and if you

00:22:33,760 --> 00:22:38,620
want to learn more about it there is a

00:22:35,590 --> 00:22:41,440
chapter on it in my book which you can

00:22:38,620 --> 00:22:43,240
buy online from manning and it's also

00:22:41,440 --> 00:22:44,620
available in mandarin chinese

00:22:43,240 --> 00:22:48,040
there's guy called goodies hour and

00:22:44,620 --> 00:22:51,460
china who translated it and that's me

00:22:48,040 --> 00:22:54,970
i'm paul be jensen that's my twitter and

00:22:51,460 --> 00:22:57,540
github handle and last week I just

00:22:54,970 --> 00:23:00,250
finished up at star count and I'm now

00:22:57,540 --> 00:23:02,410
contracting under my consultancy and I'm

00:23:00,250 --> 00:23:03,180
available for work and that's it thank

00:23:02,410 --> 00:23:07,709
you very much

00:23:03,180 --> 00:23:07,709

YouTube URL: https://www.youtube.com/watch?v=M0-2YlHHdDk


