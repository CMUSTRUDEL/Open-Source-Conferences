Title: Back Button Hell - Ember London - November 2018
Publication date: 2018-11-16
Playlist: Ember London
Description: 
	Presented by Dexter Edwards.

Working on a mobile first Ember application we are often required to implement native-like patterns. In particular we needed to implement a navigation stack and provide the user with the ability to go back, it was... an experience. However some interesting things were learnt on the way that I hope you find useful.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:05,790
I'm Dexter and this is sort of my

00:00:03,090 --> 00:00:09,450
experience on trying to implement a back

00:00:05,790 --> 00:00:16,130
button in ember it was definitely an

00:00:09,450 --> 00:00:18,960
experience so I work on a PWA here which

00:00:16,130 --> 00:00:21,390
you know because we want to keep the

00:00:18,960 --> 00:00:23,850
patterns consistent between our native

00:00:21,390 --> 00:00:25,619
apps and you know any sort of web apps

00:00:23,850 --> 00:00:28,410
that we have we often have to copy

00:00:25,619 --> 00:00:31,050
native patterns a lot and this was sort

00:00:28,410 --> 00:00:34,770
of my journey through creating this back

00:00:31,050 --> 00:00:36,120
button so like what I really want is for

00:00:34,770 --> 00:00:37,110
somebody to just stand up at the end and

00:00:36,120 --> 00:00:38,940
just be like you know you've just

00:00:37,110 --> 00:00:40,410
forgotten this one like really key

00:00:38,940 --> 00:00:41,730
framework feature which is really

00:00:40,410 --> 00:00:43,829
obvious and you know then I'll have

00:00:41,730 --> 00:00:46,170
wasted half an hour of or however long

00:00:43,829 --> 00:00:48,570
because I haven't timed this of all of

00:00:46,170 --> 00:00:50,039
your kite of time but like I feel like

00:00:48,570 --> 00:00:51,390
there should be a more elegant solution

00:00:50,039 --> 00:00:54,300
than what I've come up with because I'm

00:00:51,390 --> 00:00:57,780
really not happy with the solution that

00:00:54,300 --> 00:00:59,730
I have so first thoughts right I mean

00:00:57,780 --> 00:01:02,070
that's easy right you just you've put a

00:00:59,730 --> 00:01:03,629
back action you do this transition to

00:01:02,070 --> 00:01:06,180
you do a previous route and that's

00:01:03,629 --> 00:01:08,850
that's all fine but the thing that I ran

00:01:06,180 --> 00:01:11,909
into was sort of have when I had many

00:01:08,850 --> 00:01:14,070
routes mapping to a single one and the

00:01:11,909 --> 00:01:16,320
reason that this became an issue is I

00:01:14,070 --> 00:01:19,500
guess because the Rooter is not

00:01:16,320 --> 00:01:21,630
necessarily a direct mapped the sort of

00:01:19,500 --> 00:01:24,020
navigation stack that you want to build

00:01:21,630 --> 00:01:28,290
here so for instance in this example

00:01:24,020 --> 00:01:30,180
we've got venues at a venue's route and

00:01:28,290 --> 00:01:32,460
an access route which both link to an

00:01:30,180 --> 00:01:33,810
information route which is sort of one

00:01:32,460 --> 00:01:37,470
of their siblings and there's no way to

00:01:33,810 --> 00:01:39,299
sort of go to know when you're on that

00:01:37,470 --> 00:01:42,780
information route which one to go back

00:01:39,299 --> 00:01:44,970
to correctly so basically what we want

00:01:42,780 --> 00:01:46,290
is this on the right this is a version

00:01:44,970 --> 00:01:47,549
I'm not happy with the loading States

00:01:46,290 --> 00:01:49,799
but just pretend those aren't there

00:01:47,549 --> 00:01:51,329
where we can basically build this kind

00:01:49,799 --> 00:01:53,040
of navigation stack it goes so we can

00:01:51,329 --> 00:01:56,040
build it up and sort of unwind it as

00:01:53,040 --> 00:01:57,329
you'd expect and then you know for sort

00:01:56,040 --> 00:02:00,329
of more wordy requirements we basically

00:01:57,329 --> 00:02:02,070
want a native like navigation stack that

00:02:00,329 --> 00:02:03,979
supports this many-to-one case can

00:02:02,070 --> 00:02:05,670
function to an infinite depth

00:02:03,979 --> 00:02:08,399
consistency with the browsers back

00:02:05,670 --> 00:02:12,780
button and is testable because we have

00:02:08,399 --> 00:02:13,860
to have tests so implementation one one

00:02:12,780 --> 00:02:15,390
inverted commas because

00:02:13,860 --> 00:02:16,410
is actually about implementation six but

00:02:15,390 --> 00:02:21,120
it's the first I'm actually willing to

00:02:16,410 --> 00:02:22,950
show you so and this is transition so

00:02:21,120 --> 00:02:27,330
the transitions was passed to the will

00:02:22,950 --> 00:02:31,110
transition sort of action thing I guess

00:02:27,330 --> 00:02:32,250
on in amber and is sort of defines us so

00:02:31,110 --> 00:02:33,980
it's like oh yeah there must be a way to

00:02:32,250 --> 00:02:37,530
sort of just go back with the transition

00:02:33,980 --> 00:02:40,200
there is not so this has been open for

00:02:37,530 --> 00:02:42,000
four and a half years still not no

00:02:40,200 --> 00:02:43,860
activity as occasionally people asking

00:02:42,000 --> 00:02:47,730
me there's occasionally a few comments

00:02:43,860 --> 00:02:49,110
going up is is the soft and it's not so

00:02:47,730 --> 00:02:52,080
this is actually not in amber itself

00:02:49,110 --> 00:02:56,940
this is in Reuter j/s which is sort of a

00:02:52,080 --> 00:03:00,840
till diyos yeah repository so that was

00:02:56,940 --> 00:03:02,700
not gonna not gonna fly I tried you know

00:03:00,840 --> 00:03:05,330
using transition storing them but it

00:03:02,700 --> 00:03:07,880
just it died for one reason or another

00:03:05,330 --> 00:03:10,350
so come to implementation number two

00:03:07,880 --> 00:03:13,170
which is using window here Street are

00:03:10,350 --> 00:03:16,830
back now the Keith sorry the key thing

00:03:13,170 --> 00:03:19,410
here is to keep this consistent right we

00:03:16,830 --> 00:03:22,170
have to find the Nate have the native

00:03:19,410 --> 00:03:24,209
back button consistent with whatever you

00:03:22,170 --> 00:03:26,310
know our back button is doing we're a

00:03:24,209 --> 00:03:27,840
you know mobile application running in

00:03:26,310 --> 00:03:29,280
browser you have no guarantee that

00:03:27,840 --> 00:03:30,900
they're only going to use your back

00:03:29,280 --> 00:03:33,360
button or they're only going to use the

00:03:30,900 --> 00:03:34,380
the native back button so you have to

00:03:33,360 --> 00:03:37,110
sort of find some way of being

00:03:34,380 --> 00:03:38,810
consistent between these two things so I

00:03:37,110 --> 00:03:41,239
came up with this naive implementation

00:03:38,810 --> 00:03:44,610
which runs us into the first of many

00:03:41,239 --> 00:03:48,870
problems which is the sir that the user

00:03:44,610 --> 00:03:50,670
can leave us this app sorry so here

00:03:48,870 --> 00:03:52,860
we're sort of navigating directly to a

00:03:50,670 --> 00:03:56,250
URL somewhere potentially midway between

00:03:52,860 --> 00:03:59,130
our navigate in our navigation we press

00:03:56,250 --> 00:04:03,630
back and we end up back in Google which

00:03:59,130 --> 00:04:04,799
is really not not ideal so we need some

00:04:03,630 --> 00:04:08,100
way of sort of preventing the user

00:04:04,799 --> 00:04:09,660
leaving this app and the way that I came

00:04:08,100 --> 00:04:13,079
up with this was basically to just try

00:04:09,660 --> 00:04:16,340
and save trying to like get create my

00:04:13,079 --> 00:04:18,510
own sort of array which has all of these

00:04:16,340 --> 00:04:19,919
you know different navigation frames

00:04:18,510 --> 00:04:21,989
pushed into it and then you know we can

00:04:19,919 --> 00:04:24,360
wind and unwind so basically all we're

00:04:21,989 --> 00:04:26,789
doing is we're just you know then when

00:04:24,360 --> 00:04:27,690
we go to our back button we can just say

00:04:26,789 --> 00:04:29,880
oh yeah

00:04:27,690 --> 00:04:31,980
got any like transitions have we

00:04:29,880 --> 00:04:33,570
transitioned at least once so can we go

00:04:31,980 --> 00:04:35,430
back and otherwise just default them

00:04:33,570 --> 00:04:36,990
back to the application route so even

00:04:35,430 --> 00:04:41,430
though it's not a great user experience

00:04:36,990 --> 00:04:42,720
they're not leaving the app I'd like to

00:04:41,430 --> 00:04:44,550
talked about replaced with versa

00:04:42,720 --> 00:04:49,380
transition - sorry I just realized this

00:04:44,550 --> 00:04:52,160
is a really rooty talk NW TP but yes a

00:04:49,380 --> 00:04:54,930
replace with versus transition - so

00:04:52,160 --> 00:04:56,250
transition - and replace with of the two

00:04:54,930 --> 00:04:58,440
ways you can move to a new route in

00:04:56,250 --> 00:05:00,570
amber if you use replace with the new

00:04:58,440 --> 00:05:03,360
route is not pushed into the sort of

00:05:00,570 --> 00:05:07,050
history stack and if you do transition -

00:05:03,360 --> 00:05:09,870
it is so the key thing is right that

00:05:07,050 --> 00:05:11,460
basically yeah sometimes you don't want

00:05:09,870 --> 00:05:14,160
something to be pushed into it so here

00:05:11,460 --> 00:05:15,840
we're browsing to a market and then sort

00:05:14,160 --> 00:05:17,430
of we have many contracts on a market

00:05:15,840 --> 00:05:19,620
essentially speaking what you're looking

00:05:17,430 --> 00:05:22,890
at here is changing the query parameters

00:05:19,620 --> 00:05:24,480
on this and reloading the model but

00:05:22,890 --> 00:05:26,730
fundamentally as a user once I've

00:05:24,480 --> 00:05:29,250
flicked through all of these I want to

00:05:26,730 --> 00:05:31,680
just go back right back to me is this

00:05:29,250 --> 00:05:33,300
screen it's not the the six different

00:05:31,680 --> 00:05:36,030
contract things so that's an example of

00:05:33,300 --> 00:05:37,590
one you would use replace with so and

00:05:36,030 --> 00:05:39,300
our history stack really does need to

00:05:37,590 --> 00:05:40,830
support this we need to if we're ever

00:05:39,300 --> 00:05:43,410
going to have any hope of you know

00:05:40,830 --> 00:05:45,630
keeping our back buttons consistent so

00:05:43,410 --> 00:05:48,000
there's a URL method which is on

00:05:45,630 --> 00:05:48,990
transition so you know we can just

00:05:48,000 --> 00:05:51,030
basically go

00:05:48,990 --> 00:05:52,710
you know if transition to a URL method

00:05:51,030 --> 00:05:54,810
is not equal to replace which is what it

00:05:52,710 --> 00:05:57,270
is if you use replace with then we can

00:05:54,810 --> 00:06:00,270
we can use this but that doesn't work

00:05:57,270 --> 00:06:02,550
because this is the offending line of

00:06:00,270 --> 00:06:04,530
code in actual ember itself line 95 is

00:06:02,550 --> 00:06:06,660
what you want to look at you can see

00:06:04,530 --> 00:06:10,490
that the way in which we set our URL

00:06:06,660 --> 00:06:14,400
method is on you with this dot method

00:06:10,490 --> 00:06:16,080
sort of final function and it's actually

00:06:14,400 --> 00:06:18,450
transitioned to that cause we'll calls

00:06:16,080 --> 00:06:20,220
will transition so basically by the time

00:06:18,450 --> 00:06:21,450
we reach that will transition hook we

00:06:20,220 --> 00:06:23,160
have no idea whether we're replacing

00:06:21,450 --> 00:06:26,970
whether we're transitioning to whether

00:06:23,160 --> 00:06:28,710
we're doing anything like that so I mean

00:06:26,970 --> 00:06:30,750
I just I hacked round it this is the

00:06:28,710 --> 00:06:33,000
first of many hacks which I'm not happy

00:06:30,750 --> 00:06:36,060
with basically just wait till the run

00:06:33,000 --> 00:06:38,220
loop hits the root of transitions the

00:06:36,060 --> 00:06:39,810
root of transitions queue and then you

00:06:38,220 --> 00:06:41,310
know we we actually has that information

00:06:39,810 --> 00:06:42,690
set so we can test it

00:06:41,310 --> 00:06:45,510
I'm really worried that there's some

00:06:42,690 --> 00:06:47,640
like minor race condition here that I

00:06:45,510 --> 00:06:50,730
haven't sorted out but I guess I'll find

00:06:47,640 --> 00:06:52,230
out when that happens so basically we

00:06:50,730 --> 00:06:54,140
have a back button it doesn't leave the

00:06:52,230 --> 00:06:57,390
app and it's supposed to a place with

00:06:54,140 --> 00:06:58,830
this is once not on ember this one's on

00:06:57,390 --> 00:07:02,010
me but we've just basically programmed a

00:06:58,830 --> 00:07:03,720
memory leak as a feature which this

00:07:02,010 --> 00:07:07,110
transition stack is going to just get

00:07:03,720 --> 00:07:08,760
giant it's particularly pertinent for

00:07:07,110 --> 00:07:10,350
PWA because you're expecting this to be

00:07:08,760 --> 00:07:11,640
saved onto the users home screen you're

00:07:10,350 --> 00:07:13,890
expecting this to be a long-lived

00:07:11,640 --> 00:07:16,080
application memory leaks are really you

00:07:13,890 --> 00:07:19,680
know that they're dangerous so basically

00:07:16,080 --> 00:07:20,790
just added a buffer so basically with

00:07:19,680 --> 00:07:22,350
that replacement we have an

00:07:20,790 --> 00:07:24,360
implementation that works which is

00:07:22,350 --> 00:07:27,030
fantastic until we run into another

00:07:24,360 --> 00:07:29,160
problem which is completely untestable

00:07:27,030 --> 00:07:30,900
because we run our tests the first thing

00:07:29,160 --> 00:07:34,470
that hits the tests and back to ember

00:07:30,900 --> 00:07:35,880
again and I have you know so we need a

00:07:34,470 --> 00:07:37,500
way of sort of stubbing this out right

00:07:35,880 --> 00:07:41,490
because that makes perfect sense that

00:07:37,500 --> 00:07:44,190
we'd expect that behavior so like I was

00:07:41,490 --> 00:07:45,480
stumped here I was ready to give up we

00:07:44,190 --> 00:07:48,300
have a technical specialist here called

00:07:45,480 --> 00:07:49,560
Andre he's a legend and he went digging

00:07:48,300 --> 00:07:50,850
through amber and came up with the

00:07:49,560 --> 00:07:53,370
following solution which I had then

00:07:50,850 --> 00:07:56,580
later implemented basically amber has a

00:07:53,370 --> 00:07:58,470
location sort of provider there are two

00:07:56,580 --> 00:08:00,210
of these that are predominantly used the

00:07:58,470 --> 00:08:03,060
first one is history which is going to

00:08:00,210 --> 00:08:05,280
interact within the html5 history API

00:08:03,060 --> 00:08:08,250
and you know do as you'd expect and the

00:08:05,280 --> 00:08:10,410
second one is none this is the one that

00:08:08,250 --> 00:08:12,900
is registered in testing and you know

00:08:10,410 --> 00:08:14,130
behaves how you'd expect it to behave so

00:08:12,900 --> 00:08:16,290
basically what we'd like to do is we'd

00:08:14,130 --> 00:08:18,690
like to take the location none we'd like

00:08:16,290 --> 00:08:20,610
to basically stub out window history go

00:08:18,690 --> 00:08:22,980
back to use this location none service

00:08:20,610 --> 00:08:24,990
and then the user won't leave the page

00:08:22,980 --> 00:08:27,320
it makes all of our sort of transitions

00:08:24,990 --> 00:08:31,170
that we're going to have testable and

00:08:27,320 --> 00:08:34,530
you know basically it works which would

00:08:31,170 --> 00:08:35,910
be nice if you know that sorry this is

00:08:34,530 --> 00:08:39,240
like the code I forgot I had that slide

00:08:35,910 --> 00:08:41,490
bad yeah so which would be nice if if we

00:08:39,240 --> 00:08:43,770
could just do this but this is the

00:08:41,490 --> 00:08:46,050
literal API is that the two different

00:08:43,770 --> 00:08:47,940
things exposed if you look into amber

00:08:46,050 --> 00:08:50,370
like just the URL methods but we can see

00:08:47,940 --> 00:08:54,150
here that there's for some reason zero

00:08:50,370 --> 00:08:55,080
replaced with support on the the

00:08:54,150 --> 00:08:56,910
location none

00:08:55,080 --> 00:08:59,850
it just didn't didn't have that hook in

00:08:56,910 --> 00:09:01,140
fact there was up until recently there

00:08:59,850 --> 00:09:03,330
was literally just a bit of defensive

00:09:01,140 --> 00:09:05,640
coach which was like if replace URL then

00:09:03,330 --> 00:09:05,970
call it otherwise just you know pass on

00:09:05,640 --> 00:09:08,130
words

00:09:05,970 --> 00:09:09,900
so there's point I was pretty mad I'm

00:09:08,130 --> 00:09:12,540
not gonna lie this is this is sort of

00:09:09,900 --> 00:09:14,550
the abridged version so you know this

00:09:12,540 --> 00:09:17,190
was about a week of my life that to get

00:09:14,550 --> 00:09:19,550
here and I was like fine I'll make my

00:09:17,190 --> 00:09:23,670
own location with replaced state support

00:09:19,550 --> 00:09:26,280
and so I did but basically just by

00:09:23,670 --> 00:09:27,450
monkey-patching on location none all

00:09:26,280 --> 00:09:30,980
we're going to do here is we're going to

00:09:27,450 --> 00:09:34,290
just Nick the original sort of replace

00:09:30,980 --> 00:09:36,120
set URL function because that's at the

00:09:34,290 --> 00:09:37,380
end of the day all that matters was we

00:09:36,120 --> 00:09:39,060
want that to be called at some point

00:09:37,380 --> 00:09:41,640
we're gonna define a replace your L

00:09:39,060 --> 00:09:43,320
function which just basically pops and

00:09:41,640 --> 00:09:47,490
you know and a set URL function which

00:09:43,320 --> 00:09:49,350
basically just pops off onto our URLs

00:09:47,490 --> 00:09:50,580
and remove from our stacks it's exactly

00:09:49,350 --> 00:09:54,270
the same as the implementation we have

00:09:50,580 --> 00:09:55,740
on our on our route and then you know

00:09:54,270 --> 00:09:57,390
when we call back we can just basically

00:09:55,740 --> 00:10:00,450
check if we have a peer review RL and

00:09:57,390 --> 00:10:03,600
then return to to that previous URL then

00:10:00,450 --> 00:10:05,100
on each test we just call before before

00:10:03,600 --> 00:10:08,310
each we did once patch that and then

00:10:05,100 --> 00:10:09,540
afterwards we we were still whoo so we

00:10:08,310 --> 00:10:12,390
have an implementation that's testable

00:10:09,540 --> 00:10:14,610
which I was so happy with like you know

00:10:12,390 --> 00:10:17,400
and I was there and I was completing the

00:10:14,610 --> 00:10:19,110
work because this you know architects a

00:10:17,400 --> 00:10:20,520
senior developers technical specialists

00:10:19,110 --> 00:10:24,480
like everyone had gotten involved and we

00:10:20,520 --> 00:10:26,490
finally finally fixed this we'd finally

00:10:24,480 --> 00:10:28,020
got to the back button this testable

00:10:26,490 --> 00:10:31,110
support replace with and doesn't leak

00:10:28,020 --> 00:10:34,230
memory but about three hours later I was

00:10:31,110 --> 00:10:36,960
sitting there playing on my phone and I

00:10:34,230 --> 00:10:39,750
was on Chrome on iOS which is a use case

00:10:36,960 --> 00:10:41,940
us usage statistics show about 5050

00:10:39,750 --> 00:10:44,400
between Safari and Chrome for our

00:10:41,940 --> 00:10:46,260
personal users and it just doesn't work

00:10:44,400 --> 00:10:47,910
because for some reason Apple in their

00:10:46,260 --> 00:10:50,040
infinite wisdom have overridden the

00:10:47,910 --> 00:10:52,740
history dot push state function with

00:10:50,040 --> 00:10:55,440
custom code so it's just no way of

00:10:52,740 --> 00:10:57,450
making it work so in all ember apps at

00:10:55,440 --> 00:11:00,600
the moment if you're accessed on iOS on

00:10:57,450 --> 00:11:04,470
on Chrome on iOS just replace with isn't

00:11:00,600 --> 00:11:06,420
functioning in any way which was really

00:11:04,470 --> 00:11:08,880
annoying after after doing this for so

00:11:06,420 --> 00:11:11,930
long and so I came up

00:11:08,880 --> 00:11:15,360
with the elegant solution of giving up

00:11:11,930 --> 00:11:17,640
which was basically all I could come up

00:11:15,360 --> 00:11:19,110
with I I want I wanted to continue

00:11:17,640 --> 00:11:21,060
fixing it but by this point you know we

00:11:19,110 --> 00:11:23,820
had so many dev hours dev days etc into

00:11:21,060 --> 00:11:24,930
it that we hadn't hadn't got around to

00:11:23,820 --> 00:11:26,430
it

00:11:24,930 --> 00:11:27,840
it's something I want to do it's

00:11:26,430 --> 00:11:29,970
something I intend to do at some point

00:11:27,840 --> 00:11:32,880
but I just haven't had the time

00:11:29,970 --> 00:11:35,220
basically in so far but it's going to be

00:11:32,880 --> 00:11:37,230
ok right because I've chucked this into

00:11:35,220 --> 00:11:38,850
an add-on for you so if you want to

00:11:37,230 --> 00:11:40,980
implement sort of mobile navigation

00:11:38,850 --> 00:11:43,560
stacks you just need to install this and

00:11:40,980 --> 00:11:45,750
hopefully it'll all work but there is

00:11:43,560 --> 00:11:49,290
one last problem that I wanted to solve

00:11:45,750 --> 00:11:51,180
right and that's because this sucks like

00:11:49,290 --> 00:11:52,800
and I mean it really does because this

00:11:51,180 --> 00:11:53,910
is just basic acceptance test code and

00:11:52,800 --> 00:11:55,860
this is what you're going to need to run

00:11:53,910 --> 00:11:57,960
to use my to use my add-on you're going

00:11:55,860 --> 00:11:59,880
to need to call to have stub history

00:11:57,960 --> 00:12:01,260
back and then call it on any test that's

00:11:59,880 --> 00:12:04,410
eventually going to call that that

00:12:01,260 --> 00:12:08,210
action right and the reason that this

00:12:04,410 --> 00:12:12,240
sucks so badly is because when you're

00:12:08,210 --> 00:12:13,470
when you know you not now but like 2

00:12:12,240 --> 00:12:15,060
years down the line what's gonna happen

00:12:13,470 --> 00:12:16,470
is eventually you're gonna forget to put

00:12:15,060 --> 00:12:17,880
that function in you're gonna like you

00:12:16,470 --> 00:12:19,470
know you you're not gonna pass it and

00:12:17,880 --> 00:12:21,060
then hit be logging onto your tests and

00:12:19,470 --> 00:12:23,010
then just one test in the middle of a

00:12:21,060 --> 00:12:24,810
thousand is gonna go Oh back and you can

00:12:23,010 --> 00:12:26,160
why which one is it and it's hard to

00:12:24,810 --> 00:12:27,810
find out which one it is it's hard to

00:12:26,160 --> 00:12:28,950
figure out what's going on and you're

00:12:27,810 --> 00:12:30,600
going to notice that it doesn't happen

00:12:28,950 --> 00:12:31,860
in all your other tests and for some

00:12:30,600 --> 00:12:33,360
reason this function is just not getting

00:12:31,860 --> 00:12:34,530
hit it's just one of those bugs that's

00:12:33,360 --> 00:12:37,440
going to take you forever and you're

00:12:34,530 --> 00:12:39,510
going to get nowhere with it so I came

00:12:37,440 --> 00:12:41,400
up with the idea of like let's create

00:12:39,510 --> 00:12:42,930
our own set up test helper right so this

00:12:41,400 --> 00:12:45,000
is exposed from whatever your sort of

00:12:42,930 --> 00:12:48,300
you know testing thing is we use q unit

00:12:45,000 --> 00:12:49,710
so basically create your own set up

00:12:48,300 --> 00:12:51,090
application test that call set up

00:12:49,710 --> 00:12:53,220
application test and then anything else

00:12:51,090 --> 00:12:56,580
so you know if you've got a session that

00:12:53,220 --> 00:12:59,160
you need stuffing out or mirages etc and

00:12:56,580 --> 00:13:02,040
then basically override the acceptance

00:12:59,160 --> 00:13:04,170
test blueprint to immediately use this

00:13:02,040 --> 00:13:06,060
so basically the only line here that

00:13:04,170 --> 00:13:08,340
changed this is full copied from a

00:13:06,060 --> 00:13:09,750
member is the set of application tests

00:13:08,340 --> 00:13:11,160
and it's just this path yes and now

00:13:09,750 --> 00:13:13,650
we're going to our own helper and

00:13:11,160 --> 00:13:16,140
calling setup application test and that

00:13:13,650 --> 00:13:18,480
means that every time that you know an

00:13:16,140 --> 00:13:19,589
ember developer who is you know an ember

00:13:18,480 --> 00:13:20,910
developer he's going to come in and go

00:13:19,589 --> 00:13:22,350
MBG acceptance test

00:13:20,910 --> 00:13:25,470
shonali t-test whatever that

00:13:22,350 --> 00:13:26,760
functionality might be which you know

00:13:25,470 --> 00:13:28,770
and I like this because it reduces

00:13:26,760 --> 00:13:29,850
mental overhead because you know it's

00:13:28,770 --> 00:13:31,230
one of those things I hate coming into

00:13:29,850 --> 00:13:32,640
project and being told like you know you

00:13:31,230 --> 00:13:34,140
know you just have to remember to like

00:13:32,640 --> 00:13:36,630
add this and you have to remember to do

00:13:34,140 --> 00:13:38,430
that because it it takes you a lot

00:13:36,630 --> 00:13:40,020
longer to get productive and I actually

00:13:38,430 --> 00:13:41,310
did this and we had a junior dev sort of

00:13:40,020 --> 00:13:42,780
join our team recently and he had no

00:13:41,310 --> 00:13:44,070
idea that the acceptance test blueprint

00:13:42,780 --> 00:13:46,320
had even changed which i think is just

00:13:44,070 --> 00:13:49,410
like the perfect amount of solute the

00:13:46,320 --> 00:13:51,390
perfect thing for the solution if you

00:13:49,410 --> 00:13:53,010
don't know and the blueprints and

00:13:51,390 --> 00:13:55,380
overriding them and you know messing

00:13:53,010 --> 00:13:57,480
about that there's a acceptance test

00:13:55,380 --> 00:13:58,980
blueprint repo that I've just chucked up

00:13:57,480 --> 00:14:01,860
there which is this exact pattern if

00:13:58,980 --> 00:14:04,560
anybody wants to copy it because I found

00:14:01,860 --> 00:14:06,600
it to be quite powerful right so I guess

00:14:04,560 --> 00:14:09,210
what's the takeaway from this if there

00:14:06,600 --> 00:14:11,010
is one is that I really feel like this

00:14:09,210 --> 00:14:14,040
is something that ember should be fixing

00:14:11,010 --> 00:14:15,890
if we if it is possible you know messing

00:14:14,040 --> 00:14:20,160
with this history API feel should be the

00:14:15,890 --> 00:14:23,790
the you know prerogative of route j/s or

00:14:20,160 --> 00:14:26,880
potentially amber itself so ideally we'd

00:14:23,790 --> 00:14:28,710
like to fix that but until then just use

00:14:26,880 --> 00:14:30,450
the add-on I guess and save yourself a

00:14:28,710 --> 00:14:32,820
lot of headaches because it took me and

00:14:30,450 --> 00:14:35,280
like my team it's not this is not just

00:14:32,820 --> 00:14:37,290
me this is my entire team a very long

00:14:35,280 --> 00:14:39,710
time to do that there's an Asterix there

00:14:37,290 --> 00:14:43,770
because while I was preparing this talk

00:14:39,710 --> 00:14:45,410
I've noticed that ember 3.6 data has

00:14:43,770 --> 00:14:47,880
moved around some stuff in the router

00:14:45,410 --> 00:14:49,800
like j/s files there's been a couple of

00:14:47,880 --> 00:14:51,660
refactoring there I've tested it on beta

00:14:49,800 --> 00:14:54,240
3 and it works but if there's any more

00:14:51,660 --> 00:14:55,680
might change I'll keep you posted but

00:14:54,240 --> 00:14:58,770
I'm sure I'll find if there is anything

00:14:55,680 --> 00:15:00,690
I'll find a way around it um but yes

00:14:58,770 --> 00:15:03,060
thanks for listening this was my first

00:15:00,690 --> 00:15:05,700
ever talk at anything like this I had a

00:15:03,060 --> 00:15:07,260
week to prepare so you know hopefully it

00:15:05,700 --> 00:15:08,460
wasn't too atrocious and I'd actually

00:15:07,260 --> 00:15:10,500
love to know how everyone's sort of

00:15:08,460 --> 00:15:12,770
testing their navigation because you

00:15:10,500 --> 00:15:15,860
know as near as I can tell it it's hard

00:15:12,770 --> 00:15:15,860
thank you

00:15:15,910 --> 00:15:20,549
you

00:15:16,090 --> 00:15:20,549

YouTube URL: https://www.youtube.com/watch?v=OzADTr4Ulj8


