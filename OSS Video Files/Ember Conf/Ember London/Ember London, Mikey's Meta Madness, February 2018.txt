Title: Ember London, Mikey's Meta Madness, February 2018
Publication date: 2018-02-11
Playlist: Ember London
Description: 
	Michael Schinis: Together we will explore Trouva's infrastructure, how we historically served Frontend apps and APIs and how we currently use HAProxy and AWS to serve all our frontend apps, and APIs through a single routing layer.

More about Ember London: https://www.meetup.com/London-Emberjs-User-Group/
Captions: 
	00:00:00,030 --> 00:00:05,520
so yeah so I'm working a bridge guess

00:00:02,070 --> 00:00:09,960
and we can only have a weird way that we

00:00:05,520 --> 00:00:12,900
had tags to analytics for our pages so

00:00:09,960 --> 00:00:17,220
each page requires a page name as page

00:00:12,900 --> 00:00:19,080
section and a page type and depending on

00:00:17,220 --> 00:00:20,570
the URL or what's happening you apply

00:00:19,080 --> 00:00:23,430
this page name that way we can

00:00:20,570 --> 00:00:24,990
automatically filter all related areas

00:00:23,430 --> 00:00:30,179
of the site so we know where people are

00:00:24,990 --> 00:00:31,679
going but the problem is if we have to

00:00:30,179 --> 00:00:34,230
add that to each and every route that we

00:00:31,679 --> 00:00:35,820
have you'll be going through loads of

00:00:34,230 --> 00:00:38,820
routes trying to put the data in and

00:00:35,820 --> 00:00:41,090
it's just nightmare to maintain cuz you

00:00:38,820 --> 00:00:46,590
never know what's tagged and what's not

00:00:41,090 --> 00:00:48,480
so the problem we want a a good way of

00:00:46,590 --> 00:00:53,690
adding data to a lot of existing routes

00:00:48,480 --> 00:00:56,100
and any new routes it's currently really

00:00:53,690 --> 00:00:58,199
hard to keep track of what routes has

00:00:56,100 --> 00:01:00,090
data and what doesn't so you end up

00:00:58,199 --> 00:01:01,649
losing a lot of part of your analytics

00:01:00,090 --> 00:01:07,080
so you realize that our journeys not

00:01:01,649 --> 00:01:09,240
being tagged or whatever a last one is

00:01:07,080 --> 00:01:10,530
I'm really lazy and I hate having to go

00:01:09,240 --> 00:01:11,909
through each and every route and

00:01:10,530 --> 00:01:15,360
changing every little bit because it's

00:01:11,909 --> 00:01:17,040
just annoying so what I do is as I

00:01:15,360 --> 00:01:20,100
believe every good developer should do

00:01:17,040 --> 00:01:22,170
is be the right kind of lazy where you

00:01:20,100 --> 00:01:24,299
spend hours and hours and hours over

00:01:22,170 --> 00:01:30,530
engineering a solution when you just

00:01:24,299 --> 00:01:30,530
don't want to do the tedious task so

00:01:32,090 --> 00:01:38,030
well the key points that I want from

00:01:35,090 --> 00:01:44,170
this it needed to be clear what hasn't

00:01:38,030 --> 00:01:46,640
hasn't been tagged if you'd like to move

00:01:44,170 --> 00:01:51,649
it needs to be really convenient for you

00:01:46,640 --> 00:01:55,070
to add all your data routes and the data

00:01:51,649 --> 00:01:56,630
needs to be easy actly easily accessible

00:01:55,070 --> 00:01:57,890
like something that you seed a state so

00:01:56,630 --> 00:01:59,899
when you're adding a route you don't

00:01:57,890 --> 00:02:03,409
forget to add it to a random config file

00:01:59,899 --> 00:02:05,810
that's just in in the ether and you hope

00:02:03,409 --> 00:02:11,420
that someone updates it and you know one

00:02:05,810 --> 00:02:14,950
dev isn't going to update it so that

00:02:11,420 --> 00:02:14,950
leads me to try and create a solution

00:02:16,599 --> 00:02:23,959
where should the data be currently we

00:02:21,430 --> 00:02:27,760
propose we have a system for breadcrumbs

00:02:23,959 --> 00:02:27,760
in which we have this giant ugly

00:02:28,030 --> 00:02:32,090
JavaScript object that if you ever need

00:02:30,380 --> 00:02:35,780
to get any data you just reference it

00:02:32,090 --> 00:02:37,730
from the Rooter but it takes up like

00:02:35,780 --> 00:02:40,760
half the file and it just makes the

00:02:37,730 --> 00:02:42,650
whole file look messy but I do think it

00:02:40,760 --> 00:02:47,030
should be in the Ritter so I'll show you

00:02:42,650 --> 00:02:50,660
an example what we currently have so

00:02:47,030 --> 00:02:53,150
this sits just above the Rooter and we

00:02:50,660 --> 00:02:55,370
have repeating names and an issue you

00:02:53,150 --> 00:02:58,989
have is if someone types the name wrong

00:02:55,370 --> 00:03:01,670
of the root then that day is never there

00:02:58,989 --> 00:03:04,489
so I looked at potentially adding it to

00:03:01,670 --> 00:03:07,670
where we define the roots so this is

00:03:04,489 --> 00:03:09,859
like a mock-up of meta dot set where

00:03:07,670 --> 00:03:12,319
inside the function you could set the

00:03:09,859 --> 00:03:14,660
matter that way but I thought maybe we

00:03:12,319 --> 00:03:15,920
could go one step further because that

00:03:14,660 --> 00:03:20,030
she's gonna add extra lines and it's

00:03:15,920 --> 00:03:21,230
gonna make it look messy still so that's

00:03:20,030 --> 00:03:24,739
where I came up with this really

00:03:21,230 --> 00:03:27,980
terribly name to add on I'm open to any

00:03:24,739 --> 00:03:30,200
suggestions so this dot root you need

00:03:27,980 --> 00:03:33,470
this sort root to define any root so why

00:03:30,200 --> 00:03:34,609
don't we add extra data to it so

00:03:33,470 --> 00:03:35,209
currently the second parameter is

00:03:34,609 --> 00:03:37,819
reserved

00:03:35,209 --> 00:03:42,220
well maybe not reserved but can be used

00:03:37,819 --> 00:03:44,580
for page data page ID

00:03:42,220 --> 00:03:46,630
but it doesn't seem to use anything else

00:03:44,580 --> 00:03:49,750
anyone can correct me if I'm wrong than

00:03:46,630 --> 00:03:52,360
that but so I thought how about we just

00:03:49,750 --> 00:04:00,430
use this subject to add extra data like

00:03:52,360 --> 00:04:01,960
page name or section and that way when

00:04:00,430 --> 00:04:03,250
you're defining the route it's just

00:04:01,960 --> 00:04:06,010
there so you there's no house or

00:04:03,250 --> 00:04:08,080
anything and it just also compiles puts

00:04:06,010 --> 00:04:12,400
into a service that you can later use so

00:04:08,080 --> 00:04:14,020
there's an initializer that runs this we

00:04:12,400 --> 00:04:21,790
save the old route from Ambo route to

00:04:14,020 --> 00:04:24,070
DLS we once we save the old route we

00:04:21,790 --> 00:04:26,320
override the route by calling it and

00:04:24,070 --> 00:04:28,240
then simply we check the second

00:04:26,320 --> 00:04:30,220
parameter if it's an object and not a

00:04:28,240 --> 00:04:33,370
function and if it has any extra tater

00:04:30,220 --> 00:04:35,290
we register it to our service and then

00:04:33,370 --> 00:04:38,110
on destroy we make sure we say it back

00:04:35,290 --> 00:04:41,169
that way there's no problems if for

00:04:38,110 --> 00:04:46,150
every reason you don't need it or during

00:04:41,169 --> 00:04:49,260
tests so it's good it's got four main

00:04:46,150 --> 00:04:52,450
methods that suppose that is to be used

00:04:49,260 --> 00:04:56,470
get route which is simple forgive the

00:04:52,450 --> 00:04:58,930
Java like syntax but you just put the

00:04:56,470 --> 00:05:00,190
string of the route that you want pasty

00:04:58,930 --> 00:05:03,700
and it'll give you all data related to

00:05:00,190 --> 00:05:06,430
that route but for us we had a bit of a

00:05:03,700 --> 00:05:08,950
specific thing so because some routes

00:05:06,430 --> 00:05:11,950
were in or pages were in sections

00:05:08,950 --> 00:05:14,169
churches my account section we didn't

00:05:11,950 --> 00:05:16,450
wanna have to write my account for every

00:05:14,169 --> 00:05:17,830
single route that was related so the

00:05:16,450 --> 00:05:20,050
idea of being able to inherit things

00:05:17,830 --> 00:05:21,790
from its parent route was really good

00:05:20,050 --> 00:05:26,740
for us so I create another function

00:05:21,790 --> 00:05:29,880
called get metadata by route it takes

00:05:26,740 --> 00:05:32,890
the string and then it takes another

00:05:29,880 --> 00:05:33,910
optional parameter so it'll either take

00:05:32,890 --> 00:05:35,650
the default attributes that you

00:05:33,910 --> 00:05:37,930
typically would want or you can specify

00:05:35,650 --> 00:05:39,520
which attributes you'd like so if you

00:05:37,930 --> 00:05:42,520
only wanted page name instead of page

00:05:39,520 --> 00:05:45,100
name page type section you can pick them

00:05:42,520 --> 00:05:48,370
there but the benefit of this one is

00:05:45,100 --> 00:05:49,900
that he actually if you can't fulfill

00:05:48,370 --> 00:05:52,390
all the data that you've put in your

00:05:49,900 --> 00:05:54,669
attributes it will check its parent

00:05:52,390 --> 00:05:55,990
route for it and if they can't find in

00:05:54,669 --> 00:05:57,700
the parent it'll keep bubbling up

00:05:55,990 --> 00:06:03,700
until you specified not to bubble up

00:05:57,700 --> 00:06:05,170
anymore edit route because sometimes at

00:06:03,700 --> 00:06:07,330
runtime you might need to edit the route

00:06:05,170 --> 00:06:09,940
or if you have dynamic segments so for

00:06:07,330 --> 00:06:12,850
example on our journey if you are

00:06:09,940 --> 00:06:16,230
booking an engineer you can have an ASV

00:06:12,850 --> 00:06:21,400
or you can have an IB journey if you

00:06:16,230 --> 00:06:23,350
have an SV and an IV or IB or an SV the

00:06:21,400 --> 00:06:26,080
URLs are different but we want the same

00:06:23,350 --> 00:06:27,910
data for each one actually necessary the

00:06:26,080 --> 00:06:29,800
page name will change from ib

00:06:27,910 --> 00:06:34,240
appointment a sv appointment or a

00:06:29,800 --> 00:06:36,910
combined appointment the last one is

00:06:34,240 --> 00:06:39,820
search boots search boots is related to

00:06:36,910 --> 00:06:41,260
get metadata by root it's so you can

00:06:39,820 --> 00:06:43,510
just set your defaults of what you would

00:06:41,260 --> 00:06:45,100
like it so if you ever run get married

00:06:43,510 --> 00:06:46,510
later rather than specifying it every

00:06:45,100 --> 00:06:48,400
time if there's typical ones that you

00:06:46,510 --> 00:06:57,250
would use in certain routes you can do

00:06:48,400 --> 00:07:00,250
that so this is this is a little mock-up

00:06:57,250 --> 00:07:02,950
of how it would work it's just a root

00:07:00,250 --> 00:07:06,670
grandparent parent and child or section

00:07:02,950 --> 00:07:07,990
page type and page name when you run the

00:07:06,670 --> 00:07:11,950
function they still get root mate

00:07:07,990 --> 00:07:13,150
service dot metadata by root you specify

00:07:11,950 --> 00:07:15,160
what the root is that you want to get

00:07:13,150 --> 00:07:17,140
from and the edge beats you want and

00:07:15,160 --> 00:07:18,790
this is at the bottom is just an

00:07:17,140 --> 00:07:26,530
expected result of what you'd get

00:07:18,790 --> 00:07:30,960
returned back there's a little look at

00:07:26,530 --> 00:07:33,820
the implementation so I decided to use a

00:07:30,960 --> 00:07:38,110
recursion as the best way of doing this

00:07:33,820 --> 00:07:40,680
that way because it does everything it

00:07:38,110 --> 00:07:42,790
needs to so why not just repeat it and

00:07:40,680 --> 00:07:48,160
then at the end it filters out anything

00:07:42,790 --> 00:07:52,350
unnecessary that you don't need is there

00:07:48,160 --> 00:07:52,350
any questions about or potential users

00:07:53,380 --> 00:08:03,579
yep okay thanks

00:07:57,940 --> 00:08:03,579

YouTube URL: https://www.youtube.com/watch?v=pnpIkMnWr_8


