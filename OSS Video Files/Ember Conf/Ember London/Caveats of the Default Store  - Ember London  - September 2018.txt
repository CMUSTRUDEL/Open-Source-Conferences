Title: Caveats of the Default Store  - Ember London  - September 2018
Publication date: 2018-09-21
Playlist: Ember London
Description: 
	Presented by Pablo Brasero

At my last talk, I mentioned that Ember provides a default implementation of the store when you don't use Ember Data. However, there's a catch to it. I'll explain it and provide solutions.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:06,210
so welcome everyone my name is Pablo and

00:00:02,550 --> 00:00:08,910
I work for thoughtbot and today I wanted

00:00:06,210 --> 00:00:12,240
to talk about some things that I glossed

00:00:08,910 --> 00:00:14,969
a bit too quickly over the last time I

00:00:12,240 --> 00:00:17,400
gave a talk and may have been slightly

00:00:14,969 --> 00:00:20,029
misleading up probably should have

00:00:17,400 --> 00:00:22,410
completed a bit better at the time but

00:00:20,029 --> 00:00:26,490
that gives me an opportunity to come and

00:00:22,410 --> 00:00:27,750
talk to you now instead by the way don't

00:00:26,490 --> 00:00:30,300
worry you don't need to have seen the

00:00:27,750 --> 00:00:34,739
previous talk I'm going to give you more

00:00:30,300 --> 00:00:41,100
exposition than movie adaptation of Adam

00:00:34,739 --> 00:00:44,100
Brown novel anyway so to recap last time

00:00:41,100 --> 00:00:47,280
I was talking about using amber we

00:00:44,100 --> 00:00:51,030
remember data and particularly using the

00:00:47,280 --> 00:00:54,329
store because amber does have a minimal

00:00:51,030 --> 00:00:57,770
implementation store provided that you

00:00:54,329 --> 00:01:03,359
can use when generally using my data so

00:00:57,770 --> 00:01:06,360
just to lay out the qur'an a bit imagine

00:01:03,359 --> 00:01:10,770
that you have a route such as this one

00:01:06,360 --> 00:01:13,260
so it goes to slash user slash and a

00:01:10,770 --> 00:01:16,920
parameter right so you would normally

00:01:13,260 --> 00:01:19,680
use it something like that and you'll

00:01:16,920 --> 00:01:21,630
have a and you'll have a template like

00:01:19,680 --> 00:01:23,100
this one where do you just what I'm just

00:01:21,630 --> 00:01:31,490
rendering the simplest thing I can think

00:01:23,100 --> 00:01:35,729
of with that model and the thing is that

00:01:31,490 --> 00:01:38,909
with just that ember already can fetch

00:01:35,729 --> 00:01:42,270
the model for us because when we do not

00:01:38,909 --> 00:01:44,460
provide a route module and there

00:01:42,270 --> 00:01:46,799
provides a default implementation of the

00:01:44,460 --> 00:01:48,960
route module for us and a default

00:01:46,799 --> 00:01:53,610
implementation of the end of the model

00:01:48,960 --> 00:01:54,930
hook so the way works is that amber C is

00:01:53,610 --> 00:01:57,540
that well there is a path parameter

00:01:54,930 --> 00:02:01,079
called something something underscore ID

00:01:57,540 --> 00:02:02,880
and then he says well if it is something

00:02:01,079 --> 00:02:03,360
something underscore ID then the model

00:02:02,880 --> 00:02:08,369
is called

00:02:03,360 --> 00:02:10,410
ID and it provides route module that

00:02:08,369 --> 00:02:13,800
looks pretty much like this one well as

00:02:10,410 --> 00:02:17,100
figured out only needs to know so we

00:02:13,800 --> 00:02:20,640
do these dollar-store dog fine you sir

00:02:17,100 --> 00:02:22,440
and it will use the parameter the words

00:02:20,640 --> 00:02:30,080
in the URL templates and the path

00:02:22,440 --> 00:02:33,330
template to to get the model one thing

00:02:30,080 --> 00:02:36,480
that is worth stopping and mentioned now

00:02:33,330 --> 00:02:39,720
is that we're these default

00:02:36,480 --> 00:02:41,970
implementation is using dot fine is not

00:02:39,720 --> 00:02:45,480
using fine record which is what we are

00:02:41,970 --> 00:02:47,670
used to do with a math data and the

00:02:45,480 --> 00:02:52,110
difference between the two is well first

00:02:47,670 --> 00:02:54,560
things first when when you do not fine

00:02:52,110 --> 00:02:57,450
with number data behind the scenes and

00:02:54,560 --> 00:03:01,200
the data simply converts that into a

00:02:57,450 --> 00:03:04,650
final record because find is not really

00:03:01,200 --> 00:03:07,800
a member data API but is rather a

00:03:04,650 --> 00:03:12,180
convention a protocol that amber leaves

00:03:07,800 --> 00:03:15,420
there for any any data layer to

00:03:12,180 --> 00:03:18,450
implement so that this default route

00:03:15,420 --> 00:03:20,430
module can work without we are any

00:03:18,450 --> 00:03:22,440
further instructions and by later

00:03:20,430 --> 00:03:25,380
implements that it just implements that

00:03:22,440 --> 00:03:27,000
as a call to fine record orbit I have

00:03:25,380 --> 00:03:28,310
never used orbit I'll probably do

00:03:27,000 --> 00:03:30,510
something like that it will implement

00:03:28,310 --> 00:03:32,700
define in some way and it will work

00:03:30,510 --> 00:03:35,910
automatically now you want to implement

00:03:32,700 --> 00:03:38,040
your own data layer then you if you

00:03:35,910 --> 00:03:42,239
provide a store with a methyl methyl

00:03:38,040 --> 00:03:45,870
fine it will automatically work in this

00:03:42,239 --> 00:03:51,390
way so anyway back to where we were we

00:03:45,870 --> 00:03:57,260
have this and as I was saying we are now

00:03:51,390 --> 00:03:57,260
using ember data here so the question is

00:03:57,680 --> 00:04:04,470
how does this work but it works because

00:04:01,760 --> 00:04:08,550
maybe already ember already provides a

00:04:04,470 --> 00:04:10,860
default store and it is such that we can

00:04:08,550 --> 00:04:15,440
provide a module such as such as this

00:04:10,860 --> 00:04:18,780
one and this is a simple for your plain

00:04:15,440 --> 00:04:22,950
old JavaScript object we have put in

00:04:18,780 --> 00:04:27,229
models / uses though yes and during the

00:04:22,950 --> 00:04:30,830
build process and there

00:04:27,229 --> 00:04:33,889
looks at what we have in the models

00:04:30,830 --> 00:04:37,250
directory and takes all those modules

00:04:33,889 --> 00:04:39,889
and registered them in the container as

00:04:37,250 --> 00:04:43,430
as models each one with with the name of

00:04:39,889 --> 00:04:47,150
the file and this default implementation

00:04:43,430 --> 00:04:50,750
of the store is able to find a model

00:04:47,150 --> 00:04:53,000
with named store and use this and this

00:04:50,750 --> 00:04:54,979
will work you don't need to do anything

00:04:53,000 --> 00:04:57,949
special to make this work you remove

00:04:54,979 --> 00:05:00,260
amber data you have our router template

00:04:57,949 --> 00:05:04,729
like the one I have described and you

00:05:00,260 --> 00:05:07,310
stick that in there and that works so

00:05:04,729 --> 00:05:09,110
you're also happy saying okay I don't

00:05:07,310 --> 00:05:12,650
need amber data I can implement my own

00:05:09,110 --> 00:05:14,630
data layer and I can do simple Ajax

00:05:12,650 --> 00:05:19,520
requests because I don't need any of

00:05:14,630 --> 00:05:21,530
these JSON API stuff which I

00:05:19,520 --> 00:05:23,949
particularly like and not everybody does

00:05:21,530 --> 00:05:28,120
and I can go and do something like this

00:05:23,949 --> 00:05:31,639
and that works you use the fetch API and

00:05:28,120 --> 00:05:34,760
this returns a promise of these returns

00:05:31,639 --> 00:05:39,229
whatever is an endpoint that and that

00:05:34,760 --> 00:05:40,550
was pretty well then you go on working a

00:05:39,229 --> 00:05:42,139
bit more like that on the first problem

00:05:40,550 --> 00:05:44,840
you may find is that this doesn't work

00:05:42,139 --> 00:05:52,250
with ember CLI Marash and the speaker's

00:05:44,840 --> 00:05:55,159
ember CLI Marash mocks xml httprequest a

00:05:52,250 --> 00:06:00,139
classic way of doing ax but it doesn't

00:05:55,159 --> 00:06:02,449
mock the fetch API well no problem let's

00:06:00,139 --> 00:06:05,240
do this with xml httprequest this is a

00:06:02,449 --> 00:06:09,680
bit more verbose but it works with x +

00:06:05,240 --> 00:06:11,630
brow CLI mirage it works with your

00:06:09,680 --> 00:06:14,300
normal api and well you can just

00:06:11,630 --> 00:06:15,650
abstract this away and and you don't

00:06:14,300 --> 00:06:17,330
need to have all that noise in your

00:06:15,650 --> 00:06:20,389
model at the end of the day or you can

00:06:17,330 --> 00:06:23,000
use a polyfill for fetch that uses an

00:06:20,389 --> 00:06:26,599
xml httprequest or some Ladera and you

00:06:23,000 --> 00:06:30,560
don't need to see all that all the

00:06:26,599 --> 00:06:32,449
ugliness in your code but then comes the

00:06:30,560 --> 00:06:34,400
actual problem of doing things like this

00:06:32,449 --> 00:06:37,580
and it is that you cannot inject

00:06:34,400 --> 00:06:39,500
services into this you cannot use

00:06:37,580 --> 00:06:40,070
computers or properties because this

00:06:39,500 --> 00:06:43,580
object

00:06:40,070 --> 00:06:46,730
spoil this simple obviously we were just

00:06:43,580 --> 00:06:48,710
creating there and exporting is not a

00:06:46,730 --> 00:06:52,340
wear offender doesn't have access to the

00:06:48,710 --> 00:06:57,230
amber in yeah and dependency injection

00:06:52,340 --> 00:06:59,030
framework so there's no way to for

00:06:57,230 --> 00:07:01,010
example use the Ajax service which will

00:06:59,030 --> 00:07:04,790
be a common one to that or assist and to

00:07:01,010 --> 00:07:08,510
use that or as I said to use computed

00:07:04,790 --> 00:07:10,820
properties and why is that there is

00:07:08,510 --> 00:07:11,840
something that when I first found out

00:07:10,820 --> 00:07:15,140
confuse me a bit

00:07:11,840 --> 00:07:18,560
I was trying several things I was trying

00:07:15,140 --> 00:07:22,310
to for example instead of returning a

00:07:18,560 --> 00:07:24,910
simple object importing and very object

00:07:22,310 --> 00:07:28,220
and returning an imperative that

00:07:24,910 --> 00:07:30,320
extension to that and that isn't work

00:07:28,220 --> 00:07:33,710
either and I was trying a few things

00:07:30,320 --> 00:07:37,250
until I just end up ended up going to

00:07:33,710 --> 00:07:39,860
Amber's codebase and seeing what this

00:07:37,250 --> 00:07:42,940
default implementation of the store was

00:07:39,860 --> 00:07:46,760
doing and I'm going to show that to you

00:07:42,940 --> 00:07:50,660
first yes to remember where we were died

00:07:46,760 --> 00:07:53,150
is the code that is using the store

00:07:50,660 --> 00:07:57,740
these are stores a fine name of the

00:07:53,150 --> 00:08:00,080
model and an ID we can retrieve I okay

00:07:57,740 --> 00:08:05,140
so if you go to Amber's cold days if you

00:08:00,080 --> 00:08:08,360
go to slash something as last something

00:08:05,140 --> 00:08:12,110
it's like routing a slash route dot yes

00:08:08,360 --> 00:08:14,060
would you find this this and I am hiding

00:08:12,110 --> 00:08:16,850
away some stuff there so that we can

00:08:14,060 --> 00:08:19,670
uncover it step-by-step and I just see a

00:08:16,850 --> 00:08:23,060
wall of a wall of code and be all

00:08:19,670 --> 00:08:28,850
confused let's try to see what is here

00:08:23,060 --> 00:08:32,780
so first this route module that we all

00:08:28,850 --> 00:08:36,010
extend from when when we create our own

00:08:32,780 --> 00:08:38,930
route modules has a computed property

00:08:36,010 --> 00:08:44,240
called store okay so there is this to

00:08:38,930 --> 00:08:46,060
store and it returns a poem it returns a

00:08:44,240 --> 00:08:48,950
plain old JavaScript object that

00:08:46,060 --> 00:08:52,460
implements find okay so that is these

00:08:48,950 --> 00:08:57,110
dollar store define we got that far

00:08:52,460 --> 00:09:00,260
now in order to find the user modeling

00:08:57,110 --> 00:09:05,450
needs to look into Amber's dependency

00:09:00,260 --> 00:09:07,820
injection container and throwing up it

00:09:05,450 --> 00:09:11,810
gets hold of the owner the application

00:09:07,820 --> 00:09:14,779
which is good enough to look into into

00:09:11,810 --> 00:09:17,209
the container uses factory for with the

00:09:14,779 --> 00:09:18,980
name of the model so it looks for a

00:09:17,209 --> 00:09:22,370
model with the name that we have passed

00:09:18,980 --> 00:09:24,830
in and if this model does exist we just

00:09:22,370 --> 00:09:30,250
bail out because what does clearly know

00:09:24,830 --> 00:09:30,250
what the client code was intending to do

00:09:30,430 --> 00:09:37,550
the next thing I'm going to unveil is he

00:09:34,459 --> 00:09:40,730
uses dot find on the model go through

00:09:37,550 --> 00:09:44,300
the dependence injection container we're

00:09:40,730 --> 00:09:49,940
done yeah this works except of course

00:09:44,300 --> 00:09:52,820
I'm leaving out a line there I actually

00:09:49,940 --> 00:09:56,270
don't know why that is that I mean now I

00:09:52,820 --> 00:09:59,839
have a certain idea but I don't have a

00:09:56,270 --> 00:10:03,770
deep deep understanding but wind-ups

00:09:59,839 --> 00:10:07,160
ends up going who ends up being the end

00:10:03,770 --> 00:10:09,140
result of that is that when we do this

00:10:07,160 --> 00:10:12,050
dot class and substitute the molecular

00:10:09,140 --> 00:10:14,120
that we were so happily about to use the

00:10:12,050 --> 00:10:16,400
dependency injection container goes out

00:10:14,120 --> 00:10:16,940
of the window and we don't have access

00:10:16,400 --> 00:10:20,690
to it anymore

00:10:16,940 --> 00:10:26,690
we just have access to the plain row out

00:10:20,690 --> 00:10:30,560
yet that we were we were using well that

00:10:26,690 --> 00:10:35,740
we were exporting I actually want to

00:10:30,560 --> 00:10:38,839
slack and then discard and then the

00:10:35,740 --> 00:10:41,089
disco and discuss the the forum to ask

00:10:38,839 --> 00:10:46,730
about this the first answer I got was

00:10:41,089 --> 00:10:48,950
this one if Robert Jackson says that it

00:10:46,730 --> 00:10:52,100
is horrid and doesn't want to provide

00:10:48,950 --> 00:10:54,529
much more detail then probably shouldn't

00:10:52,100 --> 00:10:58,850
be asking much more I still asked a bit

00:10:54,529 --> 00:11:03,079
more and Ryan Toronto yes that's weak

00:10:58,850 --> 00:11:05,660
actually was able to provide a bit more

00:11:03,079 --> 00:11:06,830
context all this has to do with back

00:11:05,660 --> 00:11:09,649
compatibility

00:11:06,830 --> 00:11:14,570
with apps then nowadays may still be

00:11:09,649 --> 00:11:17,480
using old versus old versions of all

00:11:14,570 --> 00:11:21,200
versions of ember data I used to do

00:11:17,480 --> 00:11:23,660
things differently and with different

00:11:21,200 --> 00:11:28,149
assumptions applied and who knows maybe

00:11:23,660 --> 00:11:31,040
there are still apps out there using

00:11:28,149 --> 00:11:33,230
ember to not three point where are we at

00:11:31,040 --> 00:11:36,529
the moment three point four and still

00:11:33,230 --> 00:11:41,839
using ember data at one point something

00:11:36,529 --> 00:11:43,459
I can only pity their souls but at the

00:11:41,839 --> 00:11:47,209
end of the day that is a reason is that

00:11:43,459 --> 00:11:49,820
compatibility but I didn't stop at that

00:11:47,209 --> 00:11:50,450
I said well how can I make this work

00:11:49,820 --> 00:11:53,240
anyway

00:11:50,450 --> 00:11:58,670
now I found two solutions I am bringing

00:11:53,240 --> 00:12:00,680
you the first one because we can have a

00:11:58,670 --> 00:12:05,000
little fun here is the unorthodox

00:12:00,680 --> 00:12:08,170
solution please do not do this at home

00:12:05,000 --> 00:12:11,990
and it is how about we create

00:12:08,170 --> 00:12:15,320
initializer initialize instance

00:12:11,990 --> 00:12:18,020
initializers receive the application

00:12:15,320 --> 00:12:20,750
which has access to the container so we

00:12:18,020 --> 00:12:23,390
check it into the window global you know

00:12:20,750 --> 00:12:24,829
with the scare underscores just to

00:12:23,390 --> 00:12:27,770
everybody knows a we shouldn't be

00:12:24,829 --> 00:12:31,300
touching this and be with if we touch

00:12:27,770 --> 00:12:38,930
that we are not responsible of anything

00:12:31,300 --> 00:12:40,399
and then in our model we access this in

00:12:38,930 --> 00:12:43,610
this global that we have left there and

00:12:40,399 --> 00:12:46,910
true now we can access the container we

00:12:43,610 --> 00:12:50,990
can look up for example in this case the

00:12:46,910 --> 00:12:53,510
Ajax service and you see to make our

00:12:50,990 --> 00:12:55,209
Ajax request this works with ember CLI

00:12:53,510 --> 00:12:59,180
Mirage and we have access to services

00:12:55,209 --> 00:13:02,899
through this terrible terrible hack but

00:12:59,180 --> 00:13:06,740
it works of course there is a saner

00:13:02,899 --> 00:13:09,260
solution to get there us you just have

00:13:06,740 --> 00:13:12,290
to think embed data is doing this so

00:13:09,260 --> 00:13:14,959
clearly there is a sane a rational way

00:13:12,290 --> 00:13:16,820
of doing this so just have a look at

00:13:14,959 --> 00:13:19,760
what ember data was doing behind the

00:13:16,820 --> 00:13:20,790
scenes and it's pretty much the

00:13:19,760 --> 00:13:24,780
following it has

00:13:20,790 --> 00:13:27,090
another instance initializer and worry

00:13:24,780 --> 00:13:31,440
the well it does there is that it

00:13:27,090 --> 00:13:33,720
provides another service the stored

00:13:31,440 --> 00:13:38,730
store the window from member data and it

00:13:33,720 --> 00:13:41,640
injects is injects it a store into any

00:13:38,730 --> 00:13:45,800
route which we can can do with it and

00:13:41,640 --> 00:13:48,360
then we can just provide our own store

00:13:45,800 --> 00:13:52,380
that there's something a bit more

00:13:48,360 --> 00:13:54,120
rational from there we can then use the

00:13:52,380 --> 00:13:58,730
police injection or whatever we want to

00:13:54,120 --> 00:14:01,530
have access to their to model some app

00:13:58,730 --> 00:14:03,260
slash models it slash whatever or we can

00:14:01,530 --> 00:14:05,760
do whatever we want maybe maybe

00:14:03,260 --> 00:14:08,430
foreigner maybe we want to do something

00:14:05,760 --> 00:14:11,580
more complicated but at least this will

00:14:08,430 --> 00:14:13,200
be now within embers dependency

00:14:11,580 --> 00:14:15,480
injection framework we will have access

00:14:13,200 --> 00:14:17,310
to all its goodies we will have access

00:14:15,480 --> 00:14:18,960
to services you can do complete the

00:14:17,310 --> 00:14:22,140
properties and we can do all that crazy

00:14:18,960 --> 00:14:26,490
stuff so I hope I am hoping I am NOT

00:14:22,140 --> 00:14:29,520
leaving out anything this time I have to

00:14:26,490 --> 00:14:32,640
come and apologize for that again by the

00:14:29,520 --> 00:14:35,160
way the whole reason why I'm giving this

00:14:32,640 --> 00:14:38,520
talk is I just left it at the poor the

00:14:35,160 --> 00:14:39,570
last time and even come back to say we

00:14:38,520 --> 00:14:42,090
have this problem with dependency

00:14:39,570 --> 00:14:45,300
injection and in fact I remember there

00:14:42,090 --> 00:14:46,740
was actually a question about that and I

00:14:45,300 --> 00:14:48,630
guess suggest yes of course you can do

00:14:46,740 --> 00:14:50,240
this and I and that would have been a

00:14:48,630 --> 00:14:53,220
good moment for me to stop and say

00:14:50,240 --> 00:14:58,170
caveat well as a caveat and there's a

00:14:53,220 --> 00:15:00,060
way to resolve it and with that I can

00:14:58,170 --> 00:15:05,130
only thank you for being my audience and

00:15:00,060 --> 00:15:11,700
ask if you have any questions of course

00:15:05,130 --> 00:15:13,530
not the solution with the plane poacher

00:15:11,700 --> 00:15:15,330
I wouldn't even try distribution of

00:15:13,530 --> 00:15:17,820
course with the global variable I wasn't

00:15:15,330 --> 00:15:19,620
even try the star solution our income

00:15:17,820 --> 00:15:21,480
the star solution that properly get

00:15:19,620 --> 00:15:23,040
things I am confident that there's no

00:15:21,480 --> 00:15:26,130
problem with that I will try that in

00:15:23,040 --> 00:15:30,810
production but I have to admit that I

00:15:26,130 --> 00:15:31,690
haven't done it in fact yeah when I have

00:15:30,810 --> 00:15:33,700
done

00:15:31,690 --> 00:15:36,340
when I haven't used some birth date in

00:15:33,700 --> 00:15:40,060
production I haven't done creating my

00:15:36,340 --> 00:15:42,550
own service that injected the Ajax

00:15:40,060 --> 00:15:44,080
service as well and the end of day is

00:15:42,550 --> 00:15:47,200
the same thing is just that you don't

00:15:44,080 --> 00:15:50,130
have access to this you don't get the

00:15:47,200 --> 00:15:52,240
benefit that of this default

00:15:50,130 --> 00:15:53,890
implementation of routes that amber

00:15:52,240 --> 00:15:56,860
gives us gives you so the only

00:15:53,890 --> 00:15:59,950
difference between doing your own thing

00:15:56,860 --> 00:16:02,870
and doing this is that with this you get

00:15:59,950 --> 00:16:08,289
the extra good if remember

00:16:02,870 --> 00:16:08,289

YouTube URL: https://www.youtube.com/watch?v=EcKaDu0xo_A


