Title: Introduction to Async Await - Ember London - September 2018
Publication date: 2018-09-20
Playlist: Ember London
Description: 
	Presented by Tom Wey.

ES8 added async/await as an alternative to using Promises directly. Learn how using async/await could improve the readability of your async code.

_

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:04,589
hi I'm Tom like Pablo just said we work

00:00:02,909 --> 00:00:08,040
together at thoughtbot we're a design

00:00:04,589 --> 00:00:09,719
and development consultancy I'm not a

00:00:08,040 --> 00:00:12,480
heavy mb user but I am a heavy

00:00:09,719 --> 00:00:13,799
JavaScript user and I guess I've been

00:00:12,480 --> 00:00:14,549
going on about enjoying using

00:00:13,799 --> 00:00:17,369
async/await

00:00:14,549 --> 00:00:18,570
in my current project at work and Pablo

00:00:17,369 --> 00:00:20,760
suggested maybe I'd like to give a quick

00:00:18,570 --> 00:00:22,850
talk about it so that's what it is it's

00:00:20,760 --> 00:00:25,710
an introduction to async/await

00:00:22,850 --> 00:00:27,300
if you're already very very familiar

00:00:25,710 --> 00:00:28,470
with it you probably won't get much out

00:00:27,300 --> 00:00:29,970
of this talk but if you've heard of it

00:00:28,470 --> 00:00:32,009
but not used there or you haven't heard

00:00:29,970 --> 00:00:35,130
of it then hopefully there's something

00:00:32,009 --> 00:00:36,719
interesting here before you so first up

00:00:35,130 --> 00:00:39,809
what is async/await

00:00:36,719 --> 00:00:44,309
it was introduced in ESA also known as

00:00:39,809 --> 00:00:47,670
es 2017 and it's an alternative to using

00:00:44,309 --> 00:00:50,610
the promises API directly when you are

00:00:47,670 --> 00:00:53,160
writing and dealing with asynchronous

00:00:50,610 --> 00:00:55,620
code and basically in a nutshell what it

00:00:53,160 --> 00:00:58,230
allows you to do is write asynchronous

00:00:55,620 --> 00:01:00,030
code that looks like regular old

00:00:58,230 --> 00:01:01,590
synchronous code and I think that's

00:01:00,030 --> 00:01:04,739
that's the main benefit for me sort of

00:01:01,590 --> 00:01:06,780
readability so I figured just like we'll

00:01:04,739 --> 00:01:10,290
work through some super simple examples

00:01:06,780 --> 00:01:12,090
here I've defined a function foo it does

00:01:10,290 --> 00:01:15,659
nothing interesting it returns the

00:01:12,090 --> 00:01:17,670
string food underneath I implemented the

00:01:15,659 --> 00:01:21,990
same function but I've marked it as

00:01:17,670 --> 00:01:24,240
async and that has had two effects one

00:01:21,990 --> 00:01:26,900
is that it's caused the return value of

00:01:24,240 --> 00:01:30,540
the function to be a promise that

00:01:26,900 --> 00:01:32,579
resolves with the original value

00:01:30,540 --> 00:01:35,159
returned by the function so in this case

00:01:32,579 --> 00:01:38,490
it returns a promise that immediately

00:01:35,159 --> 00:01:40,259
resolves with the string through and the

00:01:38,490 --> 00:01:42,270
other thing that it allows us to do is

00:01:40,259 --> 00:01:45,210
use a weight within the function and

00:01:42,270 --> 00:01:46,320
that's kind of the interesting part so

00:01:45,210 --> 00:01:50,220
here's a slightly more interesting

00:01:46,320 --> 00:01:53,610
function fetch and transform post uses

00:01:50,220 --> 00:01:56,280
the fetch API to fetch some data then

00:01:53,610 --> 00:01:58,380
decodes that data as JSON and performs

00:01:56,280 --> 00:02:03,689
some transformation on that data let's

00:01:58,380 --> 00:02:06,149
say it normalizes the keys and fetch and

00:02:03,689 --> 00:02:08,849
responds to Jason both return promises

00:02:06,149 --> 00:02:10,860
so usually we detach okay then handle it

00:02:08,849 --> 00:02:13,290
to both of those in this case we are

00:02:10,860 --> 00:02:15,930
awaiting the result and that

00:02:13,290 --> 00:02:19,739
causes us to suspend execution of this

00:02:15,930 --> 00:02:21,120
code path until the async operation has

00:02:19,739 --> 00:02:23,489
completed so until the promise is

00:02:21,120 --> 00:02:25,769
resolved and await unwraps

00:02:23,489 --> 00:02:28,109
the results and assigns it like to a

00:02:25,769 --> 00:02:30,599
variable so we await the result of the

00:02:28,109 --> 00:02:33,750
fetch a call and that gives us the

00:02:30,599 --> 00:02:35,879
response and then we await the json

00:02:33,750 --> 00:02:39,000
decoding of that response and assign

00:02:35,879 --> 00:02:40,230
that to post and then we perform some

00:02:39,000 --> 00:02:41,670
synchronous operation like I said maybe

00:02:40,230 --> 00:02:42,920
we're normalizing the keys of post or

00:02:41,670 --> 00:02:46,230
something like that and return

00:02:42,920 --> 00:02:49,290
transformed post so the return value

00:02:46,230 --> 00:02:51,299
affection transform post is a promise

00:02:49,290 --> 00:02:53,189
that resolves with the value of

00:02:51,299 --> 00:02:57,480
transform post assuming everything is

00:02:53,189 --> 00:03:00,689
successful within the function so I find

00:02:57,480 --> 00:03:02,599
where async await really shines is where

00:03:00,689 --> 00:03:05,129
you've got asynchronous code

00:03:02,599 --> 00:03:06,629
interspersed with synchronous code and

00:03:05,129 --> 00:03:08,459
maybe some kind of conditional logic

00:03:06,629 --> 00:03:10,169
going on in there so here we're doing

00:03:08,459 --> 00:03:12,629
something very similar we are fetching

00:03:10,169 --> 00:03:14,669
some data we're decoding it as Jason and

00:03:12,629 --> 00:03:16,620
then we have a condition where we check

00:03:14,669 --> 00:03:19,859
the status of the thing that we've just

00:03:16,620 --> 00:03:21,930
fetched and if it matches published we

00:03:19,859 --> 00:03:24,120
go off and fetch some additional data

00:03:21,930 --> 00:03:25,680
we're fetching the comments for the post

00:03:24,120 --> 00:03:27,359
that we're interested in again we're

00:03:25,680 --> 00:03:30,780
decoding those as Jason and then we're

00:03:27,359 --> 00:03:32,699
returning those comments merged into the

00:03:30,780 --> 00:03:35,690
post basically otherwise if the status

00:03:32,699 --> 00:03:37,889
is anything else we just return the post

00:03:35,690 --> 00:03:40,349
so this ends up looking kind of much

00:03:37,889 --> 00:03:42,239
flatter and I find it more readable than

00:03:40,349 --> 00:03:44,340
the equivalent written with promises

00:03:42,239 --> 00:03:47,370
which would look something like this so

00:03:44,340 --> 00:03:50,790
we've got kind of nested calls going on

00:03:47,370 --> 00:03:52,919
nested ends within our then handlers I

00:03:50,790 --> 00:03:55,019
worked with the developer on a project

00:03:52,919 --> 00:03:57,419
recently who wasn't super experienced

00:03:55,019 --> 00:03:59,519
with promises and he kind of commented

00:03:57,419 --> 00:04:01,139
on the fact that he found the async

00:03:59,519 --> 00:04:03,750
await version of stuff generally liked

00:04:01,139 --> 00:04:07,319
easier to follow and easier to easier to

00:04:03,750 --> 00:04:09,000
work with so there are a few cases where

00:04:07,319 --> 00:04:11,280
you can't get away from the fact that

00:04:09,000 --> 00:04:12,569
you are using promises behind the season

00:04:11,280 --> 00:04:14,849
you have to interact with that API

00:04:12,569 --> 00:04:17,970
directly and one of those is if you want

00:04:14,849 --> 00:04:21,239
to perform concurrent asynchronous

00:04:17,970 --> 00:04:23,880
operations so here we have two functions

00:04:21,239 --> 00:04:26,130
which both kick off some asynchronous

00:04:23,880 --> 00:04:27,160
work and we're awaiting both of them we

00:04:26,130 --> 00:04:28,570
were rating a waiting

00:04:27,160 --> 00:04:31,450
generate result one and then we're

00:04:28,570 --> 00:04:32,530
awaiting generate result two so and then

00:04:31,450 --> 00:04:33,910
we concatenate in the two of those

00:04:32,530 --> 00:04:38,170
together with presumably they resolve

00:04:33,910 --> 00:04:40,330
with with strings we concatenate in this

00:04:38,170 --> 00:04:42,640
together and returning them but by

00:04:40,330 --> 00:04:44,560
structuring our code like this we're

00:04:42,640 --> 00:04:46,120
gonna kick off the the first async

00:04:44,560 --> 00:04:48,520
operation and we're gonna wait for that

00:04:46,120 --> 00:04:52,290
to finish before we kick off the second

00:04:48,520 --> 00:04:54,370
one so we're doing those in serial and

00:04:52,290 --> 00:04:56,470
maybe that's fine but because they're

00:04:54,370 --> 00:04:59,140
independent we could have those bits of

00:04:56,470 --> 00:05:01,900
work happen concurrently so if we wrap

00:04:59,140 --> 00:05:04,540
those two asynchronous functions in a

00:05:01,900 --> 00:05:06,100
promise that all in a way that then they

00:05:04,540 --> 00:05:07,810
will happen at the same time and when

00:05:06,100 --> 00:05:09,460
they're both resolved we'll return the

00:05:07,810 --> 00:05:12,810
same results we did previously but

00:05:09,460 --> 00:05:14,710
possibly slightly more efficiently

00:05:12,810 --> 00:05:19,750
probably worth talking a little bit

00:05:14,710 --> 00:05:20,830
about results and error handling so it's

00:05:19,750 --> 00:05:23,260
always possible that something might go

00:05:20,830 --> 00:05:24,640
wrong so we probably want to attach a

00:05:23,260 --> 00:05:27,310
catch handler to our asynchronous

00:05:24,640 --> 00:05:28,690
function and deal with that in some

00:05:27,310 --> 00:05:30,520
smaller way than just logging in error

00:05:28,690 --> 00:05:33,790
but that's an option an alternative

00:05:30,520 --> 00:05:36,040
which you could use is if you if you

00:05:33,790 --> 00:05:39,100
wrap your the function that you're

00:05:36,040 --> 00:05:40,720
awaiting in a try-catch block and return

00:05:39,100 --> 00:05:43,210
some kind of sensible default then you

00:05:40,720 --> 00:05:46,210
could structure your code in a way that

00:05:43,210 --> 00:05:48,760
you're never going to bubble up that

00:05:46,210 --> 00:05:50,260
that failed promise so if that makes

00:05:48,760 --> 00:05:54,220
sense for your application then that's a

00:05:50,260 --> 00:05:58,120
thing that you can you can do you can't

00:05:54,220 --> 00:06:00,400
use a weight outside of an asynchronous

00:05:58,120 --> 00:06:03,340
function so at some point in your code

00:06:00,400 --> 00:06:04,360
at the top level or within a synchronous

00:06:03,340 --> 00:06:09,040
function where you kick off an

00:06:04,360 --> 00:06:11,169
asynchronous function you know if you're

00:06:09,040 --> 00:06:12,790
interested in the return value you might

00:06:11,169 --> 00:06:14,770
think that you can do this so here we've

00:06:12,790 --> 00:06:16,720
got an async function and at the top

00:06:14,770 --> 00:06:19,210
level we are awaiting the result of that

00:06:16,720 --> 00:06:20,950
but because we're outside of an async

00:06:19,210 --> 00:06:22,540
function at this level that's not going

00:06:20,950 --> 00:06:25,600
to work a weight isn't available to us

00:06:22,540 --> 00:06:27,460
here so we have to attach and then

00:06:25,600 --> 00:06:30,430
handle it just like we would if we were

00:06:27,460 --> 00:06:32,530
using promises yeah apparently a weight

00:06:30,430 --> 00:06:33,630
outside of async is available in latest

00:06:32,530 --> 00:06:37,390
chrome so great

00:06:33,630 --> 00:06:39,280
tal cool that's it just a quick

00:06:37,390 --> 00:06:41,409
introduction yeah if anyone has any

00:06:39,280 --> 00:06:43,319
questions far away I

00:06:41,409 --> 00:06:45,879
only really been using async/await on

00:06:43,319 --> 00:06:48,519
the positive current project that I'm on

00:06:45,879 --> 00:06:50,379
right now I haven't run into that a

00:06:48,519 --> 00:06:52,659
whole bunch

00:06:50,379 --> 00:07:00,459
it's a react native project that I'm on

00:06:52,659 --> 00:07:02,139
and so generally I would say it's not a

00:07:00,459 --> 00:07:03,939
sit-in that a situation that I've run

00:07:02,139 --> 00:07:06,039
into a bunch although I can imagine that

00:07:03,939 --> 00:07:07,239
that would be confusing so your your

00:07:06,039 --> 00:07:08,949
situation is you're saying that you're

00:07:07,239 --> 00:07:11,019
trying to await functions that actually

00:07:08,949 --> 00:07:13,629
don't return promises you're awaiting

00:07:11,019 --> 00:07:15,729
like synchronous we are using a static

00:07:13,629 --> 00:07:17,529
type checking on this project so I'm

00:07:15,729 --> 00:07:20,829
definitely coming at it from that angle

00:07:17,529 --> 00:07:25,360
as well I guess one thing I would say is

00:07:20,829 --> 00:07:27,189
I think in some sin in like many simple

00:07:25,360 --> 00:07:28,929
situations like I think the benefits of

00:07:27,189 --> 00:07:30,219
using async await are really marginal so

00:07:28,929 --> 00:07:32,229
there are definitely cases where it

00:07:30,219 --> 00:07:36,159
would still lean on just using promises

00:07:32,229 --> 00:07:37,629
directly I think yeah like I haven't got

00:07:36,159 --> 00:07:42,029
like a blanket rule for that or anything

00:07:37,629 --> 00:07:42,029
it's just yeah case-by-case Thanks

00:07:42,170 --> 00:07:46,859

YouTube URL: https://www.youtube.com/watch?v=esujG-dB0EY


