Title: Ember.js Berlin   4x Presentation Special   July 2021
Publication date: 2021-07-19
Playlist: Ember.js Berlin
Description: 
	@emberliners
https://www.meetup.com/Ember-js-Berlin

Come together with other Emberistas from 6pm BST, July 13th for interesting talks and discussions.
_______________

ğŸ’» The talk(s)

Talk 1 | Ben Demboski: "Embroider: from zero to route splitting in 3.5 weeks"

Lightning Talk | Agathe Badia: "Colorblindness emulator with Ember, an A11y project"

| BREAK |

Talk 2 | Francesco Novy: "You could get used to this: Managing GraphQL data"

Talk 3 | Michael Klein and Clemens Mueller: "On the development of reactive systems with Ember.js"

___________________
Chapters:
Pre-Roll: 00:00
Intro: 03:10
Embroider: from zero to route splitting in 3.5 weeks: 09:00
Q&A: 24:39
Colorblindness emulator with Ember, an A11y project: 35:56
Q&A: 45:50
You could get used to this: Managing GraphQL data: 58:00
Q&A: 1:18:03
On the development of reactive systems with Ember.js: 1:25:18
Q&A: 2:02:43

___________________

In association with EmberFest
A 2 day Ember conference in September in Rome!
Find out more at emberfest.eu

_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,530 --> 00:00:20,370
[Music]

00:00:25,710 --> 00:00:28,760
[Music]

00:00:28,840 --> 00:00:31,840
so

00:00:33,370 --> 00:00:59,610
[Music]

00:00:56,840 --> 00:01:13,219
foreign

00:00:59,610 --> 00:01:13,219
[Music]

00:01:17,510 --> 00:01:35,779
[Music]

00:01:39,759 --> 00:01:41,840
foreign

00:01:42,530 --> 00:02:09,900
[Music]

00:02:06,810 --> 00:02:09,900
[Applause]

00:02:09,919 --> 00:02:33,030
[Music]

00:02:34,840 --> 00:02:37,840
then

00:02:44,370 --> 00:02:47,419
[Music]

00:02:48,840 --> 00:02:51,840
so

00:02:52,040 --> 00:03:08,099
[Music]

00:03:09,920 --> 00:03:13,840
yeah then hi and welcome everyone to the

00:03:12,640 --> 00:03:17,440
uh july edition

00:03:13,840 --> 00:03:19,760
of the amber berlin meetup

00:03:17,440 --> 00:03:20,800
really glad to see so many of you folks

00:03:19,760 --> 00:03:23,680
here from

00:03:20,800 --> 00:03:24,640
all different time zones at our event

00:03:23,680 --> 00:03:27,519
today

00:03:24,640 --> 00:03:29,760
and yeah just like really very cool to

00:03:27,519 --> 00:03:33,040
get you all together today so

00:03:29,760 --> 00:03:36,560
um yeah i hope you also can learn and

00:03:33,040 --> 00:03:39,599
enjoy a lot from being here

00:03:36,560 --> 00:03:41,599
uh also before we uh actually get into

00:03:39,599 --> 00:03:43,680
our short intro about like the meetup

00:03:41,599 --> 00:03:45,920
just like a couple of like shout outs

00:03:43,680 --> 00:03:47,040
and to our sponsors and also supporters

00:03:45,920 --> 00:03:49,760
of this meetup

00:03:47,040 --> 00:03:51,920
first of all there's pusher who has been

00:03:49,760 --> 00:03:54,560
a long time supporter of our meet up

00:03:51,920 --> 00:03:56,159
by providing us like the support with

00:03:54,560 --> 00:03:58,239
video content

00:03:56,159 --> 00:03:59,519
creation recording and also distribution

00:03:58,239 --> 00:04:02,319
of the video content

00:03:59,519 --> 00:04:03,439
alex royce you also already have seen

00:04:02,319 --> 00:04:05,360
here the call

00:04:03,439 --> 00:04:06,799
is doing this for us like for many years

00:04:05,360 --> 00:04:08,799
we're very grateful for this so

00:04:06,799 --> 00:04:10,400
thank you so much and also a big shout

00:04:08,799 --> 00:04:13,280
out to harvest who

00:04:10,400 --> 00:04:14,480
um has also been a long time supporter

00:04:13,280 --> 00:04:17,280
in our meet up

00:04:14,480 --> 00:04:18,400
and has been yeah supporting us

00:04:17,280 --> 00:04:20,400
throughout all these years

00:04:18,400 --> 00:04:22,560
uh very grateful for this as well so

00:04:20,400 --> 00:04:24,560
thank you so much

00:04:22,560 --> 00:04:26,639
also who is actually like our organizer

00:04:24,560 --> 00:04:29,280
team it's consisting of

00:04:26,639 --> 00:04:30,400
joshua clements and me you can also yeah

00:04:29,280 --> 00:04:30,720
if you want to comment on anything or

00:04:30,400 --> 00:04:33,759
just

00:04:30,720 --> 00:04:36,720
chat with us like find us on twitter and

00:04:33,759 --> 00:04:37,919
and we are also always very grateful for

00:04:36,720 --> 00:04:39,360
uh feedback or

00:04:37,919 --> 00:04:41,680
kind of like ideas that you have for me

00:04:39,360 --> 00:04:43,120
that as well

00:04:41,680 --> 00:04:44,639
also just like a few words about like

00:04:43,120 --> 00:04:45,120
what this meetup is because like some of

00:04:44,639 --> 00:04:48,160
you

00:04:45,120 --> 00:04:50,240
might not have been here before uh

00:04:48,160 --> 00:04:51,919
because this is like one of our few

00:04:50,240 --> 00:04:53,759
virtual events so far

00:04:51,919 --> 00:04:55,360
or as some of you haven't been here like

00:04:53,759 --> 00:04:57,600
in a while and

00:04:55,360 --> 00:04:58,479
it's first of all and every now and then

00:04:57,600 --> 00:04:59,840
meet up so

00:04:58,479 --> 00:05:02,240
if some of you are wondering what's like

00:04:59,840 --> 00:05:03,840
the kind of like rhythm of it

00:05:02,240 --> 00:05:05,440
we kind of like do it whenever we have

00:05:03,840 --> 00:05:07,600
like the time for it and

00:05:05,440 --> 00:05:08,479
usually this consists of uh talk nights

00:05:07,600 --> 00:05:10,800
like this one

00:05:08,479 --> 00:05:11,600
also like me to greets uh usually like

00:05:10,800 --> 00:05:13,759
in berlin

00:05:11,600 --> 00:05:14,800
and also online events since recently

00:05:13,759 --> 00:05:17,280
since like the

00:05:14,800 --> 00:05:19,039
um yeah kind of like more being at home

00:05:17,280 --> 00:05:21,440
situation started

00:05:19,039 --> 00:05:24,960
and uh also like very important for us

00:05:21,440 --> 00:05:27,280
is that our meetup also tries to

00:05:24,960 --> 00:05:28,320
aim and support an inclusive worker

00:05:27,280 --> 00:05:30,800
environment

00:05:28,320 --> 00:05:33,039
uh we lend a lot of like this ideas from

00:05:30,800 --> 00:05:36,240
the community guidelines from amber

00:05:33,039 --> 00:05:37,199
which you can also find on mhs.com

00:05:36,240 --> 00:05:40,160
guidelines

00:05:37,199 --> 00:05:40,720
but the too long didn't read is mostly

00:05:40,160 --> 00:05:42,800
uh

00:05:40,720 --> 00:05:44,960
that we expect everyone here at the

00:05:42,800 --> 00:05:46,080
event to be like a kind and supportive

00:05:44,960 --> 00:05:48,000
person

00:05:46,080 --> 00:05:49,120
that everyone is just like being mindful

00:05:48,000 --> 00:05:51,840
of like being

00:05:49,120 --> 00:05:53,840
a kind person like to others and this

00:05:51,840 --> 00:05:55,600
includes like other audience members but

00:05:53,840 --> 00:05:56,560
also of course like our amazing speakers

00:05:55,600 --> 00:05:58,160
like today

00:05:56,560 --> 00:05:59,680
and i'm not sure how many of you have

00:05:58,160 --> 00:06:01,280
already like spoken that event but

00:05:59,680 --> 00:06:01,840
nothing's like so much nicer than

00:06:01,280 --> 00:06:03,280
actually

00:06:01,840 --> 00:06:05,360
presenting something in front of people

00:06:03,280 --> 00:06:07,360
and also getting like a lot of like

00:06:05,360 --> 00:06:09,360
nice and kind feedback afterwards so we

00:06:07,360 --> 00:06:12,479
really encourage everyone to

00:06:09,360 --> 00:06:14,400
keep this in mind and and then like the

00:06:12,479 --> 00:06:16,080
main point of our introduction at every

00:06:14,400 --> 00:06:19,199
meetup is um

00:06:16,080 --> 00:06:19,759
our main pitch which consists of asking

00:06:19,199 --> 00:06:21,360
you

00:06:19,759 --> 00:06:23,120
if you have like any ideas for talks

00:06:21,360 --> 00:06:24,560
that you want to give for the meetup

00:06:23,120 --> 00:06:26,639
anything that you want to present that

00:06:24,560 --> 00:06:28,160
you worked on anything

00:06:26,639 --> 00:06:29,440
that you learned recently about ember

00:06:28,160 --> 00:06:31,039
that's super interesting if you have

00:06:29,440 --> 00:06:32,479
like any ideas like even if you think

00:06:31,039 --> 00:06:33,280
like oh i'm actually not entirely sure

00:06:32,479 --> 00:06:35,440
if this would fit

00:06:33,280 --> 00:06:36,560
i would love to hear about it and feel

00:06:35,440 --> 00:06:40,800
free to reach out to us

00:06:36,560 --> 00:06:42,720
on any of our channels which is mostly

00:06:40,800 --> 00:06:44,240
amber linus on twitter you can follow us

00:06:42,720 --> 00:06:45,840
there and also like tweet at us if you

00:06:44,240 --> 00:06:46,880
have like some talk ideas on general

00:06:45,840 --> 00:06:49,039
just want to

00:06:46,880 --> 00:06:51,919
let us know about something interesting

00:06:49,039 --> 00:06:55,360
you can also reach out to us on the

00:06:51,919 --> 00:06:57,599
meetup.com page um and there

00:06:55,360 --> 00:06:59,280
you can also just like um kind of like

00:06:57,599 --> 00:07:01,759
chat to us like it's organizers

00:06:59,280 --> 00:07:02,400
we also have an email address we kind of

00:07:01,759 --> 00:07:05,039
check it very

00:07:02,400 --> 00:07:05,599
regularly so maybe try twitter first but

00:07:05,039 --> 00:07:07,120
also

00:07:05,599 --> 00:07:08,639
kind of like eventually get back to you

00:07:07,120 --> 00:07:10,080
if you send us an email

00:07:08,639 --> 00:07:13,280
and last but not least you can also find

00:07:10,080 --> 00:07:16,319
most of us on the discord

00:07:13,280 --> 00:07:19,440
and any questions on this so far

00:07:16,319 --> 00:07:22,720
on the intro everyone happy

00:07:19,440 --> 00:07:25,599
cool and with this set we can already

00:07:22,720 --> 00:07:27,360
get into our agenda for tonight and we

00:07:25,599 --> 00:07:30,800
have like four amazing talks by

00:07:27,360 --> 00:07:33,199
um yeah a lot of like interesting

00:07:30,800 --> 00:07:34,560
emma developers in our community talking

00:07:33,199 --> 00:07:36,639
about like the work

00:07:34,560 --> 00:07:38,000
and first of all we will hear a very

00:07:36,639 --> 00:07:41,520
interesting talk by

00:07:38,000 --> 00:07:44,639
ben demboski about embroider and how he

00:07:41,520 --> 00:07:47,280
actually worked on using embroider

00:07:44,639 --> 00:07:48,879
to leverage route splitting in a very

00:07:47,280 --> 00:07:51,440
exciting emma project

00:07:48,879 --> 00:07:53,280
very interested to hear about this and

00:07:51,440 --> 00:07:54,400
also we will have a like a talk by agar

00:07:53,280 --> 00:07:56,080
padilla about

00:07:54,400 --> 00:07:58,560
their color blindness emulator blue with

00:07:56,080 --> 00:08:00,639
ember and accessibility project

00:07:58,560 --> 00:08:03,039
and right afterwards after this we have

00:08:00,639 --> 00:08:06,080
short break and right after the break

00:08:03,039 --> 00:08:08,639
we will have two other amazing talks

00:08:06,080 --> 00:08:09,919
and with this set i would like to

00:08:08,639 --> 00:08:12,160
encourage all of you

00:08:09,919 --> 00:08:13,280
to meet yourself and give like a nice uh

00:08:12,160 --> 00:08:14,960
clap up for ben

00:08:13,280 --> 00:08:18,560
for his talk about embroider from zero

00:08:14,960 --> 00:08:18,560
to us between 3.5 weeks

00:08:24,560 --> 00:08:28,319
thanks jessica and uh i'm impressed that

00:08:26,720 --> 00:08:29,520
you pronounced my last name right for

00:08:28,319 --> 00:08:31,280
some reason people always want to

00:08:29,520 --> 00:08:32,479
pronounce it dembowski so it's gotten to

00:08:31,280 --> 00:08:34,320
the point that i don't even bother

00:08:32,479 --> 00:08:37,440
correcting people anymore but uh

00:08:34,320 --> 00:08:41,839
but you nailed it so um let me bring up

00:08:37,440 --> 00:08:41,839
my slides here

00:08:50,320 --> 00:08:58,160
okay everyone seeing that

00:08:54,800 --> 00:09:00,480
so uh as as you can see uh just from

00:08:58,160 --> 00:09:03,040
this headliner slide so embroider from

00:09:00,480 --> 00:09:05,680
zero to route splitting in 3.5 weeks so

00:09:03,040 --> 00:09:07,519
uh a couple months ago now um i went

00:09:05,680 --> 00:09:10,560
through an effort of porting our app

00:09:07,519 --> 00:09:13,440
over to uh to embroider took about

00:09:10,560 --> 00:09:14,080
three and a half weeks uh to do the full

00:09:13,440 --> 00:09:16,399
thing

00:09:14,080 --> 00:09:17,279
and uh i wrote up an article on it

00:09:16,399 --> 00:09:19,680
afterwards

00:09:17,279 --> 00:09:21,279
and most of this talk is kind of adapted

00:09:19,680 --> 00:09:24,160
from that article

00:09:21,279 --> 00:09:26,160
so i'm gonna move relatively quickly

00:09:24,160 --> 00:09:28,720
through the kind of slides and the meat

00:09:26,160 --> 00:09:30,399
of the information um to leave time for

00:09:28,720 --> 00:09:32,480
uh for questions because

00:09:30,399 --> 00:09:34,160
you know i could could have just brought

00:09:32,480 --> 00:09:35,440
up my article and read it to you all but

00:09:34,160 --> 00:09:40,080
that doesn't seem like the

00:09:35,440 --> 00:09:42,320
most interesting use of time here so um

00:09:40,080 --> 00:09:43,839
oh i i skipped my greeting i was going

00:09:42,320 --> 00:09:46,640
to say greetings from

00:09:43,839 --> 00:09:47,519
just becoming sunny seattle uh it's it's

00:09:46,640 --> 00:09:49,600
not

00:09:47,519 --> 00:09:51,920
terribly apocalyptically hot out here

00:09:49,600 --> 00:09:54,000
anymore like it was a couple weeks ago

00:09:51,920 --> 00:09:55,600
although it looks like our smoky season

00:09:54,000 --> 00:09:57,760
might be coming early and so it might

00:09:55,600 --> 00:09:58,560
get terribly apocalyptically smoky in a

00:09:57,760 --> 00:10:00,399
couple weeks

00:09:58,560 --> 00:10:02,240
but right now it's beautiful and lovely

00:10:00,399 --> 00:10:03,519
and and we're all enjoying it while it

00:10:02,240 --> 00:10:06,800
lasts

00:10:03,519 --> 00:10:10,079
so back to the talk uh so

00:10:06,800 --> 00:10:11,519
uh who am i i'm ben demboski i'm the cto

00:10:10,079 --> 00:10:13,920
at rowan patents which is

00:10:11,519 --> 00:10:14,880
a company that does several different

00:10:13,920 --> 00:10:16,959
things but the

00:10:14,880 --> 00:10:18,640
the software portion of it focuses on

00:10:16,959 --> 00:10:21,440
building software for

00:10:18,640 --> 00:10:22,480
patent attorneys to uh to help automate

00:10:21,440 --> 00:10:25,760
their workflows and

00:10:22,480 --> 00:10:28,160
and whatnot um i've used ember for about

00:10:25,760 --> 00:10:30,800
seven years uh both professionally and

00:10:28,160 --> 00:10:33,279
for kind of side projects

00:10:30,800 --> 00:10:34,079
and i've learned everything i know about

00:10:33,279 --> 00:10:36,880
embroider

00:10:34,079 --> 00:10:37,279
uh in the process of porting our app to

00:10:36,880 --> 00:10:39,760
it i

00:10:37,279 --> 00:10:41,519
knew just a tiny bit about it and some

00:10:39,760 --> 00:10:43,360
theoretical benefits we'd get from it

00:10:41,519 --> 00:10:45,120
before i dove into it

00:10:43,360 --> 00:10:47,279
i'm currently suffering from some amount

00:10:45,120 --> 00:10:49,200
of imposter syndrome because i'm by no

00:10:47,279 --> 00:10:51,440
means an embroider expert

00:10:49,200 --> 00:10:52,560
yet here i am uh you know giving a talk

00:10:51,440 --> 00:10:54,800
about it i'm

00:10:52,560 --> 00:10:56,240
more some guy that stumbled his way

00:10:54,800 --> 00:10:56,880
through the porting and learned a lot in

00:10:56,240 --> 00:10:59,040
the process

00:10:56,880 --> 00:11:00,079
but you know i guess that's enough to uh

00:10:59,040 --> 00:11:02,160
to share to

00:11:00,079 --> 00:11:03,440
help you all stumble your way through

00:11:02,160 --> 00:11:06,320
someday or uh

00:11:03,440 --> 00:11:07,920
you know maybe by then the uh it'll

00:11:06,320 --> 00:11:08,800
things will be moved along but they'll

00:11:07,920 --> 00:11:10,320
be you know more

00:11:08,800 --> 00:11:12,079
more guides and whatnot and less

00:11:10,320 --> 00:11:13,440
stumbling um

00:11:12,079 --> 00:11:15,120
and you can find me on twitter and

00:11:13,440 --> 00:11:18,959
discord either uh

00:11:15,120 --> 00:11:22,320
in either place at bendemboski

00:11:18,959 --> 00:11:25,519
um so uh the app

00:11:22,320 --> 00:11:28,000
that we ported to uh to embroider

00:11:25,519 --> 00:11:28,720
so it's a multi-window ember electron

00:11:28,000 --> 00:11:32,160
desktop

00:11:28,720 --> 00:11:34,800
app and kind of think of think of it

00:11:32,160 --> 00:11:37,760
kind of like an ide that's how we think

00:11:34,800 --> 00:11:42,240
of it as an ide for patent attorneys

00:11:37,760 --> 00:11:44,000
except for reasons it

00:11:42,240 --> 00:11:45,680
it makes sense for their productivity to

00:11:44,000 --> 00:11:47,839
have things in multiple windows rather

00:11:45,680 --> 00:11:48,959
than just multiple panes within the same

00:11:47,839 --> 00:11:51,839
window

00:11:48,959 --> 00:11:53,360
um so uh so the the attorney will have

00:11:51,839 --> 00:11:55,200
multiple windows open with different

00:11:53,360 --> 00:11:57,120
tool sets in them at the same time

00:11:55,200 --> 00:11:59,360
they can cross-reference and they're

00:11:57,120 --> 00:12:01,200
syncing data in between them

00:11:59,360 --> 00:12:03,040
so a lot of the routes a lot of our

00:12:01,200 --> 00:12:04,560
ember routes are only ever rendered in

00:12:03,040 --> 00:12:06,399
one window

00:12:04,560 --> 00:12:07,760
so loading the entire app in every

00:12:06,399 --> 00:12:11,519
window would be

00:12:07,760 --> 00:12:12,800
needlessly memory consumptive

00:12:11,519 --> 00:12:16,320
i might have just made up that word

00:12:12,800 --> 00:12:19,839
consumptive needlessly consuming memory

00:12:16,320 --> 00:12:21,680
and also more than just our ember code

00:12:19,839 --> 00:12:23,680
we have a lot of third-party libraries

00:12:21,680 --> 00:12:26,240
that are only used by code

00:12:23,680 --> 00:12:28,639
in in one window things to do natural

00:12:26,240 --> 00:12:31,440
language processing type analysis

00:12:28,639 --> 00:12:32,240
and that sort of thing so for us memory

00:12:31,440 --> 00:12:34,800
footprint

00:12:32,240 --> 00:12:37,040
uh that's including code size is a big

00:12:34,800 --> 00:12:39,680
concern because multiple windows

00:12:37,040 --> 00:12:40,880
multiplies the any any code that's

00:12:39,680 --> 00:12:42,720
loaded and all the windows

00:12:40,880 --> 00:12:44,000
you know gets multiplied by however many

00:12:42,720 --> 00:12:47,120
windows are open

00:12:44,000 --> 00:12:49,040
and it it can be a number of windows

00:12:47,120 --> 00:12:50,160
and then i'd spit out some stats on our

00:12:49,040 --> 00:12:52,320
app just so if you're

00:12:50,160 --> 00:12:54,480
trying to i don't know compare yours to

00:12:52,320 --> 00:12:55,680
ours in terms of sizing maybe the effort

00:12:54,480 --> 00:12:59,680
or something

00:12:55,680 --> 00:13:02,720
so so our goal in the porting

00:12:59,680 --> 00:13:04,320
was to uh was to control the the code

00:13:02,720 --> 00:13:07,519
driven memory footprint

00:13:04,320 --> 00:13:10,720
with minimal engineering effort uh and

00:13:07,519 --> 00:13:13,440
to do that via uh tree shaking and

00:13:10,720 --> 00:13:14,160
and route splitting and when i say tree

00:13:13,440 --> 00:13:17,200
shaking

00:13:14,160 --> 00:13:18,000
uh i i i i realized after i wrote up

00:13:17,200 --> 00:13:20,079
these slides

00:13:18,000 --> 00:13:21,440
that that it's it's more than just tree

00:13:20,079 --> 00:13:23,200
shaking but basically

00:13:21,440 --> 00:13:24,720
let's just say modern javascript

00:13:23,200 --> 00:13:27,040
bundling techniques for

00:13:24,720 --> 00:13:28,800
for reducing the size of the bundle and

00:13:27,040 --> 00:13:29,360
tree shaking is a notable one of those

00:13:28,800 --> 00:13:32,639
but there's

00:13:29,360 --> 00:13:33,680
uh there's others as well we had

00:13:32,639 --> 00:13:35,760
previously

00:13:33,680 --> 00:13:38,320
using ember auto import and a whole

00:13:35,760 --> 00:13:40,399
bunch of manual webpack configuration

00:13:38,320 --> 00:13:42,639
to explicitly strip out code that we

00:13:40,399 --> 00:13:45,680
didn't need in certain windows and stuff

00:13:42,639 --> 00:13:47,680
had achieved a pretty good amount of

00:13:45,680 --> 00:13:49,519
memory footprint managed code driven

00:13:47,680 --> 00:13:51,680
memory footprint management but the

00:13:49,519 --> 00:13:52,399
minimal engineering effort part was was

00:13:51,680 --> 00:13:54,240
not there

00:13:52,399 --> 00:13:56,399
so we were looking for kind of a set it

00:13:54,240 --> 00:13:58,959
and forget it type solution with minimal

00:13:56,399 --> 00:14:03,120
ongoing maintenance

00:13:58,959 --> 00:14:03,440
um so uh so before getting into some of

00:14:03,120 --> 00:14:06,240
the

00:14:03,440 --> 00:14:08,160
slightly nittier grittier uh the my

00:14:06,240 --> 00:14:09,600
overall impressions of embroider are

00:14:08,160 --> 00:14:12,399
more or less the same as they were

00:14:09,600 --> 00:14:14,079
when i when i uh wrote the article that

00:14:12,399 --> 00:14:16,560
i would kind of classify it as late

00:14:14,079 --> 00:14:18,880
stage alpha or early stage beta quality

00:14:16,560 --> 00:14:21,680
software so the core functionality

00:14:18,880 --> 00:14:22,399
is solid fairly severe bugs aren't that

00:14:21,680 --> 00:14:24,880
uncommon

00:14:22,399 --> 00:14:26,560
still the documentation is somewhat

00:14:24,880 --> 00:14:28,800
minimal

00:14:26,560 --> 00:14:30,399
and so porting a complex app to

00:14:28,800 --> 00:14:32,959
embroider can be pretty

00:14:30,399 --> 00:14:33,920
effort intensive and keeping it up to

00:14:32,959 --> 00:14:36,720
date across

00:14:33,920 --> 00:14:38,160
new releases of embroider can also be

00:14:36,720 --> 00:14:40,320
somewhat effort intensive

00:14:38,160 --> 00:14:42,800
as it's still in a state where

00:14:40,320 --> 00:14:44,720
regressions you know come up and can

00:14:42,800 --> 00:14:45,920
can require some effort to figure out

00:14:44,720 --> 00:14:49,279
how to work around them

00:14:45,920 --> 00:14:51,440
um or configure around them um

00:14:49,279 --> 00:14:52,800
but i did find that production stability

00:14:51,440 --> 00:14:54,560
is very high

00:14:52,800 --> 00:14:57,360
none of those things that keep me up at

00:14:54,560 --> 00:14:58,079
night of of i build it once in ci and

00:14:57,360 --> 00:14:59,920
then i

00:14:58,079 --> 00:15:01,839
rebuild with exactly the same code and

00:14:59,920 --> 00:15:05,360
the production bundle is different

00:15:01,839 --> 00:15:07,600
you know none of that stuff happens

00:15:05,360 --> 00:15:08,880
what i've found is that once you know

00:15:07,600 --> 00:15:10,959
once it's building and

00:15:08,880 --> 00:15:12,480
and i've got it all lined up it's it's

00:15:10,959 --> 00:15:15,440
very stable it's just

00:15:12,480 --> 00:15:15,839
uh it's just as embroider changes and

00:15:15,440 --> 00:15:19,040
and

00:15:15,839 --> 00:15:20,800
uh and and evolves that introduces some

00:15:19,040 --> 00:15:23,440
instability updating to those

00:15:20,800 --> 00:15:25,440
newer versions uh the dev environment

00:15:23,440 --> 00:15:26,000
stability i've i've found to be pretty

00:15:25,440 --> 00:15:28,320
high

00:15:26,000 --> 00:15:30,560
uh it's pretty stable there's some minor

00:15:28,320 --> 00:15:33,839
hiccups nothing that i've found to be a

00:15:30,560 --> 00:15:34,320
major major issue and i think a lot of

00:15:33,839 --> 00:15:36,880
that

00:15:34,320 --> 00:15:39,199
is has to do with with kind of source

00:15:36,880 --> 00:15:40,959
map flakiness

00:15:39,199 --> 00:15:42,959
which often just refreshing the window a

00:15:40,959 --> 00:15:44,399
couple times addresses

00:15:42,959 --> 00:15:46,480
so i'm not sure if that's really

00:15:44,399 --> 00:15:51,199
embroider's fault or webpack's fault

00:15:46,480 --> 00:15:53,279
or or chrome devtools is fault but uh

00:15:51,199 --> 00:15:55,199
so those are my high-level impressions

00:15:53,279 --> 00:15:58,480
um so a kind of

00:15:55,199 --> 00:16:01,680
really oversimplified overview

00:15:58,480 --> 00:16:04,560
of of what embroider does is it uh

00:16:01,680 --> 00:16:06,639
is it takes your your ember app and and

00:16:04,560 --> 00:16:10,959
assembles it and all of the add-ons

00:16:06,639 --> 00:16:12,720
into a kind of a vanilla node.js project

00:16:10,959 --> 00:16:14,560
that's that's kind of hidden or already

00:16:12,720 --> 00:16:16,560
resolved all the unique behaviors of

00:16:14,560 --> 00:16:18,880
ember and ember cli so it's

00:16:16,560 --> 00:16:20,000
it's run the broccoli pipeline and

00:16:18,880 --> 00:16:22,399
gotten all the

00:16:20,000 --> 00:16:23,199
add-ons to contribute their assets but

00:16:22,399 --> 00:16:26,240
then

00:16:23,199 --> 00:16:28,000
it assembles it into a kind of static

00:16:26,240 --> 00:16:30,560
node.js project with the

00:16:28,000 --> 00:16:31,279
package.json and node modules put in the

00:16:30,560 --> 00:16:34,399
right place

00:16:31,279 --> 00:16:35,199
and and whatnot so that then it can

00:16:34,399 --> 00:16:38,560
point

00:16:35,199 --> 00:16:40,160
uh a standard uh packager like

00:16:38,560 --> 00:16:42,079
web webpack is the current one that's

00:16:40,160 --> 00:16:44,320
supported although that's uh working on

00:16:42,079 --> 00:16:45,759
support for for some others but uh

00:16:44,320 --> 00:16:47,920
in theory you should be able to use

00:16:45,759 --> 00:16:48,959
anything webpack or rollup or anything

00:16:47,920 --> 00:16:51,920
like that

00:16:48,959 --> 00:16:53,440
but yeah i can point webpack at it and

00:16:51,920 --> 00:16:54,160
then with some custom loaders and

00:16:53,440 --> 00:16:56,800
whatnot

00:16:54,160 --> 00:16:57,360
then webpack turns it into a browser

00:16:56,800 --> 00:16:59,360
bundle

00:16:57,360 --> 00:17:00,720
so one of the big goals is to leverage

00:16:59,360 --> 00:17:02,560
everything that's been done out in the

00:17:00,720 --> 00:17:04,480
community on on bundlers

00:17:02,560 --> 00:17:06,240
rather than ember having to maintain our

00:17:04,480 --> 00:17:08,000
own bundler that kind of duplicates a

00:17:06,240 --> 00:17:09,919
bunch of functionality that the broader

00:17:08,000 --> 00:17:12,079
community is working on

00:17:09,919 --> 00:17:14,079
and then the last step is it injects the

00:17:12,079 --> 00:17:16,400
the the bundled scripts and other

00:17:14,079 --> 00:17:18,559
webpack generated resources back into

00:17:16,400 --> 00:17:19,760
your index.html using some of those

00:17:18,559 --> 00:17:22,240
special rules

00:17:19,760 --> 00:17:24,160
that uh that that we have an ember where

00:17:22,240 --> 00:17:24,640
like the root url gets filled in if

00:17:24,160 --> 00:17:27,439
you're

00:17:24,640 --> 00:17:29,679
hosting on a cdn and that sort of stuff

00:17:27,439 --> 00:17:32,320
so that's kind of an

00:17:29,679 --> 00:17:33,200
overview of what embroider does and my

00:17:32,320 --> 00:17:35,200
reason for

00:17:33,200 --> 00:17:37,120
is is to provide some context for some

00:17:35,200 --> 00:17:38,240
of the hard parts that i found according

00:17:37,120 --> 00:17:40,799
to embroider

00:17:38,240 --> 00:17:42,160
so one of them was the package.json

00:17:40,799 --> 00:17:44,400
dependencies

00:17:42,160 --> 00:17:46,400
when embroiders assembling the vanilla

00:17:44,400 --> 00:17:47,600
node.js version of the application it

00:17:46,400 --> 00:17:50,520
relies heavily on

00:17:47,600 --> 00:17:52,960
information in the apps and add-ons

00:17:50,520 --> 00:17:54,880
package.jsons to set things up properly

00:17:52,960 --> 00:17:56,720
to know which packages to include and

00:17:54,880 --> 00:18:00,080
the kind of assembled

00:17:56,720 --> 00:18:02,640
you know vanilla js package so that

00:18:00,080 --> 00:18:06,160
webpack will do the right thing and so

00:18:02,640 --> 00:18:08,240
missing dependencies but but

00:18:06,160 --> 00:18:10,080
under ember cli it was fine because the

00:18:08,240 --> 00:18:11,919
package was still in node modules

00:18:10,080 --> 00:18:13,039
because it was a transitive dependency

00:18:11,919 --> 00:18:15,120
of some add-on

00:18:13,039 --> 00:18:17,280
but your app didn't call it out as a

00:18:15,120 --> 00:18:19,520
dependency even though it imported it

00:18:17,280 --> 00:18:21,120
that would work in ember cli that would

00:18:19,520 --> 00:18:23,120
break under embroider

00:18:21,120 --> 00:18:25,039
so there's a bunch of cases where yeah

00:18:23,120 --> 00:18:27,039
we had to do some fiddling with with

00:18:25,039 --> 00:18:28,720
undeclared dependencies or

00:18:27,039 --> 00:18:30,480
tricks that we'd play with putting

00:18:28,720 --> 00:18:32,640
something in peer dependencies instead

00:18:30,480 --> 00:18:35,520
of declaring our own dependency on it

00:18:32,640 --> 00:18:36,880
that that that that took some doing to

00:18:35,520 --> 00:18:40,000
to get that all working

00:18:36,880 --> 00:18:41,600
another one is es6 that might be es5

00:18:40,000 --> 00:18:42,080
module compliance i can never quite

00:18:41,600 --> 00:18:44,640
remember

00:18:42,080 --> 00:18:45,520
the the distinction between es5 and es6

00:18:44,640 --> 00:18:48,320
modules

00:18:45,520 --> 00:18:49,919
but the idea is that the webpack static

00:18:48,320 --> 00:18:52,559
analysis of the code

00:18:49,919 --> 00:18:54,160
is based on stricter module resolution

00:18:52,559 --> 00:18:57,280
rules than ember's

00:18:54,160 --> 00:18:59,360
kind of runtime module loader or or

00:18:57,280 --> 00:19:00,799
or missed the the way the code gets

00:18:59,360 --> 00:19:03,440
transpiled into

00:19:00,799 --> 00:19:05,039
runtime modules so a lot of slightly

00:19:03,440 --> 00:19:07,760
incorrect imports

00:19:05,039 --> 00:19:09,440
um like for example i think this one

00:19:07,760 --> 00:19:11,440
isn't actually a problem but the example

00:19:09,440 --> 00:19:14,000
of the sort of thing i'm talking about

00:19:11,440 --> 00:19:15,520
is if a module has a bunch of named

00:19:14,000 --> 00:19:19,280
exports

00:19:15,520 --> 00:19:22,559
and you consume it by importing a single

00:19:19,280 --> 00:19:24,559
default export and then accessing the

00:19:22,559 --> 00:19:28,240
named exports as properties

00:19:24,559 --> 00:19:29,840
on the default export uh that

00:19:28,240 --> 00:19:31,840
you know that's that's not actually

00:19:29,840 --> 00:19:34,240
correct because the module isn't

00:19:31,840 --> 00:19:35,919
producing a default export it's only

00:19:34,240 --> 00:19:37,840
producing named exports

00:19:35,919 --> 00:19:39,360
i think i think embroider i think

00:19:37,840 --> 00:19:40,960
webpack might just give a warning on

00:19:39,360 --> 00:19:41,280
that one but that's the sort of issue

00:19:40,960 --> 00:19:45,280
that

00:19:41,280 --> 00:19:46,240
uh that um that we ran into in a number

00:19:45,280 --> 00:19:49,280
of places where just

00:19:46,240 --> 00:19:52,000
imports weren't quite right um then

00:19:49,280 --> 00:19:53,120
statically analyzable components so

00:19:52,000 --> 00:19:54,960
there's a whole section

00:19:53,120 --> 00:19:56,640
in the embroidery readme on kind of how

00:19:54,960 --> 00:19:57,440
to deal with it but you know sometimes a

00:19:56,640 --> 00:19:59,039
number we

00:19:57,440 --> 00:20:00,960
use the component helper and can play a

00:19:59,039 --> 00:20:03,280
little fast and loose where maybe

00:20:00,960 --> 00:20:05,520
one component gets past an argument

00:20:03,280 --> 00:20:07,600
that's the name of another component

00:20:05,520 --> 00:20:09,200
and then internally uses the component

00:20:07,600 --> 00:20:12,960
helper to invoke

00:20:09,200 --> 00:20:15,760
that component and uh and

00:20:12,960 --> 00:20:16,400
when moving to the optimized embroider

00:20:15,760 --> 00:20:18,640
settings

00:20:16,400 --> 00:20:21,039
so so by default uh there's sort of a

00:20:18,640 --> 00:20:21,360
baseline of of embroider settings but to

00:20:21,039 --> 00:20:23,760
get

00:20:21,360 --> 00:20:24,799
uh to a bunch of optimizations including

00:20:23,760 --> 00:20:27,600
route splitting

00:20:24,799 --> 00:20:28,640
need to uh enable kind of a higher bar

00:20:27,600 --> 00:20:31,120
of uh

00:20:28,640 --> 00:20:32,640
of settings that allows embroider to do

00:20:31,120 --> 00:20:35,200
more static analysis

00:20:32,640 --> 00:20:37,039
and one of those is is uh components so

00:20:35,200 --> 00:20:39,280
that embroider can understand

00:20:37,039 --> 00:20:40,880
and can part of it is being able to tree

00:20:39,280 --> 00:20:42,159
shake components being able to look

00:20:40,880 --> 00:20:44,000
through the templates and see what

00:20:42,159 --> 00:20:45,520
components are and aren't referenced so

00:20:44,000 --> 00:20:46,880
that it can leave out

00:20:45,520 --> 00:20:48,960
components that actually aren't

00:20:46,880 --> 00:20:50,559
referenced anywhere uh you know in an

00:20:48,960 --> 00:20:52,640
add-on for example

00:20:50,559 --> 00:20:53,919
um so it definitely took some fiddling

00:20:52,640 --> 00:20:55,520
because there were places where we were

00:20:53,919 --> 00:20:57,520
playing little tricks with how we

00:20:55,520 --> 00:20:59,120
with how we kind of dynamically invoked

00:20:57,520 --> 00:21:02,720
components that uh

00:20:59,120 --> 00:21:04,240
needed to to clean up um css and sas

00:21:02,720 --> 00:21:05,760
like i said in the article unfortunately

00:21:04,240 --> 00:21:06,799
i didn't keep notes on that when i was

00:21:05,760 --> 00:21:08,960
doing it so i

00:21:06,799 --> 00:21:10,240
don't i can't quite recall exactly what

00:21:08,960 --> 00:21:11,840
the issues were there

00:21:10,240 --> 00:21:14,080
but there was a there was enough

00:21:11,840 --> 00:21:17,520
differences between how

00:21:14,080 --> 00:21:20,240
ember cli kind of assembles css

00:21:17,520 --> 00:21:22,400
and embroider uh assemble css that we

00:21:20,240 --> 00:21:24,400
ran into some styling issues and had to

00:21:22,400 --> 00:21:26,320
shuffle some things around and then the

00:21:24,400 --> 00:21:28,320
big one the third-party add-ons because

00:21:26,320 --> 00:21:30,080
all those things that i just listed

00:21:28,320 --> 00:21:32,240
when they're directly under my control

00:21:30,080 --> 00:21:35,360
and my code i can go in and fix them

00:21:32,240 --> 00:21:37,440
third-party add-ons is you know

00:21:35,360 --> 00:21:39,360
i can't can't just fix it immediately so

00:21:37,440 --> 00:21:40,480
in some cases contributing fixes in

00:21:39,360 --> 00:21:42,400
other cases

00:21:40,480 --> 00:21:44,320
finding workarounds through webpack

00:21:42,400 --> 00:21:47,120
configs or embroider configs

00:21:44,320 --> 00:21:49,120
to um to sort of address all of those

00:21:47,120 --> 00:21:50,640
previous issues but in the context of

00:21:49,120 --> 00:21:53,280
third-party add-ons

00:21:50,640 --> 00:21:54,240
and over in the article that i linked to

00:21:53,280 --> 00:21:57,280
at the beginning

00:21:54,240 --> 00:21:57,679
of of the presentation i actually list

00:21:57,280 --> 00:22:00,000
out

00:21:57,679 --> 00:22:01,360
all the all the major ones that required

00:22:00,000 --> 00:22:04,320
effort and explain

00:22:01,360 --> 00:22:06,000
um what was needed that that's probably

00:22:04,320 --> 00:22:07,360
a little obsolete now because i know at

00:22:06,000 --> 00:22:09,919
least one or two of those have been

00:22:07,360 --> 00:22:11,679
addressed since i wrote the article but

00:22:09,919 --> 00:22:13,919
that can give you a sense of the kinds

00:22:11,679 --> 00:22:16,080
of challenges that you run into and then

00:22:13,919 --> 00:22:16,799
also maybe flag some specific add-ons

00:22:16,080 --> 00:22:19,280
that you might

00:22:16,799 --> 00:22:20,240
you know use um that that are

00:22:19,280 --> 00:22:22,080
problematic

00:22:20,240 --> 00:22:23,440
fortunately i mentioned all the work

00:22:22,080 --> 00:22:25,120
around so

00:22:23,440 --> 00:22:26,880
for the ones that for the problems that

00:22:25,120 --> 00:22:29,200
i ran into so hopefully that'll help

00:22:26,880 --> 00:22:32,640
some folks out

00:22:29,200 --> 00:22:34,960
um and then uh kind of my this is my

00:22:32,640 --> 00:22:36,880
uh my last slide before we you know turn

00:22:34,960 --> 00:22:39,360
it over to q a but my

00:22:36,880 --> 00:22:41,679
experience getting support so i found

00:22:39,360 --> 00:22:45,200
that the dev embroidered discord channel

00:22:41,679 --> 00:22:47,760
was uh was pretty helpful um uh

00:22:45,200 --> 00:22:49,280
there uh there were you know there's

00:22:47,760 --> 00:22:51,360
folks hanging out there that can share

00:22:49,280 --> 00:22:53,679
their experiences and answer questions

00:22:51,360 --> 00:22:55,520
some of the kind of core drivers of of

00:22:53,679 --> 00:22:56,159
embroider like uh you know ed ed

00:22:55,520 --> 00:22:59,760
faulkner

00:22:56,159 --> 00:23:02,880
and and uh you know and and rob uh

00:22:59,760 --> 00:23:04,880
and rob jackson are um uh

00:23:02,880 --> 00:23:06,240
are there you know but they're they're

00:23:04,880 --> 00:23:08,400
busy folks so

00:23:06,240 --> 00:23:10,320
can't reliably you know get get support

00:23:08,400 --> 00:23:11,679
directly from them but the the channel

00:23:10,320 --> 00:23:13,760
but but they do pop in and out and

00:23:11,679 --> 00:23:14,159
answer questions and so the the channel

00:23:13,760 --> 00:23:17,039
is

00:23:14,159 --> 00:23:19,120
i found was pretty helpful um i found

00:23:17,039 --> 00:23:20,640
that bugs don't always get addressed

00:23:19,120 --> 00:23:22,320
very quickly because again i think

00:23:20,640 --> 00:23:22,640
there's just a lot that's still being

00:23:22,320 --> 00:23:24,880
done

00:23:22,640 --> 00:23:26,320
on it um but i found that that pull

00:23:24,880 --> 00:23:28,159
requests get attention

00:23:26,320 --> 00:23:29,760
pretty quickly and it's relatively easy

00:23:28,159 --> 00:23:33,600
to get some support from

00:23:29,760 --> 00:23:33,600
from ed or from you know other folks

00:23:34,559 --> 00:23:40,480
in terms of shepherding prs through um

00:23:38,480 --> 00:23:41,840
and uh and yeah like i mentioned the

00:23:40,480 --> 00:23:44,240
core team was pretty helpful in

00:23:41,840 --> 00:23:46,000
providing advice for investigating and

00:23:44,240 --> 00:23:48,960
and fixing bugs

00:23:46,000 --> 00:23:51,120
um and i found that the embroider code

00:23:48,960 --> 00:23:52,960
base itself as far as diving in

00:23:51,120 --> 00:23:54,720
to just investigate and figure out how

00:23:52,960 --> 00:23:55,440
to work around something or contribute

00:23:54,720 --> 00:23:57,200
back a fix

00:23:55,440 --> 00:23:59,120
the embroider code base looks kind of

00:23:57,200 --> 00:24:01,440
intimidating but

00:23:59,120 --> 00:24:04,000
it isn't too terribly hard to kind of

00:24:01,440 --> 00:24:05,360
dig into and investigate issues once you

00:24:04,000 --> 00:24:07,760
know a little bit of time getting

00:24:05,360 --> 00:24:09,679
comfortable with where the pieces are

00:24:07,760 --> 00:24:11,360
but then my experience with with the

00:24:09,679 --> 00:24:13,840
code base was was

00:24:11,360 --> 00:24:15,360
pretty uh pretty positive and i did

00:24:13,840 --> 00:24:17,600
manage to contribute a few

00:24:15,360 --> 00:24:18,720
fixes back for issues that i was running

00:24:17,600 --> 00:24:22,960
into so

00:24:18,720 --> 00:24:26,400
um uh so that's all that i had

00:24:22,960 --> 00:24:29,520
uh presentation wise um and

00:24:26,400 --> 00:24:32,480
uh like i said i wanted to uh save time

00:24:29,520 --> 00:24:32,799
for for any uh questions that folks have

00:24:32,480 --> 00:24:36,960
so

00:24:32,799 --> 00:24:36,960
i'll open the floor to questions

00:24:38,960 --> 00:24:42,000
uh you're awesome thank you so much for

00:24:40,400 --> 00:24:43,679
support for the talk um

00:24:42,000 --> 00:24:46,320
and i maybe have like a question you

00:24:43,679 --> 00:24:48,159
already mentioned it that you and list a

00:24:46,320 --> 00:24:49,760
couple of like these already out like an

00:24:48,159 --> 00:24:51,919
article but maybe just like to give like

00:24:49,760 --> 00:24:54,720
a high level idea about like

00:24:51,919 --> 00:24:57,200
uh what uh kind of like issues people

00:24:54,720 --> 00:24:59,360
might stumble into when trying to

00:24:57,200 --> 00:25:00,240
optimize their own app and having to

00:24:59,360 --> 00:25:03,679
deal with like the

00:25:00,240 --> 00:25:03,679
party add-ons um

00:25:04,000 --> 00:25:11,360
sure as i recall the two biggest issues

00:25:07,760 --> 00:25:15,120
were uh were undeclared imports

00:25:11,360 --> 00:25:17,919
um so uh so places where

00:25:15,120 --> 00:25:18,799
an add-on would would depend on another

00:25:17,919 --> 00:25:22,080
add-on

00:25:18,799 --> 00:25:25,200
that depended on a third add-on and then

00:25:22,080 --> 00:25:28,080
the topmost add-on would import directly

00:25:25,200 --> 00:25:28,799
from the you know from the other add-on

00:25:28,080 --> 00:25:30,559
which

00:25:28,799 --> 00:25:32,159
you know i i've been in that mindset

00:25:30,559 --> 00:25:34,000
myself of like oh i know this one

00:25:32,159 --> 00:25:35,840
provides this one and i think of them as

00:25:34,000 --> 00:25:38,080
sort of part of the same thing

00:25:35,840 --> 00:25:39,200
but for a static dependency analysis

00:25:38,080 --> 00:25:42,720
that doesn't work

00:25:39,200 --> 00:25:45,200
so um uh so you know that

00:25:42,720 --> 00:25:46,880
there's the sort of you know you know in

00:25:45,200 --> 00:25:48,720
the kind of dirty work around realm

00:25:46,880 --> 00:25:50,799
webpack has a string replace loader

00:25:48,720 --> 00:25:52,320
where you can use regular expressions to

00:25:50,799 --> 00:25:54,880
actually rewrite

00:25:52,320 --> 00:25:56,880
the contents of source files that are

00:25:54,880 --> 00:25:57,440
being brought in and so i think for some

00:25:56,880 --> 00:26:00,080
of those

00:25:57,440 --> 00:26:01,360
you know it was figure out how to rework

00:26:00,080 --> 00:26:03,279
the the

00:26:01,360 --> 00:26:04,480
you know imports so that it actually

00:26:03,279 --> 00:26:05,200
imports it from a place that is

00:26:04,480 --> 00:26:07,520
available

00:26:05,200 --> 00:26:08,320
or you know something like that um and

00:26:07,520 --> 00:26:11,039
then the other

00:26:08,320 --> 00:26:12,320
the other big one partly you know partly

00:26:11,039 --> 00:26:13,120
because of some of the add-ons that i

00:26:12,320 --> 00:26:16,400
was using but

00:26:13,120 --> 00:26:19,600
uh add-ons like um

00:26:16,400 --> 00:26:21,039
what's the one uh so i'm using um ember

00:26:19,600 --> 00:26:22,559
validated form which

00:26:21,039 --> 00:26:24,960
they're working on updating it but it's

00:26:22,559 --> 00:26:26,960
pretty old and does dynamic component

00:26:24,960 --> 00:26:28,880
invocations all over the place

00:26:26,960 --> 00:26:30,720
and then i think ember basic drop down

00:26:28,880 --> 00:26:32,480
and ember power select have like a

00:26:30,720 --> 00:26:37,039
limited number of

00:26:32,480 --> 00:26:39,520
um of uh dynamic component invocations

00:26:37,039 --> 00:26:40,480
the the and and so that needed some

00:26:39,520 --> 00:26:42,240
fiddling there

00:26:40,480 --> 00:26:44,320
the nice thing about that is that the

00:26:42,240 --> 00:26:46,320
initial porting to embroider

00:26:44,320 --> 00:26:48,320
we do it without the optimized settings

00:26:46,320 --> 00:26:49,200
and so none of the dynamic component

00:26:48,320 --> 00:26:50,960
stuff

00:26:49,200 --> 00:26:53,440
you know really matters at first so it's

00:26:50,960 --> 00:26:56,799
like you can get running on embroider

00:26:53,440 --> 00:26:57,600
and uh and not be able to turn on route

00:26:56,799 --> 00:26:59,919
splitting yet

00:26:57,600 --> 00:27:01,120
but you'll still get the the tree

00:26:59,919 --> 00:27:04,000
shaking and and

00:27:01,120 --> 00:27:04,480
and uh you know kind of and and and

00:27:04,000 --> 00:27:06,640
those

00:27:04,480 --> 00:27:08,320
aspects of it and then can iterate

00:27:06,640 --> 00:27:10,000
towards which is the process that i went

00:27:08,320 --> 00:27:11,520
through and then can iterate towards

00:27:10,000 --> 00:27:13,120
you know turning on you could turn on

00:27:11,520 --> 00:27:14,400
the optimize settings one at a time i

00:27:13,120 --> 00:27:17,520
think i turned them all on

00:27:14,400 --> 00:27:20,480
and then it just it was almost all of

00:27:17,520 --> 00:27:22,960
them were in the component uh

00:27:20,480 --> 00:27:23,679
in the component realm um but uh but

00:27:22,960 --> 00:27:25,279
yeah those

00:27:23,679 --> 00:27:27,120
those were the main the main things that

00:27:25,279 --> 00:27:28,640
i that i ran into i'm sure there's a

00:27:27,120 --> 00:27:29,840
couple smaller miscellaneous

00:27:28,640 --> 00:27:32,320
that i'm forgetting but those were the

00:27:29,840 --> 00:27:32,320
big ones

00:27:32,799 --> 00:27:36,080
yeah that's so powerful thank you

00:27:36,640 --> 00:27:40,240
um one question um from a business

00:27:39,440 --> 00:27:43,279
perspective

00:27:40,240 --> 00:27:45,120
um was it worth it i i mean

00:27:43,279 --> 00:27:47,520
from from from my understanding you have

00:27:45,120 --> 00:27:49,600
a very interesting application

00:27:47,520 --> 00:27:50,640
that might benefit from that very very

00:27:49,600 --> 00:27:52,720
much right

00:27:50,640 --> 00:27:54,799
but um for the regular things that are

00:27:52,720 --> 00:27:56,240
just behind a login screen the admin

00:27:54,799 --> 00:27:58,799
interfaces that you tend to build with

00:27:56,240 --> 00:28:00,799
ember um what's your opinion there

00:27:58,799 --> 00:28:02,159
does it really make sense or is it

00:28:00,799 --> 00:28:03,919
better for

00:28:02,159 --> 00:28:05,440
people just to wait out obviously we

00:28:03,919 --> 00:28:07,919
want to try it right

00:28:05,440 --> 00:28:11,120
but does it really make sense for big

00:28:07,919 --> 00:28:11,120
applications to switch already

00:28:11,440 --> 00:28:14,799
yeah that's that's a really good

00:28:13,120 --> 00:28:16,320
question so

00:28:14,799 --> 00:28:18,240
you know i think there's two sides of it

00:28:16,320 --> 00:28:18,960
right which is how difficult is it going

00:28:18,240 --> 00:28:21,440
to be

00:28:18,960 --> 00:28:22,640
to move over and then and then what are

00:28:21,440 --> 00:28:25,360
the benefits going to be

00:28:22,640 --> 00:28:27,120
right and so i think you know how

00:28:25,360 --> 00:28:29,039
difficult it's going to be is probably

00:28:27,120 --> 00:28:31,760
directly related to

00:28:29,039 --> 00:28:32,399
the size of the app but also how old the

00:28:31,760 --> 00:28:35,360
app is

00:28:32,399 --> 00:28:37,520
because you know six years ago ember

00:28:35,360 --> 00:28:39,120
code is more likely to have

00:28:37,520 --> 00:28:41,520
things you know patterns that we all

00:28:39,120 --> 00:28:43,039
followed then that that that are harder

00:28:41,520 --> 00:28:44,480
to you know that don't match well with

00:28:43,039 --> 00:28:48,080
with embroider

00:28:44,480 --> 00:28:52,159
versus one year ago ember code right um

00:28:48,080 --> 00:28:55,200
in terms of the in terms of the value um

00:28:52,159 --> 00:28:57,760
i probably i so

00:28:55,200 --> 00:28:59,679
it was definitely worth it for us we got

00:28:57,760 --> 00:29:02,320
some immediate code size savings

00:28:59,679 --> 00:29:04,080
and then just a regular part of my life

00:29:02,320 --> 00:29:06,000
of every time we integrate some new

00:29:04,080 --> 00:29:07,360
third-party library figuring out how to

00:29:06,000 --> 00:29:09,200
make sure that we don't bring in

00:29:07,360 --> 00:29:11,039
all the code if we only need a slice of

00:29:09,200 --> 00:29:13,840
the code or something like that

00:29:11,039 --> 00:29:14,399
has just pretty much gone away you know

00:29:13,840 --> 00:29:17,440
so

00:29:14,399 --> 00:29:19,919
it was absolutely worthwhile for us

00:29:17,440 --> 00:29:22,399
i think had we not had some of those

00:29:19,919 --> 00:29:24,840
particular characteristics where we were

00:29:22,399 --> 00:29:27,200
especially concerned with the code size

00:29:24,840 --> 00:29:30,240
driven

00:29:27,200 --> 00:29:31,679
memory consumption which has something

00:29:30,240 --> 00:29:35,039
to do with our multi-window

00:29:31,679 --> 00:29:36,799
you know architecture and all of that

00:29:35,039 --> 00:29:40,159
i think it probably wouldn't have been

00:29:36,799 --> 00:29:43,440
worth you know 3.5 weeks uh

00:29:40,159 --> 00:29:47,679
of um of of of effort

00:29:43,440 --> 00:29:50,080
uh so if your app is as complex as ours

00:29:47,679 --> 00:29:51,760
but it's just yeah login screen and and

00:29:50,080 --> 00:29:54,320
then you know a bunch of web pages in

00:29:51,760 --> 00:29:57,679
one single browser window um

00:29:54,320 --> 00:30:00,000
then yeah i i would say probably not

00:29:57,679 --> 00:30:00,960
not worth the you know not worth the

00:30:00,000 --> 00:30:03,760
effort uh

00:30:00,960 --> 00:30:05,360
but there's i think those are you know

00:30:03,760 --> 00:30:07,360
curves that cross somewhere right the

00:30:05,360 --> 00:30:08,240
complexity of the app increases and the

00:30:07,360 --> 00:30:10,159
value you know the

00:30:08,240 --> 00:30:11,360
value of the benefits you can get

00:30:10,159 --> 00:30:13,039
increased and so

00:30:11,360 --> 00:30:14,799
you know are you are you above or below

00:30:13,039 --> 00:30:16,720
the line um

00:30:14,799 --> 00:30:17,840
yeah so i feel kind of funny sitting

00:30:16,720 --> 00:30:19,840
here pitching the

00:30:17,840 --> 00:30:21,200
you know don't put too embroider which

00:30:19,840 --> 00:30:23,039
is not what i'm saying because i think

00:30:21,200 --> 00:30:23,760
for a lot of really simple apps it's not

00:30:23,039 --> 00:30:26,240
that hard

00:30:23,760 --> 00:30:27,440
to to port over and then you know and

00:30:26,240 --> 00:30:29,279
then you're set up with it you're

00:30:27,440 --> 00:30:31,279
helping the community move forward

00:30:29,279 --> 00:30:32,559
uh you know and and move in that

00:30:31,279 --> 00:30:34,880
direction and

00:30:32,559 --> 00:30:35,600
you know get will get some some benefits

00:30:34,880 --> 00:30:37,919
you know i mean

00:30:35,600 --> 00:30:39,440
tree shaking you know in that case since

00:30:37,919 --> 00:30:41,679
ours is a desktop application

00:30:39,440 --> 00:30:43,760
download size isn't so important in

00:30:41,679 --> 00:30:46,399
terms of page load times

00:30:43,760 --> 00:30:47,440
but for you know for a web app it is so

00:30:46,399 --> 00:30:49,679
so that you know there

00:30:47,440 --> 00:30:51,840
could be uh could be that consideration

00:30:49,679 --> 00:30:51,840
also

00:30:57,440 --> 00:31:07,200
any more questions um

00:31:04,080 --> 00:31:07,919
first thanks ben nice to hear about your

00:31:07,200 --> 00:31:10,480
experience

00:31:07,919 --> 00:31:12,080
um and apologies if you already answered

00:31:10,480 --> 00:31:13,760
this in the slides or in your article

00:31:12,080 --> 00:31:17,279
and i hadn't picked up on it but

00:31:13,760 --> 00:31:19,440
i'm curious if um if the embroidery

00:31:17,279 --> 00:31:21,200
experience matched your expectations the

00:31:19,440 --> 00:31:24,480
expectations you had going in

00:31:21,200 --> 00:31:26,080
versus the end results if it got you

00:31:24,480 --> 00:31:27,840
what you were expecting in the end what

00:31:26,080 --> 00:31:29,840
you wanted i i hear

00:31:27,840 --> 00:31:33,840
like it's similar question but slightly

00:31:29,840 --> 00:31:33,840
different to the last one

00:31:34,000 --> 00:31:41,039
yeah um i

00:31:37,360 --> 00:31:44,399
i think the effort that it took

00:31:41,039 --> 00:31:46,799
was roughly in line with with what i

00:31:44,399 --> 00:31:48,240
expected it was maybe a little more but

00:31:46,799 --> 00:31:51,840
not not a lot more

00:31:48,240 --> 00:31:54,480
uh the end result um was

00:31:51,840 --> 00:31:54,880
uh i think a little better than expected

00:31:54,480 --> 00:31:58,399
um

00:31:54,880 --> 00:32:01,360
i think um the uh

00:31:58,399 --> 00:32:01,840
the the the tree shaking benefits the

00:32:01,360 --> 00:32:04,640
the the

00:32:01,840 --> 00:32:04,880
the code size reduction benefits i think

00:32:04,640 --> 00:32:06,880
i

00:32:04,880 --> 00:32:08,159
i my expectations of that were pretty

00:32:06,880 --> 00:32:10,159
clear because i knew how

00:32:08,159 --> 00:32:12,080
it should work with webpack and the

00:32:10,159 --> 00:32:15,039
promise of embroider saying

00:32:12,080 --> 00:32:16,480
you know imagine ember app but webpack

00:32:15,039 --> 00:32:18,880
and then you get all of the

00:32:16,480 --> 00:32:20,240
tree shaking and leaving out code that's

00:32:18,880 --> 00:32:23,360
not explicitly imported

00:32:20,240 --> 00:32:25,200
from you know that sort of stuff um when

00:32:23,360 --> 00:32:27,279
it actually got to route splitting was

00:32:25,200 --> 00:32:29,279
was when i was very pleasantly surprised

00:32:27,279 --> 00:32:30,960
that that was a really cool experience

00:32:29,279 --> 00:32:32,640
where i had all of the optimized

00:32:30,960 --> 00:32:36,640
settings finally enabled

00:32:32,640 --> 00:32:39,039
ci passed and then went to and set

00:32:36,640 --> 00:32:40,399
split it routes colon true or no it's

00:32:39,039 --> 00:32:42,000
not cool and true it's cool and then an

00:32:40,399 --> 00:32:43,679
array of the names of the routes that

00:32:42,000 --> 00:32:44,399
you want to be considered for route

00:32:43,679 --> 00:32:49,200
splitting

00:32:44,399 --> 00:32:51,279
and then started up my my app and

00:32:49,200 --> 00:32:53,039
there was one or two minor issues of

00:32:51,279 --> 00:32:55,600
lazy loading blah blah but

00:32:53,039 --> 00:32:56,960
it's almost it's like 90 percent true to

00:32:55,600 --> 00:32:59,440
say that i started it up

00:32:56,960 --> 00:33:01,360
and then just like magic my different

00:32:59,440 --> 00:33:02,320
windows only had the specific code

00:33:01,360 --> 00:33:05,440
loaded

00:33:02,320 --> 00:33:07,120
and uh and that by the way the route

00:33:05,440 --> 00:33:08,240
splitting because it does lazy loading

00:33:07,120 --> 00:33:11,360
so that's not

00:33:08,240 --> 00:33:12,399
that's not unique to um to multi-window

00:33:11,360 --> 00:33:15,440
kind of things

00:33:12,399 --> 00:33:17,120
but if you know you uh if if you do the

00:33:15,440 --> 00:33:18,960
splitting right then maybe your login

00:33:17,120 --> 00:33:20,320
page is in one bundle and so when your

00:33:18,960 --> 00:33:22,559
user first arrives

00:33:20,320 --> 00:33:24,080
it only downloads the login route and

00:33:22,559 --> 00:33:25,760
and its dependencies

00:33:24,080 --> 00:33:27,760
and then as soon as they complete and it

00:33:25,760 --> 00:33:29,760
transitions to the index route

00:33:27,760 --> 00:33:31,360
then you know it hasn't loaded the code

00:33:29,760 --> 00:33:33,440
for the index route yet and then when it

00:33:31,360 --> 00:33:34,159
does that transition it dynamically

00:33:33,440 --> 00:33:36,799
loads it

00:33:34,159 --> 00:33:38,240
so i i just realized i might have

00:33:36,799 --> 00:33:40,960
mispitched that as

00:33:38,240 --> 00:33:41,760
like the route splitting is the benefit

00:33:40,960 --> 00:33:44,080
to us

00:33:41,760 --> 00:33:45,120
was that was this multi-window um

00:33:44,080 --> 00:33:47,919
splitting but

00:33:45,120 --> 00:33:49,679
for any web app that that has those

00:33:47,919 --> 00:33:50,399
sorts of patterns where there's certain

00:33:49,679 --> 00:33:52,799
routes

00:33:50,399 --> 00:33:54,320
that maybe the user never visits or or

00:33:52,799 --> 00:33:56,320
they just visit later so that the

00:33:54,320 --> 00:33:59,679
initial page load can be smaller

00:33:56,320 --> 00:34:02,640
so that that was i was delighted by that

00:33:59,679 --> 00:34:04,159
and and how sophisticated it was and

00:34:02,640 --> 00:34:05,279
when i say sophisticated i mean that

00:34:04,159 --> 00:34:06,559
when i dug in

00:34:05,279 --> 00:34:08,000
you know i don't i'm not sure what i

00:34:06,559 --> 00:34:09,599
thought i thought maybe oh all the

00:34:08,000 --> 00:34:11,359
services are going to be loaded it's

00:34:09,599 --> 00:34:12,960
just the routes and the controllers and

00:34:11,359 --> 00:34:14,480
the controllers templates but

00:34:12,960 --> 00:34:16,159
but the components will all be loaded

00:34:14,480 --> 00:34:18,800
too or something like that

00:34:16,159 --> 00:34:20,000
but it really does you know in in a sort

00:34:18,800 --> 00:34:22,240
of dependency chasing

00:34:20,000 --> 00:34:24,000
manner starting from the route you know

00:34:22,240 --> 00:34:24,879
say okay this route is going to go in

00:34:24,000 --> 00:34:26,800
this bundle

00:34:24,879 --> 00:34:28,240
so let's find the components and the

00:34:26,800 --> 00:34:30,159
services that it actually

00:34:28,240 --> 00:34:31,440
you know references and by the way i

00:34:30,159 --> 00:34:32,879
think that's where i might have there

00:34:31,440 --> 00:34:34,240
might have been some dynamic service

00:34:32,879 --> 00:34:36,800
lookup or something like that

00:34:34,240 --> 00:34:38,240
that was that it couldn't analyze and so

00:34:36,800 --> 00:34:38,800
it didn't include the service and the

00:34:38,240 --> 00:34:41,040
bundle

00:34:38,800 --> 00:34:42,079
you know so so but i found that all

00:34:41,040 --> 00:34:43,919
pretty easy to

00:34:42,079 --> 00:34:45,760
to work around and and was very

00:34:43,919 --> 00:34:47,520
delighted by the end result like better

00:34:45,760 --> 00:34:49,440
than expected as far as route splitting

00:34:47,520 --> 00:34:51,839
as far as how easy it was

00:34:49,440 --> 00:34:54,800
after all the hard work was done and

00:34:51,839 --> 00:34:56,639
what a great result it produced

00:34:54,800 --> 00:34:59,040
very cool thanks appreciate you going

00:34:56,639 --> 00:34:59,040
into that

00:35:01,280 --> 00:35:06,720
okay awesome um yeah with this uh set

00:35:04,560 --> 00:35:08,079
uh i would uh kind of like conclude

00:35:06,720 --> 00:35:09,280
again like thank you so much for this

00:35:08,079 --> 00:35:11,680
awesome talk uh

00:35:09,280 --> 00:35:12,800
was like super insightful informative um

00:35:11,680 --> 00:35:16,000
and also thank you for asking

00:35:12,800 --> 00:35:18,640
questions um yeah and if we want we

00:35:16,000 --> 00:35:19,440
can also get another round of applause

00:35:18,640 --> 00:35:21,040
um

00:35:19,440 --> 00:35:22,960
it's like starting a bit weird on the

00:35:21,040 --> 00:35:26,000
call but still funny looks so nice

00:35:22,960 --> 00:35:29,040
to actually do that thank you so much

00:35:26,000 --> 00:35:30,560
um and with this set we are ready for

00:35:29,040 --> 00:35:34,480
our

00:35:30,560 --> 00:35:36,320
next talk um this one is by agar badir

00:35:34,480 --> 00:35:37,599
who has been working on a color

00:35:36,320 --> 00:35:40,079
blindness emulator

00:35:37,599 --> 00:35:41,920
in amber and will tell us all about

00:35:40,079 --> 00:35:43,920
accessibility

00:35:41,920 --> 00:35:45,119
color blindness and how accessibility

00:35:43,920 --> 00:35:48,160
plays into this

00:35:45,119 --> 00:35:51,119
in her amazing talk

00:35:48,160 --> 00:35:51,840
yeah give it a heads up to a god as well

00:35:51,119 --> 00:35:53,430
please

00:35:51,840 --> 00:35:57,359
[Music]

00:35:53,430 --> 00:35:59,280
[Applause]

00:35:57,359 --> 00:36:00,480
thank you thank you very much for having

00:35:59,280 --> 00:36:02,960
me tonight so

00:36:00,480 --> 00:36:05,200
yeah i'm very pleased to present you my

00:36:02,960 --> 00:36:07,280
color blindness emulator so i'm

00:36:05,200 --> 00:36:09,200
uh yeah i got padilla i'm a junior

00:36:07,280 --> 00:36:10,160
front-end developer i've been using

00:36:09,200 --> 00:36:12,800
amber for

00:36:10,160 --> 00:36:14,560
only a year and year and a half so i've

00:36:12,800 --> 00:36:15,520
been digging into that and also i've

00:36:14,560 --> 00:36:19,200
been digging into

00:36:15,520 --> 00:36:22,960
accessibility uh in general which was

00:36:19,200 --> 00:36:25,520
it's a fascinating topic so um

00:36:22,960 --> 00:36:27,200
i've been digging into that but also

00:36:25,520 --> 00:36:30,320
into

00:36:27,200 --> 00:36:31,680
sub topics such as um color blindness

00:36:30,320 --> 00:36:35,200
which is something that

00:36:31,680 --> 00:36:37,520
for me was really fascinating and

00:36:35,200 --> 00:36:40,480
i think my first question of course was

00:36:37,520 --> 00:36:43,520
how do people who have color blindness

00:36:40,480 --> 00:36:44,320
see colors how do they go online how do

00:36:43,520 --> 00:36:46,640
they have

00:36:44,320 --> 00:36:47,839
how is their experience when they i

00:36:46,640 --> 00:36:49,280
don't know when they buy something when

00:36:47,839 --> 00:36:52,640
they're on a platform

00:36:49,280 --> 00:36:54,079
and i didn't have a lot of complete

00:36:52,640 --> 00:36:57,359
answers to be honest i was

00:36:54,079 --> 00:37:00,640
checking on some um associations

00:36:57,359 --> 00:37:03,520
uh articles reports but it was

00:37:00,640 --> 00:37:05,680
it wasn't i wasn't fully satisfied so i

00:37:03,520 --> 00:37:08,240
wanted to dig deeper into that

00:37:05,680 --> 00:37:09,200
and maybe to see further than just like

00:37:08,240 --> 00:37:13,040
emulations of

00:37:09,200 --> 00:37:16,079
pictures of how people see uh sea colors

00:37:13,040 --> 00:37:19,280
i also wondered at one point how many

00:37:16,079 --> 00:37:21,280
people are actually caught up light and

00:37:19,280 --> 00:37:23,280
actually quite a lot it's only

00:37:21,280 --> 00:37:26,560
estimations but

00:37:23,280 --> 00:37:27,520
one in 12 men and one in 200 women are

00:37:26,560 --> 00:37:30,720
actually

00:37:27,520 --> 00:37:33,760
colorblind and the estimation on

00:37:30,720 --> 00:37:34,880
some resources are around 300 million

00:37:33,760 --> 00:37:37,040
people

00:37:34,880 --> 00:37:38,320
and i meant some additional calculation

00:37:37,040 --> 00:37:41,440
we actually showed that

00:37:38,320 --> 00:37:44,240
uh it goes up to 600 million

00:37:41,440 --> 00:37:45,280
so you know quite a lot of people at the

00:37:44,240 --> 00:37:47,920
end so i was like

00:37:45,280 --> 00:37:50,240
we we need more more resource so where

00:37:47,920 --> 00:37:53,920
is the information maybe i'm missing it

00:37:50,240 --> 00:37:54,320
i wasn't super sure so what i decided to

00:37:53,920 --> 00:37:56,720
do

00:37:54,320 --> 00:37:58,400
is to kind of emulate it myself and see

00:37:56,720 --> 00:38:00,880
if it would be possible to

00:37:58,400 --> 00:38:02,160
see how people with different types of

00:38:00,880 --> 00:38:05,200
color blindness

00:38:02,160 --> 00:38:05,920
yeah see uh see online and see see the

00:38:05,200 --> 00:38:09,359
word

00:38:05,920 --> 00:38:12,640
so colorblindness emulator

00:38:09,359 --> 00:38:15,680
enter the scene and what i started with

00:38:12,640 --> 00:38:18,800
first was to see if there were some

00:38:15,680 --> 00:38:21,440
um color emulators already available

00:38:18,800 --> 00:38:22,640
online so i actually found one from hell

00:38:21,440 --> 00:38:25,680
to you on github

00:38:22,640 --> 00:38:29,520
who used who is using a svg filter

00:38:25,680 --> 00:38:33,200
which is um also using css

00:38:29,520 --> 00:38:35,599
to call each types of color blindness

00:38:33,200 --> 00:38:37,119
so then to have different ways of seeing

00:38:35,599 --> 00:38:39,680
colors for

00:38:37,119 --> 00:38:40,240
eight eight types of them which is um

00:38:39,680 --> 00:38:43,119
quite

00:38:40,240 --> 00:38:44,720
complete and very very nice and in the

00:38:43,119 --> 00:38:46,960
demo

00:38:44,720 --> 00:38:48,720
from this person it's basically showing

00:38:46,960 --> 00:38:51,280
eight different results

00:38:48,720 --> 00:38:52,400
on a different picture so i saw this was

00:38:51,280 --> 00:38:54,000
like quite

00:38:52,400 --> 00:38:55,440
uh quite clear and i was like okay let's

00:38:54,000 --> 00:38:57,920
try to do that but for

00:38:55,440 --> 00:38:59,119
you know an entire page to see how uh we

00:38:57,920 --> 00:39:01,599
can have a full

00:38:59,119 --> 00:39:02,320
immersion at least online so what i did

00:39:01,599 --> 00:39:05,280
was

00:39:02,320 --> 00:39:06,960
um creating an amber application

00:39:05,280 --> 00:39:09,040
actually reading quite a lot

00:39:06,960 --> 00:39:10,240
uh chasing for a lot of different

00:39:09,040 --> 00:39:13,280
resources

00:39:10,240 --> 00:39:16,480
information gathering but also um

00:39:13,280 --> 00:39:19,920
sharing real life examples and mostly uh

00:39:16,480 --> 00:39:22,640
practice or counter examples to make

00:39:19,920 --> 00:39:24,720
uh the color blind experience a bit more

00:39:22,640 --> 00:39:27,359
tough to have a better awareness

00:39:24,720 --> 00:39:29,040
um and my my goal as well was also to

00:39:27,359 --> 00:39:31,839
aim to have

00:39:29,040 --> 00:39:32,800
a hundred percent accessibility for any

00:39:31,839 --> 00:39:35,200
any users

00:39:32,800 --> 00:39:36,960
uh checking out this project so for

00:39:35,200 --> 00:39:39,440
anyone using a screen reader

00:39:36,960 --> 00:39:41,440
for people using uh only keyboard

00:39:39,440 --> 00:39:45,040
navigation for mobile

00:39:41,440 --> 00:39:47,200
um so yeah try to to still have this um

00:39:45,040 --> 00:39:48,480
accessible part of it and yeah hopefully

00:39:47,200 --> 00:39:50,480
bring awareness

00:39:48,480 --> 00:39:52,480
uh for for my hand to learn more about

00:39:50,480 --> 00:39:53,200
this but of course for anyone interested

00:39:52,480 --> 00:39:56,320
to

00:39:53,200 --> 00:39:59,839
maybe use it as um as a resource place

00:39:56,320 --> 00:40:02,880
so this is how this

00:39:59,839 --> 00:40:06,000
looks so we have basically

00:40:02,880 --> 00:40:08,400
kind of a menu that is emulating those

00:40:06,000 --> 00:40:10,720
eight different types of color blindness

00:40:08,400 --> 00:40:11,920
and i can show you how it looks like

00:40:10,720 --> 00:40:14,800
here

00:40:11,920 --> 00:40:15,440
so uh we have here as i say like eight

00:40:14,800 --> 00:40:18,640
types

00:40:15,440 --> 00:40:22,240
and maybe to give a very very short uh

00:40:18,640 --> 00:40:24,240
definition um of them protonopia is

00:40:22,240 --> 00:40:26,960
basically when you have a red

00:40:24,240 --> 00:40:29,200
green color blindness and protein

00:40:26,960 --> 00:40:32,400
normally is a milder version of it

00:40:29,200 --> 00:40:32,800
so when you have um let's say protanopia

00:40:32,400 --> 00:40:35,680
or

00:40:32,800 --> 00:40:36,480
in general any colorblindness type that

00:40:35,680 --> 00:40:39,359
ends with

00:40:36,480 --> 00:40:41,359
nopia it's basically saying that some

00:40:39,359 --> 00:40:43,520
cones inside your eyes are actually

00:40:41,359 --> 00:40:46,560
missing so you see color in a very

00:40:43,520 --> 00:40:49,119
different way and when there is anomaly

00:40:46,560 --> 00:40:50,560
in a specific color blindness type it

00:40:49,119 --> 00:40:53,839
basically means that

00:40:50,560 --> 00:40:57,119
these cones are here but they are

00:40:53,839 --> 00:40:57,680
not working um at their full loss they

00:40:57,119 --> 00:41:01,040
could be

00:40:57,680 --> 00:41:03,040
uh defective or working um halfway so

00:41:01,040 --> 00:41:05,119
um this is another way to understand

00:41:03,040 --> 00:41:06,880
that those terms that normally are

00:41:05,119 --> 00:41:09,440
basically milder version

00:41:06,880 --> 00:41:11,200
of their color blindness types so we can

00:41:09,440 --> 00:41:13,280
have a quick look

00:41:11,200 --> 00:41:15,280
so in the first part i share a few

00:41:13,280 --> 00:41:16,240
definitions with a recap where we can

00:41:15,280 --> 00:41:19,520
have a look

00:41:16,240 --> 00:41:22,960
so protanopia red green color blindness

00:41:19,520 --> 00:41:26,800
definitely proto-normally shares a

00:41:22,960 --> 00:41:29,280
more milder version of it geoterranopia

00:41:26,800 --> 00:41:30,720
also has this kind of red green color

00:41:29,280 --> 00:41:33,520
blindness but also

00:41:30,720 --> 00:41:34,000
shares it with with yellow with purple

00:41:33,520 --> 00:41:36,640
with

00:41:34,000 --> 00:41:38,560
a gray as well the green caption is

00:41:36,640 --> 00:41:40,079
actually quite gray when i have this

00:41:38,560 --> 00:41:43,119
emulator on

00:41:40,079 --> 00:41:44,000
and jutera normally again as a milder

00:41:43,119 --> 00:41:46,319
version

00:41:44,000 --> 00:41:48,319
the some some colors are a bit more

00:41:46,319 --> 00:41:52,319
faded like the green

00:41:48,319 --> 00:41:55,359
the green red and tritonopia is

00:41:52,319 --> 00:41:57,359
quite different where we have a weird

00:41:55,359 --> 00:41:58,720
color blindness around red and yellow

00:41:57,359 --> 00:42:01,280
where yellow

00:41:58,720 --> 00:42:02,160
looks like pink literally but also with

00:42:01,280 --> 00:42:05,200
green blue

00:42:02,160 --> 00:42:08,040
and purple treated normally

00:42:05,200 --> 00:42:09,200
again very milder version and

00:42:08,040 --> 00:42:12,240
achromatopsia

00:42:09,200 --> 00:42:13,920
is literally when you do not see uh any

00:42:12,240 --> 00:42:14,800
other colors if you only see shades of

00:42:13,920 --> 00:42:17,680
gray

00:42:14,800 --> 00:42:18,400
and a chromatomally a milder version

00:42:17,680 --> 00:42:21,040
which is

00:42:18,400 --> 00:42:22,240
a bit more like a a dull version of the

00:42:21,040 --> 00:42:25,359
colors we see as

00:42:22,240 --> 00:42:25,839
non uh colorblind people and so yeah

00:42:25,359 --> 00:42:28,560
that's

00:42:25,839 --> 00:42:29,440
um a pretty cool way to see a lot of

00:42:28,560 --> 00:42:32,720
different types

00:42:29,440 --> 00:42:37,359
on one resource what i added as well was

00:42:32,720 --> 00:42:40,000
also different examples that you might

00:42:37,359 --> 00:42:41,040
already know maybe from from experience

00:42:40,000 --> 00:42:43,599
around

00:42:41,040 --> 00:42:44,480
form and communicating with colors only

00:42:43,599 --> 00:42:46,400
which is

00:42:44,480 --> 00:42:49,040
not really useful when you don't

00:42:46,400 --> 00:42:52,319
differentiate green and red

00:42:49,040 --> 00:42:55,920
or when you are using links

00:42:52,319 --> 00:42:58,160
styling or buttons to basically say okay

00:42:55,920 --> 00:42:59,440
i want to access it but i have no clue

00:42:58,160 --> 00:43:02,640
where is the button oh

00:42:59,440 --> 00:43:04,240
okay and additional things like color

00:43:02,640 --> 00:43:07,440
contrast which is like

00:43:04,240 --> 00:43:09,359
probably the most known um

00:43:07,440 --> 00:43:10,880
as well in terms of color blindness but

00:43:09,359 --> 00:43:14,160
also when you are

00:43:10,880 --> 00:43:16,800
online shopping with color pickers

00:43:14,160 --> 00:43:18,640
do you see what kind of colors they are

00:43:16,800 --> 00:43:22,079
here

00:43:18,640 --> 00:43:23,440
ah not really so that's another thing to

00:43:22,079 --> 00:43:26,000
think about

00:43:23,440 --> 00:43:27,599
and i think my last example is about pie

00:43:26,000 --> 00:43:30,160
charts infographics

00:43:27,599 --> 00:43:31,359
um there are ways that are really not

00:43:30,160 --> 00:43:33,440
accessible

00:43:31,359 --> 00:43:34,800
for different types of color blindness

00:43:33,440 --> 00:43:37,760
so definitely

00:43:34,800 --> 00:43:39,200
not not even able to to use it so i

00:43:37,760 --> 00:43:41,040
added more resources

00:43:39,200 --> 00:43:42,240
in um there are more resources in

00:43:41,040 --> 00:43:45,440
additional links

00:43:42,240 --> 00:43:48,720
so feel free to to check it out later on

00:43:45,440 --> 00:43:51,839
and yeah i also had it all my resources

00:43:48,720 --> 00:43:52,800
uh books definitions articles extensions

00:43:51,839 --> 00:43:54,800
applications

00:43:52,800 --> 00:43:56,880
if there is one that i would highly

00:43:54,800 --> 00:43:59,200
recommend is the color accessibility

00:43:56,880 --> 00:44:02,960
workflows by gary kawadi

00:43:59,200 --> 00:44:06,640
who um gives very simple definitions

00:44:02,960 --> 00:44:09,200
uh very interesting research uh from um

00:44:06,640 --> 00:44:09,839
from the the medicine industry domestic

00:44:09,200 --> 00:44:12,960
side

00:44:09,839 --> 00:44:14,720
and yeah um overall

00:44:12,960 --> 00:44:16,319
yeah feel free to dig into that it's

00:44:14,720 --> 00:44:19,520
definitely a very very

00:44:16,319 --> 00:44:22,720
interesting topic and

00:44:19,520 --> 00:44:25,920
yeah i also wanted to say thank you for

00:44:22,720 --> 00:44:26,400
the person who helped me through this

00:44:25,920 --> 00:44:28,960
project

00:44:26,400 --> 00:44:29,680
at different stages so leandro nalvax

00:44:28,960 --> 00:44:33,599
populai

00:44:29,680 --> 00:44:36,640
and mintai mia for the early stages

00:44:33,599 --> 00:44:40,079
around my fruiting issues up to

00:44:36,640 --> 00:44:41,119
some content security uh policy ads on

00:44:40,079 --> 00:44:43,520
that were

00:44:41,119 --> 00:44:44,640
not really working well so thank you to

00:44:43,520 --> 00:44:46,240
uh to you three

00:44:44,640 --> 00:44:48,640
otherwise i think i wouldn't be done

00:44:46,240 --> 00:44:51,520
today with this project

00:44:48,640 --> 00:44:52,480
so i'm again really really appreciate

00:44:51,520 --> 00:44:55,920
this super cool

00:44:52,480 --> 00:44:59,040
amber community helping out and

00:44:55,920 --> 00:45:02,560
yeah as a next step i think

00:44:59,040 --> 00:45:05,680
i would love to see if i could implement

00:45:02,560 --> 00:45:07,359
this project into a chrome extension to

00:45:05,680 --> 00:45:10,960
enable people to just

00:45:07,359 --> 00:45:11,680
um yeah emulate this in in any web page

00:45:10,960 --> 00:45:15,119
you would like

00:45:11,680 --> 00:45:17,680
and give a bigger awareness

00:45:15,119 --> 00:45:19,200
on uh yeah all the different types of

00:45:17,680 --> 00:45:21,680
colorblindness and also

00:45:19,200 --> 00:45:22,319
maybe to test this using an extension

00:45:21,680 --> 00:45:25,200
and see

00:45:22,319 --> 00:45:25,599
where they can improve uh the product so

00:45:25,200 --> 00:45:27,920
yeah

00:45:25,599 --> 00:45:29,200
thank you so much you can uh definitely

00:45:27,920 --> 00:45:32,400
check out the website

00:45:29,200 --> 00:45:36,480
on colorblindnessemulator.netflight.com

00:45:32,400 --> 00:45:38,400
my repo is under github i got padilla

00:45:36,480 --> 00:45:40,240
and yeah if you have any questions i'll

00:45:38,400 --> 00:45:42,000
be happy of course to to answer but in

00:45:40,240 --> 00:45:45,520
general i can share again

00:45:42,000 --> 00:45:48,960
the uh the presentation and the project

00:45:45,520 --> 00:45:48,960
and yeah thank you very much

00:45:50,319 --> 00:45:54,480
yeah thank you so much for this awesome

00:45:51,760 --> 00:45:55,280
talk um i also would already have like

00:45:54,480 --> 00:45:57,440
um

00:45:55,280 --> 00:45:59,119
a question right off the bat you already

00:45:57,440 --> 00:46:02,880
showed like a couple of like really

00:45:59,119 --> 00:46:04,400
interesting examples of um yeah typical

00:46:02,880 --> 00:46:06,319
elements you could see like a web page

00:46:04,400 --> 00:46:07,839
like for example like the bar charts and

00:46:06,319 --> 00:46:11,040
like also like the forms

00:46:07,839 --> 00:46:12,839
that are completely color coded that

00:46:11,040 --> 00:46:14,160
are inaccessible for people who are

00:46:12,839 --> 00:46:15,280
colorblind

00:46:14,160 --> 00:46:17,520
and i'm kind of like wondering

00:46:15,280 --> 00:46:19,440
especially like with the charts like

00:46:17,520 --> 00:46:21,920
uh what would you say would be like

00:46:19,440 --> 00:46:24,800
common recommendations to avoid

00:46:21,920 --> 00:46:28,640
um this inaccessibility from what you

00:46:24,800 --> 00:46:30,079
have researched so far yeah that's a

00:46:28,640 --> 00:46:33,760
that's a very good question

00:46:30,079 --> 00:46:34,560
so what was usually recommended

00:46:33,760 --> 00:46:38,560
especially for

00:46:34,560 --> 00:46:41,839
pie charts so um when you have evolution

00:46:38,560 --> 00:46:43,200
infographics or pie chart to use

00:46:41,839 --> 00:46:45,040
i don't know if it's called that way but

00:46:43,200 --> 00:46:46,560
you have texture to basically

00:46:45,040 --> 00:46:49,119
differentiate let's say a dot

00:46:46,560 --> 00:46:50,400
texture another one will be more around

00:46:49,119 --> 00:46:52,880
rectangles or

00:46:50,400 --> 00:46:55,280
like patterns sorry to use patterns

00:46:52,880 --> 00:46:57,680
instead of only relying on colors

00:46:55,280 --> 00:46:59,520
and i think it would be the same for if

00:46:57,680 --> 00:47:00,640
you want to show evolutions to have like

00:46:59,520 --> 00:47:03,440
dotted lines

00:47:00,640 --> 00:47:05,599
longer dotted lines uh or to make sure

00:47:03,440 --> 00:47:07,520
you have actually a color contrast

00:47:05,599 --> 00:47:10,160
between all the colors you use

00:47:07,520 --> 00:47:11,040
it's very tricky when you have lines in

00:47:10,160 --> 00:47:13,599
general

00:47:11,040 --> 00:47:14,720
um but i think for pie chart if you use

00:47:13,599 --> 00:47:16,960
a very

00:47:14,720 --> 00:47:17,920
strong color contrast between i don't

00:47:16,960 --> 00:47:20,800
know uh

00:47:17,920 --> 00:47:21,680
something very light gray something dark

00:47:20,800 --> 00:47:24,559
and

00:47:21,680 --> 00:47:26,800
if it works out i guess if it works like

00:47:24,559 --> 00:47:27,760
for a chromatopsia i think it's a win

00:47:26,800 --> 00:47:30,400
because then

00:47:27,760 --> 00:47:31,599
with other colors at least you have some

00:47:30,400 --> 00:47:34,960
some differentiation

00:47:31,599 --> 00:47:38,160
so yeah having patterns having either

00:47:34,960 --> 00:47:40,079
um different texture of

00:47:38,160 --> 00:47:43,520
lines for evolution is definitely a

00:47:40,079 --> 00:47:46,880
great way to make it accessible

00:47:43,520 --> 00:47:46,880
yeah thank you that's so helpful

00:47:50,160 --> 00:47:56,000
any more questions also feel free to use

00:47:52,079 --> 00:47:56,000
the chat if you want to post any

00:48:04,839 --> 00:48:09,359
questions

00:48:07,680 --> 00:48:11,440
i think there is also another

00:48:09,359 --> 00:48:13,920
recommendation from gonzalo from your

00:48:11,440 --> 00:48:14,640
question jesse which is uh so to use bar

00:48:13,920 --> 00:48:16,960
charts

00:48:14,640 --> 00:48:18,079
uh which is another way to make it

00:48:16,960 --> 00:48:20,000
accessible

00:48:18,079 --> 00:48:21,839
um because like when you have uh

00:48:20,000 --> 00:48:24,079
captions on infographics

00:48:21,839 --> 00:48:26,400
it makes it um way more difficult but

00:48:24,079 --> 00:48:28,640
with bar chat i think you can rely on

00:48:26,400 --> 00:48:29,680
on a straight line and have a better

00:48:28,640 --> 00:48:31,760
understanding

00:48:29,680 --> 00:48:33,760
that was just reading the comment

00:48:31,760 --> 00:48:34,559
section yeah that makes a lot of sense

00:48:33,760 --> 00:48:36,720
as well thank you

00:48:34,559 --> 00:48:36,720
um

00:48:42,000 --> 00:48:45,680
okay um if there's no more questions for

00:48:45,359 --> 00:48:47,680
this

00:48:45,680 --> 00:48:49,680
then again thank you so much for this

00:48:47,680 --> 00:48:51,920
awesome talk has been super insightful

00:48:49,680 --> 00:48:52,880
and um yeah kind of like also me

00:48:51,920 --> 00:48:56,559
personally gave me

00:48:52,880 --> 00:48:58,800
a much more kind of like awareness that

00:48:56,559 --> 00:49:00,000
uh it's like good to actually test for

00:48:58,800 --> 00:49:01,920
colors and

00:49:00,000 --> 00:49:03,200
um how we actually apply the webpage

00:49:01,920 --> 00:49:05,280
before actually shipping something to

00:49:03,200 --> 00:49:08,559
make sure it's not color accessible so

00:49:05,280 --> 00:49:11,920
for this thank you so much um

00:49:08,559 --> 00:49:12,480
and with this we have already uh come to

00:49:11,920 --> 00:49:14,880
our

00:49:12,480 --> 00:49:16,160
kind of like short uh break i can maybe

00:49:14,880 --> 00:49:19,520
also quickly

00:49:16,160 --> 00:49:22,720
share the screen again

00:49:19,520 --> 00:49:25,599
uh to show everyone uh so

00:49:22,720 --> 00:49:26,400
i would suggest we can maybe take like a

00:49:25,599 --> 00:49:28,400
five to

00:49:26,400 --> 00:49:30,000
ten minute break and we'll see each

00:49:28,400 --> 00:49:33,280
other again at the

00:49:30,000 --> 00:49:37,599
full hour so 11 a.m

00:49:33,280 --> 00:49:40,559
pacific 8 p.m

00:49:37,599 --> 00:49:42,160
central eastern time and yeah you know

00:49:40,559 --> 00:49:44,319
what i mean

00:49:42,160 --> 00:49:46,319
so yeah feel free to grab a snack grab a

00:49:44,319 --> 00:49:59,839
drink and we see each other again like

00:49:46,319 --> 00:49:59,839
at the full hour

00:50:20,730 --> 00:50:23,780
[Music]

00:50:25,760 --> 00:50:27,839
foreign

00:50:28,400 --> 00:51:08,239
[Music]

00:51:12,540 --> 00:51:26,340
[Music]

00:51:34,839 --> 00:51:58,869
so

00:51:37,570 --> 00:51:58,869
[Music]

00:52:02,410 --> 00:52:08,840
[Music]

00:52:13,740 --> 00:52:16,790
[Music]

00:52:16,839 --> 00:52:19,839
so

00:52:21,400 --> 00:52:47,640
[Music]

00:52:44,839 --> 00:53:01,249
foreign

00:52:47,640 --> 00:53:01,249
[Music]

00:53:05,540 --> 00:53:40,079
[Music]

00:53:40,839 --> 00:53:54,840
foreign

00:53:41,870 --> 00:53:57,929
[Music]

00:53:54,840 --> 00:53:57,929
[Applause]

00:53:57,950 --> 00:54:21,060
[Music]

00:54:22,839 --> 00:54:25,839
wow

00:54:32,400 --> 00:54:53,920
[Music]

00:54:51,839 --> 00:54:53,920
you

00:54:56,580 --> 00:55:19,679
[Music]

00:55:24,210 --> 00:55:45,800
[Music]

00:55:46,839 --> 00:56:13,500
so

00:55:49,230 --> 00:56:16,599
[Music]

00:56:13,500 --> 00:56:16,599
[Applause]

00:56:16,620 --> 00:56:45,839
[Music]

00:56:43,280 --> 00:56:45,839
oh

00:56:51,070 --> 00:57:27,580
[Music]

00:57:24,839 --> 00:57:38,349
my

00:57:27,580 --> 00:57:38,349
[Music]

00:57:59,520 --> 00:58:04,880
um yeah i'm very happy that i can

00:58:02,319 --> 00:58:08,000
present this to you today

00:58:04,880 --> 00:58:10,319
um i'm francesco i really like

00:58:08,000 --> 00:58:11,119
to travel and looking forward to do that

00:58:10,319 --> 00:58:14,160
again

00:58:11,119 --> 00:58:17,280
which is also why i'm maybe only

00:58:14,160 --> 00:58:19,440
i don't know 75 fit today because i got

00:58:17,280 --> 00:58:20,160
my second covet vaccine shot yesterday

00:58:19,440 --> 00:58:23,680
so

00:58:20,160 --> 00:58:25,359
um yeah i could feel better but i'm

00:58:23,680 --> 00:58:27,839
happy that i feel well enough to hold

00:58:25,359 --> 00:58:30,960
this talk at least

00:58:27,839 --> 00:58:34,799
um i work at febscale which

00:58:30,960 --> 00:58:39,200
is a small company we build software for

00:58:34,799 --> 00:58:41,440
coffee roasters you can imagine this

00:58:39,200 --> 00:58:43,119
roughly speaking that we collect data

00:58:41,440 --> 00:58:44,000
from all the machines in a roasting

00:58:43,119 --> 00:58:45,760
plant

00:58:44,000 --> 00:58:48,240
sink it into the cloud and then we have

00:58:45,760 --> 00:58:51,359
a cloud application

00:58:48,240 --> 00:58:53,760
where you can see your kpis

00:58:51,359 --> 00:58:55,359
your production data do quality control

00:58:53,760 --> 00:58:57,839
and things like that

00:58:55,359 --> 00:58:59,760
i lead the technical team there and i'm

00:58:57,839 --> 00:59:02,839
also heavily involved in

00:58:59,760 --> 00:59:04,079
actually writing the front-end

00:59:02,839 --> 00:59:07,119
application

00:59:04,079 --> 00:59:10,400
our stack is an ember app

00:59:07,119 --> 00:59:13,440
which we use for the front-end it's a

00:59:10,400 --> 00:59:17,119
fairly up-to-date octane app we have a

00:59:13,440 --> 00:59:18,640
java based graphql api and

00:59:17,119 --> 00:59:20,160
a little software called the cloud

00:59:18,640 --> 00:59:23,280
connector which runs

00:59:20,160 --> 00:59:26,000
on premise in the roasting plant which

00:59:23,280 --> 00:59:28,160
is built in c-sharp

00:59:26,000 --> 00:59:29,359
i will be focusing on the ember part

00:59:28,160 --> 00:59:32,880
especially on like

00:59:29,359 --> 00:59:36,240
how we communicate with our graphql api

00:59:32,880 --> 00:59:39,200
for that we use ember polo client which

00:59:36,240 --> 00:59:40,480
has been around for some time and works

00:59:39,200 --> 00:59:43,280
quite well for us

00:59:40,480 --> 00:59:44,960
i've seen quite recently there is also

00:59:43,280 --> 00:59:47,440
new ad on glimmer apollo

00:59:44,960 --> 00:59:49,440
which also looks very nice i have not

00:59:47,440 --> 00:59:52,240
looked into it in detail

00:59:49,440 --> 00:59:54,160
but generally what i will be showing you

00:59:52,240 --> 00:59:56,079
should it should not really be tied to

00:59:54,160 --> 00:59:58,319
ember polo client itself

00:59:56,079 --> 01:00:01,119
but be more like conceptually how we

00:59:58,319 --> 01:00:04,799
handle things

01:00:01,119 --> 01:00:05,359
so this talk is not really about graphql

01:00:04,799 --> 01:00:08,559
itself

01:00:05,359 --> 01:00:11,040
so the goal is not to really explain

01:00:08,559 --> 01:00:12,640
graphql in detailed a lot of resources

01:00:11,040 --> 01:00:14,240
on that

01:00:12,640 --> 01:00:15,760
i just want to give a very short

01:00:14,240 --> 01:00:18,640
overview for those who

01:00:15,760 --> 01:00:19,200
maybe don't know anything about graphql

01:00:18,640 --> 01:00:21,920
um

01:00:19,200 --> 01:00:24,720
you might be more used to working with

01:00:21,920 --> 01:00:27,680
rest apis with something like amber data

01:00:24,720 --> 01:00:28,079
a rest api where you have an end point

01:00:27,680 --> 01:00:31,119
per

01:00:28,079 --> 01:00:34,160
resource where you may get a post or put

01:00:31,119 --> 01:00:37,200
requests to do certain things on this

01:00:34,160 --> 01:00:38,559
end points in contrast graphql has a

01:00:37,200 --> 01:00:41,280
single endpoint

01:00:38,559 --> 01:00:43,359
where you just always post to and the

01:00:41,280 --> 01:00:44,000
type of action you're doing is defined

01:00:43,359 --> 01:00:46,480
by

01:00:44,000 --> 01:00:48,000
the payload that you send and you can

01:00:46,480 --> 01:00:50,720
send either a query

01:00:48,000 --> 01:00:51,040
or a mutation to either fetch data or to

01:00:50,720 --> 01:00:54,480
do

01:00:51,040 --> 01:00:56,640
something the

01:00:54,480 --> 01:00:57,920
way this works is that you have a static

01:00:56,640 --> 01:01:01,359
defined

01:00:57,920 --> 01:01:03,200
schema where you have types which is

01:01:01,359 --> 01:01:04,400
basically a model so you could have a

01:01:03,200 --> 01:01:06,640
user type

01:01:04,400 --> 01:01:07,440
which has certain fields it could have

01:01:06,640 --> 01:01:10,400
an id

01:01:07,440 --> 01:01:11,200
a name an email maybe it has a company

01:01:10,400 --> 01:01:13,440
relationship

01:01:11,200 --> 01:01:14,799
and maybe it has a roles relationship

01:01:13,440 --> 01:01:17,839
for example

01:01:14,799 --> 01:01:19,920
when you now write a query for graphql

01:01:17,839 --> 01:01:23,359
in your own application

01:01:19,920 --> 01:01:26,960
you can basically define which fields

01:01:23,359 --> 01:01:31,040
you want to have so in the top left code

01:01:26,960 --> 01:01:32,319
box you can see we want to do a user by

01:01:31,040 --> 01:01:34,240
email query

01:01:32,319 --> 01:01:35,599
where we have one variable which is an

01:01:34,240 --> 01:01:37,839
email and

01:01:35,599 --> 01:01:39,040
what we care about is the id the email

01:01:37,839 --> 01:01:41,520
the name

01:01:39,040 --> 01:01:43,119
and for the roles relationship we want

01:01:41,520 --> 01:01:46,240
only the id and the name

01:01:43,119 --> 01:01:47,280
as a simple example on the right side

01:01:46,240 --> 01:01:48,799
you would see

01:01:47,280 --> 01:01:50,319
the payload that you would get for such

01:01:48,799 --> 01:01:53,040
a query

01:01:50,319 --> 01:01:55,200
it's basically a pojo in the structure

01:01:53,040 --> 01:01:58,240
that you defined

01:01:55,200 --> 01:01:59,200
and on the bottom box you see how you

01:01:58,240 --> 01:02:01,359
would actually

01:01:59,200 --> 01:02:02,319
invoke such a query with ember apollo

01:02:01,359 --> 01:02:05,119
client

01:02:02,319 --> 01:02:07,119
um basically amber apollo client

01:02:05,119 --> 01:02:11,039
provides you a query manager

01:02:07,119 --> 01:02:14,720
which is basically a service kind of

01:02:11,039 --> 01:02:16,880
and this has a query and a mutate method

01:02:14,720 --> 01:02:17,920
that you can use and you can pass it a

01:02:16,880 --> 01:02:20,240
query

01:02:17,920 --> 01:02:22,079
and variables and then it will invoke

01:02:20,240 --> 01:02:25,200
this and it will return a promise

01:02:22,079 --> 01:02:29,359
that resolves to a pojo

01:02:25,200 --> 01:02:30,960
so very high level overview of graphql

01:02:29,359 --> 01:02:32,480
if you are interested in learning more

01:02:30,960 --> 01:02:34,400
about graphql there are a lot of great

01:02:32,480 --> 01:02:35,920
resources out there and i

01:02:34,400 --> 01:02:38,559
can recommend it we have been quite

01:02:35,920 --> 01:02:40,559
happy with it

01:02:38,559 --> 01:02:42,000
one thing that might also be good to

01:02:40,559 --> 01:02:44,960
mention is

01:02:42,000 --> 01:02:46,160
we have a graphql api and we use ember

01:02:44,960 --> 01:02:50,160
apollo client

01:02:46,160 --> 01:02:52,799
so what is apollo compared to graphql

01:02:50,160 --> 01:02:55,680
apollo is basically a specific

01:02:52,799 --> 01:02:58,799
implementation of a graphql client

01:02:55,680 --> 01:03:02,000
this is non-ember specific i think it's

01:02:58,799 --> 01:03:04,480
mostly actually like the normal

01:03:02,000 --> 01:03:05,359
apollo client is built mostly for react

01:03:04,480 --> 01:03:08,000
i think

01:03:05,359 --> 01:03:09,119
um but you can easily use it in an ember

01:03:08,000 --> 01:03:11,920
app as well

01:03:09,119 --> 01:03:14,160
and what apollo client basically does is

01:03:11,920 --> 01:03:14,799
it brings certain things on top of just

01:03:14,160 --> 01:03:18,720
a

01:03:14,799 --> 01:03:22,799
basic graphql functionality and with it

01:03:18,720 --> 01:03:26,720
especially also the caching so

01:03:22,799 --> 01:03:28,559
if you are used to maybe amber data

01:03:26,720 --> 01:03:30,000
this brings a certain level of caching

01:03:28,559 --> 01:03:32,960
out of the box and

01:03:30,000 --> 01:03:34,480
it also has its issues basically you

01:03:32,960 --> 01:03:36,640
fetch records by id

01:03:34,480 --> 01:03:38,160
and then these records are stored in the

01:03:36,640 --> 01:03:40,880
cache and you can

01:03:38,160 --> 01:03:42,160
basically fetch them from there without

01:03:40,880 --> 01:03:45,440
hitting the network again

01:03:42,160 --> 01:03:47,119
if you want to apollo also has something

01:03:45,440 --> 01:03:49,280
like this out of the box

01:03:47,119 --> 01:03:50,640
and the way it works for apollo is that

01:03:49,280 --> 01:03:53,680
a full query

01:03:50,640 --> 01:03:55,599
is cached this means that if you have a

01:03:53,680 --> 01:03:56,880
certain query with a certain set of

01:03:55,599 --> 01:03:58,559
variables

01:03:56,880 --> 01:04:00,480
the first time you do it it will be

01:03:58,559 --> 01:04:01,200
cached when you have the same query

01:04:00,480 --> 01:04:03,359
later

01:04:01,200 --> 01:04:05,280
it will not hit the network again but

01:04:03,359 --> 01:04:08,559
just return you the same response

01:04:05,280 --> 01:04:11,920
than before this generally

01:04:08,559 --> 01:04:13,200
is nice and works well but we found it

01:04:11,920 --> 01:04:16,640
to be

01:04:13,200 --> 01:04:18,400
um potentially tricky when working a lot

01:04:16,640 --> 01:04:22,079
with mutations

01:04:18,400 --> 01:04:24,960
so and also with ensuring that no data

01:04:22,079 --> 01:04:27,039
becomes stale because our application

01:04:24,960 --> 01:04:29,119
can be quite long-lived

01:04:27,039 --> 01:04:31,440
you can imagine a person in a coffee

01:04:29,119 --> 01:04:33,599
plant pulling up our web application

01:04:31,440 --> 01:04:34,720
and just having it open the whole day

01:04:33,599 --> 01:04:37,680
now the way that

01:04:34,720 --> 01:04:38,240
apollo caching by default works is let's

01:04:37,680 --> 01:04:42,160
say i

01:04:38,240 --> 01:04:46,240
fetch a list of tasks in the morning

01:04:42,160 --> 01:04:48,400
and then 10 hours later i fetched the

01:04:46,240 --> 01:04:51,359
same list of tasks again i will get

01:04:48,400 --> 01:04:52,960
exactly the same responses before

01:04:51,359 --> 01:04:56,240
but i probably just want to hit the

01:04:52,960 --> 01:04:56,240
network again at that point

01:04:56,799 --> 01:04:59,839
so this is a short example of how this

01:04:59,200 --> 01:05:02,400
caching

01:04:59,839 --> 01:05:04,079
works in apollo basically just

01:05:02,400 --> 01:05:06,000
description of what i just said

01:05:04,079 --> 01:05:07,760
so the first time you have a query it

01:05:06,000 --> 01:05:09,200
will hit the network

01:05:07,760 --> 01:05:12,160
and when the promise resolves you have

01:05:09,200 --> 01:05:12,720
the pojo now when i do exactly the same

01:05:12,160 --> 01:05:15,039
query

01:05:12,720 --> 01:05:16,960
with exactly the same set of variables

01:05:15,039 --> 01:05:18,880
again at any point later

01:05:16,960 --> 01:05:21,280
it will not hit the network but just

01:05:18,880 --> 01:05:23,599
give me the same response again

01:05:21,280 --> 01:05:25,359
if i use the same query but with a

01:05:23,599 --> 01:05:27,359
different set of variables

01:05:25,359 --> 01:05:30,079
it will hit the network again and then

01:05:27,359 --> 01:05:35,200
cache this again so the cache is really

01:05:30,079 --> 01:05:38,640
per set of variables and query

01:05:35,200 --> 01:05:40,640
now if you bring mutations into this

01:05:38,640 --> 01:05:42,000
you can quickly see how this can become

01:05:40,640 --> 01:05:44,480
a bit tricky

01:05:42,000 --> 01:05:45,920
so let's say i query a user i want to

01:05:44,480 --> 01:05:48,720
get the user by email

01:05:45,920 --> 01:05:50,160
for from jessica fabscur.com now i have

01:05:48,720 --> 01:05:53,039
a user object

01:05:50,160 --> 01:05:54,559
at some point later i run a mutation i

01:05:53,039 --> 01:05:56,559
want to update a user

01:05:54,559 --> 01:05:59,119
and i want to update my name to

01:05:56,559 --> 01:06:02,240
francesco smith let's say

01:05:59,119 --> 01:06:04,960
now if at any point later i rerun

01:06:02,240 --> 01:06:06,400
the query to fetch my user by email it

01:06:04,960 --> 01:06:06,880
wouldn't necessarily know that i have

01:06:06,400 --> 01:06:08,319
run a

01:06:06,880 --> 01:06:10,079
mutation in the meanwhile and it will

01:06:08,319 --> 01:06:12,799
just return me the same

01:06:10,079 --> 01:06:14,400
user that was fetched initially which is

01:06:12,799 --> 01:06:16,480
not what i would want here in this case

01:06:14,400 --> 01:06:20,799
i would just want it to

01:06:16,480 --> 01:06:23,200
basically hit the network again so

01:06:20,799 --> 01:06:25,280
apollo does provide tools to work with

01:06:23,200 --> 01:06:25,920
that because obviously it's a common use

01:06:25,280 --> 01:06:28,000
case

01:06:25,920 --> 01:06:30,079
so the way this is normally handled is

01:06:28,000 --> 01:06:31,599
that with a mutation you can have kind

01:06:30,079 --> 01:06:34,880
of a callback

01:06:31,599 --> 01:06:37,760
so when the mutation is done you get

01:06:34,880 --> 01:06:38,960
access to the cache object more or less

01:06:37,760 --> 01:06:42,160
and there you can

01:06:38,960 --> 01:06:44,720
basically manually update the cached

01:06:42,160 --> 01:06:46,160
responses for the different queries

01:06:44,720 --> 01:06:48,319
that's quite powerful

01:06:46,160 --> 01:06:50,240
and of course can be very performant

01:06:48,319 --> 01:06:53,839
because you can really avoid

01:06:50,240 --> 01:06:56,400
any duplicate lookups or network lookups

01:06:53,839 --> 01:06:58,079
but for us this became quite annoying

01:06:56,400 --> 01:06:58,880
quite quickly because you have to write

01:06:58,079 --> 01:07:00,880
a lot of

01:06:58,880 --> 01:07:03,280
kind of low level code or it feels kind

01:07:00,880 --> 01:07:07,280
of low level

01:07:03,280 --> 01:07:09,359
let's say you have you update a username

01:07:07,280 --> 01:07:11,680
then you need to fetch any query where

01:07:09,359 --> 01:07:13,440
you have ever fetched a list of users

01:07:11,680 --> 01:07:14,720
and make sure to update it accordingly

01:07:13,440 --> 01:07:18,400
etc etc

01:07:14,720 --> 01:07:21,119
so it's possible but for us it felt

01:07:18,400 --> 01:07:22,319
kind of like not an ideal world solution

01:07:21,119 --> 01:07:25,440
we wanted something

01:07:22,319 --> 01:07:27,119
where we define more or less the rules

01:07:25,440 --> 01:07:28,640
of how we want the caching to work and

01:07:27,119 --> 01:07:31,520
then we don't really need to think about

01:07:28,640 --> 01:07:34,240
it anymore later

01:07:31,520 --> 01:07:35,520
what we ended up building is a pretty

01:07:34,240 --> 01:07:38,640
thin layer on top of

01:07:35,520 --> 01:07:41,440
ember apollo client which

01:07:38,640 --> 01:07:43,039
allowed us to easily define how we want

01:07:41,440 --> 01:07:45,520
caching to work

01:07:43,039 --> 01:07:47,039
and to do that we basically only use the

01:07:45,520 --> 01:07:50,319
fetch policy that apollo

01:07:47,039 --> 01:07:54,160
already provides so for any

01:07:50,319 --> 01:07:56,880
uh query you can define the fetch policy

01:07:54,160 --> 01:07:58,000
which by default is cash first cash

01:07:56,880 --> 01:08:01,599
first means

01:07:58,000 --> 01:08:03,520
if a cash exists it will return the cash

01:08:01,599 --> 01:08:04,960
if no cash exists it will hit the

01:08:03,520 --> 01:08:08,559
network and then

01:08:04,960 --> 01:08:10,799
cash the response so what we ended up

01:08:08,559 --> 01:08:14,079
doing is

01:08:10,799 --> 01:08:17,600
made a small function that determined if

01:08:14,079 --> 01:08:20,239
a certain query should be cached or not

01:08:17,600 --> 01:08:21,679
if it should be cached we would just set

01:08:20,239 --> 01:08:24,000
the fetch policy to

01:08:21,679 --> 01:08:25,120
cache first and if we decided it should

01:08:24,000 --> 01:08:27,759
not be cached

01:08:25,120 --> 01:08:28,880
then we would set the fetch policy to

01:08:27,759 --> 01:08:32,239
network only

01:08:28,880 --> 01:08:35,120
to ensure it will always hit the network

01:08:32,239 --> 01:08:36,880
and then we more or less kept the map of

01:08:35,120 --> 01:08:38,400
the different queries and when they were

01:08:36,880 --> 01:08:42,080
being made

01:08:38,400 --> 01:08:45,759
we do not manually work with the apollo

01:08:42,080 --> 01:08:48,159
cache we just we do use the apollo cache

01:08:45,759 --> 01:08:50,319
but we do not directly interact with it

01:08:48,159 --> 01:08:52,560
only over the fetch policy

01:08:50,319 --> 01:08:53,920
and when we run a mutation we're allowed

01:08:52,560 --> 01:08:56,560
to define

01:08:53,920 --> 01:08:56,960
a list of caches to clear basically i

01:08:56,560 --> 01:09:00,960
will

01:08:56,960 --> 01:09:04,080
show some code how that works

01:09:00,960 --> 01:09:06,480
so the usage is relatively simple

01:09:04,080 --> 01:09:07,440
the way we implemented it is we have a

01:09:06,480 --> 01:09:09,759
service per

01:09:07,440 --> 01:09:11,759
entity for example let's say we have a

01:09:09,759 --> 01:09:14,960
user entity then we would have a

01:09:11,759 --> 01:09:16,880
user store that has all the methods for

01:09:14,960 --> 01:09:19,199
interacting with users we would have

01:09:16,880 --> 01:09:22,000
load user slot user

01:09:19,199 --> 01:09:23,679
create user delete user update user for

01:09:22,000 --> 01:09:26,719
example

01:09:23,679 --> 01:09:28,960
these store services use the store

01:09:26,719 --> 01:09:31,520
manager which is a shared

01:09:28,960 --> 01:09:34,640
service which is basically this syn repo

01:09:31,520 --> 01:09:35,199
on top of apollo way you would then

01:09:34,640 --> 01:09:38,560
invoke it

01:09:35,199 --> 01:09:41,120
is more or less similar to the way you

01:09:38,560 --> 01:09:42,159
do it with apollo client most of the

01:09:41,120 --> 01:09:45,600
things are just

01:09:42,159 --> 01:09:49,199
passed through the relevant thing really

01:09:45,600 --> 01:09:52,239
here is the cash entity and the cache id

01:09:49,199 --> 01:09:54,320
so we allowed to give

01:09:52,239 --> 01:09:56,560
cache entity which is really basically a

01:09:54,320 --> 01:10:00,080
name space for how to

01:09:56,560 --> 01:10:00,800
store this and optionally an id and then

01:10:00,080 --> 01:10:02,880
in

01:10:00,800 --> 01:10:04,239
you can also define a cache seconds

01:10:02,880 --> 01:10:07,199
which is after this

01:10:04,239 --> 01:10:08,880
amount of seconds we want the cache to

01:10:07,199 --> 01:10:11,520
be invalidated

01:10:08,880 --> 01:10:12,000
this means for example we say load users

01:10:11,520 --> 01:10:15,199
after

01:10:12,000 --> 01:10:17,040
300 seconds if this query is made again

01:10:15,199 --> 01:10:18,960
we always want to hit the network no

01:10:17,040 --> 01:10:21,440
matter what happened before

01:10:18,960 --> 01:10:23,199
and this basically helps us to avoid

01:10:21,440 --> 01:10:24,480
stale data

01:10:23,199 --> 01:10:26,320
something like this might not be

01:10:24,480 --> 01:10:29,440
relevant for every use case

01:10:26,320 --> 01:10:32,640
but for us it works quite well

01:10:29,440 --> 01:10:34,960
now if you have a mutation

01:10:32,640 --> 01:10:36,159
it's pretty similar but instead of

01:10:34,960 --> 01:10:38,320
defining

01:10:36,159 --> 01:10:39,600
how you want to cache it you can define

01:10:38,320 --> 01:10:42,960
a list of

01:10:39,600 --> 01:10:45,280
caches to invalidate and you can define

01:10:42,960 --> 01:10:46,560
either just a cache entity which will

01:10:45,280 --> 01:10:48,880
invalidate

01:10:46,560 --> 01:10:51,760
anything where no id is given so

01:10:48,880 --> 01:10:54,400
basically any list query let's say

01:10:51,760 --> 01:10:55,920
and you can define a cache entity in

01:10:54,400 --> 01:10:58,400
combination with an id

01:10:55,920 --> 01:10:59,679
so in this concrete example after we

01:10:58,400 --> 01:11:02,719
update a user

01:10:59,679 --> 01:11:05,600
we want to clear the cache of any query

01:11:02,719 --> 01:11:07,520
that basically returned a list of users

01:11:05,600 --> 01:11:08,159
and we want to clear the cache of any

01:11:07,520 --> 01:11:10,800
query

01:11:08,159 --> 01:11:11,520
that returned this single user with this

01:11:10,800 --> 01:11:14,320
email

01:11:11,520 --> 01:11:14,320
as an example

01:11:14,719 --> 01:11:18,480
how does this work below the hood at the

01:11:17,600 --> 01:11:21,600
end it's quite

01:11:18,480 --> 01:11:23,840
trivial trivial i would say we have a

01:11:21,600 --> 01:11:25,040
method that checks if the cache should

01:11:23,840 --> 01:11:27,679
be used

01:11:25,040 --> 01:11:28,960
i will show this afterwards and then we

01:11:27,679 --> 01:11:32,239
set the fetch policy

01:11:28,960 --> 01:11:35,440
either to cache first or to network only

01:11:32,239 --> 01:11:37,760
and that's really basically it the

01:11:35,440 --> 01:11:39,199
key thing then is how you implement the

01:11:37,760 --> 01:11:42,560
method to check

01:11:39,199 --> 01:11:44,480
for cash usage this might depend a bit

01:11:42,560 --> 01:11:44,800
on your business logic the way we have

01:11:44,480 --> 01:11:47,520
it

01:11:44,800 --> 01:11:49,199
is we have a store cache which is

01:11:47,520 --> 01:11:53,199
basically a map

01:11:49,199 --> 01:11:56,239
of maps so it is a map per entity type

01:11:53,199 --> 01:11:57,040
and then each of these map items has

01:11:56,239 --> 01:11:59,840
another map

01:11:57,040 --> 01:12:00,480
per id more or less so we can always

01:11:59,840 --> 01:12:04,480
look up

01:12:00,480 --> 01:12:08,080
when was the last request made for this

01:12:04,480 --> 01:12:10,960
given id or for this given um

01:12:08,080 --> 01:12:12,640
name if i don't give an id and if this

01:12:10,960 --> 01:12:16,159
is old

01:12:12,640 --> 01:12:19,120
i can update it and else i just you know

01:12:16,159 --> 01:12:21,040
keep using the cache and then on the

01:12:19,120 --> 01:12:24,239
other hand when i run a mutation

01:12:21,040 --> 01:12:25,199
all we do is clear the cache for this

01:12:24,239 --> 01:12:28,239
specific

01:12:25,199 --> 01:12:30,080
entity type so the next time the check

01:12:28,239 --> 01:12:31,760
should use cache method is run

01:12:30,080 --> 01:12:33,760
it thinks that this method has never

01:12:31,760 --> 01:12:36,800
been run and it will always try to hit

01:12:33,760 --> 01:12:39,199
the network

01:12:36,800 --> 01:12:40,159
that's basically it how we handle

01:12:39,199 --> 01:12:42,239
caching

01:12:40,159 --> 01:12:44,960
it of course might lead sometimes to a

01:12:42,239 --> 01:12:47,920
bit more api requests than necessary

01:12:44,960 --> 01:12:48,400
but it is a really hassle-free solution

01:12:47,920 --> 01:12:51,920
for us

01:12:48,400 --> 01:12:55,120
we can always just um use

01:12:51,920 --> 01:12:56,320
the store manager methods and not think

01:12:55,120 --> 01:12:59,199
too much about

01:12:56,320 --> 01:13:00,800
or do i need to somehow force this to

01:12:59,199 --> 01:13:02,719
reload or something like that

01:13:00,800 --> 01:13:03,920
but it will just always go through the

01:13:02,719 --> 01:13:07,840
normal

01:13:03,920 --> 01:13:07,840
path when i invoke something

01:13:07,920 --> 01:13:11,840
now the second part i want to talk about

01:13:09,920 --> 01:13:15,040
shortly

01:13:11,840 --> 01:13:17,840
is how we then actually use our

01:13:15,040 --> 01:13:18,320
queries in our application and for that

01:13:17,840 --> 01:13:20,640
we use

01:13:18,320 --> 01:13:22,080
ember could get used to this which is a

01:13:20,640 --> 01:13:23,520
really awesome ad on if you haven't

01:13:22,080 --> 01:13:26,480
looked into it i would

01:13:23,520 --> 01:13:28,000
heavily recommend to do that we use it

01:13:26,480 --> 01:13:29,840
everywhere an application now and it has

01:13:28,000 --> 01:13:33,440
really changed how we

01:13:29,840 --> 01:13:35,679
write our ember applications

01:13:33,440 --> 01:13:37,840
amber could get used to this provides

01:13:35,679 --> 01:13:39,760
multiple

01:13:37,840 --> 01:13:41,280
different things i will be focusing now

01:13:39,760 --> 01:13:44,320
on resources

01:13:41,280 --> 01:13:48,080
so resource is a kind of helper like

01:13:44,320 --> 01:13:51,120
primitive that allows you to

01:13:48,080 --> 01:13:53,679
work with asynchronous things in a

01:13:51,120 --> 01:13:56,239
reactive way

01:13:53,679 --> 01:13:56,800
the key thing is it has a value property

01:13:56,239 --> 01:13:59,120
which

01:13:56,800 --> 01:14:00,640
returns something which you can then use

01:13:59,120 --> 01:14:02,960
and this is auto tracked so

01:14:00,640 --> 01:14:04,880
you can really return whatever you want

01:14:02,960 --> 01:14:07,360
in our case we have a value

01:14:04,880 --> 01:14:08,880
that returns its loading data and is

01:14:07,360 --> 01:14:10,800
error which are normal tracked

01:14:08,880 --> 01:14:13,360
properties

01:14:10,800 --> 01:14:14,480
now the interesting thing is the life

01:14:13,360 --> 01:14:17,280
cycle hooks

01:14:14,480 --> 01:14:17,679
that a resource has so it has a setup

01:14:17,280 --> 01:14:20,880
hook

01:14:17,679 --> 01:14:21,920
which is called whenever when you call

01:14:20,880 --> 01:14:24,719
it the first time and the

01:14:21,920 --> 01:14:27,520
teardown hook which is called when it

01:14:24,719 --> 01:14:30,159
should be destroyed

01:14:27,520 --> 01:14:30,719
the normal behavior when an argument

01:14:30,159 --> 01:14:33,280
changes

01:14:30,719 --> 01:14:34,480
it will tear down the resource and set

01:14:33,280 --> 01:14:37,600
up a new one

01:14:34,480 --> 01:14:39,679
you can also provide an update hook

01:14:37,600 --> 01:14:41,199
which will then instead be called if an

01:14:39,679 --> 01:14:42,960
argument changes

01:14:41,199 --> 01:14:45,040
you can have positional and named

01:14:42,960 --> 01:14:46,960
arguments and

01:14:45,040 --> 01:14:49,679
yeah it behaves mostly like a helper in

01:14:46,960 --> 01:14:52,320
that every time

01:14:49,679 --> 01:14:53,920
one of them changes the setup or update

01:14:52,320 --> 01:14:55,840
hooks will be called again

01:14:53,920 --> 01:14:58,560
so this is a really straightforward

01:14:55,840 --> 01:14:59,520
example on setup we want to use ember

01:14:58,560 --> 01:15:03,600
concurrency

01:14:59,520 --> 01:15:05,840
to basically use a service method

01:15:03,600 --> 01:15:06,719
and set data to something or if there is

01:15:05,840 --> 01:15:11,280
an error

01:15:06,719 --> 01:15:13,679
we set the error property and then

01:15:11,280 --> 01:15:15,280
the normal tracked behavior will lead to

01:15:13,679 --> 01:15:18,320
value being updated

01:15:15,280 --> 01:15:21,920
and value is then what will be exposed

01:15:18,320 --> 01:15:25,760
to the application you

01:15:21,920 --> 01:15:28,640
invoke this like a helper we

01:15:25,760 --> 01:15:29,440
group all our resources in a app slash

01:15:28,640 --> 01:15:32,159
helper

01:15:29,440 --> 01:15:34,159
resources directory but you could put it

01:15:32,159 --> 01:15:37,679
anywhere in your helpers directory

01:15:34,159 --> 01:15:39,760
and it works pretty straightforward

01:15:37,679 --> 01:15:41,520
the really nice thing with that for us

01:15:39,760 --> 01:15:43,760
is that it kind of

01:15:41,520 --> 01:15:45,760
it doesn't force you but it really makes

01:15:43,760 --> 01:15:47,199
it obvious to always have loading and

01:15:45,760 --> 01:15:50,960
error states

01:15:47,199 --> 01:15:54,000
because like whenever we

01:15:50,960 --> 01:15:55,600
create a resource somewhere the syntax

01:15:54,000 --> 01:15:57,840
is always the same it's always

01:15:55,600 --> 01:15:58,640
if resource is loading as if his

01:15:57,840 --> 01:16:02,080
resource is

01:15:58,640 --> 01:16:03,440
error else it's a success and this makes

01:16:02,080 --> 01:16:05,920
it much easier to

01:16:03,440 --> 01:16:07,600
not accidentally kind of drop some

01:16:05,920 --> 01:16:09,280
potential error state somewhere under

01:16:07,600 --> 01:16:12,239
the table

01:16:09,280 --> 01:16:13,600
before the really other options if you

01:16:12,239 --> 01:16:16,640
want to do something like that

01:16:13,600 --> 01:16:17,520
is often you might have a method let's

01:16:16,640 --> 01:16:20,320
say

01:16:17,520 --> 01:16:21,679
load user which you can invoke from your

01:16:20,320 --> 01:16:24,640
constructor

01:16:21,679 --> 01:16:25,520
which works but a you need to make sure

01:16:24,640 --> 01:16:28,000
to

01:16:25,520 --> 01:16:29,199
catch errors save the error somewhere on

01:16:28,000 --> 01:16:33,600
the component

01:16:29,199 --> 01:16:35,199
and also expose this somewhere and b

01:16:33,600 --> 01:16:36,800
the tricky thing is what happens if you

01:16:35,199 --> 01:16:39,760
want to be reactive what is

01:16:36,800 --> 01:16:41,600
if the email address changes um if you

01:16:39,760 --> 01:16:42,880
have it if you invoke the method from a

01:16:41,600 --> 01:16:45,120
constructor

01:16:42,880 --> 01:16:46,960
this will not work very nicely you can

01:16:45,120 --> 01:16:50,960
then use something like the dip

01:16:46,960 --> 01:16:53,760
update um helper in your template but

01:16:50,960 --> 01:16:54,560
this is also kind of a heck really and

01:16:53,760 --> 01:16:57,360
not

01:16:54,560 --> 01:16:58,159
a nicely reactive solution and with the

01:16:57,360 --> 01:16:59,520
resource

01:16:58,159 --> 01:17:02,320
it's really pretty clear what's

01:16:59,520 --> 01:17:04,239
happening really easy to follow

01:17:02,320 --> 01:17:06,239
and the added benefit is also you can

01:17:04,239 --> 01:17:08,080
also use them in

01:17:06,239 --> 01:17:09,840
not only in a template but you can also

01:17:08,080 --> 01:17:12,719
use them in a javascript file

01:17:09,840 --> 01:17:13,280
there is an add use decorator that you

01:17:12,719 --> 01:17:14,719
can use

01:17:13,280 --> 01:17:16,560
and then you can also reference the

01:17:14,719 --> 01:17:20,000
value normally in your

01:17:16,560 --> 01:17:24,080
component and it will react to

01:17:20,000 --> 01:17:25,360
any changes in a reasonably followable

01:17:24,080 --> 01:17:28,960
way

01:17:25,360 --> 01:17:31,600
and basically with these two things

01:17:28,960 --> 01:17:32,239
is what i would be consider our thin

01:17:31,600 --> 01:17:35,360
layer

01:17:32,239 --> 01:17:38,239
on top of graphql it works well for us

01:17:35,360 --> 01:17:40,560
it might not work well for everyone

01:17:38,239 --> 01:17:42,239
but i hope there was maybe something

01:17:40,560 --> 01:17:45,679
interesting in there for any

01:17:42,239 --> 01:17:46,320
of you i will also share the slides with

01:17:45,679 --> 01:17:48,080
the code

01:17:46,320 --> 01:17:49,840
um you can look at it later if you want

01:17:48,080 --> 01:17:51,040
to if you're interested in some of the

01:17:49,840 --> 01:17:53,840
code maybe

01:17:51,040 --> 01:17:54,320
and yeah if you have any questions feel

01:17:53,840 --> 01:17:59,360
free

01:17:54,320 --> 01:18:01,040
to reach out

01:17:59,360 --> 01:18:02,640
yeah awesome thank you so much for this

01:18:01,040 --> 01:18:05,840
awesome talk and

01:18:02,640 --> 01:18:08,560
are there already some questions here

01:18:05,840 --> 01:18:08,560
in the audience

01:18:08,960 --> 01:18:15,840
just one question uh regarding rest

01:18:12,000 --> 01:18:16,560
versus graphql um not sure why you are

01:18:15,840 --> 01:18:18,880
using that

01:18:16,560 --> 01:18:19,600
um if that addressed something or just

01:18:18,880 --> 01:18:24,159
because it was

01:18:19,600 --> 01:18:27,360
the just a nicer thing than rest right

01:18:24,159 --> 01:18:27,840
um does graphql provide any value on top

01:18:27,360 --> 01:18:30,800
of

01:18:27,840 --> 01:18:32,080
what ember data would have given you or

01:18:30,800 --> 01:18:33,679
is it just a new

01:18:32,080 --> 01:18:35,840
cool kit on the block that everybody

01:18:33,679 --> 01:18:38,400
wants to try

01:18:35,840 --> 01:18:40,000
so i would say for us the decision to

01:18:38,400 --> 01:18:43,679
use graphql for this project

01:18:40,000 --> 01:18:47,199
was two things one is we have been using

01:18:43,679 --> 01:18:50,239
a json api before but have been

01:18:47,199 --> 01:18:52,800
a bit i mean

01:18:50,239 --> 01:18:54,239
frustrated would be over stating it but

01:18:52,800 --> 01:18:55,760
there were some proposals that were

01:18:54,239 --> 01:18:58,560
really promising

01:18:55,760 --> 01:18:59,199
but they have been basically pending for

01:18:58,560 --> 01:19:02,640
years

01:18:59,199 --> 01:19:04,159
um like um

01:19:02,640 --> 01:19:05,920
what was it called like creating

01:19:04,159 --> 01:19:06,800
multiple records in one request and

01:19:05,920 --> 01:19:09,920
things like that

01:19:06,800 --> 01:19:12,800
which were quite important for us so we

01:19:09,920 --> 01:19:15,360
were kind of not feeling 100 percent

01:19:12,800 --> 01:19:17,600
sure about how quickly the progress

01:19:15,360 --> 01:19:20,560
would continue for json api that was

01:19:17,600 --> 01:19:22,800
one part um and the other thing is our

01:19:20,560 --> 01:19:25,760
application is very

01:19:22,800 --> 01:19:27,600
in many ways it's not that resource

01:19:25,760 --> 01:19:31,120
oriented we work a lot with

01:19:27,600 --> 01:19:34,480
kpi computations that happen on the

01:19:31,120 --> 01:19:34,840
server and you can model everything kind

01:19:34,480 --> 01:19:38,080
of

01:19:34,840 --> 01:19:41,440
with rest but

01:19:38,080 --> 01:19:44,560
for us it often felt a bit hacky to

01:19:41,440 --> 01:19:46,239
kind of make up resources that are

01:19:44,560 --> 01:19:48,560
kind of grouped and have sort of

01:19:46,239 --> 01:19:51,360
relationships and things like this

01:19:48,560 --> 01:19:51,760
it felt cleaner for us if we say okay we

01:19:51,360 --> 01:19:55,760
have

01:19:51,760 --> 01:19:57,440
graphql we can for every request define

01:19:55,760 --> 01:19:58,880
which things we want because it's also

01:19:57,440 --> 01:20:02,560
always a bit tricky

01:19:58,880 --> 01:20:04,560
sometimes i want um a single kpi

01:20:02,560 --> 01:20:05,760
sometimes i want in the same request to

01:20:04,560 --> 01:20:08,560
maybe include some

01:20:05,760 --> 01:20:09,360
other data and graphql makes this very

01:20:08,560 --> 01:20:12,719
easy

01:20:09,360 --> 01:20:14,560
so i have to say i have been quite happy

01:20:12,719 --> 01:20:17,600
with it

01:20:14,560 --> 01:20:19,760
but yeah it's

01:20:17,600 --> 01:20:21,520
i don't think there's anything it's not

01:20:19,760 --> 01:20:22,480
necessarily better than rest it really

01:20:21,520 --> 01:20:25,920
depends on

01:20:22,480 --> 01:20:33,840
your application or how your data is

01:20:25,920 --> 01:20:33,840
made up makes sense thanks for watching

01:20:35,920 --> 01:20:39,760
uh yeah here in the chat already people

01:20:38,080 --> 01:20:41,520
commented that's like a really cool

01:20:39,760 --> 01:20:42,800
uh cash publication that you also have

01:20:41,520 --> 01:20:44,320
like for the project

01:20:42,800 --> 01:20:46,800
and i was also wondering in this regard

01:20:44,320 --> 01:20:48,639
like do you already see some more

01:20:46,800 --> 01:20:50,719
things that you want to add to this kind

01:20:48,639 --> 01:20:52,000
of like implementation right now or do

01:20:50,719 --> 01:20:53,040
you think you're already kind of like

01:20:52,000 --> 01:20:57,280
good to go

01:20:53,040 --> 01:20:59,199
with what you have i have been

01:20:57,280 --> 01:21:01,440
thinking about kind of extracting this

01:20:59,199 --> 01:21:05,120
into and it on at some point

01:21:01,440 --> 01:21:07,760
um it has been in flux a bit and

01:21:05,120 --> 01:21:09,120
also in parts is a bit specific maybe to

01:21:07,760 --> 01:21:12,080
our application so

01:21:09,120 --> 01:21:13,600
we will need to see how to kind of

01:21:12,080 --> 01:21:16,719
extract this out

01:21:13,600 --> 01:21:18,000
but i figured it's not necessarily only

01:21:16,719 --> 01:21:22,239
specific to our

01:21:18,000 --> 01:21:23,840
application i know that glimmer apollo

01:21:22,239 --> 01:21:25,920
that i shortly mentioned in the

01:21:23,840 --> 01:21:26,639
beginning i have to be honest just

01:21:25,920 --> 01:21:30,000
skimped

01:21:26,639 --> 01:21:32,159
the me quickly it seems very nicely

01:21:30,000 --> 01:21:35,520
documented and that is built on top of

01:21:32,159 --> 01:21:38,320
resources by design which i think is a

01:21:35,520 --> 01:21:40,000
cool concept

01:21:38,320 --> 01:21:41,520
you could use the same caching strategy

01:21:40,000 --> 01:21:43,840
there for sure because that's just

01:21:41,520 --> 01:21:46,239
normal apollo caching stuff

01:21:43,840 --> 01:21:47,840
so yeah i think my next step would

01:21:46,239 --> 01:21:50,080
probably be to try to

01:21:47,840 --> 01:21:51,679
extract this into an addon make it

01:21:50,080 --> 01:21:54,840
shareable possibly

01:21:51,679 --> 01:21:57,120
and then see where it goes from there

01:21:54,840 --> 01:22:00,159
basically

01:21:57,120 --> 01:22:00,159
yeah gotcha thank you

01:22:04,639 --> 01:22:09,199
any more questions here in the group if

01:22:07,440 --> 01:22:11,840
you want so free to use the chat if you

01:22:09,199 --> 01:22:11,840
want to post something

01:22:16,239 --> 01:22:20,239
i think i can ask one question up on

01:22:19,120 --> 01:22:22,639
people

01:22:20,239 --> 01:22:24,239
i was wondering the caching storage is

01:22:22,639 --> 01:22:26,080
quite interesting i was wondering about

01:22:24,239 --> 01:22:29,120
how that affects the testing so

01:22:26,080 --> 01:22:30,320
how would i test that the data is never

01:22:29,120 --> 01:22:33,920
stale

01:22:30,320 --> 01:22:36,239
you should have this caching mechanism

01:22:33,920 --> 01:22:38,239
actually the nice thing about this is

01:22:36,239 --> 01:22:39,360
that it you can really just test it in

01:22:38,239 --> 01:22:42,560
any integration

01:22:39,360 --> 01:22:44,560
or application test by um

01:22:42,560 --> 01:22:46,480
if you use something like msc live

01:22:44,560 --> 01:22:49,679
mirage or something like that

01:22:46,480 --> 01:22:50,560
if you change any state in whatever you

01:22:49,679 --> 01:22:53,760
use as your

01:22:50,560 --> 01:22:56,719
mock api and

01:22:53,760 --> 01:22:57,920
then you should be able to see if the

01:22:56,719 --> 01:23:00,480
data that you actually have your

01:22:57,920 --> 01:23:03,360
application has updated correctly

01:23:00,480 --> 01:23:05,360
because if you have not set up something

01:23:03,360 --> 01:23:09,679
for example the common cases

01:23:05,360 --> 01:23:11,120
i have a creation form

01:23:09,679 --> 01:23:13,520
so i have a creation form for some

01:23:11,120 --> 01:23:14,880
entity and then after that i'm sent back

01:23:13,520 --> 01:23:16,560
to the overview page

01:23:14,880 --> 01:23:18,480
i want to make sure that the thing that

01:23:16,560 --> 01:23:20,800
i've just created is actually

01:23:18,480 --> 01:23:21,840
on this overview page because if not it

01:23:20,800 --> 01:23:25,120
would mean that

01:23:21,840 --> 01:23:25,760
my list query was cached and has not

01:23:25,120 --> 01:23:28,000
been

01:23:25,760 --> 01:23:29,600
hit the network again and this is

01:23:28,000 --> 01:23:31,199
actually quite straightforward to test

01:23:29,600 --> 01:23:34,719
by really just checking

01:23:31,199 --> 01:23:38,080
is this on the page or not

01:23:34,719 --> 01:23:38,080
so that works quite well

01:23:38,400 --> 01:23:42,800
and for feedback uh you showed us a

01:23:41,040 --> 01:23:43,520
static value for the cache seconds and i

01:23:42,800 --> 01:23:45,840
was wondering

01:23:43,520 --> 01:23:46,800
what i thought of dynamic value so for

01:23:45,840 --> 01:23:49,280
example there might be

01:23:46,800 --> 01:23:50,480
certain hours already know from

01:23:49,280 --> 01:23:52,480
experience uh

01:23:50,480 --> 01:23:54,719
people want to make more requests would

01:23:52,480 --> 01:23:57,600
this be possible

01:23:54,719 --> 01:23:58,560
it's definitely possible i mean the the

01:23:57,600 --> 01:24:00,480
function to check

01:23:58,560 --> 01:24:02,719
if the cache should be used is quite

01:24:00,480 --> 01:24:05,679
primitive at the end of the day

01:24:02,719 --> 01:24:06,560
you could add any number of variables in

01:24:05,679 --> 01:24:09,199
there to

01:24:06,560 --> 01:24:09,840
check if you want to skip the cache or

01:24:09,199 --> 01:24:11,360
not

01:24:09,840 --> 01:24:12,960
so it would definitely be possible to

01:24:11,360 --> 01:24:16,800
also introduce

01:24:12,960 --> 01:24:20,480
other like variables to define if you

01:24:16,800 --> 01:24:22,800
want the cache to be cleared or not

01:24:20,480 --> 01:24:22,800
thank you

01:24:27,920 --> 01:24:31,840
any more questions from the group

01:24:35,199 --> 01:24:38,480
if there's none then yeah thank you

01:24:36,719 --> 01:24:41,520
again so much for the successful talk

01:24:38,480 --> 01:24:43,360
um i learned a lot about like um yeah

01:24:41,520 --> 01:24:44,960
first of all like if i get used to this

01:24:43,360 --> 01:24:46,639
didn't know about this before actually

01:24:44,960 --> 01:24:48,080
also like some people also

01:24:46,639 --> 01:24:49,440
wrote in the chat that they are working

01:24:48,080 --> 01:24:50,719
with it right now so this sounds like

01:24:49,440 --> 01:24:52,159
really cool and also

01:24:50,719 --> 01:24:54,159
what you're doing like a fab school with

01:24:52,159 --> 01:24:57,840
it so yeah thank you again

01:24:54,159 --> 01:25:01,199
and um and with this said

01:24:57,840 --> 01:25:01,920
um let's get to our final talk for

01:25:01,199 --> 01:25:04,400
tonight

01:25:01,920 --> 01:25:06,400
uh very interesting talk also about like

01:25:04,400 --> 01:25:07,520
reactivity and reflective systems in

01:25:06,400 --> 01:25:10,719
emberjs

01:25:07,520 --> 01:25:12,560
by michael klein and clements muller so

01:25:10,719 --> 01:25:15,440
give it a round of applause and looking

01:25:12,560 --> 01:25:15,440
forward to this talk

01:25:18,960 --> 01:25:24,400
hey hey um yeah so welcome to our talk

01:25:22,159 --> 01:25:26,320
on the development of reactive systems

01:25:24,400 --> 01:25:28,800
with emerges and

01:25:26,320 --> 01:25:29,360
the goal of the talk is nothing less

01:25:28,800 --> 01:25:31,199
than to

01:25:29,360 --> 01:25:34,000
revolutionize the way that you think

01:25:31,199 --> 01:25:38,000
about application architecture with emma

01:25:34,000 --> 01:25:40,000
suggest for everybody who's

01:25:38,000 --> 01:25:42,000
who's waiting for code samples please

01:25:40,000 --> 01:25:42,480
don't be sad there won't be code samples

01:25:42,000 --> 01:25:45,760
in

01:25:42,480 --> 01:25:46,320
the talk but um everything that we tell

01:25:45,760 --> 01:25:49,199
you

01:25:46,320 --> 01:25:51,679
um can result in executable code but

01:25:49,199 --> 01:25:54,000
this is not the main focus of this talk

01:25:51,679 --> 01:25:54,719
um the focus of this talk is the mental

01:25:54,000 --> 01:25:57,679
model

01:25:54,719 --> 01:25:59,120
but rest assured you can actually use

01:25:57,679 --> 01:26:01,840
this directly in your code

01:25:59,120 --> 01:26:02,960
and the end of the talk will include

01:26:01,840 --> 01:26:05,120
some links

01:26:02,960 --> 01:26:07,360
that point you into the right direction

01:26:05,120 --> 01:26:08,960
also clemens and i are super excited

01:26:07,360 --> 01:26:09,600
about the concept that we're going to

01:26:08,960 --> 01:26:13,679
present

01:26:09,600 --> 01:26:17,199
so um always feel free to just

01:26:13,679 --> 01:26:19,280
ping us on twitter ping us on discord or

01:26:17,199 --> 01:26:20,480
shoot us an email we're super happy to

01:26:19,280 --> 01:26:24,560
and excited to

01:26:20,480 --> 01:26:27,760
help you out with this concept um who

01:26:24,560 --> 01:26:30,400
whoop who are we and um

01:26:27,760 --> 01:26:30,880
why should you care what we have to say

01:26:30,400 --> 01:26:33,920
um

01:26:30,880 --> 01:26:34,960
we are i'm michael and my co-presenter

01:26:33,920 --> 01:26:37,679
is called clemens

01:26:34,960 --> 01:26:40,800
you can find us on the internet via our

01:26:37,679 --> 01:26:44,000
handle level boss mike and uh pangradz

01:26:40,800 --> 01:26:46,719
we've been doing mr.js development for

01:26:44,000 --> 01:26:48,239
basically since emma was a thing we

01:26:46,719 --> 01:26:51,679
philosophy

01:26:48,239 --> 01:26:53,199
over amber a lot um and quite honestly

01:26:51,679 --> 01:26:54,560
we can't remember who started out

01:26:53,199 --> 01:26:56,480
we didn't know each other back then but

01:26:54,560 --> 01:26:57,679
um yeah we basically have been using

01:26:56,480 --> 01:26:59,679
emma

01:26:57,679 --> 01:27:01,679
since it was a thing and before that we

01:26:59,679 --> 01:27:04,880
were interested in spot core

01:27:01,679 --> 01:27:07,040
um because we have because we have

01:27:04,880 --> 01:27:08,480
um so much experience building apps with

01:27:07,040 --> 01:27:11,120
emberjs we also run

01:27:08,480 --> 01:27:12,000
an amberjs consultancy called effective

01:27:11,120 --> 01:27:13,840
amber

01:27:12,000 --> 01:27:15,360
where we can help you and your team

01:27:13,840 --> 01:27:17,280
build with ember gs

01:27:15,360 --> 01:27:18,480
um even if you're not interested in

01:27:17,280 --> 01:27:20,480
getting help

01:27:18,480 --> 01:27:21,840
from a consultancy and you might also be

01:27:20,480 --> 01:27:24,000
interested just

01:27:21,840 --> 01:27:25,600
looking at our homepage because there's

01:27:24,000 --> 01:27:26,560
a blog and there might be some

01:27:25,600 --> 01:27:30,719
interesting

01:27:26,560 --> 01:27:34,320
topics discussed there as well

01:27:30,719 --> 01:27:36,320
but to keep um things moving forward

01:27:34,320 --> 01:27:37,679
um before actually telling you about the

01:27:36,320 --> 01:27:41,760
concept um

01:27:37,679 --> 01:27:44,320
that the reactive systems concept

01:27:41,760 --> 01:27:46,239
um i think it makes sense to actually

01:27:44,320 --> 01:27:47,760
start from the beginning and explain to

01:27:46,239 --> 01:27:48,960
you our journey how we came to this

01:27:47,760 --> 01:27:51,440
concept right

01:27:48,960 --> 01:27:53,280
um although we have had a lot of

01:27:51,440 --> 01:27:54,560
experience with ember gs

01:27:53,280 --> 01:27:56,239
working with emojis before and

01:27:54,560 --> 01:27:56,719
implementing a lot of applications with

01:27:56,239 --> 01:27:59,199
it

01:27:56,719 --> 01:28:00,159
um sometimes with client-side

01:27:59,199 --> 01:28:02,320
development

01:28:00,159 --> 01:28:03,440
although we are using the best framework

01:28:02,320 --> 01:28:04,719
which we are still

01:28:03,440 --> 01:28:06,639
confident that ember is the best

01:28:04,719 --> 01:28:08,239
framework um

01:28:06,639 --> 01:28:10,080
we have some experience with other

01:28:08,239 --> 01:28:12,800
frameworks as well but

01:28:10,080 --> 01:28:14,639
in our experience things just get more

01:28:12,800 --> 01:28:17,440
complicated if you don't use ember

01:28:14,639 --> 01:28:19,280
right so um although we had so much

01:28:17,440 --> 01:28:21,280
experience oftentimes we ended up in

01:28:19,280 --> 01:28:22,880
situations where stuff just hit hard

01:28:21,280 --> 01:28:24,880
right and client side application

01:28:22,880 --> 01:28:26,480
development felt hard to us

01:28:24,880 --> 01:28:28,000
at some points especially if you're

01:28:26,480 --> 01:28:31,760
doing some more intricate stuff

01:28:28,000 --> 01:28:32,639
like um offline data or um collaborative

01:28:31,760 --> 01:28:35,440
editors

01:28:32,639 --> 01:28:36,159
um stuff like that but even then if

01:28:35,440 --> 01:28:38,320
you're not

01:28:36,159 --> 01:28:40,159
implementing stuff like that and even if

01:28:38,320 --> 01:28:41,040
you're only just dealing with some stuff

01:28:40,159 --> 01:28:44,000
like

01:28:41,040 --> 01:28:45,600
drop downs um custom drop downs or type

01:28:44,000 --> 01:28:48,239
of head components stuff like that

01:28:45,600 --> 01:28:50,400
and you oftentimes end up in situations

01:28:48,239 --> 01:28:52,960
where things get complicated quickly

01:28:50,400 --> 01:28:54,239
and we couldn't really tell why that was

01:28:52,960 --> 01:28:57,760
the case

01:28:54,239 --> 01:29:00,480
um so we started thinking about that

01:28:57,760 --> 01:29:01,600
uh more thoroughly and if you think

01:29:00,480 --> 01:29:04,080
about it

01:29:01,600 --> 01:29:05,199
um from an architecture perspective

01:29:04,080 --> 01:29:07,199
mr.js

01:29:05,199 --> 01:29:08,800
on top of its convention that it gives

01:29:07,199 --> 01:29:11,120
you amber cli

01:29:08,800 --> 01:29:12,320
the the add-on ecosystem and also the

01:29:11,120 --> 01:29:15,120
ideas that it has about

01:29:12,320 --> 01:29:17,199
routing and it really doesn't provide

01:29:15,120 --> 01:29:19,520
developers with too much guidance

01:29:17,199 --> 01:29:22,239
about your application architecture

01:29:19,520 --> 01:29:25,520
right the only paradigm that

01:29:22,239 --> 01:29:27,040
you tend to hear a lot and

01:29:25,520 --> 01:29:28,960
what you always tell people when they

01:29:27,040 --> 01:29:29,760
ask you how to build stuff and we always

01:29:28,960 --> 01:29:31,600
tell them hey

01:29:29,760 --> 01:29:33,199
yeah just used data down actions up

01:29:31,600 --> 01:29:36,080
right because that's basically the only

01:29:33,199 --> 01:29:39,360
architecture paradigm that we have

01:29:36,080 --> 01:29:42,000
and um the

01:29:39,360 --> 01:29:42,719
the idea can be summed up pretty simply

01:29:42,000 --> 01:29:45,120
um

01:29:42,719 --> 01:29:45,760
so when in data down actions up you have

01:29:45,120 --> 01:29:48,880
some kind of

01:29:45,760 --> 01:29:52,400
application state whatever that may mean

01:29:48,880 --> 01:29:54,080
um and you pass down that data or state

01:29:52,400 --> 01:29:55,520
into the template layer and the glimmer

01:29:54,080 --> 01:29:57,840
rendering

01:29:55,520 --> 01:29:58,800
virtual machine then takes care of

01:29:57,840 --> 01:30:00,800
rendering

01:29:58,800 --> 01:30:02,560
the template for you and basically spits

01:30:00,800 --> 01:30:04,000
out some html

01:30:02,560 --> 01:30:06,239
and that combines the data that you

01:30:04,000 --> 01:30:09,600
passed down and the

01:30:06,239 --> 01:30:11,520
template that you created and then

01:30:09,600 --> 01:30:12,719
whenever you want to change something

01:30:11,520 --> 01:30:14,560
in your application or you want to

01:30:12,719 --> 01:30:16,639
enable users to change something

01:30:14,560 --> 01:30:18,000
you send an action up right doesn't

01:30:16,639 --> 01:30:20,480
really matter how

01:30:18,000 --> 01:30:21,440
how to do that because in the back in

01:30:20,480 --> 01:30:24,960
the days we had

01:30:21,440 --> 01:30:26,480
um we really had action bubbling but um

01:30:24,960 --> 01:30:27,920
in the end nowadays it's a little bit

01:30:26,480 --> 01:30:28,880
different because we really pass down

01:30:27,920 --> 01:30:32,320
action handlers and

01:30:28,880 --> 01:30:33,600
and call them directly but in in essence

01:30:32,320 --> 01:30:35,199
you pass an action up

01:30:33,600 --> 01:30:36,880
and then some action handler does

01:30:35,199 --> 01:30:40,320
something and updates the state

01:30:36,880 --> 01:30:43,440
right um we can't really tell you

01:30:40,320 --> 01:30:45,280
where this originated from but we have

01:30:43,440 --> 01:30:48,320
an idea that this originated

01:30:45,280 --> 01:30:49,840
originally in the react ecosystem or at

01:30:48,320 --> 01:30:51,520
least that's what we heard

01:30:49,840 --> 01:30:52,960
back in the day when when when this

01:30:51,520 --> 01:30:54,080
pattern was introduced into the

01:30:52,960 --> 01:30:56,239
ecosystem

01:30:54,080 --> 01:30:58,000
um before that we had to weigh data

01:30:56,239 --> 01:30:59,760
bindings and observers and this was

01:30:58,000 --> 01:31:02,639
obviously a better solution

01:30:59,760 --> 01:31:04,639
for a sane data flow and then the

01:31:02,639 --> 01:31:08,400
two-way data bindings and the observers

01:31:04,639 --> 01:31:09,760
and um this was like it was introduced

01:31:08,400 --> 01:31:11,760
to the ecosystem it's like yeah this is

01:31:09,760 --> 01:31:13,679
the what the react peoples are doing

01:31:11,760 --> 01:31:15,360
react people are doing it's working much

01:31:13,679 --> 01:31:18,000
better than what we're doing so

01:31:15,360 --> 01:31:19,040
basically let's switch to that and um

01:31:18,000 --> 01:31:21,679
that's fine and all

01:31:19,040 --> 01:31:21,679
but um

01:31:22,400 --> 01:31:26,639
and and that's fine and it's nice for

01:31:25,120 --> 01:31:27,600
data flow and if you take that to the

01:31:26,639 --> 01:31:29,840
extreme

01:31:27,600 --> 01:31:31,920
basically consider every your entire

01:31:29,840 --> 01:31:35,679
application and with that paradigm

01:31:31,920 --> 01:31:36,080
you end up with a um with with the idea

01:31:35,679 --> 01:31:37,920
of

01:31:36,080 --> 01:31:39,199
your application being a black box right

01:31:37,920 --> 01:31:41,440
that takes in

01:31:39,199 --> 01:31:42,800
the state input and then transforms it

01:31:41,440 --> 01:31:46,159
in some kind

01:31:42,800 --> 01:31:48,320
uh some some kind of form and then it

01:31:46,159 --> 01:31:49,840
spits out an html representation which

01:31:48,320 --> 01:31:51,280
is basically your ui

01:31:49,840 --> 01:31:53,440
app that you want to present to your

01:31:51,280 --> 01:31:55,600
users and if you think about it that's

01:31:53,440 --> 01:31:56,400
pretty much a back-end view of the world

01:31:55,600 --> 01:32:00,400
right it's not

01:31:56,400 --> 01:32:02,080
that different to um to what

01:32:00,400 --> 01:32:04,080
we're doing with server-side rendering

01:32:02,080 --> 01:32:04,719
we're just using inputs transforming

01:32:04,080 --> 01:32:06,639
them

01:32:04,719 --> 01:32:09,199
in a black box and then splitting out

01:32:06,639 --> 01:32:10,840
outputs which in our case is an html

01:32:09,199 --> 01:32:12,639
representation that gets rendered in the

01:32:10,840 --> 01:32:14,320
browser

01:32:12,639 --> 01:32:16,400
and the nice thing about this paradigm

01:32:14,320 --> 01:32:17,280
is that it's makes you sound super smart

01:32:16,400 --> 01:32:19,840
when you um

01:32:17,280 --> 01:32:20,960
talk about it um and it sounds very very

01:32:19,840 --> 01:32:23,679
elegant right

01:32:20,960 --> 01:32:24,560
elegant right it's basically you your

01:32:23,679 --> 01:32:26,400
application

01:32:24,560 --> 01:32:28,560
is a function over the state that you

01:32:26,400 --> 01:32:32,000
want to show to your users and

01:32:28,560 --> 01:32:34,719
the result of that is your ui um

01:32:32,000 --> 01:32:36,080
unfortunately when clemens and i were

01:32:34,719 --> 01:32:39,360
discussing this

01:32:36,080 --> 01:32:41,600
we realized that this sounds super cool

01:32:39,360 --> 01:32:44,560
and it works if you think about

01:32:41,600 --> 01:32:46,960
presentational components

01:32:44,560 --> 01:32:48,480
but it doesn't really address the

01:32:46,960 --> 01:32:49,120
complexity that is client-side

01:32:48,480 --> 01:32:52,560
development

01:32:49,120 --> 01:32:54,400
right because if you think about it the

01:32:52,560 --> 01:32:56,080
complexity when developing images

01:32:54,400 --> 01:32:58,880
applications really doesn't lie

01:32:56,080 --> 01:33:00,239
in the passing down data to some kind of

01:32:58,880 --> 01:33:02,480
template layer and then

01:33:00,239 --> 01:33:03,520
having the glimmer vm re-render for you

01:33:02,480 --> 01:33:05,679
because

01:33:03,520 --> 01:33:07,280
glimmer does that for you automatically

01:33:05,679 --> 01:33:08,480
and also the complexity doesn't really

01:33:07,280 --> 01:33:11,520
lie in

01:33:08,480 --> 01:33:12,400
hooking up event listeners and then

01:33:11,520 --> 01:33:14,560
firing at

01:33:12,400 --> 01:33:15,760
actions when somebody somebody does

01:33:14,560 --> 01:33:16,800
something in your application like

01:33:15,760 --> 01:33:20,080
clicking a button

01:33:16,800 --> 01:33:22,560
the actual complexity lies in the

01:33:20,080 --> 01:33:24,000
squiggly part over there not a straight

01:33:22,560 --> 01:33:26,800
error like we had before but

01:33:24,000 --> 01:33:28,560
really the squeaky part where you um you

01:33:26,800 --> 01:33:30,639
actually need to do something

01:33:28,560 --> 01:33:32,159
in the action handlers right and that's

01:33:30,639 --> 01:33:35,520
the complex part

01:33:32,159 --> 01:33:38,000
um at some point you actually need to do

01:33:35,520 --> 01:33:39,760
things and you actually want to update

01:33:38,000 --> 01:33:41,280
the state but updating the state isn't

01:33:39,760 --> 01:33:42,719
really trivial because

01:33:41,280 --> 01:33:44,400
in client-side application development

01:33:42,719 --> 01:33:48,000
just so many things can happen

01:33:44,400 --> 01:33:51,040
at the same time right um when francesco

01:33:48,000 --> 01:33:54,159
presented this idea of resources

01:33:51,040 --> 01:33:57,280
to us earlier and this is a nice idea so

01:33:54,159 --> 01:33:59,920
basically yes you could create a

01:33:57,280 --> 01:34:01,440
more solid solid architecture where you

01:33:59,920 --> 01:34:03,520
create these resources

01:34:01,440 --> 01:34:05,280
and then these resources take care of

01:34:03,520 --> 01:34:08,080
updating stuff for you or you just

01:34:05,280 --> 01:34:08,639
pull push pull stuff out into classes

01:34:08,080 --> 01:34:10,800
and

01:34:08,639 --> 01:34:12,719
these things then update but the actual

01:34:10,800 --> 01:34:14,719
complexity of just figuring out what

01:34:12,719 --> 01:34:17,600
needs to be done and what is happening

01:34:14,719 --> 01:34:18,560
at this current place and time isn't

01:34:17,600 --> 01:34:20,480
trivial

01:34:18,560 --> 01:34:23,679
and this is the typical stuff that you

01:34:20,480 --> 01:34:26,400
see even with the most

01:34:23,679 --> 01:34:28,960
even some most simplest things like an

01:34:26,400 --> 01:34:30,480
async button component that you

01:34:28,960 --> 01:34:32,239
that triggers an async request when

01:34:30,480 --> 01:34:34,400
pressed but you actually need to

01:34:32,239 --> 01:34:36,480
manually keep track of the fact that hey

01:34:34,400 --> 01:34:38,480
the user actually has clicked the button

01:34:36,480 --> 01:34:41,360
already and we don't want to se

01:34:38,480 --> 01:34:42,080
trigger the same async request again um

01:34:41,360 --> 01:34:43,760
while

01:34:42,080 --> 01:34:46,000
uh request is already in flight or you

01:34:43,760 --> 01:34:48,880
actually might want to do that and

01:34:46,000 --> 01:34:50,320
yeah you you it's your job as the

01:34:48,880 --> 01:34:51,520
application developer to keep track of

01:34:50,320 --> 01:34:54,560
that and that just gets

01:34:51,520 --> 01:34:58,159
overwhelming very very quickly

01:34:54,560 --> 01:35:00,000
and um the the thing is that

01:34:58,159 --> 01:35:01,520
data down actions up really is a nice

01:35:00,000 --> 01:35:04,400
pattern right it sounds cool

01:35:01,520 --> 01:35:06,639
um and especially the react people um

01:35:04,400 --> 01:35:10,480
the react ecosystem basically tells you

01:35:06,639 --> 01:35:12,719
um hey there's no issue here um you just

01:35:10,480 --> 01:35:13,760
really need to embrace this pattern

01:35:12,719 --> 01:35:17,119
because your

01:35:13,760 --> 01:35:19,679
ui is the state is the is

01:35:17,119 --> 01:35:20,320
the ui is the result of a function over

01:35:19,679 --> 01:35:22,320
state

01:35:20,320 --> 01:35:23,679
in time right this is literally what

01:35:22,320 --> 01:35:27,440
react is telling you

01:35:23,679 --> 01:35:29,280
and basically what what most people

01:35:27,440 --> 01:35:30,880
tend to tell you is that yeah some

01:35:29,280 --> 01:35:34,080
somehow this works

01:35:30,880 --> 01:35:36,400
um the and this is not particular

01:35:34,080 --> 01:35:38,400
hard to do with with ember or react or

01:35:36,400 --> 01:35:40,159
swelt or view it's all the same with

01:35:38,400 --> 01:35:41,600
all client-side frameworks all of the

01:35:40,159 --> 01:35:43,360
climate frameworks has

01:35:41,600 --> 01:35:45,920
have embraced this pattern right passing

01:35:43,360 --> 01:35:47,360
the state down and then

01:35:45,920 --> 01:35:49,440
triggering actions up when you want to

01:35:47,360 --> 01:35:52,560
change the state

01:35:49,440 --> 01:35:53,920
um so this is a nice view and elegant

01:35:52,560 --> 01:35:56,320
view but

01:35:53,920 --> 01:35:58,400
does it really work right this is also a

01:35:56,320 --> 01:36:01,440
popular opinion if you

01:35:58,400 --> 01:36:03,440
ask people about or basically just tell

01:36:01,440 --> 01:36:05,440
people hey i'm a client-side developer

01:36:03,440 --> 01:36:07,119
things are hard i'm not entirely sure

01:36:05,440 --> 01:36:09,440
why um

01:36:07,119 --> 01:36:11,280
do you have an idea and the the stuff

01:36:09,440 --> 01:36:12,719
that people tend to tell you especially

01:36:11,280 --> 01:36:14,639
back-end developers are like

01:36:12,719 --> 01:36:16,080
yeah um no it's really this

01:36:14,639 --> 01:36:17,760
transformational thing you just need to

01:36:16,080 --> 01:36:19,280
do that over and over again

01:36:17,760 --> 01:36:22,159
you need to be able to render all the

01:36:19,280 --> 01:36:22,960
time and it's just hard for you because

01:36:22,159 --> 01:36:24,960
um

01:36:22,960 --> 01:36:27,040
the client-side developers are aren't

01:36:24,960 --> 01:36:28,480
that bright um the real

01:36:27,040 --> 01:36:30,239
programming happens in the back-end

01:36:28,480 --> 01:36:31,840
layer and we

01:36:30,239 --> 01:36:33,679
basically don't know what you're

01:36:31,840 --> 01:36:34,880
complaining about it's really not that

01:36:33,679 --> 01:36:37,360
hard um

01:36:34,880 --> 01:36:38,000
client-side developers might just be not

01:36:37,360 --> 01:36:40,639
bright enough

01:36:38,000 --> 01:36:42,080
to solve this issue um clemens and i

01:36:40,639 --> 01:36:44,400
thought about that a little bit and we

01:36:42,080 --> 01:36:46,639
didn't feel like the amber js ecosystem

01:36:44,400 --> 01:36:49,760
was super stupid or we were super stupid

01:36:46,639 --> 01:36:52,400
so we tried to look into the um little

01:36:49,760 --> 01:36:54,239
literature um and basically try to find

01:36:52,400 --> 01:36:55,440
out if anybody had encountered this

01:36:54,239 --> 01:36:58,320
issue before

01:36:55,440 --> 01:37:00,320
and might have proposed some solutions

01:36:58,320 --> 01:37:03,520
to this right

01:37:00,320 --> 01:37:05,440
and we were lucky while skimming through

01:37:03,520 --> 01:37:06,960
the literature we found this paper and

01:37:05,440 --> 01:37:08,239
this paper is called on the development

01:37:06,960 --> 01:37:10,239
of reactive systems

01:37:08,239 --> 01:37:11,520
and because it has reactive in the name

01:37:10,239 --> 01:37:14,560
um we quite

01:37:11,520 --> 01:37:16,800
we got quite curious right reactivity is

01:37:14,560 --> 01:37:18,239
um all the things that you hear when

01:37:16,800 --> 01:37:18,960
talking discussing client-side

01:37:18,239 --> 01:37:21,679
development

01:37:18,960 --> 01:37:23,199
so that sounded relevant to our interest

01:37:21,679 --> 01:37:26,000
and um

01:37:23,199 --> 01:37:27,440
reading through this paper the the

01:37:26,000 --> 01:37:30,880
situation that the author david

01:37:27,440 --> 01:37:33,440
ray describes uh back in 1985

01:37:30,880 --> 01:37:34,400
um really sounded similar familiar to us

01:37:33,440 --> 01:37:36,800
right

01:37:34,400 --> 01:37:38,239
um david really described in in this

01:37:36,800 --> 01:37:40,560
paper describes

01:37:38,239 --> 01:37:42,080
the the fact that he feels like there

01:37:40,560 --> 01:37:43,119
are really two types of different

01:37:42,080 --> 01:37:46,080
systems

01:37:43,119 --> 01:37:46,880
um and one of them is much much harder

01:37:46,080 --> 01:37:50,239
to implement

01:37:46,880 --> 01:37:50,639
than the other one and the two two types

01:37:50,239 --> 01:37:52,960
of

01:37:50,639 --> 01:37:54,480
systems that he's talking about is a

01:37:52,960 --> 01:37:56,800
transformational systems

01:37:54,480 --> 01:37:58,480
and b uh reactive systems

01:37:56,800 --> 01:38:00,080
transformational systems we already saw

01:37:58,480 --> 01:38:04,000
that that's basically this

01:38:00,080 --> 01:38:07,280
f over state equals ui um portion

01:38:04,000 --> 01:38:09,040
and um the then he goes on and

01:38:07,280 --> 01:38:10,719
discusses what he feels like is a

01:38:09,040 --> 01:38:12,159
reactive system right and this sounds

01:38:10,719 --> 01:38:13,360
very very familiar if you come from the

01:38:12,159 --> 01:38:15,840
client side

01:38:13,360 --> 01:38:16,400
he defines a reactive system of some

01:38:15,840 --> 01:38:19,440
kind of

01:38:16,400 --> 01:38:22,320
um state system that has

01:38:19,440 --> 01:38:22,960
stateful right it has state in itself

01:38:22,320 --> 01:38:24,960
and then

01:38:22,960 --> 01:38:27,280
um it continuously needs to react to

01:38:24,960 --> 01:38:29,040
internal and external events

01:38:27,280 --> 01:38:31,199
so if you're a front-end developer this

01:38:29,040 --> 01:38:35,600
sounds very very familiar to

01:38:31,199 --> 01:38:35,600
you and harrell argues that

01:38:36,080 --> 01:38:39,520
in contrast to the transformational

01:38:37,600 --> 01:38:41,440
systems a these are much much

01:38:39,520 --> 01:38:42,800
reactive systems are much much harder to

01:38:41,440 --> 01:38:44,080
implement and b

01:38:42,800 --> 01:38:46,080
they need to be modeled totally

01:38:44,080 --> 01:38:46,880
differently plus you actually have to

01:38:46,080 --> 01:38:49,520
have a

01:38:46,880 --> 01:38:51,119
completely different uh they're just a

01:38:49,520 --> 01:38:52,639
different set of system right so in

01:38:51,119 --> 01:38:54,320
contrast to transformational systems

01:38:52,639 --> 01:38:56,159
where you only have inputs

01:38:54,320 --> 01:38:57,920
and this black box that converts that to

01:38:56,159 --> 01:38:58,400
outputs you actually have a stateful

01:38:57,920 --> 01:39:01,040
system

01:38:58,400 --> 01:39:02,320
that basically needs to react to

01:39:01,040 --> 01:39:05,119
internal and inter

01:39:02,320 --> 01:39:07,119
external internal stimuli all the time

01:39:05,119 --> 01:39:10,639
also

01:39:07,119 --> 01:39:13,920
this kind of system needs to be able to

01:39:10,639 --> 01:39:15,600
respond to interrupts like high priority

01:39:13,920 --> 01:39:17,360
events for example if you're

01:39:15,600 --> 01:39:19,760
a client side developer you might have

01:39:17,360 --> 01:39:22,480
run into situations where the user

01:39:19,760 --> 01:39:24,320
did something in your application they

01:39:22,480 --> 01:39:25,440
tried to submit a form but now they are

01:39:24,320 --> 01:39:28,239
navigating away

01:39:25,440 --> 01:39:31,040
completely and you want to cancel the

01:39:28,239 --> 01:39:32,639
request or something like that right

01:39:31,040 --> 01:39:34,960
so you need to be able to respond to

01:39:32,639 --> 01:39:38,320
interrupts also

01:39:34,960 --> 01:39:40,400
the state of the system represents some

01:39:38,320 --> 01:39:42,960
kind of current mode that you're in

01:39:40,400 --> 01:39:44,239
and this mode depends heavily on the

01:39:42,960 --> 01:39:46,800
stuff that happened

01:39:44,239 --> 01:39:47,840
bef on operations that you did that

01:39:46,800 --> 01:39:49,520
occurred before

01:39:47,840 --> 01:39:51,040
the the current time state and time

01:39:49,520 --> 01:39:52,239
right um

01:39:51,040 --> 01:39:54,719
also a lot of things can happen in

01:39:52,239 --> 01:39:56,960
parallel so again

01:39:54,719 --> 01:39:58,400
we read that and we felt like yeah okay

01:39:56,960 --> 01:40:02,400
this is definitely

01:39:58,400 --> 01:40:05,520
what a client system is and um

01:40:02,400 --> 01:40:08,480
and we read we had we read on

01:40:05,520 --> 01:40:08,880
um because the nice thing about this is

01:40:08,480 --> 01:40:12,080
that

01:40:08,880 --> 01:40:13,760
with that idea of a reactive system you

01:40:12,080 --> 01:40:16,560
can actually now upgrade

01:40:13,760 --> 01:40:17,520
your idea architecture idea of data down

01:40:16,560 --> 01:40:20,480
actions up

01:40:17,520 --> 01:40:22,639
and you now finally have an idea of why

01:40:20,480 --> 01:40:24,239
things are so complicated and they feel

01:40:22,639 --> 01:40:27,600
much more complicated than

01:40:24,239 --> 01:40:30,639
what uh the the um

01:40:27,600 --> 01:40:32,639
what people tend to tell you when they

01:40:30,639 --> 01:40:35,600
talk about this transformational system

01:40:32,639 --> 01:40:36,000
that you're that you're apparently

01:40:35,600 --> 01:40:40,000
building

01:40:36,000 --> 01:40:42,400
right um this the the the image that you

01:40:40,000 --> 01:40:44,080
see on the screen now is basically our

01:40:42,400 --> 01:40:46,000
new idea of the world

01:40:44,080 --> 01:40:47,600
where we're like yeah okay um we're

01:40:46,000 --> 01:40:49,280
dealing with a reactive system and this

01:40:47,600 --> 01:40:51,280
is where the complexity actually lives

01:40:49,280 --> 01:40:53,119
right so we actually need to find out

01:40:51,280 --> 01:40:54,480
how to model and how to build this

01:40:53,119 --> 01:40:56,960
reactive system now

01:40:54,480 --> 01:40:57,520
and what patterns exist on how we can

01:40:56,960 --> 01:40:58,719
deal with

01:40:57,520 --> 01:41:01,920
the fact that we're dealing with a

01:40:58,719 --> 01:41:04,080
reactive system and lucky enough for us

01:41:01,920 --> 01:41:06,719
harrell proposes a solution to that in

01:41:04,080 --> 01:41:09,840
his paper and he states that

01:41:06,719 --> 01:41:12,880
and this is a pretty huge takeaway from

01:41:09,840 --> 01:41:14,639
the talk today he states that

01:41:12,880 --> 01:41:15,920
a reactive system is a totally different

01:41:14,639 --> 01:41:16,960
kind of system and it needs to be

01:41:15,920 --> 01:41:19,679
modeled differently

01:41:16,960 --> 01:41:21,280
and a practical practicable way to model

01:41:19,679 --> 01:41:23,760
these types of systems is

01:41:21,280 --> 01:41:25,520
to do that based on states events that

01:41:23,760 --> 01:41:26,000
occur in the system and transitions that

01:41:25,520 --> 01:41:28,080
happen

01:41:26,000 --> 01:41:29,840
based on the events that occur in the

01:41:28,080 --> 01:41:30,639
system and also side effects that can be

01:41:29,840 --> 01:41:33,119
triggered

01:41:30,639 --> 01:41:35,840
while transitions between states happen

01:41:33,119 --> 01:41:37,600
um he also argues that

01:41:35,840 --> 01:41:40,239
which which the react people are always

01:41:37,600 --> 01:41:41,679
telling us um

01:41:40,239 --> 01:41:44,000
or that might be something that react

01:41:41,679 --> 01:41:45,920
people would tell you then if you talk

01:41:44,000 --> 01:41:47,920
to them about reactive systems is that

01:41:45,920 --> 01:41:50,159
hey mathematically speaking a reactive

01:41:47,920 --> 01:41:51,679
system is just something that

01:41:50,159 --> 01:41:55,040
like a transformation that acts like a

01:41:51,679 --> 01:41:56,080
transformational system but it needs to

01:41:55,040 --> 01:41:58,239
needs to be modeled as a

01:41:56,080 --> 01:41:59,600
transformational system with a second

01:41:58,239 --> 01:42:01,360
input

01:41:59,600 --> 01:42:03,360
as the current time right so basically

01:42:01,360 --> 01:42:05,360
this is the continue we need to be able

01:42:03,360 --> 01:42:08,000
to re-render all the time idea

01:42:05,360 --> 01:42:10,199
that we that react uh proposes

01:42:08,000 --> 01:42:11,520
interestingly enough in the paper from

01:42:10,199 --> 01:42:13,760
01:42:11,520 --> 01:42:15,840
and harel states that and yes you

01:42:13,760 --> 01:42:18,000
mathematically speaking you could

01:42:15,840 --> 01:42:20,000
argue to do this but in practice it's

01:42:18,000 --> 01:42:22,080
just impractical and prone to failure

01:42:20,000 --> 01:42:23,440
because it just gets too complicated and

01:42:22,080 --> 01:42:25,760
a much much better idea to

01:42:23,440 --> 01:42:27,280
model these kinds of systems as i said

01:42:25,760 --> 01:42:28,719
based on states

01:42:27,280 --> 01:42:30,400
events that happen in the system

01:42:28,719 --> 01:42:32,719
transition between states

01:42:30,400 --> 01:42:34,000
and that happen based on the events that

01:42:32,719 --> 01:42:36,239
occur in the system

01:42:34,000 --> 01:42:38,560
and side effects that are triggered on

01:42:36,239 --> 01:42:41,600
state transitions

01:42:38,560 --> 01:42:44,800
and this is very cool because now we can

01:42:41,600 --> 01:42:46,320
and um i'm sorry to go back a little bit

01:42:44,800 --> 01:42:48,159
and the thing that you see on the screen

01:42:46,320 --> 01:42:49,920
here is called uh um is

01:42:48,159 --> 01:42:51,760
a visual language that harold also comes

01:42:49,920 --> 01:42:53,760
up with on how you can actually

01:42:51,760 --> 01:42:54,639
visualize the state transitions and

01:42:53,760 --> 01:42:57,040
events

01:42:54,639 --> 01:42:58,800
um pattern and the thing that on the

01:42:57,040 --> 01:43:01,040
screen is called a state chart right

01:42:58,800 --> 01:43:02,560
um it's really not too hard to

01:43:01,040 --> 01:43:03,840
understand if you already know state

01:43:02,560 --> 01:43:06,400
machines but

01:43:03,840 --> 01:43:08,080
it's more practical to work with because

01:43:06,400 --> 01:43:10,239
state charts

01:43:08,080 --> 01:43:11,440
in contrast to state machines actually

01:43:10,239 --> 01:43:14,480
support the idea of

01:43:11,440 --> 01:43:16,800
nesting parallel states and um

01:43:14,480 --> 01:43:18,159
yeah orthogonality in general so um

01:43:16,800 --> 01:43:18,480
they're much much easier to work with

01:43:18,159 --> 01:43:22,320
than

01:43:18,480 --> 01:43:25,199
than state machines um

01:43:22,320 --> 01:43:26,560
so the idea is to actually model your

01:43:25,199 --> 01:43:28,719
reactive system or

01:43:26,560 --> 01:43:29,760
how your reactive system should behave

01:43:28,719 --> 01:43:32,800
beforehand

01:43:29,760 --> 01:43:34,239
right and um basically move all the

01:43:32,800 --> 01:43:36,320
complexity into the

01:43:34,239 --> 01:43:37,520
model of your reactive system instead of

01:43:36,320 --> 01:43:38,960
having to keep track of all the

01:43:37,520 --> 01:43:40,480
complexity yourself

01:43:38,960 --> 01:43:42,159
inside of these action handlers that you

01:43:40,480 --> 01:43:45,600
call so our

01:43:42,159 --> 01:43:47,920
um architecture idea of an mr.js

01:43:45,600 --> 01:43:50,320
application has

01:43:47,920 --> 01:43:52,719
transitioned quite a bit and it has

01:43:50,320 --> 01:43:55,119
transitioned to this so in the

01:43:52,719 --> 01:43:57,040
at the top of over everything there's

01:43:55,119 --> 01:43:59,520
this idea of the reactive system that we

01:43:57,040 --> 01:44:01,600
model explicitly

01:43:59,520 --> 01:44:03,600
and this reactive system has state that

01:44:01,600 --> 01:44:05,280
we pass down into the template layer

01:44:03,600 --> 01:44:07,280
glimmer takes care of rendering the

01:44:05,280 --> 01:44:08,960
state and then whenever something needs

01:44:07,280 --> 01:44:10,639
to happen

01:44:08,960 --> 01:44:12,639
we just send an event to the model that

01:44:10,639 --> 01:44:15,679
we created before explicitly

01:44:12,639 --> 01:44:17,440
and this model takes care of

01:44:15,679 --> 01:44:20,000
figuring out what needs to happen next

01:44:17,440 --> 01:44:23,840
and if a state change should occur

01:44:20,000 --> 01:44:26,159
um we don't propose to

01:44:23,840 --> 01:44:27,360
which which might be important here we

01:44:26,159 --> 01:44:29,679
don't propose to

01:44:27,360 --> 01:44:32,000
think of your entire ember application

01:44:29,679 --> 01:44:34,639
as this one thing that you model

01:44:32,000 --> 01:44:35,280
explicitly in this view super huge state

01:44:34,639 --> 01:44:37,920
chart

01:44:35,280 --> 01:44:39,920
but harrell explicitly states that um a

01:44:37,920 --> 01:44:42,880
reactive system is made up

01:44:39,920 --> 01:44:43,679
of other nested reactive systems right

01:44:42,880 --> 01:44:46,080
and if you're

01:44:43,679 --> 01:44:48,000
from a in if you're dealing with

01:44:46,080 --> 01:44:50,239
front-end applications

01:44:48,000 --> 01:44:51,199
these smaller reactive systems you you

01:44:50,239 --> 01:44:54,400
can consider

01:44:51,199 --> 01:44:56,800
components smaller smaller

01:44:54,400 --> 01:44:58,960
reactive systems that in the sum of all

01:44:56,800 --> 01:45:01,440
things make up your reactive system

01:44:58,960 --> 01:45:04,000
in addition to the actual application

01:45:01,440 --> 01:45:07,119
behavior that you want to model

01:45:04,000 --> 01:45:09,440
so um this is a nice

01:45:07,119 --> 01:45:10,880
idea now right so we can actually just

01:45:09,440 --> 01:45:12,400
send events to reactive system and the

01:45:10,880 --> 01:45:13,040
reactive system figures out what to do

01:45:12,400 --> 01:45:15,600
next

01:45:13,040 --> 01:45:17,760
um but why is this now so revolutionary

01:45:15,600 --> 01:45:20,239
and why does it make it

01:45:17,760 --> 01:45:22,239
so much easier to model complex behavior

01:45:20,239 --> 01:45:23,920
and the reason for that is that

01:45:22,239 --> 01:45:25,840
it doesn't really matter what things

01:45:23,920 --> 01:45:27,280
occur in your system everything can be

01:45:25,840 --> 01:45:30,560
treated as an event right

01:45:27,280 --> 01:45:33,600
so um things like um

01:45:30,560 --> 01:45:35,520
a websocket event arriving or you can

01:45:33,600 --> 01:45:36,639
navigate or online change the event

01:45:35,520 --> 01:45:39,360
happening

01:45:36,639 --> 01:45:40,800
it's really not you you really don't

01:45:39,360 --> 01:45:42,800
have to think about

01:45:40,800 --> 01:45:44,560
how to handle that anymore you just

01:45:42,800 --> 01:45:47,679
model that explicitly

01:45:44,560 --> 01:45:48,880
and send the specific event to the to

01:45:47,679 --> 01:45:51,360
the model of the system

01:45:48,880 --> 01:45:52,800
and the system reacts automatically so

01:45:51,360 --> 01:45:54,560
the only thing that you have to do is

01:45:52,800 --> 01:45:56,719
basically model the system and then send

01:45:54,560 --> 01:45:59,199
events to it based on what happens

01:45:56,719 --> 01:46:00,400
in the ui from the internal or in

01:45:59,199 --> 01:46:02,159
external stimuli

01:46:00,400 --> 01:46:03,920
so that's got much much easier and it

01:46:02,159 --> 01:46:05,920
basically um

01:46:03,920 --> 01:46:07,520
gets rid of the entire complexity of

01:46:05,920 --> 01:46:09,040
front-end development

01:46:07,520 --> 01:46:11,440
um especially if you're dealing with

01:46:09,040 --> 01:46:14,639
behavior right um

01:46:11,440 --> 01:46:17,040
and i really said it

01:46:14,639 --> 01:46:19,040
gets rid of the complete complexity and

01:46:17,040 --> 01:46:20,880
it just makes everything easy basically

01:46:19,040 --> 01:46:22,639
and so you might get the idea that hey

01:46:20,880 --> 01:46:27,280
if that was so great and

01:46:22,639 --> 01:46:29,280
if that has been introduced 35 years ago

01:46:27,280 --> 01:46:32,560
if everything worked great with that why

01:46:29,280 --> 01:46:32,560
isn't everybody using that

01:46:32,719 --> 01:46:37,920
and why didn't nobody care about

01:46:36,239 --> 01:46:39,520
thinking that this might be a

01:46:37,920 --> 01:46:41,040
good solution for client-side

01:46:39,520 --> 01:46:44,320
application development

01:46:41,040 --> 01:46:46,400
and to explain that in more detail i

01:46:44,320 --> 01:46:49,679
want to give it over to clemens um

01:46:46,400 --> 01:46:51,040
because he has yeah he has he has

01:46:49,679 --> 01:46:55,840
thought about that more thoroughly than

01:46:51,040 --> 01:46:55,840
i did

01:47:06,239 --> 01:47:09,840
so you should see my screen right

01:47:10,960 --> 01:47:15,280
yes okay cool all right so after this

01:47:14,320 --> 01:47:18,400
short break

01:47:15,280 --> 01:47:19,520
um and letting this rest what michael

01:47:18,400 --> 01:47:22,880
basically was saying is

01:47:19,520 --> 01:47:25,199
um that we are proposing a

01:47:22,880 --> 01:47:27,199
a way to solve the inherent complexity

01:47:25,199 --> 01:47:28,880
and we're dealing with in the front end

01:47:27,199 --> 01:47:30,239
if this is such a groundbreaking way of

01:47:28,880 --> 01:47:32,000
thinking um

01:47:30,239 --> 01:47:33,360
how come this isn't used more vitally in

01:47:32,000 --> 01:47:36,080
the ui development

01:47:33,360 --> 01:47:36,639
how come this isn't talked about more is

01:47:36,080 --> 01:47:39,360
this maybe

01:47:36,639 --> 01:47:40,560
over engineering or is treating it as a

01:47:39,360 --> 01:47:42,960
reactive system

01:47:40,560 --> 01:47:43,920
making it more complex than it needs to

01:47:42,960 --> 01:47:45,920
be

01:47:43,920 --> 01:47:49,040
isn't all this relevant for embedded

01:47:45,920 --> 01:47:52,480
systems and maybe rocket science only

01:47:49,040 --> 01:47:54,159
and it turns out

01:47:52,480 --> 01:47:56,400
we're not the first one to propose this

01:47:54,159 --> 01:47:59,119
approach for frontend development

01:47:56,400 --> 01:47:59,920
this has already been discussed 22 years

01:47:59,119 --> 01:48:02,320
ago

01:47:59,920 --> 01:48:03,760
in a book with the promising title

01:48:02,320 --> 01:48:04,880
constructing the use interface with

01:48:03,760 --> 01:48:08,719
state shots

01:48:04,880 --> 01:48:12,000
by ian horox in his book

01:48:08,719 --> 01:48:14,480
ian horox proposes a methodological

01:48:12,000 --> 01:48:16,159
approach for developing user interfaces

01:48:14,480 --> 01:48:17,840
by using

01:48:16,159 --> 01:48:20,400
the tools that michael was talking about

01:48:17,840 --> 01:48:22,239
in the first half of the presentation

01:48:20,400 --> 01:48:24,400
so what we are doing basically is only

01:48:22,239 --> 01:48:25,119
to repeat what somebody said 22 years

01:48:24,400 --> 01:48:27,360
ago

01:48:25,119 --> 01:48:29,040
who repeats what somebody said 38 years

01:48:27,360 --> 01:48:32,080
ago we're merely

01:48:29,040 --> 01:48:33,679
standing on the shoulder of giants

01:48:32,080 --> 01:48:35,840
and by the way this book is very

01:48:33,679 --> 01:48:38,560
difficult get to

01:48:35,840 --> 01:48:40,400
to get so if you have a chance to get a

01:48:38,560 --> 01:48:42,320
physical copy of it

01:48:40,400 --> 01:48:44,400
you should buy it it's well worth the

01:48:42,320 --> 01:48:47,840
investment

01:48:44,400 --> 01:48:49,600
so we're now at the point um where

01:48:47,840 --> 01:48:51,040
an argument for reactive systems has

01:48:49,600 --> 01:48:52,560
been made and the way to describe them

01:48:51,040 --> 01:48:55,119
by state charts

01:48:52,560 --> 01:48:55,840
um this has been introduced um at this

01:48:55,119 --> 01:49:00,000
stage

01:48:55,840 --> 01:49:02,719
we always hear the same concerns

01:49:00,000 --> 01:49:03,520
um the most common response is that it's

01:49:02,719 --> 01:49:05,679
too

01:49:03,520 --> 01:49:06,960
too complex and adds unnecessary

01:49:05,679 --> 01:49:09,760
complexity

01:49:06,960 --> 01:49:10,239
a stage chart describing a relatively

01:49:09,760 --> 01:49:12,960
small

01:49:10,239 --> 01:49:14,400
problem or even a supposedly simple form

01:49:12,960 --> 01:49:18,000
abstraction can look

01:49:14,400 --> 01:49:20,320
intimidatingly complex our argument is

01:49:18,000 --> 01:49:22,239
that the state charts only make the

01:49:20,320 --> 01:49:23,440
implicit complexity of your system

01:49:22,239 --> 01:49:25,119
explicit

01:49:23,440 --> 01:49:26,960
and just because you don't want to see

01:49:25,119 --> 01:49:28,960
how complex your app is and

01:49:26,960 --> 01:49:31,199
how its behavior is doesn't mean the

01:49:28,960 --> 01:49:33,119
complexity isn't there

01:49:31,199 --> 01:49:35,280
also we're dealing with reactive systems

01:49:33,119 --> 01:49:37,280
remember that's what we've learned and

01:49:35,280 --> 01:49:40,000
they are inherently more complex than

01:49:37,280 --> 01:49:42,080
transformational bonds

01:49:40,000 --> 01:49:43,360
another concern we hear is that folks

01:49:42,080 --> 01:49:45,440
don't want to code

01:49:43,360 --> 01:49:46,960
and they want to code and not draw

01:49:45,440 --> 01:49:49,360
diagrams

01:49:46,960 --> 01:49:50,960
and to us this is an issue of

01:49:49,360 --> 01:49:52,800
development being only a part of

01:49:50,960 --> 01:49:55,280
engineering

01:49:52,800 --> 01:49:57,280
thinking about the system before it is

01:49:55,280 --> 01:49:58,719
coded helps his understanding of such a

01:49:57,280 --> 01:50:00,159
system and getting a better answer to

01:49:58,719 --> 01:50:03,199
the question of what it is

01:50:00,159 --> 01:50:05,440
we're actually building also

01:50:03,199 --> 01:50:07,360
as michael pointed out in the beginning

01:50:05,440 --> 01:50:09,599
you can use state charts

01:50:07,360 --> 01:50:11,119
programmatically so a stage chart

01:50:09,599 --> 01:50:12,719
describing the behavior can be used

01:50:11,119 --> 01:50:14,560
directly in code

01:50:12,719 --> 01:50:16,480
but this is not the the scope of this

01:50:14,560 --> 01:50:18,960
talk but yeah we'll

01:50:16,480 --> 01:50:21,440
get into this at the end of this talk

01:50:18,960 --> 01:50:23,679
and talk about it a bit more

01:50:21,440 --> 01:50:25,280
another concern we're hearing is that

01:50:23,679 --> 01:50:26,880
not another tool

01:50:25,280 --> 01:50:28,400
and we say that the thinking of the

01:50:26,880 --> 01:50:30,239
application as a reactive system

01:50:28,400 --> 01:50:31,679
and describing it with state charts is

01:50:30,239 --> 01:50:34,159
not another tool

01:50:31,679 --> 01:50:36,400
it's a correct mindset on how to think

01:50:34,159 --> 01:50:38,639
about the problem you're solving

01:50:36,400 --> 01:50:40,480
and even if stages aren't used in code

01:50:38,639 --> 01:50:41,520
again thinking about the system and

01:50:40,480 --> 01:50:43,119
describing it

01:50:41,520 --> 01:50:45,360
using the correct modeling language

01:50:43,119 --> 01:50:46,239
already helps with identifying edge

01:50:45,360 --> 01:50:48,719
cases

01:50:46,239 --> 01:50:50,239
a prime example for this would be the

01:50:48,719 --> 01:50:50,880
question of hey what actually happens

01:50:50,239 --> 01:50:54,000
when

01:50:50,880 --> 01:50:54,800
an error is happening in this state

01:50:54,000 --> 01:50:57,360
right here

01:50:54,800 --> 01:50:59,119
and a state chart makes obvious if

01:50:57,360 --> 01:51:03,199
transitions for example

01:50:59,119 --> 01:51:07,040
are missing and this brings us to the

01:51:03,199 --> 01:51:09,520
last concern which says that

01:51:07,040 --> 01:51:11,280
bottom up approach is fine so this is

01:51:09,520 --> 01:51:14,800
kind of analog to the point above about

01:51:11,280 --> 01:51:16,239
wanting to code and not draw diagrams

01:51:14,800 --> 01:51:18,560
coming up with code describing the

01:51:16,239 --> 01:51:20,159
behavior in an ad hoc way

01:51:18,560 --> 01:51:21,360
is riddled with bugs and hard to

01:51:20,159 --> 01:51:23,840
maintain and often breaking in

01:51:21,360 --> 01:51:27,280
mysterious hard to track stone ways

01:51:23,840 --> 01:51:30,080
having the behavior expressed visually

01:51:27,280 --> 01:51:31,360
um is a much better way to understand

01:51:30,080 --> 01:51:34,400
what's going on

01:51:31,360 --> 01:51:36,960
and within if the behaviors

01:51:34,400 --> 01:51:38,719
sprinkle around in code it's much more

01:51:36,960 --> 01:51:40,800
difficult to reason about

01:51:38,719 --> 01:51:43,440
so a visual representation trumps a

01:51:40,800 --> 01:51:47,280
textual one a state chart says more than

01:51:43,440 --> 01:51:48,400
thousand lines of code alright so to

01:51:47,280 --> 01:51:50,159
recap

01:51:48,400 --> 01:51:52,080
we talked about front-end applications

01:51:50,159 --> 01:51:53,199
being reactive system and state charts

01:51:52,080 --> 01:51:55,760
as a way

01:51:53,199 --> 01:51:57,280
to model them everything was quite

01:51:55,760 --> 01:51:59,280
theoretical for now so

01:51:57,280 --> 01:52:02,960
this is an ember meetup let's talk about

01:51:59,280 --> 01:52:05,760
how this is used in amp applications

01:52:02,960 --> 01:52:06,960
we told you that most complex apps can

01:52:05,760 --> 01:52:09,760
be modeled with

01:52:06,960 --> 01:52:10,719
this approach one of the most complex

01:52:09,760 --> 01:52:14,239
apps

01:52:10,719 --> 01:52:17,360
we know in the mbox ecosystem ecosystem

01:52:14,239 --> 01:52:20,000
will be docked in the next slide um

01:52:17,360 --> 01:52:21,679
it's a complex app because um it's not

01:52:20,000 --> 01:52:24,960
so trivial to implement

01:52:21,679 --> 01:52:30,159
um such an app in the

01:52:24,960 --> 01:52:34,480
yeah in the amber framework

01:52:30,159 --> 01:52:36,159
alex mciner as you might know

01:52:34,480 --> 01:52:37,679
he asked the question of how a certain

01:52:36,159 --> 01:52:39,520
type of application would be developed

01:52:37,679 --> 01:52:42,239
using amberjs

01:52:39,520 --> 01:52:44,719
the blog post is called ember rideshare

01:52:42,239 --> 01:52:47,679
and as you can see it's from 2017

01:52:44,719 --> 01:52:48,480
so four years later but it's still an

01:52:47,679 --> 01:52:51,440
opening

01:52:48,480 --> 01:52:52,639
issue so let's take a look um for the

01:52:51,440 --> 01:52:54,320
uninitiated who

01:52:52,639 --> 01:52:56,800
don't remember exactly what that four

01:52:54,320 --> 01:52:58,960
year old blog post was about

01:52:56,800 --> 01:53:00,960
so the blog post basically talks about

01:52:58,960 --> 01:53:04,800
an application similar to

01:53:00,960 --> 01:53:07,920
uber or lyft where a user logs in

01:53:04,800 --> 01:53:10,880
the location of the user is

01:53:07,920 --> 01:53:12,560
is determined then a map is shown with

01:53:10,880 --> 01:53:15,679
nearby drivers

01:53:12,560 --> 01:53:17,440
the user requests the riot he's waiting

01:53:15,679 --> 01:53:19,920
for that the right is assigned the

01:53:17,440 --> 01:53:22,400
driver then he awaits the big cup

01:53:19,920 --> 01:53:23,520
eventually gets picked up arrives at the

01:53:22,400 --> 01:53:26,239
destination

01:53:23,520 --> 01:53:27,599
and yeah basically that's the flow of

01:53:26,239 --> 01:53:31,119
the app

01:53:27,599 --> 01:53:31,920
and what alex outlines in his post is

01:53:31,119 --> 01:53:33,760
basically

01:53:31,920 --> 01:53:36,480
three issues which i'm gonna summarize

01:53:33,760 --> 01:53:38,960
on the next slide

01:53:36,480 --> 01:53:40,800
so the first one being stacked routing

01:53:38,960 --> 01:53:42,960
or navigation stack

01:53:40,800 --> 01:53:44,239
so basically this means that such an app

01:53:42,960 --> 01:53:47,520
would have a stack

01:53:44,239 --> 01:53:51,119
where screens or frames are

01:53:47,520 --> 01:53:53,679
popped on and pushed off from this stack

01:53:51,119 --> 01:53:56,239
this pattern is seen mostly in mobile

01:53:53,679 --> 01:53:59,119
use interfaces and he argues that

01:53:56,239 --> 01:54:00,400
such a pattern is hard to realize with

01:53:59,119 --> 01:54:02,719
manila ember

01:54:00,400 --> 01:54:04,239
using the conventional router

01:54:02,719 --> 01:54:06,840
infrastructure

01:54:04,239 --> 01:54:08,080
especially if you want to persist that

01:54:06,840 --> 01:54:11,280
stack

01:54:08,080 --> 01:54:12,480
yeah and getting back later the second

01:54:11,280 --> 01:54:14,480
issue raises is that

01:54:12,480 --> 01:54:15,679
urls are not so first class so alex

01:54:14,480 --> 01:54:17,760
argues that

01:54:15,679 --> 01:54:19,119
only about 20 of such a rideshare

01:54:17,760 --> 01:54:22,239
application

01:54:19,119 --> 01:54:22,800
would be accessible so only about 20 of

01:54:22,239 --> 01:54:25,760
a page

01:54:22,800 --> 01:54:27,840
of the pages of the writer application

01:54:25,760 --> 01:54:30,080
would be accessible at any given time

01:54:27,840 --> 01:54:31,760
depending on which state the app is in

01:54:30,080 --> 01:54:33,679
so an example of amber writeshare the

01:54:31,760 --> 01:54:34,239
user can't be in the request and you

01:54:33,679 --> 01:54:37,280
write

01:54:34,239 --> 01:54:39,760
route when a right is currently active

01:54:37,280 --> 01:54:41,040
and the question is where to put such an

01:54:39,760 --> 01:54:43,760
can i be in this route

01:54:41,040 --> 01:54:45,440
logic without having duplication

01:54:43,760 --> 01:54:47,920
sprinkle around in

01:54:45,440 --> 01:54:49,360
various before model hooks or whatever

01:54:47,920 --> 01:54:51,520
or however it is solved

01:54:49,360 --> 01:54:53,679
and this gets even more complicated when

01:54:51,520 --> 01:54:56,480
the server can send updates

01:54:53,679 --> 01:54:58,560
which need to be handled locally as well

01:54:56,480 --> 01:55:01,679
and this brings us to the

01:54:58,560 --> 01:55:04,639
last issue mentioned in the blog post

01:55:01,679 --> 01:55:06,159
being the server-side state changes so

01:55:04,639 --> 01:55:07,920
it's easy for front-end applications to

01:55:06,159 --> 01:55:10,560
consider the user as the sole

01:55:07,920 --> 01:55:12,320
originator of state changes but there

01:55:10,560 --> 01:55:12,639
can be state changes which are not bound

01:55:12,320 --> 01:55:14,639
to

01:55:12,639 --> 01:55:16,159
actions made by the user but instead are

01:55:14,639 --> 01:55:18,639
coming from the api

01:55:16,159 --> 01:55:20,320
so an example of amber rideshare we

01:55:18,639 --> 01:55:21,599
might need to navigate away from the

01:55:20,320 --> 01:55:26,000
driver's detail

01:55:21,599 --> 01:55:28,880
view when the driver became unavailable

01:55:26,000 --> 01:55:30,320
or we might need to show the next route

01:55:28,880 --> 01:55:32,320
when the rider arrived

01:55:30,320 --> 01:55:34,159
and this is depending on where the user

01:55:32,320 --> 01:55:37,520
is currently at the moment

01:55:34,159 --> 01:55:38,639
and yeah and the blog post calls for

01:55:37,520 --> 01:55:41,040
solutions for

01:55:38,639 --> 01:55:41,920
what alex calls so-called server-side

01:55:41,040 --> 01:55:45,280
driven apps

01:55:41,920 --> 01:55:48,080
and we propose that considering it as

01:55:45,280 --> 01:55:49,840
what it is then we erective system

01:55:48,080 --> 01:55:53,679
this helps modeling and solving the race

01:55:49,840 --> 01:55:55,520
problem let's ignore the stacked routing

01:55:53,679 --> 01:55:58,080
for now and only focus on the two main

01:55:55,520 --> 01:55:59,360
issues about the url and the server-side

01:55:58,080 --> 01:56:02,560
stations

01:55:59,360 --> 01:56:04,800
changes the issue basically is that the

01:56:02,560 --> 01:56:06,639
routing hierarchy and the url define

01:56:04,800 --> 01:56:09,199
what is rendered but don't offer enough

01:56:06,639 --> 01:56:11,119
flexibility

01:56:09,199 --> 01:56:12,960
when a state change or an event doesn't

01:56:11,119 --> 01:56:16,159
originate from the address bar

01:56:12,960 --> 01:56:16,159
or the click of a user

01:56:17,520 --> 01:56:20,719
so if you think about the amber writer

01:56:19,840 --> 01:56:22,639
example

01:56:20,719 --> 01:56:25,040
as a reactive system you can describe it

01:56:22,639 --> 01:56:26,560
on the high level as being in two states

01:56:25,040 --> 01:56:27,679
so in the first state the user is

01:56:26,560 --> 01:56:29,360
unauthorized unauthenticated then he

01:56:27,679 --> 01:56:32,480
logs in then he's in an authenticated

01:56:29,360 --> 01:56:32,480
state and then he can log out

01:56:34,320 --> 01:56:38,560
when we kind of zoom in into the

01:56:36,400 --> 01:56:40,800
authenticated state this can be refined

01:56:38,560 --> 01:56:42,639
into basically initially

01:56:40,800 --> 01:56:44,239
the user or is we're in a state of

01:56:42,639 --> 01:56:45,760
geolocating so basically getting the

01:56:44,239 --> 01:56:47,679
location of the user

01:56:45,760 --> 01:56:50,800
once that happens successfully we are in

01:56:47,679 --> 01:56:53,360
the state of showing the map for example

01:56:50,800 --> 01:56:54,159
and if the location fails for whatever

01:56:53,360 --> 01:56:57,840
reason

01:56:54,159 --> 01:56:57,840
we are in a dedicated era state

01:56:58,480 --> 01:57:02,800
and once we got the location we are in

01:57:00,960 --> 01:57:06,159
the state where we show the map

01:57:02,800 --> 01:57:09,199
and this can be further refined to

01:57:06,159 --> 01:57:12,400
um the following so initially we are

01:57:09,199 --> 01:57:14,080
ready then the user requests the right

01:57:12,400 --> 01:57:16,880
and then we are basically in the

01:57:14,080 --> 01:57:19,119
request write state in this state what

01:57:16,880 --> 01:57:20,880
can happen is basically for example

01:57:19,119 --> 01:57:22,480
that no driver is found so we go back to

01:57:20,880 --> 01:57:24,639
the ready state

01:57:22,480 --> 01:57:26,480
if we are requesting a right and a

01:57:24,639 --> 01:57:27,920
writer has been assigned then we go

01:57:26,480 --> 01:57:30,239
into the next state which is basically

01:57:27,920 --> 01:57:31,440
awaiting the pickup in this state for

01:57:30,239 --> 01:57:33,760
example

01:57:31,440 --> 01:57:35,119
uh the driver which was already assigned

01:57:33,760 --> 01:57:36,960
could have cancelled so we

01:57:35,119 --> 01:57:38,560
yeah we go back to the real estate or

01:57:36,960 --> 01:57:40,159
the user might decide to i want to

01:57:38,560 --> 01:57:42,560
cancel the right so

01:57:40,159 --> 01:57:44,159
he wants to cancel it we are because we

01:57:42,560 --> 01:57:46,159
want to confirm the cancellation by the

01:57:44,159 --> 01:57:47,840
user we are in a dedicated state

01:57:46,159 --> 01:57:49,520
let's call it councilwrite which the

01:57:47,840 --> 01:57:50,400
user can abort and be back at the

01:57:49,520 --> 01:57:52,639
waiting

01:57:50,400 --> 01:57:54,080
or a board uh really canceling your

01:57:52,639 --> 01:57:57,280
packet ready

01:57:54,080 --> 01:57:58,960
and in the happy path um when the user

01:57:57,280 --> 01:58:00,400
was awaiting the pickup

01:57:58,960 --> 01:58:02,719
and he gets picked up we are in the

01:58:00,400 --> 01:58:03,679
writing state and after we arrived we

01:58:02,719 --> 01:58:05,280
finished it can

01:58:03,679 --> 01:58:07,840
show a summary and then we can go back

01:58:05,280 --> 01:58:07,840
to the ready

01:58:09,360 --> 01:58:13,199
so we can zoom out again and see a whole

01:58:11,840 --> 01:58:17,280
behavior of the

01:58:13,199 --> 01:58:18,960
the rideshare application this diagram

01:58:17,280 --> 01:58:20,480
is easy to understand it basically just

01:58:18,960 --> 01:58:22,480
puts the textual description of the

01:58:20,480 --> 01:58:25,119
writer app into states

01:58:22,480 --> 01:58:25,840
and adds events between them it might

01:58:25,119 --> 01:58:28,080
seem

01:58:25,840 --> 01:58:30,719
a bit convoluted but the writer app

01:58:28,080 --> 01:58:33,920
apparently has some complexity

01:58:30,719 --> 01:58:35,040
and with that we're basically done

01:58:33,920 --> 01:58:39,280
describing the

01:58:35,040 --> 01:58:42,480
behavior of the of the right share

01:58:39,280 --> 01:58:43,199
system as we said before so we don't

01:58:42,480 --> 01:58:45,280
include the

01:58:43,199 --> 01:58:47,599
code samples since this talk is mainly

01:58:45,280 --> 01:58:49,119
about the mental model itself

01:58:47,599 --> 01:58:51,520
but you can use the diagram and

01:58:49,119 --> 01:58:53,440
translate it into executable code

01:58:51,520 --> 01:58:54,960
we plan to implement this as a case

01:58:53,440 --> 01:58:57,119
study with accompanying blog posts which

01:58:54,960 --> 01:59:00,560
go into greater detail

01:58:57,119 --> 01:59:04,239
but yes it's not

01:59:00,560 --> 01:59:06,239
again not topic for this talk so

01:59:04,239 --> 01:59:08,400
let's circle back to the state of the

01:59:06,239 --> 01:59:10,080
problems of amber wrightshire so

01:59:08,400 --> 01:59:12,080
since we modeled the application as a

01:59:10,080 --> 01:59:14,800
reactive system all state changes are

01:59:12,080 --> 01:59:17,520
solely handled by explicit events

01:59:14,800 --> 01:59:18,960
the url is not a central piece anymore

01:59:17,520 --> 01:59:20,400
around which the current state is

01:59:18,960 --> 01:59:22,080
defined

01:59:20,400 --> 01:59:24,080
it's basically only a byproduct and

01:59:22,080 --> 01:59:25,840
serves as an entry point

01:59:24,080 --> 01:59:27,440
telling the system basically dear

01:59:25,840 --> 01:59:29,760
reactive system

01:59:27,440 --> 01:59:31,360
please go into this state if you can and

01:59:29,760 --> 01:59:32,239
if the event is handled not handled in

01:59:31,360 --> 01:59:35,679
this state

01:59:32,239 --> 01:59:37,280
the event is simply ignored also since

01:59:35,679 --> 01:59:38,880
everything is event based it doesn't

01:59:37,280 --> 01:59:40,719
matter where the events are coming from

01:59:38,880 --> 01:59:42,800
this means the server-side state changes

01:59:40,719 --> 01:59:44,480
are a no-brainer and it's basically as

01:59:42,800 --> 01:59:46,239
simple as forwarding the

01:59:44,480 --> 01:59:48,400
corresponding event to the system and

01:59:46,239 --> 01:59:51,280
letting it decide on how to handle it

01:59:48,400 --> 01:59:53,840
and what state change might occur

01:59:51,280 --> 01:59:57,360
so we have seen that when we tweet the

01:59:53,840 --> 02:00:00,080
writer example as a reactive system

01:59:57,360 --> 02:00:00,080
the problems

02:00:00,480 --> 02:00:04,719
are going away because we are using a

02:00:03,440 --> 02:00:08,239
different way to model

02:00:04,719 --> 02:00:11,280
the system and this basically

02:00:08,239 --> 02:00:15,199
concludes the talk on the topic of

02:00:11,280 --> 02:00:18,960
developing reactive systems with amberjs

02:00:15,199 --> 02:00:18,960
so let's do a final recap

02:00:20,480 --> 02:00:25,199
so in the beginning we argued that the

02:00:23,199 --> 02:00:26,080
complexity of front-end applications is

02:00:25,199 --> 02:00:29,199
inherent because

02:00:26,080 --> 02:00:30,960
we are dealing with reactive systems

02:00:29,199 --> 02:00:33,920
we also showed that the state charts are

02:00:30,960 --> 02:00:35,679
a way to describe such systems

02:00:33,920 --> 02:00:37,599
in other industries like embedded

02:00:35,679 --> 02:00:39,679
systems or at nasa

02:00:37,599 --> 02:00:41,199
they use data charts all the time it

02:00:39,679 --> 02:00:42,639
seems that we are the only ones who

02:00:41,199 --> 02:00:46,000
build reactive systems

02:00:42,639 --> 02:00:46,000
but don't model them as such

02:00:46,159 --> 02:00:50,000
now if this box dock has picked your

02:00:48,400 --> 02:00:52,480
interest your next question might be

02:00:50,000 --> 02:00:54,560
where to go from here

02:00:52,480 --> 02:00:55,599
so we highly recommend reading through

02:00:54,560 --> 02:00:58,960
the

02:00:55,599 --> 02:01:00,800
paper on the reactive systems um

02:00:58,960 --> 02:01:02,880
you won't be you won't be surprised

02:01:00,800 --> 02:01:06,400
anymore of how familiar

02:01:02,880 --> 02:01:09,679
the concepts stated in there are to us

02:01:06,400 --> 02:01:11,360
front-end developers also the stage

02:01:09,679 --> 02:01:13,760
paper goes in a

02:01:11,360 --> 02:01:14,800
much greater detail of the overview and

02:01:13,760 --> 02:01:17,520
the formalism

02:01:14,800 --> 02:01:18,800
and characteristics of the state charts

02:01:17,520 --> 02:01:21,360
and he explains it in a very

02:01:18,800 --> 02:01:23,119
approachable way

02:01:21,360 --> 02:01:24,719
um even just using this datejust as a

02:01:23,119 --> 02:01:26,320
tool to think about your system is

02:01:24,719 --> 02:01:28,639
already helpful

02:01:26,320 --> 02:01:30,480
and once we got hooked here we certainly

02:01:28,639 --> 02:01:30,800
can't imagine engineering apps without

02:01:30,480 --> 02:01:34,400
them

02:01:30,800 --> 02:01:35,599
anymore if you want to know more how to

02:01:34,400 --> 02:01:37,520
use stages

02:01:35,599 --> 02:01:40,639
within your amber application um go

02:01:37,520 --> 02:01:42,719
check out the emberstagecharts.com

02:01:40,639 --> 02:01:44,400
home page which is basically the

02:01:42,719 --> 02:01:47,599
documentation for the add-on

02:01:44,400 --> 02:01:50,000
with um with sneak preview

02:01:47,599 --> 02:01:51,599
we've said in the beginning so basically

02:01:50,000 --> 02:01:53,920
this add-on allows you to

02:01:51,599 --> 02:01:55,280
use your visual stature configuration in

02:01:53,920 --> 02:01:56,480
code so you can use that described

02:01:55,280 --> 02:02:00,480
behavior

02:01:56,480 --> 02:02:04,639
um on amazon.com there's a long tutorial

02:02:00,480 --> 02:02:06,800
and the introduction of how um yeah

02:02:04,639 --> 02:02:09,280
state charts can be used um within amber

02:02:06,800 --> 02:02:11,520
applications

02:02:09,280 --> 02:02:13,119
so we presented our thinking for this

02:02:11,520 --> 02:02:14,719
paradigm for the first time in such a

02:02:13,119 --> 02:02:17,119
way to a bigger amber audience

02:02:14,719 --> 02:02:19,280
this is exciting and we're looking

02:02:17,119 --> 02:02:21,440
forward to the discussion

02:02:19,280 --> 02:02:22,560
um i want to close with this final

02:02:21,440 --> 02:02:24,400
statement

02:02:22,560 --> 02:02:27,119
if you only take one thing away from

02:02:24,400 --> 02:02:28,800
this presentation it should be this

02:02:27,119 --> 02:02:30,159
you're building a reactive system you

02:02:28,800 --> 02:02:31,920
can ignore that fact

02:02:30,159 --> 02:02:33,599
but we can tell you from our experience

02:02:31,920 --> 02:02:35,119
that if you embrace it

02:02:33,599 --> 02:02:38,239
you will have a much easier time

02:02:35,119 --> 02:02:38,239
building complex systems

02:02:41,920 --> 02:02:45,360
awesome thank you so much for this

02:02:43,360 --> 02:02:46,000
awesome talk has been really insightful

02:02:45,360 --> 02:02:48,560
as well

02:02:46,000 --> 02:02:49,040
uh to listen about like uh first of all

02:02:48,560 --> 02:02:51,280
your

02:02:49,040 --> 02:02:53,119
rationale and your research about like

02:02:51,280 --> 02:02:54,320
stage shots but also about lucky work in

02:02:53,119 --> 02:02:57,040
this regard

02:02:54,320 --> 02:02:59,040
and i already have like one question um

02:02:57,040 --> 02:03:01,199
how has the feedback been so far

02:02:59,040 --> 02:03:02,960
embassadors i haven't used it before so

02:03:01,199 --> 02:03:04,639
i'm kind of like also curious how

02:03:02,960 --> 02:03:06,560
uh kind of like community feedback

02:03:04,639 --> 02:03:09,840
husband

02:03:06,560 --> 02:03:11,679
um yeah so we have a channel on ember

02:03:09,840 --> 02:03:13,440
discord um

02:03:11,679 --> 02:03:15,199
what was kind of surprising to be honest

02:03:13,440 --> 02:03:19,040
was that it's in the top 10

02:03:15,199 --> 02:03:21,360
most downloaded add-ons um the

02:03:19,040 --> 02:03:24,159
so people seem to be using it um there's

02:03:21,360 --> 02:03:28,400
an active mrs daycharts channel where

02:03:24,159 --> 02:03:30,800
more and more people um are talking

02:03:28,400 --> 02:03:32,080
or collaborating on questions regarding

02:03:30,800 --> 02:03:34,639
stage arts right

02:03:32,080 --> 02:03:35,840
um the add-on is pretty old it's already

02:03:34,639 --> 02:03:37,760
three years old i think

02:03:35,840 --> 02:03:39,199
um because that's when we started

02:03:37,760 --> 02:03:42,480
actually using the

02:03:39,199 --> 02:03:44,719
paradigm in mr.js applications

02:03:42,480 --> 02:03:46,480
um so yeah people tend to use it and the

02:03:44,719 --> 02:03:47,280
feedback has been quite positive

02:03:46,480 --> 02:03:50,639
especially

02:03:47,280 --> 02:03:51,520
also with our clients so um we've been

02:03:50,639 --> 02:03:54,159
building

02:03:51,520 --> 02:03:54,880
apps since three years with a paradigm

02:03:54,159 --> 02:03:56,719
and

02:03:54,880 --> 02:03:58,800
basically all the clients that we

02:03:56,719 --> 02:04:01,119
consult for that we have introduced

02:03:58,800 --> 02:04:02,719
introduce the paradigm to are like oh my

02:04:01,119 --> 02:04:05,840
god this solves

02:04:02,719 --> 02:04:07,440
most of our problems um and this is what

02:04:05,840 --> 02:04:09,679
what clayman summarized at the end

02:04:07,440 --> 02:04:11,840
where it's like yeah we can act like

02:04:09,679 --> 02:04:13,840
we're not building a reactive system

02:04:11,840 --> 02:04:15,520
um but we actually are so we should

02:04:13,840 --> 02:04:18,480
actually model it as such right

02:04:15,520 --> 02:04:19,040
um and it really solves a lot of issues

02:04:18,480 --> 02:04:22,000
so

02:04:19,040 --> 02:04:22,400
from from my personal experience um i

02:04:22,000 --> 02:04:23,840
got

02:04:22,400 --> 02:04:26,000
from a situation where people were

02:04:23,840 --> 02:04:27,840
asking me to build stuff although i have

02:04:26,000 --> 02:04:30,719
a lot of experience building stuff

02:04:27,840 --> 02:04:31,199
and people approached me and asked me

02:04:30,719 --> 02:04:32,880
yeah

02:04:31,199 --> 02:04:35,040
i need to build this and that i need to

02:04:32,880 --> 02:04:36,239
build a super collaborative text editor

02:04:35,040 --> 02:04:39,520
or something like that

02:04:36,239 --> 02:04:40,159
um and before finding this concept i was

02:04:39,520 --> 02:04:42,480
like

02:04:40,159 --> 02:04:44,000
yeah um this could get hairy and

02:04:42,480 --> 02:04:45,119
nowadays it's really like yeah give me

02:04:44,000 --> 02:04:45,920
the most complex stuff that you can

02:04:45,119 --> 02:04:49,119
think about

02:04:45,920 --> 02:04:51,599
it's no issue at all to model that and

02:04:49,119 --> 02:04:52,400
um that's mostly what we hear from other

02:04:51,599 --> 02:04:55,440
people as well

02:04:52,400 --> 02:04:57,199
but also these initially the feedback is

02:04:55,440 --> 02:04:58,560
mostly this okay this is super

02:04:57,199 --> 02:05:00,560
complicated

02:04:58,560 --> 02:05:01,599
um this is also for the tutorial on the

02:05:00,560 --> 02:05:05,360
msda chats

02:05:01,599 --> 02:05:08,320
um webpage for example where we are

02:05:05,360 --> 02:05:09,520
building up uh an async button component

02:05:08,320 --> 02:05:11,440
and at the end if you look at the

02:05:09,520 --> 02:05:14,320
configuration that we create

02:05:11,440 --> 02:05:15,040
um it looks pretty hairy to be honest

02:05:14,320 --> 02:05:18,480
right

02:05:15,040 --> 02:05:20,320
um but as clemens pointed out this isn't

02:05:18,480 --> 02:05:22,239
because it's overly complicated

02:05:20,320 --> 02:05:23,360
this is simply because the thing that

02:05:22,239 --> 02:05:24,480
you're building is actually pretty

02:05:23,360 --> 02:05:26,560
complicated

02:05:24,480 --> 02:05:28,239
and we just may and and stages just make

02:05:26,560 --> 02:05:31,520
this complexity

02:05:28,239 --> 02:05:34,560
um uh explicit

02:05:31,520 --> 02:05:36,079
and the rest the rest of the coding

02:05:34,560 --> 02:05:37,840
experience with embargoes

02:05:36,079 --> 02:05:39,199
gets very very straightforward because

02:05:37,840 --> 02:05:40,239
literally the only thing that you have

02:05:39,199 --> 02:05:41,679
to do is

02:05:40,239 --> 02:05:43,440
forward events to the state chart and

02:05:41,679 --> 02:05:45,360
the state chart will take care of

02:05:43,440 --> 02:05:47,360
um figuring out what to do next and then

02:05:45,360 --> 02:05:49,520
you can actually hook up

02:05:47,360 --> 02:05:50,800
things like async requests and stuff

02:05:49,520 --> 02:05:53,679
like that

02:05:50,800 --> 02:05:54,880
the side effects that the statute should

02:05:53,679 --> 02:05:58,000
should trigger

02:05:54,880 --> 02:05:59,599
but overall the entire application

02:05:58,000 --> 02:06:01,679
development gets very very simple

02:05:59,599 --> 02:06:02,639
because you spend you spend some time

02:06:01,679 --> 02:06:04,000
actually

02:06:02,639 --> 02:06:06,239
thinking about what you're trying to

02:06:04,000 --> 02:06:09,679
build

02:06:06,239 --> 02:06:09,679
yeah that makes a lot of sense thinking

02:06:09,840 --> 02:06:17,840
any more questions in the group

02:06:25,040 --> 02:06:28,079
uh if there's none then maybe i would

02:06:26,719 --> 02:06:30,079
have like one more question

02:06:28,079 --> 02:06:32,000
how can people find out about this blog

02:06:30,079 --> 02:06:34,560
post that you talked about

02:06:32,000 --> 02:06:36,639
it goes a little more into detail into

02:06:34,560 --> 02:06:38,079
state charts if i understood this

02:06:36,639 --> 02:06:40,560
yeah there's a blog post on the

02:06:38,079 --> 02:06:45,040
effective ember

02:06:40,560 --> 02:06:47,760
homepage so effectivemba.com and then

02:06:45,040 --> 02:06:49,280
there's a blog post called um

02:06:47,760 --> 02:06:52,079
constructing robust

02:06:49,280 --> 02:06:53,119
robust applications with with stage ups

02:06:52,079 --> 02:06:55,599
or something like that

02:06:53,119 --> 02:06:56,560
and the um you'll be able to find it if

02:06:55,599 --> 02:06:58,880
you google for it

02:06:56,560 --> 02:07:01,040
and i can also post it in the chat real

02:06:58,880 --> 02:07:03,040
quick um

02:07:01,040 --> 02:07:04,079
yeah and what you're building there's

02:07:03,040 --> 02:07:06,400
this is important

02:07:04,079 --> 02:07:08,159
um because you don't have to mod your

02:07:06,400 --> 02:07:09,440
entire system with state shots right and

02:07:08,159 --> 02:07:10,719
you don't need to create this super

02:07:09,440 --> 02:07:12,639
intricate state chat

02:07:10,719 --> 02:07:14,480
um as the first thing that models your

02:07:12,639 --> 02:07:16,400
entire system you can also use that

02:07:14,480 --> 02:07:19,840
paradigm on the component layer

02:07:16,400 --> 02:07:22,079
um to just build out very complex com

02:07:19,840 --> 02:07:23,119
components honestly most components are

02:07:22,079 --> 02:07:24,880
complex enough that they should be

02:07:23,119 --> 02:07:28,159
driven by a stator in my opinion

02:07:24,880 --> 02:07:30,490
but yeah i post it in the chat and you

02:07:28,159 --> 02:07:31,760
can use that paradigm for component

02:07:30,490 --> 02:07:33,679
[Music]

02:07:31,760 --> 02:07:34,960
implementations as well so you don't

02:07:33,679 --> 02:07:37,360
have to go all in

02:07:34,960 --> 02:07:39,199
and restructure your entire application

02:07:37,360 --> 02:07:42,000
to make use of that paradigm

02:07:39,199 --> 02:07:44,960
yeah i just posted it to the channel

02:07:42,000 --> 02:07:44,960
yeah super thinking

02:07:45,599 --> 02:07:48,880
any more questions in the group

02:07:51,760 --> 02:07:55,760
if not then yeah i think it's much again

02:07:53,760 --> 02:07:59,440
like for this talk

02:07:55,760 --> 02:08:01,199
um and with this that this is already

02:07:59,440 --> 02:08:03,119
the end of our meetup thank you so much

02:08:01,199 --> 02:08:05,760
to all our speakers

02:08:03,119 --> 02:08:07,760
uh that actually uh gave like amazing

02:08:05,760 --> 02:08:09,199
talks gave a lot of like insight into

02:08:07,760 --> 02:08:10,880
how to build up really cool things like

02:08:09,199 --> 02:08:12,800
with ember um

02:08:10,880 --> 02:08:13,920
this has been really nice also thank you

02:08:12,800 --> 02:08:18,159
so much for the support

02:08:13,920 --> 02:08:21,679
on the uh recording by alex and also

02:08:18,159 --> 02:08:24,239
um everyone who supported the meetup um

02:08:21,679 --> 02:08:26,159
and everyone who actually joined and uh

02:08:24,239 --> 02:08:28,480
uh kind of like came together here today

02:08:26,159 --> 02:08:29,199
we're really uh happy to see all of you

02:08:28,480 --> 02:08:31,040
here

02:08:29,199 --> 02:08:33,360
if you want to keep up to date like with

02:08:31,040 --> 02:08:36,239
other upcoming events feel free to

02:08:33,360 --> 02:08:38,000
follow us on twitter as well as we said

02:08:36,239 --> 02:08:41,280
it's an every now and then meetup

02:08:38,000 --> 02:08:43,360
so yeah stay tuned and apart from this

02:08:41,280 --> 02:08:45,199
i would like to wish everyone a nice

02:08:43,360 --> 02:08:45,920
morning a nice day a nice evening last

02:08:45,199 --> 02:08:51,840
night

02:08:45,920 --> 02:08:51,840
and yeah see you around soon

02:09:04,830 --> 02:09:12,090
[Music]

02:09:08,990 --> 02:09:16,840
[Applause]

02:09:12,090 --> 02:09:18,270
[Music]

02:09:16,840 --> 02:09:19,290
foreign

02:09:18,270 --> 02:09:22,439
[Music]

02:09:19,290 --> 02:09:22,439
[Applause]

02:09:28,490 --> 02:09:34,300
[Music]

02:09:29,450 --> 02:09:40,039
[Applause]

02:09:34,300 --> 02:09:40,039
[Music]

02:09:44,840 --> 02:09:50,770
so

02:09:47,130 --> 02:09:50,770
[Music]

02:09:55,350 --> 02:09:58,419
[Music]

02:10:06,320 --> 02:10:15,840
[Music]

02:10:12,840 --> 02:10:15,840
hey

02:10:17,310 --> 02:10:35,470
[Music]

02:10:29,660 --> 02:10:40,629
[Applause]

02:10:35,470 --> 02:10:40,629
[Music]

02:10:40,840 --> 02:11:01,029
me

02:10:43,330 --> 02:11:01,029
[Music]

02:11:06,120 --> 02:11:11,920
[Music]

02:11:11,470 --> 02:11:21,530
[Applause]

02:11:11,920 --> 02:11:22,840
[Music]

02:11:21,530 --> 02:11:25,840
[Applause]

02:11:22,840 --> 02:11:25,840
a

02:11:30,150 --> 02:11:37,220
[Music]

02:11:48,290 --> 02:11:57,400
[Music]

02:11:52,460 --> 02:12:02,750
[Applause]

02:11:57,400 --> 02:12:05,890
[Music]

02:12:02,750 --> 02:12:05,890
[Applause]

02:12:11,950 --> 02:12:18,840
[Music]

02:12:12,910 --> 02:12:20,370
[Applause]

02:12:18,840 --> 02:12:23,500
so

02:12:20,370 --> 02:12:23,500
[Music]

02:12:28,070 --> 02:12:34,229
[Music]

02:12:38,810 --> 02:12:41,879
[Music]

02:12:49,780 --> 02:12:55,920
[Music]

02:12:53,840 --> 02:12:55,920

YouTube URL: https://www.youtube.com/watch?v=c-sWTZJ6nlM


