Title: Embroider: from zero to route splitting in 3.5 weeks - Ember.js Berlin - July 2021
Publication date: 2021-07-19
Playlist: Ember.js Berlin
Description: 
	Ben Demboski: "Embroider: from zero to route splitting in 3.5 weeks"

Embroider from zero to route splitting in 3.5 weeks. So a couple of months ago now I went through an effort of porting our app over to to embroider, took about three and a half weeks to, do the full thing. And I wrote up an article on it afterwards, and most of this talk is kind of adapted from that article.
So I'm gonna move relatively quickly through the kind of slides and the meat of the information to leave time for for questions because, you know, I could, could've just brought up my article and read it to you all, but that doesn't seem like the most interesting use of time here.


Chapters:
Intro [00:00:00] 
Greetings & About Me [00:00:38] 
Our app [00:02:09]
Embroider Impressions [00:04:40]
Embroider Overview [00:06:24]
The hard parts of porting to embroider [00:07:57] 
Experience getting support [00:12:43] 



_________________________________________________________________

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,090 --> 00:00:02,970
Embroider from zero to route splitting in 3.5 weeks.

00:00:02,970 --> 00:00:07,770
So a couple of months ago now I went through an effort of porting our app

00:00:07,800 --> 00:00:14,130
over to to embroider, took about three and a half weeks to, do the full thing.

00:00:14,370 --> 00:00:19,020
And I wrote up an article on it afterwards, and most of this talk is

00:00:19,020 --> 00:00:20,940
kind of adapted from that article.

00:00:21,600 --> 00:00:26,165
So I'm gonna move relatively quickly through the kind of slides and the

00:00:26,165 --> 00:00:30,905
meat of the information to leave time for for questions because, you

00:00:30,905 --> 00:00:34,144
know, I could, could've just brought up my article and read it to you

00:00:34,144 --> 00:00:37,415
all, but that doesn't seem like the most interesting use of time here.

00:00:37,504 --> 00:00:38,464
I skipped my greeting.

00:00:38,464 --> 00:00:42,155
I was going to say greetings from just becoming sunny Seattle.

00:00:42,477 --> 00:00:42,675
It's.

00:00:42,765 --> 00:00:46,560
It's not terribly, apocalyptically hot out here anymore.

00:00:46,560 --> 00:00:50,040
Like it was a couple of weeks ago, although it looks like our smoky

00:00:50,040 --> 00:00:51,510
season might be coming early.

00:00:51,510 --> 00:00:54,210
And so it might get terribly apocalyptically smoky in a

00:00:54,210 --> 00:00:56,820
couple of weeks, but right now it's beautiful and lovely.

00:00:56,820 --> 00:00:59,010
And and we're all enjoying it while it lasts.

00:00:59,599 --> 00:01:04,910
Who am I'm Ben Demboski, I'm the CTO at Rowan Patents, which is a company that

00:01:04,940 --> 00:01:09,500
does several different things, but the software portion of it focuses on building

00:01:09,800 --> 00:01:15,330
software for patent attorneys to to help automate their workflows and whatnot.

00:01:16,039 --> 00:01:20,210
I've used umber for about seven years both professionally and

00:01:20,210 --> 00:01:21,500
for kind of side projects.

00:01:22,736 --> 00:01:27,250
And I've learned everything I know about embroider in the process.

00:01:27,785 --> 00:01:29,044
Porting our app to it.

00:01:29,044 --> 00:01:33,095
I knew just a tiny bit about it and some theoretical benefits we'd

00:01:33,095 --> 00:01:34,703
get from it before I dove into it.

00:01:35,434 --> 00:01:38,585
I'm currently suffering from some amount of imposter syndrome because

00:01:38,585 --> 00:01:40,895
I'm by no means an embroider expert.

00:01:41,253 --> 00:01:43,925
Yet here I am you know, giving a talk about it.

00:01:44,510 --> 00:01:47,914
More, some guy that stumbled his way through the porting and learned a

00:01:47,914 --> 00:01:51,875
lot in the process, but, you know, I guess that's enough to to share, to

00:01:52,115 --> 00:01:57,344
help you all stumble your way through someday or you know, mayby then the,

00:01:57,604 --> 00:01:59,544
it'll thingsngs will be moved along.

00:01:59,544 --> 00:02:02,845
That they'll be, you know more, guides and whatnot and less stumbling.

00:02:04,134 --> 00:02:10,285
And you can find me on Twitter and discord either in either place at . So

00:02:11,005 --> 00:02:14,745
the app that we ported to, to embroider.

00:02:15,077 --> 00:02:21,045
So it's a multi window Ember electron desktop app, and think

00:02:21,045 --> 00:02:23,035
of it kind of like an IDE.

00:02:23,535 --> 00:02:26,475
That's how we think of it as an IDE for patent attorneys.

00:02:27,165 --> 00:02:28,725
Except for reasons.

00:02:29,930 --> 00:02:33,090
It, it, makes sense for their productivity to have things in

00:02:33,090 --> 00:02:36,870
multiple windows rather than just multiple panes within the same window.

00:02:36,900 --> 00:02:40,950
So the attorney will have multiple windows open with different tool sets in them at

00:02:40,950 --> 00:02:45,060
the same time they can cross reference and they're sinking data in between them.

00:02:45,930 --> 00:02:48,570
So a lot of the routes, a lot of our Ember routes are only

00:02:48,570 --> 00:02:50,400
ever rendered in one window.

00:02:51,120 --> 00:02:56,460
So loading the entire app and every window would be needlessly memory consumptive.

00:02:58,019 --> 00:03:01,649
I might've just made up that word, consumptive, needlessly consuming memory.

00:03:02,850 --> 00:03:06,359
And also more than just our Ember code.

00:03:06,359 --> 00:03:11,370
We have a lot of third-party libraries that are only used by code in, one window

00:03:11,370 --> 00:03:16,092
things to do natural language processing type analysis and that sort of thing.

00:03:16,980 --> 00:03:21,329
So for us memory footprint including code size is a big

00:03:21,329 --> 00:03:22,980
concern cause multiple windows.

00:03:23,470 --> 00:03:27,970
Multiplies the any, code that's loaded and all the windows, you know, gets

00:03:27,970 --> 00:03:33,070
multiplied by however many windows are open and it, can be a number of windows.

00:03:33,700 --> 00:03:36,579
And then I spit out some stats on our app, just so if you're.

00:03:37,545 --> 00:03:40,275
I don't know, compare yours to ours in terms of sizing,

00:03:40,275 --> 00:03:41,595
maybe the effort or something.

00:03:41,655 --> 00:03:47,625
So our goal in the porting was to was to control the, code driven memory

00:03:47,625 --> 00:03:53,775
footprint with minimal engineering efforts and to do that via tree

00:03:53,775 --> 00:03:55,875
shaking and, route splitting.

00:03:56,175 --> 00:04:01,545
And when I say tree shaking I realized after I wrote up these

00:04:01,545 --> 00:04:03,465
slides that it's, more than.

00:04:03,965 --> 00:04:08,495
Tree shaking, but basically let's just say modern JavaScript, bundling techniques

00:04:08,495 --> 00:04:12,935
for reducing the size of the bundle and tree shaking is a notable one of those,

00:04:12,935 --> 00:04:14,705
but there's a there's others as well.

00:04:14,885 --> 00:04:19,505
We had previously using Ember auto import and a whole bunch of manual

00:04:19,505 --> 00:04:23,885
Webpack configuration to explicitly strip out code that we didn't need

00:04:23,885 --> 00:04:27,865
in certain windows and stuff had achieved a pretty good amount of.

00:04:28,470 --> 00:04:31,980
Memory footprint managed code driven memory, footprint management,

00:04:32,010 --> 00:04:35,070
but the minimal engineering effort part was, not there.

00:04:35,280 --> 00:04:38,610
So we were looking for kind of a set it and forget it type solution

00:04:38,610 --> 00:04:40,080
with minimal ongoing maintenance.

00:04:40,350 --> 00:04:44,960
So before getting into some of the slightly nitty or grittier the, my

00:04:44,990 --> 00:04:48,410
overall impressions of embroider are more or less the same as they were.

00:04:48,870 --> 00:04:53,700
When I wrote the article that I would kind of classify as late stage alpha

00:04:53,760 --> 00:04:55,950
early stage beta quality software.

00:04:55,950 --> 00:04:59,940
So the core functionality is solid, fairly severe bugs.

00:04:59,940 --> 00:05:04,260
Aren't that uncommon still the documentation is somewhat minimal.

00:05:04,420 --> 00:05:06,990
Porting a complex app to embroider can be pretty.

00:05:07,414 --> 00:05:12,664
Effort intensive and keeping it up to date across new releases of embroider

00:05:12,784 --> 00:05:17,965
can also be somewhat effort intensive as it's still in a state where regressions,

00:05:18,115 --> 00:05:22,135
you know, come up and can, require some effort to figure out how to work

00:05:22,135 --> 00:05:24,865
around them or configure around them.

00:05:25,015 --> 00:05:27,679
But I did find that production stability is very high.

00:05:28,575 --> 00:05:32,744
None of those things that keep me up at night of, if I built it once in CI.

00:05:33,025 --> 00:05:35,755
And then I rebuild with exactly the same code and the

00:05:35,755 --> 00:05:37,164
production bundle is different.

00:05:37,344 --> 00:05:40,495
You know, none of that stuff happens.

00:05:40,885 --> 00:05:45,055
What I've found is that once, you know, once it's building and I've got

00:05:45,055 --> 00:05:47,515
it all lined up it's, very stable.

00:05:47,515 --> 00:05:50,605
It's just it's just as embroider changes.

00:05:51,145 --> 00:05:55,945
And and, evolve that introduces some instability updating

00:05:55,945 --> 00:05:57,355
to those newer versions.

00:05:58,185 --> 00:06:01,585
The dev environment stability I've, found to be pretty high.

00:06:02,155 --> 00:06:03,355
It's pretty stable.

00:06:03,355 --> 00:06:07,966
There's some minor hiccups, nothing that I've found to be a major issue.

00:06:08,725 --> 00:06:12,865
And I think a lot of that is, has to do with kind of source map

00:06:12,895 --> 00:06:16,075
flakiness, which often just refreshing the window a couple of times.

00:06:16,135 --> 00:06:19,705
I'm not sure if that's really embroiders fault or webpacks fault or.

00:06:20,515 --> 00:06:21,715
Chrome dev tools as well.

00:06:22,375 --> 00:06:24,115
So those are my high-level impressions.

00:06:24,731 --> 00:06:31,375
So I kind of really over-simplified overview of, what embroider does.

00:06:31,645 --> 00:06:38,365
Is it is it takes your, Ember app and, assembles it and all of the ad-ons into a

00:06:38,365 --> 00:06:43,235
kind of a vanilla, NodeJS project that's kind of hidden or already resolved all the

00:06:43,235 --> 00:06:45,664
unique behaviors of Ember and Ember CLI.

00:06:45,664 --> 00:06:51,034
So it's, run the broccoli pipeline and gotten all the add-ons to contribute their

00:06:51,034 --> 00:06:57,425
assets, but then it assembles it into a kind of static node JS project with

00:06:57,425 --> 00:07:01,955
the package that JSON and node modules put in the right place and whatnot.

00:07:02,284 --> 00:07:03,125
So that then.

00:07:03,559 --> 00:07:09,770
It can point a standard packager like web pack is the current one

00:07:09,770 --> 00:07:13,190
that's supported, although the working on support for, some others.

00:07:13,190 --> 00:07:16,400
But in theory, you should be able to use anything Webpack or

00:07:16,400 --> 00:07:18,140
roll up or anything like that.

00:07:18,715 --> 00:07:20,690
But yeah, I can point Webpack at it.

00:07:21,500 --> 00:07:23,709
And then with some custom loaders and whatnot.

00:07:23,799 --> 00:07:26,979
Then Webpack turns it into a browser bundle.

00:07:27,130 --> 00:07:30,390
So one of the big goals is to leverage everything that's been done out in

00:07:30,390 --> 00:07:34,169
the community, on, on bundlers rather than Ember having to maintain our

00:07:34,169 --> 00:07:37,320
own bundler that kind of duplicates a bunch of functionality that

00:07:37,320 --> 00:07:38,490
the broader community is working.

00:07:39,696 --> 00:07:44,270
And then the last step is it injects the, bundled script, another web pack,

00:07:44,270 --> 00:07:48,620
generated resources back into your index that HTML using some of those special

00:07:48,620 --> 00:07:54,169
rules that that, we have a number where the root URL gets filled in, if you're

00:07:54,409 --> 00:07:56,419
hosting on a CDN and that sort of stuff.

00:07:57,200 --> 00:08:01,625
So that's kind of an overview of what embroider does.

00:08:01,655 --> 00:08:05,735
And my reason for is, to provide some context for some of the hard parts

00:08:05,735 --> 00:08:07,625
that I found according to embroider.

00:08:07,955 --> 00:08:12,755
So one of them was the package that JSON dependencies, when embroiders

00:08:12,815 --> 00:08:16,565
assembling the vanilla node JS version of the application, that relies

00:08:16,595 --> 00:08:21,725
heavily on information in the apps and add-ons package dot JSON to set

00:08:21,725 --> 00:08:25,055
things up properly, to know which packages to include and the kind of

00:08:25,055 --> 00:08:28,445
assembled, you know, vanilla JS package.

00:08:29,350 --> 00:08:34,659
So that Webpack will do the right thing and so missing dependencies, but under

00:08:34,659 --> 00:08:38,740
Ember CLI it was fine because the package was still a node modules, because it

00:08:38,740 --> 00:08:43,240
was a transitive dependency of some add on, but your app didn't call it out as

00:08:43,240 --> 00:08:46,700
a dependency, even though it imported it, that would work in Ember CLI.

00:08:47,365 --> 00:08:49,075
That would break under embroider.

00:08:49,345 --> 00:08:51,265
So there's a bunch of cases where yeah.

00:08:51,295 --> 00:08:55,555
We had to do some fiddling with undeclared dependencies or tricks

00:08:55,555 --> 00:08:58,855
that we'd play with putting something in peer dependencies instead of

00:08:58,855 --> 00:09:00,475
declaring our own dependency on it.

00:09:00,835 --> 00:09:06,655
That that that, took some doing to get that all woanother one that's,

00:09:06,675 --> 00:09:09,070
ES6 that might be ES5 module compliant.

00:09:09,090 --> 00:09:13,290
I can never quite remember the distinction between ES5 and ES6 modules.

00:09:13,680 --> 00:09:19,290
But the idea is that the Webpack static analysis of the code is based on stricter

00:09:19,290 --> 00:09:24,810
module resolution rules than, embers kind of runtime module loader or.

00:09:25,455 --> 00:09:30,105
Or the, way the code gets transpiled into runtime modules.

00:09:30,375 --> 00:09:32,745
So a lot of slightly incorrect imports.

00:09:32,955 --> 00:09:36,225
For example, I think this one isn't actually a problem, but the example

00:09:36,225 --> 00:09:40,185
of the sort of thing I'm talking about is if a module has a bunch

00:09:40,185 --> 00:09:46,215
of named exports and you consume it by importing a single default.

00:09:47,199 --> 00:09:52,580
Export and then accessing the name to export as properties on the default export

00:09:52,880 --> 00:09:57,699
that's not actually correct because the module isn't producing a default export,

00:09:57,699 --> 00:09:59,407
it's only producing, named exports.

00:10:00,520 --> 00:10:03,640
I think embroider, I think Webpack might just give a warning on that one,

00:10:03,640 --> 00:10:07,000
but that's the sort of issue that we ran into in a number of places where

00:10:07,000 --> 00:10:08,469
just imports weren't quite right.

00:10:09,069 --> 00:10:10,959
Statically analyzable components.

00:10:11,319 --> 00:10:13,949
So there's a whole section in the embroider read-me's

00:10:14,170 --> 00:10:15,040
on kind of how to deal with.

00:10:15,435 --> 00:10:18,765
But, you know, sometimes in ember we use the component helper and can play

00:10:18,765 --> 00:10:23,055
a little fast and loose where maybe one component gets past an argument,

00:10:23,084 --> 00:10:25,035
that's the name of another component.

00:10:25,275 --> 00:10:29,864
And then internally uses the component helper to invoke that component.

00:10:30,135 --> 00:10:34,275
And when moving to the optimized embroider settings.

00:10:34,454 --> 00:10:39,584
So, so by default there's a baseline of, embroider settings, but to get to,

00:10:40,074 --> 00:10:44,714
to a bunch of optimizations, including route splitting need to enable a,

00:10:44,714 --> 00:10:50,415
higher bar of of settings that allows embroider to do more static analysis.

00:10:50,714 --> 00:10:55,334
And one those is, a component so that it embroider can understandand part of it

00:10:55,334 --> 00:10:58,574
is being able to tree shake components, being able to look through the templates

00:10:58,574 --> 00:11:01,814
and see what components are and aren't referenced so that it can leave out.

00:11:02,445 --> 00:11:05,625
Components that actually aren't referenced anywhere you know,

00:11:05,625 --> 00:11:07,035
in an add on, for example.

00:11:07,175 --> 00:11:10,115
So it definitely took some fiddling, cause there were places where we were

00:11:10,115 --> 00:11:14,315
playing little tricks with how we, kind of dynamically invoked components

00:11:14,375 --> 00:11:18,005
that needed to clean up CSS and SAS.

00:11:18,005 --> 00:11:20,355
Like I say, in the article, unfortunately I didn't keep notes

00:11:20,375 --> 00:11:21,575
on that when I was doing it.

00:11:21,575 --> 00:11:26,765
So I don't, I can't quite recall exactly what the issues were there, but there was

00:11:26,765 --> 00:11:30,275
enough, differences between how Ember CLI.

00:11:31,060 --> 00:11:36,070
Kind of assemble CSS and embroider assemble CSS that we ran into

00:11:36,070 --> 00:11:38,980
some styling issues and had to shuffle some things around.

00:11:39,430 --> 00:11:42,310
And then the big one is third party add ons because all those things

00:11:42,310 --> 00:11:45,670
that I just listed when they're directly under my control in my

00:11:45,670 --> 00:11:47,320
code, I can go in and fix them.

00:11:47,590 --> 00:11:48,450
Third party, add on.

00:11:49,255 --> 00:11:52,615
Is, you know, I can't, just fix it immediately.

00:11:52,615 --> 00:11:57,204
So in some cases contributing fixes and other cases, finding work arounds through

00:11:57,204 --> 00:12:02,905
Webpack configs, or embroider configs to to address all of those previous

00:12:02,905 --> 00:12:07,795
issues, but in the context of third party, add ons and over in the article

00:12:07,795 --> 00:12:12,595
that I linked to at the beginning of, of the presentation, I actually list

00:12:12,595 --> 00:12:17,814
out all the major ones that required effort and explain what was needed.

00:12:18,785 --> 00:12:21,584
That's probably a little obsolete now, because I know at least

00:12:21,584 --> 00:12:24,344
one or two of those have been addressed since I wrote the article.

00:12:24,375 --> 00:12:28,875
But that can give you a sense of the kinds of challenges that you've run into.

00:12:28,875 --> 00:12:33,045
And then also maybe flag some specific ad-ons that you might, yknow, use

00:12:33,814 --> 00:12:35,295
that, that, areare problematic.

00:12:35,564 --> 00:12:36,015
Fortunately.

00:12:36,560 --> 00:12:37,819
Mentioned all the workarounds.

00:12:37,880 --> 00:12:41,270
So for the ones that, for the problems that I ran into, so

00:12:41,270 --> 00:12:42,920
hopefully that'll help some folks out.

00:12:43,189 --> 00:12:47,270
Kind of my, this is my my last slide before we, you know, turn it over to

00:12:47,620 --> 00:12:50,159
Q&A, but my experience getting support.

00:12:50,694 --> 00:12:55,490
So I found that the dev embroidered discord channel was Pretty helpful.

00:12:55,730 --> 00:12:57,589
There's folks hanging out there that can share their

00:12:57,589 --> 00:12:59,300
experiences and answer questions.

00:12:59,540 --> 00:13:04,939
Some of the kind of core drivers of, embroider you know, Ed Faulkner and

00:13:05,410 --> 00:13:13,250
you know and Rob Jackson are there, you know, but they're, busy folks, so can't

00:13:13,250 --> 00:13:17,510
reliably, you know get, support directly from them, but the, channel, but they

00:13:17,510 --> 00:13:19,280
do pop in and out and answer questions.

00:13:19,280 --> 00:13:22,069
And so the, channel is I found was pretty helpful.

00:13:22,130 --> 00:13:25,130
I found that bugs don't always get addressed very quickly.

00:13:25,130 --> 00:13:28,250
Cause again, I think there's just a lot, that's still being done on it,

00:13:28,280 --> 00:13:31,609
but I found that tpull requests to get get attention pretty quickly.

00:13:31,609 --> 00:13:34,920
And it's relatively easy to get some support from, er...

00:13:34,939 --> 00:13:36,750
Or from, you kother folks in terms of

00:13:36,930 --> 00:13:38,310
shepherding PR's through.

00:13:38,699 --> 00:13:42,030
Yeah, like I mentioned, the core team was pretty helpful in providing advice

00:13:42,030 --> 00:13:44,550
for investigating and fixing bugs.

00:13:44,760 --> 00:13:48,780
And I found that the embroider code base itself, as far as diving in

00:13:48,780 --> 00:13:51,930
to just investigate and figure out how to work around something or

00:13:51,930 --> 00:13:55,500
contribute back a fix the embroider code base looks kind of intimidating.

00:13:56,000 --> 00:14:00,350
It isn't too terribly hard to kind of dig into and investigate issues once,

00:14:00,770 --> 00:14:04,250
you know, a little bit of time getting comfortable with where the pieces are.

00:14:04,610 --> 00:14:10,010
But then my experience with the code base was pretty pretty positive.

00:14:10,010 --> 00:14:14,870
And I did manage to contribute a few fixes back for, issues that I was running into.

00:14:15,050 --> 00:14:16,670
So that's all that I had.

00:14:17,120 --> 00:14:18,674
Presentation wise.

00:14:19,490 --> 00:14:25,940
And like I said, I wanted to save time for, any questions that folks have.

00:14:26,120 --> 00:14:28,550

YouTube URL: https://www.youtube.com/watch?v=AgSNGg8zaQg


